/*
* Copyright (c) 2024 Huawei Device Co., Ltd.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import { ItemDataSource } from '../model/ItemDataSource';
import { ItemData } from '../model/ItemData';
import { genMockItemData } from '../common/MockData';

@Builder
function buildImproperReuseOfComponentsScene2() {
  ImproperReuseOfComponentsScene2()
}

// 复用嵌套
@Component
struct ImproperReuseOfComponentsScene2 {
  private dataSource: ItemDataSource = new ItemDataSource();

  aboutToAppear(): void {
    this.dataSource.pushArray(genMockItemData(1000));
  }

  build() {
    NavDestination() {
      Column() {
        List() {
          LazyForEach(this.dataSource, (item: ItemData) => {
            ListItem() {
              NewsContent({ item: item })
            }
          }, (item: ItemData) => item.id.toString())
        }
        .expandSafeArea([SafeAreaType.SYSTEM], [SafeAreaEdge.BOTTOM])
        .cachedCount(1)
        .width('100%')
        .height('100%')
      }
      .width('100%')
      .height('100%')
    }
  }
}

@Reusable
@Component
struct NewsContent {
  @ObjectLink item: ItemData;

  @Builder
  myBuilder(item: ItemData) {
    TopView({ item: item })
    MiddleSingleImageView({ item: item })
    BottomView({ item: item })
  }

  build() {
    Column() {
      this.myBuilder(this.item)
    }
    .alignItems(HorizontalAlign.Start)
    .padding({
      top: 16,
      bottom: 12,
      left: 16,
      right: 16
    })
    .margin({
      top: 12,
      left: 16,
      right: 16
    })
    .borderRadius(12)
    .backgroundColor(Color.White)
  }
}

@Reusable
@Component
struct TopView {
  @ObjectLink item: ItemData;

  build() {
    Text(this.item.title)
      .fontSize(16)
      .fontWeight(FontWeight.Medium)
      .fontColor(Color.Black)
      .maxLines(2)
      .lineHeight(22)
      .opacity(0.9)
      .textOverflow({ overflow: TextOverflow.Ellipsis })
      .width('100%')
  }
}

@Reusable
@Component
struct BottomView {
  @ObjectLink item: ItemData;

  build() {
    Text(this.item.tail)
      .fontSize(12)
      .opacity(0.4)
      .fontWeight(FontWeight.Regular)
      .margin({ left: 6, top: 12 })
      .width('100%')
  }
}

@Reusable
@Component
struct MiddleSingleImageView {
  @ObjectLink item: ItemData;

  build() {
    Image(this.item.preview)
      .width(158)
      .height(96)
      .borderRadius(8)
      .margin({ top: 8 })
  }
}