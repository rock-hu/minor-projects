import mustache from 'mustache';

const TEMPLATE = `
/**
 * This code was generated by "react-native codegen-harmony"
 *
 * Do not edit this file as changes may cause incorrect behavior and will be
 * lost once the code is regenerated.
 *
 * @generatorVersion: 2
 */
#pragma once

{{#libraries}}
#include <react/renderer/components/{{name}}/ComponentDescriptors.h>
{{/libraries}}
#include "RNOH/Package.h"
#include "RNOH/ArkTSTurboModule.h"
{{#turboModules}}
#include "RNOH/generated/turbo_modules/{{name}}.h"
{{/turboModules}}
{{#components}}
#include "RNOH/generated/components/{{name}}JSIBinder.h"
{{/components}}

namespace rnoh {

class {{name}}TurboModuleFactoryDelegate : public TurboModuleFactoryDelegate {
  public:
    SharedTurboModule createTurboModule(Context ctx, const std::string &name) const override {
        {{#turboModules}}
        if (name == "{{name}}") {
            return std::make_shared<{{name}}>(ctx, name);
        }
        {{/turboModules}}
        return nullptr;
    };
};

class {{name}} : public Package {
  public:
    {{name}}(Package::Context ctx) : Package(ctx){};

    std::unique_ptr<TurboModuleFactoryDelegate> createTurboModuleFactoryDelegate() override {
        return std::make_unique<{{name}}TurboModuleFactoryDelegate>();
    }

    std::vector<facebook::react::ComponentDescriptorProvider> createComponentDescriptorProviders() override {
        return {
            {{#components}}
            facebook::react::concreteComponentDescriptorProvider<facebook::react::{{name}}ComponentDescriptor>(),
            {{/components}}
        };
    }

    ComponentJSIBinderByString createComponentJSIBinderByName() override {
        return {
            {{#components}}
            {"{{name}}", std::make_shared<{{name}}JSIBinder>()},
            {{/components}}
        };
    };

    EventEmitRequestHandlers createEventEmitRequestHandlers() override {
        return {};
    }
};

} // namespace rnoh
`;

type GeneratedPackageTurboModule = {
  name: string;
};

type GeneratedPackageComponent = {
  name: string;
  libraryName: string;
};

export class BasePackageHTemplate {
  private turboModules: GeneratedPackageTurboModule[] = [];
  private components: GeneratedPackageComponent[] = [];
  private libraryNames = new Set<string>();

  constructor(private name: string) {}

  addTurboModule(turboModule: GeneratedPackageTurboModule) {
    this.turboModules.push(turboModule);
  }

  addComponent(component: GeneratedPackageComponent) {
    this.components.push(component);
    this.libraryNames.add(component.libraryName);
  }

  build(): string {
    return mustache.render(TEMPLATE.trimStart(), {
      name: this.name,
      turboModules: this.turboModules,
      components: this.components,
      libraries: Array.from(this.libraryNames).map((name) => ({
        name,
      })),
    });
  }
}
