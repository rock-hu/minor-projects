/**
 * This code was generated by
 * [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be
 * lost once this code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#include "NativeCxxModuleExampleCxxSpec.h"

using namespace rnoh;
using namespace facebook;
using namespace react;


bool NativeCxxModuleExampleCxxSpecJSI::getBool(
    jsi::Runtime &rt, 
    bool arg) {
  return arg;  
}

int32_t NativeCxxModuleExampleCxxSpecJSI::getEnum(
    jsi::Runtime &rt, 
    int32_t arg) {
  return arg;  
}
std::set<float> NativeCxxModuleExampleCxxSpecJSI::getSet(
    jsi::Runtime &rt,
    std::set<float> arg) {
  return arg;  
}

double NativeCxxModuleExampleCxxSpecJSI::getNumber(
    jsi::Runtime& rt, 
    double arg) {
  return arg;
}

ValueStruct NativeCxxModuleExampleCxxSpecJSI::getValue(
    jsi::Runtime& rt,
    double x,
    std::string y,
    objectStruct z) {
  ValueStruct result{x, y, z};
  return result;  
}

std::vector<std::optional<ObjectStruct>>
NativeCxxModuleExampleCxxSpecJSI::getArray(
    jsi::Runtime &rt, 
    std::vector<std::optional<ObjectStruct>> arg) {
  return arg;
}

ConstantsStruct NativeCxxModuleExampleCxxSpecJSI::getConstants(
    jsi::Runtime& rt) {
  return ConstantsStruct{true, 69, "react-native"};
}

objectStruct NativeCxxModuleExampleCxxSpecJSI::getObject(
    jsi::Runtime& rt,
    objectStruct arg) {
  return arg;
}

std::string NativeCxxModuleExampleCxxSpecJSI::getUnion(
    jsi::Runtime& rt,
    float x,
    std::string y,
    jsi::Object z) {
    std::string result = "x: " + std::to_string(x) + ", y: " + y + ", z: {";
    if (z.hasProperty(rt, "value")) {
       result += "value: ";
       result += std::to_string(z.getProperty(rt, "value").getNumber());
    }  else if(z.hasProperty(rt, "low")) {
       result += "low: ";
       result += z.getProperty(rt, "low").getString(rt).utf8(rt);
    }
       result += " }";
    return result;
}

std::string NativeCxxModuleExampleCxxSpecJSI::getString(
    jsi::Runtime &rt, 
    std::string arg) { 
  return arg; 
}

jsi::String NativeCxxModuleExampleCxxSpecJSI::getValueWithCallback(
    jsi::Runtime& rt){
    jsi::String jsString = facebook::jsi::String::createFromUtf8(rt, "value from callback!");
  return jsString; 
}

void NativeCxxModuleExampleCxxSpecJSI::voidFunc(jsi::Runtime &rt) {
    // Nothing to do
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValueWithCallback(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args, 
    size_t count) {
    jsi::String str = static_cast<NativeCxxModuleExampleCxxSpecJSI*>(&turboModule)
         ->getValueWithCallback(rt);
    std::string result = str.utf8(rt);
    return jsi::String::createFromUtf8(rt, result);
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValueWithPromise(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args, 
    size_t count) {
    bool error = args[0].asBool();
    return createPromiseAsJSIValue(
      rt, [error](jsi::Runtime &rt2, std::shared_ptr<facebook::react::Promise> promise) {
        if (error) {
          promise->reject("intentional promise rejection");
        } else {
          promise->resolve(jsi::String::createFromUtf8(rt2, "result!"));
        }
    });
}

std::map<std::string,std::optional<int32_t>> NativeCxxModuleExampleCxxSpecJSI::getMap(
    jsi::Runtime& rt,
    std::map<std::string,std::optional<int32_t>> arg) {
  return arg;  
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getObject(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args,
    size_t count) {
    jsi::Object obj =  args[0].asObject(rt);
    auto a = obj.getProperty(rt, "a");
    auto b = obj.getProperty(rt, "b");
    objectStruct objStruct{ 1, b.getString(rt).utf8(rt)};
    auto result = static_cast<NativeCxxModuleExampleCxxSpecJSI*>(&turboModule)
            ->getObject(rt,objStruct);
    jsi::Object jobj(rt);
    jobj.setProperty(rt, "a", result.a); 
    jobj.setProperty(rt, "b", jsi::String::createFromUtf8(rt, result.b));
    return jobj;
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getArray(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args, 
    size_t count) {
    jsi::Array arr = args[0].asObject(rt).asArray(rt);

    int size = arr.size(rt);
    std::vector<std::optional<ObjectStruct>> array;
    for (int i = 0; i < size; i++) {
        auto value = arr.getValueAtIndex(rt, i);
        if (!value.isObject()) {
            array.push_back(std::nullopt);
            continue;
        }
        auto obj = value.asObject(rt);
        auto a = obj.getProperty(rt, "a");
        auto b = obj.getProperty(rt, "b");
        ObjectStruct objStruct{"1", b.getString(rt).utf8(rt), ""};
        array.push_back(objStruct);
    }
    auto result = static_cast<NativeCxxModuleExampleCxxSpecJSI*>(&turboModule)
            ->getArray(rt, array);
    jsi::Array arrResult(rt, result.size());
     for (int i = 0; i < result.size(); i++) {
        auto &e = result[i];
        if (e) {
            jsi::Object obj(rt);
            obj.setProperty(rt, "a", jsi::String::createFromUtf8(rt, e->a));
            obj.setProperty(rt, "b", jsi::String::createFromUtf8(rt, e->b));
            arrResult.setValueAtIndex(rt, i, obj);
        } else {
            arrResult.setValueAtIndex(rt, i, jsi::Value::null());
        }
    }
    return arr;
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getUnion(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args,
    size_t count) {
    auto x = args[0].asNumber();
    auto y =  args[1].getString(rt).utf8(rt);
    auto z = args[2].asObject(rt);
    auto result = static_cast<NativeCxxModuleExampleCxxSpecJSI*>(&turboModule)
            ->getUnion(rt,x,y,std::move(z));
    return jsi::String::createFromUtf8(rt, result);    
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getString(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args, 
    size_t count) {
    jsi::String jstr = args[0].getString(rt);
    std::string str = static_cast<NativeCxxModuleExampleCxxSpecJSI*>(&turboModule)
         ->getString(rt, jstr.utf8(rt));
    return jsi::String::createFromUtf8(rt, str);
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getConstants(
    jsi::Runtime& rt,
    react::TurboModule& turboModule,
    const jsi::Value* args,
    size_t count) {
    auto obj = static_cast<NativeCxxModuleExampleCxxSpecJSI*>(&turboModule)
       ->getConstants(rt);
    auto constants = jsi::Object(rt);
    constants.setProperty(rt, "const1", obj.const1);
    constants.setProperty(rt, "const2", obj.const2);
    constants.setProperty(rt, "const3", jsi::String::createFromUtf8(rt, obj.const3));
    return constants;
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getMap(
    jsi::Runtime& rt,
    react::TurboModule& turboModule,
    const jsi::Value* args,
    size_t count) {
     jsi::Object obj = args[0].asObject(rt);
     jsi::Array names = obj.getPropertyNames(rt);
     std::map<std::string,std::optional<int32_t>> strmap;
     int size = names.size(rt);
     for (int i = 0; i < size; i++) {
         auto name = names.getValueAtIndex(rt, i).asString(rt).utf8(rt);
         auto number = obj.getProperty(rt, name.data()).asNumber(); 
         strmap[name] = number;
     }
     auto result =  static_cast<NativeCxxModuleExampleCxxSpecJSI*>(&turboModule)
         ->getMap(rt, strmap);
    jsi::Object jObj(rt);
     for (auto &e: result) {
          if (e.second ){
              continue;
          }
          obj.setProperty(rt, e.first.data(), (int)*e.second);
     }
    return obj;
} 

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getSet(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args,
    size_t count) {
    jsi::Array arr = args[0].asObject(rt).asArray(rt);

    int size = arr.size(rt);
    std::set<float> set;
    for (int i = 0; i < size; i++) {
        auto value = arr.getValueAtIndex(rt, i);
        auto obj = value.asNumber();
        set.insert(obj);
    }
    auto result = static_cast<NativeCxxModuleExampleCxxSpecJSI*>(&turboModule)
        ->getSet(rt,set);

    jsi::Array arrResult(rt, result.size());
    int index=0;
    for (auto &e: result) {
        arrResult.setValueAtIndex(rt, index, e);
        index++;
    }
    return arrResult;
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getBool(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args, 
    size_t count) {
    return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)
       ->getBool(rt, args[0].asBool());
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValue(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args,
    size_t count) {
    auto x = args[0].asNumber();
    auto y = args[1].getString(rt).utf8(rt);
    auto z = args[2].asObject(rt);
    auto a = z.getProperty(rt, "a");
    auto b = z.getProperty(rt, "b");
    objectStruct objStruct{1, b.getString(rt).utf8(rt)};
    auto result = static_cast<NativeCxxModuleExampleCxxSpecJSI*>(&turboModule)  
            ->getValue(rt, x, y, objStruct);
    jsi::Object jobj(rt);
    jobj.setProperty(rt, "a", objStruct.a);
    jobj.setProperty(rt, "b", jsi::String::createFromUtf8(rt, objStruct.b));
    jsi::Object objResult(rt);
    objResult.setProperty(rt, "x", result.x);
    objResult.setProperty(rt, "y", jsi::String::createFromUtf8(rt, result.y));
    objResult.setProperty(rt, "z", jobj);
    return objResult;       
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getEnum(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args, 
    size_t count) {
    return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)
       ->getEnum(rt, args[0].asNumber());
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getNumber(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args, 
    size_t count) {
    return static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)
       ->getNumber(rt, args[0].asNumber());
}

static jsi::Value __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidFunc(
    jsi::Runtime &rt,
    react::TurboModule &turboModule,
    const jsi::Value *args, 
    size_t count) {
    static_cast<NativeCxxModuleExampleCxxSpecJSI *>(&turboModule)
       ->voidFunc(rt);
    return jsi::Value::undefined();
}

NativeCxxModuleExampleCxxSpecJSI::NativeCxxModuleExampleCxxSpecJSI(
    const TurboModule::Context ctx,
    const std::string name)
    : TurboModule(ctx, name) {
    methodMap_["getBool"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getBool};
    methodMap_["getEnum"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getEnum};
    methodMap_["getSet"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getSet};
    methodMap_["getNumber"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getNumber};
    methodMap_["getUnion"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getUnion};
    methodMap_["getArray"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getArray};
    methodMap_["getValue"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValue};
    methodMap_["getConstants"] = MethodMetadata{
           0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getConstants};
    methodMap_["getString"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getString};
    methodMap_["getMap"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getMap};
    methodMap_["getObject"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getObject};
    methodMap_["voidFunc"] = MethodMetadata{
           0, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_voidFunc};
    methodMap_["getValueWithCallback"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValueWithCallback};
    methodMap_["getValueWithPromise"] = MethodMetadata{
           1, __hostFunction_NativeCxxModuleExampleCxxSpecJSI_getValueWithPromise};
}