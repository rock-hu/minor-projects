/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
if (!("finalizeConstruction" in ViewPU.prototype)) {
    Reflect.set(ViewPU.prototype, "finalizeConstruction", () => { });
}
interface g {
    message?: string;
}
class h extends ViewPU {
    constructor(s, t, u, v = -1, w = undefined, x) {
        super(s, u, v, x);
        if (typeof w === "function") {
            this.i = w;
        }
        this.__message = new ObservedPropertySimplePU('Hello World', this, "message");
        this.setInitiallyProvidedValue(t);
        this.j();
    }
    setInitiallyProvidedValue(r: g) {
        if (r.message !== undefined) {
            this.message = r.message;
        }
    }
    updateStateVars(q: g) {
    }
    purgeVariableDependenciesOnElmtId(p) {
        this.__message.k(p);
    }
    aboutToBeDeleted() {
        this.__message.aboutToBeDeleted();
        SubscriberManager.l().delete(this.m());
        this.o();
    }
    private __message: ObservedPropertySimplePU<string>;
    get message() {
        return this.__message.get();
    }
    set message(o: string) {
        this.__message.set(o);
    }
    initialRender() {
        this.p((m, n) => {
            Row.create();
            Row.height('100%');
        }, Row);
        this.p((k, l) => {
            Column.create();
            Column.width('100%');
        }, Column);
        this.p((i, j) => {
            Text.create(this.message);
            Text.fontSize(50);
            Text.fontWeight(FontWeight.q);
        }, Text);
        Text.pop();
        Column.pop();
        Row.pop();
    }
    rerender() {
        this.t();
    }
    static getEntryName(): string {
        return "Index";
    }
}
registerNamedRoute(() => new h(undefined, {}), "", { u: "com.example.arkguard", v: "entry", a1: "pages/Index", b1: "entry/src/main/ets/pages/Index", c1: "false" });
