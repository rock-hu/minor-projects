/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export declare class g {
    keptPropertyPara2: h;
    static method1(l2: number, ...m2: string[]): void;
    method2(i2: number, j2: (defaultKeptPara3: number) => string, k2?: number): void;
    method3(g2?: number, ...h2: number[]): void;
    constructor(d2: number, e2: number, f2: (defaultKeptPara4: number) => string);
    field1?: (defaultKeptPara1: number) => void;
    field2: (defaultKeptPara2: number) => number;
    method4(b2: (defaultKeptPara2: string) => number, c2: {
        key1: number;
        key2: string;
    }): void;
    method5(z1: (defaultKeptPara2: number) => number, a2: number): number;
    manualKeepMethod1(x1: (defaultKeptPara2: number) => number, y1: number): number;
}
declare class h {
    constructor(u1: number, v1: number, w1: (defaultKeptPara4: number) => string);
    field10?: (defaultKeptPara1: number) => void;
    method6(s1: (defaultKeptPara2: number) => number, t1: number): number;
    manualKeepMethod1(q1: (defaultKeptPara2: number) => number, r1: number): void;
}
export declare class manualKeepClassName {
    constructor(n1: number, o1: number, p1: (defaultKeptPara4: number) => string);
    field5?: (defaultKeptPara1: number) => void;
    method9(l1: (defaultKeptPara2: number) => number, m1: number): number;
    manualKeepMethod1(j1: (defaultKeptPara2: number) => number, k1: number): void;
}
export interface i {
    method6(defaultKeptPara1: number, ...defaultKeptPara2: string[]): void;
    constructor(defaultKeptPara1: number): void;
    field3: (defaultKeptPara1: number, ...defaultKeptPara2: number[]) => void;
    field4: (defaultKeptPara1: number, defaultKeptPara2: (defaultKeptPara3: string) => number) => string;
    method7(defaultKeptPara1: (defaultKeptPara2: string) => number, defaultKeptPara3: {
        key1: number;
        key2: string;
    }): void;
    method8(defaultKeptPara1: (defaultKeptPara2: number) => number, defaultKeptPara3: number): void;
    manualKeepMethod1(defaultKeptPara1: (defaultKeptPara2: number) => number, defaultKeptPara3: number): void;
}
export declare function a(i1: number): void;
export declare function b(g1: number, ...h1: string[]): void;
export declare function c(f1?: (defaultKeptPara2: number) => void): void;
declare function d(d1: number, e1?: (defaultKeptPara3: number) => void): void;
export declare function manualKeepFoo1(b1: number, c1?: (defaultKeptPara3: number) => void): void;
export declare let j: (defaultKeptPara1: number, ...defaultKeptPara2: string[]) => void;
export declare let k: (defaultKeptPara1: number, defaultKeptPara2?: ((defaultKeptPara3: number) => void) | undefined) => void;
export declare function e(z: number, a1: {
    prop1: number;
    prop2: string;
}): void;
export declare let l: (defaultKeptPara1: number) => void;
export declare const m: (defaultKeptPara1: number, defaultKeptPara2: number) => void;
export declare let n: (defaultKeptPara1: (defaultKeptPara2: number) => number) => number;
export declare const o: (defaultKeptPara1: number, defaultKeptPara2: (defaultKeptPara3: number) => number, ...defaultKeptPara4: string[]) => void;
export declare let p: (defaultKeptPara1: (defaultKeptPara2: number) => number, ...defaultKeptPara3: string[]) => void;
export declare let q: (defaultKeptPara1: (defaultKeptPara2: number) => number, defaultKeptPara3?: ((defaultKeptPara4: number) => void) | undefined) => void;
export declare let r: (defaultKeptPara1: number, ...defaultKeptPara2: string[]) => void;
export declare let s: (defaultKeptPara1: number, defaultKeptPara2?: ((defaultKeptPara3: number) => void) | undefined) => void;
export type t = (defaultKeptPara1: number, ...defaultKeptPara2: string[]) => {};
export type u = (defaultKeptPara1: number, defaultKeptPara2: (defaultKeptPara3: number) => number) => {};
export interface v<T1> {
    method<T2>(): void;
}
export declare class w<T3> {
    method2<y>(): void;
}
export declare function f<x>(): void;
export {};
