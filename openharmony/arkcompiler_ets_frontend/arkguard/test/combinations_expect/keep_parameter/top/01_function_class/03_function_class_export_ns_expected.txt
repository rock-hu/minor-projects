/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
declare namespace h {
    export class A {
        keptPropertyPara2: s;
        static method1(h2: number, ...i2: string[]): void;
        method2(e2: number, f2: (defaultKeptPara3: number) => string, g2?: number): void;
        method3(c2?: number, ...d2: number[]): void;
        constructor(z1: number, a2: number, b2: (defaultKeptPara4: number) => string);
        field1?: (defaultKeptPara1: number) => void;
        field2: (defaultKeptPara2: number) => number;
        method4(x1: (defaultKeptPara2: string) => number, y1: {
            key1: number;
            key2: string;
        }): void;
        method5(v1: (defaultKeptPara2: number) => number, w1: number): number;
        manualKeepMethod1(t1: (defaultKeptPara2: number) => number, u1: number): number;
    }
    class s {
        constructor(q1: number, r1: number, s1: (defaultKeptPara4: number) => string);
        field6?: (defaultKeptPara1: number) => void;
        method10(o1: (defaultKeptPara2: number) => number, p1: number): number;
        manualKeepMethod1(m1: (defaultKeptPara2: number) => number, n1: number): void;
    }
    export class manualKeepClassName {
        constructor(j1: number, k1: number, l1: (defaultKeptPara4: number) => string);
        field5?: (defaultKeptPara1: number) => void;
        method9(h1: (defaultKeptPara2: number) => number, i1: number): number;
        manualKeepMethod1(f1: (defaultKeptPara2: number) => number, g1: number): void;
    }
    export interface C {
        method6(defaultKeptPara1: number, ...defaultKeptPara2: string[]): void;
        constructor(defaultKeptPara1: number): void;
        field3: (defaultKeptPara1: number, ...defaultKeptPara2: number[]) => void;
        field4: (defaultKeptPara1: number, defaultKeptPara2: (defaultKeptPara3: string) => number) => string;
        method7(defaultKeptPara1: (defaultKeptPara2: string) => number, defaultKeptPara3: {
            key1: number;
            key2: string;
        }): void;
        method8(defaultKeptPara1: (defaultKeptPara2: number) => number, defaultKeptPara3: number): void;
        manualKeepMethod1(defaultKeptPara1: (defaultKeptPara2: number) => number, defaultKeptPara3: number): void;
    }
    export function foo1(e1: number): void;
    export function foo2(c1: number, ...d1: string[]): void;
    export function foo3(b1?: (defaultKeptPara2: number) => void): void;
    function r(z: number, a1?: (defaultKeptPara3: number) => void): void;
    export function manualKeepFoo1(x: number, y?: (defaultKeptPara3: number) => void): void;
    export let c: (defaultKeptPara1: number, ...defaultKeptPara2: string[]) => void;
    export let d: (defaultKeptPara1: number, defaultKeptPara2?: ((defaultKeptPara3: number) => void) | undefined) => void;
    export function foo(v: number, w: {
        prop1: number;
        prop2: string;
    }): void;
    export let e: (defaultKeptPara1: number) => void;
    export const sum: (defaultKeptPara1: number, defaultKeptPara2: number) => void;
    export let myfun1: (defaultKeptPara1: (defaultKeptPara2: number) => number) => number;
    export const sum2: (defaultKeptPara1: number, defaultKeptPara2: (defaultKeptPara3: number) => number, ...defaultKeptPara4: string[]) => void;
    export let a: (defaultKeptPara1: (defaultKeptPara2: number) => number, ...defaultKeptPara3: string[]) => void;
    export let b: (defaultKeptPara1: (defaultKeptPara2: number) => number, defaultKeptPara3?: ((defaultKeptPara4: number) => void) | undefined) => void;
    export let f: (defaultKeptPara1: number, ...defaultKeptPara2: string[]) => void;
    export let g: (defaultKeptPara1: number, defaultKeptPara2?: ((defaultKeptPara3: number) => void) | undefined) => void;
    export type typeFunc = (defaultKeptPara1: number, ...defaultKeptPara2: string[]) => {};
    export type typeFunc2 = (defaultKeptPara1: number, defaultKeptPara2: (defaultKeptPara3: number) => number) => {};
    export interface person<T1> {
        method<T2>(): void;
    }
    export class person2<T3> {
        method2<u>(): void;
    }
    export function foo5<t>(): void;
    export {};
}
declare const i: 1;
declare class j {
    static method1(p: number, ...q: string[]): void;
    "method2"(o: number): void;
    ["method3"](n: number): void;
    [111](m: number): void;
    [i](l: number): number;
    222(k: number): void;
}
