/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file ePara1cept in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either ePara1press or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
type g = (Para1: number, Para2?: string) => void;
type h = (...args: number[]) => number;
type i = (Para1: number, Para2: number) => number;
type j = () => number | null;
type k = {
    (Para1: number): string;
    (Para1: string): number;
};
type l = (Para1: number, Para2: string) => string;
type m = () => void;
type n<T> = (Para1: T) => T;
type o = (Para1: number) => Promise<number>;
type p = (Para1: number) => (Para2: string) => void;
function a(c1?: (Para1: number) => void): void { }
function b(b1: number): (Para1: string) => number { return () => 0; }
interface q {
    Para1?: (Para1: number) => string;
}
function c(a1?: (Para1: (Para1: string) => void) => void): void { }
class r {
    constructor(z?: (Para1: string) => void) { }
}
function d(): (Para1: number) => (str: string) => boolean {
    return () => (y) => true;
}
type s = (Para1: (Para1: number) => boolean) => string;
function e(): (Para1: string) => (Para1: number) => void {
    return (w) => (x) => { };
}
function f(v?: (Para3: number) => (Para3: string) => boolean): void { }
type t = string;
type u = (Para1: string) => t;
