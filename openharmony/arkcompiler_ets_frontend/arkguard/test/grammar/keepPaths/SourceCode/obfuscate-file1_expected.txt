import { DependencyClass, DependencyFunctionReduce, DependencyInterface } from './depency-file1';
import { h, g, i } from './no-depency-file1';
import assert from 'assert';
let t = new DependencyClass();
let u = t.depencyProp1;
let v = t.depencyProp2;
let a1 = t.depencyMethod1();
let b1 = DependencyFunctionReduce(2, 1);
assert(b1 === 1, 'success');
type c1 = DependencyInterface;
let d1: c1 = { depencyProp3: "hello", depencyProp4: 2 };
const e1 = d1.depencyProp3;
const f1 = d1.depencyProp4;
let g1 = new h();
let h1 = g1.j;
let i1 = g1.k;
let j1 = g1.l();
let l1 = g();
type m1 = i;
let n1: m1 = { m: "hello", o: 2 };
const o1 = n1.m;
const q1 = n1.o;
export class s1 {
    w1: string = 'us1';
    z1: number = 1999;
}
class t1 {
    a2: string = 'us2';
    b2: number = 2000;
}
export function p(y1: string, z1: string): string {
    return y1.concat(z1);
}
const u1 = p('123', '456');
assert(u1 === '123456', 'success');
function q(w1: string, x1: string): string {
    return w1 + x1;
}
q('123', '456');
const v1 = q('123', '456');
assert(v1 === '123456', 'success');
