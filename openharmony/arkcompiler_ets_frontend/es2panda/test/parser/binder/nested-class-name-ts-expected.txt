.language ECMAScript

slotNum = 0xd
.function any .#~C=#C(any a0, any a1, any a2) {
	nop
label_7: 
label_0: 
	ldlexvar 0x0, 0x1
	callruntime.callinit 0x0, a2
	ldhole
	sta v0
	defineclasswithbuffer 0x2, .#~C=C~=#, _2, 0x0, v0
	sta v0
	ldobjbyname 0x3, prototype
	lda v0
	stobjbyname 0x5, B_withoutPrivateField, a2
	newlexenv 0x4
label_2: 
label_4: 
	ldhole
	sta v1
	defineclasswithbuffer 0x7, .#~C=C~^1=#, _3, 0x0, v1
	sta v1
	ldobjbyname 0x8, prototype
	definemethod 0xa, .#~C=C~^1>#instance_initializer, 0x0
	stlexvar 0x0, 0x1
	callruntime.createprivateproperty 0x1, _4
label_3: 
end_label_3: 
	jmp label_1
label_9: 
	sta v0
label_6: 
	poplexenv
	lda v0
	throw
label_1: 
	poplexenv
	lda v1
	stobjbyname 0xb, B_withPrivateField, a2
	lda a2
	return
label_8: 
}

.catchall label_2, end_label_3, label_9

slotNum = 0x0
.function any .#~C=C~=#(any a0, any a1, any a2) {
label_1: 
label_0: 
	lda a2
	return
label_2: 
}

slotNum = 0x2
.function any .#~C=C~>#method(any a0, any a1, any a2, any a3) {
label_1: 
label_0: 
	lda a3
	ldprivateproperty 0x0, 0x0, 0x0
	return
label_2: 
}

slotNum = 0x2
.function any .#~C=C~^1=#(any a0, any a1, any a2) {
label_1: 
label_0: 
	ldlexvar 0x0, 0x1
	callruntime.callinit 0x0, a2
	lda a2
	return
label_2: 
}

slotNum = 0x2
.function any .#~C=C~^1>#instance_initializer(any a0, any a1, any a2) {
label_1: 
label_0: 
	ldai 0x2a
	callruntime.defineprivateproperty 0x0, 0x0, 0x2, a2
	ldundefined
	returnundefined
label_2: 
}

slotNum = 0x2
.function any .#~C=C~^1>#method(any a0, any a1, any a2, any a3) {
label_1: 
label_0: 
	lda a2
	ldprivateproperty 0x0, 0x0, 0x2
	return
label_2: 
}

slotNum = 0x2
.function any .#~C>#instance_initializer(any a0, any a1, any a2) {
label_1: 
label_0: 
	lda.str test
	callruntime.defineprivateproperty 0x0, 0x0, 0x0, a2
	ldundefined
	returnundefined
label_2: 
}

slotNum = 0x4
.function any .func_main_0(any a0, any a1, any a2) {
	nop
label_7: 
label_0: 
	newlexenv 0x2
label_2: 
label_4: 
	ldhole
	sta v1
	defineclasswithbuffer 0x0, .#~C=#C, _5, 0x0, v1
	ldobjbyname 0x1, prototype
	definemethod 0x3, .#~C>#instance_initializer, 0x0
	stlexvar 0x0, 0x1
	callruntime.createprivateproperty 0x1, _6
label_3: 
end_label_3: 
	jmp label_1
label_9: 
	sta v0
label_6: 
	poplexenv
	lda v0
	throw
label_1: 
	poplexenv
	ldundefined
	returnundefined
label_8: 
}

.catchall label_2, end_label_3, label_9


======> literal array buffer <======
------------------------------------
slot _0
------------------------------------
slot _1
{
  index: 0
    tag: 2
    val: 0
},
{
  index: 1
    tag: 2
    val: 0
},
{
  index: 2
    tag: 2
    val: 0
},
{
  index: 3
    tag: 2
    val: 0
},
{
  index: 4
    tag: 2
    val: 0
},
{
  index: 5
    tag: 2
    val: 0
},
------------------------------------
slot _2
{
  index: 0
    tag: 0
    val: 5
},
{
  index: 1
    tag: 5
    val: method
},
{
  index: 2
    tag: 0
    val: 6
},
{
  index: 3
    tag: 6
    val: .#~C=C~>#method
},
{
  index: 4
    tag: 0
    val: 9
},
{
  index: 5
    tag: 9
    val: 1
},
{
  index: 6
    tag: 0
    val: 2
},
{
  index: 7
    tag: 2
    val: 1
},
------------------------------------
slot _3
{
  index: 0
    tag: 0
    val: 5
},
{
  index: 1
    tag: 5
    val: method
},
{
  index: 2
    tag: 0
    val: 6
},
{
  index: 3
    tag: 6
    val: .#~C=C~^1>#method
},
{
  index: 4
    tag: 0
    val: 9
},
{
  index: 5
    tag: 9
    val: 1
},
{
  index: 6
    tag: 0
    val: 2
},
{
  index: 7
    tag: 2
    val: 1
},
------------------------------------
slot _4
{
  index: 0
    tag: 0
    val: 2
},
{
  index: 1
    tag: 2
    val: 0
},
------------------------------------
slot _5
{
  index: 0
    tag: 0
    val: 2
},
{
  index: 1
    tag: 2
    val: 0
},
------------------------------------
slot _6
{
  index: 0
    tag: 0
    val: 2
},
{
  index: 1
    tag: 2
    val: 0
},
