{
    "copyright": [
        "Copyright (c) 2023-2025 Huawei Device Co., Ltd.",
        "Licensed under the Apache License, Version 2.0 (the 'License');",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an 'AS IS' BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    ],
    "result": [
        {
            "line": 31,
            "column": 5,
            "endLine": 31,
            "endColumn": 23,
            "problem": "NumericSemantics",
            "suggest": "",
            "rule": "Numeric semantics is different for integer values (arkts-numeric-semantic)",
            "severity": "ERROR"
        },
        {
            "line": 36,
            "column": 5,
            "endLine": 36,
            "endColumn": 16,
            "problem": "UnknownType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 36,
            "column": 9,
            "endLine": 36,
            "endColumn": 16,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 38,
            "column": 1,
            "endLine": 40,
            "endColumn": 2,
            "problem": "NumericSemantics",
            "suggest": "",
            "rule": "Numeric semantics is different for integer values (arkts-numeric-semantic)",
            "severity": "ERROR"
        },
        {
            "line": 38,
            "column": 21,
            "endLine": 38,
            "endColumn": 24,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 41,
            "column": 1,
            "endLine": 41,
            "endColumn": 6,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 48,
            "column": 1,
            "endLine": 48,
            "endColumn": 6,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 52,
            "column": 5,
            "endLine": 52,
            "endColumn": 14,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 53,
            "column": 1,
            "endLine": 53,
            "endColumn": 31,
            "problem": "NumericSemantics",
            "suggest": "",
            "rule": "Numeric semantics is different for integer values (arkts-numeric-semantic)",
            "severity": "ERROR"
        },
        {
            "line": 56,
            "column": 8,
            "endLine": 56,
            "endColumn": 11,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 57,
            "column": 16,
            "endLine": 57,
            "endColumn": 19,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 59,
            "column": 8,
            "endLine": 59,
            "endColumn": 9,
            "problem": "ObjectLiteralNoContextType",
            "suggest": "",
            "rule": "Object literal must correspond to some explicitly declared class or interface (arkts-no-untyped-obj-literals)",
            "severity": "ERROR"
        },
        {
            "line": 61,
            "column": 5,
            "endLine": 61,
            "endColumn": 20,
            "problem": "UnknownType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 61,
            "column": 11,
            "endLine": 61,
            "endColumn": 20,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 63,
            "column": 3,
            "endLine": 63,
            "endColumn": 22,
            "problem": "TsOverload",
            "suggest": "",
            "rule": "Class TS overloading is not supported(arkts-no-ts-overload)",
            "severity": "ERROR"
        },
        {
            "line": 64,
            "column": 3,
            "endLine": 64,
            "endColumn": 19,
            "problem": "TsOverload",
            "suggest": "",
            "rule": "Class TS overloading is not supported(arkts-no-ts-overload)",
            "severity": "ERROR"
        },
        {
            "line": 66,
            "column": 5,
            "endLine": 66,
            "endColumn": 16,
            "problem": "UnknownType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 66,
            "column": 9,
            "endLine": 66,
            "endColumn": 16,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 68,
            "column": 5,
            "endLine": 68,
            "endColumn": 17,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 68,
            "column": 11,
            "endLine": 68,
            "endColumn": 16,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 69,
            "column": 5,
            "endLine": 69,
            "endColumn": 15,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 70,
            "column": 5,
            "endLine": 70,
            "endColumn": 26,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 70,
            "column": 19,
            "endLine": 70,
            "endColumn": 22,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 72,
            "column": 10,
            "endLine": 72,
            "endColumn": 11,
            "problem": "ObjectTypeLiteral",
            "suggest": "",
            "rule": "Object literals cannot be used as type declarations (arkts-no-obj-literals-as-types)",
            "severity": "ERROR"
        },
        {
            "line": 79,
            "column": 11,
            "endLine": 79,
            "endColumn": 14,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 89,
            "column": 5,
            "endLine": 89,
            "endColumn": 23,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 89,
            "column": 12,
            "endLine": 89,
            "endColumn": 23,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 90,
            "column": 5,
            "endLine": 90,
            "endColumn": 21,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 90,
            "column": 5,
            "endLine": 90,
            "endColumn": 21,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 90,
            "column": 12,
            "endLine": 90,
            "endColumn": 21,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 91,
            "column": 5,
            "endLine": 91,
            "endColumn": 39,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 91,
            "column": 24,
            "endLine": 91,
            "endColumn": 37,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 91,
            "column": 20,
            "endLine": 91,
            "endColumn": 39,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 92,
            "column": 5,
            "endLine": 92,
            "endColumn": 52,
            "problem": "UnknownType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 92,
            "column": 16,
            "endLine": 92,
            "endColumn": 52,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 93,
            "column": 5,
            "endLine": 93,
            "endColumn": 29,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 93,
            "column": 16,
            "endLine": 93,
            "endColumn": 29,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 94,
            "column": 16,
            "endLine": 94,
            "endColumn": 29,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 98,
            "column": 34,
            "endLine": 98,
            "endColumn": 44,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 101,
            "column": 7,
            "endLine": 101,
            "endColumn": 30,
            "problem": "UnknownType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 101,
            "column": 20,
            "endLine": 101,
            "endColumn": 30,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 103,
            "column": 21,
            "endLine": 103,
            "endColumn": 26,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 103,
            "column": 17,
            "endLine": 103,
            "endColumn": 28,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 105,
            "column": 14,
            "endLine": 105,
            "endColumn": 19,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 105,
            "column": 10,
            "endLine": 105,
            "endColumn": 21,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 110,
            "column": 9,
            "endLine": 110,
            "endColumn": 14,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 110,
            "column": 5,
            "endLine": 110,
            "endColumn": 16,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 114,
            "column": 14,
            "endLine": 114,
            "endColumn": 19,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 124,
            "column": 47,
            "endLine": 124,
            "endColumn": 56,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 124,
            "column": 43,
            "endLine": 124,
            "endColumn": 58,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 125,
            "column": 39,
            "endLine": 125,
            "endColumn": 44,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 125,
            "column": 35,
            "endLine": 125,
            "endColumn": 46,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 126,
            "column": 51,
            "endLine": 126,
            "endColumn": 58,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 126,
            "column": 47,
            "endLine": 126,
            "endColumn": 60,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 127,
            "column": 43,
            "endLine": 127,
            "endColumn": 50,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 127,
            "column": 39,
            "endLine": 127,
            "endColumn": 52,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 128,
            "column": 49,
            "endLine": 128,
            "endColumn": 59,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 128,
            "column": 45,
            "endLine": 128,
            "endColumn": 61,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 129,
            "column": 49,
            "endLine": 129,
            "endColumn": 59,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 129,
            "column": 45,
            "endLine": 129,
            "endColumn": 61,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 130,
            "column": 39,
            "endLine": 130,
            "endColumn": 44,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 130,
            "column": 35,
            "endLine": 130,
            "endColumn": 46,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 131,
            "column": 51,
            "endLine": 131,
            "endColumn": 58,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 131,
            "column": 47,
            "endLine": 131,
            "endColumn": 60,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 132,
            "column": 43,
            "endLine": 132,
            "endColumn": 50,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 132,
            "column": 39,
            "endLine": 132,
            "endColumn": 52,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 133,
            "column": 56,
            "endLine": 133,
            "endColumn": 63,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 133,
            "column": 52,
            "endLine": 133,
            "endColumn": 65,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 134,
            "column": 44,
            "endLine": 134,
            "endColumn": 54,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 134,
            "column": 40,
            "endLine": 134,
            "endColumn": 56,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        },
        {
            "line": 73,
            "column": 1,
            "endLine": 73,
            "endColumn": 2,
            "problem": "StrictDiagnostic",
            "suggest": "Variable 'd' is used before being assigned.",
            "rule": "Variable 'd' is used before being assigned.",
            "severity": "ERROR"
        }
    ]
}