/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const irreparableArr = new Array();
let repairableArr: Array<number> = new Array();
repairableArr = new Array();

const irreparableMap = new Map();
const repairableMap: Map<string, number> = new Map();
repairableMap = new Map();

class MyClass<T> {
  public irreparableMap = new Map();
  public repairableSet: Set<string> = new Map();
  public repairableMap: Map<string, () => string[]> = new Map();
  static repairableStaticMap: Map<string, () => string[]> = new Map();
  constructor() {}
}

const irreparableA = new MyClass();
const irreparableB = new MyClass<number>();
const repairableC: MyClass<number> = new MyClass();
repairableC.irreparableMap = new Map();
repairableC.repairableSet = new Set();
repairableC.repairableMap = new Map();
MyClass.repairableStaticMap = new Map();

const promise: Promise<String> = new Promise(()=> {return ''});

function testA(): Map<string, string> {
  return new Map();
}

async function testB(): Promise<Map<string, string>> {
  return new Map();
}

function testC(): Map<string, string> {
  return new Set();
}

async function testD(): Promise<Map<string, string>> {
  return new Set();
}

class MyClassB {
  testA(): Map<string, string> {
    return new Map();
  }

  async testB(): Promise<Map<string, string>> {
    return new Map();
  }

  testC(): Map<string, string> {
    return new Set();
  }

  async testD(): Promise<Map<string, string>> {
    return new Set();
  }
}
