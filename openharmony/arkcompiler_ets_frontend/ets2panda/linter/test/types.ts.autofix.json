{
    "copyright": [
        "Copyright (c) 2022-2024 Huawei Device Co., Ltd.",
        "Licensed under the Apache License, Version 2.0 (the 'License');",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an 'AS IS' BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    ],
    "nodes": [
        {
            "line": 17,
            "column": 15,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 18,
            "column": 15,
            "problem": "SymbolType",
            "suggest": "",
            "rule": "\"Symbol()\" API is not supported (arkts-no-symbol)"
        },
        {
            "line": 19,
            "column": 20,
            "problem": "UnknownType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 26,
            "column": 18,
            "problem": "ObjectLiteralNoContextType",
            "autofix": [
                {
                    "start": 610,
                    "end": 610,
                    "replacementText": "interface GeneratedObjectLiteralInterface_1 {\n    name: string;\n    idx: number;\n    handler: string;\n}\n"
                },
                {
                    "start": 829,
                    "end": 829,
                    "replacementText": ": GeneratedObjectLiteralInterface_1"
                }
            ],
            "suggest": "",
            "rule": "Object literal must correspond to some explicitly declared class or interface (arkts-no-untyped-obj-literals)"
        },
        {
            "line": 32,
            "column": 16,
            "problem": "ObjectTypeLiteral",
            "autofix": [
                {
                    "start": 969,
                    "end": 1007,
                    "replacementText": "interface Point {\n    x: number;\n    y: number;\n}"
                }
            ],
            "suggest": "",
            "rule": "Object literals cannot be used as type declarations (arkts-no-obj-literals-as-types)"
        },
        {
            "line": 34,
            "column": 15,
            "problem": "IndexedAccessType",
            "suggest": "",
            "rule": "Indexed access types are not supported (arkts-no-aliases-by-index)"
        },
        {
            "line": 36,
            "column": 24,
            "problem": "UnknownType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 37,
            "column": 20,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 43,
            "column": 3,
            "problem": "LocalFunction",
            "autofix": [
                {
                    "start": 1235,
                    "end": 1313,
                    "replacementText": "let isNumber: (x: any) => x is number = (x: any): x is number => {\n    return typeof x === 'number';\n};"
                }
            ],
            "suggest": "",
            "rule": "Nested functions are not supported (arkts-no-nested-funcs)"
        },
        {
            "line": 43,
            "column": 24,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 43,
            "column": 30,
            "problem": "IsOperator",
            "suggest": "",
            "rule": "Type guarding is supported with \"instanceof\" and \"as\" (arkts-no-is)"
        },
        {
            "line": 54,
            "column": 26,
            "problem": "ObjectTypeLiteral",
            "autofix": [
                {
                    "start": 1405,
                    "end": 1570,
                    "replacementText": "interface ComputedPropertyT {\n    a: string; // String-like name\n    5: string; // Number-like name\n    [c]: string; // String-like name\n    [d]: string; // Number-like name\n}"
                }
            ],
            "suggest": "",
            "rule": "Object literals cannot be used as type declarations (arkts-no-obj-literals-as-types)"
        },
        {
            "line": 56,
            "column": 3,
            "problem": "LiteralAsPropertyName",
            "suggest": "",
            "rule": "Objects with property names that are not identifiers are not supported (arkts-identifiers-as-prop-names)"
        },
        {
            "line": 57,
            "column": 3,
            "problem": "ComputedPropertyName",
            "suggest": "",
            "rule": "Objects with property names that are not identifiers are not supported (arkts-identifiers-as-prop-names)"
        },
        {
            "line": 58,
            "column": 3,
            "problem": "ComputedPropertyName",
            "suggest": "",
            "rule": "Objects with property names that are not identifiers are not supported (arkts-identifiers-as-prop-names)"
        },
        {
            "line": 62,
            "column": 3,
            "problem": "LiteralAsPropertyName",
            "autofix": [
                {
                    "replacementText": "__2",
                    "start": 1604,
                    "end": 1605
                },
                {
                    "replacementText": "__2",
                    "start": 1684,
                    "end": 1685
                }
            ],
            "suggest": "",
            "rule": "Objects with property names that are not identifiers are not supported (arkts-identifiers-as-prop-names)"
        },
        {
            "line": 67,
            "column": 3,
            "problem": "LiteralAsPropertyName",
            "autofix": [
                {
                    "replacementText": "__2",
                    "start": 1604,
                    "end": 1605
                },
                {
                    "replacementText": "__2",
                    "start": 1684,
                    "end": 1685
                }
            ],
            "suggest": "",
            "rule": "Objects with property names that are not identifiers are not supported (arkts-identifiers-as-prop-names)"
        },
        {
            "line": 71,
            "column": 19,
            "problem": "ObjectTypeLiteral",
            "autofix": [
                {
                    "start": 1710,
                    "end": 1758,
                    "replacementText": "interface Dictionary {\n    [key: string]: unknown;\n}"
                }
            ],
            "suggest": "",
            "rule": "Object literals cannot be used as type declarations (arkts-no-obj-literals-as-types)"
        },
        {
            "line": 72,
            "column": 3,
            "problem": "IndexMember",
            "suggest": "",
            "rule": "Indexed signatures are not supported (arkts-no-indexed-signatures)"
        },
        {
            "line": 72,
            "column": 18,
            "problem": "UnknownType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 76,
            "column": 32,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 77,
            "column": 11,
            "problem": "InOperator",
            "suggest": "",
            "rule": "\"in\" operator is not supported (arkts-no-in)"
        },
        {
            "line": 78,
            "column": 5,
            "problem": "PropertyAccessByIndex",
            "suggest": "",
            "rule": "Indexed access is not supported for fields (arkts-no-props-by-index)"
        },
        {
            "line": 92,
            "column": 22,
            "problem": "IntersectionType",
            "suggest": "",
            "rule": "Use inheritance instead of intersection types (arkts-no-intersection-types)"
        },
        {
            "line": 94,
            "column": 28,
            "problem": "ObjectTypeLiteral",
            "autofix": [
                {
                    "start": 1999,
                    "end": 2083,
                    "replacementText": "interface DescribableFunction {\n    description: string;\n    (someArg: number): boolean;\n}"
                }
            ],
            "suggest": "",
            "rule": "Object literals cannot be used as type declarations (arkts-no-obj-literals-as-types)"
        },
        {
            "line": 96,
            "column": 3,
            "problem": "CallSignature",
            "suggest": "",
            "rule": "Use \"class\" instead of a type with call signature (arkts-no-call-signatures)"
        },
        {
            "line": 111,
            "column": 19,
            "problem": "ObjectTypeLiteral",
            "autofix": [
                {
                    "start": 2405,
                    "end": 2405,
                    "replacementText": "interface GeneratedTypeLiteralInterface_1 {\n    x: 2;\n}\n"
                },
                {
                    "start": 2423,
                    "end": 2431,
                    "replacementText": "GeneratedTypeLiteralInterface_1"
                }
            ],
            "suggest": "",
            "rule": "Object literals cannot be used as type declarations (arkts-no-obj-literals-as-types)"
        },
        {
            "line": 112,
            "column": 12,
            "problem": "ObjectTypeLiteral",
            "autofix": [
                {
                    "start": 2436,
                    "end": 2436,
                    "replacementText": "interface GeneratedTypeLiteralInterface_2 {\n    y: string;\n}\n"
                },
                {
                    "start": 2447,
                    "end": 2460,
                    "replacementText": "GeneratedTypeLiteralInterface_2"
                }
            ],
            "suggest": "",
            "rule": "Object literals cannot be used as type declarations (arkts-no-obj-literals-as-types)"
        },
        {
            "line": 112,
            "column": 35,
            "problem": "ObjectTypeLiteral",
            "autofix": [
                {
                    "start": 2436,
                    "end": 2436,
                    "replacementText": "interface GeneratedTypeLiteralInterface_3 {\n    y: 'constant';\n}\n"
                },
                {
                    "start": 2470,
                    "end": 2487,
                    "replacementText": "GeneratedTypeLiteralInterface_3"
                }
            ],
            "suggest": "",
            "rule": "Object literals cannot be used as type declarations (arkts-no-obj-literals-as-types)"
        },
        {
            "line": 116,
            "column": 9,
            "problem": "ObjectTypeLiteral",
            "autofix": [
                {
                    "start": 2543,
                    "end": 2543,
                    "replacementText": "interface GeneratedTypeLiteralInterface_4 {\n    z: boolean;\n}\n"
                },
                {
                    "start": 2551,
                    "end": 2565,
                    "replacementText": "GeneratedTypeLiteralInterface_4"
                }
            ],
            "suggest": "",
            "rule": "Object literals cannot be used as type declarations (arkts-no-obj-literals-as-types)"
        },
        {
            "line": 116,
            "column": 25,
            "problem": "ObjectLiteralNoContextType",
            "suggest": "",
            "rule": "Object literal must correspond to some explicitly declared class or interface (arkts-no-untyped-obj-literals)"
        },
        {
            "line": 119,
            "column": 9,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 119,
            "column": 15,
            "problem": "TypeAssertion",
            "autofix": [
                {
                    "start": 2630,
                    "end": 2636,
                    "replacementText": "1 as any"
                }
            ],
            "suggest": "",
            "rule": "Only \"as T\" syntax is supported for type casts (arkts-as-casts)"
        },
        {
            "line": 119,
            "column": 16,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 120,
            "column": 20,
            "problem": "TypeAssertion",
            "autofix": [
                {
                    "start": 2657,
                    "end": 2714,
                    "replacementText": "document.getElementById('main_canvas') as HTMLCanvasElement"
                }
            ],
            "suggest": "",
            "rule": "Only \"as T\" syntax is supported for type casts (arkts-as-casts)"
        },
        {
            "line": 124,
            "column": 13,
            "problem": "ObjectLiteralNoContextType",
            "autofix": [
                {
                    "start": 2719,
                    "end": 2719,
                    "replacementText": "interface GeneratedObjectLiteralInterface_2 {\n    a: number;\n    b: string;\n}\n"
                },
                {
                    "start": 2765,
                    "end": 2765,
                    "replacementText": ": GeneratedObjectLiteralInterface_2"
                }
            ],
            "suggest": "",
            "rule": "Object literal must correspond to some explicitly declared class or interface (arkts-no-untyped-obj-literals)"
        },
        {
            "line": 125,
            "column": 3,
            "problem": "PropertyAccessByIndex",
            "suggest": "",
            "rule": "Indexed access is not supported for fields (arkts-no-props-by-index)"
        },
        {
            "line": 126,
            "column": 15,
            "problem": "PropertyAccessByIndex",
            "suggest": "",
            "rule": "Indexed access is not supported for fields (arkts-no-props-by-index)"
        },
        {
            "line": 128,
            "column": 12,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 138,
            "column": 3,
            "problem": "LocalFunction",
            "autofix": [
                {
                    "start": 3075,
                    "end": 3192,
                    "replacementText": "let arrayFunc: <T extends object>(array: Array<T>) => Array<string> = <T extends object>(array: Array<T>): Array<string> => {\n    return array.map((x) => x.toString());\n};"
                }
            ],
            "suggest": "",
            "rule": "Nested functions are not supported (arkts-no-nested-funcs)"
        },
        {
            "line": 157,
            "column": 5,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)"
        },
        {
            "line": 106,
            "column": 3,
            "problem": "StrictDiagnostic",
            "suggest": "Property 'val' has no initializer and is not definitely assigned in the constructor.",
            "rule": "Property 'val' has no initializer and is not definitely assigned in the constructor."
        },
        {
            "line": 148,
            "column": 3,
            "problem": "StrictDiagnostic",
            "suggest": "Type 'undefined' is not assignable to type 'string'.",
            "rule": "Type 'undefined' is not assignable to type 'string'."
        },
        {
            "line": 149,
            "column": 18,
            "problem": "StrictDiagnostic",
            "suggest": "Argument of type 'undefined' is not assignable to parameter of type 'string'.",
            "rule": "Argument of type 'undefined' is not assignable to parameter of type 'string'."
        },
        {
            "line": 150,
            "column": 17,
            "problem": "StrictDiagnostic",
            "suggest": "Argument of type 'undefined' is not assignable to parameter of type 'number'.",
            "rule": "Argument of type 'undefined' is not assignable to parameter of type 'number'."
        }
    ]
}
