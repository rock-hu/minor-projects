/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class A extends Numeric {
    private value: int;

    public constructor() {
        this.value = 0;
    }

    public constructor(value: int) {
        this.value = value;
    }

    public constructor(value: Int) {
        this.value = value.intValue();
    }

    public override byteValue(): byte {
        return this.value as byte;
    }

    public override shortValue(): short {
        return this.value as short;
    }

    public override intValue(): int {
        return this.value;
    }

    public override longValue(): long {
        return this.value as long;
    }

    public override floatValue(): float {
        return this.value as float;
    }

    public override doubleValue(): double {
        return this.value as double;
    }

    public override toString(): String {
        return new String(this.value);
    }
}

function main(){
    let r: Record<A | number, number> = {
        1: 1,
    }
}