/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Registers in x86-64
 *
 * - caller-save registers: %rax, %rcx, %rdx, %rdi, %rsi, %rsp, and %r8-r11
 * - callee-saved registers: %r12, %r13, %r14, %r15, %rbx, %rsp, %rbp.
 * - In contrast to the Intel386 ABI, %rdi, and %rsi in x86-64 belong to the called function, not
 *   the caller. So, It's caller-save registers
 * - User-level applications use as integer registers for passing the sequence %rdi, %rsi, %rdx, %rcx,
 *   %r8 and %r9. The kernel interface uses %rdi, %rsi, %rdx, %r10, %r8 and %r9.
 * - the sequence %rax, %rdx is used to return INTEGER,
 * - rdx is used to pass 3rd argument to functions; 2nd return register
 * - %r11 is neither required to be preserved, nor is it used to pass arguments
 */
/* ID, 8-bit prefix, 8-16 bit prefix, 16-bit prefix, 32-bit prefix, 64-bit prefix, canBeAssigned, isCalleeSave, isParam, isSpill, isExtraSpill */
INT_REG(0 , "BL", "BH", "W", "L", "Q", true, false, false, false, false) //AX
INT_REG(1 , "BL", "BH", "W", "L", "Q", true, false, true, false, false)  //CX
INT_REG(2 , "BL", "BH", "W", "L", "Q", true, false, true, false, false)  //DX
INT_REG(3 , "BL", "BH", "W", "L", "Q", true, true, false, false, false)  //BX
INT_REG(4 , "B",   "",  "W", "L", "Q", false, false, false, false, false)
INT_REG(5 , "B",   "",  "W", "L", "Q", false, true, false, false, false)
INT_REG(6 , "B",   "",  "W", "L", "Q", true, false, true, false, false)
INT_REG(7 , "B",   "",  "W", "L", "Q", true, false, true, false, false)
INT_REG(8 , "B",   "",  "W", "L", "Q", true, false, true, false, false)
INT_REG(9 , "B",   "",  "W", "L", "Q", true, false, true, false, false)
INT_REG(10, "B",   "",  "W", "L", "Q", true, false, false, true, false)
INT_REG(11, "B",   "",  "W", "L", "Q", true, false, false, true, false)
INT_REG(12, "B",   "",  "W", "L", "Q", true, true, false, false, false)
INT_REG(13, "B",   "",  "W", "L", "Q", true, true, false, false, false)
INT_REG(14, "B",   "",  "W", "L", "Q", true, true, false, false, false)
INT_REG(15, "B",   "",  "W", "L", "Q", true, true, false, false, false)
/* instruction pointer */
INT_REG(16, "B",   "",  "W", "L", "Q", false, false, false, false, false)

/* Alias */
INT_REG_ALIAS(AX, 0)
INT_REG_ALIAS(CX, 1)
INT_REG_ALIAS(DX, 2)
INT_REG_ALIAS(BX, 3)
INT_REG_ALIAS(SP, 4)
INT_REG_ALIAS(BP, 5)
INT_REG_ALIAS(SI, 6)
INT_REG_ALIAS(DI, 7)

INT_REG_ALIAS(FP, 5)
INT_REG_ALIAS(YP, 12)
INT_REG_ALIAS(IP, 16)
INT_REG_ALIAS(LAST_GP_REG, 16)