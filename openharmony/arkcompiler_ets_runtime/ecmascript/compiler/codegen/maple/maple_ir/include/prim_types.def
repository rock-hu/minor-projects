/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifdef LOAD_ALGO_PRIMARY_TYPE
#undef LOAD_ALGO_PRIMARY_TYPE
// NOTE: this ordering needs to be in sync with ptypesizetable[] in maplevm/src/vmfunc.cpp
  PRIMTYPE(void)
  PRIMTYPE(i8)
  PRIMTYPE(i16)
  PRIMTYPE(i32)
  PRIMTYPE(i64)
  PRIMTYPE(u8)
  PRIMTYPE(u16)
  PRIMTYPE(u32)
  PRIMTYPE(u64)
  PRIMTYPE(u1)
  PRIMTYPE(ptr)
  PRIMTYPE(ref)
  PRIMTYPE(a64)
  PRIMTYPE(f32)
  PRIMTYPE(f64)
  PRIMTYPE(dynany)
  PRIMTYPE(unknown)
#endif // ~LOAD_ALGO_PRIMARY_TYPE


#ifdef LOAD_PRIMARY_TYPE_PROPERTY
#undef LOAD_PRIMARY_TYPE_PROPERTY

static const PrimitiveTypeProperty PTProperty_begin = {
  /*type=*/PTY_begin, /*isInteger=*/false, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_void = {
  /*type=*/PTY_void, /*isInteger=*/false, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_i8 = {
  /*type=*/PTY_i8, /*isInteger=*/true, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_i16 = {
  /*type=*/PTY_i16, /*isInteger=*/true, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_i32 = {
  /*type=*/PTY_i32, /*isInteger=*/true, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_i64 = {
  /*type=*/PTY_i64, /*isInteger=*/true, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_u8 = {
  /*type=*/PTY_u8, /*isInteger=*/true, /*isUnsigned=*/true, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_u16 = {
  /*type=*/PTY_u16, /*isInteger=*/true, /*isUnsigned=*/true, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

/* isAddress and isPointer are overloaded in getter method for PTProperty_u32 */
static const PrimitiveTypeProperty PTProperty_u32 = {
  /*type=*/PTY_u32, /*isInteger=*/true, /*isUnsigned=*/true, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

/* isAddress and isPointer are overloaded in getter method for PTProperty_64 */
static const PrimitiveTypeProperty PTProperty_u64 = {
  /*type=*/PTY_u64, /*isInteger=*/true, /*isUnsigned=*/true, /*isAddress=*/true, /*isFloat=*/false,
  /*isPointer=*/true, /*isSimple=*/false,
};

static const PrimitiveTypeProperty PTProperty_u1 = {
  /*type=*/PTY_u1, /*isInteger=*/true, /*isUnsigned=*/true, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_ptr = {
  /*type=*/PTY_ptr, /*isInteger=*/true, /*isUnsigned=*/true, /*isAddress=*/true, /*isFloat=*/false,
  /*isPointer=*/true, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_ref = {
  /*type=*/PTY_ref, /*isInteger=*/true, /*isUnsigned=*/true, /*isAddress=*/true, /*isFloat=*/false,
  /*isPointer=*/true, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_a64 = {
  /*type=*/PTY_a64, /*isInteger=*/true, /*isUnsigned=*/true, /*isAddress=*/true, /*isFloat=*/false,
  /*isPointer=*/true, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_f32 = {
  /*type=*/PTY_f32, /*isInteger=*/false, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/true,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_f64 = {
  /*type=*/PTY_f64, /*isInteger=*/false, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/true,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_dynany = {
  /*type=*/PTY_dynany, /*isInteger=*/false, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_unknown = {
  /*type=*/PTY_unknown, /*isInteger=*/false, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

static const PrimitiveTypeProperty PTProperty_end = {
  /*type=*/PTY_end, /*isInteger=*/false, /*isUnsigned=*/false, /*isAddress=*/false, /*isFloat=*/false,
  /*isPointer=*/false, /*isSimple=*/false
};

#endif // ~LOAD_PRIMARY_TYPE_PROPERTY
