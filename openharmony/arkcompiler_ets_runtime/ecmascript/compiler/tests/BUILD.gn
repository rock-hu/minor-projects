# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//arkcompiler/ets_runtime/js_runtime_config.gni")
import("//arkcompiler/ets_runtime/test/test_helper.gni")

module_output_path = "ets_runtime"

host_unittest_action("AssemblerTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "../assembler/tests/assembler_aarch64_test.cpp",
    "../assembler/tests/assembler_x64_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]

  # hiviewdfx libraries
  external_deps = hiviewdfx_ext_deps
  deps += hiviewdfx_deps
}

host_unittest_action("TypedArrayLoweringTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "typed_array_lowering_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
  external_deps = [ "zlib:libz" ]
}

host_unittest_action("DeadCodeEliminationTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "dead_code_elimination_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
}

host_unittest_action("CombinedPassVisitorTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "combined_pass_visitor_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
}

host_unittest_action("LoopOptimizationTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "loop_optimization_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
  external_deps = [ "zlib:libz" ]
}

host_unittest_action("ConstantFoldingTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "constant_folding_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
  external_deps = [ "zlib:libz" ]
}

host_unittest_action("GlobalValueNumberingTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "global_value_numbering_test.cpp",
    "meta_data_equal_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
  external_deps = [ "zlib:libz" ]
}

host_unittest_action("InstructionCombineTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "instruction_combine_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
  external_deps = [ "zlib:libz" ]
}

host_unittest_action("CreateEmptyFileTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "create_empty_file_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
  external_deps = [ "zlib:libz" ]
}

host_unittest_action("AotVersionTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "aot_version_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
  external_deps = [ "zlib:libz" ]
}

host_unittest_action("AotCompilerStatsTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "aot_compiler_stats_test.cpp",
  ]

  deps = [
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
  external_deps = [ 
    "runtime_core:libarkfile_static",
    "zlib:libz",
  ]
}

host_unittest_action("NumberSpeculativeRetypeTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "number_speculative_retype_test.cpp",
  ]

  deps = [
    "$ark_root/libpandafile:libarkfile_static",
    "$js_root:libark_jsruntime_test_set",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
  ]
  external_deps = [ "zlib:libz" ]
}

group("host_unittest") {
  testonly = true

  # deps file
  deps = [
    ":AotCompilerStatsTestAction",
    ":AotVersionTestAction",
    ":AssemblerTestAction",
    ":ConstantFoldingTestAction",
    ":CreateEmptyFileTestAction",
    ":GlobalValueNumberingTestAction",
    ":InstructionCombineTestAction",
    ":LoopOptimizationTestAction",
    ":NumberSpeculativeRetypeTestAction",
    ":TypedArrayLoweringTestAction",
  ]

  if (is_mac) {
    deps -= [ ":AssemblerTestAction" ]
  }
}
