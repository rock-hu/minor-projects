# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../js_runtime_config.gni")
import("../../../test/test_helper.gni")

module_output_path = "ets_runtime"

host_unittest_action("OhosTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "mock/mock_enable_aot_list_helper.cpp",
    "ohos_test.cpp",
  ]

  configs = [
    "$js_root:ecma_test_config",
    "$ark_root/assembler:arkassembler_public_config",
  ]

  deps = [
    "$ark_third_party_root/icu/icu4c:shared_icui18n",
    "$ark_third_party_root/icu/icu4c:shared_icuuc",
    "$js_root:libark_jsruntime_test",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
    sdk_libc_secshared_dep,
  ]

  # hiviewdfx libraries
  external_deps = hiviewdfx_ext_deps
  deps += hiviewdfx_deps
  external_deps += [ "zlib:libz" ]
}

host_unittest_action("CrashTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "crash_test.cpp",
    "mock/mock_aot_runtime_info.cpp",
  ]

  configs = [
    "$js_root:ecma_test_config",
    "$ark_root/assembler:arkassembler_public_config",
  ]

  deps = [
    "$ark_third_party_root/icu/icu4c:shared_icui18n",
    "$ark_third_party_root/icu/icu4c:shared_icuuc",
    "$js_root:libark_jsruntime_test",
    "$js_root/ecmascript/compiler:libark_jsoptimizer_set",
    sdk_libc_secshared_dep,
  ]

  # hiviewdfx libraries
  external_deps = hiviewdfx_ext_deps
  deps += hiviewdfx_deps
  external_deps += [ "zlib:libz" ]
}

group("unittest") {
  testonly = true
  deps = [
    ":CrashTest",
    ":OhosTest",
  ]
}

group("host_unittest") {
  testonly = true
  deps = [
    ":CrashTestAction",
    ":OhosTestAction",
  ]
  if (is_mac) {
    deps -= [
      ":CrashTestAction",
      ":OhosTestAction",
    ]
  }
}
