/*
 * Copyright (c) 2021-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file -- DO NOT EDIT!

#include <initializer_list>
#include "assembly-ins.h"

namespace panda::pandasm {

% def insn2node(insn)
%   mnemonic = insn.mnemonic.split('.')
%   return mnemonic.map{|el| el == '64' ? 'Wide' : el.capitalize}.join()
% end
%
% Panda::instructions.group_by(&:mnemonic).each do |mnemonic, group|
% insn = group.first 
% signature = assembler_signature(group, insn.jump?)
% signature_str = signature.map { |o| "#{o.type} #{o.name}" }.join(', ')
% param_str = signature.map { |o| "#{o.name}" }.join(', ')
inline Ins* Create_<%= insn.asm_token %>(<%= signature_str %>)
{
    return new pandasm::<%= insn2node(insn) %>(<%= param_str %>);
}

% end


} // namespace panda::pandasm
