/*
 * Copyright (c) 2021-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file -- DO NOT EDIT!

#include <initializer_list>
#include "assembly-ins.h"

namespace panda::pandasm {

% Panda::instructions.group_by(&:mnemonic).each do |mnemonic, group|
% insn = group.first 
% signature = assembler_signature(group, insn.jump?)
% signature_str = signature.map { |o| "#{o.type} #{o.name}" }.join(', ')
inline Ins Create_<%= insn.asm_token %>(<%= signature_str %>)
    {
    Ins <%=insn.emitter_name%>_;
    <%=group.first.emitter_name%>_.opcode = Opcode::<%= insn.asm_token %>;
%   format = format_ops(insn.format)
%   format.each { |o| o.width = storage_width(o.width) }
%   count_reg = 0
%   format.each_with_index do |o, i|
%      if o.name.start_with?('v')
%          count_reg += 1
%      end
%   end
%   if count_reg > 0 then
    <%=group.first.emitter_name%>_.regs.reserve(<%= count_reg %>);
%   end
%   format.each_with_index do |o, i|
%       if o.name.start_with?('imm')
%          if insn.jump?
    <%=group.first.emitter_name%>_.ids.push_back(label);
%          else
    <%=group.first.emitter_name%>_.imms.emplace_back(<%= o.name %>);
%          end
%       elsif o.name.start_with?('id')
    <%=group.first.emitter_name%>_.ids.push_back(<%= o.name %>);
%       else
    <%=group.first.emitter_name%>_.regs.push_back(<%= o.name %>);
%       end
%   end
    return <%=insn.emitter_name%>_;
    }

% end


} // namespace panda::pandasm
