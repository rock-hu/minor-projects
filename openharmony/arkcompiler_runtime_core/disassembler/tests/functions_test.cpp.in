/*
 * Copyright (c) 2021-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <iostream>
#include <string>

#include <gtest/gtest.h>
#include "disassembler.h"

using namespace panda::disasm;

#cmakedefine DISASM_BIN_DIR "@DISASM_BIN_DIR@/"

TEST(functions_test, empty_function)
{
    Disassembler d {};

    std::stringstream ss {};
    d.Disassemble(std::string(DISASM_BIN_DIR) + "empty_function.bc");
    d.Serialize(ss, false);

    ASSERT_TRUE(ss.str().find(".function void A(i32 a0) <static> {\n}") != std::string::npos);
}

TEST(functions_test, overloading_tests_1)
{
    Disassembler d {};

    std::stringstream ss {};
    d.Disassemble(std::string(DISASM_BIN_DIR) + "overloading.bc");
    d.Serialize(ss, false);

    ASSERT_NE(ss.str().find(".function void f() <static> {\n}"), std::string::npos);
    ASSERT_NE(ss.str().find(".function void f(u1 a0, i8 a1) <static> {\n}"), std::string::npos);
    ASSERT_NE(ss.str().find(".function void f(u1 a0) <static> {\n}"), std::string::npos);
    ASSERT_NE(ss.str().find("call.short f:()\n\t"
                            "call.short f:(u1), v1\n\t"
                            "call.short f:(u1,i8), v1, v1"),
              std::string::npos);
}

#undef DISASM_BIN_DIR
