# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

intrinsics:
- name: AbckitLoadConstArray
  space: abckit
  class_name: "LoadConstArray"
  method_name: "lda.const"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ literalarray_id ]
  clear_flags: [ "require_state", "call", "heap_inv", "acc_write", "acc_read" ]
  set_flags: ["load"]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadString
  space: abckit
  class_name: "LoadString"
  method_name: "lda.str"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ string_id ]
  clear_flags: [ "require_state", "call", "heap_inv", "acc_read", "no_dce", "barrier" ]
  set_flags: ["load"]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitCheckCast
  space: abckit
  class_name: "CheckCast"
  method_name: "checkcast"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ ref, type_id ]
  clear_flags: [ "require_state", "call", "heap_inv", "acc_write", "barrier" ]
  set_flags: ["load", "no_dst"]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitIsInstance
  space: abckit
  class_name: "IsInstance"
  method_name: "isinstance"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: i32
    args: [ ref, type_id ]
  clear_flags: [ "require_state", "call", "heap_inv", "barrier", "can_throw", "no_dce", "no_hoist", "no_cse"]
  set_flags: []
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitThrow
  space: abckit
  class_name: "Throw"
  method_name: "throw"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ ref ]
  clear_flags: [ "require_state", "call", "heap_inv", "runtime_call", "acc_read", "acc_write" ]
  set_flags: ["cf", "terminator", "no_dst"]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitNewArray
  space: abckit
  class_name: "NewArray"
  method_name: "newarr"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ i32, type_id ]
  clear_flags: [ "require_state", "call", "heap_inv", "barrier", "acc_read", "acc_write" ]
  set_flags: [ "alloc", "mem_barrier" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitNewObject
  space: abckit
  class_name: "NewObject"
  method_name: "newobj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ type_id ]
  clear_flags: [ "require_state", "call", "heap_inv", "barrier", "acc_read", "acc_write" ]
  set_flags: [ "alloc", "mem_barrier" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitInitObjectShort
  space: abckit
  class_name: "InitObject"
  method_name: "initobj.short"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ none, none, method_id ]
  clear_flags: [ "require_state", "call", "heap_inv", "barrier", "acc_read"]
  set_flags: [ "alloc" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitInitObject
  space: abckit
  class_name: "InitObject"
  method_name: "initobj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ none, none, none, none, method_id ]
  clear_flags: [ "require_state", "call", "heap_inv", "barrier", "acc_read"]
  set_flags: [ "alloc" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitInitObjectRange
  space: abckit
  class_name: "InitObject"
  method_name: "initobj.range"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ none, method_id ]
  clear_flags: [ "require_state", "call", "heap_inv", "barrier", "acc_read"]
  set_flags: [ "alloc" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadObject
  space: abckit
  class_name: "LoadObject"
  method_name: "ldobj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: b32
    args: [ ref, field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_read"]
  set_flags: [ "load" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadObjectWide
  space: abckit
  class_name: "LoadObject"
  method_name: "ldobj.64"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: b64
    args: [ ref, field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_read"]
  set_flags: [ "load" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadObjectObject
  space: abckit
  class_name: "LoadObject"
  method_name: "ldobj.obj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ ref, field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_read"]
  set_flags: [ "load" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStoreObject
  space: abckit
  class_name: "StoreObject"
  method_name: "stobj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ ref, b32, field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_write"]
  set_flags: [ "store", "no_dst" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStoreObjectWide
  space: abckit
  class_name: "StoreObject"
  method_name: "stobj.64"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ ref, b64, field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_write"]
  set_flags: [ "store", "no_dst" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStoreObjectObject
  space: abckit
  class_name: "StoreObject"
  method_name: "stobj.obj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ ref, ref, field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_write"]
  set_flags: [ "store", "no_dst" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadStatic
  space: abckit
  class_name: "LoadStatic"
  method_name: "ldstatic"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: b32
    args: [ field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_read"]
  set_flags: [ "load" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadStaticWide
  space: abckit
  class_name: "LoadStatic"
  method_name: "ldstatic.64"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: b64
    args: [ field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_read"]
  set_flags: [ "load" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadStaticObject
  space: abckit
  class_name: "LoadStatic"
  method_name: "ldstatic.obj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_read"]
  set_flags: [ "load" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStoreStatic
  space: abckit
  class_name: "StoreStatic"
  method_name: "ststatic"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ b32, field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_write"]
  set_flags: [ "store", "no_dst" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStoreStaticWide
  space: abckit
  class_name: "StoreStatic"
  method_name: "ststatic.64"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ b64, field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_write"]
  set_flags: [ "store", "no_dst" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStoreStaticObject
  space: abckit
  class_name: "StoreStatic"
  method_name: "ststatic.obj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ ref, field_id ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_write"]
  set_flags: [ "store", "no_dst" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStoreArray
  space: abckit
  class_name: "StoreArray"
  method_name: "starr"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ ref, i32, i32 ]
  clear_flags: [ "can_throw", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_write"]
  set_flags: [ "store", "no_dst" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStoreArrayWide
  space: abckit
  class_name: "StoreArray"
  method_name: "starr.64"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ ref, i32, i64 ]
  clear_flags: [ "can_throw", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_write"]
  set_flags: [ "store", "no_dst" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStoreArrayObject
  space: abckit
  class_name: "StoreArray"
  method_name: "starr.obj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: none
    args: [ ref, i32, ref ]
  clear_flags: [ "can_throw", "require_state", "call", "runtime_call", "heap_inv", "barrier", "acc_write"]
  set_flags: [ "store", "no_dst" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadArray
  space: abckit
  class_name: "LoadArray"
  method_name: "ldarr"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: i32
    args: [ i32, ref ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier"]
  set_flags: [ "load" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadArrayWide
  space: abckit
  class_name: "LoadArray"
  method_name: "ldarr.64"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: i64
    args: [ i32, ref ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier"]
  set_flags: [ "load" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitLoadArrayObject
  space: abckit
  class_name: "LoadArray"
  method_name: "ldarr.obj"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: ref
    args: [ i32, ref ]
  clear_flags: [ "can_throw", "no_dce", "require_state", "call", "runtime_call", "heap_inv", "barrier"]
  set_flags: [ "load" ]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false


- name: AbckitEquals
  space: abckit
  class_name: "Equals"
  method_name: "ets.equals"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: i32
    args: [ ref, ref ]
  clear_flags: ["acc_read", "require_state", "can_throw", "heap_inv", "no_dce", "no_cse", "no_hoist"]
  set_flags: ["commutative"]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitStrictEquals
  space: abckit
  class_name: "StrictEquals"
  method_name: "ets.strictequals"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: i32
    args: [ ref, ref ]
  clear_flags: ["acc_read", "require_state", "can_throw", "heap_inv", "no_dce", "no_cse", "no_hoist"]
  set_flags: ["commutative"]
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false

- name: AbckitIsNullValue
  space: abckit
  class_name: "IsNullValue"
  method_name: "ets.isnullvalue"
  compiler_only: true
  private: false
  static: true
  safepoint_after_call: false
  signature:
    ret: u1
    args: [ ref ]
  clear_flags: [ "require_state", "call", "heap_inv", "barrier", "can_throw", "no_dce", "no_hoist", "no_cse"]
  set_flags: []
  is_stub: false
  additional_temps: 0
  codegen_arch: []
  need_nullcheck: []
  is_fastpath: false
  need_param_locations: false
