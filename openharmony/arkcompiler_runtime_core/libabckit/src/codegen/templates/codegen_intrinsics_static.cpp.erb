/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file -- DO NOT EDIT!

// NOLINTNEXTLINE(readability-function-size)
void CodeGenStatic::VisitIntrinsic(GraphVisitor *visitor, Inst *instBase)
{
    ASSERT(instBase->IsIntrinsic());
    auto inst = instBase->CastToIntrinsic();
    auto enc = static_cast<CodeGenStatic *>(visitor);
    switch (inst->GetIntrinsicId()) {
% Common::each_plugin_suboption("bytecodeopt", "codegen_intrinsics_inc") do |codegen_intrinsics_inc, plugin_lang|
    // Lang <%= plugin_lang %>
    #include "<%= codegen_intrinsics_inc %>"
% end
#include "codegen_call_intrinsics_static.inc"
% Compiler::intrinsics.select {|intrinsic| intrinsic.space == "abckit" }.each do |intrinsic|
        case ark::compiler::RuntimeInterface::IntrinsicId::<%= intrinsic.entrypoint_name %>:
%   if intrinsic.class_name == 'Equals'
            VisitEtsEquals(visitor, instBase);
%   else
            Visit<%= intrinsic.class_name %>Intrinsic(visitor, instBase);
%   end
            return;
% end
        default: {
            enc->success_ = false;
            LOG(ERROR,COMPILER) << "Unsupported intrinsic";
        }
    }
}
