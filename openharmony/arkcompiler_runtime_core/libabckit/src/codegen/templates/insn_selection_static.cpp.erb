/**
 * Copyright (c) 2021-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file -- DO NOT EDIT!
// NOLINTBEGIN(readability-magic-numbers)

% call_me_from_template

% visitors.each do |visitor|
<%= visitor_sig(visitor.ir_op) %> {
    pandasm::Ins ins;
    [[maybe_unused]] auto enc = static_cast<CodeGenStatic *>(v);
%   name = nil
%   Compiler::intrinsics.select {|intrinsic| intrinsic.space == "abckit" }.each do |intrinsic|
%     if (visitor.ir_op == "#{intrinsic.class_name}Intrinsic")
%       name = "Intrinsic"
%     end
%   end
%   name = visitor.ir_op unless name
    [[maybe_unused]] auto inst = instBase->CastTo<%= name %>();
<%= visitor.cpp %>
<%= visitor.switch.encode %>
}
% end

// NOLINTEND(readability-magic-numbers)

void CodeGenStatic::VisitInitObjectIntrinsic(GraphVisitor *visitor, Inst *inst)
{
    CallHandler(visitor, inst);
}
