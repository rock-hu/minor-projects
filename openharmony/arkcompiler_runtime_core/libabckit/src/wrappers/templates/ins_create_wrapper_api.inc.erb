/*
 * Copyright (c) 2021-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file -- DO NOT EDIT!

% additional_deprecated_opcodes = ["JNSTRICTEQUNDEFINED",
%                                 "JSTRICTEQUNDEFINED",
%                                 "JNEUNDEFINED",
%                                 "JEQUNDEFINED",
%                                 "JNSTRICTEQNULL",
%                                 "JSTRICTEQNULL",
%                                 "JNENULL",
%                                 "JEQNULL",
%                                 "JNSTRICTEQZ",
%                                 "JSTRICTEQZ",
%                                 "STTOGLOBALRECORD",
%                                 "STCONSTTOGLOBALRECORD",
%                                 "CREATEREGEXPWITHLITERAL",
%                                 "CLOSEITERATOR"]

% replaced_opcodes = ["JNSTRICTEQ",
%                    "JSTRICTEQ",
%                    "JNE",
%                    "JEQ"]

% skipped_opcodes = additional_deprecated_opcodes + replaced_opcodes

% Panda::instructions.group_by(&:mnemonic).each do |mnemonic, group|
% insn = group.first
% signature = assembler_signature(group, insn.jump?)
% signature_str = signature.map { |o| "#{o.type} #{o.name}" }.join(', ')
% if !(insn.opcode.upcase.include? "DEPRECATED_") && !(skipped_opcodes.include? insn.mnemonic.upcase)
// NOLINTNEXTLINE(readability-identifier-naming)
static InsWrapper Create_<%= insn.asm_token %>_Wrapper(<%= signature_str %>)
{
    InsWrapper <%=insn.emitter_name.downcase%>Inst;
    <%=group.first.emitter_name.downcase%>Inst.opcode = "<%= insn.asm_token.downcase %>";
%   format = format_ops(insn.format)
%   format.each { |o| o.width = storage_width(o.width) }
%   count_reg = 0
%   format.each_with_index do |o, i|
%      if o.name.start_with?('v')
%          count_reg += 1
%      end
%   end
%   if count_reg > 0 then
    <%=group.first.emitter_name.downcase%>Inst.regs.reserve(<%= count_reg %>);
%   end
%   format.each_with_index do |o, i|
%       if o.name.start_with?('imm')
%          if insn.jump?
    <%=group.first.emitter_name.downcase%>Inst.ids.push_back(label);
%          else
    <%=group.first.emitter_name.downcase%>Inst.imms.emplace_back(<%= o.name %>);
%          end
%       elsif o.name.start_with?('id')
    <%=group.first.emitter_name.downcase%>Inst.ids.push_back(<%= o.name %>);
%       else
    <%=group.first.emitter_name.downcase%>Inst.regs.push_back(<%= o.name %>);
%       end
%   end
    return <%=insn.emitter_name.downcase%>Inst;
}
%   end
% end
