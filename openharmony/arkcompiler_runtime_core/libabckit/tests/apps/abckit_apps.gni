# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//arkcompiler/ets_frontend/es2panda/es2abc_config.gni")
import("//arkcompiler/ets_frontend/ets2panda/ets2abc_config.gni")
import("//arkcompiler/runtime_core/ark_config.gni")
import("//arkcompiler/runtime_core/libabckit/abckit_config.gni")

template("expand_merge_rel_file") {
  assert(defined(invoker.input_file), "input_file is required!")
  assert(defined(invoker.output_file), "output_file is required!")
  assert(defined(invoker.app_src_dir), "app_src_dir is required!")

  action(target_name) {
    script = "$abckit_root/scripts/rebase_merge_file.sh"

    args = [
      rebase_path(invoker.input_file),
      rebase_path(invoker.output_file),
      rebase_path(invoker.app_src_dir),
    ]

    print(script, string_join(" ", args))

    extra_dependencies = []
    forward_variables_from(invoker, [ "extra_dependencies" ])
    deps = extra_dependencies

    inputs = [ invoker.input_file ]

    outputs = [ invoker.output_file ]
  }
}

template("app_intts_to_abc") {
  assert(defined(invoker.app), "app is required!")
  assert(defined(invoker.apps_root), "apps_root is required!")

  # _src_dir_ = invoker.app_src_dir
  _src_dir_ = "${invoker.apps_root}/${invoker.app}"
  _app_merge_rel_ = "${_src_dir_}/filesInfo.rel.txt"

  _app_merge_ = "${target_out_dir}/${invoker.app}_filesInfo.txt"
  _app_abc_ = "${target_out_dir}/${invoker.app}.abc"

  expand_merge_rel_file("app_${invoker.app}_merge") {
    input_file = "$_app_merge_rel_"
    output_file = "$_app_merge_"
    app_src_dir = "$_src_dir_"
  }

  es2abc_gen_abc(target_name) {
    extra_visibility = [ ":*" ]

    extra_dependencies = [ ":app_${invoker.app}_merge" ]

    src_js = "@" + rebase_path(_app_merge_)
    dst_file = rebase_path(_app_abc_)
    extra_args = [
      "--module",
      "--merge-abc",
      "--enable-annotations",
    ]

    extension = "ts"
    in_puts = [ _app_merge_ ]
    out_puts = [ _app_abc_ ]
  }
}

template("stress_test_action") {
  assert(defined(invoker.input_abc), "input_abc should be defined!")

  _out_abc_ = "${target_out_dir}/${target_name}/stress.abc"
  _host_test_target_ = ":${target_name}(${host_toolchain})"
  _root_out_dir_ = get_label_info(_host_test_target_, "root_out_dir")

  _abckit_binary_path_ =
      rebase_path(_root_out_dir_) + "/arkcompiler/runtime_core/abckit"
  _plugin_path_ = rebase_path(_root_out_dir_) +
                  "/arkcompiler/runtime_core/libabckit_stress_plugin.so"
  _abckit_binary_args_ = [
    "--plugin-path",
    _plugin_path_,
    "--input-file",
    rebase_path(invoker.input_abc),
    "--output-file",
    rebase_path(_out_abc_),
  ]
  _ld_library_paths_ = [
    rebase_path(_root_out_dir_) + "/arkcompiler/runtime_core:",
    rebase_path(_root_out_dir_) + "/arkcompiler/ets_runtime:",
    rebase_path(_root_out_dir_) + "/thirdparty/icu:",
    rebase_path(_root_out_dir_) + "/thirdparty/zlib:",
  ]

  action(target_name) {
    testonly = true

    deps = [
      "$abckit_root/abckit:abckit(${host_toolchain})",
      "$abckit_root/abckit/stress_plugin:abckit_stress_plugin(${host_toolchain})",
    ]

    if (defined(invoker.extra_dependencies)) {
      deps += invoker.extra_dependencies
    }

    script = "$abckit_root/scripts/run_script.sh"

    args = [
      "--ret-code=0",
      "--env=" + "LD_LIBRARY_PATH=" + string_join(":", _ld_library_paths_),
      "--script=" + _abckit_binary_path_,
      "--script-args=" + string_join(" ", _abckit_binary_args_),
    ]

    if (abckit_with_sanitizers) {
      args += [ "--env=ASAN_OPTIONS=verify_asan_link_order=0" ]
      args +=
          [ "--env=LSAN_OPTIONS=suppressions=" + rebase_path("$abckit_root") +
            "/tests/sanitizers/ignored_leaks.supp" ]
    }

    print(script, string_join(" ", args))

    inputs = [ invoker.input_abc ]
    outputs = [ _out_abc_ ]
  }
}

template("stress_test_app_action") {
  assert(defined(invoker.app), "app should be defined!")
  forward_variables_from(invoker, [ "extra_dependencies" ])
  _app_abc_ = "${target_out_dir}/${invoker.app}.abc"

  stress_test_action(target_name) {
    input_abc = _app_abc_
  }
}
