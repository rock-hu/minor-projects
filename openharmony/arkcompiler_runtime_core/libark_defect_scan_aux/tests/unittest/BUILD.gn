# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/ets_frontend/es2abc_config.gni")
import("//arkcompiler/runtime_core/ark_config.gni")
import("$ark_root/tests/test_helper.gni")

##############################unittest##########################################

test_js_path = "${ark_root}/libark_defect_scan_aux/tests/unittest"
test_script_path = "${ark_root}/libark_defect_scan_aux/tests/unittest/scripts"

defect_scan_aux_test_files = [
  "module_info_test.js",
  "define_info_test.js",
  "callee_info_test.js",
  "debug_info_test.js",
  "graph_test.js",
  "async_function_test.js",
  "ecma2022_class_test.js",
  "sendable_class_test.ts",
]

foreach(file, defect_scan_aux_test_files) {
  file_base_name = get_path_info(file, "name")
  file_extension = get_path_info(file, "extension")

  es2abc_gen_abc("gen_${file_base_name}_abc") {
    test_file = "${test_js_path}/${file_base_name}.${file_extension}"
    test_abc = "${target_out_dir}/${file_base_name}.abc"

    src_js = rebase_path(test_file)
    dst_file = rebase_path(test_abc)

    extra_args = [ "--module" ]

    in_puts = [ test_file ]
    out_puts = [ test_abc ]
  }
}

host_unittest_action("LibArkDefectScanAuxTest") {
  module_out_path = module_output_path
  sources = [ "defect_scan_aux_test.cpp" ]
  configs = [ "$ark_root/libark_defect_scan_aux:defectscanaux_test_config" ]

  deps =
      [ "$ark_root/libark_defect_scan_aux:libark_defect_scan_aux_static_test" ]

  external_deps = [ sdk_libc_secshared_dep ]

  test_abc_dir = rebase_path(target_out_dir)

  defines = [ "DEFECT_SCAN_AUX_TEST_ABC_DIR=\"${test_abc_dir}/\"" ]

  foreach(file, defect_scan_aux_test_files) {
    file_base_name = get_path_info(file, "name")
    deps += [ ":gen_${file_base_name}_abc" ]
  }
}

defect_scan_aux_test_projects = [ "across_abc_test" ]

foreach(project, defect_scan_aux_test_projects) {
  es2abc_gen_abc("gen_${project}_abc") {
    test_js = "${test_js_path}/${project}"
    test_abc = "${target_out_dir}/${project}.abc"

    src_js = rebase_path(test_js)
    dst_file = rebase_path(test_abc)

    extra_args = [
      "--module",
      "--merge-abc",
    ]

    in_puts = [ test_js ]
    out_puts = [ test_abc ]
  }
}

defect_scan_aux_fileinfo_projects = [ "sendable_class_merge_abc_test" ]

foreach(project, defect_scan_aux_fileinfo_projects) {
  action("run_handle_fileinfo_script_" + project) {
    script = "${test_script_path}/handle_fileinfo.py"

    inputs = [ "${test_js_path}/${project}/fileinfo.txt" ]
    outputs = [ "${target_out_dir}/${project}/fileinfo.txt" ]
    args = [
      rebase_path("${test_js_path}/${project}/fileinfo.txt"),
      rebase_path("${target_out_dir}/${project}/fileinfo.txt"),
      rebase_path("${test_js_path}"),
    ]
  }
}

group("run_python_script_first") {
  foreach(project, defect_scan_aux_fileinfo_projects) {
    deps = [ ":run_handle_fileinfo_script_" + project ]
  }
}

foreach(project, defect_scan_aux_fileinfo_projects) {
  es2abc_gen_abc("gen_${project}_abc") {
    test_fileinfo = "${target_out_dir}/${project}/fileinfo.txt"
    test_abc = "${target_out_dir}/${project}.abc"

    src_middle = rebase_path(test_fileinfo)
    src_js = "@${src_middle}"
    dst_file = rebase_path(test_abc)

    extra_args = [
      "--module",
      "--merge-abc",
    ]

    out_puts = [ test_abc ]
  }
}

group("gen_projects_through_fileinfo") {
  deps = [ ":run_python_script_first" ]
  foreach(project, defect_scan_aux_fileinfo_projects) {
    deps += [ ":gen_${project}_abc" ]
  }
}

host_unittest_action("LibArkDefectScanAuxMergeTest") {
  module_out_path = module_output_path
  sources = [ "defect_scan_aux_merge_test.cpp" ]
  configs = [ "$ark_root/libark_defect_scan_aux:defectscanaux_test_config" ]

  deps =
      [ "$ark_root/libark_defect_scan_aux:libark_defect_scan_aux_static_test" ]

  external_deps = [ sdk_libc_secshared_dep ]

  print("target_out_dir", target_out_dir)
  target_dir = rebase_path(target_out_dir)
  print("target_dir", target_dir)
  test_abc_dir = "${target_dir}"
  print("test_abc_dir", test_abc_dir)

  defines = [ "DEFECT_SCAN_AUX_TEST_MERGE_ABC_DIR=\"${test_abc_dir}/\"" ]

  foreach(project, defect_scan_aux_test_projects) {
    deps += [ ":gen_${project}_abc" ]
  }

  deps += [ ":gen_projects_through_fileinfo" ]
}

group("host_unittest") {
  testonly = true
  deps = [
    ":LibArkDefectScanAuxMergeTestAction",
    ":LibArkDefectScanAuxTestAction",
  ]
}

ohos_executable("defect_scan_aux_demo") {
  sources = [ "defect_scan_aux_demo.cpp" ]

  configs = [ "$ark_root/libark_defect_scan_aux:defectscanaux_test_config" ]

  deps =
      [ "$ark_root/libark_defect_scan_aux:libark_defect_scan_aux_static_test" ]

  external_deps = [ sdk_libc_secshared_dep ]

  part_name = "runtime_core"
  subsystem_name = "arkcompiler"
}
