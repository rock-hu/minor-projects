/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <iostream>
#include "assembly-ins.h"

namespace ark::pandasm {

// NOLINTNEXTLINE(readability-function-size)
std::string ark::pandasm::Ins::ToString(const std::string &endline, bool printArgs /* = false */,
                                          size_t firstArgIdx /* = 0*/) const {
    std::string fullOperation {};
    std::string regCase {};
    if (this->setLabel) {
        fullOperation += this->label +": ";
    }
    switch(this->opcode) {

% Panda::instructions.group_by(&:mnemonic).each do |mnemonic, group|
%  insn = group.first
%  formats = group.map(&:format)
%  sig_split = insn["sig"].split(' ')
%  operands = insn.operands
%  properties = insn.properties
        case ark::pandasm::Opcode::<%= insn.asm_token%>: {
            fullOperation += "<%= insn.mnemonic%>";
% idx_imm = 0
% idx_reg = 0
% idx_ids = 0
% sig_split.length.times do |index|
% item = sig_split[index]
% next if index == 0
% #NOTE(knazarov): refactor next line
% if (item.include?("id") || item.start_with?("imm") && insn.jump?)
            fullOperation += IdToString(<%= idx_ids%>, <%= index == 1 ? "true" : "false"%>);
%           idx_ids += 1
% elsif item.start_with?("imm")
            fullOperation += ImmToString(<%= idx_imm%>, <%= index == 1 ? "true" : "false"%>);
%           idx_imm += 1
% elsif item.start_with?("v")
            fullOperation += RegToString(<%= idx_reg%>, <%= index == 1 ? "true" : "false"%>, printArgs, firstArgIdx);
%           idx_reg += 1
% end
% end
% if insn.profiled?
            fullOperation += " # [prof=";
            fullOperation += std::to_string(profileId);
            fullOperation += ']';
% end
        } break;
% end
% Panda::pseudo_instructions.each do |insn|
        case ark::pandasm::Opcode::<%= insn.opcode %>: {
            fullOperation += "<%= insn.opcode %>";
            fullOperation += this->OperandsToString(printArgs, firstArgIdx);
        } break;
% end
        case ark::pandasm::Opcode::INVALID: {
            fullOperation += "";
        } break;
    }
    return fullOperation + endline;
}

} // namespace ark::pandasm
