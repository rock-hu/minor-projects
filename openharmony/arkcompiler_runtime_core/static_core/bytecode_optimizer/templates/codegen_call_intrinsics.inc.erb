/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

% Runtime.intrinsics.select{ |i| i.static && !i.signature.stackrange && !i.is_stub && !i.compiler_only && i.has_impl? &&
%         !i.clear_flags.include?('call') }.each do |intrinsic|
    case compiler::RuntimeInterface::IntrinsicId::INTRINSIC_<%= intrinsic.enum_name %>: {
%       types = intrinsic.signature.args.map { |i| i.gsub("\\[", "[]") } + [intrinsic.signature.ret]
%       # `inspect` escapes possible backslashes in ret type descriptor
%       plugin_opts = Common::plugins[intrinsic.space.upcase]
%       sep = plugin_opts ? plugin_opts["class_name_separator"] : nil
%       class_name = intrinsic.class_name
%       signature = types.join(';')
%       if sep && sep != '.' then
%         class_name = class_name.gsub('.', sep)
%         signature = signature.gsub('.', sep)
%       end
        BytecodeGen::CallHandler(visitor, inst, <%= "#{class_name}.#{intrinsic.method_name}:#{signature};".inspect %>);
        break;
    }
% end