/**
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%= Common::include_plugin_files "compiler_extensions", "header_path_implementation_codegen" %>

inline void CreateLoadObjectDynamic([[maybe_unused]] Inst *inst)
{
% Common::each_plugin_suboption("compiler_extensions", "load_object_dynamic_codegen") do |load_object_dynamic_codegen|
    if (<%= load_object_dynamic_codegen %>(inst)) {
        return;
    }
% end

    LOG(WARNING, COMPILER) << "Cannot encode LoadObjectDynamic";
    GetEncoder()->SetFalseResult();
}

inline void CreateStoreObjectDynamic([[maybe_unused]] Inst *inst)
{
% Common::each_plugin_suboption("compiler_extensions", "store_object_dynamic_codegen") do |store_object_dynamic_codegen|
    if (<%= store_object_dynamic_codegen %>(inst)) {
        return;
    }
% end

    LOG(WARNING, COMPILER) << "Cannot encode StoreObjectDynamic";
    GetEncoder()->SetFalseResult();
}

inline void CreateLaunchCall([[maybe_unused]] CallInst *inst)
{
% Common::each_plugin_suboption("compiler_extensions", "launch_call_codegen") do |launch_call_codegen|
    if (<%= launch_call_codegen %>(inst)) {
        return;
    }
% end

    LOG(WARNING, COMPILER) << "Cannot encode StoreObjectDynamic";
    GetEncoder()->SetFalseResult();
}
