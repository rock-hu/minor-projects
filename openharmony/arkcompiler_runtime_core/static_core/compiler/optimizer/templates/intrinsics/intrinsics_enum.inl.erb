/**
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file -- DO NOT EDIT!

% if Compiler::intrinsics.find { |i| i.class_name == 'Irtoc' } != nil
#define IRTOC_INTRINSICS_ENABLED
% end

enum class IntrinsicId {
#ifdef ENABLE_LIBABCKIT
#include "dyn_intrinsics_enum.inc"
#endif
% Compiler::intrinsics.select{ |x| !x.is_irtoc? }.each do |intrinsic|
    <%= intrinsic.entrypoint_name %>,
% end
    LIB_CALL_FMOD,
    LIB_CALL_FMODF,
    LIB_CALL_LDEXP,
    LIB_CALL_LDEXPF,
    LIB_CALL_EXP2,
    LIB_CALL_EXP2F,
    LIB_CALL_MEM_COPY,
    LIB_CALL_MEMSET_8,
    LIB_CALL_MEMSET_16,
    LIB_CALL_MEMSET_32,
    LIB_CALL_MEMSET_64,
    LIB_CALL_MEMSET_F32,
    LIB_CALL_MEMSET_F64,
    LIB_CALL_MEM_MOVE,
    LIB_CALL_MEM_SET,
    COUNT,
    INVALID = COUNT,

    // Irtoc intrinsics
% Compiler::intrinsics.select(&:is_irtoc?).each do |intrinsic|
    <%= intrinsic.entrypoint_name %>,
% end

// Deprecated. Only for capability with js_runtime.
#include "intrinsics_extensions.inl.h"
};
