# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//arkcompiler/runtime_core/static_core/ark_config.gni")
if (ark_standalone_build) {
  import("$build_root/ark.gni")
} else {
  import("//build/ohos.gni")
}

config("arkaot_public_config") {
  include_dirs = [
    "$target_gen_dir/generated",
    "$ark_root/compiler/aot",
    "$ark_root/compiler",
    get_label_info(
        "$ark_root/cross_values:cross_values_getters_generate(${default_toolchain})",
        "target_gen_dir"),
  ]
  if (is_llvm_aot) {
    include_dirs += [ "$ark_root/libllvmbackend" ]
  }
}

ark_gen_file("arkcompiler_options_h") {
  template_file = "$ark_root/templates/options/options.h.erb"
  data = [ "paoc.yaml" ]
  api = [ "$ark_root/templates/common.rb" ]
  output_file = "$target_gen_dir/generated/paoc_options.h"
}

ohos_executable("ark_aot") {
  sources = [ "paoc.cpp" ]

  configs = [
    ":arkaot_public_config",
    "$ark_root:ark_config",
    "$ark_root/runtime:arkruntime_public_config",
    "$ark_root/libpandabase:arkbase_public_config",
    "$ark_root/libpandafile:arkfile_public_config",
    "$ark_root/compiler:arkcompiler_public_config",
    "$ark_root/compiler/aot/aot_builder:aotbuilder_public_config",
  ]

  deps = [
    ":arkcompiler_options_h",
    "$ark_root/compiler:libarktscompiler",
    "$ark_root/compiler/aot:libarkaotmanager",
    "$ark_root/compiler/aot/aot_builder:aotbuilder",
    "$ark_root/cross_values:cross_values_getters_generate(${default_toolchain})",
    "$ark_root/libpandabase:libarktsbase",
    "$ark_root/libpandafile:libarktsfile",
    "$ark_root/platforms/target_defaults:arktarget_options",
    "$ark_root/runtime:libarkruntime",
  ]

  if (enable_codegen) {
    configs +=
        [ "$ark_root/compiler/optimizer/code_generator:arkencoder_config" ]
    deps += [ "$ark_root/compiler/optimizer/code_generator:libarkencoder" ]
  }

  if (is_llvm_aot) {
    configs += [ "$ark_root/libllvmbackend:libllvmbackend_public_config" ]
    sources += [ "paoc_llvm.cpp" ]
    deps += [ "$ark_root/libllvmbackend:libllvmbackend" ]
  }

  external_deps = [ sdk_libc_secshared_dep ]

  install_enable = true
  part_name = ark_part_name
  subsystem_name = "$ark_subsystem_name"
}
