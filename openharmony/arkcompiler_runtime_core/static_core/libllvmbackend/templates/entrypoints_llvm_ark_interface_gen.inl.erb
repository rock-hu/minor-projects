/*
 * Copyright (c) 2023-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOLINTNEXTLINE(readability-function-size)
const char *GetEntrypointInternalName(ark::compiler::RuntimeInterface::EntrypointId id)
{
#ifndef NDEBUG
    switch (id) {
% Compiler::entrypoints.each do |entrypoint|
        case ark::compiler::RuntimeInterface::EntrypointId::<%= entrypoint.enum_name %>:
            return "<%= entrypoint.llvm_internal_name %>";
% end
        default:
            ASSERT_DO(false, (std::cerr << "Cannot get entrypoint name by EntrypointId = " << static_cast<int>(id)
                                        << std::endl));
            UNREACHABLE();
    }
#else
    switch (id) {
% Compiler::entrypoints.each_with_index do |entrypoint, index|
        case ark::compiler::RuntimeInterface::EntrypointId::<%= entrypoint.enum_name %>:
            return "<%= 'e_' + index.to_s(16) %>";
% end
        default:
            ASSERT_DO(false, (std::cerr << "Cannot get entrypoint name by EntrypointId = " << static_cast<int>(id)
                                        << std::endl));
            UNREACHABLE();
    }
#endif
}

