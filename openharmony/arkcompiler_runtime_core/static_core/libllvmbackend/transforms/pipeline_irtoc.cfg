# Copyright (c) 2023-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module(
    function(
        lower-expect,               # Lower expect intrinsic
        simplifycfg,                # Simplify the CFG
        sroa,                       # SROA
        early-cse                   # Early CSE
    ),

    remove-unused-functions,
    function(
        mark-always-inline
    ),

    function(
        loop-simplify,              # Canonicalize natural loops
        lcssa,                      # Loop-Closed SSA Form Pass
        # Unroll loops
        loop-unroll<O2;no-upperbound;peeling;partial>
    ),
    annotation2metadata,            # Annotation2Metadata
    forceattrs,                     # Force set function attributes

    inferattrs,                     # Infer set function attributes
    ipsccp,                         # Interprocedural Sparse Conditional Constant Propagation

    called-value-propagation,       # Called Value Propagation
    globalopt,                      # Global Variable Optimizer
    mem2reg,                        # Promote Memory to Register
    deadargelim,                    # Dead Argument Elimination

    function(
        instcombine,                # Combine redundant instructions
        simplifycfg                 # Simplify the CFG
    ),
    # Adjust analysis for inliner
    require<globals-aa>,
    function(invalidate<aa>),
    require<profile-summary>,
    inline-prepare,
    cgscc(
        inline,
        irtoc-inline-check,
        function-attrs,                 # Deduce function attributes
        function(
            sroa,                       # SROA
            early-cse<memssa>,          # Early CSE (with memory SSA)
            wrap-speculative-execution, # Speculatively execute instructions if target has divergent branches
            jump-threading,             # Jump Threading
            correlated-propagation,     # Value Propagation
            simplifycfg,                # Simplify the CFG
            instcombine,                # Combine redundant instructions
            libcalls-shrinkwrap,        # Conditionally eliminate dead library calls
            pgo-memop-opt,              # PGOMemOPSize
            tailcallelim,               # Tail Call Elimination
            simplifycfg,                # Simplify the CFG
            reassociate,                # Reassociate expressions
            loop-simplify,              # Canonicalize natural loops
            lcssa,                      # Loop-Closed SSA Form Pass
            loop-mssa(
                loop-instsimplify,
                loop-simplifycfg,
                licm,                   # Loop Invariant Code Motion
                loop-rotate,            # Rotate Loops
                licm,                   # Loop Invariant Code Motion
                # Unswitch loops
                simple-loop-unswitch<nontrivial>
            ),
            simplifycfg,                # Simplify the CFG
            instcombine,                # Combine redundant instructions
            loop-simplify,              # Canonicalize natural loops
            lcssa,                      # Loop-Closed SSA Form Pass
            loop-mssa(
                loop-idiom,             # Recognize loop idioms
                indvars,                # Induction Variable Simplification
                loop-deletion           # Delete dead loops
            ),
            loop-unroll,                # Unroll loops
            sroa,                       # SROA
            mldst-motion,               # MergedLoadStoreMotion
            gvn,                        # Global Value Numbering
            sccp,                       # Sparse Conditional Constant Propagation
            bdce,                       # Bit-Tracking Dead Code Elimination
            instcombine,                # Combine redundant instructions
            jump-threading,             # Jump Threading
            correlated-propagation,     # Value Propagation
            adce,                       # Aggressive Dead Code Elimination
            memcpyopt,                  # MemCpy Optimization
            dse,                        # Dead Store Elimination
            loop-simplify,              # Canonicalize natural loops
            lcssa,                      # Loop-Closed SSA Form Pass
            loop-mssa(
                licm                    # Loop Invariant Code Motion
            ),
            # Simplify the CFG
            simplifycfg<hoist-common-insts;sink-common-insts>,
            instcombine                 # Combine redundant instructions
        )
    ),
    elim-avail-extern,              # Eliminate Available Externally Globals
    rpo-function-attrs,             # Deduce function attributes in RPO
    globalopt,                      # Global Variable Optimizer
    globaldce,                      # Dead Global Elimination
    float2int,                      # Float to int
    lower-constant-intrinsics,      # Lower constant intrinsics

    remove-unused-functions,
    discard-inline-module,

    # Continue default pipeline
    function(
        loop-simplify,              # Canonicalize natural loops
        lcssa,                      # Loop-Closed SSA Form Pass
        loop-mssa(
            loop-rotate             # Rotate Loops
        ),
        loop-distribute,            # Loop Distribution
        inject-tli-mappings,        # Inject TLI Mappings
        loop-vectorize<
            no-interleave-forced-only;
            no-vectorize-forced-only
        >,                          # Loop Vectorization
        loop-simplify,              # Canonicalize natural loops
        loop-load-elim,             # LoopLoadEliminationPass
        instcombine,                # Combine redundant instructions
        simplifycfg<
            forward-switch-cond;
            switch-to-lookup;
            no-keep-loops;
            hoist-common-insts;
            sink-common-insts
        >,                          # Simplify the CFG
        slp-vectorizer,             # Transform consecutive stores into vector-stores
        vector-combine,             # Optimize scalar/vector ops
        instcombine,                # Combine redundant instructions
        loop-simplify,              # Canonicalize natural loops
        lcssa,                      # Loop-Closed SSA Form Pass
        loop-unroll,                # Unroll loops
        instcombine,                # Combine redundant instructions
        loop-simplify,              # Canonicalize natural loops
        lcssa,                      # Loop-Closed SSA Form Pass
        loop-mssa(
            licm                    # Loop Invariant Code Motion
        ),
        transform-warning,          # Warn about non-applied transformations
        alignment-from-assumptions  # Alignment from assumptions
    ),
    strip-dead-prototypes,          # Strip Unused Function Prototypes
    globaldce,                      # Dead Global Elimination
    constmerge,                     # Merge Duplicate Global Constants
    function(
        loop-simplify,              # Canonicalize natural loops
        lcssa,                      # Loop-Closed SSA Form Pass
        loop-sink,                  # Loop Sink
        instsimplify,               # Remove redundant instructions
        div-rem-pairs,              # Hoist/decompose integer division and remainder
        simplifycfg,                # Simplify the CFG
        aarch64-fixup-sdiv,         # ARK Fixup SDiv and SRem instructions on AArch64
        expand-atomics              # Expand atomics
    )
)
