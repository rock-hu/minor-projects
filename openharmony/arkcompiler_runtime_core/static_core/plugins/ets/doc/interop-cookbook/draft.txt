General limitations:
Communication can be only between main instance of dynamic VM and main coroutine static VM
Inheritance static from dynamic is not allowed
Different of TS and ArkTS 2.0 languages leads to some additional limitations about usages of some features.
Declgen tools (TS->ArkTS and ArkTS->TS) can not translate all languages features.
Compilers (TS-compiler, and ArkTS-compiler) will not catch all user errors. (limited CTE)
All critical user errors will be covered by runtime exceptions. (RTE will check most cases)
Calling system dynamic API from static VM:
Not all system API will be converted without loosing type information. But it still can be used and will lead to runtime exception in case of wrong usage.
Communication in user application between .ts and ets - files :
Interop should have minimal layer. It means that dynamic and static sources should have minimum intersection, or it can be negative for performance.
When javascript runtime import something from static runtime, it have to use only exist layer of object. It can not add fields or change its types.
Calling JS-third parties:
No any compile time checks, only runtime checks.
Communication for javascript entry point and koala UI:
Will be prepared some special way how it will be communicate with actual limitations.
Known issues:
Use cases in this section are not implemented yet or don't work as intended.
Using class getters/setters cause compilation error;
Passing TS lambda function as a parameter into ArkTS function results in compiler panic;
Passing non-default value into default parameter fails;
Union type check is not performed correctly, no error emmited for the wrong types;
Need to distinguish null and undefined;
TS code imports ArkTS:
Wrapper for the ArkTS object is not extensible;
Method overloading is not supported;
Rest/spread parameters are not supported;
Long numbers require explicit type conversion;

ArkTS code imports TS:
Inheritance static from dynamic is not allowed (needs checking)
Loosing compile-time checks in certain cases (let x: string | number = jsfoo());
Union type checks currently not expressible in ArkTS;
TS indexers and iterable types don't work in ArkTS;
TS constructors returned as lambda functions are not able to create new types;
In certain cases reference sematics can be lost because the actual data is copied between VMs; For example, static array used as an argument of the imported TS function will not receive any changes made by that function because the actual data will be copied into dynamic array before the call.
Some types can't be transfered between VMs: Reflect, Atomics, Intl, JSON, Math;
Long numbers are converted to the ArkTS primitives with loss of accuracy;