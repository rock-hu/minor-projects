# plugin ets_string_builder
# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include_relative 'string_helpers.irt'

module Constants
    ETS_SB_BUFFER_OFFSET = "ark::ObjectHeader::ObjectHeaderSize()"
    ETS_SB_INDEX_OFFSET = ETS_SB_BUFFER_OFFSET + " + ark::OBJECT_POINTER_SIZE"
    ETS_SB_LENGTH_OFFSET = ETS_SB_INDEX_OFFSET + " + sizeof(int32_t)"
    ETS_SB_COMPRESS_OFFSET = ETS_SB_LENGTH_OFFSET + " + sizeof(int32_t)"
end

class SynchronizationType
  :Sync
  :Async
  :AsyncManual
end

#
# Counts a number of digits in the long v (+1 for the sign if v is negative)
#
scoped_macro(:count_digits) do |v|
  negative := Compare(v, 0).SrcType("DataType::INT64").LT.b
  n_digits1 := Add(Cast(1).u64, Cast(negative).u64).u64
  val := Cast(Abs(v).i64).u64
  pow10_4 := Cast(10000).u64
Label(:Loop)
  val1 := Phi(val, val2).u64
  n_digits := Phi(n_digits1, n_digits5).u32
  If(val1, 10).AE.Likely.b {
    If(val1, 100).B.b {
      n_digits2 := AddI(n_digits).Imm(1).u32
      Goto(:Done)
    }
    If(val1,1000).B.b {
      n_digits3 := AddI(n_digits).Imm(2).u32
      Goto(:Done)
    }
    If(val1, 10000).B.b {
      n_digits4 := AddI(n_digits).Imm(3).u32
      Goto(:Done)
    }
    n_digits5 := AddI(n_digits).Imm(4).u32
    val2 := Div(val1, pow10_4).u64
    Goto(:Loop)
  }
Label(:Done)
  result := Phi(n_digits, n_digits2, n_digits3, n_digits4).u32
end


# Converts long to array of chars
# Ex: '-123' is converted to array of chars as follows:
#   chars[0] = 0x002D // '-'
#   chars[1] = 0x0031 // '1'
#   chars[2] = 0x0032 // '2'
#   chars[3] = 0x0033 // '3'
scoped_macro(:convert_long_to_char_array) do |v, chars, n_digits|
  ten := Cast(10).u64
  uv := Cast(Abs(v).i64).u64
  offs := SubI(ShlI(n_digits).Imm(1).u32).Imm(2).u32
Label(:NextDigit)
  uv1 := Phi(uv, uv2).u64
  dig := Mod(uv1, ten).u64         # get least significant digit as 'uv1 % 10'
  c := AddI(dig).Imm(0x0030).u16   # convert it to utf16 char
  offs1 := Phi(offs, offs2).u32    # select its offset
  Store(chars, offs1, c).u16       # store char to array
  offs2 := SubI(offs1).Imm(2).u32  # decrease offset
  uv2 := Div(uv1, ten).u64         # prepare for the next decimal digit
  If(uv2, 0).NE.Likely.b {
    Goto(:NextDigit)
  }
  # Convert sign if any
  If(v, 0).LT.b {
    minus := Cast(0x002D).u16
    StoreI(chars, minus).Imm(0).u16
  }
end


scoped_macro(:convert_bool_to_char_array) do |v, chars|
  If(v, 0).EQ.b {
    Goto(:BoolFalse)
  }
  true_code := Cast(0x0065007500720074).u64
  StoreI(chars, true_code).Imm(0).u64
  Goto(:Done)
Label(:BoolFalse)
  fals_code := Cast(0x0073006c00610066).u64
  StoreI(chars, fals_code).Imm(0).u64
  e_code := Cast(0x0065).u16
  StoreI(chars, e_code).Imm(8).u16
Label(:Done)
end

macro(:ref_is_null) do |obj|
  Compare(obj, 0).SrcType(Constants::COMPILER_REFERENCE).EQ.b
end

scoped_macro(:store_with_barrier) do |buffer, buffer_uint, offset, obj, sync_type|
  Store(buffer, offset, obj).SetNeedBarrier(sync_type == :Async).ref
  if sync_type == :AsyncManual
    min_addr := LoadI(%tr).Imm(Constants::TLS_CARD_TABLE_MIN_ADDR_OFFSET).word
    cards := LoadI(%tr).Imm(Constants::TLS_CARD_TABLE_ADDR_OFFSET).ptr

    mem_word := Cast(buffer_uint).SrcType(Constants::REF_UINT).word
    card_offset := ShrI(Sub(mem_word, min_addr).word).Imm(Constants::CARD_TABLE_CARD_BITS).word
    card := Add(cards, card_offset).ptr
    StoreI(card, Constants::CARD_DIRTY_VALUE).Imm(Constants::CARD_VALUE_OFFSET).u8
  end
end

function(:StringBuilderAppendLong,
         params: {sb: 'ref', v: 'i64', array_klass: 'ref'},
         regmap: $full_regmap,
         regalloc_set: $panda_mask,
         mode: [:FastPath]) {

  # Arm32 is not supported
  if Options.arch == :arm32
    Intrinsic(:UNREACHABLE).void.Terminator
    next
  end

  # 1. Check if there is a free slot in the buffer
  index := LoadI(sb).Imm(Constants::ETS_SB_INDEX_OFFSET).i32
  buffer := LoadI(sb).Imm(Constants::ETS_SB_BUFFER_OFFSET).ref
  If(index, LoadI(buffer).Imm(Constants::ARRAY_LENGTH_OFFSET).i32).GE.Unlikely.b {
    Goto(:SlowPathEntrypoint)
  }
  # 2. CountDigits
  n_digits := count_digits(v)
  # 3. Allocate array of chars in TLAB
  char_array := allocate_array_of_chars_tlab(array_klass, Cast(n_digits).word)
  # Let the memory writes (TLAB) be visible to other threads
  Intrinsic(:DATA_MEMORY_BARRIER_FULL).void
  # 4. Convert Long to utf16 chars
  chars := Add(char_array, Constants::ARRAY_DATA_OFFSET).ptr
  convert_long_to_char_array(v, chars, n_digits)
  # 5. Remember array in the buffer
  slot_offs := AddI(ShlI(index).Imm(Constants::REFERENCE_TYPE_SHIFT).i32).Imm(Constants::ARRAY_DATA_OFFSET).i32
  Store(buffer, slot_offs, char_array).SetNeedBarrier(true).ref
  # 6. Increment 'index' field
  StoreI(sb, AddI(index).Imm(1).i32).Imm(Constants::ETS_SB_INDEX_OFFSET).i32
  # 7. Update 'length' field
  length := LoadI(sb).Imm(Constants::ETS_SB_LENGTH_OFFSET).i32
  length := Add(length, n_digits).i32
  StoreI(sb, length).Imm(Constants::ETS_SB_LENGTH_OFFSET).i32
  # Do not update 'compress' field, as a string representation of a number is always compressable
  Return(sb).ref
Label(:SlowPathEntrypoint)
  entrypoint = get_entrypoint_offset("STRING_BUILDER_APPEND_LONG_SLOW_PATH")
  Intrinsic(:SLOW_PATH_ENTRY, sb, v).AddImm(entrypoint).MethodAsImm("StringBuilderAppendLong3ArgBridge").Terminator.ref
  Intrinsic(:UNREACHABLE).Terminator.void if defines.DEBUG
}


function(:StringBuilderAppendBool,
         params: {sb: 'ref', v: 'u8', array_klass: 'ref'},
         regmap: $full_regmap,
         regalloc_set: $panda_mask,
         mode: [:FastPath]) {

  # Arm32 is not supported
  if Options.arch == :arm32
    Intrinsic(:UNREACHABLE).void.Terminator
    next
  end

  # 1. Check if there is a free slot in the buffer
  index := LoadI(sb).Imm(Constants::ETS_SB_INDEX_OFFSET).i32
  buffer := LoadI(sb).Imm(Constants::ETS_SB_BUFFER_OFFSET).ref
  If(index, LoadI(buffer).Imm(Constants::ARRAY_LENGTH_OFFSET).i32).GE.Unlikely.b {
    Goto(:SlowPathEntrypoint)
  }
  # 2. Allocate array of chars in TLAB
  If(v, 0).EQ.b {
    n_digits1 := Cast(5).word  # false
  } Else {
    n_digits2 := Cast(4).word  # true
  }
  n_digits := Phi(n_digits1, n_digits2).word
  char_array := allocate_array_of_chars_tlab(array_klass, n_digits)
  # Let the memory writes (TLAB) be visible to other threads
  Intrinsic(:DATA_MEMORY_BARRIER_FULL).void
  # 3. Store 'true' or 'false' to array
  chars := Add(char_array, Constants::ARRAY_DATA_OFFSET).ptr
  convert_bool_to_char_array(v, chars)
  # 4. Remember array in the buffer
  slot_offs := AddI(ShlI(index).Imm(Constants::REFERENCE_TYPE_SHIFT).i32).Imm(Constants::ARRAY_DATA_OFFSET).i32
  Store(buffer, slot_offs, char_array).SetNeedBarrier(true).ref
  # 5. Increment 'index' field
  StoreI(sb, AddI(index).Imm(1).i32).Imm(Constants::ETS_SB_INDEX_OFFSET).i32
  # 6. Update 'length' field
  length := LoadI(sb).Imm(Constants::ETS_SB_LENGTH_OFFSET).i32
  length := Add(length, Cast(n_digits).i32).i32
  StoreI(sb, length).Imm(Constants::ETS_SB_LENGTH_OFFSET).i32
  # Do not update 'compress' field, as 'true' and 'false' are always compressable
  Return(sb).ref
Label(:SlowPathEntrypoint)
  entrypoint = get_entrypoint_offset("STRING_BUILDER_APPEND_BOOL_SLOW_PATH")
  Intrinsic(:SLOW_PATH_ENTRY, sb, v).AddImm(entrypoint).MethodAsImm("StringBuilderAppendBool3ArgBridge").Terminator.ref
  Intrinsic(:UNREACHABLE).Terminator.void if defines.DEBUG
}


def GenerateStringBuilderAppendChar(string_compression_enabled)
    suffix = (string_compression_enabled ? "Compressed" : "")
    function("StringBuilderAppendChar#{suffix}".to_sym,
          params: {sb: 'ref', ch: 'u16', array_klass: 'ref'},
          regmap: $full_regmap,
          regalloc_set: $panda_mask,
          mode: [:FastPath]) {

  # Arm32 is not supported
  if Options.arch == :arm32
    Intrinsic(:UNREACHABLE).void.Terminator
    next
  end

  # 1. Check if there is a free slot in the buffer
  index := LoadI(sb).Imm(Constants::ETS_SB_INDEX_OFFSET).i32
  buffer := LoadI(sb).Imm(Constants::ETS_SB_BUFFER_OFFSET).ref
  If(index, LoadI(buffer).Imm(Constants::ARRAY_LENGTH_OFFSET).i32).GE.Unlikely.b {
    Goto(:SlowPathEntrypoint)
  }
  # 2. Allocate array of chars in TLAB
  char_array := allocate_array_of_chars_tlab(array_klass, Cast(1).word)
  # Let the memory writes (TLAB) be visible to other threads
  Intrinsic(:DATA_MEMORY_BARRIER_FULL).void
  # 3. Store char to array
  chars := Add(char_array, Constants::ARRAY_DATA_OFFSET).ptr
  StoreI(chars, ch).Imm(0).u16
  # 4. Remember array in the buffer
  slot_offs := AddI(ShlI(index).Imm(Constants::REFERENCE_TYPE_SHIFT).i32).Imm(Constants::ARRAY_DATA_OFFSET).i32
  Store(buffer, slot_offs, char_array).SetNeedBarrier(true).ref
  # 5. Increment 'index' field
  StoreI(sb, AddI(index).Imm(1).i32).Imm(Constants::ETS_SB_INDEX_OFFSET).i32
  # 6. Update 'length' field
  length := LoadI(sb).Imm(Constants::ETS_SB_LENGTH_OFFSET).i32
  length := AddI(length).Imm(1).i32
  StoreI(sb, length).Imm(Constants::ETS_SB_LENGTH_OFFSET).i32
  # 7. Update 'compress' field
  compress := LoadI(sb).Imm(Constants::ETS_SB_COMPRESS_OFFSET).u8
  If(compress, 0).NE.Likely.b {
    if string_compression_enabled
      compressable := Compare(SubI(ch).Imm(1).u16, Cast(Constants::STRING_MUTF8_1B_MAX).u16).B.b
      If(compressable, 0).EQ.Unlikely.b {
        StoreI(sb, 0).Imm(Constants::ETS_SB_COMPRESS_OFFSET).u8
      }
    else
      StoreI(sb, 0).Imm(Constants::ETS_SB_COMPRESS_OFFSET).u8
    end
  }
  Return(sb).ref
Label(:SlowPathEntrypoint)
  entrypoint = get_entrypoint_offset("STRING_BUILDER_APPEND_CHAR_SLOW_PATH")
  Intrinsic(:SLOW_PATH_ENTRY, sb, ch).AddImm(entrypoint).MethodAsImm("StringBuilderAppendChar3ArgBridge").Terminator.ref
  Intrinsic(:UNREACHABLE).Terminator.void if defines.DEBUG
}
end

GenerateStringBuilderAppendChar(true)
GenerateStringBuilderAppendChar(false)

def GenerateStringBuilderAppendStrings(num_args, sync_type)
  case num_args
    when 1
      params = {sb: 'ref', str0: 'ref'}
    when 2
      params = {sb: 'ref', str0: 'ref', str1: 'ref'}
    when 3
      params = {sb: 'ref', str0: 'ref', str1: 'ref', str2: 'ref'}
    when 4
      params = {sb: 'ref', str0: 'ref', str1: 'ref', str2: 'ref', str3: 'ref'}
    else
      raise "Unexpected number of arguments: #{num_args}"
  end
  function("StringBuilderAppendString#{num_args}#{sync_type}".to_sym,
            params: params,
            regmap: $full_regmap,
            regalloc_set: $panda_mask,
            mode: [:FastPath]) {

  # Arm32 is not supported
  if Options.arch == :arm32
    Intrinsic(:UNREACHABLE).void.Terminator
    next
  end

  # 1. Check if any input string is null
  if num_args > 0
    str_is_null := ref_is_null(str0)
  end
  if num_args > 1
    str_is_null := Or(str_is_null, ref_is_null(str1)).b
  end
  if num_args > 2
    str_is_null := Or(str_is_null, ref_is_null(str2)).b
  end
  if num_args > 3
    str_is_null := Or(str_is_null, ref_is_null(str3)).b
  end
  IfImm(str_is_null).Imm(0).SrcType(Constants::COMPILER_BOOL).NE.Unlikely.b {
    Goto(:SlowPathEntrypoint)
  }

  # 2. Check if there is a free slot in the buffer
  if num_args > 0
    index0 := LoadI(sb).Imm(Constants::ETS_SB_INDEX_OFFSET).i32
  end
  if num_args > 1
    index1 := AddI(index0).Imm(1).i32
  end
  if num_args > 2
    index2 := AddI(index1).Imm(1).i32
  end
  if num_args > 3
    index3 := AddI(index2).Imm(1).i32
  end
  case num_args
    when 1
      index := index0
    when 2
      index := index1
    when 3
      index := index2
    when 4
      index := index3
    else
      raise "Unexpected number of arguments: #{num_args}"
  end

  buffer := LoadI(sb).Imm(Constants::ETS_SB_BUFFER_OFFSET).ref
  If(index, LoadI(buffer).Imm(Constants::ARRAY_LENGTH_OFFSET).i32).GE.Unlikely.b {
    Goto(:SlowPathEntrypoint)
  }
  buffer_uint := LoadI(sb).Imm(Constants::ETS_SB_BUFFER_OFFSET).ref_uint

  # 3. Increment 'index' field
  StoreI(sb, AddI(index).Imm(1).i32).Imm(Constants::ETS_SB_INDEX_OFFSET).i32

  # 4. Store input strings into buffer
  if num_args > 0
    Intrinsic(:DATA_MEMORY_BARRIER_FULL).void
    offset0 := AddI(ShlI(index0).Imm(Constants::REFERENCE_TYPE_SHIFT).i32).Imm(Constants::ARRAY_DATA_OFFSET).i32
    store_with_barrier(buffer, buffer_uint, offset0, str0, sync_type)
  end
  if num_args > 1
    Intrinsic(:DATA_MEMORY_BARRIER_FULL).void
    offset1 := AddI(ShlI(index1).Imm(Constants::REFERENCE_TYPE_SHIFT).i32).Imm(Constants::ARRAY_DATA_OFFSET).i32
    store_with_barrier(buffer, buffer_uint, offset1, str1, sync_type)
  end
  if num_args > 2
    Intrinsic(:DATA_MEMORY_BARRIER_FULL).void
    offset2 := AddI(ShlI(index2).Imm(Constants::REFERENCE_TYPE_SHIFT).i32).Imm(Constants::ARRAY_DATA_OFFSET).i32
    store_with_barrier(buffer, buffer_uint, offset2, str2, sync_type)
  end
  if num_args > 3
    Intrinsic(:DATA_MEMORY_BARRIER_FULL).void
    offset3 := AddI(ShlI(index3).Imm(Constants::REFERENCE_TYPE_SHIFT).i32).Imm(Constants::ARRAY_DATA_OFFSET).i32
    store_with_barrier(buffer, buffer_uint, offset3, str3, sync_type)
  end

  # 5. Load raw string 'length' field
  if num_args > 0
    length0 := LoadI(str0).Imm(Constants::STRING_LENGTH_OFFSET).i32
  end
  if num_args > 1
    length1 := LoadI(str1).Imm(Constants::STRING_LENGTH_OFFSET).i32
  end
  if num_args > 2
    length2 := LoadI(str2).Imm(Constants::STRING_LENGTH_OFFSET).i32
  end
  if num_args > 3
    length3 := LoadI(str3).Imm(Constants::STRING_LENGTH_OFFSET).i32
  end

  # 6. Update 'compress' field
  compress := LoadI(sb).Imm(Constants::ETS_SB_COMPRESS_OFFSET).u8
  If(compress, 0).NE.Likely.b {
    if num_args > 0
      compress0 := XorI(length0).Imm(1).i32
      compress  := And(compress, compress0).i32
    end
    if num_args > 1
      compress1 := XorI(length1).Imm(1).i32
      compress  := And(compress, compress1).i32
    end
    if num_args > 2
      compress2 := XorI(length2).Imm(1).i32
      compress  := And(compress, compress2).i32
    end
    if num_args > 3
      compress3 := XorI(length3).Imm(1).i32
      compress  := And(compress, compress3).i32
    end
    If(compress, 0).EQ.Unlikely.b {
      StoreI(sb, 0).Imm(Constants::ETS_SB_COMPRESS_OFFSET).u8
    }
  }

  # 7. Update 'length' field
  length := LoadI(sb).Imm(Constants::ETS_SB_LENGTH_OFFSET).i32
  if num_args > 0
    length0 := ShrI(length0).Imm(1).i32
    length := Add(length, length0).i32
  end
  if num_args > 1
    length1 := ShrI(length1).Imm(1).i32
    length := Add(length, length1).i32
  end
  if num_args > 2
    length2 := ShrI(length2).Imm(1).i32
    length := Add(length, length2).i32
  end
  if num_args > 3
    length3 := ShrI(length3).Imm(1).i32
    length := Add(length, length3).i32
  end

  StoreI(sb, length).Imm(Constants::ETS_SB_LENGTH_OFFSET).i32

  Return(sb).ref
Label(:SlowPathEntrypoint)
  entrypoint = get_entrypoint_offset("STRING_BUILDER_APPEND_STRING#{num_args}_SLOW_PATH")
  case num_args
    when 1
      method = "StringBuilderAppendString#{num_args}UsualBridge"
      Intrinsic(:SLOW_PATH_ENTRY, sb, str0).AddImm(entrypoint).MethodAsImm(method).Terminator.ref
    when 2
      method = "StringBuilderAppendString#{num_args}OddSavedBridge"
      Intrinsic(:SLOW_PATH_ENTRY, sb, str0, str1).AddImm(entrypoint).MethodAsImm(method).Terminator.ref
    when 3
      method = "StringBuilderAppendString#{num_args}UsualBridge"
      Intrinsic(:SLOW_PATH_ENTRY, sb, str0, str1, str2).AddImm(entrypoint).MethodAsImm(method).Terminator.ref
    when 4
      method = "StringBuilderAppendString#{num_args}OddSavedBridge"
      Intrinsic(:SLOW_PATH_ENTRY, sb, str0, str1, str2, str3).AddImm(entrypoint).MethodAsImm(method).Terminator.ref
    else
      raise "Unexpected number of arguments: #{num_args}"
  end
  Intrinsic(:UNREACHABLE).Terminator.void if defines.DEBUG
}
end

GenerateStringBuilderAppendStrings(2, :Sync)
GenerateStringBuilderAppendStrings(3, :Sync)
GenerateStringBuilderAppendStrings(4, :Sync)

GenerateStringBuilderAppendStrings(2, :Async)
GenerateStringBuilderAppendStrings(3, :Async)
GenerateStringBuilderAppendStrings(4, :Async)

GenerateStringBuilderAppendStrings(2, :AsyncManual)
GenerateStringBuilderAppendStrings(3, :AsyncManual)
GenerateStringBuilderAppendStrings(4, :AsyncManual)

#
# StringBuilder.toString
#
# Assumtion: string compression is enabled.
#
function(:StringBuilderToString,
          params: {sb: 'ref', string_klass: 'ref'},
          regmap: $full_regmap,
          regalloc_set: $panda_mask,
          mode: [:FastPath]) {

  # Arm32 is not supported
  if Options.arch == :arm32
    Intrinsic(:UNREACHABLE).void.Terminator
    next
  end

  # Compute data size and length of a new string.
  n_chars := LoadI(sb).Imm(Constants::ETS_SB_LENGTH_OFFSET).u32
  len_compressed := ShlI(n_chars).Imm(1).u32  # set 'uncompressed' bit to 0
  sb_compress := LoadI(sb).Imm(Constants::ETS_SB_COMPRESS_OFFSET).u8
  If(sb_compress, 0).EQ.Unlikely.b {
    size := len_compressed
    len_uncompressed := OrI(len_compressed).Imm(1).u32  # set 'uncompressed' bit to 1
  }
  data_size := Phi(n_chars, size).u32
  packed_length := Phi(len_compressed, len_uncompressed).u32
  # Allocate a string
  new_str := allocate_string_tlab(string_klass, Cast(data_size).word)
  # Let the memory writes (TLAB) be visible to other threads
  Intrinsic(:DATA_MEMORY_BARRIER_FULL).void
  # Set new string's length
  StoreI(new_str,packed_length).Imm(Constants::STRING_LENGTH_OFFSET).u32
  # Set new string's hashcode to 0, so as not to spend time on its computation
  StoreI(new_str, Cast(0).u32).Imm(Constants::STRING_HASHCODE_OFFSET).u32
  # If string is empty, then there is nothing to do anymore
  If(n_chars, 0).EQ.Unlikely.b {
    Return(new_str).ptr
  }

  # Walk through the buffer elements and append their content to new_str
  index := LoadI(sb).Imm(Constants::ETS_SB_INDEX_OFFSET).i32
  buffer := LoadI(sb).Imm(Constants::ETS_SB_BUFFER_OFFSET).ref
  dst_data1 := AddI(new_str).Imm(Constants::STRING_DATA_OFFSET).ptr
  i1 := Cast(0).i32
Label(:ForEachBufferSlot)
  i := Phi(i1, i2).i32
  dst_data := Phi(dst_data1, dst_data2).ptr
  slot := AddI(ShlI(i).Imm(Constants::REFERENCE_TYPE_SHIFT).i32).Imm(Constants::ARRAY_DATA_OFFSET).i32
  obj := Load(buffer, slot).ref
  klass := LoadI(obj).Imm(Constants::OBJECT_CLASS_OFFSET).ref
  klass_flags := LoadI(klass).Imm(Constants::BASE_CLASS_FLAGS_OFFSET).u32
  If(AndI(klass_flags).Imm("ark::Class::STRING_CLASS").u32, 0).EQ.b {
    Goto(:ArrayObject)
  }
  # -------------------
  # Object is a string
  # -------------------
  str_len := LoadI(obj).Imm(Constants::STRING_LENGTH_OFFSET).i32
  src_data := AddI(Cast(obj).SrcType(Constants::COMPILER_REFERENCE).ptr).Imm(Constants::STRING_DATA_OFFSET).ptr
  src_len := ShrI(str_len).Imm(1).i32
  If(sb_compress, 0).EQ.Unlikely.b {
    Goto(:DoNotCompressString)
  }
  copy_u8_chars(src_data, dst_data, Cast(src_len).u64)
  n_bytes1 := src_len
  Goto(:NextObject)
Label(:DoNotCompressString)
  If(AndI(str_len).Imm(1).u32, 1).EQ.b {
    Goto(:SrcNotCompressed)
  }
  expand_u8_to_u16_chars(src_data, dst_data, Cast(src_len).u64)
  n_bytes2 := ShlI(src_len).Imm(1).i32
  Goto(:NextObject)
Label(:SrcNotCompressed)
  copy_u16_chars(src_data, dst_data, Cast(src_len).u64)
  n_bytes3 := ShlI(src_len).Imm(1).i32
  Goto(:NextObject)
  # -------------------
  # Object is an array
  # -------------------
Label(:ArrayObject)
  src_arr_data := AddI(Cast(obj).SrcType(Constants::COMPILER_REFERENCE).ptr).Imm(Constants::ARRAY_DATA_OFFSET).ptr
  src_arr_len := LoadI(obj).Imm(Constants::ARRAY_LENGTH_OFFSET).i32
  If(sb_compress, 0).EQ.Unlikely.b {
    Goto(:DoNotCompressArray)
  }
  compress_u16_to_u8_chars(src_arr_data, dst_data, Cast(src_arr_len).u64)
  n_bytes4 := src_arr_len
  Goto(:NextObject)
Label(:DoNotCompressArray)
  copy_u16_chars(src_arr_data, dst_data, Cast(src_arr_len).u64)
  n_bytes5 := ShlI(src_arr_len).Imm(1).i32
  # Go to the next buffer slot if any
Label(:NextObject)
  n_bytes := Phi(n_bytes1, n_bytes2, n_bytes3, n_bytes4, n_bytes5).i32
  dst_data2 := Add(dst_data, n_bytes).ptr
  i2 := AddI(i).Imm(1).i32
  If(i2, index).LT.Likely.b {
    Goto(:ForEachBufferSlot)
  }
  # Everything is done
  Return(new_str).ptr
  # SlowPath if new string can not be allocated in TLAB
Label(:SlowPathEntrypoint)
  entrypoint = get_entrypoint_offset("STRING_BUILDER_TO_STRING_SLOW_PATH")
  Intrinsic(:SLOW_PATH_ENTRY, sb).AddImm(entrypoint).MethodAsImm("StringBuilderToString2ArgBridge").Terminator.ptr
  Intrinsic(:UNREACHABLE).Terminator.void if defines.DEBUG
}
