/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package std.core;

/**
 * The maximum depth of printing nested objects
 * Useful for cyclic linked objects
 */
const MAX_CONSOLE_PRINT_DEPTH: int = 10

/**
 * Standard console, that provides access to standard output stream
 */
export final class Console {
    internal constructor() {}

    /**
     * Prints an object to the console
     *
     * @param i value to print
     */
    public print(o: NullishType): void {
        this.print(Value.of(o).toPrint(MAX_CONSOLE_PRINT_DEPTH))
    }

    /**
     * Prints a string to the console
     *
     * @param i value to print
     */
    public native print(i: String): void

    /**
     * Prints a boolean to the console
     *
     * @param i value to print
     */
    public native print(i: boolean): void

    /**
     * Prints a byte to the console
     *
     * @param i value to print
     */
    public native print(i: byte): void

    /**
     * Prints a short to the console
     *
     * @param i value to print
     */
    public native print(i: short): void

    /**
     * Prints a char to the console
     *
     * @param i value to print
     */
    public native print(i: char): void

    /**
     * Prints a int to the console
     *
     * @param i value to print
     */
    public native print(i: int): void

    /**
     * Prints a long to the console
     *
     * @param i value to print
     */
    public native print(i: long): void

    /**
     * Prints a float to the console
     *
     * @param i value to print
     */
    public print(f: float): void {
        let boxed: Float = f;
        this.print(boxed.toString());
    }

    /**
     * Prints a double to the console
     *
     * @param i value to print
     */
    public print(d: double): void {
        let boxed: Double = d;
        this.print(boxed.toString());
    }

    /**
     * Puts newline (\n) to the console
     */
    public native println(): void

    /**
     * Prints an object to the console and puts newline
     *
     * @param i value to print
     */
    public println(i: Object): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a string to the console and puts newline
     *
     * @param i value to print
     */
    public println(i: String): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a boolean to the console
     *
     * @param i value to print
     */
    public println(i: boolean): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a byte to the console and puts newline
     *
     * @param i value to print
     */
    public println(i: byte): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a short to the console and puts newline
     *
     * @param i value to print
     */
    public println(i: short): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a char to the console and puts newline
     *
     * @param i value to print
     */
    public println(i: char): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a int to the console and puts newline
     *
     * @param i value to print
     */
    public println(i: int): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a long to the console and puts newline
     *
     * @param i value to print
     */
    public println(i: long): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a float to the console and puts newline
     *
     * @param i value to print
     */
    public println(i: float): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a double to the console and puts newline
     *
     * @param i value to print
     */
    public println(i: double): void {
        this.print(i);
        this.println();
    }

    // TODO(ivan-tyulyandin): move this to escompat part
    // Now in core part to provide subset
    //----------------------------------------
    //           escompat log
    //----------------------------------------

    /**
     * Prints an nullish object to the console and puts newline
     *
     * @param i value to print
     */
    public log(...vals: NullishType[]): void {
        const len = vals.length
        for (let i = 0; i < len; i++) {
            this.print(vals[i])
            if (i != len - 1) {
                this.print(" ")
            }
        }
        this.println()
    }

    /**
     * Prints a string to the console and puts newline
     *
     * @param i value to print
     */
    public log(i: String): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a boolean to the console and puts newline
     *
     * @param i value to print
     */
    public log(i: boolean): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a byte to the console and puts newline
     *
     * @param i value to print
     */
    public log(i: byte): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a short to the console and puts newline
     *
     * @param i value to print
     */
    public log(i: short): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a char to the console and puts newline
     *
     * @param i value to print
     */
    public log(i: char): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a int to the console and puts newline
     *
     * @param i value to print
     */
    public log(i: int): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a long to the console and puts newline
     *
     * @param i value to print
     */
    public log(i: long): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a float to the console and puts newline
     *
     * @param i value to print
     */
    public log(i: float): void {
        this.print(i);
        this.println();
    }

    /**
     * Prints a double to the console and puts newline
     *
     * @param i value to print
     */
    public log(i: double): void {
        this.print(i);
        this.println();
    }
}

export const console = new Console();
