/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package std.core;

/**
 * Represents field of class or interface
 *
 */
export final class Field extends Object {
    private td: TypeDesc = new TypeDesc()
    private ownerTD: TypeDesc = new TypeDesc()
    private name: string = ""
    private attributes: int
    private accessMod: byte

    private constructor () {}

    /**
     * Returns type of this field
     *
     * @returns {@link Type} of this field
     */
    public getType(): Type {
        return Type.resolve(this.td)!
    }

    public getOwnerType(): Type {
        return Type.resolve(this.ownerTD)!
    }

    public getName(): String {
        return this.name
    }

    public getAttributes(): int {
        return this.attributes
    }

    public getAccessModifier(): int {
        return this.accessMod
    }

    public getStaticValue(): NullishType {
        if (!this.isStatic()) {
            assert(false) // TODO(shumilov-petr): throw exception
        }
        return TypeAPIGetStaticFieldValue(this.ownerTD, this.name)
    }

    public setStaticValue(v: NullishType): void {
        if (!this.isStatic()) {
            assert(false) // TODO(shumilov-petr): throw exception
        }
        if (!this.getType().assignableFrom(Type.of(v))) {
            assert(false) // TODO(shumilov-petr): throw exception
        }
        TypeAPISetStaticFieldValue(this.ownerTD, this.name, this.getType().convertObject(v))
    }

    public isInherited(): boolean {
        return (this.attributes & Attributes.INHERITED) != 0
    }

    public isStatic(): boolean {
        return (this.attributes & Attributes.STATIC) != 0
    }

    public isReadonly(): boolean {
        // TODO(shumilov-petr): allways false due to extra type info dumping required
        return (this.attributes & Attributes.READONLY) != 0
    }

    public override toString(): string {
        return this.getName() + ": " + this.getType().toString()
    }

    public equals(oth: NullishType): boolean {
        return oth instanceof Field &&
                this.td == (oth as Field).td &&
                this.name == (oth as Field).name &&
                this.accessMod == (oth as Field).accessMod &&
                this.attributes == (oth as Field).attributes
    }
}
