/*
 * Copyright (c) 2021-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package std.core;

/**
 * Represents boxed int value and related operations
 */
export final class Int extends Integral implements Comparable<Int>, JSONable<Int> {
    private value: int;

    /**
     * Constructs a new Int instance with initial value zero
     */
    public constructor() {
        this.value = 0;
    }

    /**
     * Constructs a new Int instance with provided initial value
     *
     * @param value the initial value
     */
    public constructor(value: int) {
        this.value = value;
    }

    /**
     * Constructs a new Int instance with provided initial value
     *
     * @param value the initial value
     */
    public constructor(value: Int) {
        this.value = value.intValue();
    }

    /**
     * Returns value of this instance as a primitive
     *
     * @returns value of this instance
     */
    public unboxed(): int {
        return this.value;
    }

    /**
     * Returns boxed representation of the primitive
     *
     * @param value value to box
     *
     * @returns boxed value
     */
    public static valueOf(value: int): Int {
        // TODO(ivan-tyulyandin): caching is possible
        return new Int(value);
    }

    /**
     * Minimal value that this type can have as an integral
     */
    public static readonly MIN_VALUE: int = -2147483648;

    /**
     * Maximal value that this type can have as an integral
     */
    public static readonly MAX_VALUE: int = 2147483647;

    /**
     * Size of this type in bits
     */
    public static readonly BIT_SIZE: byte = 32;

    /**
     * Size of this type in bytes
     */
    public static readonly BYTE_SIZE: byte = 4;

    /**
     * Returns value of this instance
     *
     * @returns value as int
     */
    public override byteValue(): byte {
        return this.value as byte;
    }

    /**
     * Returns value of this instance
     *
     * @returns value as short
     */
    public override shortValue(): short {
        return this.value as short;
    }

    /**
     * Returns value of this instance
     *
     * @returns value as int
     */
    public override intValue(): int {
        return this.value;
    }

    /**
     * Returns value of this instance
     *
     * @returns value as long
     */
    public override longValue(): long {
        return this.value as long;
    }

    /**
     * Returns value of this instance
     *
     * @returns value as float
     */
    public override floatValue(): float {
        return this.value as float;
    }

    /**
     * Returns value of this instance
     *
     * @returns value as double
     */
    public override doubleValue(): double {
        return this.value as double;
    }

    /**
     * Compares this instance to other Int object
     * The result is less than 0 if this instance lesser than provided object
     * 0 if they are equal
     * and greater than 0 otherwise.
     *
     * @param other Int object to compare with
     *
     * @returns result of the comparison
     */
    public override compareTo(other: Int): int {
        return this.value - other.unboxed();
    }

    /**
     * Converts this object to a string
     *
     * @returns result of the conversion
     */
    public override toString(): String {
        return StringBuilder.toString(this.value);
    }

    /**
     * Converts this object to a string
     *
     * @returns result of the conversion
     */
    public toString(radix: number): string {
        return (new Long(this.value)).toString(radix);
    }

    /**
     * Returns a hash code (integer representation) for this instance
     *
     * @returns representation of this instance
     */
    public override $_hashCode(): int {
        return this.value;
    }

    equals(other: NullishType): boolean {
        if (this === other) {
            return true
        }

        if (!(other instanceof Int)) {
            return false
        }

        return this.value == (other as Int).value
    }

    /**
     * Performs integral addition of this instance with provided one, returns the result as new instance
     *
     * @param other Right hand side of the addition
     *
     * @returns Result of the addition
     */
    public add(other: Int): Int {
        return Int.valueOf((this.value + other.intValue()) as int)
    }

    /**
     * Performs integral subtraction of this instance with provided one, returns the result as new instance
     *
     * @param other Right hand side of the subtraction
     *
     * @returns Result of the subtraction
     */
    public sub(other: Int): Int {
        return Int.valueOf((this.value - other.intValue()) as int)
    }

    /**
     * Performs integral multiplication of this instance with provided one, returns the result as new instance
     *
     * @param other Right hand side of the multiplication
     *
     * @returns Result of the multiplication
     */
    public mul(other: Int): Int {
        return Int.valueOf((this.value * other.intValue()) as int)
    }

    /**
     * Performs integral division of this instance with provided one, returns the result as new instance
     *
     * @param other Right hand side of the division
     *
     * @returns Result of the division
     */
    public div(other: Int): Int {
        return Int.valueOf((this.value / other.intValue()) as int)
    }

    /**
     * Checks if this instance value is less than value of provided instance
     *
     * @param other Right hand side of the comparison
     *
     * @returns true if this value is less than provided, false otherwise
     */
    public isLessThan(other: Int): boolean {
        return this.value < other.intValue();
    }

    /**
     * Checks if this instance value is less than or equal to value of provided instance
     *
     * @param other Right hand side of the comparison
     *
     * @returns true if this value is less than or equal to provided, false otherwise
     */
    public isLessEqualThan(other: Int): boolean {
        return this.value <= other.intValue();
    }

    /**
     * Checks if this instance value is greater than value of provided instance
     *
     * @param other Right hand side of the comparison
     *
     * @returns true if this value is greater than provided, false otherwise
     */
    public isGreaterThan(other: Int): boolean {
        return this.value > other.intValue();
    }

    /**
     * Checks if this instance value is greater than or equal to value of provided instance
     *
     * @param other Right hand side of the comparison
     *
     * @returns true if this value is greater than or equal to provided, false otherwise
     */
    public isGreaterEqualThan(other: Int): boolean {
        return this.value >= other.intValue();
    }

    /**
     * Creates a Int instance based on JSONValue
     *
     * @param json: JSONValue - a JSON representation
     *
     * @throws JSONTypeError if json does not encode a valid int
     *
     * @returns Int - int value decoded from JSON
     */
    public createFromJSONValue(json: JSONValue): Int {
        if (json instanceof JSONNumber) {
            let num = (json as JSONNumber).value
            if (Double.isInteger(num) && Int.MIN_VALUE <= num && num <= Int.MAX_VALUE) {
                return Int.valueOf(num as int)
            }
        }
        throw new JSONTypeError("Cannot create Int from JSON", new ErrorOptions(json as Object))
    }
}
