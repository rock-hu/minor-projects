/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package std.math.consts;

/**
 * PI as double value
 */
export const PI: double = 3.141592653589793;

/**
 * Euler number as double value
 */
export const E: double = 2.718281828459045;

/**
 * Natural logarithm of 10 as double value
 */
export const LN10: double = 2.302585092994046;

/**
 * Natural logarithm of 2 as double value
 */
export const LN2: double = 0.6931471805599453;

/**
 * Logarithm base 2 of Euler number as double value
 */
export const LOG2E: double = 1.4426950408889634;

/**
 * Logarithm base 10 of Euler number as double value
 */
export const LOG10E: double = 0.4342944819032518;

/**
 * Square root of 1/2 as double value
 */
export const SQRT1_2: double = 0.7071067811865476;

/**
 * Square root of 2 as double value
 */
export const SQRT2: double = 1.4142135623730951;

// export const floatEpsion: float = 1.19209e-07;
// export const floatMinimum: float = 1.17549e-38;
// export const floatMaximum: float = 3.40282e+38;
// export const floatNaN: float = 0.0 / 0.0;
// export const floatInf: float = 1.0 / 0.0;
// export const floatNegInf: float = -1.0 / 0.0;

/**
 * Minimal possible difference between two double values
 */
export const doubleEpsilon: double = 2.22045e-16;

/**
 * Minimal value that this type can have as a double
 */
export const doubleMinimum: double = 2.2250738585072014E-308;

/**
 * Maximal value that this type can have as a double
 */
export const doubleMaximum: double = 1.7976931348623157E+308;

/**
 * Represents the NaN value accoring to IEEE 754 specification
 */
export const doubleNaN: double = 0.0 / 0.0;

/**
 * Represents the +Infinity value accoring to IEEE 754 specification
 */
export const doubleInf: double = 1.0 / 0.0;

/**
 * Represents the -Infinity value accoring to IEEE 754 specification
 */
export const doubleNegInf: double = -1.0 / 0.0;
