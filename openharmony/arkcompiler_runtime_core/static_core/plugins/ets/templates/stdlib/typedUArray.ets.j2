/*
 * Copyright (c) 2021-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Autogenerated file. DO NOT EDIT
package escompat

// initialized in _initializerBlock_.ets
const IS_LITTLE_ENDIAN: boolean;

{%- for element in [{'name': 'Uint8Clamped', 'subsetType': 'number', 'subsetTypeValues': 'Number', 'primitiveType': 'int', 'bytes': 1, 'primitiveTypeWide': 'short', 'max': 255, 'min': 0, 'clamped': True},
                    {'name': 'Uint8',        'subsetType': 'number', 'subsetTypeValues': 'Number', 'primitiveType': 'int', 'bytes': 1, 'primitiveTypeWide': 'short'},
                    {'name': 'Uint16',       'subsetType': 'number', 'subsetTypeValues': 'Number', 'primitiveType': 'int', 'bytes': 2, 'primitiveTypeWide': 'int'},
                    {'name': 'Uint32',       'subsetType': 'number', 'subsetTypeValues': 'Number', 'primitiveType': 'long', 'bytes': 4, 'primitiveTypeWide': 'long'},
                    {'name': 'BigUint64',    'subsetType': 'BigInt', 'subsetTypeValues': 'BigInt', 'primitiveType': 'long', 'bytes': 8, 'primitiveTypeWide': 'long'}] %}
    {%- set _ = element.update({'subsetTypeBoxed':  element['subsetType'][0].upper() + element['subsetType'][1:], 'primitiveTypeBoxed':  element['primitiveType'][0].upper() + element['primitiveType'][1:]}) %}
    {%- set asElementCompat = ('%s as ' + element['subsetType']) if element['subsetType'] != 'BigInt' else 'new BigInt(%s)' %}
    {%- set fromElementCompat = ('%s as ' + element['primitiveType']) if element['subsetType'] != 'BigInt' else '%s.getULong()' %}
    {%- set numberBigIntToPrimitive = ('.' + element['primitiveType'] + 'Value()') if element['subsetType'] != 'BigInt' else '.getULong()' %}
    {%- set numberBigIntUndefToPrimitive = (numberBigIntToPrimitive) %}
    {%- set isNonCompat = '/* public */ internal' if element['subsetType'] != 'BigInt' else 'private' %}
    {%- set valueOrBigIntGetULong = '%s' if element['subsetType'] != 'BigInt' else 'new BigInt(%s).getULong()' %}
    {%- set asElementCompatOrBigInt = ('%s as ' + element['primitiveType']) if element['subsetType'] != 'BigInt' else '%s' %}

class {{element['name']}}ArrayIteratorKeys implements IterableIterator<number> {
    private length: int = 0
    private idx: int = 0

    constructor(parent: {{element['name']}}Array) {
        this.length = parent.length as int
    }

    public override $_iterator(): IterableIterator<Number> {
        return this
    }

    override next(): IteratorResult<number> {
        if (this.idx < 0 || this.idx >= this.length) {
            return new IteratorResult<number>()
        }
        return new IteratorResult<number>(false, this.idx++ as number)
    }
}

class {{element['name']}}ArrayIterator implements IterableIterator<{{element['subsetTypeValues']}}> {
    private parent: {{element['name']}}Array
    private idx: int = 0

    constructor(parent: {{element['name']}}Array) {
        this.parent = parent
    }

    public override $_iterator(): IterableIterator<{{element['subsetTypeValues']}}> {
        return this
    }

    override next(): IteratorResult<{{element['subsetTypeValues']}}> {
        if (this.idx < 0 || this.idx >= this.parent.lengthInt) {
            return new IteratorResult<{{element['subsetTypeValues']}}>()
        }
        return new IteratorResult<{{element['subsetTypeValues']}}>(false, new {{element['subsetTypeValues']}}(this.parent[this.idx++]))
    }
}

{% set subsetTypeValuesEntries = '[' + 'Number' + ', ' + element['subsetTypeValues'] + ']' -%}

class {{element['name']}}ArrayIteratorEntries implements IterableIterator<{{subsetTypeValuesEntries}}> {
    private parent: {{element['name']}}Array
    private idx: int = 0

    constructor(parent: {{element['name']}}Array) {
        this.parent = parent
    }

    public override $_iterator(): IterableIterator<{{subsetTypeValuesEntries}}> {
        return this
    }

    override next(): IteratorResult<{{subsetTypeValuesEntries}}> {
        if (this.idx < 0 || this.idx >= this.parent.lengthInt) {
            return new IteratorResult<{{subsetTypeValuesEntries}}>()
        }
        return new IteratorResult<{{subsetTypeValuesEntries}}>(
            false,
            [new Number(this.idx), new {{element['subsetTypeValues']}}(this.parent[this.idx++])]{{ '' if element['subsetType'] != 'BigInt' else ' as ' + subsetTypeValuesEntries }}
        )
    }
}

/**
 * JS {{element['name']}}Array API-compatible class
 */
export final class {{element['name']}}Array implements Iterable<{{element['subsetTypeValues']}}>, ArrayLike<{{element['subsetTypeValues']}}> {
    public static readonly BYTES_PER_ELEMENT: number = {{element['bytes']}}
    public readonly BYTES_PER_ELEMENT: number = {{element['name']}}Array.BYTES_PER_ELEMENT

    /** Underlying Buffer */
    public readonly buffer: ArrayBuffer

    internal readonly byteOffsetInt: int
    internal readonly byteLengthInt: int
    internal readonly lengthInt: int

    /**
     * Creates an empty {{element['name']}}Array.
     */
    public constructor() {
        this(0 as int)
    }

    /**
     * Creates an {{element['name']}}Array with respect to data accessed via Iterable<Number> interface
     */
    public constructor(elements: Iterable<{{element['subsetTypeValues']}}>) {
        const items: Object = elements as Object
        if (items instanceof ArrayLike) {
            const arr = Types.identity_cast<{{element['subsetTypeValues']}}>(items as ArrayLike<{{element['subsetTypeValues']}}>)
            this.byteLengthInt = arr.length as int * {{element['name']}}Array.BYTES_PER_ELEMENT as int
            this.lengthInt = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLengthInt)
            this.byteOffsetInt = 0
            for (let i: int = 0; i < this.lengthInt; ++i) {
                {%- if element.get('name') == 'BigUint64' %}
                this.setUnsafeClamp(i, arr.$_get(i){{numberBigIntToPrimitive}})
                {%- elif element.get('name') != 'Uint8Clamped' %}
                this.setUnsafeClamp(i, this.zeroIfInfinity(arr.$_get(i)) as {{element['primitiveType']}})
                {%- else %}
                this.setUnsafeClamp(i, arr.$_get(i) as {{element['primitiveType']}})
                {%- endif %}
            }
        } else {
            let x = {{element['name']}}Array.from(elements)
            this.byteLengthInt = x.byteLengthInt
            this.lengthInt = x.lengthInt
            this.buffer = x.buffer
            this.byteOffsetInt = x.byteOffsetInt
        }
    }

    /**
     * Creates an {{element['name']}}Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type {{element['primitiveType']}} in newly created {{element['name']}}Array
     */
    public constructor(buf: ArrayBuffer, byteOffset: Number | undefined, length: Number | undefined) {
        let intByteOffset: int = 0
        if (byteOffset != undefined) {
            intByteOffset = byteOffset.toInt()
            if (intByteOffset < 0) {
                throw new RangeError("Range Error: byteOffset " + intByteOffset + " is outside the bounds of the buffer")
            }
        }
        let intByteLength: int = buf.getByteLength() - intByteOffset
        if (intByteLength < 0) {
            throw new RangeError("Range Error: byteLength " + intByteLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
        }
{% if element.get('bytes') != 1 %}
        if (intByteLength % {{element['name']}}Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("ArrayBuffer.byteLength should be multiple of {{element['bytes']}} as {{element['name']}}Array.BYTES_PER_ELEMENT")
        }
        if (intByteOffset % {{element['name']}}Array.BYTES_PER_ELEMENT as int != 0) {
            throw new RangeError("byteOffset should be multiple of {{element['bytes']}} as {{element['name']}}Array.BYTES_PER_ELEMENT")
        }
{% endif %}
        let intLength: int
        if (length != undefined) {
            intLength = length.toInt()
            if (intLength > intByteLength / {{element['name']}}Array.BYTES_PER_ELEMENT as int) {
                throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer with byteOffset " + intByteOffset)
            }
        } else {
            intLength = intByteLength / {{element['name']}}Array.BYTES_PER_ELEMENT as int
        }
        if (intLength < 0) {
            throw new RangeError("Range Error: length " + intLength + " is outside the bounds of the buffer")
        }
        if (intLength < intByteLength / {{element['name']}}Array.BYTES_PER_ELEMENT as int) {
            intByteLength = intLength * {{element['name']}}Array.BYTES_PER_ELEMENT as int
        }
        this.byteLengthInt = intByteLength
        this.byteOffsetInt = intByteOffset
        this.lengthInt = intLength
        this.buffer = buf
    }

    /**
     * Creates an {{element['name']}}Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBuffer, byteOffset: Number | undefined) {
        this(buf, byteOffset, undefined)
    }

    /**
     * Creates an {{element['name']}}Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type {{element['primitiveType']}} in newly created {{element['name']}}Array
     */
    public constructor(buf: ArrayBuffer, byteOffset: number, length: number) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an {{element['name']}}Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBuffer, byteOffset: number) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an {{element['name']}}Array with respect to data, byteOffset and length.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     *
     * @param length size of elements of type {{element['primitiveType']}} in newly created {{element['name']}}Array
     */
    public constructor(buf: ArrayBuffer, byteOffset: int, length: int) {
        this(buf, new Number(byteOffset), new Number(length))
    }

    /**
     * Creates an {{element['name']}}Array with respect to buf and byteOffset.
     *
     * @param buf data initializer
     *
     * @param byteOffset byte offset from begin of the buf
     */
    public constructor(buf: ArrayBuffer, byteOffset: int) {
        this(buf, new Number(byteOffset), undefined)
    }

    /**
     * Creates an {{element['name']}}Array with respect to buf.
     *
     * @param buf data initializer
     */
    public constructor(buf: ArrayLike<Number> | ArrayBuffer) {
        if (buf instanceof ArrayBuffer) {
            this.byteLengthInt = (buf as ArrayBuffer).getByteLength()
            if (this.byteLengthInt % {{element['name']}}Array.BYTES_PER_ELEMENT as int != 0) {
               throw new RangeError("ArrayBuffer.byteLength should be multiple of {{element['primitiveType']}} as {{element['name']}}Array.BYTES_PER_ELEMENT")
            }
            this.lengthInt = this.byteLengthInt / {{element['name']}}Array.BYTES_PER_ELEMENT as int
            this.buffer = buf as ArrayBuffer
            this.byteOffsetInt = 0
        } else if (buf instanceof ArrayLike) {
            // NOTE (ikorobkov): dealing with this overload is tricky
            // with banned `instanceof` generic, so it is delegated to array here. Initial idea from Set.ets
            let arr = Array.from<Number>((buf as ArrayLike<Number>))
            this.byteLengthInt = arr.length as int * {{element['name']}}Array.BYTES_PER_ELEMENT as int
            this.lengthInt = arr.length as int
            this.buffer = new ArrayBuffer(this.byteLengthInt)
            this.byteOffsetInt = 0
            for (let i: int = 0; i < this.lengthInt; ++i) {
                {%- if element.get('clamped', False) %}
                this.setUnsafe(i, {{element['name']}}Array.clamp(arr.$_get(i).to{{element['primitiveType'].capitalize()}}()))
                {%- else %}
                this.setUnsafe(i, arr.$_get(i).to{{element['primitiveType'].capitalize()}}())
                {%- endif %}
            }
        } else {
            throw new Error("unexpected type of buf")
        }
    }

    /**
     * Creates an {{element['name']}}Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: int) {
        this(length as number)
    }

    /**
     * Creates an {{element['name']}}Array with respect to length.
     *
     * @param length data initializer
     */
    public constructor(length: number) {
        if (length < 0 || length > (Int.MAX_VALUE / {{element['name']}}Array.BYTES_PER_ELEMENT)) {
            throw new TypeError("Type Error: length " + length + " is outside the bounds of the buffer")
        }
        this.lengthInt = length as int
        this.byteLengthInt = this.lengthInt * {{element['name']}}Array.BYTES_PER_ELEMENT as int
        this.byteOffsetInt = 0
        this.buffer = new ArrayBuffer(this.byteLengthInt)
    }

    /**
     * Creates a copy of {{element['name']}}Array.
     *
     * @param other data initializer
     */
    public constructor(other: {{element['name']}}Array) {
        this.buffer = other.buffer.slice(other.byteOffset as int, (other.byteOffset + other.byteLength) as int) as ArrayBuffer
        this.byteLengthInt = other.byteLength as int
        this.lengthInt = other.length as int
        this.byteOffsetInt = 0
    }

    /**
     * Creates an {{element['name']}}Array from FixedArray<number>
     */
    public constructor(numbers: FixedArray<number>) {
        this(numbers.length)
        for (let i: int = 0; i < this.lengthInt; ++i) {
            {%- if element.get('name') == 'BigUint64' %}
            this.setUnsafeClamp(i, {{ asElementCompatOrBigInt % ( valueOrBigIntGetULong % 'numbers[i]' ) }})
            {%- elif element.get('name') != 'Uint8Clamped' %}
            this.setUnsafeClamp(i, {{ asElementCompatOrBigInt % ( 'this.zeroIfInfinity(' + (valueOrBigIntGetULong % 'numbers[i]') + ')' ) }})
            {%- else %}
            this.setUnsafeClamp(i, numbers[i] as {{element['primitiveType']}})
            {%- endif %}
        }
    }

    /**
     * Creates an {{element['name']}}Array from FixedArray<int>
     */
    public constructor(numbers: FixedArray<int>) {
        this(numbers.length)
        for (let i: int = 0; i < this.lengthInt; ++i) {
            {%- if element.get('name') == 'BigUint64' %}
            this.setUnsafeClamp(i, {{ asElementCompatOrBigInt % ( valueOrBigIntGetULong % 'numbers[i]' ) }})
            {%- elif element.get('name') != 'Uint8Clamped' %}
            this.setUnsafeClamp(i, {{ asElementCompatOrBigInt % ( 'this.zeroIfInfinity(' + (valueOrBigIntGetULong % 'numbers[i]') + ')' ) }})
            {%- else %}
            this.setUnsafeClamp(i, numbers[i] as {{element['primitiveType']}})
            {%- endif %}
        }
    }

    {%- if element['name'] == 'BigUint64' %}

    /**
     * Creates an {{element['name']}}Array from FixedArray<bigint>
     */
    public constructor(numbers: FixedArray<bigint>) {
        this(numbers.length)
        for (let i: int = 0; i < this.lengthInt; ++i) {
            this.setUnsafe(i, {{fromElementCompat % 'numbers[i]'}})
        }
    }
    {%- endif %}


{%- if element.get('name') not in ['Uint8Clamped', 'BigUint64'] %}{#- comment: Uint8Array and others, except Uint8Clamped, BigUint64 #}
    internal zeroIfInfinity(val: {{element['subsetType']}}): {{element['subsetType']}} {
        {%- if element.get('subsetType') == 'number' %}
        if ((val == Infinity) || (val == -Infinity)) {
        {%- else %}
        if (({{fromElementCompat % 'val'}} == Infinity) || ({{fromElementCompat % 'val'}} == -Infinity)) {
        {%- endif %}
            return {{asElementCompat % '0'}}
        }
        return {{asElementCompat % 'val'}}
    }

    internal zeroIfInfinity(val: {{element['primitiveType']}}): {{element['primitiveType']}} {
        if ((val == Infinity) || (val == -Infinity)) {
            return 0 as {{element['primitiveType']}}
        }
        return val
    }
    {%- endif %}

    /**
     * Iteratorable interface implementation
     *
     * @returns iterator over all elements
     */
    public override $_iterator(): IterableIterator<{{element['subsetTypeValues']}}> {
         return this.values()
    }

    /**
     * Returns an instance of primitive type at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: number): {{element['subsetTypeBoxed']}} | undefined {
        return this.at(index as int)
    }

    /**
     * Returns an instance of primitive type at passed index if index is correct.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public at(index: int): {{element['subsetTypeBoxed']}} | undefined {
        let k: int
        if (index >= 0) {
            k = index
        } else {
            k = this.lengthInt + index
        }
        if (k < 0 || k >= this.lengthInt) {
            return undefined
        }
        {%- if element['subsetType'] == 'BigInt'%}
        return BigInt.fromULong(this.getUnsafe(k))
        {%- else %}
        return new Number(this.getUnsafe(k))
        {%- endif %}
    }

    /**
     * Returns an instance of {{element['subsetType']}} at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    public override $_get(index: number): {{element['subsetTypeValues']}} {
        return this.$_get(index as int) as {{element['subsetTypeValues']}}
    }

    /**
     * Returns an instance of {{element['subsetType']}} at passed index.
     *
     * @param index index to look at
     *
     * @returns a primitive at index
     */
    {%- if element['name'] == 'BigUint64' %}
    public $_get(i: int): {{element['subsetType']}} {
        return BigInt.fromULong(this.getLong(i))
    }
    private native getLong(i: int): long
    {%- else %}
    public native $_get(i: int): {{element['subsetType']}}
    {%- endif %}

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: {{element['subsetType']}}): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: int, val: {{element['subsetType']}}): void {
        {%- if not element.get('name') in ['Uint8Clamped', 'BigUint64'] %}
        let v = this.zeroIfInfinity(val)
        this.$_set(index, {{fromElementCompat % 'v'}})
        {%- else %}
        this.$_set(index, {{fromElementCompat % 'val'}})
        {%- endif %}
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: {{element['primitiveType']}}): void {
        this.$_set(index as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public native $_set(index: int, val: {{element['primitiveType']}}): void
    {%- if element['primitiveType'] != 'int' %}

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public $_set(index: number, val: int): void {
        this.$_set(index as int, val as int)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public native $_set(index: int, val: int): void
    {%- endif %}

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: number, end?: number): {{element['name']}}Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: number, end?: number): {{element['name']}}Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: number, start: int, end?: number): {{element['name']}}Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param target insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public copyWithin(target: int, start: int, end?: number): {{element['name']}}Array {
        return this.copyWithin(target as int, start as int, asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Makes a copy of internal elements to targetPos from startPos to endPos.
     *
     * @param insert insert index to place copied elements
     *
     * @param start start index to begin copy from
     *
     * @param end last index to end copy from, excluded
     *
     * See rules of parameters normalization on {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin | MDN}
     */
    public native copyWithin(target: int, start: int, end: int): {{element['name']}}Array

    /**
     * Makes a copy of internal elements to targetPos from begin to end of {{element['name']}}Array.
     *
     * @param target insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: number): {{element['name']}}Array {
        return this.copyWithin(target as int)
    }

    /**
     * Makes a copy of internal elements to targetPos from begin to end of {{element['name']}}Array.
     *
     * @param insert insert index to place copied elements
     *
     * See rules of parameters normalization:
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin}
     */
    public copyWithin(target: int): {{element['name']}}Array {
        return this.copyWithin(target, 0, this.lengthInt)
    }

    /**
     * Returns an array of key, value pairs for every entry in the {{element['name']}}Array
     *
     * @returns key, value pairs for every entry in the array
     */
    public entries(): IterableIterator<{{subsetTypeValuesEntries}}> {
        return new {{element['name']}}ArrayIteratorEntries(this)
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['subsetType']}}, start?: number, end?: number): {{element['name']}}Array {
        {%- if not element.get('name') in ['Uint8Clamped', 'BigUint64'] %}
        value = this.zeroIfInfinity(value)
        {%- endif %}
        this.fill({{fromElementCompat % 'value'}}, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
        return this
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['subsetType']}}, start: int, end?: number): {{element['name']}}Array {
        {%- if not element.get('name') in ['Uint8Clamped', 'BigUint64'] %}
        value = this.zeroIfInfinity(value)
        {%- endif %}
        this.fill({{fromElementCompat % 'value'}}, start as int, asIntOrDefault(end, this.lengthInt))
        return this
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['subsetType']}}, start: int, end: number): {{element['name']}}Array {
        {%- if not element.get('name') in ['Uint8Clamped', 'BigUint64'] %}
        value = this.zeroIfInfinity(value)
        {%- endif %}
        this.fill({{fromElementCompat % 'value'}}, start as int, end as int)
        return this
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['subsetType']}}, start: number, end: int): {{element['name']}}Array {
        {%- if not element.get('name') in ['Uint8Clamped', 'BigUint64'] %}
        value = this.zeroIfInfinity(value)
        {%- endif %}
        this.fill({{fromElementCompat % 'value'}}, start as int, end as int)
        return this
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['subsetType']}}, start: int, end: int): {{element['name']}}Array {
        {%- if not element.get('name') in ['Uint8Clamped', 'BigUint64'] %}
        value = this.zeroIfInfinity(value)
        {%- endif %}
        this.fill({{fromElementCompat % 'value'}}, start as int, end as int)
        return this
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['primitiveType']}}, start?: number, end?: number): {{element['name']}}Array {
        this.fill(value, asIntOrDefault(start, 0 as int), asIntOrDefault(end, this.lengthInt))
        return this
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['primitiveType']}}, start: int, end?: number): {{element['name']}}Array {
        this.fill(value, start as int, asIntOrDefault(end, this.lengthInt))
        return this
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['primitiveType']}}, start: int, end: number): {{element['name']}}Array {
        this.fill(value, start as int, end as int)
        return this
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['primitiveType']}}, start: number, end: int): {{element['name']}}Array {
        this.fill(value, start as int, end as int)
        return this
    }

    /**
     * Fills the {{element['name']}}Array with specified value
     *
     * @param value new value
     *
     * @returns modified {{element['name']}}Array
     */
    public fill(value: {{element['primitiveType']}}, start: int, end: int): {{element['name']}}Array {
        {%- if element.get('clamped', False) %}
        value = {{element['name']}}Array.clamp(value)
        {%- endif %}
        const k = normalizeIndex(start, this.lengthInt)
        const finalPos = normalizeIndex(end, this.lengthInt)
        this.fillInternal(value, k, finalPos)
        return this
    }

    private final native fillInternal(value: {{element['primitiveType']}}, start: int, end: int): void

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: {{element['subsetType']}}): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: {{element['subsetType']}}): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: number, val: {{element['primitiveType']}}): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Assigns val as element on index.
     *
     * @param val value to set
     *
     * @param index index to change
     */
    public set(insertPos: int, val: {{element['primitiveType']}}): void {
        this.$_set(insertPos as int, val)
    }

    /**
     * Copies all elements of arr to the current {{element['name']}}Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: FixedArray<{{element['subsetType']}}>, insertPos1: number): void {
        const insertPos = insertPos1 as int
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: FixedArray<{{element['primitiveType']}}>): size of arr is greater than {{element['name']}}Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
        {%- if not element.get('name') in ['Uint8Clamped', 'BigUint64']%}
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos as int + i as int, {{fromElementCompat % 'v'}})
        {%- else %}
            this.setUnsafeClamp(insertPos as int + i as int, {{fromElementCompat % 'arr[i]'}})
        {%- endif %}
        }
    }

    /**
     * Copies all elements of arr to the current {{element['name']}}Array starting from insertPos.
     *
     * @param arr array to copy data from
     *
     * @param insertPos start index where data from arr will be inserted
     *
     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set}
     */
    public set(arr: FixedArray<{{element['primitiveType']}}>, insertPos: int): void {
        if (insertPos < 0 || insertPos + arr.length > this.lengthInt) {
            throw new RangeError("set(insertPos: int, arr: FixedArray<{{element['primitiveType']}}>): size of arr is greater than {{element['name']}}Array.length")
        }
        for (let i = 0; i < arr.length; i++) {
        {%- if not element.get('name') in ['Uint8Clamped', 'BigUint64'] %}
            let v = this.zeroIfInfinity(arr[i])
            this.setUnsafeClamp(insertPos + i, v)
        {%- else %}
            this.setUnsafeClamp(insertPos + i, arr[i])
        {%- endif %}
        }
    }

    /**
     * Copies all elements of arr to the current {{element['name']}}Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: FixedArray<{{element['subsetType']}}>): void {
        this.set(arr, 0)
    }

    /**
     * Copies all elements of arr to the current {{element['name']}}Array.
     *
     * @param arr array to copy data from
     */
    public set(arr: FixedArray<{{element['primitiveType']}}>): void {
        this.set(arr, 0)
    }

    public native set(array: {{element['name']}}Array): void

    public native set(array: {{element['name']}}Array, offset: number): void

    /**
     * Copies elements from an ArrayLike object to the {{element['name']}}Array.
     *
     * @param array An ArrayLike object containing the elements to copy.
     *
     * @param offset Optional. The offset into the target array at which to begin writing values from the source array
     */
    public set(array: ArrayLike<{% if element['name'] == 'BigUint64' %}BigInt{% else %}number{% endif %}>, offset: number = 0): void {
        const insertPos = offset as int
        if (insertPos < 0 || insertPos + array.length > this.lengthInt) {
            throw new RangeError("offset is out of bounds")
        }
        for (let i = array.length - 1; i >= 0; --i) {
        {%- if not element.get('name') in ['Uint8Clamped', 'BigUint64'] %}
            let v = this.zeroIfInfinity(array[i])
            this.setUnsafeClamp(insertPos as int + i as int, {{fromElementCompat % 'v'}})
        {%- else %}
            this.setUnsafeClamp(insertPos as int + i as int, {{fromElementCompat % 'array[i]'}})
        {%- endif %}
        }
    }
    {%- set uniquePrimitiveTypes = ['number', 'int',  element['primitiveTypeWide']] if element['primitiveTypeWide'] != 'int' else ['number', 'int'] %}
    {%- set uniquePrimitiveTypes = uniquePrimitiveTypes if element['name'] != 'BigUint64' else uniquePrimitiveTypes + ['bigint'] %}
    {%- for argType in uniquePrimitiveTypes %}

    /**
     * Returns a new array from a set of elements.
     *
     * @param items a set of elements to include in the new array object.
     *
     * @returns new {{element['name']}}Array
     */
    public static of(...items: FixedArray<{{argType}}>): {{element['name']}}Array {
        let res = new {{element['name']}}Array(items.length as int)
        for (let i: int = 0; i < items.length; i++) {
        {%- if element.get('name') != 'Uint8Clamped' %}
            {%- if argType == 'bigint' %}
            res.setUnsafeClamp(i, items[i]{{numberBigIntToPrimitive}})
            {%- elif argType == 'number' %}
            {%- if element.get('name') == 'BigUint64' %}
            res.setUnsafeClamp(i, ({{asElementCompat % 'items[i]'}}){{numberBigIntToPrimitive}})
            {%- else %}
            res.setUnsafeClamp(i, res.zeroIfInfinity(items[i]) as {{element['primitiveType']}})
            {%- endif %}
            {%- else %}
            res.setUnsafeClamp(i, items[i]{{ ' as ' + element['primitiveType'] if argType != element['primitiveType'] else ''}})
            {%- endif %}
        {%- else %}
            res.setUnsafeClamp(i, items[i]{{ ' as ' + element['primitiveType'] if argType != element['primitiveType'] else ''}})
        {%- endif %}
        }
        return res
    }
    {%- endfor %}

    /**
     * Returns a new array from a set of elements.
     *
     * @param items a set of elements to include in the new array object.
     *
     * @returns new {{element['name']}}Array
     */
    public static of(): {{element['name']}}Array {
        return new {{element['name']}}Array(0 as int)
    }

    /**
     * Creates an array from an array-like or iterable object.
     *
     * @param arrayLike An array-like or iterable object to convert to an array.
     *
     * @returns new {{element['name']}}Array
     */
    public static from(arr: ArrayLike<{{element['subsetType']}}>): {{element['name']}}Array {
    {%- if element.get('name') != 'BigUint64' %}
        return {{element['name']}}Array.from<{{element['subsetType']}}>(arr, (x: {{element['subsetType']}}, k: number): {{element['subsetType']}} => x)
    {%- else %}
        throw new Error("{{element['name']}}Array.from: not implemented")
    {%- endif %}
    }

    /**
     * Creates an array from an array-like or iterable object.
     *
     * @param arrayLike An array-like or iterable object to convert to an array.
     *
     * @param mapfn A mapping function to call on every element of the array.
     *
     * @returns new {{element['name']}}Array
     */
    public static from(arrayLike: Iterable<{{element['subsetType']}}>, mapfn?: (v: {{element['subsetType']}}, k: number) => {{element['subsetType']}}): {{element['name']}}Array {
        if (mapfn == undefined) {
            mapfn = (v: {{element['subsetType']}}, k: number): {{element['subsetType']}} => { return v }
        }

        let iter = arrayLike.$_iterator()
        // NOTE (templin.konstantin): This code section is responsible for optimizing for some types
        //  of iterators that we can learn the length of (e.g. ArrayValuesIterator).
        //  We are trying to use "reflection" to find the "__Iterator_getLength" method and if it exists,
        //  we can make one pass through the iterator without the need for memory reallocation.
        const maybeLength = tryGetIteratorLength(arrayLike)
        if (maybeLength) {
            const result = new {{element['name']}}Array(maybeLength)
            for (let i = 0; i < maybeLength; ++i) {
                const x = iter.next()
                if (x.done) {
                    return new {{element['name']}}Array(result.buffer, 0, i)
                }
                {%- if element.get('name') == 'BigUint64' %}
                result.setUnsafeClamp(i, ((mapfn)!(x.value!, i)){{numberBigIntToPrimitive}})
                {%- elif element.get('name') != 'Uint8Clamped' %}
                result.setUnsafeClamp(i, result.zeroIfInfinity((mapfn)!(x.value!, i)) as {{element['primitiveType']}})
                {%- else %}
                result.setUnsafeClamp(i, (mapfn)!(x.value!, i) as {{element['primitiveType']}})
                {%- endif %}
            }
            return result
        }

        // NOTE (templin.konstantin): Create builtin array as buffer
        let temp = new {{element['name']}}Array(6)
        let index : FixedArray<int> = new int[1]
        index[0] = 0

        iteratorForEach<{{element['subsetType']}}>(arrayLike.$_iterator(), (x: {{element['subsetType']}}): void => {
            if (index[0] + 1 > temp.lengthInt) {
                // NOTE (templin.konstantin): Progressive reallocation
                const curLength = (temp.buffer as Buffer).getByteLength()
                const tb = new ArrayBuffer(curLength * 2)
                for (let i = 0; i < curLength; ++i) {
                    tb.set(i, (temp.buffer as Buffer).at(i))
                }
                temp = new {{element['name']}}Array(tb)
            }
            {%- if element.get('name') == 'BigUint64' %}
            temp.setUnsafeClamp(index[0], ((mapfn)!(x, index[0])){{numberBigIntToPrimitive}})
            {%- elif element.get('name') != 'Uint8Clamped' %}
            temp.setUnsafeClamp(index[0], temp.zeroIfInfinity((mapfn)!(x, index[0])) as {{element['primitiveType']}})
            {%- else %}
            temp.setUnsafeClamp(index[0], (mapfn)!(x, index[0]) as {{element['primitiveType']}})
            {%- endif %}
            index[0]++
        })

        return new {{element['name']}}Array(temp.buffer, 0, index[0])
    }

    /**
     * Creates an array from an array-like or iterable object.
     *
     * @param arrayLike An array-like or iterable object to convert to an array.
     *
     * @param mapfn A mapping function to call on every element of the array.
     *
     * @returns new {{element['name']}}Array
     */
    public static from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => {{element['subsetType']}}): {{element['name']}}Array {
        let res = new {{element['name']}}Array(arrayLike.length)
        // NOTE (ikorobkov): Please don't replace idx as int[1] with int-variable, because of value of single variable doesn't change (idx++) into lambda call by unknown reason
        const idx : FixedArray<int> = new int[1]
        idx[0] = 0
        iteratorForEach<T>(arrayLike.$_iterator(), (x: T): void => {
        {%- if element.get('name') == 'BigUint64' %}
            res.setUnsafeClamp(idx[0], (mapfn(x as T, idx[0] as number)){{numberBigIntToPrimitive}})
        {%- elif element.get('name') != 'Uint8Clamped' %}
            res.setUnsafeClamp(idx[0], res.zeroIfInfinity(mapfn(x as T, idx[0] as number)) as {{element['primitiveType']}})
        {%- else %}
            res.setUnsafeClamp(idx[0], mapfn(x as T, idx[0] as number) as {{element['primitiveType']}})
        {%- endif %}
            idx[0] += 1
        })
        return res
    }

    /**
     * Determines whether {{element['name']}}Array includes a certain element, returning true or false as appropriate
     *
     * @param searchElement The element to search for
     *
     * @param fromIndex The position in this array at which to begin searching for searchElement
     *
     * @returns true if searchElement is in {{element['name']}}Array, false otherwise
     */
    public includes(searchElement: {{element['subsetType']}}, fromIndex?: number): boolean {
        return this.indexOf(searchElement, asIntOrDefault(fromIndex, 0)) != -1
    }

    /**
     * Determines whether {{element['name']}}Array includes a certain element, returning true or false as appropriate
     *
     * @param searchElement The element to search for
     *
     * @param fromIndex The position in this array at which to begin searching for searchElement
     *
     * @returns true if searchElement is in {{element['name']}}Array, false otherwise
     */
    public includes(searchElement: {{element['primitiveType']}}, fromIndex: int): boolean {
        return this.indexOf(searchElement as int, fromIndex) != -1
    }

    /**
     * Determines whether {{element['name']}}Array includes a certain element, returning true or false as appropriate
     *
     * @param searchElement The element to search for
     *
     * @param fromIndex The position in this array at which to begin searching for searchElement
     *
     * @returns true if searchElement is in {{element['name']}}Array, false otherwise
     */
    public includes(searchElement: {{element['primitiveType']}}): boolean {
        return this.indexOf(searchElement as int, 0) != -1
    }

    /**
     * Returns the index of the first occurrence of a value in {{element['name']}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(searchElement: {{element['subsetType']}}, fromIndex?: number): number {
        return this.indexOf(searchElement, asIntOrDefault(fromIndex, 0))
    }

    /**
     * Returns the index of the first occurrence of a value in {{element['name']}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(searchElement: {{element['subsetType']}}, fromIndex: int): number {
        {%- if element['subsetType'] == 'BigInt' %}
            return this.indexOfImpl(searchElement.getLong(), fromIndex)
        {%- endif %}
        {%- if element['subsetType'] == 'number' %}
            return this.indexOfImpl(searchElement, fromIndex)
        {%- endif %}
        {%- if element['subsetType'] == 'int' %}
            return this.indexOfImpl(searchElement as long, fromIndex)
        {%- endif %}
    }

    /**
     * Returns the index of the first occurrence of a value in {{element['name']}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(searchElement: int, fromIndex: int): number {
        return this.indexOfImpl(searchElement as long, fromIndex)
    }

    /**
     * Returns the index of the first occurrence of a value in {{N}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     *
     * @returns index of element if it presents, -1 otherwise
     */
    private final native indexOfImpl(searchElement: number, fromIndex: int): number

    /**
     * Returns the index of the first occurrence of a value in {{N}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     *
     * @returns index of element if it presents, -1 otherwise
     */
    private final native indexOfImpl(searchElement: long, fromIndex: int): number

    /**
     * Returns the index of the first occurrence of a value in {{element['name']}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     *
     * @returns index of element if it presents, -1 otherwise
     */
    public indexOf(searchElement: int): number {
        return this.indexOf(searchElement, 0)
    }


    /**
     * Converts all elements of an array to strings and joins them using the specified separator.
     *
     * @param separator - separates one element of an array from the next in the resulting String.
     *
     * @returns joined representation
     */
    private final native joinInternal(separator: String): string;

    /**
     * Adds all the elements of an array separated by the specified separator string
     *
     * @param separator A string used to separate one element of an array from the next in the
     * resulting String. If omitted, the array elements are separated with a comma
     *
     * @returns joined representation
     */
    public join(separator?: String): string {
        if (separator == undefined) {
            return this.joinInternal(",")
        }
        return this.joinInternal(separator)
    }

    /**
     * Returns an list of keys in {{element['name']}}Array
     *
     * @returns iterator over keys
     */
    public keys(): IterableIterator<number> {
        return new {{element['name']}}ArrayIteratorKeys(this)
    }

    /**
     * Returns the index of the last occurrence of a value in {{element['name']}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is undefined, the
     * search starts at index 0. If fromIndex is ommited, the search begins at index length-1
     *
     * @returns right-most index of searchElement. It must be less or equal than fromIndex. -1 if not found
     */
    public lastIndexOf(searchElement: {{element['subsetType']}}, fromIndex: number|undefined): number {
        return this.lastIndexOf(searchElement, asIntOrDefault(fromIndex, 0))
    }

    /**
     * Returns the index of the last occurrence of a value in {{element['name']}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is undefined, the
     * search starts at index 0. If fromIndex is ommited, the search begins at index length-1
     *
     * @returns right-most index of searchElement. It must be less or equal than fromIndex. -1 if not found
     */
    public lastIndexOf(searchElement: {{element['subsetType']}}): number {
        return this.lastIndexOf(searchElement, this.lengthInt - 1)
    }

    /**
     * Returns the index of the last occurrence of a value in {{element['name']}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is undefined, the
     * search starts at index 0. If fromIndex is ommited, the search begins at index length-1
     *
     * @returns right-most index of searchElement. It must be less or equal than fromIndex. -1 if not found
     */
    public lastIndexOf(searchElement: {{element['subsetType']}}, fromIndex: int): number {
        {%- if element['subsetType'] == 'BigInt' %}
            return this.lastIndexOfImpl(searchElement.getLong(), fromIndex)
        {%- endif %}
        {%- if element['subsetType'] == 'number' %}
            return this.lastIndexOfImpl(searchElement, fromIndex)
        {%- endif %}
        {%- if element['subsetType'] == 'int' %}
            return this.lastIndexOfImpl(searchElement as long, fromIndex)
        {%- endif %}
    }

    /**
     * Returns the index of the last occurrence of a value in {{element['name']}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is undefined, the
     * search starts at index 0. If fromIndex is ommited, the search begins at index length-1
     *
     * @returns right-most index of searchElement. It must be less or equal than fromIndex. -1 if not found
     */
    public lastIndexOf(searchElement: int, fromIndex: int): number {
        return this.lastIndexOfImpl(searchElement as long, fromIndex)
    }

    /**
     * Returns the index of the first occurrence of a value in {{N}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     *
     * @returns index of element if it presents, -1 otherwise
     */
    private final native lastIndexOfImpl(searchElement: number, fromIndex: int): number

    /**
     * Returns the index of the first occurrence of a value in {{N}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the
     *  search starts at index 0.
     *
     * @returns index of element if it presents, -1 otherwise
     */
    private final native lastIndexOfImpl(searchElement: long, fromIndex: int): number

    /**
     * Returns the index of the last occurrence of a value in {{element['name']}}Array.
     *
     * @param searchElement The value to locate in the array.
     *
     * @param fromIndex The array index at which to begin the search. If fromIndex is undefined, the
     * search starts at index 0. If fromIndex is ommited, the search begins at index length-1
     *
     * @returns right-most index of searchElement. It must be less or equal than fromIndex. -1 if not found
     */
    public lastIndexOf(searchElement: int): number {
        return this.lastIndexOf(searchElement, this.lengthInt - 1)
    }

   /**
    * Creates a new {{element['name']}}Array using initializer
    *
    * @param data initializer
    *
    * @returns a new {{element['name']}}Array from data
    */
    public of(...data: FixedArray<{{element['subsetType']}}>): {{element['name']}}Array {
        throw new Error("{{element['name']}}Array.of: not implemented")
    }

    /**
     * Creates a new {{element['name']}}Array using reversed data from the current one
     *
     * @returns a new {{element['name']}}Array using reversed data from the current one
     */
    public native reverse(): {{element['name']}}Array

    /**
     * Creates a slice of current {{element['name']}}Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new {{element['name']}}Array with elements of current {{element['name']}}Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin?: number, end?: number): {{element['name']}}Array {
        return this.slice(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a slice of current {{element['name']}}Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new {{element['name']}}Array with elements of current {{element['name']}}Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: number): {{element['name']}}Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current {{element['name']}}Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new {{element['name']}}Array with elements of current {{element['name']}}Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: number, end: int): {{element['name']}}Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current {{element['name']}}Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new {{element['name']}}Array with elements of current {{element['name']}}Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: number): {{element['name']}}Array {
        return this.slice(begin as int, end as int)
    }

    /**
     * Creates a slice of current {{element['name']}}Array using range [begin, end)
     *
     * @param begin start index to be taken into slice
     *
     * @param end last index to be taken into slice
     *
     * @returns a new {{element['name']}}Array with elements of current {{element['name']}}Array[begin;end) where end index is excluded
     *
     * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
     */
    public slice(begin: int, end: int): {{element['name']}}Array {
        const len: int = this.lengthInt
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        let buf = this.buffer.slice(relStart * {{element['name']}}Array.BYTES_PER_ELEMENT as int, relEnd * {{element['name']}}Array.BYTES_PER_ELEMENT as int) as ArrayBuffer
        return new {{element['name']}}Array(buf)
    }

    /**
     * Creates a slice of current {{element['name']}}Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new {{element['name']}}Array with elements of current {{element['name']}}Array[begin, this.lengthInt)
     */
    public slice(begin: number): {{element['name']}}Array {
        return this.slice(begin as int)
    }

    /**
     * Creates a slice of current {{element['name']}}Array using range [begin, this.lengthInt).
     *
     * @param begin start index to be taken into slice
     *
     * @returns a new {{element['name']}}Array with elements of current {{element['name']}}Array[begin, this.lengthInt)
     */
    public slice(begin: int): {{element['name']}}Array {
        return this.slice(begin, this.lengthInt)
    }

    /**
     * Sorts in-place by numeric value in ascending order.
     *
     * @returns sorted {{N}}Array
     */
    public native sort(): this;

    /**
     * Sorts in-place
     *
     * @param compareFn comparator _  used to determine the order of the elements.
     * compareFn returns a negative value if first argument is less than second argument,
     * zero if they're equal and a positive value otherwise.
     *
     * @returns sorted {{element['name']}}Array
     */
    {%- if element['name'] == 'BigUint64' %}
    {%- set sortCompareFnRetTy = 'number | BigInt' %}
    {%- else %}
    {%- set sortCompareFnRetTy = 'number' %}
    {%- endif %}
    public sort(compareFn?: (a: {{element['subsetType']}}, b: {{element['subsetType']}}) => {{sortCompareFnRetTy}}): this {
        if (compareFn == undefined) {
            this.sort()
            return this
        }
        let arr: FixedArray<{{element['primitiveType']}}> = new {{element['primitiveType']}}[this.lengthInt]
        for (let i = 0; i < this.lengthInt; ++i) {
            arr[i] = this.getUnsafe(i)
        }

        let cmp = (l: {{element['primitiveType']}}, r: {{element['primitiveType']}}): number => {
            const result = compareFn!({{asElementCompat % 'l'}}, {{asElementCompat % 'r'}})
            {%- if element['name'] == 'BigUint64' %}
            if (result instanceof BigInt) {
                return (result as BigInt).getLong()
            } else {
                return result as number
            }
            {%- else %}
            return result
            {%- endif %}
        }
        const MAX_SHORT_LENGTH = 24
        if (arr.length > MAX_SHORT_LENGTH) {
            arr = mergeSort(arr, cmp)
        } else {
            sort(arr, cmp)
        }
        for (let i = 0; i < arr.length; ++i) {
            this.setUnsafe(i, arr[i])
        }
        return this
    }

    /**
     * Creates a {{element['name']}}Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new {{element['name']}}Array with the same underlying Buffer
     */
    public subarray(begin?: number, end?: number): {{element['name']}}Array {
        return this.subarray(asIntOrDefault(begin, 0 as int), asIntOrDefault(end, this.lengthInt))
    }

    /**
     * Creates a {{element['name']}}Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new {{element['name']}}Array with the same underlying Buffer
     */
    public subarray(begin: number, end: int): {{element['name']}}Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a {{element['name']}}Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new {{element['name']}}Array with the same underlying Buffer
     */
    public subarray(begin: int, end: number): {{element['name']}}Array {
        return this.subarray(begin as int, end as int)
    }

    /**
     * Creates a {{element['name']}}Array with the same underlying Buffer
     *
     * @param begin start index, inclusive
     *
     * @param end last index, exclusive
     *
     * @returns new {{element['name']}}Array with the same underlying Buffer
     */
    public subarray(begin: int, end: int | undefined = this.lengthInt): {{element['name']}}Array {
        const len: int = this.lengthInt
        const relStart = normalizeIndex(begin, len)
        const relEnd = normalizeIndex(end ?? this.lengthInt, len)
        let count = relEnd - relStart
        if (count < 0) {
            count = 0
        }
        return new {{element['name']}}Array(this.buffer, relStart * {{element['name']}}Array.BYTES_PER_ELEMENT as int, count)
    }

    /**
     * Converts {{element['name']}}Array to a string with respect to locale
     *
     * @param locales
     *
     * @param options
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object, options: Object): string {
        throw new Error("{{element['name']}}Array.toLocaleString: not implemented")
    }

    /**
     * Converts {{element['name']}}Array to a string with respect to locale
     *
     * @param locales
     *
     * @returns string representation
     */
    public toLocaleString(locales: Object): string {
        return this.toLocaleString(new Object(), new Object())
    }

    /**
     * Converts {{element['name']}}Array to a string with respect to locale
     *
     * @returns string representation
     */
    public toLocaleString(): string {
        let res: StringBuilder = new StringBuilder("")
        for (let i = 0; i < this.lengthInt - 1; ++i) {
        {%- if element['name'] != 'BigUint64' %}
            res.append((this.getUnsafe(i) as {{element['subsetTypeValues']}}).toLocaleString())
        {%- else %}
            res.append(new BigInt(this.getUnsafe(i)).toLocaleString())
        {%- endif %}
            res.append(",")
        }
        if (this.lengthInt > 0) {
        {%- if element['name'] != 'BigUint64' %}
            res.append((this.getUnsafe(this.lengthInt - 1) as {{element['subsetTypeValues']}}).toLocaleString())
        {%- else %}
            res.append(new BigInt(this.getUnsafe(this.lengthInt - 1)).toLocaleString())
        {%- endif %}
        }
        return res.toString()
    }

    /**
     * Creates a reversed copy
     *
     * @returns a reversed copy
     */
    public final native toReversed(): {{element['name']}}Array

    /**
     * Creates a sorted copy
     *
     * @returns a sorted copy
     */
    public toSorted(): {{element['name']}}Array {
        return new {{element['name']}}Array(this).sort()
    }

    /**
     * Returns a string representation of the {{element['name']}}Array
     *
     * @returns a string representation of the {{element['name']}}Array
     */
    public override toString(): string {
        return this.join(",")
    }

    /**
     * Returns array values iterator
     *
     * @returns an iterator
     */
    public values(): IterableIterator<{{element['subsetTypeValues']}}> {
         return new {{element['name']}}ArrayIterator(this)
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an {{element['name']}}Array with replaced value on index
     */
    public with(index: number, value: {{element['subsetType']}}): {{element['name']}}Array {
        return this.with(index as int, {{fromElementCompat % 'value'}})
    }

    /**
     * Creates a copy with replaced value on index
     *
     * @param index
     *
     * @param value
     *
     * @returns an {{element['name']}}Array with replaced value on index
     */
    public with(index: int, value: {{element['primitiveType']}}): {{element['name']}}Array {
        let res = new {{element['name']}}Array(this)
        res.setUnsafeClamp(index, value)
        return res
    }

    /// === with element lambda functions ===
    {#- NOTE: to add overloads with idxType == 'int' we need to enhance generics supports #}
    {%- for isEts in [False] %}
        {%- if isEts %}
            {%- set idxType, castToIdx = 'int', '' %}
            {%- set elType, castToEl, castFromEl = element['primitiveType'], '%s', '%s' %}
        {%- else %}
            {%- set idxType, castToIdx = 'number', ' as number' %}
            {%- set elType, castToEl, castFromEl = element['subsetType'], asElementCompat, fromElementCompat %}
        {%- endif %}

    /**
     * Determines whether the specified callback function returns true for any element of an array.
     *
     * @param predicate A function that accepts three arguments.
     * The some method calls the predicate function for each element in the array
     * until the predicate returns a true or until the end of the array.
     *
     * @returns false unless predicate function returns true for an array element,
     * in which case true is immediately returned.
     */
    public some(predicate: (element: {{elType}}, index: {{idxType}}, array: {{element['name']}}Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (predicate({{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)) {
                return true
            }
        }
        return false
    }

    /**
     * Calls the specified callback function for all the elements in an array.
     * The return value of the callback function is the accumulated result,
     * and is provided as an argument in the next call to the callback function.
     *
     * @param callbackfn A function that accepts four arguments.
     * The reduce method calls the callbackfn function one time for each element in the array.
     *
     * @param initialValue The parameter which value is used as the initial value to start the accumulation.
     * The first call to the callbackfn function provides this value as an argument.
     *
     * @returns The value that results from running the callback function to completion over the entire typed array.
     */
    public reduce<U = {{elType}}>(
                callbackfn: (previousValue: U, currentValue: {{elType}}, currentIndex: {{idxType}}, array: {{element['name']}}Array) => U,
                initialValue: U): U {
        let accumulatedValue = initialValue
        for (let i = 0; i < this.lengthInt; i++) {
            accumulatedValue = callbackfn(accumulatedValue, {{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)
        }
        return accumulatedValue
    }

    /**
     * Calls the specified callback function for all the elements in an array.
     * The return value of the callback function is the accumulated result,
     * and is provided as an argument in the next call to the callback function.
     *
     * @param callbackfn A function that accepts four arguments.
     * The reduce method calls the callbackfn function one time for each element in the array.
     * The first call to the callbackfn function provides array first element value as an argument
     *
     * @returns The value that results from running the callback function to completion over the entire typed array.
     * calling reduce method on an empty array without an initial value creates a TypeError
     */
    public reduce(callbackfn: (previousValue: {{elType}}, currentValue: {{elType}}, currentIndex: {{idxType}}, array: {{element['name']}}Array) => {{elType}}): {{elType}} {
        if (this.lengthInt == 0) {
            throw new TypeError("Reduce of empty array with no initial value")
        }

        let accumulatedValue = {{castToEl % 'this.$_get(0)'}}
        for (let i = 1; i < this.lengthInt; i++) {
            accumulatedValue = callbackfn(accumulatedValue, {{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)
        }
        return accumulatedValue
    }

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result,
     * and is provided as an argument in the next call to the callback function.
     *
     * @param callbackfn A function that accepts four arguments.
     * The reduceRight method calls the callbackfn function one time for each element in the array.
     *
     * @param initialValue The parameter which value is used as the initial value to start the accumulation.
     * The first call to the callbackfn function provides this value as an argument.
     *
     * @returns The value that results from running the callback function to completion over the entire typed array.
     */
    public reduceRight<U = {{elType}}>(
                callbackfn: (previousValue: U, currentValue: {{elType}}, currentIndex: {{idxType}}, array: {{element['name']}}Array) => U,
                initialValue: U): U {
        let accumulatedValue = initialValue
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            accumulatedValue = callbackfn(accumulatedValue, {{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)
        }
        return accumulatedValue
    }

    /**
     * Calls the specified callback function for all the elements in an array, in descending order.
     * The return value of the callback function is the accumulated result,
     * and is provided as an argument in the next call to the callback function.
     *
     * @param callbackfn A function that accepts four arguments.
     * The reduceRight method calls the callbackfn function one time for each element in the array.
     * The first call to the callbackfn function provides array last element value as an argument
     *
     * @returns The value that results from running the callback function to completion over the entire typed array.
     * calling reduceRight method on an empty array without an initial value creates a TypeError
     */
    public reduceRight(callbackfn: (previousValue: {{elType}}, currentValue: {{elType}}, currentIndex: {{idxType}}, array: {{element['name']}}Array) => {{elType}}): {{elType}} {
        if (this.lengthInt == 0) {
            throw new TypeError("Reduce of empty array with no initial value")
        }

        let accumulatedValue: {{elType}} = {{castToEl % 'this.$_get(this.lengthInt - 1)'}}
        for (let i = this.lengthInt - 2; i >= 0; i--) {
            accumulatedValue = callbackfn(accumulatedValue, {{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)
        }
        return accumulatedValue
    }

    /**
     * Creates a new {{element['name']}}Array using fn(arr[i]) over all elements of current {{element['name']}}Array.
     *
     * @param fn a function to apply for each element of current {{element['name']}}Array
     *
     * @returns a new {{element['name']}}Array where for each element from current {{element['name']}}Array fn was applied
     */
    public map(fn: (val: {{elType}}, index: {{idxType}}, array: {{element['name']}}Array) => {{elType}}): {{element['name']}}Array {
        let resBuf = new ArrayBuffer(this.lengthInt * {{element['name']}}Array.BYTES_PER_ELEMENT as int)
        let res = new {{element['name']}}Array(resBuf)
        for (let i = 0; i < this.lengthInt; i++) {
            const fnRes = fn({{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)
            res.setUnsafeClamp(i, {{castFromEl % 'fnRes'}})
        }
        return res
    }

    /**
     * Determines whether the specified callback function returns true for all elements of an array.
     *
     * @param predicate A function that accepts three arguments.
     * The every method calls the predicate function for each element in the array until the predicate returns a false,
     * or until the end of the array.
     *
     * @returns true unless predicate function returns a false for an array element,
     * in which case false is immediately returned.
     */
    public every(predicate: (element: {{elType}}, index: {{idxType}}, array: {{element['name']}}Array) => boolean): boolean {
        for (let i = 0; i < this.lengthInt; i++) {
            if (!predicate({{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)) {
                return false
            }
        }
        return true
    }

    /**
     * Creates a new {{element['name']}}Array from current {{element['name']}}Array based on a condition fn.
     *
     * @param fn the condition to apply for each element
     *
     * @returns a new {{element['name']}}Array with elements from current {{element['name']}}Array that satisfy condition fn
     */
    public filter(fn: (val: {{elType}}, index: {{idxType}}, array: {{element['name']}}Array) => boolean): {{element['name']}}Array {
        let markers : FixedArray<boolean> = new boolean[this.lengthInt]
        let resLen = 0
        for (let i = 0; i < this.lengthInt; i++) {
            markers[i] = fn({{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)
            if (markers[i]) {
                ++resLen
            }
        }
        let res = new {{element['name']}}Array(resLen)
        for (let i = 0, j = 0; i < this.lengthInt; i++) {
            if (markers[i]) {
                res.setUnsafe(j, this.getUnsafe(i))
                ++j
            }
        }
        return res
    }

    /**
     * Returns the value of the first element in the array where predicate is true, and undefined
     * otherwise
     *
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found, find
     * immediately returns that element value. Otherwise, find returns undefined
     *
     * @returns {{elType}} | undefined
     */
    public find(predicate: (value: {{elType}}, index: {{idxType}}, array: {{element['name']}}Array) => boolean): {{elType}} | undefined {
        for (let i = 0; i < this.lengthInt; i++) {
            let val = {{castToEl % 'this.getUnsafe(i)'}}
            if (predicate(val, i{{castToIdx}}, this)) {
                return val
            }
        }
        return undefined
    }

    /**
     * Returns the index of the first element in the array where predicate is true, and -1
     * otherwise
     *
     * @param predicate find calls predicate once for each element of the array, in ascending
     * order, until it finds one where predicate returns true. If such an element is found,
     * findIndex immediately returns that element index. Otherwise, findIndex returns -1
     *
     * @returns {{idxType}}
     */
    public findIndex(predicate: (value: {{elType}}, index: {{idxType}}, obj: {{element['name']}}Array) => boolean): {{idxType}} {
        for (let i = 0; i < this.lengthInt; i++) {
            if (predicate({{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)) {
                return i{{castToIdx}}
            }
        }
        return -1{{castToIdx}}
    }

    /**
     * Finds the last element in the {{element['name']}}Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the last element that satisfies fn
     */
    public findLast(fn: (val: {{elType}}, index: {{idxType}}, array: {{element['name']}}Array) => boolean): {{elType}} {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            let val = {{castToEl % 'this.getUnsafe(i)'}}
            if (fn(val, i{{castToIdx}}, this)) {
                return val
            }
        }
        throw new Error("{{element['name']}}Array.findLast: not implemented if an element was not found")
    }

    /**
     * Finds an index of the last element in the {{element['name']}}Array that satisfies the condition
     *
     * @param fn condition
     *
     * @returns the index of the last element that satisfies fn, -1 otherwise
     */
    public findLastIndex(fn: (val: {{elType}}, index: {{idxType}}, array: {{element['name']}}Array) => boolean): {{idxType}} {
        for (let i = this.lengthInt - 1; i >= 0; i--) {
            if (fn({{castToEl % 'this.getUnsafe(i)'}}, i{{castToIdx}}, this)) {
                return i{{castToIdx}}
            }
        }
        return -1{{castToIdx}}
    }

    /**
     * Performs the specified action for each element in {{element['name']}}Array
     *
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     *
     * @returns None
     */
    public forEach(callbackfn: (value: {{elType}}, index: number, array: {{element['name']}}Array) => void): void {
        for (let i = 0; i < this.lengthInt; i++) {
            callbackfn({{castToEl % 'this.getUnsafe(i)'}}, i as number, this)
        }
    }

    {% endfor -%}

    /**
     * Returns the object itself
     *
     * @returns {{element['name']}}Array
     */
    public valueOf(): {{element['name']}}Array {
        return this
    }

    /** Byte offset within the underlying Buffer */
    public get byteOffset(): number {
        return this.byteOffsetInt
    }

    /** Number of bytes used */
    public get byteLength(): number {
        return this.byteLengthInt
    }

    /** Number of {{element['primitiveType']}} stored in {{element['name']}}Array */
    public get length(): number {
        return this.lengthInt
    }

    /** String \"{{element['name']}}Array\" */
    public readonly name = "{{element['name']}}Array"

    private static clamp(val: {{element['primitiveType']}}): {{element['primitiveType']}} {
        {%- if element.get('clamped', False) %}
        if (val > {{element['max']}}) {
            val = {{element['max']}}
        } else if (val < {{element['min']}}) {
            val = {{element['min']}}
        }
        {%- endif %}
        return val
    }

    internal setUnsafeClamp(insertPos: int, val: {{element['primitiveType']}}): void {
        {%- if element.get('clamped', False) %}
        val = {{element['name']}}Array.clamp(val)
        {%- endif %}
        this.setUnsafe(insertPos, val)
    }

    private final native getUnsafe(index: int): {{element['primitiveType']}}

    internal setUnsafe(index: int, val: {{element['primitiveType']}}): void {
        index = index * {{element['name']}}Array.BYTES_PER_ELEMENT as int + this.byteOffsetInt
        let res: {{element['primitiveType']}} = 0
        if (IS_LITTLE_ENDIAN) {
            for (let i = 0; i < {{element['name']}}Array.BYTES_PER_ELEMENT as int; i++) {
                this.buffer.set(index + i, (val & 0xff) as byte)
                val = val >> 8
            }
        } else {
            for (let i = 0; i < {{element['name']}}Array.BYTES_PER_ELEMENT as int; i++) {
                this.buffer.set(index + {{element['bytes'] - 1}} - i, (val & 0xff) as byte)
                val = val >> 8
            }
        }
    }
}
{% endfor -%}
