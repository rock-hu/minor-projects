# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#! CHECKER      Static lookup for Fields JIT
#! RUN          force_jit: true, options: "--compiler-regex='.*main.*'", entry: "_GLOBAL::main"
#! METHOD       "_GLOBAL::main"
#! PASS_AFTER   "IrBuilder"
#! INST         /Intrinsic.CompilerEtsLdObjByNameI32/
#! INST_NEXT    /Intrinsic.CompilerEtsStObjByNameI32/
#! INST_COUNT   /LoadObject/, 1
#! INST_COUNT   /StoreObject/, 1
#! PASS_BEFORE  "LSE"
#! INST_NOT     /Intrinsic.CompilerLdObjByNameI32/
#! INST_NOT     /Intrinsic.CompilerStObjByNameI32/
#! INST_COUNT   /LoadObject/, 2
#! INST_COUNT   /StoreObject/, 2

#! CHECKER      Static lookup for Fields AOT
#! SKIP_IF      @architecture == "arm32"
#! RUN_PAOC     options: "--compiler-regex='.*main.*'"
#! METHOD       "_GLOBAL::main"
#! PASS_AFTER   "IrBuilder"
#! INST         /Intrinsic.CompilerEtsLdObjByNameI32/
#! INST_NEXT    /Intrinsic.CompilerEtsStObjByNameI32/
#! INST_COUNT   /LoadObject/, 1
#! INST_COUNT   /StoreObject/, 1
#! PASS_BEFORE  "LSE"
#! INST_NOT     /Intrinsic.CompilerLdObjByNameI32/
#! INST_NOT     /Intrinsic.CompilerStObjByNameI32/
#! INST_COUNT   /LoadObject/, 2
#! INST_COUNT   /StoreObject/, 2
#! RUN          entry: "_GLOBAL::main"

#! CHECKER      Static lookup for Calls JIT
#! RUN          force_jit: true, options: "--compiler-regex='.*main.*'", entry: "_GLOBAL::main1"
#! METHOD       "_GLOBAL::main"
#! PASS_AFTER   "IrBuilder"
#! INST         /Intrinsic.CompilerEtsLdObjByNameI32/
#! INST_NEXT    /Intrinsic.CompilerEtsStObjByNameI32/
#! INST_NOT     /CallVirtual/
#! PASS_AFTER   "Inline"
#! INST_NOT     /Intrinsic.CompilerLdObjByNameI32/
#! INST_NOT     /Intrinsic.CompilerStObjByNameI32/
#! INST_COUNT   /CallVirtual/, 1
#! INST         /CallVirtual.Inlined/

#! CHECKER      Static lookup for Calls AOT
#! SKIP_IF      @architecture == "arm32"
#! RUN_PAOC     options: "--compiler-regex='.*main1.*'"
#! METHOD       "_GLOBAL::main1"
#! PASS_AFTER   "IrBuilder"
#! INST         /Intrinsic.CompilerEtsLdObjByNameI32/
#! INST_NEXT    /Intrinsic.CompilerEtsStObjByNameI32/
#! INST_NOT     /CallVirtual/
#! PASS_AFTER   "Inline"
#! INST_NOT     /Intrinsic.CompilerLdObjByNameI32/
#! INST_NOT     /Intrinsic.CompilerStObjByNameI32/
#! INST_COUNT   /CallVirtual/, 1
#! INST         /CallVirtual.Inlined/
#! RUN          entry: "_GLOBAL::main1"

.language eTS

.record std.core.Object
.record A {}
.record B {
    i32 bar
    i32 baz
}
.record C {
    i32 foo
}

.function i32 A.baz(A a0) <access.function=public> {
    ldai 42
    return
}

.function void C.bar(C a0, i32 a1) <access.function=public> {
    mov.obj v0, a0
    lda a1
    stobj v0, C.foo
    return.void
}

.union_field i32 bar
.union_field i32 baz

.function i32 main() {
    newobj v1, B
    ldai 6
    stobj v1, B.baz
    ets.ldobj.name v1, baz
    movi v2, 6
    jne v2, error1
    ldai 7
    ets.stobj.name v1, bar
    ldobj v1, B.bar
    movi v2, 7
    jne v2, error2
    ldai 0
    return
error1:
    ldai 1
    return
error2:
    ldai 2
    return
}

.function i32 main1() {
    newobj v1, A
    newobj v0, C
    ets.ldobj.name v1, baz
    movi v2, 42
    jne v2, error1
    ldai 7
    ets.stobj.name v0, bar
    ldobj v0, C.foo
    movi v2, 7
    jne v2, error2
    ldai 0
    return
error1:
    ldai 1
    return
error2:
    ldai 2
    return
}