/*
 * Copyright (c) 2023-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! CHECKER       AOT IR Builder, check StringBuilder::toString replacement
//! SKIP_IF       @architecture == "arm32"
//! RUN_PAOC      options: "--compiler-regex='.*toString[0-9]+.*' --compiler-inlining=false"
//!
//! METHOD        "ETSGLOBAL::toString0"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST_NOT      /StringBuilder::<ctor>/
//! INST_NOT      /StringBuilder::toString/
//!
//! METHOD        "ETSGLOBAL::toString1"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST_NOT      /StringBuilder::<ctor>/
//! INST_NOT      /StringBuilder::toString/
//!
//! METHOD        "ETSGLOBAL::toString2"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT_NOT /SaveState/
//! INST_NEXT_NOT /NullCheck/
//! INST_NEXT_NOT /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString3"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST_NOT      /StringBuilder::<ctor>/
//! INST_NOT      /NullCheck/
//! INST_NOT      /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString4"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT_NOT /SaveState/
//! INST_NEXT_NOT /NullCheck/
//! INST_NEXT_NOT /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString5"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT_NOT /SaveState/
//! INST_NEXT_NOT /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString6"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT_NOT /SaveState/
//! INST_NEXT_NOT /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString7"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString8"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbAppendInt/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString10"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_COUNT    /Intrinsic.StdCoreSbToString/,3
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_COUNT    /Intrinsic.StdCoreSbToString/,1
//!
//! RUN           entry: "ETSGLOBAL::main"

//! CHECKER       JIT IR Builder, check StringBuilder::toString replacement
//! RUN           force_jit: true, options: "--compiler-regex='.*toString[0-9]+.*' --compiler-inlining=false", entry: "ETSGLOBAL::main"
//!
//! METHOD        "ETSGLOBAL::toString0"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST_NOT      /StringBuilder::<ctor>/
//! INST_NOT      /StringBuilder::toString/
//!
//! METHOD        "ETSGLOBAL::toString1"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST_NOT      /StringBuilder::<ctor>/
//! INST_NOT      /StringBuilder::toString/
//!
//! METHOD        "ETSGLOBAL::toString2"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT_NOT /SaveState/
//! INST_NEXT_NOT /NullCheck/
//! INST_NEXT_NOT /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString3"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST_NOT      /StringBuilder::<ctor>/
//! INST_NOT      /NullCheck/
//! INST_NOT      /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString4"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT_NOT /SaveState/
//! INST_NEXT_NOT /NullCheck/
//! INST_NEXT_NOT /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString5"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT_NOT /SaveState/
//! INST_NEXT_NOT /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString6"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT_NOT /SaveState/
//! INST_NEXT_NOT /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString7"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString8"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /NullCheck/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbAppendInt/
//! INST_NEXT     /SaveState/
//! INST_NEXT     /Intrinsic.StdCoreSbToString/
//!
//! METHOD        "ETSGLOBAL::toString9"
//! PASS_BEFORE   "BranchElimination"
//! INST_COUNT    /StringBuilder::<ctor>/,2
//! INST_COUNT    /Intrinsic.StdCoreSbToString/,6
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST_COUNT    /StringBuilder::<ctor>/,2
//! INST_COUNT    /Intrinsic.StdCoreSbToString/,2
//!
//! METHOD        "ETSGLOBAL::toString10"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_COUNT    /Intrinsic.StdCoreSbToString/,3
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_COUNT    /Intrinsic.StdCoreSbToString/,1
//!
//! METHOD        "ETSGLOBAL::toString11"
//! PASS_BEFORE   "BranchElimination"
//! INST          /StringBuilder::<ctor>/
//! INST_COUNT    /Intrinsic.StdCoreSbToString/,2
//! PASS_AFTER    "SimplifyStringBuilder"
//! INST          /StringBuilder::<ctor>/
//! INST_COUNT    /Intrinsic.StdCoreSbToString/,1


function toString0(str: String): String {
    return new StringBuilder(str).toString();   // applied
}

function toString1(str: String): String {
    let sb = new StringBuilder(str);
    return sb.toString();                       // applied
}

function toString2(str: String): String {
    let sb = new StringBuilder(str);
    sb.toString();                              // applied
    sb = sb;
    sb.toString();                              // applied
    sb = sb.append(1);
    return sb.toString();                       // not applied, due to dominating append()-call
}

function doSmth() : void {
}

function doSmthWithSB(sb: StringBuilder) : void {
}

function toString3(str: String): String {
    let sb = new StringBuilder(str);
    sb.toString();                              // applied
    doSmth();
    return sb.toString();                       // applied
}

function toString4(str: String): String {
    let sb = new StringBuilder(str);
    sb.toString();                              // applied
    doSmthWithSB(sb);
    return sb.toString();                       // not applied, due to dominating doSmthWithSB()-call
}

function toString5(str: String): String {
    let sb = new StringBuilder(str);
    sb.toString();                              // applied
    let sb2 = sb;
    doSmthWithSB(sb2);
    return sb.toString();                       // not applied, due to dominating doSmthWithSB()-call
}

class A {
    public sb: StringBuilder = new StringBuilder();
}

function doSmthWithA(a: A) : void {
}

function toString6(str: String): String {
    let sb = new StringBuilder(str);
    sb.toString();                              // applied
    let a = new A;
    a.sb = sb;
    doSmthWithA(a);
    return sb.toString();                       // not applied, due to dominating StoreObject-instruction (a.sb = sb)
}

let sb: StringBuilder = new StringBuilder();

function toString7(str: String): String {
    sb = new StringBuilder(str);                // the object is a global variable
    sb.toString();                              // not applied, due to dominating StoreStatic-instruction
    doSmth();
    return sb.toString();                       // not applied, due to dominating StoreStatic-instruction
}

function toString8(str: String): String {
    let sb = new StringBuilder(str);
    sb.toString();                              // applied
    sb.append(1);
    return sb.toString();                       // not applied, due to dominating append()-call
}

function toString9(str: String): String {
    let sb1 = new StringBuilder(str);
    sb1.toString();                             // applied
    let sb2 = new StringBuilder(str);
    sb1.toString();                             // applied
    sb2.toString();                             // applied
    sb1.append(1);
    sb1.toString();                             // not applied, due to dominating append()-call
    sb2.toString();                             // applied
    sb2.append(1);
    return sb2.toString();                      // not applied, due to dominating append()-call
}

function toString10(str: String): String {
    let sb = new StringBuilder(str);
    sb.toString();                              // applied
    let strings: string[] = ["1"]               // insert NegativeCheck, BoundsCheck, RefTypeCheck instructions
    sb.toString();                              // applied
    sb.append(strings[0]);
    return sb.toString();                       // not applied, due to dominating append()-call
}

function toString11(str: String): String {
    let sb = new StringBuilder(str);
    sb.toString();                              // applied
    if (str.getLength() > 0)
        sb.append(1);
    return sb.toString();                       // not applied, due to dominating append()-call
}

function main(): int {
    assert toString0("abcde") == "abcde": "Wrong at toString0";
    assert toString1("abcde") == "abcde": "Wrong at toString1";
    assert toString2("abcde") == "abcde1": "Wrong at toString2";
    assert toString3("abcde") == "abcde": "Wrong at toString3";
    assert toString4("abcde") == "abcde": "Wrong at toString4";
    assert toString5("abcde") == "abcde": "Wrong at toString5";
    assert toString6("abcde") == "abcde": "Wrong at toString6";
    assert toString7("abcde") == "abcde": "Wrong at toString7";
    assert toString8("abcde") == "abcde1": "Wrong at toString8";
    assert toString9("abcde") == "abcde1": "Wrong at toString9";
    assert toString10("abcde") == "abcde1": "Wrong at toString10";
    assert toString11("abcde") == "abcde1": "Wrong at toString10";
    return 0;
}
