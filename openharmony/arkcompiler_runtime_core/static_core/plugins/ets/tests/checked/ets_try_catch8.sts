/*
 * Copyright (c) 2023-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! CHECKER      Try Catch Resolving JIT optimize with nested catches
//! RUN          force_jit: true, options: "--compiler-hotness-threshold=5 --compiler-profiling-threshold=0 --compiler-inlining-max-insts=160 --compiler-enable-osr=false", entry: "ETSGLOBAL::main"
//! EVENT        /Compilation,MultipleCatch::multipleCatch,.*,COMPILED/
//! EVENT        /Compilation,MultipleCatch::wrapper,.*,COMPILED/
//! EVENT        /Inline,ETSGLOBAL::main,MultipleCatch::wrapper,.*,SUCCESS/
//! EVENT_NOT    /Inline,MultipleCatch::wrapper,MultipleCatch::multipleCatch,.*,SUCCESS/
//! METHOD       "MultipleCatch::multipleCatch"
//! PASS_AFTER   "Inline"
//! INST_COUNT   "Throw",2
//! PASS_AFTER   "TryCatchResolving"
//! INST_NOT     "Throw"

//! CHECKER      Try Catch Resolving AOT with with exception instances as function parameters
//! SKIP_IF       @architecture == "arm32"
//! RUN_PAOC     options: "--compiler-regex=MultipleCatch::multipleCatch"
//! METHOD       "MultipleCatch::multipleCatch"
//! PASS_AFTER   "Inline"
//! INST_COUNT   "Throw",2
//! PASS_AFTER   "TryCatchResolving"
//! INST_COUNT   "Throw",2

class Exception0 extends Exception {}

class MultipleCatch {
    multipleCatch(a: int, b: int, c: int) : int throws {
    let res : int = 0;

    for (let i : int = 0; i < 16; i++) {
      let k : int = i % 2;
      let a1 : int = 0;
      let b1 : int = 0;
      let c1 : int = 0;
      try {
        switch (k) {
          case 0:
            a1 = a + i;
            b1 = b + i;
            c1 = c >> i;
            throw new Exception0();
          case 1:
            a1 = a - i;
            b1 = b - i;
            c1 = c << i;
            throw new Exception0();
          default:
            break;
        }
      } catch (e: Exception0) {
        res += a1 + b1 + c1;
      }
    }
    return res;
  }
  wrapper(a :int, b :int, c :int , d :int): int throws {
    return d + this.multipleCatch(a, b, c);
  }
}

let mc = new MultipleCatch();

function main(): int {
    console.println("in main")
    let res :int = 0;
    let a :int = 3;
    let b :int = 2;
    let c :int = 1;
    let d :int = 100;
    for (let i :int = 0; i < 10; ++i) {
        try {
            res += mc.wrapper(a, b, c, d);
        } catch (e) {
            ;
        }
    }
    return res - 438550;
}
