# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # list of values
values:
- { left: 0.0, right: 0.0, result: 0.0 }
- { left: +0.0, right: +0.0, result: 0.0 }
- { left: -0.0, right: -0.0, result: 0.0 }
- { left: 1.0, right: 0.0, result: 0.0 }
- { left: -1.0, right: 0.0, result: 0.0 }
- { left: Float.NaN, right: 0.0, result: Float.NaN }
- { left: Float.NaN, right: Float.NaN, result: Float.NaN }
- { left: Float.POSITIVE_INFINITY, right: 0.0, result: Float.NaN }
- { left: Float.NEGATIVE_INFINITY, right: 0.0, result: Float.NaN }
- { left: Float.POSITIVE_INFINITY, right: -1.0, result: Float.NEGATIVE_INFINITY }
- { left: Float.NEGATIVE_INFINITY, right: -1.0, result: Float.POSITIVE_INFINITY }
- { left: Float.POSITIVE_INFINITY, right: Float.POSITIVE_INFINITY, result: Float.POSITIVE_INFINITY }
- { left: Float.POSITIVE_INFINITY, right: Float.NEGATIVE_INFINITY, result: Float.NEGATIVE_INFINITY }
- { left: Float.NEGATIVE_INFINITY, right: Float.NEGATIVE_INFINITY, result: Float.POSITIVE_INFINITY }
- { left: 1.17549435E-38, right: +0.0, result: 0.0 } # min normal
- { left: 1.17549435E-38, right: -0.0, result: 0.0 } # min normal
- { left: 1.17549435E-38, right: 1.0, result: 1.17549435E-38 } # min normal
- { left: 1.17549435E-38, right: -1.0, result: -1.17549435E-38 } # min normal
- { left: Float.MIN_VALUE, right: +0.0, result: 0.0 }
- { left: Float.MIN_VALUE, right: -0.0, result: 0.0 }
- { left: Float.MIN_VALUE, right: 1.0, result: Float.MIN_VALUE }
- { left: Float.MIN_VALUE, right: -1.0, result: -Float.MIN_VALUE }
- { left: Float.MIN_VALUE, right: Float.MIN_VALUE, result: 0.0 }
- { left: Float.MIN_VALUE, right: -Float.MIN_VALUE, result: 0.0 }
- { left: Float.MAX_VALUE, right: +0.0, result: 0.0 }
- { left: Float.MAX_VALUE, right: -0.0, result: 0.0 }
- { left: Float.MAX_VALUE, right: +1.0, result: Float.MAX_VALUE }
- { left: Float.MAX_VALUE, right: -1.0, result: -Float.MAX_VALUE }
- { left: Float.MAX_VALUE, right: Float.MAX_VALUE, result: Float.POSITIVE_INFINITY }
- { left: Float.MAX_VALUE, right: -Float.MAX_VALUE, result: Float.NEGATIVE_INFINITY }
- { left: 3.1415927, right: 0.0, result: 0.0 }
- { left: 3.1415927, right: 1.0, result: 3.1415927 }
- { left: 3.1415927, right: -1.0, result: -3.1415927 }
- { left: 3.1415927, right: 3.1415927, result: 9.869605 }
- { left: 3.1415927, right: -3.1415927, result: -9.869605 }
- { left: 3.33333325386, right: 2.66666650772, result: 8.888888 } # 2^1 * 1.10101010101010101010101 + 2^1 * 1.01010101010101010101010 = 2^2 * 1.00011100011100011100011
- { left: 1.25, right: 3.75, result: 4.6875 } # no rounding errors
- { left: -1.25, right: -3.75, result: 4.6875 } # no rounding errors
- { left: 1.25, right: -3.75, result: -4.6875 } # no rounding errors
- { left: -1.25, right: 3.75, result: -4.6875 } # no rounding errors
- { left: 1.0e0, right: 1.0e1, result: 10.0 }
- { left: 1.0e0, right: '1.0e-1', result: 0.1 }
- { left: 0.0000000001e10, right: 0.00000000000000000001e20, result: 1.0 }
- { left: 2.7182817e-15, right: 2.7182817e15, result: 7.389055 }
- { left: '.27182817e-14', right: '.27182817e16', result: 7.389055 }
- { left: '27_182_817e-22', right: '27_182_817e8', result: 7.389055 }
- { left: 0e38, right: 0e-38, result: 0.0 }
- { left: '0.0e2_147_483_647', right: '0.0e-2_147_483_648', result: 0.0 }
- { left: '.0078125', right: '.01171875', result: 9.1552734e-5 }
- { left: '.0078125', right: -0.01171875, result: -9.1552734e-5 }
- { left: -0.0078125, right: -0.01171875, result: 9.1552734e-5 }
- { left: 1.1754942E-38, right: 1.1754942E-38, result: 0.0 } # max subnormal
