# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - tags: |-
      negative, compile-only
    doc: |-
      String > literal string type (contravariant). Covariant parameter -> overloading is used -> parameters are not overload-compatible -> CTE expected
    decl: |-
      class Base {
        foo(i: string) {
          return 1
        }
      }
      class Derived extends Base {
        foo(i: "some str") {
          return 2
        }
      }
    use: |-
      let i: Derived = new Derived()
      assertEQ( i.foo("some str"), 2 )

  - tags: |-
      negative, compile-only
    doc: |-
      String > literal string type (contravariant). Covariant parameter -> overloading is used -> parameters are not overload-compatible -> CTE expected.
    decl: |-
      class Base {
        foo(i: string) {
          return 1
        }
      }
      class Derived extends Base {
        foo(i: "some str") {
          return 2
        }
      }
    use: |-
      let i: Derived = new Derived()
      assertEQ( i.foo(new String("some str")), 2 )

  - tags: |-
    doc: |-
      Functions are not override-equivalent, overload is happen and both functions are available.
    decl: |-
      class Base {
        foo(i: "some str") {
          return 1
        }
      }
      class Derived extends Base {
        foo(i: number) {
          return 2
        }
      }
    use: |-
      let i: Derived = new Derived()
      assertEQ( i.foo("some str"), 1 )
      assertEQ( i.foo(2), 2 )

  - tags: |-
    doc: |-
      String > literal string type (contravariant). Contravariant parameter -> overriding is used.
    decl: |-
      class Base {
        foo(i: "some str"|"another str") {
          return 1
        }
      }
      class Derived extends Base {
        foo(i: string) {
          return 2
        }
      }
    use: |-
      let i: Derived = new Derived()
      assertEQ( i.foo("some str"), 2 )
      assertEQ( i.foo(new String("another str")), 2 )