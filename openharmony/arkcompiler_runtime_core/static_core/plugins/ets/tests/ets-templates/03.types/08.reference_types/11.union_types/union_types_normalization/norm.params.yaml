# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: |-
        type UT = 'A' | string | 'A' | 'B' // => string
    use: |-
        let v: UT = 'hello'
        assert v == 'hello'

  - decl: |-
        type UT = string | true | 11 | boolean | 33  // => string | boolean | 11 | 33
    use: |-
        let v: UT = 'hello'
        assert v as string == 'hello'

        v = false
        assert v as boolean == false

        v = 11
        assert v == 11

        v = 33
        assert v == 33

  - decl: |-
        type UT = false | 12 | Object  // => Object
    use: |-
        let c: UT = new Error()
        assert c instanceof Object

  - decl: |-
        type UT = c'X' | c'Y' | char | string  // => char | string
    use: |-
        let v: UT = c'Z'
        assert v as char == c'Z'

        v = 'xyz'
        assert v as string == 'xyz'

  - decl: |-
        type UT = long | Long | int | Int  // => long
    use: |-
        let v: UT = Long.MAX_VALUE
        assert v == Long.MAX_VALUE

  - decl: |-
        type UT = 1 | 3 | 9 | 21 | byte  // => byte
    use: |-
        let v: UT = -128
        assert v == -128

  - decl: |-
        type A = '1' | '3'
        type B = '9' | '21'
        type C = string | 'byte'
        type UT = A | B | C  // => string
    use: |-
        let v: UT = 'hello'
        assert v == 'hello'

  - decl: |-
        type UT = Error | Object | null  // => Object | null
    use: |-
        let v: UT = new Number()
        assert v as number == 0.0

        v = null
        assert v == null

  - decl: |-
        class A {}
        class B extends A {}
        type UT = A | B | '33' // => A | '33'
    use: |-
        let v: UT = '33'
        assert v as string == '33'

        v = new B()
        assert v instanceof B

        v = new A()
        assert v instanceof A

  - decl: |-
        type UT = null | Object | null | Object
    use: |-
        let v: UT = null
        assert v == null

  - decl: |-
        type UT = undefined | Object | undefined | Object
    use: |-
        let v: UT = undefined
        assert v == undefined
