# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # Same type literals:
    - decl: |-
          type UT = 1 | 2 | 3
      use: |-
          let v: UT = 1
          assert v as int == 1
          v = 2
          assert v as int == 2
          v = 3
          assert v as int == 3

    - decl: |-
          type UT = 1.0 | .2 | 3.14
      use: |-
          let v: UT = 1.0
          assert v as number == 1.0
          v = 0.2
          assert v as number == 0.2
          v = 3.14
          assert v as number == 3.14

    - decl: |-
          type UT = 1n | 2n | 3n
      use: |-
          let v: UT = 1n
          assert v as bigint == 1n
          v = 2n
          assert v as bigint == 2n
          v = 3n
          assert v as bigint == 3n

    - decl: |-
          type UT = true | false
      use: |-
          let v: UT = true
          assert v as boolean == true
          v = false
          assert v as boolean == false

    - decl: |-
          type UT = 'A' | 'B'
      use: |-
          let v: UT = 'A'
          assert v as string == 'A'
          v = 'B'
          assert v as string == 'B'

    - decl: |-
          type UT = `A` | `B`
      use: |-
          let v: UT = `A`
          assert v as string == 'A'
          v = `B`
          assert v as string == 'B'

    - decl: |-
          type UT = c'A' | c'B'
      use: |-
          let v: UT = c'A'
          assert v as char == c'A'
          v = c'B'
          assert v as char == c'B'

    - decl: |-
          type AB = 'A' | 'B'
          type CD = 'C' | 'D'
          type ABCD = AB | CD
      use: |-
          let v: ABCD = 'A'
          assert v as string == 'A'
          v = 'B'
          assert v as string == 'B'
          v = 'C'
          assert v as string == 'C'
          v = 'D'
          assert v as string == 'D'


    # Different type literals:
    - decl: |-
          type UT = 1 | true | '1'
          class C {
              a: UT = true
              b: UT = true
          }
      use: |-
          let c: C = new C()
          assert c.a as boolean == true
          assert c.b as boolean == true
          c.a = 1
          c.b = '1'
          assert c.a as number == 1
          assert c.b as string == '1'
          c.a = '1'
          c.b = 1
          assert c.a as string == '1'
          assert c.b as number == 1

    - decl: |-
          type UT = 1.1 | 'error'
      use: |-
          let v: UT = 1.1
          v = 'error'
          assert v as string == 'error'

    - decl: |-
          type UT = 'error' | `error`
      use: |-
          let v: UT = 'error'
          assert v as string == 'error'
          v = `error`
          assert v as string == 'error'

    - decl: |-
          type UT = 0 | null | undefined
      use: |-
          let v: UT = 0
          assert v as int == 0
          v = null
          assert v === null
          v = undefined
          assert v === undefined

    - decl: |-
          type UT = c'A' | 'A'
      use: |-
          let v: UT = 'A'
          assert v as string == 'A'
          v = c'A'
          assert v as char == c'A'


    # Different types:
    - decl: |-
          type UT = string | boolean
      use: |-
          let v: UT[] = ['hello', true]
          assert v[0] as string == 'hello'
          assert v[1] as boolean == true
          v[0] = false
          v[1] = 'world'
          assert v[0] as boolean == false
          assert v[1] as string == 'world'

    - decl: |-
          type UT = string[] | boolean
      use: |-
          let v: UT = true
          assert v as boolean
          v = ['A', 'B']
          assert (v as string[])[0] == 'A' && (v as string[])[1] == 'B'

    - decl: |-
          type UT = boolean | number
          function foo(p: UT): string {
              return p instanceof Number ? 'N' : 'B'
          }
      use: |-
          assert foo(false) == 'B'
          assert foo(42.0) == 'N'

    - decl: |-
          class B {}
          class C {}
          type UT = B | C
      use: |-
          let v: UT = new B()
          assert v instanceof B
          v = new C()
          assert v instanceof C

    - decl: |-
          class B {}
          class C {}
          type UT = B[] | C[]
      use: |-
          let v: UT = new B[0]
          assert v instanceof B[]
          v = new C[0]
          assert v instanceof C[]

    - decl: |-
          class A {}
          class B extends A {}
          class C extends A {}
          type UT = B | C

          function foo<T extends A|null>(p: T): string {
              return p instanceof B ? 'B' : 'C'
          }
      use: |-
          let v: UT = new B()
          assert foo<UT>(v) == 'B'
          v = new C()
          assert foo<UT>(v) == 'C'

    - decl: |-
          type UT = number | string
          class C<T> {
              fld: T | null
          }
      use: |-
          let c: C<UT> = new C<UT>()
          c.fld = 42.0
          assert c.fld as number == 42.0
          c.fld = '42'
          assert c.fld as string == '42'

    - decl: |-
          enum Size { S, M, L, XL }
          class A {
              name: string = ''
              age: number = 0
          }
          class B {
              id: Number|null
              size: Size = Size.S
          }
          type UT = A | B
      use: |-
          let v: UT = new A()
          assert v instanceof A
          v = new B()
          assert v instanceof B

    - decl: |-
          enum Color { Red, Green, Blue }
          type UT = Color | Error
      use: |-
          let v: UT = new Error()
          assert v instanceof Error
          v = Color.Blue
          assert (v as Color) == Color.Blue

    - decl: |-
          type F1 = () => number
          type F2 = (p: string) => string
          type UT = F1 | F2 | number
      use: |-
          let v: UT = 42.0
          assert v as number == 42.0
          v = (): number => { return 16.0 }
          assert (v as F1)() == 16.0
          v = (p: string): string => { return p + p }
          assert (v as F2)('hello') == 'hellohello'

    - decl: |-
          interface I {}
          interface J {}
          class A implements I
          class B implements J
          type UT = I | J
      use: |-
          let i: I = {} as A
          let j: J = {} as B
          let v: UT = i
          assert v instanceof I
          v = j
          assert v instanceof J

    - decl: |-
          type UT = Record<number, string> | Record<string, number>
      use: |-
          let a: UT = { 1: 'A' } as Record<number, string>
          let b: UT = { 'A': 1 } as Record<string, number>
          // swap values
          let t: UT = a
          a = b
          b = t
          assert (a as Record<string, number>).A == 1
          assert (b as Record<number, string>).1 == 'A'

    - decl: |-
          type UT = [boolean, boolean, string] | boolean[]
      use: |-
          let v: UT = [true, true, false]
          assert v instanceof boolean[] && !(v as boolean[])[2]
          v = [true, true, 'false']
          assert v instanceof [boolean, boolean, string]
          assert (v as [boolean, boolean, string])[2] == 'false'

    - decl: |-
          type UT = [boolean, boolean] | [number, number]
      use: |-
          let v: UT = [true, true]
          assert v instanceof [boolean, boolean]
          v = [0, 0]
          assert v instanceof [number, number]

    - decl: |-
          type UT1 = Number | null
          type UT2 = string | null
          type UT3 = boolean | char
          type UT = UT1 | UT2 | UT3
      use: |-
          let v: UT = 1.0
          assert v as number == 1.0
          v = 'A'
          assert v as string == 'A'
          v = true
          assert v as boolean == true
          v = c'A'
          assert v as char == c'A'


    # Types and literals combo:
    - decl: |-
          type UT = number | true | false
      use: |-
          let v: UT = false
          assert v as boolean == false
          v = true
          assert v as boolean == true
          v = 3.5
          assert v as number == 3.5

    - decl: |-
          type UT = 0xFF | string | 0xFFFF
      use: |-
          let v: UT = 0xFF
          assert v as number == 0xFF
          v = 'hello!'
          assert v as string == 'hello!'
          v = 0xFFFF
          assert v as number == 0xFFFF

    - decl: |-
          type UT = c'V' | Error | 'hello'
      use: |-
          let v: UT = new Error()
          assert v instanceof Error
          v = c'V'
          assert v as char == c'V'
          v = 'hello'
          assert v as string == 'hello'

    - decl: |-
          type UT = 'hello' | int | boolean
      use: |-
          let v: UT = false
          assert v as boolean == false
          v = 42
          assert v as int == 42
          v = 'hello'
          assert v as string == 'hello'

    - decl: |-
          enum Color { Red, Green, Blue }
          type UT = true | Color
      use: |-
          let v: UT = Color.Green
          assert (v as Color) == Color.Green
          v = true
          assert (v as boolean) == true

    - decl: |-
          type F = (p: string) => string
          type UT = F | 3.14
      use: |-
          let v: UT = (p: string):string => { return p+p }
          assert (v as F)('A') == 'AA'
          v = 3.14
          assert (v as number) == 3.14

    - decl: |-
          type UT = Error[] | number[] | null
      use: |-
          let v: UT = null
          assert v === null
          v = [11.0, 12.0, 13.0]
          assert v instanceof number[]
          v = [new Error()]
          assert v instanceof Error[]

    - decl: |-
          type UT = string | number | undefined
          class C {
              a: UT
              b: UT
          }
      use: |-
          let c: C = new C()
          assert c.a === undefined && c.b === undefined
          c.a = 'A'
          c.b = 42.0
          assert c.a as string == 'A' && c.b as number == 42.0
          c.a = 33.0
          c.b = 'B'
          assert c.a as number == 33.0 && c.b as string == 'B'
