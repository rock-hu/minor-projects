# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          type UT = number | string | UT // CTE: circular reference
      use: ''

    - decl: |-
          type UT1 = number | string | UT2
          type UT2 = number | string | UT3
          type UT3 = number | string | UT1 // CTE: circular reference
      use: ''

    - decl: |-
          type UT = string | boolean
      use: |-
          let v: UT[] = new UT[2]
          assert v[0] == '' // CTE: getting value before assignment

    # Same type literals:
    - decl: |-
          type UT = 1 | 2 | 3
      use: |-
          let v: UT = 0  // CTE: wrong value

    - decl: |-
          type UT = 'A' | 'B'
      use: |-
          let v: UT = 'C'

    - decl: |-
          type UT = true | false
      use: |-
          let v: UT = undefined

    - decl: |-
          type UT = c'A' | c'B'
      use: |-
          let v: UT = c'X'

    - decl: |-
          type AB = 'A' | 'B'
          type CD = 'C' | 'D'
          type ABCD = AB | CD
      use: |-
          let v: ABCD = 'X'


    # Different type literals:
    - decl: |-
          type UT = 1 | true | '1'
          class C {
              a: UT = true
              b: UT = true
          }
      use: |-
          let c: C = new C()
          c.a = false


    # Different types:
    - decl: |-
          type UT = string | boolean
      use: |-
          let v: UT[] = ['hello', 42]

    - decl: |-
          type UT = string[] | boolean
      use: |-
          let v: UT = [1, 2, 3]

    - decl: |-
          type UT = Error[] | number[] | null
      use: |-
          let v: UT = [true, false, false]

    - decl: |-
          type UT = string | number | undefined
          class C {
              a: UT
              b: UT
          }
      use: |-
          let c: C = new C()
          c.a = false

    - decl: |-
          type UT = boolean | number
          function foo(p: UT): string {
              return p instanceof Number ? 'N' : 'B'
          }
      use: |-
          assert foo([false]) == 'B'

    - decl: |-
          class B {}
          class C {}
          type UT = B | C
      use: |-
          let v: UT = new B[0]

    - decl: |-
          class A {}
          class B extends A {}
          class C extends A {}
          type UT = B | C

          function foo<T extends A|null>(p: T): string {
              return p instanceof B ? 'B' : 'C'
          }
      use: |-
          assert foo<UT>(new Object()) == 'C'

    - decl: |-
          type UT = number | string
          class C<T> {
              fld: T | undefined
          }
      use: |-
          let c: C<UT> = new C<UT>()
          c.fld = new Object()

    - decl: |-
          enum Size { S, M, L, XL }
          class A {
              name: string = ''
              age: number = 0
          }
          class B {
              id: number|null
              size: Size|null
          }
          type UT = A | B
      use: |-
          let v: UT = new Number()

    - decl: |-
          enum Color { Red, Green, Blue }
          type UT = Color | Error
      use: |-
          let v: UT = 'error'

    - decl: |-
          type F1 = () => number
          type F2 = (p: string) => string
          type UT = F1 | F2 | number
      use: |-
          let v: UT = (p: string): number => { return 0 }

    - decl: |-
          interface I {}
          interface J {}
          type UT = I | J
      use: |-
          let v: UT = new Object()

    - decl: |-
          type UT = Record<number, string> | Record<string, number>
      use: |-
          let a: UT = { 1: 2 }

    - decl: |-
          type UT = [boolean, boolean, string] | boolean[]
      use: |-
          let v: UT = ['true', true, false]


    # Types and literals combo:
    - decl: |-
          type UT = number | true | false
      use: |-
          let v: UT = ""

    - decl: |-
          type UT = 0xFF | string | 0xFFFF
      use: |-
          let v: UT = "0xFF"

    - decl: |-
          type UT = c'V' | Error | 'hello'
      use: |-
          let v: UT = 'V'

    - decl: |-
          type UT = 'hello' | int | boolean
      use: |-
          let v: UT = 'HELLO'
