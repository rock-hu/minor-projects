# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          type UT = undefined | null | never  // => null | undefined
          let v: UT
      pos:
          - |-
              v = undefined
              assertTrue(v === undefined)
              v = null
              assertTrue(v === null)
      neg:
          - |-
              v = new Object()

    - decl: |-
          type NU = number | undefined
          type NN = number | null
          type N = never | number
          type NU2 = undefined | Number
          type NN2 = null | Number
          type N2 = Number | never
          type UT = NU | NN | N | NU2 | NN2 | N2  // => Number|null|undefined
          let v: UT
      pos:
          - |-
              v = undefined
              assertTrue(v === undefined)
              v = null
              assertTrue(v === null)
              v = 3.14
              assertEQ(v, 3.14)
              v = new Double(2.5)
              assertEQ(v, 2.5)
      neg:
          - |-
              v = new Object()
          - |-
              v = '123'
          - |-
              v = 1n

    - decl: |-
          type OE = Object | Error
          type NU = OE | Numeric | undefined
          type UT = OE | Integral | undefined | NU  // => Object | undefined
      pos:
          - |-
              let v: UT = new Error()
              assertTrue(v instanceof Error)
              v = undefined
              assertTrue(v === undefined)
              v = ['a', 'b'] as string[]
              assertTrue(v instanceof string[] && v[0] == 'a' && v[1] == 'b')
              v = new Object()
              assertTrue(v instanceof Object)
      neg:
          - |-
              let v: UT = null

    - decl: |-
          type L = Long | long
          type UT = null | (Object | null) | (L | Object) | Error | 'A'  // => Object | null
      pos:
          - |-
              let v: UT = new Error()
              assertTrue(v instanceof Error)
              v = null
              assertTrue(v === null)
              v = ['a', 'b'] as string[]
              assertTrue(v instanceof string[] && v[0] == 'a' && v[1] == 'b')
              v = new Object()
              assertTrue(v instanceof Object)
              v = 'A'
              assertEQ(v, 'A')
              v = Long.MAX_VALUE
              assertEQ(v, Long.MAX_VALUE)
              v = new Long(Long.MIN_VALUE)
              assertEQ(v, Long.MIN_VALUE)
      neg:
          - |-
              let v: UT = undefined

    - decl: |-
          type AB = 'A' | 'B'
          type UT = 'A' | string | AB  // => string
          let v: UT = ''
      pos:
          - |-
              v = 'abc'
              assertEQ(v, 'abc')
              v = '\u0000' + '\u0000' + '\u0000'
              assertEQ(v, '\u0000\u0000\u0000')
      neg:
          - |-
              v = new Char(c'\u0000')
          - |-
              v = null
          - |-
              v = undefined
          - |-
              v = new Object()

    - decl: |-
          type A = '1' | '3'
          type B = '9' | '21'
          type C = string | 'byte'
          type UT = A | B | C   // => string
          let v: UT = ''
      pos:
          - |-
              v = new String('1')
              assertEQ(v, '1')
              v = new Char(c'3').toString()
              assertEQ(v, '3')
      neg:
          - |-
              v = undefined
          - |-
              v = new Byte()

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          class D {}
          type UT = A | B | '33'  // => A | '33'
          let v: UT = new A
      pos:
          - |-
              v = new B
              assertTrue(v instanceof A)
              v = new C
              assertTrue(v instanceof A)
              v = '33'
              assertEQ(v, '33')
      neg:
          - |-
              v = '34'
          - |-
              v = new D
          - |-
              v = null
          - |-
              v = undefined

    - decl: |-
          type UT = string|never|string[]|String   // => string|string[]
      pos:
          - |-
              let v: UT = 'abc'
              assertEQ(v, 'abc')
              v = ['a', 'b', 'c']
              assertTrue(v instanceof string[] && v[0] == 'a' && v[2] == 'c')
              v = new String('\uFFFF')
              assertEQ(v, '\uFFFF')
      neg:
          - |-
              let v: UT = null
          - |-
              let v: UT = undefined
          - |-
              let v: UT = new Object()
          - |-
              let v: UT = new Char[2]

    - decl: |-
          type U1 = number[] | string[]
          type U2 = (readonly number[]) | (readonly string[])
          type UT = U1 | U2  // => readonly string[]|readonly number[]
      pos:
          - |-
              let v: UT|undefined = [1.0, 2.0]
              assertTrue(v[0] == 1.0 && v[1] == 2.0)
              v = ['a', 'b']
              assertTrue(v[0] == 'a' && v[1] == 'b')
      neg:
          - |-
              let v: UT|undefined = [1.0, 2.0]
              v[0] = 3.0  // CTE, readonly array
          - |-
              let v: UT|undefined = ['a', 'b']
              v[1] = 'c'  // CTE, readonly array

    - decl: |-
          type U1 = (readonly Object[])
          type U2 = null | Object[]
          type UT = U1 | U2 | Error[]  // => readonly Object[]|Error[]|null

      pos:
          - |-
              let v: UT = [new Error('a'), new Error('b')]
              assertTrue(v instanceof UT && v.length == 2)
              v = [new Object(), new Object(), new Object()]
              assertTrue(v instanceof UT && v.length == 3)
      neg:
          - |-
              let v: UT = [new Object(), new Object()]
              v[0] = new Object()  // CTE, readonly array

    - decl: |-
          type U1 = [number, string]
          type U2 = (readonly [number, string])
          type UT = number | U1 | U2  // => number|readonly [number, string]
      pos:
          - |-
              let v: UT = 0.0
              let tup: [number, string] = [42.0, 'a']
              v = tup
              assertTrue(v[0] == 42.0 && v[1] == 'a')
      neg:
          - |-
              let v: UT = 0.0
              let tup: [number, string] = [42.0, 'a']
              v = tup
              assertTrue(v[0] == 42.0 && v[1] == 'a')
              v[0] = 33.0  // CTE, readonly tuple
          - |-
              let v: UT = 0.0
              let tup: [number, string] = [42.0, 'a']
              v = tup
              assertTrue(v[0] == 42.0 && v[1] == 'a')
              v[1] = 'b'  // CTE, readonly tuple

    - decl: |-
          type UT = number | Number | double | Double | undefined // => Double|undefined
          let v: UT
      pos:
          - |-
              v = 3.14
              assertEQ(v, 3.14)
              v = new Number(2.5)
              assertEQ(v, 2.5)
              let d: Object = new Double(42.0)
              v = d
              assertEQ(v, 42.0)
      neg:
          - |-
              v = null

    - decl: |-
          type UT = undefined | Numeric | Integral | Floating  // => Numeric | undefined
          let v: UT
      pos:
          - |-
              v = new Float(3.14f)
              assertEQ(v, 3.14f)
              v = new Int(3)
              assertEQ(v, 3)
              v = new Number(2e5)
              assertEQ(v, 2e5)
              v = new Byte(0x7F as byte)
              assertEQ(v, 127)
              v = new Short(-32768 as short)
              assertEQ(v, Short.MIN_VALUE)
              v = new Long(0xffffffffff as long)
              assertEQ(v, 1099511627775)
      neg:
          - |-
              v = c'\u0000'

    - decl: |-
          type U1 = byte | undefined
          type U2 = short | undefined
          type U3 = int | undefined
          type U4 = long | undefined
          type UT = U1 | U2 | U3 | U4
          let v: UT
      pos:
          - |-
              v = new Byte()

    - decl: |-
          type U1 = byte | undefined
          type U2 = short | undefined
          type U3 = int | undefined
          type U4 = long | undefined
          type UT = U1 | U2 | U3 | U4 | Integral // => Integral | undefined
          let v: UT
      pos:
          - |-
              v = new Byte(0x7F as byte)
              assertEQ(v, 127)
              v = new Short(-32768 as short)
              assertEQ(v, Short.MIN_VALUE)
              v = new Int(3)
              assertEQ(v, 3)
              v = new Long(0xffffffffff as long)
              assertEQ(v, 1099511627775)
      neg:
          - |-
              v = null
          - |-
              v = new Object()

    - decl: |-
          type UT = byte | short | int | long | Integral | undefined  // => Integral | undefined
          let v: UT
      pos:
          - |-
              v = new Byte(0x7F as byte)
              assertEQ(v, 127)
              v = new Short(-32768 as short)
              assertEQ(v, Short.MIN_VALUE)
              v = new Int(3)
              assertEQ(v, 3)
              v = new Long(0xffffffffff as long)
              assertEQ(v, 1099511627775)
      neg:
          - |-
              v = new Float(3.14f)
          - |-
              v = new Number(2.5)

    - decl: |-
          type UT = float | double | Floating | undefined  // => Floating | undefined
          let v: UT
      pos:
          - |-
              v = new Float(3.14f)
              assertEQ(v, 3.14f)
              v = new Double(2.5)
              assertEQ(v, 2.5)
      neg:
          - |-
              v = new Int()
          - |-
              v = new Long()

    - decl: |-
          type UT = byte | short | int | long | float | double | Numeric | undefined  // => Numeric | undefined
          let v: UT
      pos:
          - |-
              v = new Byte(0x7F as byte)
              assertEQ(v, 127)
              v = new Short(-32768 as short)
              assertEQ(v, Short.MIN_VALUE)
              v = new Int(3)
              assertEQ(v, 3)
              v = new Long(0xffffffffff as long)
              assertEQ(v, 1099511627775)
              v = new Float(3.14f)
              assertEQ(v, 3.14f)
              v = new Double(2.5)
              assertEQ(v, 2.5)
      neg:
          - |-
              v = null
          - |-
              v = new Object()
