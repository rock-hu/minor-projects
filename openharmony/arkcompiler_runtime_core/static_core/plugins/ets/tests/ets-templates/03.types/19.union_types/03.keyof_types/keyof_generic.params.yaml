# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - decl: |-
      class A<T> {}
      let n: never
    check: |-
      type t = keyof A<Number>
      let a: t = n

  - decl: |-
      class A<T,V> {
        foo(i: T) {}
        bar: V
        constructor(bar: V) {
          this.bar = bar
        }
        jay<U>() {}
      }
    check: |-
      type t = keyof A<Object,Map<Object,Number>>
      let a: t = "bar"
      a = "foo"
      a = "jay"
      assertEQ(typeof a, string)

  - decl: |-
      final class A<T,V> {
        foo(i: T) {}
        bar: V
        constructor(bar: V) {
          this.bar = bar
        }
        jay<U>() {}
      }
    check: |-
      type t = keyof A<Array<Byte>,Set<String>>
      let a: t = "bar"
      a = "foo"
      a = "jay"
      assertEQ(typeof a, string)

  - decl: |-
      abstract class A<T,V> {
        foo(i: T) {}
        bar: V
        jay<U>() {}
      }
      class B {}
    check: |-
      type t = keyof A<B,int[]>
      let a: t = "bar"
      a = "foo"
      a = "jay"
      assertEQ(typeof a, string)

  - decl: |-
      interface I<T,V> {
        foo(i: T)
        bar: V
        jay<U>()
      }
      enum NUM {A, B, C}
    check: |-
      type t = keyof I<NUM,Boolean>
      let a: t = "bar"
      a = "foo"
      a = "jay"
      assertEQ(typeof a, string)
