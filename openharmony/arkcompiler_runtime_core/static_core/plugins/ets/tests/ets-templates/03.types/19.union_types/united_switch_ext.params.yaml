# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Interfaces with static members and type parameters inside
cases:
  - desc: Class and number union type.
    decl: |-
      class Cat {}
      class Dog {}
      class Frog {}
      type Animal = Cat | Dog | Frog | number
      function unitedSwitch(input: Animal): string {
        switch (typeof input) {
          case 'number':
            return "number";
          case 'object':
            return 'object';
          default:
            return "failed";
        }
      }
    logic: |-
      assertEQ(unitedSwitch(12), "number");
      assertEQ(unitedSwitch(new Cat()), "object");
  - desc: Boolean union type. If false is passed in, the case is expected to match false.
    decl: |-
      function unitedSwitch(input: boolean): string {
        switch (input) {
          case true:
            return "true";
          case false:
            return "false";
          default:
            return "fail";
        }
      }
    logic: |-
      assertEQ(unitedSwitch(false), "false");
  - desc: Class and string combined type(string).
    decl: |-
      class Cat {}
      class Dog {}
      class Frog {}
      type Animal = Cat | Dog | Frog | string

      function unitedSwitch(input: Animal): string {
        switch (typeof input) {
          case 'string':
            return 'string';
          default:
            return 'not string';
        }
      }
    logic: |-
      assertEQ(unitedSwitch(new Cat()), 'not string');
  - desc: Number and String combined type(number).
    decl: |-
      function unitedSwitch(input: number | string): string {
        switch (input) {
          case 'red':
            return 'red';
          case 1:
            return '1';
          default:
            return 'fail';
        }
      }
    logic: |-
      let input = 1;
      assertEQ(unitedSwitch(input), '1');
  - desc: Null and undefined combined type(null).
    decl: |-
      function unitedSwitch(input: null | undefined): string {
        switch (input) {
          case null:
            return 'null';
          case undefined:
            return 'undefined';
          default:
            return 'fail';
        }
      }
    logic: |-
      let input = null;
      assertEQ(unitedSwitch(input), 'null');
  - desc: Null and undefined combined type(undefined).
    decl: |-
      function unitedSwitch(input: null | undefined): string {
        switch (input) {
          case null:
            return 'null';
          case undefined:
            return 'undefined';
          default:
            return 'fail';
        }
      }
    logic: |-
      let input = undefined;
      assertEQ(unitedSwitch(input), 'undefined');
  - desc: Int and null combined type(int).
    decl: |-
      function unitedSwitch(input: int | null): string {
        switch (input) {
          case 1:
            return '1';
          case null:
            return 'null';
          default:
            return 'fail';
        }
      }
    logic: |-
      let input = 1;
      assertEQ(unitedSwitch(input), '1');
  - desc: Null and long combined type.
    decl: |-
      function unitedSwitch(input: long | null): string {
        switch (input) {
          case null:
            return 'null';
          case 1:
            return '1';
          default:
            return 'fail';
        }
      }
    logic: |-
      let input = 1;
      assertEQ(unitedSwitch(input), '1');
  - desc: Undefined and short combined type.
    decl: |-
      function unitedSwitch(input: short | undefined): string {
        switch (input) {
          case undefined:
            return 'undefined';
          case 1:
            return '1';
          default:
            return 'fail';
        }
      }
    logic: |-
      let input = 1;
      assertEQ(unitedSwitch(input), '1');
  - desc: Test string and null union types.
    decl: |-
      function unitedSwitch(input: 'test' | null): string {
        switch (input) {
          case null:
            return 'null';
          case 'test':
            return 'test';
          default:
            return 'fail';
        }
      }
    logic: |-
      let input = 'test';
      assertEQ(unitedSwitch(input), 'test');
  - desc: Test the combination of string and undefined types.
    decl: |-
      function unitedSwitch(input: 'test' | undefined): string {
        switch (input) {
          case undefined:
            return 'undefined';
          case 'test':
            return 'test';
          default:
            return 'fail';
        }
      }
    logic: |-
      let input = 'test';
      assertEQ(unitedSwitch(input), 'test');
  - desc: Boolean base match.
    decl: |-
      function unitedSwitch(value: boolean | number): string {
        switch (typeof value) {
          case 'boolean':
            return 'Boolean case triggered';
          case 'number':
            return 'Number case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: boolean | number = true;
      assertEQ(unitedSwitch(value), 'Boolean case triggered');
  - desc: Number base match.
    decl: |-
      function unitedSwitch(value: boolean | number): string {
        switch (typeof value) {
          case 'boolean':
            return 'Boolean case triggered';
          case 'number':
            return 'Number case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: boolean | number = 100;
      assertEQ(unitedSwitch(value), 'Number case triggered');
  - desc: String and Boolean combination(boolean).
    decl: |-
      function unitedSwitch(value: boolean | string): string {
        switch (typeof value) {
          case 'boolean':
            return 'Boolean case triggered';
          case'string':
            return 'Number case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: boolean | number = false;
      assertEQ(unitedSwitch(value), 'Boolean case triggered');
  - desc: String and Boolean combination(string).
    decl: |-
      function unitedSwitch(value: boolean | string): string {
        switch (typeof value) {
          case 'boolean':
            return 'Boolean case triggered';
          case'string':
            return 'String case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: boolean | string = 'test';
      assertEQ(unitedSwitch(value), 'String case triggered');
  - desc: Three-type combination match (string).
    decl: |-
      function unitedSwitch(value: number | string | boolean): string {
        switch (typeof value) {
          case 'string':
            return 'String case triggered';
          case 'boolean':
            return 'Boolean case triggered';
          default:
            return 'fail'
        }
      }
    logic: |-
      let value: number | string | boolean = "test";
      assertEQ(unitedSwitch(value), 'String case triggered');
  - desc: Three-type combination match (boolean).
    decl: |-
      function unitedSwitch(value: number | string | boolean): string {
        switch (typeof value) {
          case 'string':
            return 'String case triggered';
          case 'boolean':
            return 'Boolean case triggered';
          case 'number':
            return 'Number case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: number | string | boolean = true;
      assertEQ(unitedSwitch(value), 'Boolean case triggered');
  - desc: Four-type combination match (string).
    decl: |-
      function unitedSwitch(value: number | string | boolean | null): string {
        switch (typeof value) {
          case 'string':
            return 'String case triggered';
          case 'boolean':
            return 'Boolean case triggered';
          case 'number':
            return 'Number case triggered';
          case 'object':
            if (value === null) {
              return 'Null case';
            }
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: number | string | boolean | null = 'text';
      assertEQ(unitedSwitch(value), 'String case triggered');
  - desc: Four-type combination match (boolean).
    decl: |-
      function unitedSwitch(value: number | string | boolean | null): string {
        switch (typeof value) {
          case 'string':
            return 'String case triggered';
          case 'boolean':
            return 'Boolean case triggered';
          case 'number':
            return 'Number case triggered';
          case 'object':
            if (value === null) {
              return 'Null case';
            }
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: number | string | boolean | null = true;
      assertEQ(unitedSwitch(value), 'Boolean case triggered');
  - desc: Four-type combination match (number).
    decl: |-
      function unitedSwitch(value: number | string | boolean | null): string {
        switch (typeof value) {
          case 'string':
            return 'String case triggered';
          case 'boolean':
            return 'Boolean case triggered';
          case 'number':
            return 'Number case triggered';
          case 'object':
            if (value === null) {
              return 'Null case';
            }
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: number | string | boolean | null = 24;
      assertEQ(unitedSwitch(value), 'Number case triggered');
  - desc: Four-type joint matching (null).
    decl: |-
      function unitedSwitch(value: number | string | boolean | null): string {
        switch (typeof value) {
          case'string':
            return 'String case triggered';
          case 'boolean':
            return 'Boolean case triggered';
          case 'number':
            return 'Number case triggered';
          case 'object':
            if (value === null) {
              return 'Null case';
            }
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: number | string | boolean | null = null;
      assertEQ(unitedSwitch(value), 'Null case');
  - desc: Bigint type match.
    decl: |-
      function unitedSwitch(value: bigint | number): string {
        switch (typeof value) {
          case 'bigint':
            return 'bigint case triggered';
          case 'number':
            return 'Number case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: bigint | number = 123n;
      assertEQ(unitedSwitch(value), 'bigint case triggered');
  - desc: short type match.
    decl: |-
      function unitedSwitch(value: short | string): string {
        switch (typeof value) {
          case 'number':
            return 'short case triggered';
          case 'string':
            return 'string case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: short | string = 1;
      assertEQ(unitedSwitch(value),'short case triggered');
  - desc: The bigint and string types match.
    decl: |-
      function unitedSwitch(value: bigint | string): string {
        switch (typeof value) {
          case 'bigint':
            return 'bigint case triggered';
          case 'string':
            return 'string case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: bigint | string = 'test';
      assertEQ(unitedSwitch(value),'string case triggered');
  - desc: The byte and string types match.
    decl: |-
      function unitedSwitch(value: byte | string): string {
        switch (typeof value) {
          case 'byte':
            return 'byte case triggered';
          case 'string':
            return 'string case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: byte | string = 'test';
      assertEQ(unitedSwitch(value),'string case triggered');
  - desc: The bigint and boolean types match.
    decl: |-
      function unitedSwitch(value: bigint | boolean): string {
        switch (typeof value) {
          case 'bigint':
            return 'bigint case triggered';
          case 'boolean':
            return 'boolean case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: bigint | boolean = false;
      assertEQ(unitedSwitch(value), 'boolean case triggered');
  - desc: The byte and string types match.
    decl: |-
      function unitedSwitch(value: byte | string): string {
        switch (typeof value) {
          case 'number':
            return 'byte case triggered';
          case 'string':
            return 'string case triggered';
          default:
            return 'fail';
        }
      }
    logic: |-
      let value: byte | string = 123;
      assertEQ(unitedSwitch(value),'byte case triggered');