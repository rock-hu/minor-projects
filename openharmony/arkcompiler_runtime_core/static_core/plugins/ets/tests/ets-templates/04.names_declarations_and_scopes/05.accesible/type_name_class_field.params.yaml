# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # Primitives
  - decl: |-
        type T = byte;
    field: |-
        foo: T = 0x80 as byte;
        static sfoo: T = 0x79 as byte;
    check: |-
        function main() {
            assert(A.sfoo == 0x79 as byte);
            let a: A = new A();
            assert(a.foo == 0x80 as byte);
            assert(a.bar(A.sfoo) == 0x79 as byte);
            assert(A.sbar(a.foo) == 0x80 as byte);
        }

  - decl: |-
        type T = short;
    field: |-
        foo: T = 0x7FFF as short;
        static sfoo: T = 0x7FFF as short;
    check: |-
        function main() {
            assert(A.sfoo == 0x7FFF as short);
            let a: A = new A();
            assert(a.foo == 0x7FFF as short);
            assert(a.bar(a.foo) == 0x7FFF as short);
            assert(A.sbar(a.foo) == 0x7FFF as short);
        }

  - decl: |-
        type T = int
    field: |-
        foo: T = 127 as int;
        static sfoo: T = 127 as int;
    check: |-
        function main() {
            assert(A.sfoo == 127 as int);
            let a: A = new A();
            assert(a.foo == 127 as int);
            assert(a.bar(a.foo) == 127 as int);
            assert(A.sbar(a.foo) == 127 as int);
        }

  - decl: |-
        type T = long
    field: |-
        foo: T = 127 as long;
        static sfoo: T = 127 as long;
    check: |-
        function main() {
            assert(A.sfoo == 127 as long);
            let a: A = new A();
            assert(a.foo == 127 as long);
            assert(a.bar(a.foo) == 127 as long);
            assert(A.sbar(a.foo) == 127 as long);
        }

  - decl: |-
        type T = float
    field: |-
        foo: T = +0.0 as float;
        static sfoo: T = +0.0 as float;
    check: |-
        function main() {
            assert(A.sfoo == +0.0 as float);
            let a: A = new A();
            assert(a.foo == +0.0 as float);
            assert(a.bar(a.foo) == +0.0 as float);
            assert(A.sbar(a.foo) == +0.0 as float);
        }

  - decl: |-
        type T = double
    field: |-
        foo: T = +0.0 as double;
        static sfoo: T = +0.0 as double;
    check: |-
        function main() {
            assert(A.sfoo == +0.0 as double);
            let a: A = new A();
            assert(a.foo == +0.0 as double);
            assert(a.bar(a.foo) == +0.0 as double);
            assert(A.sbar(a.foo) == +0.0 as double);
        }

  - decl: |-
        type T = number
    field: |-
        foo: T = +0.0 as number;
        static sfoo: T = +0.0 as number;
    check: |-
        function main() {
            assert(A.sfoo == +0.0 as number);
            let a: A = new A();
            assert(a.foo == +0.0 as number);
            assert(a.bar(a.foo) == +0.0 as number);
            assert(A.sbar(a.foo) == +0.0 as number);
        }

  - decl: |-
        type T = char
    field: |-
        foo: T = c'a';
        static sfoo: T = c'a';
    check: |-
        function main() {
            assert(A.sfoo == c'a');
            let a: A = new A();
            assert(a.foo == c'a');
            assert(a.bar(a.foo) == c'a');
            assert(A.sbar(a.foo) == c'a');
        }

  - decl: |-
        type T = boolean
    field: |-
        foo: T = false;
        static sfoo: T = false;
    check: |-
        function main() {
            assert(A.sfoo == false);
            let a: A = new A();
            assert(a.foo == false);
            assert(a.bar(a.foo) == false);
            assert(A.sbar(a.foo) == false);
        }

  # Boxed
  - decl: |-
        type T = Byte
    field: |-
        foo: T = new Byte(0x7F as byte);
        static sfoo: T = new Byte(0x7F as byte);
    check: |-
        function main() {
            assert(A.sfoo.unboxed() == 0x7F as byte);
            let a: A = new A();
            assert(a.foo.unboxed() == 0x7F as byte);
            assert(a.bar(a.foo).unboxed() == 0x7F as byte);
            assert(A.sbar(a.foo).unboxed() == 0x7F as byte);
        }

  - decl: |-
        type T = Short
    field: |-
        foo: T = new Short(2 as short);
        static sfoo: T = new Short(2 as short);
    check: |-
        function main() {
            assert(A.sfoo.unboxed() == 2 as short);
            let a: A = new A();
            assert(a.foo.unboxed() == 2 as short);
            assert(a.bar(a.foo).unboxed() == 2 as short);
            assert(A.sbar(a.foo).unboxed() == 2 as short);
        }

  - decl: |-
        type T = Int
    field: |-
        foo: T = new Int(3 as int);
        static sfoo: T = new Int(3 as int);
    check: |-
        function main() {
            assert(A.sfoo.unboxed() == 3 as int);
            let a: A = new A();
            assert(a.foo.unboxed() == 3 as int);
            assert(a.bar(a.foo).unboxed() == 3 as int);
            assert(A.sbar(a.foo).unboxed() == 3 as int);
        }

  - decl: |-
        type T = Long
    field: |-
        foo: T = new Long(4 as long);
        static sfoo: T = new Long(4 as long);
    check: |-
        function main() {
            assert(A.sfoo.unboxed() == 4 as long);
            let a: A = new A();
            assert(a.foo.unboxed() == 4 as long);
            assert(a.bar(a.foo).unboxed() == 4 as long);
            assert(A.sbar(a.foo).unboxed() == 4 as long);
        }

  - decl: |-
        type T = Float
    field: |-
        foo: T = new Float(0.1 as float);
        static sfoo: T = new Float(0.1 as float);
    check: |-
        function main() {
            assert(A.sfoo.unboxed() == 0.1 as float);
            let a: A = new A();
            assert(a.foo.unboxed() == 0.1 as float);
            assert(a.bar(a.foo).unboxed() == 0.1 as float);
            assert(A.sbar(a.foo).unboxed() == 0.1 as float);
        }

  - decl: |-
        type T = Double
    field: |-
        foo: T = new Double(0.1 as double);
        static sfoo: T = new Double(0.1 as double);
    check: |-
        function main() {
            assert(A.sfoo.unboxed() == 0.1 as double);
            let a: A = new A();
            assert(a.foo.unboxed() == 0.1 as double);
            assert(a.bar(a.foo).unboxed() == 0.1 as double);
            assert(A.sbar(a.foo).unboxed() == 0.1 as double);
        }

  - decl: |-
        type T = Number
    field: |-
        foo: T = new Number(0.1 as number);
        static sfoo: T = new Number(0.1 as number);
    check: |-
        function main() {
            assert(A.sfoo.unboxed() == 0.1 as number);
            let a: A = new A();
            assert(a.foo.unboxed() == 0.1 as number);
            assert(a.bar(a.foo).unboxed() == 0.1 as number);
            assert(A.sbar(a.foo).unboxed() == 0.1 as number);
        }

  - decl: |-
        type T = Char
    field: |-
        foo: T = new Char(c'b');
        static sfoo: T = new Char(c'b');
    check: |-
        function main() {
            assert(A.sfoo.unboxed() == c'b');
            let a: A = new A();
            assert(a.foo.unboxed() == c'b');
            assert(a.bar(a.foo).unboxed() == c'b');
            assert(A.sbar(a.foo).unboxed() == c'b');
        }

  - decl: |-
        type T = string
    field: |-
        foo: T = "some string";
        static sfoo: T = "some string";
    check: |-
        function main() {
            assert(A.sfoo == "some string");
            let a: A = new A();
            assert(a.foo == "some string");
            assert(a.bar(a.foo) == "some string");
            assert(A.sbar(a.foo) == "some string");
        }

  - decl: |-
        type T = String
    field: |-
        foo: T = new String("some string");
        static sfoo: T = new String("some string");
    check: |-
        function main() {
            assert(A.sfoo == "some string");
            let a: A = new A();
            assert(a.foo == "some string");
            assert(a.bar(a.foo) == "some string");
            assert(A.sbar(a.foo) == "some string");
        }

  - decl: |-
        type T = Boolean
    field: |-
        foo: T = new Boolean(false);
        static sfoo: T = new Boolean(true);
    check: |-
        function main() {
            assert(A.sfoo.unboxed() == true);
            let a: A = new A();
            assert(a.foo.unboxed() == false);
            assert(a.bar(A.sfoo).unboxed() == true);
            assert(A.sbar(a.foo).unboxed() == false);
        }

    # Custom
  - decl: |-
      type T = int[]
    field: |-
      foo: T = [1, -2];
      static sfoo: T = [2, -3];
    check: |-
      function main() {
          assert(A.sfoo.length == 2);
          assert(A.sfoo[0] == 2);
          assert(A.sfoo[1] == -3);
          let a: A = new A();
          assert(a.foo.length == 2);
          assert(a.foo[0] == 1);
          assert(a.foo[1] == -2);
          assert(a.bar(A.sfoo).length == 2);
          assert(a.bar(A.sfoo)[0] == 2);
          assert(a.bar(A.sfoo)[1] == -3);
          assert(A.sbar(a.foo).length == 2);
          assert(A.sbar(a.foo)[0] == 1);
          assert(A.sbar(a.foo)[1] == -2);
      }

  - decl: |-
      type T = Int[][]
    field: |-
      foo: T = [[new Int(1)], [new Int(-2), new Int(3)]];
      static sfoo: T = [[new Int(2), new Int(4)], [new Int(-5)]];
    check: |-
      function main() {
          assert(A.sfoo.length == 2);
          assert(A.sfoo[0].length == 2);
          assert(A.sfoo[1].length == 1);
          assert(A.sfoo[0][0] == 2);
          assert(A.sfoo[0][1] == 4);
          assert(A.sfoo[1][0] == -5);
          let a: A = new A();

          assert(a.foo.length == 2);
          assert(a.foo[0].length == 1);
          assert(a.foo[1].length == 2);
          assert(a.foo[0][0] == 1);
          assert(a.foo[1][0] == -2);
          assert(a.foo[1][1] == 3);

          assert(a.bar(A.sfoo).length == 2);
          assert(a.bar(A.sfoo)[0].length == 2);
          assert(a.bar(A.sfoo)[1].length == 1);
          assert(a.bar(A.sfoo)[0][0] == 2);
          assert(a.bar(A.sfoo)[0][1] == 4);
          assert(a.bar(A.sfoo)[1][0] == -5);

          assert(A.sbar(a.foo).length == 2);
          assert(A.sbar(a.foo)[0].length == 1);
          assert(A.sbar(a.foo)[1].length == 2);
          assert(A.sbar(a.foo)[0][0] == 1);
          assert(A.sbar(a.foo)[1][0] == -2);
          assert(A.sbar(a.foo)[1][1] == 3);
      }

  - decl: |-
      enum Colors {Red, Blue=3}
      type T = Colors
    field: |-
      foo: T = Colors.Blue;
      static sfoo: T = Colors.Red;
    check: |-
      function main() {
          assert(A.sfoo == Colors.Red);
          let a: A = new A();
          assert(a.foo == Colors.Blue);
          assert(a.bar(A.sfoo) == Colors.Red);
          assert(A.sbar(a.foo) == Colors.Blue);
      }

  - decl: |-
      type T = [string, number]
      type S = [number, string]
    field: |-
      foo: T = ["str", 1.4];
      static sfoo: S = [4.1, "rts"];
      bar2(i: S): S {
          return i;
      }
    check: |-
      function main() {
          assert(A.sfoo instanceof S);
          assert(A.sfoo[0] == 4.1);
          assert(A.sfoo[1] == "rts");
          let a: A = new A();
          assert(a.foo instanceof T);
          assert(a.foo[0] == "str");
          assert(a.foo[1] == 1.4);
          assert(a.bar2(A.sfoo)[0] == 4.1);
          assert(a.bar2(A.sfoo)[1] == "rts");
          assert(A.sbar(a.foo)[0] == "str");
          assert(A.sbar(a.foo)[1] == 1.4);
      }
