# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # Primitives
  - decl: |-
      type T = byte;
    init: |-
      foo = 0x80 as byte;
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == 0x80 as byte);
          assert(a.bar(a.foo) == 0x80 as byte);
      }

  - decl: |-
      type T = short;
    init: |-
      foo = 0x7FFF as short;
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == 0x7FFF as short);
          assert(a.bar(a.foo) == 0x7FFF as short);
      }

  - decl: |-
      type T = int
    init: |-
      foo = 127 as int;
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == 127 as int);
          assert(a.bar(a.foo) == 127 as int);
      }

  - decl: |-
      type T = long
    init: |-
      foo = 127 as long;
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == 127 as long);
          assert(a.bar(a.foo) == 127 as long);
      }

  - decl: |-
      type T = float
    init: |-
      foo = +0.0 as float;
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == +0.0 as float);
          assert(a.bar(a.foo) == +0.0 as float);
      }

  - decl: |-
      type T = double
    init: |-
      foo = +0.0 as double;
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == +0.0 as double);
          assert(a.bar(a.foo) == +0.0 as double);
      }

  - decl: |-
      type T = number
    init: |-
      foo = +0.0 as number;
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == +0.0 as number);
          assert(a.bar(a.foo) == +0.0 as number);
      }

  - decl: |-
      type T = char
    init: |-
      foo = c'a';
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == c'a');
          assert(a.bar(a.foo) == c'a');
      }

  - decl: |-
      type T = boolean
    init: |-
      foo = false;
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == false);
          assert(a.bar(a.foo) == false);
      }

  # Boxed
  - decl: |-
      type T = Byte
    init: |-
      foo = new Byte(0x7F as byte);
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.unboxed() == 0x7F as byte);
          assert(a.bar(a.foo).unboxed() == 0x7F as byte);
      }

  - decl: |-
      type T = Short
    init: |-
      foo = new Short(2 as short);
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.unboxed() == 2 as short);
          assert(a.bar(a.foo).unboxed() == 2 as short);
      }

  - decl: |-
      type T = Int
    init: |-
      foo = new Int(3 as int);
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.unboxed() == 3 as int);
          assert(a.bar(a.foo).unboxed() == 3 as int);
      }

  - decl: |-
      type T = Long
    init: |-
      foo = new Long(4 as long);
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.unboxed() == 4 as long);
          assert(a.bar(a.foo).unboxed() == 4 as long);
      }

  - decl: |-
      type T = Float
    init: |-
      foo = new Float(0.1 as float);
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.unboxed() == 0.1 as float);
          assert(a.bar(a.foo).unboxed() == 0.1 as float);
      }

  - decl: |-
      type T = Double
    init: |-
      foo = new Double(0.1 as double);
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.unboxed() == 0.1 as double);
          assert(a.bar(a.foo).unboxed() == 0.1 as double);
      }

  - decl: |-
      type T = Number
    init: |-
      foo = new Number(0.1 as number);
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.unboxed() == 0.1 as number);
          assert(a.bar(a.foo).unboxed() == 0.1 as number);
      }

  - decl: |-
      type T = Char
    init: |-
      foo = new Char(c'b');
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.unboxed() == c'b');
          assert(a.bar(a.foo).unboxed() == c'b');
      }

  - decl: |-
      type T = string
    init: |-
      foo = "some string";
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == "some string");
          assert(a.bar(a.foo) == "some string");
      }

  - decl: |-
      type T = String
    init: |-
      foo = new String("some string");
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == "some string");
          assert(a.bar(a.foo) == "some string");
      }

  - decl: |-
      type T = Boolean
    init: |-
      foo = new Boolean(false);
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.unboxed() == false);
          assert(a.bar(a.foo).unboxed() == false);
      }

    # Custom
  - decl: |-
      type T = int[]
    init: |-
      foo = [1, -2];
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.length == 2);
          assert(a.foo[0] == 1);
          assert(a.foo[1] == -2);
          let c = a.bar(a.foo);
          assert(a.foo.length == c.length);
          assert(a.foo[0] == c[0]);
          assert(a.foo[1] == c[1]);
      }

  - decl: |-
      type T = Int[][]
    init: |-
      foo = [[new Int(1), new Int(3)], [new Int(-2)]];
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo.length == 2);
          assert(a.foo[0].length == 2);
          assert(a.foo[1].length == 1);
          assert(a.foo[0][0].unboxed() == 1);
          assert(a.foo[0][1].unboxed() == 3);
          assert(a.foo[1][0].unboxed() == -2);
          let c = a.bar(a.foo);
          assert(a.foo.length == c.length);
          assert(a.foo[0].length == c[0].length);
          assert(a.foo[1].length == c[1].length);
          assert(a.foo[0][0].unboxed() == c[0][0].unboxed());
          assert(a.foo[0][1].unboxed() == c[0][1].unboxed());
          assert(a.foo[1][0].unboxed() == c[1][0].unboxed());
      }

  - decl: |-
      enum Colors {Red, Blue=3}
      type T = Colors
    init: |-
      foo = Colors.Blue;
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo == Colors.Blue);
          assert(a.bar(a.foo) == Colors.Blue);
      }

  - decl: |-
      type T = [string, number]
    init: |-
      foo = ["str", 1.4];
    check: |-
      function main() {
          let a: A = new A();
          assert(a.foo instanceof T);
          assert(a.foo[0] == "str");
          assert(a.foo[1] == 1.4);
          let b = a.bar(a.foo);
          assert(a == b)
          assert(a.foo[0] == b[0]);
          assert(a.foo[1] == b[1]);
      }
