# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # Primitives
  - decl: |-
      type T = byte
    check: |-
      function main() {
          let a: T = 0x80 as byte; // -128
          assert(foo(a) == 0x80 as byte);
      }

  - decl: |-
      type T = short
    check: |-
      function main() {
          let a: T = 0x7FFF as short; // 32767
          assert(foo(a) == 0x7FFF as short);
      }

  - decl: |-
      type T = int
    check: |-
      function main() {
          let a: T = 127 as int;
          assert(foo(a) == 127 as int);
      }

  - decl: |-
      type T = long
    check: |-
      function main() {
         let a: T = 127 as long;
         assert(foo(a) == 127 as long);
      }

  - decl: |-
      type T = float
    check: |-
      function main() {
          let a: T = -0.0 as float;
          assert(foo(a) == -0.0 as float);
      }

  - decl: |-
      type T = double
    check: |-
      function main() {
          let a: T = -0.0 as double;
          assert(foo(a) == -0.0 as double); // double is an alias to number
      }

  - decl: |-
      type T = number
    check: |-
      function main() {
          let a: T = -0.0 as number;
          assert(foo(a) == -0.0 as number);
      }

  - decl: |-
      type T = char
    check: |-
      function main() {
          let a: T = c'a';
          assert(foo(a) == c'a');
      }

  - decl: |-
      type T = boolean
    check: |-
      function main() {
          let a: T = true;
          assert(foo(a) == true);
      }

  # Boxed
  - decl: |-
      type T = Byte
    check: |-
      function main() {
          let a: T = new Byte(0x7F as byte);
          assert(foo(a).unboxed() == 0x7F as byte);
      }

  - decl: |-
      type T = Short
    check: |-
      function main() {
          let a: T = new Short(2 as short);
          assert(foo(a).unboxed() == 2 as short);
      }

  - decl: |-
      type T = Int
    check: |-
      function main() {
          let a: T = new Int(3 as int);
          assert(foo(a).unboxed() == 3 as int);
      }

  - decl: |-
      type T = Long
    check: |-
      function main() {
          let a: T = new Long(4 as long);
          assert(foo(a).unboxed() == 4 as long);
      }

  - decl: |-
      type T = Float
    check: |-
      function main() {
          let a: T = new Float(0.1 as float);
          assert(foo(a).unboxed() == 0.1 as float);
      }

  - decl: |-
      type T = Double
    check: |-
      function main() {
          let a: T = new Double(0.1 as double);
          assert(foo(a).unboxed() == 0.1 as double); // Double is an alias to Number
      }

  - decl: |-
      type T = Number
    check: |-
      function main() {
          let a: T = new Number(0.1 as number);
          assert(foo(a).unboxed() == 0.1 as number);
      }

  - decl: |-
      type T = Char
    check: |-
      function main() {
          let a: T = new Char(c'b');
          assert(foo(a).unboxed() == c'b');
      }

  - decl: |-
      type T = string
    check: |-
      function main() {
          let a: T = "some string";
          assert(foo(a) == "some string"); // string is an alias to String
      }

  - decl: |-
      type T = String
    check: |-
      function main() {
          let a: T = new String("some string");
          assert(foo(a) == "some string");
      }

  - decl: |-
      type T = Boolean
    check: |-
      function main() {
          let a: T = new Boolean(false);
          assert(foo(a).unboxed() == false);
      }

    # Custom
  - decl: |-
      type T = int[]
    check: |-
      function main() {
          let a: T = [1, -2];
          let b = foo(a);
          assert(a.length == b.length);
          assert(a[0] == b[0]);
          assert(a[1] == b[1]);
      }

  - decl: |-
      type T = Int[][]
    check: |-
      function main() {
          let a: T = [[new Int(1)], [new Int(-2)]];
          let b = foo(a);
          assert(a.length == b.length);
          assert(a[0].length == b[0].length);
          assert(a[1].length == b[1].length);
          assert(a[0][0].unboxed() == b[0][0].unboxed());
          assert(a[1][0].unboxed() == b[1][0].unboxed());
      }

  - decl: |-
      enum Colors {Red, Blue=3}
      type T = Colors
    check: |-
      function main() {
          let a: T = Colors.Blue;
          assert(foo(a) == Colors.Blue);
      }

  - decl: |-
        type T = [string, number]
    check: |-
      function main() {
          let a: T = ["str", 1.4];
          let b = foo(a);
          assert(b instanceof T)
          assert(a == b)
      }
