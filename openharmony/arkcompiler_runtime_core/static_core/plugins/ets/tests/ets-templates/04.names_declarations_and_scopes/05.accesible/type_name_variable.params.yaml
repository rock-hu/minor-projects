# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # Primitives
  - decl: |-
        type T = byte
    check: |-
        function main() {
            let a: T = 0x80 as byte; // -128
            assert(foo(a) == 1);
        }

  - decl: |-
        type T = short
    check: |-
        function main() {
            let a: T = 0x7FFF as short; // 32767
            assert(foo(a) == 2);
        }

  - decl: |-
        type T = int
    check: |-
        function main() {
            let a: T = 127 as int;
            assert(foo(a) == 3);
        }

  - decl: |-
        type T = long
    check: |-
        function main() {
            let a: T = 127 as long;
            assert(foo(a) == 4);
        }

  - decl: |-
        type T = float
    check: |-
        function main() {
            let a: T = -0.0 as float;
            assert(foo(a) == 5);
        }

  - decl: |-
        type T = double
    check: |-
        function main() {
            let a: T = -0.0 as double;
            assert(foo(a) == 6); // double is an alias to number
        }

  - decl: |-
        type T = number
    check: |-
        function main() {
            let a: T = -0.0 as number;
            assert(foo(a) == 6);
        }

  - decl: |-
        type T = char
    check: |-
        function main() {
            let a: T = c'a';
            assert(foo(a) == 7);
        }

  - decl: |-
        type T = boolean
    check: |-
        function main() {
            let a: T = true;
            assert(foo(a) == 8);
        }

  # Boxed
  - decl: |-
        type T = Byte
    check: |-
        function main() {
            let a: T = new Byte(0x7F as byte);
            assert(foo(a) == 11);
        }

  - decl: |-
        type T = Short
    check: |-
        function main() {
            let a: T = new Short(2 as short);
            assert(foo(a) == 12);
        }

  - decl: |-
        type T = Int
    check: |-
        function main() {
            let a: T = new Int(3 as int);
            assert(foo(a) == 13);
        }

  - decl: |-
        type T = Long
    check: |-
        function main() {
            let a: T = new Long(4 as long);
            assert(foo(a) == 14);
        }

  - decl: |-
        type T = Float
    check: |-
        function main() {
            let a: T = new Float(0.1 as float);
            assert(foo(a) == 15);
        }

  - decl: |-
        type T = Double
    check: |-
        function main() {
            let a: T = new Double(0.1 as double);
            assert(foo(a) == 16); // Double is an alias to Number
        }

  - decl: |-
        type T = Number
    check: |-
        function main() {
            let a: T = new Number(0.1 as number);
            assert(foo(a) == 16);
        }

  - decl: |-
        type T = Char
    check: |-
        function main() {
            let a: T = new Char(c'b');
            assert(foo(a) == 17);
        }

  - decl: |-
        type T = string
    check: |-
        function main() {
            let a: T = "some string";
            assert(foo(a) == 18); // string is an alias to String
        }

  - decl: |-
        type T = String
    check: |-
        function main() {
            let a: T = new String("some string");
            assert(foo(a) == 18);
        }

  - decl: |-
        type T = Boolean
    check: |-
        function main() {
            let a: T = new Boolean(false);
            assert(foo(a) == 19);
        }

    # Custom
  - decl: |-
        type T = int[]
    check: |-
        function main() {
            let a: T = [1, -2];
            assert(foo(a) == 21);
        }

  - decl: |-
        type T = Int[][]
    check: |-
        function main() {
            let a: T = [[new Int(1)], [new Int(-2)]];
            assert(foo(a) == 22);
        }

  - check: |-
        function main() {
            let a: TPL = [1.4, "str"];
            assert(foo(a) == 24);
        }
