# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: |-
      let checked = false;
      {
          type A = Boolean;
          let a: A = new Boolean(true);
          checked = a.unboxed();
      }

      function main() {
          assertTrue(checked);
      }

  - decl: |-
      function main() {
          type A = int;
          let a: A = -3;
          assertEQ(a, -3);
      }

  - decl: |-
      function main() {
          type B = Int;
          for(let i: int = 0; i<1; i++) {
              type B = String;
              let a: B = "";
              assertTrue( a instanceof String)
          }
          let a: B = new Int();
          assertTrue( a instanceof Int)
      }

  - decl: |-
      function foo(i: int): int {
          type A = int;
          let a: A = i + 1;
          return a;
      }
      function main() {
          assertEQ(foo(3), 4);
      }

  - decl: |-
      function main() {
          try {
              type B = String;
              let a: B = "";
              assertTrue(a instanceof String)
          } catch (e) {
              assertTrue(false)
          }
      }

  - decl: |-
      function main() {
          for(let i: int = 0; i<1; i++) {
              type B = String;
              let a: B = "";
              assertTrue(a instanceof String)
          }
      }

  - decl: |-
      function main() {
          type A = int;
          type B = string;
          for(let i: A = 0; i<1; i++) {
              let a: B = "";
              assertTrue(a instanceof string)
          }
      }

  - decl: |-
      function main() {
          while(1) {
              type B = Float;
              let a: B = new Float();
              assertTrue(a instanceof Float)
              break;
          }
      }

  - decl: |-
      function main() {
          do {
              type B = Float;
              let a: B = new Float();
              assertTrue(a instanceof B)
          } while(0)
      }

  - decl: |-
      function main() {
          type B = Int;
          do {
              type B = String;
              let a: B = "";
              assertTrue(a instanceof String)
          } while(0)
          let a: B = new Int();
          assertTrue(a instanceof Int)
      }

  - decl: |-
      function main() {
          switch (1) {
              case 1:
                  type B = String;
                  let a: B = "";
                  assertTrue(a instanceof String);
                  break;
              default:
                  assertTrue(false);
          }
      }

  - decl: |-
      function main() {
          type B = Int;
          switch (2) {
              case 1:
                  type B = String;
                  assertTrue(false)
                  break;
              case 2:
                  let a: B = "";
                  assertTrue(a instanceof String)
                  break;
              default:
                  assertTrue(false);
          }
          let q: B = 0;
          assertTrue(q instanceof Int)
      }

  - decl: |-
      function main() {
          type B = Int;
          switch (2) {
              case 1: {
                  type B = String;
                  assertTrue(false)
                  break;
                }
              case 2: {
                  let a: B = 1;
                  assertTrue(a instanceof Int)
                  break;
                }
              default:
                  assertTrue(false);
          }
      }
