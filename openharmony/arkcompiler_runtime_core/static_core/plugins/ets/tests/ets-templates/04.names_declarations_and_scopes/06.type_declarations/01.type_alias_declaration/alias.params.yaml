# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # primitives
    - defs: |-
          type Rating = double
      use: |-
          let v: Rating = 1.1
          let ok = (v as double) == 1.1

    # boxed refs
    - defs: |-
          type Burden = Load
          type Load = Mass
          type Mass = Weight
          type Weight = Double
      use: |-
          let v: Burden = new Double(1.1)
          let ok = v.unboxed() == 1.1

    - defs: |-
          type Weight = Double|null
          type Burden = Weight
      use: |-
          let v1: Burden = null
          let v2: Burden = 42.0
          let ok = v1 == null && v2.unboxed() == 42.0

    # arrays
    - defs: |-
          type IntArray = int[]
      use: |-
          let v: IntArray = [1]
          let ok = v.length == 1

    - defs: |-
          type LongArray = Long[];
      use: |-
          let v: LongArray[] = new Long[1][1];
          let ok = v.length == 1;

    - defs: |-
          type Matrix3D = Byte[][][];
      use: |-
          let v: Matrix3D = new Byte[1][1][1];
          let ok = v.length == 1;

    - defs: |-
          enum Axis { X, Y, Z };
          type Fields = Axis[];
      use: |-
          let v: Fields = new Axis[6];
          let ok = v.length == 6;

    - defs: |-
          type A = Error[]
          type B = A
          type C = B
      use: |-
          let v: C = [new Error()]
          let ok = v.length == 1

    - defs: |-
          type NumArray1 = Number[]
          type NumArray2 = NumArray1[]
      use: |-
          let v: NumArray2[] = new Number[1][1][1]
          let ok = v.length == 1

    - defs: |-
          type IAN = int[]|null
          type IAN2 = IAN[]|null
      use: |-
          let v1: IAN2 = null
          let v2: IAN2 = [null, null]
          let v3: IAN2 = [[1, 2], [3, 4]]
          let v4: IAN2 = [null, [1, 2, 3]]
          let ok = v1 == null &&
              v2[0] == null && v2[1] == null &&
              v3[0].length == 2 && v3[1].length == 2 && v3[1][1] == 4 &&
              v4.length == 2 && v4[0] == null && v4[1].length == 3

    # functions
    - defs: |-
          type Foo = (p: int) => int
      use: |-
          let v: Foo = (p: int): int => { return p + 1 }
          let ok = v(42) == 43

    - defs: |-
          type b = boolean
          type BooFunc = (p: b) => b
          type NullableBooFunc = BooFunc|null
      use: |-
          let v1: NullableBooFunc = null
          let v2: NullableBooFunc = (p: b): b => { return !p }
          let ok = v1 == null && v2!(false)

    - defs: |-
          function foo(p: long): Long {
              return new Long(p);
          }
          type Func = (p: long) => Long
      use: |-
          let v: Func = foo
          let ok = v(-9223372036854775808 as long).unboxed() == Long.MIN_VALUE

    # classes
    - defs: |-
          class X {}
          type X2 = X
          type X3 = X2
      use: |-
          let v: X2 = new X2()
          let ok = v instanceof X && v instanceof X2 && v instanceof X3

    # interfaces
    - defs: |-
          interface I {}
          class A implements I {}
          type Intf = I
      use: |-
          let v: Intf = new A()
          let ok = v instanceof I && v instanceof Intf && v instanceof A

    # unions
    - defs: |-
          type N = number|undefined
          type SN = N|string|null
      use: |-
          let v1: SN = undefined
          let v2: SN = 42.0
          let v3: SN = 'abc'
          let v4: SN = null
          let ok = v1 === undefined &&
              v2 as Number == 42.0 &&
              v3 as String == 'abc' &&
              v4 === null

    - defs: |-
          type N = number|null|undefined
          type AN = number[]|N|null|undefined
      use: |-
          let v1: AN = null
          let v2: AN = undefined
          let v3: AN = 42.0
          let v4: AN = [1.0, 2.0, 3.0]
          let ok = v1 === null &&
              v2 === undefined &&
              v3 as Number == 42.0 &&
              (v4 as number[]).length == 3

    # tuples
    - defs: |-
          type TT = [number, string]
          type TTT = [TT, TT]
      use: |-
          let v1: TT = [42.0, 'abc']
          let v2: TT = [43.0, 'xyz']
          let v3: TTT = [v1, v2]
          let ok = v3[0][0] == 42.0 && v3[0][1] == 'abc' &&
              v3[1][0] == 43.0 && v3[1][1] == 'xyz'

    - defs: |-
          type NN = number|null|undefined
          type SN = string|null|undefined
          type TT = [NN, SN]|null|undefined
      use: |-
          let v1: TT = null
          let v2: TT = undefined
          let v3: TT = [null, undefined]
          let v4: TT = [null, 'abc']
          let v5: TT = [42.0, undefined]
          let v6: TT = [43.0, 'xyz']
          let ok = v1 == null && v2 == undefined && v3[0] == null && v3[1] == null && v4[0] == null &&
              v5[1] == null && v6[0] == 43.0 && v6[1] == 'xyz'

    # recursive cases
    - defs: |-
          type NestedNumArray = number | NestedNumArray[]
      use: |-
          let v1: NestedNumArray = 1.0
          let v2: NestedNumArray = [1.0, 2.0, 3.0] as NestedNumArray[]
          let v3: NestedNumArray = [1.0, [2.0, 3.0] as NestedNumArray[], 4.0] as NestedNumArray[]
          let v4: NestedNumArray = [[1.0] as NestedNumArray[]] as NestedNumArray[]
          let v5: NestedNumArray = [1.0, [[[2.0] as NestedNumArray[]]]] as NestedNumArray[]
          let ok = v1 == 1.0 &&
              (v2[0] as number)== 1.0 && (v2[1] as number) == 2.0 && (v2[2] as number) == 3.0 &&
              (v3[0] as number) == 1.0 && (v3[1] as NestedNumArray[])[0] == 2.0 && (v3[1] as NestedNumArray[])[1] == 3.0 && (v3[2] as number) == 4.0 &&
              ((v4[0] as NestedNumArray[])[0] as number) == 1.0 &&
              (v5[0] as number == 1.0) && ((((v5[1] as NestedNumArray[])[0] as NestedNumArray[])[0] as NestedNumArray[])[0] as number) == 2.0

    - defs: |-
          type Foo = (p: string) => string
          type NestedFunc = NestedFunc[] | Foo
      use: |-
          let v1: NestedFunc = []
          let v2: NestedFunc = (p: string): string => { return p + p }
          let v3: NestedFunc = [v1, v2, (p: string): string => { return p + p }]
            let ok = v3.length == 3 &&
                ((v3 as NestedFunc[])[0] as NestedFunc[]).length == 0 &&
                ((v3 as NestedFunc[])[1] as Foo)('abc') == 'abcabc' &&
                ((v3 as NestedFunc[])[2] as Foo)('xyz') == 'xyzxyz'
