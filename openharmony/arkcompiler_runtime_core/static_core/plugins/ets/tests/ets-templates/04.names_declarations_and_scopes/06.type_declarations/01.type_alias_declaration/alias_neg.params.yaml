# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - defs: |-
          type 123 = int;

    - defs: |-
          type .X = Long;

    - defs: |-
          type null = byte;

    - defs: |-
          type this = Object;

    - defs: |-
          type int = Int;

    - defs: |-
          interface Weight {}
          class Body implements Weight {}
          type Weight = Double;

    - defs: |-
          type self = this;

    - defs: |-
          class A<T, V> {}
          type Box<T> = A<Boolean, T>;
      use: |-
          let v: Box<Int> = new A<Int, Int>();

    - defs: |-
          type E = E

    - defs: |-
          type E = string | E

    - defs: |-
          type A<T> = Array<A>

    - defs: |-
          type A<T> = A<T>

    - defs: |-
          type A = C
          type B = A
          type C = B

    # recursive cases
    - defs: |-
          type NestedTup = [boolean, NestedTup|undefined, string]
      use: |-
          let v1: NestedTup = [true, [true, undefined, 'xyz'], 'abc']

    - defs: |-
          type RU = number | string | RU
      use: |-
          let v1: RU = 1.0

    - defs: |-
          type RF = (p: RF) => RF
      use: |-
          let v1: RF = (p: RF): RF => { return RF }

    - defs: |-
        { class ClassNestedInBlock{} }        
        type TAlias = ClassNestedInBlock;

    - defs: |-
          enum Axis { X, Y, Z };
          type Fields = Axis[];
      use: |-
          let v: Fields = new Axis[6];
          let ok = v.length == 6;
