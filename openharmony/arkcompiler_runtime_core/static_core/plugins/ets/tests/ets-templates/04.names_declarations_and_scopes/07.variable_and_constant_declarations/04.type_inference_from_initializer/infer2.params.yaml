# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          let a = null
      use: |-
          assertTrue(typeof a == "object" && a instanceof null)

    - decl: |-
          let a = undefined
      use: |-
          assertTrue(typeof a == "undefined" && a instanceof undefined)

    - decl: |-
          let arr = [null, undefined]
          function foo(p: (null|undefined)[]): int { return 1 }
      use: |-
          assertTrue(typeof arr == "object" && arr instanceof (null|undefined)[])
          assertEQ(foo(arr), 1)

    - decl: |-
          let cond = true
          function foo(p: int): int { return 1 }
          function foo(p: number): int { return 2 }
      use: |-
          let b = cond ? 1 : 2  // typeof b is int
          assertEQ(typeof b, "number")
          assertEQ(foo(b), 1)

    - decl: |-
          let cond = true
          function foo(p: int): int { return 1 }
          function foo(p: number): int { return 2 }
      use: |-
          let b = cond ? 3 : 3.14  // type of b is double
          assertEQ(typeof b, "number")
          assertEQ(foo(b), 2)

    - decl: |-
          let cond = true
          function foo(p: string): int { return 1 }
          function foo(p: "one"|"two"|number): int { return 2 }
      use: |-
          let b = cond ? "one" : "two"  // type of b is string
          assertEQ(typeof b, "string")
          assertEQ(foo(b), 1)

    - decl: |-
          let cond = true
          function foo(p: Int): int { return 1 }
          function foo(p: string): int { return 2 }
          function foo(p: Int|string): int { return 3 }
      use: |-
          let b = cond ? 1 : "one"  // type of b is Int|string
          assertTrue(b instanceof Int|string)
          assertEQ(foo(b), 3)

    - decl: |-
          let cond = true
          function foo(p: Int): int { return 1 }
          function foo(p: int): int { return 2 }
          function foo(p: number): int { return 3 }
      use: |-
          const b = cond ? 1 : 2  // type of b is int
          assertEQ(typeof b, "number")
          assertEQ(foo(b), 2)

    - decl: |-
          let cond = true
          function foo(p: Int): int { return 1 }
          function foo(p: int): int { return 2 }
          function foo(p: number): int { return 3 }
      use: |-
          const b = cond ? 3 : 3.14  // type of b is double
          assertEQ(typeof b, "number")
          assertEQ(foo(b), 3)

    - decl: |-
          let cond = true
          function foo(p: string): int { return 1 }
      use: |-
          const b = cond ? "one" : "two"  // type of b is "one" | "two"
          assertTrue(b instanceof "one"|"two")
          assertEQ(foo(b), 1)

    - decl: |-
          let cond = true
          function foo(p: Int): int { return 1 }
          function foo(p: int): int { return 2 }
          function foo(p: "one"): int { return 3 }
          function foo(p: Int|"one"): int { return 4 }
      use: |-
          const b = cond ? 1 : "one"  // type of b is "one" | Int
          assertTrue(b instanceof Int|"one")
          assertEQ(foo(b), 4)

    - tags: 'compile-only, negative'
      use: |-
          let a = { name: "John" }  // CTE expected

    - tags: 'negative'
      decl: |- 
          let arr = new (Object|undefined)[1];  // inferred array of Error|undefined
      use: |-
          assertEQ(arr[0], new Object[1])

    - decl: let myV = null
      use: |-
          assertEQ(typeof myV, "object")

    - decl: let myV = new (Object|undefined)[1]
      use: |-
          assertTrue(myV instanceof Object)

    - decl: let myV = new (null|undefined)[1]
      use: |-
          assertEQ(typeof myV, "object")

    - decl: let myV = new (null|undefined)[1]
      use: |-
          let myVloc = new (null|undefined)[1]
          assertTrue(myVloc instanceof Object)

    - decl: const myC = "1"
      use: |-
        let myC = "1"
        assertTrue(myC instanceof "1")
