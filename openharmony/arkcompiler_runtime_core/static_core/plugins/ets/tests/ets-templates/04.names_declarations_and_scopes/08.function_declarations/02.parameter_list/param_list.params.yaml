# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # List of valid function declarations
function_decls:
    # value type params, void return
    - decl: |-
          function foo(a: long, b: double, c: char): void {}
      call: |-
          foo(42, 1.5, c'A');

    # value type array params, void return
    - decl: |-
          function foo(a: long[], b: double[], c: char[]): void {}
      call: |-
          let a: long[] = new long[0]
          let b: double[] = new double[0]
          let c: char[] = new char[0]
          foo(a, b, c);

    # function param, void return
    - decl: |-
          function bar() {}
          function foo(a: () => void): void {}
      call: |-
          foo(bar);

    # reference type param, void return
    - decl: |-
          function foo(a: Long) {}
      call: |-
          foo(new Long())

    - decl: |-
          function foo(a: Object|null) {}
      call: |-
          foo(null)

    # reference type array param, void return
    - decl: |-
          function foo(a: Long[]) {}
      call: |-
          foo(new Long[0])

    - decl: |-
          function foo(a: (Object|null)[]) {}
      call: |-
          let arr: (Object|null)[] = new (Object|null)[1]
          arr[0] = null
          foo(arr)

    # enum param, void return
    - decl: |-
          enum Color { Red, Green, Blue }
          function foo(a: Color): void {}
      call: |-
          foo(Color.Red);

    # enum array param, void return
    - decl: |-
          enum Color { Red, Green, Blue }
          function foo(a: Color[]) {}
      call: |-
          let arr: Color[] =  new Color[1]
          arr[0] = Color.Red
          foo(arr);

    # T param, T return
    - decl: |-
          function foo<T>(a: T): T {
              return a;
          }
      call: |-
          let v: Long = foo<Long>(new Long())
          assert v instanceof Long;

    - decl: |-
          function foo<T, U, V>(a: T, b: U, c: V): V {
              return c;
          }
      call: |-
          let v: Object|null = foo<Long, Boolean, Object|null>(new Long(), new Boolean(true), new Object())
          assert v instanceof Object;

    # T array param, T array return
    - decl: |-
          function foo<T>(a: T[]): T[] {
              return a;
          }
      call: |-
          let arr: Boolean[] = foo<Boolean>(new Boolean[0])
          assert arr instanceof Boolean[] && arr.length == 0;

    # mixed type params
    - decl: |-
          function foo<T>(a: byte, b: Short|null, c: long, ...d: T[]): T {
              return d[0];
          }
      call: |-
          let v: Byte = foo<Byte>(1 as byte, null, Long.MIN_VALUE, new Byte(1 as byte), new Byte(2 as byte))
          assert v instanceof Byte && v.unboxed() == 1;
