# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # readonly parameter along with the optional key
    - decl: |-
        function foo(array?: readonly number[]) {
            assertEQ( array, undefined )
        }
      check: |-
        foo()

    - decl: |-
        function foo(array?: readonly Array<number>) {
            assertEQ( array, undefined )
        }
      check: |-
        foo()

    - decl: |-
        function foo(array?: readonly [string, Number]) {
            assertEQ( array, undefined )
        }
      check: |-
        foo()

    # Mixed readonly and writable parameters
    - decl: |-
        function foo(a: int[], b: readonly number[], c: string): string {
            a[0] += a[0];
            c += c;
            return a[0] + c + b[0];
        }
      check: |-
        assertTrue(foo([3], [4.5], "str") == "6strstr4.5");

    - decl: |-
        function foo(a: int[], b: readonly Array<number>, c: string): string {
            a[0] += a[0];
            c += c;
            return a[0] + c + b[0];
        }
      check: |-
        let a = new Array<number>(1);
        a[0] = 4.5;
        assertTrue(foo([3], a, "str") == "6strstr4.5");

  # array
    - decl: |-
        function foo(i: readonly int[]) {
            return 1;
        }
      check: |-
        let rw: int[] = [1, 2];
        assertTrue(foo(rw) == 1);

    - decl: |-
        function foo(i: readonly Array<int>) {
            return 1;
        }
      check: |-
        let rw: Array<int> = new Array<int>(1);
        assertTrue(foo(rw) == 1);

  # tuple
    - decl: |-
        type TPL = [number, string]
        function foo(i: readonly TPL) {
            return 1;
        }
      check: |-
        let rw: TPL = [1.1, "str"];
        assertTrue(foo(rw) == 1);


  # readonly decl as function parameter
    - decl: |-
        interface I {
            foo(array: readonly int[]) {}
        }
        class A {
            static foo(array: readonly int[]) {}
        }
        class B {
            static foo(array: readonly int[]) {}
        }
        function foo(i: int, array?: readonly Array<number>) { }
        function foo(i: int, array?: readonly number[]) { }
      check: |-