# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          enum Colors { Red, Green }
          function foo(a: readonly Colors) {}

    - decl: |-
          class A {}
          function foo(a: readonly A) {}

    - decl: |-
          abstract class AC {}
          function foo(a: readonly AC) {}

    - decl: |-
          interface I {}
          function foo(a: readonly I) {}

    - decl: |-
          let map: Record<string, number> = {
              "John": 25
          }
          function foo(a: readonly map) {}

    - decl: |-
          type f = (p: number) => number[]
          function foo(a: readonly f) {}

  # set readonly parameter with default value in front of mandatory parameter
    - decl: |-
        type TPL = [string, int];
        function foo(array?: readonly TPL, i: int) { }

  # set readonly parameter with default value in front of mandatory parameter
    - decl: |-
        function foo(array?: readonly number[] = [1.1, 2.2], i: int) { }

    - decl: |-
        function foo(array?: readonly Array<number> = null, i: int) { }

    - decl: |-
        type TPL = [string, int];
        function foo(array?: readonly TPL = ["str", 1], i: int) { }

  # edit readonly parameter configured with the default value
    - decl: |-
        function foo(array?: readonly number[] = [1.1, 2.2]) {
            array[0] = array[1];
        }

    - decl: |-
        function foo(array?: readonly Array<number> = new Array<number>(2)) {
            array[0] = array[1];
        }

    - decl: |-
        type TPL = [string, int];
        function foo(array?: readonly TPL = ["str", 1]) {
            array[0] = "str2";
        }

  # edit readonly parameter, mixed readonly and writable parameters
    - decl: |-
        type TPL = [string, boolean];
        function foo(a: readonly int[], b: Array<number>, c: TPL) {
            a[0] = 2;
        }

    - decl: |-
        type TPL = [string, boolean];
        function foo(a: int[], b: readonly Array<number>, c: TPL) {
            b.at(0) = 1.1;
        }

    - decl: |-
        type TPL = [string, boolean];
        function foo(a: int[], b: Array<number>, c: readonly TPL) {
            c[1] = false;
        }

  # function return value not set
    - decl: |-
        function foo(array: readonly number[]) {
            return array;
        }
        let arr: number[] = [1.9, 2.7];
        let arr2: number[] = foo(arr);
        arr[0] = 1;
        assertTrue(arr2[0] == 1);
        assertTrue(arr == arr2);

  # readonly parameter is of predefined type
    - decl: |-
        type tarr = number[];
        function foo(array: readonly tarr): tarr {
            return array;
        }
        let arr: tarr = [1.9, 2.7];
        let arr2: tarr = foo(arr);
        arr[0] = 1;
        assertTrue(arr2[0] == 1);
        assertTrue(arr == arr2);

    - decl: |-
        type tarr = Array<number>;
        function foo(array: readonly tarr): tarr {
            return array;
        }
        let arr: tarr = new Array<number>(2);
        let arr2: tarr = foo(arr);
        arr[0] = 1;
        assertTrue(arr2[0] == 1);
        assertTrue(arr == arr2);

    - decl: |-
        type tarr = [int, number];
        function foo(array: readonly tarr): tarr {
            return array;
        }
        let arr: tarr = [2, 2.7];
        let arr2: tarr = foo(arr);
        arr[0] = 1;
        assertTrue(arr2[0] == 1);
        assertTrue(arr == arr2);
 
  # readonly parameter along with the optional key
    - decl: |-
        function foo(array?: readonly number[]) {
            assertTrue(array[0] == 2)
        }
        foo([2, 3])

    - decl: |-
        function foo(array?: readonly Array<number>) {
            assertTrue(array[0] == 2)
        }
        let arr = new Array<number>(1);
        arr[0] = 2;
        foo(arr)
    
    - decl: |-
        function foo(array?: readonly [string, Number]) {
            assertTrue(array[1].unboxed() == 2.2)
        }
        foo(["str", new Number(2.2)])

  # readonly parameter configured with the default value
    - decl: |-
        function foo(array?: readonly number[] = [1.1, 2.2]) {
            return array;
        }
        let arr: number[] = foo();
        assertTrue(arr.length == 2);
        assertTrue(arr[0] + arr[1] == 3.3);

    - decl: |-
        function foo(array?: readonly Array<number> = new Array<number>(1)) {
            return array;
        }
        let arr = foo();
        assertTrue(arr.length == 1);
        assertTrue(arr[0] == 0 as number);
    
    - decl: |-
        type TPL = [string, number]
        function foo(array?: readonly TPL = ["str", 2]) {
            return array;
        }
        let arr = foo();
        assertTrue(arr[0] == "str");
        assertTrue(arr[1] == 2);

  # multiple readonly values
    - decl: |-
        function foo(a: readonly string[], b: readonly int[]) {
            return b[0]a[0]b[1]a[1];
        }
        assertTrue(foo(["str1", "str2"], [1, 2]) == "1str12str2");

  # multiple readonly values
    - decl: |-
        type TPL = [boolean, string]
        function foo(a: readonly TPL, b: readonly int[]) {
            return a[1]b[1];
        }
        let a: TPL = [true, "str"];
        let b: int[] = [1, 2];
        assertTrue(foo(a, b) == "str2");

    - decl: |-
        type TPL = [boolean, string]
        function foo(a: readonly TPL, b: readonly int[], c: readonly TPL, d: readonly int[]) {
            return a[1]b[1]c[1]d[0];
        }
        let a: TPL = [true, "str"];
        let b: int[] = [1, 2];
        assertTrue(foo(a, b, a, b) == "str2str1");

    - decl: |-
        type TPL = [boolean, string]
        function foo(a: readonly TPL, b: readonly int[], c: readonly Array<number>, d: readonly TPL, e: readonly int[], f: readonly Array<number>) {
            return a[1]b[1]c[1]d[1]e[0]f[0];
        }
        let a: TPL = [true, "str"];
        let b: int[] = [1, 2];
        let c: Array<number> = new Array(2);
        c[0] = 3;
        c[1] = 4;
        assertTrue(foo(a, b, c, a, b, c) == "str24str13");

  # Mixed readonly and writable parameters
    - decl: |-
        function foo(a: int[], b: readonly [int, number], c: string): string {
            a[0] += a[0];
            c += c;
            return a[0] + c + b[0] + b[1];
        }
        let a = new Array<number>(2);
        a[0] = 3;
        a[1] = 4.5;
        assertTrue(foo([3], a, "str") == "6strstr34.5");

  # readonly argument could not be used as read-write.
    # array
    - decl: |-
        foo(i: readonly int[]) {
            return 1;
        }
        foo(i: int[]) {
            return 2;
        }
        function main() {
            let ro: readonly int[] = [1, 2];
            assertTrue(foo(ro) == 1);
        }

  # std:Array, not dependent on the place in code
    - decl: |-
        foo(i: Array<int>) {
            return 1;
        }
        foo(i: readonly Array<int>) {
            return 2;
        }
        function main() {
            let ro: readonly Array<int> = new Array<int>(1);
            assertTrue(foo(ro) == 2);
        }

  # tuple
    - decl: |-
        type TPL = [number, string]
        foo(i: readonly TPL) {
            return 1;
        }
        foo(i: TPL) {
            return 2;
        }
        function main() {
            let ro: readonly TPL = [1.1, "str"];
            assertTrue(foo(ro) == 1);
        }

