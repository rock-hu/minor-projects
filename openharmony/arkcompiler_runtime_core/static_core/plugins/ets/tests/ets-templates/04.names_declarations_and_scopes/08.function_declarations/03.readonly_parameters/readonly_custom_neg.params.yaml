# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          enum Colors { Red, Green }
          function foo(a: readonly Colors) {}

    - decl: |-
          class A {}
          function foo(a: readonly A) {}

    - decl: |-
          abstract class AC {}
          function foo(a: readonly AC) {}

    - decl: |-
          interface I {}
          function foo(a: readonly I) {}

    - decl: |-
          let map: Record<string, number> = {
              "John": 25
          }
          function foo(a: readonly map) {}

    - decl: |-
          type f = (p: number) => number[]
          function foo(a: readonly f) {}

  # set readonly parameter with default value in front of mandatory parameter
    - decl: |-
        function foo(array?: readonly number[], i: int) { }

    - decl: |-
        function foo(array?: readonly Array<number>, i: int) { }

    - decl: |-
        type TPL = [string, int];
        function foo(array?: readonly TPL, i: int) { }

  # set readonly parameter with default value in front of mandatory parameter
    - decl: |-
        function foo(array?: readonly number[] = [1.1, 2.2], i: int) { }

    - decl: |-
        function foo(array?: readonly Array<number> = null, i: int) { }

    - decl: |-
        type TPL = [string, int];
        function foo(array?: readonly TPL = ["str", 1], i: int) { }

    - decl: |-
        interface I {
            foo(array: readonly int[]) {}
        }

    - decl: |-
        class A {
            static foo(array: readonly int[]) {}
        }

    - decl: |-
        class A {
            static foo(array: readonly int[]) {}
        }

  # edit readonly parameter configured with the default value
    - decl: |-
        function foo(array?: readonly number[] = [1.1, 2.2]) {
            array[0] = array[1];
        }

    - decl: |-
        function foo(array?: readonly Array<number> = new Array<number>(2)) {
            array[0] = array[1];
        }

    - decl: |-
        type TPL = [string, int];
        function foo(array?: readonly TPL = ["str", 1]) {
            array[0] = "str2";
        }

  # edit readonly parameter, mixed readonly and writable parameters
    - decl: |-
        type TPL = [string, boolean];
        function foo(a: readonly int[], b: Array<number>, c: TPL) {
            a[0] = 2;
        }

    - decl: |-
        type TPL = [string, boolean];
        function foo(a: int[], b: readonly Array<number>, c: TPL) {
            b.at(0) = 1.1;
        }

    - decl: |-
        type TPL = [string, boolean];
        function foo(a: int[], b: Array<number>, c: readonly TPL) {
            c[1] = false;
        }
