# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
            function foo() {  // infer byte
                return 127 as byte;
            }
      call: |-
            assert(foo() == 127 as byte);

    - decl: |-
            function foo() {  // infer Byte
                return new Byte(127 as byte);
            }
      call: |-
            let b = foo();
            assert(b instanceof Byte);
            assert(b.unboxed() == 127 as byte);

    - decl: |-
            function foo() {  // infer short
                return 2 as short;
            }
      call: |-
            assert(foo() == 2 as short);

    - decl: |-
            function foo() {  // infer Short
                return new Short(2 as short);
            }
      call: |-
            let b = foo();
            assert(b instanceof Short);
            assert(b.unboxed() == 2 as short);

    - decl: |-
            function foo() {  // infer Int
                return new Int(2 as int);
            }
      call: |-
            let b = foo();
            assert(b instanceof Int);
            assert(b.unboxed() == 2 as int);

    - decl: |-
            function foo() {  // infer long
                return 3 as long;
            }
      call: |-
            assert(foo() == 3 as long);

    - decl: |-
            function foo() {  // infer Long
                return new Long(3 as long);
            }
      call: |-
            let b = foo();
            assert(b instanceof Long);
            assert(b.unboxed() == 3 as long);

    - decl: |-
            function foo() {  // infer float
                return 4.2 as float;
            }
      call: |-
            assert(foo() == 4.2 as float);

    - decl: |-
            function foo() {  // infer Float
                return new Float(4.3 as float);
            }
      call: |-
            let b = foo();
            assert(b instanceof Float);
            assert(b.unboxed() == 4.3 as float);

    - decl: |-
            function foo() {  // infer double
                return 5.3 as double;
            }
      call: |-
            assert(foo() == 5.3 as double);

    - decl: |-
            function foo() {  // infer Double
                return new Double(5.4 as double);
            }
      call: |-
            let b = foo();
            assert(b instanceof Double);
            assert(b.unboxed() == 5.4 as double);

    - decl: |-
            function foo() {  // infer Number
                return new Number(6.4 as number);
            }
      call: |-
            let b = foo();
            assert(b instanceof Number);
            assert(b.unboxed() == 6.4 as number);

    - decl: |-
            function foo() {  // infer char
                return c'A';
            }
      call: |-
            assert(foo() == c'A');

    - decl: |-
            function foo() {  // infer Char
                return new Char(c'b');
            }
      call: |-
            let b = foo();
            assert(b instanceof Char);
            assert(b.unboxed() == c'b');

    - decl: |-
            function foo() {  // infer String
                return new String("some str");
            }
      call: |-
            let b = foo();
            assert(b instanceof String);
            assert(b == "some str");

    - decl: |-
            function foo() {  // infer boolean
                return true;
            }
      call: |-
            assert(foo());

    - decl: |-
            function foo() {  // infer Boolean
                return new Boolean(false);
            }
      call: |-
            let b = foo();
            assert(b instanceof Boolean);
            assert(b.unboxed() == false);

    - decl: |-
            function foo() {  // infer null
                return null;
            }
      call: |-
            assert(foo() == null);

    - decl: |-
            function foo() {  // infer undefined
                return undefined;
            }
      call: |-
            assert(foo() == undefined);

    - decl: |-
            function foo() {  // infer undefined|null
                let i: undefined|null;
                return i;
            }
      call: |-
            assert(foo() == undefined);

    - decl: |-
            function foo() {  // infer undefined|null
                let i: undefined|null;
                return i;
            }
      call: |-
            assert(foo() == undefined);

    - decl: |-
            function foo() {  // infer union number|undefined|null
                let i: undefined|null|number = 1.1 as number;
                return i;
            }
      call: |-
            let i: number = foo();
            assert(i == 1.1 as number);

    - decl: |-
            abstract class AC {  // infer abstract class
                abstract foo(): int;
            }
            class A extends AC {
                foo(): int { return 1 }
            }
            class B extends AC {
                foo(): int { return 2 }
            }
  
            function foo(i: boolean) {
                if(i)
                    return new A();
                return new B();
            }
      call: |-
            let i = foo(true);
            assert(i instanceof A);
            assert(!(i instanceof B));
            let j = foo(false);
            assert(j instanceof B);
            assert(!(j instanceof A));

    - decl: |-
            interface I {} // infer interface
            interface II extends I {}
            interface III extends I {}
            class A implements II {}
            class B implements III {}
  
            function foo(i: boolean) {
                if(i)
                    return new A();
                return new B();
            }
      call: |-
            let i = foo(true);
            assert(i instanceof II);
            assert(!(i instanceof III));
            let j = foo(false);
            assert(j instanceof III);
            assert(!(j instanceof II));

    - decl: |-
            function foo() {  // infer std::Array
                return new Array<int>(2);
            }
      call: |-
            assert(foo() instanceof Array);

    - decl: |-
            enum ENM {Red, Blue}  // infer enum
            function foo() {
                return ENM.Blue
            }
      call: |-
            let i: ENM = foo()
            assert(i == ENM.Blue);

    - decl: |-
            type TPL = [number, string]  // infer tuple
            function foo() {
                let i: TPL = [1.1, "some str"]
                return i
            }
      call: |-
            let i = foo()
            assert(i instanceof TPL);

    - decl: |-
          type A = Byte  // infer custom type
          function foo() {
              let i: A = new Byte(2 as byte);
              return i;
          }
      call: |-
          let i = foo();
          assert(i instanceof Byte);
          assert(i.unboxed() == 2 as byte);

    - decl: |-
          const cstr = "some string"  // infer string/char
          function foo(i: boolean) {
              if(i) return cstr
              return c'A'
          }
      call: |-
          assert(foo(true) == cstr);
          assert(foo(false) == c'A');

    - decl: |-
          const cstr = "some string"  // infer boxing conversion + union Number|String|undefined|null
          function foo(i: int) {
              switch(i) {
                  case 1: return 1 as byte;
                  case 2: return 2 as short;
                  case 3: return 3 as int;
                  case 4: return 4 as long;
                  case 5: return 5 as float;
                  case 6: return 6 as number;
                  case 7: return 'B';
                  default: return 0;
              }
          }
      call: |-
          assert(foo(1) == 1)
          assert(foo(2) == 2)
          assert(foo(3) == 3)
          assert(foo(4) == 4)
          assert(foo(5) == 5)
          assert(foo(6) == 6)
          assert(foo(7) == "B")

    - decl: |-
          function foo(i: int) {  // infer string of different size
              switch(i) {
                  case 1: return "\u{D800}\u{D801}"; //surrogate
                  case 2: return "\u{A123}"; // utf-16
                  case 3: return "\u{00000069}"; // utf-32
                  default: return "utf-8";
              }
          }
      call: |-
          assert(foo(1) == "\u{D800}\u{D801}")
          assert(foo(2) == "\u{A123}")
          assert(foo(3) == "\u{00000069}")
