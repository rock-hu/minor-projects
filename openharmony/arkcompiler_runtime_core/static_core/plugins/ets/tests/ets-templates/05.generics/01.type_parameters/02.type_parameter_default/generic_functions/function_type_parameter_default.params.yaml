# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: |-
      function foo<T = SomeType>(): Consumer<T> { return new Consumer<T>() }
    use: |-
      let w = foo()
      w.accept(new SomeType())
  - decl: |-
      function foo<T = SomeType, U = OtherType>(): BiConsumer<T, U> { return new BiConsumer<T, U>() }
    use: |-
      let w = foo()
      w.accept(new SomeType(), new OtherType())
  - decl: |-
      function foo<T = SomeType, U = OtherType>(): BiConsumer<T, U> { return new BiConsumer<T, U>() }
    use: |-
      let w = foo<OtherType, SomeType>()
      w.accept(new OtherType(), new SomeType())
  - decl: |-
      function foo<T, U = SomeType>(): BiConsumer<T, U> { return new BiConsumer<T, U>() }
    use: |-
      let w = foo<SomeType>()
      w.accept(new SomeType(), new SomeType())
  - decl: |-
      function foo<T, U = T[]>(): BiConsumer<T, U> { return new BiConsumer<T, U>() }
    use: |-
      let w = foo<SomeType>()
      w.accept(new SomeType(), [new SomeType()])
  - decl: |-
      function foo<T = "string">(): Consumer<T> { return new Consumer<T>() }
    use: |-
      let w = foo()
      w.accept("string")
  - decl: |-
      function foo<T, U = SomeType, V = OtherType>() { }
    use: |-
      foo<number>()
      foo<number,OtherType>()
      foo<number,Object,SomeType>()
