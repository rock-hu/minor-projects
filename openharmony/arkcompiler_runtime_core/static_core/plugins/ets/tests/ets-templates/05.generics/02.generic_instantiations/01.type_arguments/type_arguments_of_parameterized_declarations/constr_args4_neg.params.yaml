# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # classes
  - use: |-
      let v: A<X> = new A<X> (new Y())  // Y is not X

  - use: |-
      let v: A<null|X> = new A<null|X> (new X())  // syntax error

  - use: |-
      let v: A<null> = new A<null> (null)  // syntax error

  - use: |-
      let v: A<X> = new A<X> (new X())  // wrong bound
    bound: ' extends Y'

  - use: |-
      let v: A<X|null> = new A<X|null> (null)  // wrong bound
    bound: ' extends Object'

  # interfaces
  - use: |-
      let v: A<I> = new A<I> (new Y())  // Y is not I

  - use: |-
      let v: A<J|null> = new A<J|null> (null)  // wrong bound
    bound: ' extends I|null'

  # arrays
  - use: |-
      let v: A<X[]> = new A<X[]> (new Object[0])  // wrong array type

  - use: |-
      let v: A<X[]> = new A<X[]> (new X[0])  // wrong bound
    bound: ' extends Y[]'

  - use: |-
      let v: A<X[]|null> = new A<X[]|null> (new X[1][0])  // X[][] is not X[]
    bound: ' extends X[]|null'

  - use: |-
      let v: A<X[]|null> = new A<X[]|null> (null)  // wrong bound
    bound: ' extends Object[][]|null'

  # aliases
  - use: |-
      let v: A<B> = new A<B> (new Color[0])  // X is not Color
    decl: type B = X[]

  - use: |-
      let v: A<B> = new A<B> (new X[1][0])  // syntax error in alias
    decl: type B = null|X[][]

  - use: |-
      let v: A<B> = new A<B> (new X[0])  // wrong bound
    bound: ' extends Y[]'
    decl: type B = X[]

  - use: |-
      let v: A<B|null> = new A<B|null> (new X[0])  // out of bound
    bound: ' extends X[]'
    decl: type B = X[]

  # not a reference type
  - use: |-
      let v: A<Color> = new A<Color> (Color.Red)

  - use: |-
      let v: A<int> = new A<int> (1)