# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # type argument is class
  - use: |-
      let v: J<X> = new A<X>(new Y())  // Y is not X

  - use: |-
      let v: J<X> = new A<X|null>(null)  // assignment to subclass

  - use: |-
      let v: J<J<X>> = new A<J<X>>(new A<Y>(new Y()))  // A<Y> is not J<X>

  # type argument is interface
  - use: |-
      let v: J<I> = new A<I>(new Y())  // Y doesn't implement I
    bound: ' extends Object'

  - use: |-
      let v: J<J<I>> = new A<J<I>>(new A<Y>(new Y()))  // J<Y> is not J<I>
    bound: ' extends Object'

  # type argument is array of classes, interfaces, enums
  - use: |-
      let v: J<X[]> = new A<X[]>(new Y[0])  // Y[] is not X[]
    bound: ' extends Object[]|null'

  - use: |-
      let v: J<J<X>[]> = new A<J<X>[]>(new J<Y>[0])  // J<Y>[] is not J<X>[]

  - use: |-
      let v: J<J<X[]>[]> = new A<J<X[]>[]>(new J<Y[]>[0])  // X[] is not Y[]

  - use: |-
      let v: J<I[]> = new A<I[]>(new J[0])  // J is not I

  - use: |-
      let v: J<J<I>[]> = new A<J<I>[]>(new J<Y>[0])  // Y doesn't implement I

  - use: |-
      let v: J<J<I[]>[]> = new A<J<I[]>[]>(new J<I[]>[0])  // out of bound
    bound: ' extends J'

  - use: |-
      let v: J<Color[]> = new A<Color[]>(new Size[0])  // Size[] is not Color[]

  - use: |-
      let v: J<Color[]> = new A<Color[]>(new Color[0])  // out of bound
    bound: ' extends Size[]|null'

  - use: |-
      let v: J<J<Color[]>[]> = new A<J<Color[]>[]>(new J<Size[]>[0])  // Size[] is not Color[]

  - use: |-
      let v: J<J<Color[]>[]> = new A<J<Color[]>[]>(new J<Color[]|null>[0])  // Color[]|null is not Color[]

  # type argument is alias
  - use: |-
      let v: J<B> = new A<B>(new X())  // X is not Y
    decl: |-
      type B = Y
    bound: ' extends Y|null'

  - use: |-
      let v: J<B> = new A<B>(new A<X>(new X()))  // J<X> is not J<Y>
    decl: |-
      type B = J<Y>|null

  - use: |-
      let v: J<B> = new A<B>(new X[0])  // X[] is not Y[]
    decl: |-
      type B = Y[]

  - use: |-
      let v: J<B> = new A<B>(new J<X>[0])  // J<X>[] is not J<Y>[]
    decl: |-
      type B = J<Y>[]

  - use: |-
      let v: J<B> = new A<B>(new J<X[]>[0])  // X[] is not Y[]
    decl: |-
      type B = J<Y[]>[]

  - use: |-
      let v: J<J<B>[]> = new A<J<B>[]>(new J<B>[0])  // out of bound
    decl: |-
      type B = Y[]
    bound: ' extends J<X[]>'

  # not a reference type
  - use: |-
      let v: J<Color> = new A<Color>(Color.Red)

  # use abstract classes and interfaces to instantied array
  - use: |-
      let v: J<J<X>[]> = new A<J<X>[]>(new J<X>[0]) // cannot use array creation expression with interfaces.

  - use: |-
      let v: J<J<X[]>[]> = new A<J<X[]>[]>(new J<X[]>[0]) // cannot use array creation expression with interfaces.

  - use: |-
      let v: J<J<I>[]> = new A<J<I>[]>(new J<I>[0]) // cannot use array creation expression with interfaces.

  - use: |-
      let v: J<J<I[]>[]> = new A<J<I[]>[]>(new J<I[]>[0]) // cannot use array creation expression with interfaces.

  - use: |-
      let v: J<J<I[]|null>[]> = new A<J<I[]|null>[]>(new J<I[]|null>[0]) // cannot use array creation expression with interfaces.

  - use: |-
      let v: J<J<Color[]>[]> = new A<J<Color[]>[]>(new J<Color[]>[0]) // cannot use array creation expression with interfaces.

  - use: |-
      let v: J<B> = new A<B>(new J<X>[0]) // cannot use array creation expression with interfaces.
    decl: |-
      type B = J<X>[]

  - use: |-
      let v: J<B> = new A<B>(new J<X[]>[0]) // cannot use array creation expression with interfaces.
    decl: |-
      type B = J<X[]>[]

  - use: |-
      let v: J<J<B>[]> = new A<J<B>[]>(new J<B>[0]) // cannot use array creation expression with interfaces.
    decl: |-
      type B = X[]
