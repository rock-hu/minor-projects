# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # case 0.
    - decl: |-
        // no constraints
        function foo<T, U>(p: T, q: U): [T, U] {
            return [p, q]
        }
      use: |-
        let z = foo<number, boolean>(1.0, true)
        assertTrue(typeof z == 'object' && typeof z[0] == 'number' && typeof z[1] == 'boolean')
        assertTrue(z[0] == 1.0 && z[1])
  # case 1
    - decl: |-
        // no constraints, union
        function foo<T, U>(p: T, q: U): T|U {
            return (p! as object).toString() > (q! as object).toString() ? p : q
        }
      use: |-
        let v = foo<double, double>(1.0, 11.0)
        assertEQ(v as number, 11.0)

        let w = foo<[string, string, string, string], [number, number]>(["a", "b", "c", "d"], [1, 2])
        let x = foo<[string], [number, number]>(["a"], [1, 2])
        assertEQ(typeof w, 'object')
        assertEQ(typeof x, 'object')
  # case 2
    - decl: |-
        function bar<T>(p: T): Array<T> {
            let x = Array<T>(5)
            return x.fill(p)
        }

        // no constraints
        function foo<T, U>(p: T, q: U): [Array<T>, Array<U>] {
            return [bar(p), bar(q)]
        }
      use: |-
        let err = new Error()
        let z = foo<float, Error>(42f, err)
        assertTrue(z[0][0] == 42f && z[0][4] == 42f && z[1][0] == err && z[1][4] == err)
      # case 3
    - decl: |-
        class A {}
        class B extends A {}

        // with class type constraints
        function foo<T extends U, U extends Object>(p: T, q: U): boolean {
            return p.toString() + q.toString() > ""
        }
      use: |-
        assertTrue(foo<Object, Object>(new Object(), new Object()))
        assertTrue(foo<A, Object>(new A(), new Object()))
        assertTrue(foo<B, Object>(new B(), new Object()))
        assertTrue(foo<A, A>(new A(), new A()))
        assertTrue(foo<B, A>(new B(), new A()))
        assertTrue(foo<B, B>(new B(), new B()))
    # case 4
    - decl: |-
        class A {}
        class B extends A {}
        class C extends A {}

        // with union type constraints
        function foo<T extends B|C, U extends number|never|B|null|boolean>(p: T, q: U): boolean {
            return "" + p + q > ""
        }
      use: |-
        assertTrue(foo<C, boolean>(new C(), true))
        assertTrue(foo<B, B>(new B(), new B()))
        assertTrue(foo<C, double>(new C(), 42.0))
        assertTrue(foo<B, null>(new B(), null))
    # case 5
    - decl: |-
        // no constraints
        function foo<T, U>(p: T, q: U): [T, U] {
            return [p, q]
        }
      use: |-
        let y = foo<Error, string>(new Error(), "abc")
        assertTrue(typeof y == 'object' && typeof y[0] == 'object' && typeof y[1] == 'string')
        assertTrue(y[0] instanceof Error && y[1] == "abc")
  # case 6
    - decl: |-
        // no constraints
        function foo<T, U>(p: T, q: U): [T, U] {
            return [p, q]
        }
      use: |-
        let z = foo<number, boolean>(1.0, true)
        let y = foo<Error, string>(new Error(), "abc")
        let x = foo<[Number, Boolean], [Error, string]>(z, y)
        assertTrue(x[0][0] == 1.0 && x[0][1] && x[1][0] instanceof Error && x[1][1] == "abc")
  # case 7
    - decl: |-
        // no constraints
        function foo<T, U>(p: T, q: U): [T, U] {
            return [p, q]
        }
      use: |-
        let w = foo<null, undefined>(null, undefined)
        assertTrue(w[0] === null && w[1] === undefined)
