# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # type argument is class
  - use: |-
      let v: A<X> = new A<X>(new Y())  // Y is not X
    bound: ' extends Object'

  - use: |-
      let v: A<X> = new A<X>(new X())  // X is out of the bound
    bound: ' extends Y|null'

  - use: |-
      let v: A<X> = new A<X|null>(null) // shouldn't assign to subclass

  - use: |-
      let v: A<null|X> = new A<X>(new X()) // syntax error

  - use: |-
      let v: A<A<X>> = new A<A<X>>(new A<Y>(new Y()))  // A<Y> is not A<X>

  # type argument is interface
  - use: |-
      let v: A<I> = new A<I>(new Y())  // Y doesn't implement I
    bound: ' extends Object|null'

  - use: |-
      let v: A<A<I>> = new A<A<I>>(new A<Y>(new Y()))  // A<Y> is not A<I>

  # type argument is array of classes, interfaces, enums
  - use: |-
      let v: A<X[]> = new A<X[]>(new Y[0]) // Y[] is not X[]

  - use: |-
      let v: A<A<X>[]> = new A<A<X>[]>(new A<Y>[0]) // A<X>[] is not A<Y>[]

  - use: |-
      let v: A<A<X[]>[]> = new A<A<X[]>[]>(new A<Y[]>[0])  // Y[] is not X[]
    bound: ' extends Object[]'

  - use: |-
      let v: A<I[]> = new A<I[]>(new Y[0])  // Y doesn't implement I
    bound: ' extends Object'

  - use: |-
      let v: A<A<I>[]> = new A<A<I>[]>(new A<Y>[0])  // Y doesn't implement I

  - use: |-
      let v: A<A<I[]>[]> = new A<A<I[]>[]>(new A<Y[]>[0])  // Y doesn't implement I
    bound: ' extends Object[]|null'

  - use: |-
      let v: A<Color[]> = new A<Color[]>(new Size[0])  // Size is not Color

  - use: |-
      let v: A<A<Color[]>[]> = new A<A<Color[]>[]>(new A<Size[]>[0])  // Size[] is not Color[]

  # type argument is alias
  - use: |-
      let v: A<B> = new A<B>(new X())  // X is not  Y
    decl: |-
      type B = Y

  - use: |-
      let v: A<B> = new A<B>(new A<X>(new X()))  // A<X> is not A<Y>
    decl: |-
      type B = A<Y>

  - use: |-
      let v: A<B> = new A<B>(new X[0])  // X[] is not Y[]
    decl: |-
      type B = Y[]

  - use: |-
      let v: A<B> = new A<B>(new A<X>[0])  // A<X>[] is not A<Y>[]
    decl: |-
      type B = A<Y>[]

  - use: |-
      let v: A<B> = new A<B>(new A<X[]>[0])  // X is not Y
    decl: |-
      type B = A<Y[]>[]

  - use: |-
      let v: A<A<B>[]> = new A<A<B>[]>(new A<B>[0])  // arg is out of bound
    decl: |-
      type B = Y[]
    bound: ' extends X[]|null'

  # not a reference type
  - use: |-
      let v: A<Color> = new A<Color>(Color.Red)
