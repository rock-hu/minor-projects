# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: |-
      abstract class AC {
        i?: number = 0
        foo() {}
      }
    check: |-
      let a: Required<AC> = { i: 1.1 }
      a.foo()

  - decl: |-
      class C {
        i?: number = 0
        foo() {}
      }
    check: |-
      let a: Required<C> = { i: 1.1 }
      a.foo()

  - decl: |-
      interface I {
        i?: number
        foo() {}
      }
    check: |-
      let a: Required<I> = { i: 1.1 }
      a.foo()

  - decl: |-
      interface I {
        i?: number
        foo()
      }
      class A implements I {
        i?: number = 0
        foo() {}
        bar() {}
      }
    check: |-
      let a: Required<A> = { i: 1.1 }
      a.foo()

  - decl: |-
      interface I {
        i?: number
        foo()
      }
      class C implements I {
        i?: number = 0
        foo() {}
        bar() {}
      }
    check: |-
      let a: Required<C> = { i: 1.1 }
      a.bar()

  - decl: |-
      abstract class AC {
        i?: number = 0
        foo() {}
      }
      class C extends AC {
        j?: string = "str"
        bar() {}
      }
    check: |-
      let a: Required<C> = { i: 1.1, j: "str2" }
      a.bar()

  - decl: |-
      abstract class AC {
        i?: number = 0
        foo() {}
      }
      class C extends AC {
        j?: string = "str"
        bar() {}
      }
    check: |-
      let a: Required<C> = { i: 1.1, j: "str2" }
      a.foo()

  - decl: |-
      class A {
        i?: number = 0
        foo() {}
      }
      class B extends A {
        j?: string = "str"
        bar() {}
      }
    check: |-
      let a: Required<B> = { i: 1.1, j: "str2" }
      a.foo()

  - decl: |-
      class A {
        i?: number = 0
        foo() {}
      }
      class B extends A {
        j?: string = "str"
        bar() {}
      }
    check: |-
      let a: Required<B> = { i: 1.1, j: "str2" }
      a.bar()
