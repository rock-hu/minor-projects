# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          // use it as alias
          type R1 = Record<string, Error>
          function foo(p: R1): R1 {
              p["Null Pointer Error"] = new Error("NPE")
              return p
          }
      use: |-
          let r: R1 = {}
          r = foo(r)
          assert(r["Null Pointer Error"] instanceof Error)
          assert(r["NPE"] == undefined)

    - decl: |-
          // use it as alias with parameters
          type R1<T> = Record<T, Error>
          function foo(p: R1<string>): R1<string> {
              p["Null Pointer Error"] = new Error("NPE")
              return p
          }
      use: |-
          let r: R1<string> = {}
          r = foo(r)
          assert(r["Null Pointer Error"] instanceof Error)
          assert(r["NPE"] == undefined)

    - decl: |-
          // builtin array of records
      use: |-
          let r: Record<string, number>[] = new Record<string, number>[3]
          r[0] = { "A": 1 }
          r[1] = { "B": 2 }
          r[2] = { "C": 3 }
          assert(r[0]["A"] == 1 && r[1]["B"] == 2 && r[2]["C"] == 3)
          assert(r[0]["a"] == undefined && r[1]["b"] == undefined && r[2]["c"] == undefined)

    - decl: |-
          // array of records
      use: |-
          let r = new Array<Record<string, number>>()
          r.push({ "A": 1 })
          r.push({ "B": 2 })
          let v = r.pop()
          assert(v!["B"] == 2 && v!["A"] == undefined)
          v = r.pop()
          assert(v!["A"] == 1 && v!["B"] == undefined)

    - decl: |-
          // tuple of records
      use: |-
          let r: [Record<number, string>, Record<string, (p: number) => string>] = [
              { 1: "1", 2: "2", 3: "3" },
              { "A": (p: number): string => "A" + p, "B": (p: number): string => "B" + p }
          ]
          assert(r[0][1] == "1")
          assert(r[0][2] == "2")
          assert(r[0][3] == "3")
          assert(r[0][4] == undefined)
          assert(r[1]["A"]!(42) == "A42")
          assert(r[1]["B"]!(33) == "B33")
          assert(r[1]["C"] == undefined)

    - decl: |-
          // fields of Record type
          class A {
              f1: Record<String, Boolean> = {}
              f2: Record<Number, Boolean> = {}
          }
      use: |-
          let a = new A
          a.f1["1"] = true
          a.f1["0"] = false
          a.f2[1] = false
          a.f2[0] = true
          assert(a.f1["1"]! && !(a.f1["0"]!) && !(a.f2[1]!) && a.f2[0]!)
          assert(a.f1[""] == undefined && a.f2[42] == undefined)

    - decl: |-
          let a = 2, b = 1;
          // generic argument of record type
          function foo<T>(p: T): T {
              if (a > b) {
                  return p
              }
              throw new Error()
          }
      use: |-
          let r: Record<"a"|"b"|"c", number> = {
              "a": 1,
              "b": 2,
              "c": 3,
          }
          let q = foo<Record<"a"|"b"|"c", number>>(r)
          assert(q["a"] == 1 && q["b"] == 2 && q["c"] == 3)

    - decl: |-
          // generic argument of record type
          class A<T> {
              f: T
              constructor(p: T) {
                  this.f = p
              }
              put(p: T) {
                  this.f = p
              }
          }
          class B<T> extends A<T> {
              constructor(p: T) {
                  super(p)
              }
              meth(): T {
                  return this.f
              }
          }
      use: |-
          let b: B<Record<Numeric, string>> = new B<Record<Numeric, string>>({
              12345.0: "1 2 3 4 5",
              67890.0: "6 7 8 9 0",
          });
          assert(b.meth()[12345] == "1 2 3 4 5")
          assert(b.meth()[67890] == "6 7 8 9 0")
          assert(b.meth()[11111] == undefined)
          b.put({ 1.0: "A", 2.0: "B" })
          assert(b.meth()[1] == "A")
          assert(b.meth()[2] == "B")

    - decl: |-
          let a = 2, b = 1;
          function to_obj(p: Object): Object {
              if (a > b) {
                  return p
              }
              return new Error()
          }
          function to_rec(p: Object|null): Record<number, number> {
              return p as Record<number, number>
          }
          let r: Record<number, number> = {
              1: 101,
              2: 202,
              3: 303,
          }
          let obj: Object|null;
          let rec: Record<number, number>|null;
      use: |-
          // casting record to object and back
          obj = to_obj(r)
          let q = to_rec(obj)
          assert(q[1] == 101 && q[2] == 202 && q[3] == 303)

    - decl: |-
          // record with union keys
      use: |-
          let r: Record<string|number, bigint> = {
              "A": 1n,
              "B": 2n,
              1: 100n,
              2: 200n,
          }
          assert(r["A"] == 1n && r["B"] == 2n)
          assert(r[1] == 100n && r[2] == 200n)
          r["C"] = 3n
          r[3] = 300n
          assert(r["C"] == 3n && r[3] == 300n)
          assert(r["D"] == undefined && r[4] == undefined)

    - decl: |-
          // record with union values
      use: |-
          let r: Record<string|number, double|char|boolean|string|bigint> = {
              "1": 42.0
          }
          r[6] = 6.01
          r["7"] = c'\u0007'
          r[8] = true
          r[9] = "abc"
          r[0] = 111111111111111111111111111111111111111111111111111111111111111111111111111111111111n
          assert(r[0] == 111111111111111111111111111111111111111111111111111111111111111111111111111111111111n)
          assert(r[9] == "abc")
          assert(r[8] == true)
          assert(r["7"] == c'\u0007')
          assert(r[6] == 6.01)
          assert(r["1"] == 42.0)

    - decl: |-
          // use generic arguments in record value
          class A<T extends Object> {
              private f: Record<number, T> = {}
              get(i: number): T|undefined { return this.f[i] }
              set(i: number, p: T) { this.f[i] = p }
          }
      use: |-
          let a: A<Record<string, number>> = new A<Record<string, number>>;
          a.set(1, { "A": 100 })
          a.set(2, { "B": 200 })
          assert(a.get(1)!["A"] == 100)
          assert(a.get(2)!["B"] == 200)
          assert(a.get(3) == undefined)

    - decl: |-
          // use generic argument in record key
          class A<T extends Numeric> {
              private f: Record<T, string> = {}
              get(i: T): string|undefined { return this.f[i] }
              set(i: T, p: string) { this.f[i] = p }
          }
      use: |-
          let a: A<Int> = new A<Int>;
          a.set(42, "42")
          a.set(33, "33")
          assert(a.get(42) == "42")
          assert(a.get(33) == "33")
          assert(a.get(34) == undefined)
          a.set(42, "0")
          assert(a.get(42) == "0")

    - use: |-
          let r: Record<char, string> = {}  // CTE: wrong key type
      tags: 'compile-only, negative'

    - use: |-
          let r: Record<string|boolean|number, string> = {}  // CTE: wrong key type
      tags: 'compile-only, negative'

    - use: |-
          let r: Record<'a'|'b'|number, string> = {}  // CTE: wrong key type
      tags: 'compile-only, negative'

    - use: |-
          let r: Record<'a'|'b'|1|2, string> = {}  // CTE: wrong key type
      tags: 'compile-only, negative'

    - use: |-
          let r: Record<string|null, string> = {}  // CTE: wrong key type
      tags: 'compile-only, negative'

    - use: |-
          let r: Record<number|undefined, string> = {}  // CTE: wrong key type
      tags: 'compile-only, negative'
