# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Instantiated array T[] with types.
cases_two:

  - type: number
    desc: Instantiated array T[] with number type.
    values: "1, 2, 3"
    expected_values: [1, 2, 3]

  - type: number
    desc: Instantiated array T[] with binary number type.
    values: "0b10, 0b11, 0b100"
    expected_values: [2, 3, 4]

  - type: number
    desc: Instantiated array T[] with octal number type.
    values: "0o010, 0o011, 0o012"
    expected_values: [8, 9, 10]

  - type: number
    desc: Instantiated array T[] with hexadecimal number type.
    values: "0x10, 0x11, 0x12"
    expected_values: [16, 17, 18]

  - type: "'up' | 'down' | 'left' | 'right'"
    desc: Instantiated array T[] with literal type.
    values: "'up', 'down', 'left'"
    expected_values: ["'up'", "'down'", "'left'"]

  - type: string
    desc: Instantiated array T[] with string type.
    values: "\"a\", \"b\", \"c\""
    expected_values: ["\"a\"", "\"b\"", "\"c\""]

  - type: byte
    desc: Instantiated array T[] with byte type.
    values: "1, 2, 3"
    expected_values: [1, 2, 3]

  - type: short
    desc: Instantiated array T[] with short type.
    values: "1, 2, 3"
    expected_values: [1, 2, 3]

  - type: int
    desc: Instantiated array T[] with int type.
    values: "1, 2, 3"
    expected_values: [1, 2, 3]

  - type: long
    desc: Instantiated array T[] with long type.
    values: "1, 2, 3"
    expected_values: [1, 2, 3]

  - type: Float
    desc: Instantiated array T[] with float type.
    values: "1.1f, 2.1f, 3.9f"
    expected_values: [1.1f, 2.1f, 3.9f]

  - type: double
    desc: Instantiated array T[] with double type.
    values: "1.00001, 2.0111, 3.000001"
    expected_values: [1.00001, 2.0111, 3.000001]

  - type: char
    desc: Instantiated array T[] with char type.
    values: "1, 2, 3"
    expected_values: [1, 2, 3]

  - type: boolean
    desc: Instantiated array T[] with boolean type.
    values: "false, true, true"
    expected_values: ['false', 'true', 'true']

  - type: bigint
    desc: Instantiated array T[] with bigint type.
    values: "1n, 2n, 3n"
    expected_values: [1n, 2n, 3n]

  - type: (string | number)
    desc: Instantiated array T[] with union type.
    values: "'a', 1, 2"
    expected_values: ["'a'", 1, 2]

  - type: undefined
    desc: Instantiated array T[] with undefined type.
    values: "undefined, undefined, undefined"
    expected_values: [undefined, undefined, undefined]

  - decl: |-
      enum ColorSet {Red = 0, Green = 1, Blue = 2}
    type: ColorSet
    desc: Instantiated array T[] with enumerated type.
    values: "ColorSet.Red, ColorSet.Green, ColorSet.Blue"
    expected_values: [ColorSet.Red, ColorSet.Green, ColorSet.Blue]

  - type: 'null'
    desc: Instantiated array T[] with null type.
    values: "null, null, null"
    expected_values: ['null', 'null', 'null']

  - type: number[]
    desc: Instantiated array T[] with number[] type.
    values: "[0, 1, 2], [3, 4, 5], [6, 7, 8]"
    expected: |-
      assertEQ(tmpArray[0][0], 0);
      assertEQ(tmpArray[2][2], 8);

  - type: "[number, string, boolean]"
    desc: Instantiated array T[] with tuple type.
    values: "[0, \"a\", false], [0, \"a\", false]"
    expected: |-
      assertEQ(tmpArray[0][0], 0);
      assertEQ(tmpArray[1][2], false);

  - type: (() => int)
    desc: Instantiated array T[] with function type.
    values: "() => { return 1; },() => { return 2; }"
    expected: |-
      assertEQ(tmpArray[0](), 1);
      assertEQ(tmpArray[1](), 2);

  - decl: |-
      class Animal {
      public name: string;
        constructor(name: string) {
        this.name = name;
        }
      }
    type: Animal
    desc: Instantiated array T[] with class type.
    values: |-
      new Animal("Dog"), new Animal("Cat")
    expected: |-
      assertEQ(tmpArray[0].name, "Dog");
      assertEQ(tmpArray[1].name, "Cat");