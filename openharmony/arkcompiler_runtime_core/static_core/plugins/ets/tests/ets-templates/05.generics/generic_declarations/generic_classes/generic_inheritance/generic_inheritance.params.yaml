# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Class inheritance using generics.
cases:

  - desc: Test the generic implementation class to handle the integer zero.
    decl: |-
      class GenericParent<T> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public getData(): T {
          return this.data;
        }
      }

      class ChildClass extends GenericParent<number> {
        constructor(data: number) {
          super(data);
        }
      }
    logic: |-
      const childInstance = new ChildClass(5);
      const result = typeof childInstance.getData();
      assertEQ(result, "number");

  - desc: Indirect inheritance-validates that subclasses of subclasses also follow generic constraints.
    decl: |-
      class GenericParent<T> {
        private data:T;
        constructor(data: T) {
          this.data = data;
        }

        public getData(): T {
          return this.data;
        }
      }

      class ChildClass extends GenericParent<number> {
        constructor(data: number) {
          super(data);
        }
      }

      class GrandChildClass extends ChildClass {
        constructor(data: number) {
          super(data);
        }
      }
    logic: |-
      const grandChildInstance = new GrandChildClass(10);
      const result = typeof grandChildInstance.getData();
      assertEQ(result, "number");

  - desc: Use different types of generic parameters for testing.
    decl: |-
      class GenericParent<T> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public getData(): T {
          return this.data;
        }
      }

      class AnotherChildClass extends GenericParent<string> {
        constructor(data: string){
          super(data);
        }
      }
    logic: |-
      const grandChildInstance = new AnotherChildClass("data");
      const result = typeof grandChildInstance.getData();
      assertEQ(result, "string");

  - desc: Generic methods combined with generic classes.
    decl: |-
      class GenericParentWithMethod<T> {
        protected data: T;

        constructor(data: T) {
          this.data = data;
        }

        public process<U>(value: U): [T, U] {
          return [this.data, value];
        }
      }

      class ChildWithGenericMethod extends GenericParentWithMethod<number> {
        constructor(data: number){
          super(data);
        }
      }
    logic: |-
      const instance = new ChildWithGenericMethod(10);
      const result = instance.process<string>("test");
      assertEQ(result[0], 10);
      assertEQ(result[1], "test");

  - desc: Generic class with complex type parameters.
    decl: |-
      class ComplexTypeParent<T extends user> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public getDataName(): string {
          return this.data.name;
        }
      }

      class ComplexChildClass extends ComplexTypeParent<user> {
        constructor(data: user) {
          super(data);
        }
      }

      class user {
        name: string = '';
        age: number = 0;
      }
    logic: |-
      const childInstance = new ComplexChildClass({ name: "Alice", age: 30 });
      assertEQ(childInstance.getDataName(), "Alice");

  - desc: Method rewriting and generic constraints.
    decl: |-
      class GenericMethodParent<T> {
        private data: T;

        constructor(data: T) {
          this.data = data;
        }

        public processData(): boolean {
          return true;
        }
      }

      class MethodOverrideChild<T> extends GenericMethodParent<T> {

        constructor(data:T){
          super(data);
        }

        public override processData(): boolean {
          return false;
        }
      }
    logic: |-
      const instance = new MethodOverrideChild<number>(10);
      assertEQ(instance.processData(), false);

  - desc: Generic interface and implementation.
    decl: |-
      interface GenericInterface<T> {
        process(t: T): T;
      }

      class InterfaceImplementer<T> implements GenericInterface<T> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public process(t: T): T {
          return this.data;
        }
      }

      class ChildInterfaceImplementer<T> extends InterfaceImplementer<T> {
        constructor(data: T){
          super(data);
        }
      }
    logic: |-
      const instance = new ChildInterfaceImplementer<string>("test");
      const result = instance.process("aa");
      assertEQ(result, "test");

  - desc: Generic constraints and default values.
    decl: |-
      class DefaultGenericType<T = number> {
        private data: T;
        constructor(data: T) {
          this.data = data
        }

        public getData(t: T): T {
          return this.data;
        }
      }

      class WithDefaultChild<T> extends DefaultGenericType<number> {
        constructor(data: number) {
          super(data)
        }
      }
    logic: |-
      const instance = new WithDefaultChild<number>(20);
      const result = instance.getData(1);
      assertEQ(result, 20)

  - desc: Multi-generic parameters.
    decl: |-
      class MultiGenericType<T, U> {
        private first: T;
        private second: U;
        constructor(first: T, second: U) {
          this.first = first;
          this.second = second
        }

        public getFirst(t: T): T {
          return this.first;
        }

        public getSecond(u: U): U {
          return this.second;
        }
      }

      class MultiGenericChild<T, U> extends MultiGenericType<number, string> {
        constructor(first:number, second: string){
          super(first, second)
        }
      }
    logic: |-
      const instance = new MultiGenericChild<number,string>(100, "hundred");
      const result = instance.getSecond("aa")
      assertEQ(result, "hundred")

  - desc: Use generics of union types.
    decl: |-
      class UnionGenericType<T extends number | string> {
        private data: T;
        constructor(data: T) {
          this.data = data
        }

        public getData(): T {
          return this.data;
        }
      }

      class UnionChildClass<T extends number | string> extends UnionGenericType<number | string> {
        constructor(data: number | string) {
          super(data)
        }
      }
    logic: |-
      const numberInstance = new UnionChildClass<number>(10);
      const stringInstance = new UnionChildClass<string>("ten");
      const result = numberInstance.getData();
      const result1 = stringInstance.getData();
      assertEQ(result, 10);
      assertEQ(result1, 'ten');

  - desc: Direct inheritance-verifies that the subclass correctly specifies generic parameters(string type).
    decl: |-
      class GenericParent<T> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public getData(): T {
          return this.data;
        }
      }

      class ChildClass extends GenericParent<string> {
        constructor(data: string) {
          super(data);
        }
      }
    logic: |-
      const childInstance = new ChildClass("str");
      const result = typeof childInstance.getData();
      assertEQ(result, "string");

  - desc: Direct inheritance-verifies that the subclass correctly specifies generic parameters(boolean type).
    decl: |-
      class GenericParent<T> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public getData(): T {
          return this.data;
        }
      }

      class ChildClass extends GenericParent<boolean> {
        constructor(data: boolean) {
          super(data);
        }
      }
    logic: |-
      const childInstance = new ChildClass(true);
      const result = typeof childInstance.getData();
      assertEQ(result, "boolean");

  - desc: Indirect inheritance-validates that subclasses of subclasses also follow generic constraints(boolean type).
    decl: |-
      class GenericParent<T> {
        private data:T;
        constructor(data: T) {
          this.data = data;
        }

        public getData(): T {
          return this.data;
        }
      }

      class ChildClass extends GenericParent<boolean> {
        constructor(data: boolean) {
          super(data);
        }
      }

      class GrandChildClass extends ChildClass {
        constructor(data: boolean) {
          super(data);
        }
      }
    logic: |-
      const grandChildInstance = new GrandChildClass(true);
      const result = typeof grandChildInstance.getData();
      assertEQ(result, "boolean");

  - desc: Generic class with complex type parameters.
    decl: |-
      class ComplexTypeParent<T extends user> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public getDataAge(): number {
          return this.data.age;
        }
      }

      class ComplexChildClass extends ComplexTypeParent<user> {
        constructor(data: user) {
          super(data);
        }
      }

      class user {
        name: string = '';
        age: number = 0;
      }
    logic: |-
      const childInstance = new ComplexChildClass({ name: "Alice", age: 30 });
      assertEQ(childInstance.getDataAge(), 30);

  - desc: Generic class with complex type parameters.
    decl: |-
      class ComplexTypeParent<T extends user> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public getDataAge(): number {
          return this.data.age;
        }

        public getDataName(): string {
          return this.data.name;
        }
      }

      class ComplexChildClass extends ComplexTypeParent<user> {
        constructor(data: user) {
          super(data);
        }
      }

      class user {
        name: string = '';
        age: number = 0;
      }
    logic: |-
      const childInstance = new ComplexChildClass({ name: "Alice", age: 30 });
      assertEQ(childInstance.getDataName(), "Alice");
      assertEQ(childInstance.getDataAge(), 30);

  - desc: Generic class with complex type parameters.
    decl: |-
      class ComplexTypeParent<T extends user> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public getDataAge(): number {
          return this.data.age;
        }

        public getDataName(): string {
          return this.data.name;
        }

          public getDataMarriedNo(): boolean {
          return this.data.marriedNo;
        }
      }

      class ComplexChildClass extends ComplexTypeParent<user> {
        constructor(data: user) {
          super(data);
        }
      }

      class user {
        name: string = '';
        age: number = 0;
        marriedNo: boolean = false;
      }
    logic: |-
      const childInstance = new ComplexChildClass({ name: "Alice", age: 30, marriedNo: false});
      assertEQ(childInstance.getDataName(), "Alice");
      assertEQ(childInstance.getDataAge(), 30);
      assertEQ(childInstance.getDataMarriedNo(), false);

  - desc: Generic interface and implementation(number type).
    decl: |-
      interface GenericInterface<T> {
        process(t: T): T;
      }

      class InterfaceImplementer<T> implements GenericInterface<T> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public process(t:T): T {
          return this.data;
        }
      }

      class ChildInterfaceImplementer<T> extends InterfaceImplementer<T> {
        constructor(data: T){
          super(data);
        }
      }
    logic: |-
      const instance = new ChildInterfaceImplementer<number>(10);
      const result = instance.process(1);
      assertEQ(result, 10);

  - desc: Generic interface and implementation(boolean type).
    decl: |-
      interface GenericInterface<T> {
        process(t: T): T;
      }

      class InterfaceImplementer<T> implements GenericInterface<T> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public process(t: T): T {
          return this.data;
        }
      }

      class ChildInterfaceImplementer<T> extends InterfaceImplementer<T> {
        constructor(data: T){
          super(data);
        }
      }
    logic: |-
      const instance = new ChildInterfaceImplementer<boolean>(true);
      const result = instance.process(false);
      assertEQ(result, true);

  - desc: Generic constraints and default values(string type).
    decl: |-
      class DefaultGenericType<T = string> {
        private data: T;
        constructor(data: T) {
          this.data = data
        }

        public getData(t: T): T {
          return this.data;
        }
      }

      class WithDefaultChild<T> extends DefaultGenericType<string> {
        constructor(data: string) {
          super(data);
        }
      }
    logic: |-
      const instance = new WithDefaultChild<string>("str");
      const result = instance.getData("aa");
      assertEQ(result, "str");

  - desc: Generic constraints and default values(boolean type).
    decl: |-
      class DefaultGenericType<T = boolean> {
        private data: T;
        constructor(data: T) {
          this.data = data;
        }

        public getData(t: T): T {
          return this.data;
        }
      }

      class WithDefaultChild<T> extends DefaultGenericType<boolean> {
        constructor(data: boolean) {
          super(data);
        }
      }
    logic: |-
      const instance = new WithDefaultChild<boolean>(true);
      const result = instance.getData(false);
      assertEQ(result, true);

  - desc: Multi-generic parameters-string.
    decl: |-
      class MultiGenericType<T, U> {
        private first: T;
        private second: U;
        constructor(first: T, second: U) {
          this.first = first;
          this.second = second
        }

        public getFirst(): T {
          return this.first;
        }

        public getSecond(): U {
          return this.second;
        }
      }

      class MultiGenericChild<T, U> extends MultiGenericType<number, string> {
        constructor(first: number, second: string){
          super(first, second)
        }
      }
    logic: |-
      const instance = new MultiGenericChild<number,string>(100, "hundred");
      const result = instance.getFirst();
      assertEQ(result, 100);

  - desc: Multi-generic parameters-string.
    decl: |-
      class MultiGenericType<T, U> {
        private first: T;
        private second: U;
        constructor(first: T, second: U) {
          this.first = first;
          this.second = second;
        }

        public getFirst(): T {
          return this.first;
        }

        public getSecond(): U {
          return this.second;
        }
      }

      class MultiGenericChild<T, U> extends MultiGenericType<string, string> {
        constructor(first: string, second: string){
          super(first, second);
        }
      }
    logic: |-
      const instance = new MultiGenericChild<number, string>("100", "hundred");
      const result = instance.getFirst();
      assertEQ(result, "100");