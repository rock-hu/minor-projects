# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Testing the use of generic parameters to implement universal interfaces.
cases:

  - type: number
    desc: Test the generic implementation class to handle a single small positive integer.
    values: 10
    expected: |-
      assertEQ(result, 10);

  - type: number
    desc: Test the generic implementation class to handle a single large positive integer.
    values: 1000000
    expected: |-
      assertEQ(result, 1000000);

  - type: number
    desc: Test the generic implementation class to handle a single small negative integer.
    values: -10
    expected: |-
      assertEQ(result, -10);

  - type: number
    desc: Test the generic implementation class to handle a single large negative integer.
    values: -1000000
    expected: |-
      assertEQ(result, -1000000);

  - type: number
    desc: Test the generic implementation class to handle the integer zero.
    values: 0
    expected: |-
      assertEQ(result, 0);

  - type: number
    desc: Test the generic implementation class to handle a single small positive floating - point number.
    values: 0.1
    expected: |-
      assertEQ(result, 0.1);

  - type: number
    desc: Test the generic implementation class to handle a single large positive floating - point number.
    values: 1000000.1
    expected: |-
      assertEQ(result, 1000000.1);

  - type: number
    desc: Test the generic implementation class to handle a single small negative floating - point number.
    values: -0.1
    expected: |-
      assertEQ(result, -0.1);

  - type: number
    desc: Test the generic implementation class to handle a single large negative floating - point number.
    values: -1000000.1
    expected: |-
      assertEQ(result, -1000000.1);

  - type: number
    desc: Test the generic implementation class to handle the floating - point number zero.
    values: 0.0
    expected: |-
      assertEQ(result, 0.0);

  - type: boolean
    desc: Test the generic implementation class to handle the boolean value true.
    values: "true"
    expected: |-
      assertEQ(result, true);

  - type: string
    desc: Test the generic implementation class to handle a single short string.
    values: "\"abc\""
    expected: |-
      assertEQ(result, "abc");

  - type: string
    desc: Test the generic implementation class to handle an empty string.
    values: "\"\""
    expected: |-
      assertEQ(result, "");

  - type: "null"
    desc: Test the generic implementation class to handle the null value.
    values: "null"
    expected: |-
      assertEQ(result, null);

  - type: "undefined"
    desc: Test the generic implementation class to handle the undefined value.
    values: "undefined"
    expected: |-
      assertEQ(result, undefined);

  - type: number
    desc: Test the generic implementation class to handle the maximum safe integer.
    values: Number.MAX_SAFE_INTEGER
    expected: |-
      assertEQ(result, Number.MAX_SAFE_INTEGER);

  - type: number
    desc: Test the generic implementation class to handle the minimum safe integer.
    values: Number.MIN_SAFE_INTEGER
    expected: |-
      assertEQ(result, Number.MIN_SAFE_INTEGER);

  - type: number
    desc: Test the generic implementation class to handle the maximum positive floating - point number.
    values: Number.MAX_VALUE
    expected: |-
      assertEQ(result, Number.MAX_VALUE);

  - type: number
    desc: Test the generic implementation class to handle the minimum positive floating - point number.
    values: Number.MIN_VALUE
    expected: |-
      assertEQ(result, Number.MIN_VALUE);

  - type: string
    desc: Test the generic implementation class to handle a single uppercase letter character.
    values: "'A'"
    expected: |-
      assertEQ(result, 'A');

  - type: number
    desc: Test the generic implementation class to handle the Infinity value.
    values: Infinity
    expected: |-
      assertEQ(result, Infinity);

  - type: number
    desc: Test the generic implementation class to handle a floating - point number with extremely small precision.
    values: Number.MIN_VALUE * 10
    expected: |-
      assertEQ(result, Number.MIN_VALUE * 10);

  - type: number
    desc: Test the generic implementation class to handle the NaN value.
    values: NaN
    expected: |-
      assertEQ(isNaN(result), true);

  - type: number
    desc: Test generic implementation classes to handle single binary small positive integers.
    values: 0b10
    expected: |-
      assertEQ(result, 2);

  - type: number
    desc: Test generic implementation classes to handle a single octal small positive integer.
    values: 0o10
    expected: |-
      assertEQ(result, 8);

  - type: number
    desc: Test generic implementation classes to handle a single hexadecimal small positive integer.
    values: 0x10
    expected: |-
      assertEQ(result, 16);

  - type: bigint
    desc: Test the generic implementation class to handle a single BigInt value.
    values: 12345678901234567890n
    expected: |-
      assertEQ(result, 12345678901234567890n);

  - type: string
    desc: Test the generic implementation class to handle a string containing escape characters.
    decl: |-
      const escapeStr = 'Hello\nWorld';
    values: escapeStr
    expected: |-
      assertEQ(result, escapeStr);

  - type: string
    desc: Test the generic implementation class to handle a string with consecutive identical characters.
    values: "'aaaaa'"
    expected: |-
      assertEQ(result, 'aaaaa');

  - type: string
    desc: Test the generic implementation class to handle a numeric string containing a minus sign.
    values: "\"-123\""
    expected: |-
      assertEQ(result, "-123");

  - type: string
    desc: Test the generic implementation class to handle a numeric string containing a decimal point.
    values: "\"3.14\""
    expected: |-
      assertEQ(result, "3.14");

  - type: string
    desc: Test the generic implementation class to handle a numeric string containing scientific notation.
    values: "\"1.23e+5\""
    expected: |-
      assertEQ(result, "1.23e+5");

  - type: string
    desc: Test the generic implementation class to handle a multi - line string containing line breaks.
    decl: |-
      const escapeStr = 'Line 1\nLine 2\nLine 3';
    values: escapeStr
    expected: |-
      assertEQ(result, escapeStr);

  - type: string
    desc: Test the generic implementation class to handle a string containing a mix of numbers and letters.
    values: "\"abc123\""
    expected: |-
      assertEQ(result, "abc123");

  - type: string
    desc: Test the generic implementation class to handle a string containing special symbols (e.g., @, #).
    values: "\"Special@#Symbols$%Test\""
    expected: |-
      assertEQ(result, "Special@#Symbols$%Test");

  - type: string
    desc: Test the generic implementation class to handle a string containing consecutive special symbols.
    values: "\"!!@@##$$%\""
    expected: |-
      assertEQ(result, "!!@@##$$%");

  - type: string
    desc: Test the generic implementation class to handle a string containing special symbols and spaces.
    values: "\"Hello! This is a #test string @ with spaces.\""
    expected: |-
      assertEQ(result, "Hello! This is a #test string @ with spaces.");

  - type: number[]
    desc: Test the generic implementation class to handle an integer array with a single element.
    decl: |-
      let arr = [1];
    values: arr
    expected: |-
      for (let i = 0; i < arr.length; i++) {
        assertEQ(result[i], arr[i]);
      }

  - type: number[]
    desc: Test the generic implementation class to handle an integer array with multiple elements.
    decl: |-
      let arr = [1, 2, 3];
    values: arr
    expected: |-
      for (let i = 0; i < arr.length; i++) {
        assertEQ(result[i], arr[i]);
      }

  - type: number[]
    desc: Test the generic implementation class to handle a floating - point array with multiple elements.
    decl: |-
      let arr = [0.1, 0.2, 0.3];
    values: arr
    expected: |-
      for (let i = 0; i < arr.length; i++) {
        assertEQ(result[i], arr[i]);
      }

  - type: number[]
    desc: Test the generic implementation class to handle a floating - point array with a single element.
    decl: |-
      let arr = [0.1];
    values: arr
    expected: |-
      for (let i = 0; i < arr.length; i++) {
        assertEQ(result[i], arr[i]);
      }

  - type: boolean[]
    desc: Test the generic implementation class to handle a boolean array with a single element.
    decl: |-
      let arr = [true];
    values: arr
    expected: |-
      for (let i = 0; i < arr.length; i++) {
        assertEQ(result[i], arr[i]);
      }

  - type: string[]
    desc: Test the generic implementation class to handle a string array with a single element.
    decl: |-
      let arr = ["abc"];
    values: arr
    expected: |-
      for (let i = 0; i < arr.length; i++) {
        assertEQ(result[i], arr[i]);
      }

  - type: string[]
    desc: Test the generic implementation class to handle a string array with multiple elements.
    decl: |-
      let arr = ["abc", "def", "ghi"];
    values: arr
    expected: |-
      for (let i = 0; i < arr.length; i++) {
        assertEQ(result[i], arr[i]);
      }

  - type: string[]
    desc: Test the generic implementation class to handle a character array with a single element.
    decl: |-
      let charArr = ['A'];
    values: charArr
    expected: |-
      for (let i = 0; i < charArr.length; i++) {
        assertEQ(result[i], charArr[i]);
      }

  - type: string[]
    desc: Test the generic implementation class to handle a character array with multiple elements.
    decl: |-
      let charArr = ['A', 'B', 'C'];
    values: charArr
    expected: |-
      for (let i = 0; i < charArr.length; i++) {
        assertEQ(result[i], charArr[i]);
      }

  - type: string[]
    desc: Test the generic implementation class to handle a character array with multiple elements.
    decl: |-
      let charArr = ['A', 'B', 'C'];
    values: charArr
    expected: |-
      for (let i = 0; i < charArr.length; i++) {
        assertEQ(result[i], charArr[i]);
      }

  - type: string[]
    desc: Test the generic implementation class to handle an instance of a custom class with a protected property.
    decl: |-
      const emptyStrArr = ["", "", ""];
    values: emptyStrArr
    expected: |-
      for (let i = 0; i < emptyStrArr.length; i++) {
        assertEQ(result[i], emptyStrArr[i]);
      }

  - type: bigint[]
    desc: Test the generic implementation class to handle an array of BigInt values.
    decl: |-
      const bigIntArr = [1n, 2n, 3n];
    values: bigIntArr
    expected: |-
      for (let i = 0; i < bigIntArr.length; i++) {
        assertEQ(result[i], bigIntArr[i]);
      }

  - type: CustomClassWithPrivateProp
    desc: Test the generic implementation class to handle an instance of a custom class with a private property.
    decl_class: |-
      class CustomClassWithPrivateProp {
        private privateValue: number;
        constructor(value: number) {
          this.privateValue = value;
        }
        getValue() {
          return this.privateValue;
        }
      }
    decl: |-
      let customObj = new CustomClassWithPrivateProp(10);
    values: customObj
    expected: |-
      assertEQ(result.getValue(), customObj.getValue());

  - type: undefined[]
    desc: Test the generic implementation class to handle an array filled with undefined values.
    decl: |-
      const undefinedArr = [undefined, undefined, undefined];
    values: undefinedArr
    expected: |-
      for (let i = 0; i < undefinedArr.length; i++) {
        assertEQ(result[i], undefinedArr[i]);
      }

  - type: Date[]
    desc: Test the generic implementation class to handle an array whose elements are Date objects.
    decl: |-
      const date1 = new Date('2023-01-01');
      const date2 = new Date('2023-12-31');
      const dateArr = [date1, date2];
    values: dateArr
    expected: |-
      for (let i = 0; i < dateArr.length; i++) {
        assertEQ(result[i].getTime(), dateArr[i].getTime());
      }

  - type: CustomClassWithProtectedProp
    desc: Test the generic implementation class to handle an instance of a custom class with a protected property.
    decl_class: |-
      class CustomClassWithProtectedProp {
        protected protectedValue: number;
        constructor(value: number) {
          this.protectedValue = value;
        }
        getValue() {
          return this.protectedValue;
        }
      }
    decl: |-
      let customObj = new CustomClassWithProtectedProp(10);
    values: customObj
    expected: |-
      assertEQ(result.getValue(), customObj.getValue());

