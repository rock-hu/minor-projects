# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

bridge_methods_generic:
    # case 0
  - desc: Test that a generic subclass correctly overrides a method from a generic parent class when instantiated with a string type.
    dec1: |-
      class Pa<T> {
        p(v: T): T {
          return v;
        }
      }
      class Cl extends Pa<string> {
        p(v:string):string {
          return v;
        }
      }
    check: |-
      let c: Pa<string> = new Cl();
      assertEQ(typeof c.p('string'), 'string');

    # case 1
  - desc: Test generic class inheritance with constructor parameters and method access from both parent and child classes.
    dec1: |-
      class Ng {
        id: number;
        constructor(id: number) {
        this.id = id;
        }
        g(): number {
        return this.id;
        }
      }

      class Ge<T> extends Ng {
        d: T;
        constructor(id: number, d: T) {
          super(id);
          this.d = d;
        }
        getD(): T {
          return this.d;
        }
      }
    check: |-
      let c = new Ge<string>(1, 'test');
      assertEQ(c.g(), 1);
      assertEQ(c.getD(), 'test');

    # case 2
  - desc: Test multi-level generic inheritance with method overriding at the bottom non-generic class.
    dec1: |-
      class Base<T> {
        value: T;
        constructor(value: T) {
          this.value = value;
        }
        getValue(): T {
        return this.value;
        }
      }

      class Middle<U> extends Base<U> {
        constructor(value: U) {
          super(value);
        }
      }

      class Bottom extends Middle<string> {
        constructor(value: string) {
          super(value);
        }
        getValue(): string {
          return super.getValue().toUpperCase();
        }
      }
    check: |-
      const instance = new Bottom("test");
      assertEQ(instance.getValue(), "TEST");

    # case 3
  - desc: Verify method overriding in a multi-level generic inheritance chain with multiple type parameters.
    dec1: |-
      class Root {
        name: string = "root";
        getName(): string {
          return this.name;
        }
      }

      class Generic1<T> extends Root {
        value1: T;
        constructor(value1: T) {
          super();
          this.value1 = value1;
       }
      }

      class Generic2<U, V> extends Generic1<U> {
        value2: V;
        constructor(value1: U, value2: V) {
          super(value1);
          this.value2 = value2;
        }
        getName(): string {
          return super.getName().toUpperCase();
        }
      }
    check: |-
      const instance = new Generic2<number, string>(10, "test");
      assertEQ(instance.getName(), "ROOT");

    # case 4
  - desc: Test that a concrete subclass correctly overrides and modifies a method from a generic parent class with a specific type.
    dec1: |-
      class GenericParent<T> {
        process(value: T): T {
          return value;
        }
      }

      class ConcreteChild extends GenericParent<number> {
        process(value: number): number {
          return value * 2;
        }
      }
    check: |-
      let child = new ConcreteChild();
      assertEQ(child.process(5), 10);

    # case 5
  - desc: Verify method overriding with multiple generic parameters in a parent-child class relationship.
    dec1: |-
      class Parent<T, U> {
        process(a: T, b: U): [T, U] {
          return [a, b];
        }
      }

      class Child extends Parent<string, number> {
        process(a: string, b: number): [string, number] {
          return [a.toUpperCase(), b * 2];
        }
      }
    check: |-
      const child = new Child();
      const result = child.process("hi", 5);
      assertEQ(result[0], "HI");
      assertEQ(result[1], 10);

    # case 6
  - desc: Verify that a specialized subclass can extend a generic class and add new methods while inheriting existing functionality.
    dec1: |-
      class Generic<T> {
        items: Array<T> = new Array<T>();
        add(item: T): void {
          this.items.push(item);
        }
        get(index: number): T {
          return this.items[index];
        }
      }

      class StringList extends Generic<string> {
        constructor() {
          super();
      }
        join(separator: string): string {
          return this.items.join(separator);
        }
      }
    check: |-
      const list = new StringList();
      list.add("a");
      list.add("b");
      assertEQ(list.join("-"), "a-b");

    # case 7
  - desc: Verify that a generic subclass correctly overrides a method from a generic parent class while maintaining the same behavior.
    dec1: |-
     class GenericParent<T> {
       process(value: T): T {
        return value;
       }
     }

     class GenericChild<T> extends GenericParent<T> {
       process(value: T): T {
         return value;
       }
     }
    check: |-
      let child = new GenericChild<number>();
      assertEQ(child.process(5), 5);

    # case 8
  - desc: Generic method override generates a bridged method(string charAt).
    dec1: |-
      class Parent<T> {
        process(value: T): T {
          return value;
        }
      }

      class Child extends Parent<string> {
        process(value: string): string {
          let ch = new Char(value.charAt(1));
          return ch.toString();
        }
      }
    check: |-
      const child: Parent<string> = new Child();
      const result = child.process("hello");
      assertEQ(result, "e");

    # case 9
  - desc: Verify that a concrete subclass can override and modify the behavior of a generic parent class's method.
    dec1: |-
      class Builder<T> {
        value: T;
        constructor(value: T) {
          this.value = value;
        }
        build(): T {
          return this.value;
        }
      }

      class StringBuilder1 extends Builder<string> {
        constructor(value: string) {
        super(value);
        }
        build(): string {
          return super.build().toUpperCase();
        }
      }
    check: |-
      const builder = new StringBuilder1("construct");
      assertEQ(builder.build(), "CONSTRUCT");

    # case 10
  - desc: Verify that a generic class correctly overrides a method from its non-generic parent class.
    dec1: |-
      class NonGeneric {
        count: number = 0;
        increment(): number {
          return ++this.count;
        }
      }
      class Generic<T> extends NonGeneric {
        data: T;
        constructor(data: T) {
          super();
          this.data = data;
        }
        increment(): number {
          return this.count += 2;
        }
      }
    check: |-
      const instance = new Generic<boolean>(true);
      assertEQ(instance.increment(), 2);

    # case 11
  - desc: Test that a generic subclass correctly overrides a method from a generic parent class when instantiated with a specific type.
    dec1: |-
      class GenericParent<T> {
        process(value: T): T {
          return value;
        }
      }
      class StringChild extends GenericParent<string> {
        process(value: string): string {
          return value.toUpperCase();
        }
      }
    check: |-
      const child: GenericParent<string> = new StringChild();
      const result = child.process("test");
      assertEQ(result, "TEST");

    # case 12
  - desc: Test method overriding in a multi-level generic inheritance chain with type constraints.
    dec1: |-
      class Base<T> {
        value: T;
        constructor(value: T) {
          this.value = value;
        }
        process(): T {
          return this.value;
        }
      }

      class Middle<T extends string> extends Base<T> {
        constructor(value: T) {
          super(value);
        }
      }
      class Bottom extends Middle<string> {
        constructor(value: string) {
          super(value);
        }
        process(): string {
          return super.process().repeat(2);
        }
      }

    check: |-
      const instance = new Bottom("hi");
      assertEQ(instance.process(), "hihi");

    # case 13
  - desc: Verify that a child class correctly overrides a method from a generic parent class when accessed through the parent class type.
    dec1: |-
      class Parent<T> {
        process(value: T): T {
          return value;
        }
      }
      class Child extends Parent<string> {
        process(value: string): string {
          return value.toUpperCase();
        }
      }
    check: |-
      const child: Parent<string> = new Child();
      const result = child.process("hello");
      assertEQ(result, "HELLO");
