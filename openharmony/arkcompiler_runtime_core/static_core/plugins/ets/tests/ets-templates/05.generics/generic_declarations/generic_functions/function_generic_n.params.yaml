# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Testing generic parameters does not support operations.
cases_n:
  - desc: Tests that when the generic is int of number type, not supporting + operation.
    decl: |-
      function processType<T>(input: T): T {
        return (input + 2) as T;
      }
    logic: |-
      let result = processType<number>(2);

  - desc: Tests that when the generic is int of number type, not supporting - operation.
    decl: |-
      function processType<T>(input: T): T {
        let output: T = input - 2;
        return output as T;
      }
    logic: |-
      let result = processType<number>(2);

  - desc: Tests that when the generic is int of number type, not supporting * operation.
    decl: |-
      function processType<T>(input: T): T {
        let output: T = input * 2;
        return output as T;
      }
    logic: |-
      let result = processType<number>(2);

  - desc: Tests that when the generic is int of number type, not supporting / operation.
    decl: |-
      function processType<T>(input: T): T {
        let output: T = input / 2;
        return output as T;
      }
    logic: |-
      let result = processType<number>(2);

  - desc: Tests that when the generic is int of number type, not supporting % operation.
    decl: |-
      function processType<T>(input: T): T {
        let output: T = input % 2;
        return output as T;
      }
    logic: |-
      let result = processType<number>(2);