# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Validate the return value type of generic parameters.
cases:
  - desc: The return value type of a generic interface method is the same as the type parameter.
    decl: |-
      interface GenericInterface {
        getValue<T>(value: T): string;
      }

      class GenericClass implements GenericInterface {
        getValue<T>(value: T): string {
          return "Hello, ArkTS! with: " + value;
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue<number>(66), "Hello, ArkTS! with: 66");

  - desc: The return value type of a generic interface method is the same as the type parameter(no parameters).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class GenericClass implements GenericInterface<string> {
        getValue(): string {
          return "Hello, ArkTS!";
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue(), "Hello, ArkTS!");

  - desc: The return value type of a generic interface method is the same as the type parameter(double).
    decl: |-
      interface GenericInterface {
        getValue<T>(value: T): string;
      }

      class GenericClass implements GenericInterface {
        getValue<T>(value: T): string {
          return "Hello, ArkTS! with: " + value;
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue<double>(3.141592653589793), "Hello, ArkTS! with: 3.141592653589793");

  - desc: The return value type of a generic interface method is the same as the type parameter(float).
    decl: |-
      interface GenericInterface {
        getValue<T>(value: T): string;
      }

      class GenericClass implements GenericInterface {
        getValue<T>(value: T): string {
          return "Hello, ArkTS! with: " + value;
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue<number>(3.14), "Hello, ArkTS! with: 3.14");

  - desc: The return value type of a generic interface method is the same as the type parameter(string).
    decl: |-
      interface GenericInterface {
        getValue<T>(value: T): string;
      }

      class GenericClass implements GenericInterface {
        getValue<T>(value: T): string {
          return "Hello, ArkTS! with: " + value;
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue<string>('66'), "Hello, ArkTS! with: 66");

  - desc: The return type of a generic interface method is inconsistent with the type parameter.
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class GenericClass implements GenericInterface<string> {
        getValue(): string {
          return "123";
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue(), "123");

  - desc: The return type of a generic interface method is a complex type.
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class Animal {
          name: string = "Animal";
      }

      class GenericClass implements GenericInterface<Animal> {
        getValue(): Animal {
          return new Animal();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue().name, "Animal");
  
  - desc: The return type of a generic interface method is inconsistent with the type parameter(boolean).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class GenericClass implements GenericInterface<string> {
        getValue(): string {
          return "true";
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue(), "true");

  - desc: The return type of a generic interface method is a complex type(int).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class Animal {
          name: int = 66;
      }

      class GenericClass implements GenericInterface<Animal> {
        getValue(): Animal {
          return new Animal();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue().name as int, 66);

  - desc: The return type of a generic interface method is a complex type(float).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class Animal {
          name: float = 66.66;
      }

      class GenericClass implements GenericInterface<Animal> {
        getValue(): Animal {
          return new Animal();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertNE(stringValue.getValue().name as float, 66.66);

  - desc: The return type of a generic interface method is a complex type(double).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class Animal {
          name: double = 66.666666666;
      }

      class GenericClass implements GenericInterface<Animal> {
        getValue(): Animal {
          return new Animal();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue().name as double, 66.666666666);

  - desc: The return type of a generic interface method is a complex type(boolean).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class Animal {
          name: boolean = true;
      }

      class GenericClass implements GenericInterface<Animal> {
        getValue(): Animal {
          return new Animal();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue().name as boolean, true);

  - desc: The return type of a generic interface method is a complex type(readonly).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class Animal {
        readonly name: string = "Animal";
      }

      class GenericClass implements GenericInterface<Animal> {
        getValue(): Animal {
          return new Animal();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue().name, "Animal");

  - desc: The return type of a generic interface method is a complex type(union).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class Animal {
          name: "active" | "inactive" = "active";
      }

      class GenericClass implements GenericInterface<Animal> {
        getValue(): Animal {
          return new Animal();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue().name, "active");

  - desc: The return type of a generic interface method is a complex type(null).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class Animal {
        name: null = null;
      }

      class GenericClass implements GenericInterface<Animal> {
        getValue(): Animal {
          return new Animal();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue().name, null);

  - desc: The return type of a generic interface method is a complex type(undefined).
    decl: |-
      interface GenericInterface<T> {
        getValue(): T;
      }

      class Animal {
          name: undefined = undefined;
      }

      class GenericClass implements GenericInterface<Animal> {
        getValue(): Animal {
          return new Animal();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue().name, undefined);

  - desc: The return type of a generic interface method is optional.
    decl: |-
      interface GenericInterface<T> {
        getValue(): T | undefined;
      }

      class GenericClass implements GenericInterface<string> {
        getValue(): string | undefined {
          return "Hello, ArkTS!";
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue(), "Hello, ArkTS!");

  - desc: The return type of a generic interface method is class type.
    decl: |-
      interface GenericInterface<T> {
        getValue(): GenericInterface<T>;
      }

      class GenericClass implements GenericInterface<string> {
        getValue(): GenericInterface<string> {
          return new GenericClass();
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertNE(stringValue.getValue(), stringValue);

  - desc: The return value type of a generic interface method is a function.
    decl: |-
      interface GenericInterface<T> {
        getValue(): () => T;
      }

      class GenericClass implements GenericInterface<int> {
        getValue(): () => int {
          return () => 66;
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue()(), 66);

  - desc: The return value type of a generic interface method is a function(double).
    decl: |-
      interface GenericInterface<T> {
        getValue(): () => T;
      }

      class GenericClass implements GenericInterface<double> {
        getValue(): () => double {
          return () => 3.14;
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue()(), 3.14);

  - desc: The return value type of a generic interface method is a function(string).
    decl: |-
      interface GenericInterface<T> {
        getValue(): () => T;
      }

      class GenericClass implements GenericInterface<string> {
        getValue(): () => string {
          return () => 'hello';
        }
      }
    logic: |-
      let stringValue = new GenericClass();
      assertEQ(stringValue.getValue()(), 'hello');

  - desc: The return value type of a generic interface method is a enum type.
    decl: |-
      enum Color {
        Red,
        Green,
        Blue,
      }

      interface GenericInterface<T> {
        getEnumValue(): T;
      }

      class EnumValue implements GenericInterface<Color> {
        getEnumValue(): Color {
          return Color.Green;
        }
      }
    logic: |-
      let stringValue = new EnumValue();
      assertEQ(stringValue.getEnumValue() as number, 1);

  - desc: The return value type of a generic interface method is a enum type(string).
    decl: |-
      enum Color {
        Red = 'Red',
      }

      interface GenericInterface<T> {
        getEnumValue(): T;
      }

      class EnumValue implements GenericInterface<Color> {
        getEnumValue(): Color {
          return Color.Red;
        }
      }
    logic: |-
      let stringValue = new EnumValue();
      assertEQ(stringValue.getEnumValue() as string, 'Red');

  - desc: The return type of a generic interface method is a calculate function type.
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg * 2;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(33), 66);

  - desc: The return type of a generic interface method is a function type(return value is different types).
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg * 2;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertNE(stringValue.getFunctionValue()(33) + "", 'str');

  - desc: The return type of a generic interface method is a function type(return value is different types-null).
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg * 2;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertNE(stringValue.getFunctionValue()(33), null);

  - desc: The return type of a generic interface method is a function type(return value is different types-undefined).
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg * 2;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertNE(stringValue.getFunctionValue()(33), undefined);
