# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Implement interface functions using universal parameters for testing.
cases:
  - desc: Test that when the generic is of type number, the method internally multiplies the number by 2 and returns(33).
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg * 2;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(33), 66);

  - desc: Test that when the generic type is boolean, the method inverts the boolean value and returns it.
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<boolean> {
        getFunctionValue(): (arg: boolean) => boolean {
          return (arg: boolean) => !arg;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(true), false);

  - desc: When the generic is null, the method returns the original value directly.
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<null> {
        getFunctionValue(): (arg: null) => null {
          return (arg: null) => arg;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(null), null);

  - desc: When the generic is undefined, the method returns the original value directly.
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<undefined> {
        getFunctionValue(): (arg: undefined) => undefined {
          return (arg: undefined) => arg;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(undefined), undefined);

  - desc: Test that when the generic is of type number, the method internally multiplies the number by 2 and returns(-3).
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg * 2;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(-3), -6);

  - desc: Test that when the generic is of type number, the method internally multiplies the number by 2 and returns(0).
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg * 2;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(0), 0);

  - desc: When the generic type is number, the method internally subtracts 2 from the number and returns the number.
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg - 2;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(12), 10);

  - desc: When the generic type is number, the method divides the number by 2 and returns the value.
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg / 2;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(12), 6);

  - desc: When the generic type is number, the method returns the number modulo.
    decl: |-
      interface GenericInterface<T> {
        getFunctionValue(): (arg: T) => T;
      }

      class FunctionValue implements GenericInterface<number> {
        getFunctionValue(): (arg: number) => number {
          return (arg: number) => arg % 5;
        }
      }
    logic: |-
      let stringValue = new FunctionValue();
      assertEQ(stringValue.getFunctionValue()(12), 2);

