# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Validate generics as interface parameters.
cases:
  - desc: Two generic interfaces, using number and string as type parameters.
    decl: |-
      interface FirstInterface<T> {
        value: T;
        getValue(): T;
      }

      interface SecondInterface<U> {
        processValue(value: U): void;
      }

      class MyClass<T, U> implements FirstInterface<T>, SecondInterface<U> {
        value: T;

        constructor(value: T) {
          this.value = value;
        }

        getValue(): T {
          return this.value;
        }

        processValue(value: U): void {
          console.log(`Processing value: ${value}`);
        }
      }
    logic: |-
      const instance = new MyClass<number, string>(42);
      instance.processValue("Hello");
      assertEQ(instance.getValue(), 42);

  - desc: Two generic interfaces, using string and boolean as type parameters.
    decl: |-
      interface FirstInterface<T> {
        value: T;
        getValue(): T;
      }

      interface SecondInterface<U> {
        processValue(value: U): void;
      }

      class MyClass<T, U> implements FirstInterface<T>, SecondInterface<U> {
        value: T;

        constructor(value: T) {
          this.value = value;
        }

        getValue(): T {
          return this.value;
        }

        processValue(value: U): void {
          console.log(`Processing value: ${value}`);
        }
      }
    logic: |-
      const instance = new MyClass<string, boolean>("TypeScript");
      instance.processValue(true);
      assertEQ(instance.getValue(), "TypeScript");

  - desc: Two generic interfaces, using boolean and number as type parameters.
    decl: |-
      interface FirstInterface<T> {
        value: T;
        getValue(): T;
      }

      interface SecondInterface<U> {
        processValue(value: U): void;
      }

      class MyClass<T, U> implements FirstInterface<T>, SecondInterface<U> {
        value: T;

        constructor(value: T) {
          this.value = value;
        }

        getValue(): T {
          return this.value;
        }

        processValue(value: U): void {
          console.log(`Processing value: ${value}`);
        }
      }
    logic: |-
      const instance = new MyClass<boolean, number>(true);
      instance.processValue(100);
      assertEQ(instance.getValue(), true);

  - desc: Generic storage class, store and retrieve strings.
    decl: |-
      interface Istorage<T> {
        setItem(key: string, value: T): void;
        getItem(key: string): T | undefined;
      }

      class Storage<T> implements Istorage<T> {
        private items: Map<string, T> = new Map<string, T>();

        setItem(key: string, value: T): void {
          this.items.set(key, value);
        }

        getItem(key: string): T | undefined {
          return this.items.get(key);
        }
      }
    logic: |-
      const stringStorage = new Storage<string>();
      stringStorage.setItem("name", "Alice");
      assertEQ(stringStorage.getItem("name"), "Alice");

  - desc: Generic storage class, store and retrieve numbers.
    decl: |-
      interface Istorage<T> {
        setItem(key: string, value: T): void;
        getItem(key: string): T | undefined;
      }

      class Storage<T> implements Istorage<T> {
        private items: Map<string, T> = new Map<string, T>();

        setItem(key: string, value: T): void {
          this.items.set(key, value);
        }

        getItem(key: string): T | undefined {
          return this.items.get(key);
        }
      }
    logic: |-
      const numberStorage = new Storage<number>();
      numberStorage.setItem("age", 25);
      assertEQ(numberStorage.getItem("age"), 25);

  - desc: Generic storage class, store and retrieve objects.
    decl: |-
      interface Istorage<T> {
        setItem(key: string, value: T): void;
        getItem(key: string): T | undefined;
      }

      class Storage<T> implements Istorage<T> {
        private items: Map<string, T> = new Map<string, T>();

        setItem(key: string, value: T): void {
          this.items.set(key, value);
        }

        getItem(key: string): T | undefined {
          return this.items.get(key);
        }
      }

      interface User {
        id: number;
        name: string;
      }
    logic: |-
      const objectStorage = new Storage<User>();
      objectStorage.setItem("user", { id: 1, name: "Bob" });
      const user = objectStorage.getItem("user");
      if (user) {
        assertEQ(user.id, 1);
        assertEQ(user.name, "Bob");
      }

  - desc: Generic chained call, chained operation string.
    decl: |-
      interface Ichainable<T> {
        set(value: T): this;
        get(): T;
        transform(transformFn: (value: T) => T): this;
      }

      class Chainable<T> implements Ichainable<T> {
        private value: T;

        set(value: T): this {
          this.value = value;
          return this;
        }

        get(): T {
          return this.value;
        }

        transform(transformFn: (value: T) => T): this {
          this.value = transformFn(this.value);
          return this;
        }
      }
    logic: |-
      const chainableString = new Chainable<string>();
      chainableString.set("hello").transform((value) => value.toUpperCase());
      assertEQ(chainableString.get(), "HELLO");

  - desc: Generic chained call, chained operation number.
    decl: |-
      interface Ichainable<T> {
        set(value: T): this;
        get(): T;
        transform(transformFn: (value: T) => T): this;
      }

      class Chainable<T> implements Ichainable<T> {
        private value: T;

        set(value: T): this {
          this.value = value;
          return this;
        }

        get(): T {
          return this.value;
        }

        transform(transformFn: (value: T) => T): this {
          this.value = transformFn(this.value);
          return this;
        }
      }
    logic: |-
      const chainableNumber = new Chainable<number>();
      chainableNumber.set(10).transform((value) => value * 2);
      assertEQ(chainableNumber.get(), 20);

  - desc: Generic processor, handle strings as numbers.
    decl: |-
      interface Iprocessor<T, U> {
        process(input: T): U;
      }

      class Processor<T, U> implements Iprocessor<T, U> {
        private processorFn: (input: T) => U;

        constructor(processorFn: (input: T) => U) {
          this.processorFn = processorFn;
        }

        process(input: T): U {
          return this.processorFn(input);
        }
      }
    logic: |-
      const stringProcessor = new Processor<string, number>((input) => input.length);
      assertEQ(stringProcessor.process("hello"), 5);

  - desc: Generic processor, processing numbers as boolean values.
    decl: |-
      interface Iprocessor<T, U> {
        process(input: T): U;
      }

      class Processor<T, U> implements Iprocessor<T, U> {
        private processorFn: (input: T) => U;

        constructor(processorFn: (input: T) => U) {
          this.processorFn = processorFn;
        }

        process(input: T): U {
          return this.processorFn(input);
        }
      }
    logic: |-
      const numberProcessor = new Processor<number, boolean>((input) => input > 0);
      assertEQ(numberProcessor.process(10), true);
      assertEQ(numberProcessor.process(-5), false);

  - desc: Generic composite class, combined class's logging and verification functions.
    decl: |-
      let result = "";
      interface Ilogger<T> {
        log(message: T): void;
      }

      interface IValidator<T> {
        validate(input: T): boolean;
      }

      class ComboClass<T> implements Ilogger<T>, IValidator<T> {
        log(message: T): void {
          console.log(`Log: ${message}`);
          result = `Log: ${message}`;
        }

        validate(input: T): boolean {
          return Boolean(input);
        }
      }
    logic: |-
      const combo = new ComboClass<string>();
      combo.log("hello")
      assertEQ(result, "Log: hello");
      assertEQ(combo.validate("valid"), true);
      assertEQ(combo.validate(""), false);

  - desc: Generic factory class, create string instance.
    decl: |-
      interface Ifactory<T> {
        create(): T;
      }

      class Factory<T> implements Ifactory<T> {
        private constructorFn: () => T;

        constructor(constructorFn: () => T) {
          this.constructorFn = constructorFn;
        }

        create(): T {
          return this.constructorFn();
        }
      }
    logic: |-
      const stringFactory = new Factory<string>(() => "Hello");
      assertEQ(stringFactory.create(), "Hello");

  - desc: Generic factory class, create number instance.
    decl: |-
      interface Ifactory<T> {
        create(): T;
      }

      class Factory<T> implements Ifactory<T> {
        private constructorFn: () => T;

        constructor(constructorFn: () => T) {
          this.constructorFn = constructorFn;
        }

        create(): T {
          return this.constructorFn();
        }
      }
    logic: |-
      const numberFactory = new Factory<number>(() => 1);
      assertEQ(numberFactory.create(), 1);

  - desc: Generic factory class, create objects instance.
    decl: |-
      interface Ifactory<T> {
        create(): T;
      }

      class Factory<T> implements Ifactory<T> {
        private constructorFn: () => T;

        constructor(constructorFn: () => T) {
          this.constructorFn = constructorFn;
        }

        create(): T {
          return this.constructorFn();
        }
      }

      interface IObjectWithId {
        id: number;
      }
    logic: |- 
      const objectFactory = new Factory<IObjectWithId>(() => ({ id: 1 }));
      const createdObject = objectFactory.create();
      assertEQ(createdObject.id, 1);
