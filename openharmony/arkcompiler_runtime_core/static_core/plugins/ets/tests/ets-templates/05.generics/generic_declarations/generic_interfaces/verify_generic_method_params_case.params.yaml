# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Interfaces with static members and type parameters inside
cases:
  - desc: Class methods implement interfaces for generic parameters.
    decl: |-
      interface Processor<T> {
        process(value: T): T;
      }

      class StringProcessor implements Processor<string> {
        process(value: string): string {
          return value.toUpperCase();
        }
      }
    logic: |-
      const processor = new StringProcessor();
      const longString = "a".repeat(10000);
      const result = processor.process(longString);
      assertEQ(result, longString.toUpperCase());

  - desc: Verify that the method accepts undefined and returns undefined.
    decl: |-
      interface UndefinedProcessor {
        process(value: undefined): undefined;
      }

      class UndefinedProcessorImpl implements UndefinedProcessor {
        process(value: undefined): undefined {
          return undefined;
        }
      }
    logic: |-
      const processor = new UndefinedProcessorImpl();
      const result = processor.process(undefined);
      assertEQ(result, undefined);

  - desc: Verify that the method accepts a function type with parameters and returns a function type.
    decl: |-
      interface Processor<T> {
        process(value: T): T;
      }

      class FunctionWithParamsProcessor implements Processor<(x: number) => number> {
        process(value: (x: number) => number): (x: number) => number {
          return (x: number) => value(x) * 2;
        }
      }
    logic: |-
      const processor = new FunctionWithParamsProcessor();
      const result = processor.process((x: number) => x + 1)(5);
      assertEQ(result, 12);

  - desc: Verify that the method processes negative numbers and returns the correct doubled value.
    decl: |-
      interface NumberProcessor {
        process(value: number): number;
      }

      class NumberProcessorImpl implements NumberProcessor {
        process(value: number): number {
          return value * 2;
        }
      }
    logic: |-
      const processor = new NumberProcessorImpl();
      const result = processor.process(-2);
      assertEQ(result, -4);

  - desc: Verify that the method processes decimal numbers and returns the correct doubled value.
    decl: |-
      interface NumberProcessor {
          process(value: number): number;
      }

      class NumberProcessorImpl implements NumberProcessor {
          process(value: number): number {
              return value * 2;
          }
      }
    logic: |-
      const processor = new NumberProcessorImpl();
      const result = processor.process(1.2);
      assertEQ(result, 2.4);

  - desc: Verify that the method processes a standard string and converts it to uppercase correctly.
    decl: |-
      interface Processor<T> {
          process(value: T): T;
      }

      class StringProcessor implements Processor<string> {
          process(value: string): string {
            return value.toUpperCase();
          }
      }
    logic: |-
      const processor = new StringProcessor();
      const result = processor.process("hello");
      assertEQ(result, "HELLO");

  - desc: Verify that the method accepts a tuple type and returns a tuple type.
    decl: |-
      interface Processor<T> {
          process(value: T): T;
      }

      class TupleProcessor implements Processor<[string, number]> {
          process(value: [string, number]): [string, number] {
              return [value[0].toUpperCase(), value[1] * 2];
          }
      }
    logic: |-
      const processor = new TupleProcessor();
      const result = processor.process(["hello", 5]);
      assertEQ(result[0], "HELLO");
      assertEQ(result[1], 10);

  - desc: Verify that the method accepts null and returns null.
    decl: |-
      interface NullProcessor {
        process(value: null): null;
      }

      class NullProcessorImpl implements NullProcessor {
        process(value: null): null {
          return null;
        }
      }
    logic: |-
      const processor = new NullProcessorImpl();
      const result = processor.process(null);
      assertEQ(result, null);

  - desc: Verify that the method processes zero and returns the correct doubled value.
    decl: |-
      interface NumberProcessor {
        process(value: number): number;
      }

      class NumberProcessorImpl implements NumberProcessor {
        process(value: number): number {
          return value * 2;
        }
      }
    logic: |-
      const processor = new NumberProcessorImpl();
      const result = processor.process(0);
      assertEQ(result, 0);

  - desc: Verify that the method accepts a function type and returns a function type.
    decl: |-
      interface Processor<T> {
        process(value: T): T;
      }

      class FunctionTypeProcessor implements Processor<() => string> {
        process(value: () => string): () => string {
          return () => value().toUpperCase();
        }
      }
    logic: |-
      const processor = new FunctionTypeProcessor();
      const result = processor.process(() => "hello")();
      assertEQ(result, "HELLO");

  - desc: Verify that the method processes special character strings and returns the correct uppercase result.
    decl: |-
      interface Processor<T> {
        process(value: T): T;
      }

      class StringProcessor implements Processor<string> {
        process(value: string): string {
          return value.toUpperCase();
        }
      }
    logic: |-
      const processor = new StringProcessor();
      const result = processor.process("!@#$%^&*()");
      assertEQ(result, "!@#$%^&*()");

  - desc: Verify that the method accepts a normal string and returns a string.
    decl: |-
      interface StringProcessor {
        process(value: string): string;
      }

      class StringProcessorImpl implements StringProcessor {
        process(value: string): string {
          return value.toUpperCase();
        }
      }
    logic: |-
      const processor = new StringProcessorImpl();
      const result = processor.process("hello");
      assertEQ(result, "HELLO");

  - desc: Verify that the method accepts a function type with multiple parameters and returns a function type.
    decl: |-
      interface Processor<T> {
        process(value: T): T;
      }

      class FunctionWithMultipleParamsProcessor implements Processor<(x: number, y: number) => number> {
        process(value: (x: number, y: number) => number): (x: number, y: number) => number {
          return (x: number, y: number) => value(x, y) * 2;
        }
      }
    logic: |-
      const processor = new FunctionWithMultipleParamsProcessor();
      const result = processor.process((x: number, y: number) => x + y)(5, 10);
      assertEQ(result, 30);

  - desc: Verify that the method processes multi-line strings and converts each line to uppercase correctly.
    decl: |-
      interface Processor<T> {
        process(value: T): T;
      }

      class StringProcessor implements Processor<string> {
        process(value: string): string {
          return value.toUpperCase();
        }
      }
    logic: |-
      const processor = new StringProcessor();
      const multiLineString = "Line 1\nLine 2\nLine 3";
      const result = processor.process(multiLineString);
      assertEQ(result, "LINE 1\nLINE 2\nLINE 3");

  - desc: Verify that the method accepts a positive integer and returns a number.
    decl: |-
      interface NumberProcessor {
        process(value: number): number;
      }

      class NumberProcessorImpl implements NumberProcessor {
        process(value: number): number {
          return value * 2;
        }
      }
    logic: |-
      const processor = new NumberProcessorImpl();
      const result = processor.process(5);
      assertEQ(result, 10);