# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - { stype: 'Object[]', src: 'new Object[1]', dtype: Object }
  - { stype: 'Object[][]', src: 'new Object[1][1]', dtype: Object }
  - { stype: 'Object[][]', src: 'new Object[1][1]', dtype: 'Object[]' }

  - { stype: '() => void', src: '() => { return; }', dtype: Object }
  - { stype: '(() => void)[]', src: '[]', dtype: Object }

  - { stype: 'Byte', src: 'new Byte()', dtype: Object }
  - { stype: 'Short', src: 'new Short()', dtype: Object }
  - { stype: 'Char', src: 'new Char()', dtype: Object }
  - { stype: 'Int', src: 'new Int()', dtype: Object }
  - { stype: 'Long', src: 'new Long()', dtype: Object }
  - { stype: 'Float', src: 'new Float()', dtype: Object }
  - { stype: 'Double', src: 'new Double()', dtype: Object }

  - { stype: 'Byte[]', src: 'new Byte[1]', dtype: Object }
  - { stype: 'Short[]', src: 'new Short[1]', dtype: Object }
  - { stype: 'Char[]', src: 'new Char[1]', dtype: Object }
  - { stype: 'Int[]', src: 'new Int[1]', dtype: Object }
  - { stype: 'Long[]', src: 'new Long[1]', dtype: Object }
  - { stype: 'Float[]', src: 'new Float[1]', dtype: Object }
  - { stype: 'Double[]', src: 'new Double[1]', dtype: Object }

  - { stype: 'Byte[]', src: 'new Byte[1]', dtype: 'Object[]' }
  - { stype: 'Short[]', src: 'new Short[1]', dtype: 'Object[]' }
  - { stype: 'Char[]', src: 'new Char[1]', dtype: 'Object[]' }
  - { stype: 'Int[]', src: 'new Int[1]', dtype: 'Object[]' }
  - { stype: 'Long[]', src: 'new Long[1]', dtype: 'Object[]' }
  - { stype: 'Float[]', src: 'new Float[1]', dtype: 'Object[]' }
  - { stype: 'Double[]', src: 'new Double[1]', dtype: 'Object[]' }

  - { stype: 'Byte', src: 'new Byte()', dtype: Integral }
  - { stype: 'Short', src: 'new Short()', dtype: Integral }
  - { stype: 'Int', src: 'new Int()', dtype: Integral }
  - { stype: 'Long', src: 'new Long()', dtype: Integral }
  - { stype: 'Float', src: 'new Float()', dtype: Floating }
  - { stype: 'Double', src: 'new Double()', dtype: Floating }

  - { stype: 'Byte', src: 'new Byte()', dtype: 'Comparable<Byte>' }
  - { stype: 'Short', src: 'new Short()', dtype: 'Comparable<Short>' }
  - { stype: 'Char', src: 'new Char()', dtype: 'Comparable<Char>' }
  - { stype: 'Int', src: 'new Int()', dtype: 'Comparable<Int>' }
  - { stype: 'Long', src: 'new Long()', dtype: 'Comparable<Long>' }
  - { stype: 'Float', src: 'new Float()', dtype: 'Comparable<Float>' }
  - { stype: 'Double', src: 'new Double()', dtype: 'Comparable<Double>' }

  - defs: |-
      enum Color {Red, Green, Blue}
    stype: Color
    src: Color.Red
    dtype: Object

  - defs: |-
      enum Color {Red, Green, Blue}
    stype: 'Color[]'
    src: '[Color.Red, Color.Blue]'
    dtype: Object

  - defs: |-
      enum Color {Red, Green, Blue}
    stype: 'Color[]'
    src: '[Color.Red, Color.Blue]'
    dtype: 'Object[]'

  - defs: |-
      interface I {}
      class A implements I {}
    stype: I
    src: new A()
    dtype: Object

  - defs: |-
      interface I {}
      class A implements I {}
    stype: 'I[]'
    src: 'new I[1]'
    dtype: Object

  - defs: |-
      interface I {}
      class A implements I {}
    stype: 'I[]'
    src: 'new I[1]'
    dtype: 'Object[]'

  - defs: |-
      class A {}
      class B<T> {}
    stype: B<A>
    src: new B<A>()
    dtype: Object

  - defs: |-
      class A {}
      class B<T> {}
      class C<T> extends B<T> {}
    stype: C<A>
    src: new C<A>()
    dtype: B<A>

  - defs: |-
      interface I {}
      class B<T> {}
      class C<T> extends B<T> {}
    stype: C<I>
    src: new C<I>()
    dtype: B<I>

  - stype: |-
      ((a: Double) => double)[][]|null
    src: |-
      null
    dtype: Object[]|null
