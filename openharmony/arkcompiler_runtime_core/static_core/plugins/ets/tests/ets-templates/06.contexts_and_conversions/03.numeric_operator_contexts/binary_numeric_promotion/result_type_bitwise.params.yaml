# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - { type: byte, val: 1 as byte, rt: byte, rv: 1 as byte, op: '&', res: 3 }
  - { type: byte, val: 1 as byte, rt: short, rv: 1 as short, op: '^', res: 3 }
  - { type: byte, val: 1 as byte, rt: char, rv: "c'0'", op: '|', res: 3 }
  - { type: byte, val: 1 as byte, rt: int, rv: 1, op: '&', res: 3 }
  - { type: byte, val: 1 as byte, rt: long, rv: 1 as long, op: '^', res: 4 }
  - { type: byte, val: 1 as byte, rt: float, rv: 1.0 as float, op: '&', res: 3 }
  - { type: byte, val: 1 as byte, rt: double, rv: 4, op: '^', res: 4 }

  - { type: byte, val: 1 as byte, rt: Byte, rv: new Byte(1 as byte), op: '|', res: 3 }
  - { type: byte, val: 1 as byte, rt: Short, rv: new Short(1 as short), op: '&', res: 3 }
  - { type: byte, val: 1 as byte, rt: Char, rv: new Char(c'0'), op: '^', res: 3 }
  - { type: byte, val: 1 as byte, rt: Int, rv: new Int(1), op: '|', res: 3 }
  - { type: byte, val: 1 as byte, rt: Long, rv: new Long(1 as long), op: '&', res: 4 }
  - { type: byte, val: 1 as byte, rt: Float, rv: new Float(1.0 as float), op: '|', res: 3 }
  - { type: byte, val: 1 as byte, rt: Double, rv: new Double(1.0), op: '&', res: 4 }

  - { type: short, val: 1 as short, rt: byte, rv: 1 as byte, op: '^', res: 3 }
  - { type: short, val: 1 as short, rt: short, rv: 1 as short, op: '|', res: 3 }
  - { type: short, val: 1 as short, rt: char, rv: "c'0'", op: '&', res: 3 }
  - { type: short, val: 1 as short, rt: int, rv: 1, op: '^', res: 3 }
  - { type: short, val: 1 as short, rt: long, rv: 1 as long, op: '|', res: 4 }
  - { type: short, val: 1 as short, rt: float, rv: 1.0 as float, op: '^', res: 3 }
  - { type: short, val: 1 as short, rt: double, rv: 1.0, op: '&', res: 4 }

  - { type: short, val: 1 as short, rt: Byte, rv: new Byte(1 as byte), op: '&', res: 3 }
  - { type: short, val: 1 as short, rt: Short, rv: new Short(1 as short), op: '^', res: 3 }
  - { type: short, val: 1 as short, rt: Char, rv: new Char(c'0'), op: '|', res: 3 }
  - { type: short, val: 1 as short, rt: Int, rv: new Int(1), op: '&', res: 3 }
  - { type: short, val: 1 as short, rt: Long, rv: new Long(1 as long), op: '^', res: 4 }
  - { type: short, val: 1 as short, rt: Float, rv: new Float(1.0 as float), op: '^', res: 3 }
  - { type: short, val: 1 as short, rt: Double, rv: new Double(1.0), op: '|', res: 4 }

  - { type: char, val: "c'2'", rt: byte, rv: 1 as byte, op: '|', res: 3 }
  - { type: char, val: "c'2'", rt: short, rv: 1 as short, op: '&', res: 3 }
  - { type: char, val: "c'2'", rt: char, rv: "c'0'", op: '^', res: 5 }
  - { type: char, val: "c'2'", rt: int, rv: 1, op: '|', res: 3 }
  - { type: char, val: "c'2'", rt: long, rv: 1 as long, op: '&', res: 4 }
  - { type: char, val: "c'2'", rt: float, rv: 1.0 as float, op: '&', res: 3 }
  - { type: char, val: "c'2'", rt: double, rv: 1.0, op: '^', res: 4 }

  - { type: char, val: "c'2'", rt: Byte, rv: new Byte(1 as byte), op: '^', res: 3 }
  - { type: char, val: "c'2'", rt: Short, rv: new Short(1 as short), op: '|', res: 3 }
  - { type: char, val: "c'2'", rt: Char, rv: new Char(c'0'), op: '&', res: 5 }
  - { type: char, val: "c'2'", rt: Int, rv: new Int(1), op: '^', res: 3 }
  - { type: char, val: "c'2'", rt: Long, rv: new Long(1 as long), op: '|', res: 4 }
  - { type: char, val: "c'2'", rt: Float, rv: new Float(1.0 as float), op: '|', res: 3 }
  - { type: char, val: "c'2'", rt: Double, rv: new Double(1.0), op: '&', res: 4 }

  - { type: int, val: 1, rt: byte, rv: 1 as byte, op: '&', res: 3 }
  - { type: int, val: 1, rt: short, rv: 1 as short, op: '^', res: 3 }
  - { type: int, val: 1, rt: char, rv: "c'0'", op: '|', res: 3 }
  - { type: int, val: 1, rt: int, rv: 1, op: '&', res: 3 }
  - { type: int, val: 1, rt: long, rv: 1 as long, op: '^', res: 4 }
  - { type: int, val: 1, rt: float, rv: 1.0 as float, op: '^', res: 3 }
  - { type: int, val: 1, rt: double, rv: 1.0, op: '|', res: 4 }

  - { type: int, val: 1, rt: Byte, rv: new Byte(1 as byte), op: '|', res: 3 }
  - { type: int, val: 1, rt: Short, rv: new Short(1 as short), op: '&', res: 3 }
  - { type: int, val: 1, rt: Char, rv: new Char(c'0'), op: '^', res: 3 }
  - { type: int, val: 1, rt: Int, rv: new Int(1), op: '|', res: 3 }
  - { type: int, val: 1, rt: Long, rv: new Long(1 as long), op: '&', res: 4 }
  - { type: int, val: 1, rt: Float, rv: new Float(1.0 as float), op: '&', res: 3 }
  - { type: int, val: 1, rt: Double, rv: new Double(1.0), op: '^', res: 4 }

  - { type: long, val: 1 as long, rt: byte, rv: 1 as byte, op: '^', res: 4 }
  - { type: long, val: 1 as long, rt: short, rv: 1 as short, op: '|', res: 4 }
  - { type: long, val: 1 as long, rt: char, rv: "c'0'", op: '&', res: 4 }
  - { type: long, val: 1 as long, rt: int, rv: 1, op: '^', res: 4 }
  - { type: long, val: 1 as long, rt: long, rv: 1 as long, op: '|', res: 4 }
  - { type: long, val: 1 as long, rt: float, rv: 1.0 as float, op: '|', res: 3 }
  - { type: long, val: 1 as long, rt: double, rv: 1.0, op: '&', res: 4 }

  - { type: long, val: 1 as long, rt: Byte, rv: new Byte(1 as byte), op: '&', res: 4 }
  - { type: long, val: 1 as long, rt: Short, rv: new Short(1 as short), op: '^', res: 4 }
  - { type: long, val: 1 as long, rt: Char, rv: new Char(c'0'), op: '|', res: 4 }
  - { type: long, val: 1 as long, rt: Int, rv: new Int(1), op: '&', res: 4 }
  - { type: long, val: 1 as long, rt: Long, rv: new Long(1 as long), op: '^', res: 4 }
  - { type: long, val: 1 as long, rt: Float, rv: new Float(1.0 as float), op: '&', res: 3 }
  - { type: long, val: 1 as long, rt: Double, rv: new Double(1.0), op: '^', res: 4 }
