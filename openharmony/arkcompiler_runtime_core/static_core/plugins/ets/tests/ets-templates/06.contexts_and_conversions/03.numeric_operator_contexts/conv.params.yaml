# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # identity
  - { op: '-', type1: double, v1: 0.00000000000000000000001, type2: double, v2: 0.00000000000000000000001, res: 0.0 }

  # widening primitive
  - { op: '*', type1: byte, v1: 1, type2: short, v2: 1, res: 1 }
  - { op: '+', type1: short, v1: 100, type2: double, v2: 100.0, res: 200.0 }
  - { op: '/', type1: double, v1: 100.0, type2: long, v2: 2, res: 50.0 }

  # widening reference conversion followed by an unboxing conversion
  - defs: |-
      function foo<T extends Double>(p: T): double {
          return 1.0 + p;
      }
    op: '-'
    type1: double
    v1: foo <Double> (new Double(3.14))
    type2: double
    v2: foo <Double> (new Double(3.14))
    res: 0.0

  - defs: |-
      function foo<T extends Int>(p: T): int {
          return 100000 + p;
      }
    op: '+'
    type1: int
    v1: foo <Int> (new Int(1))
    type2: int
    v2: foo <Int> (new Int(-1))
    res: 200000

# widening reference conversion followed by an unboxing conversion, then followed by a widening primitive conversion
  - defs: |-
      function foo<T extends Float>(p: T): double {
          return 1.0 + p;
      }
    op: '-'
    type1: double
    v1: foo <Float> (new Float(3.14 as float))
    type2: double
    v2: foo <Float> (new Float(3.14 as float))
    res: 0.0

  - defs: |-
      function foo<T extends Short>(p: T): int {
          return 100000 + p;
      }
    op: '+'
    type1: int
    v1: foo <Short> (new Short(1 as short))
    type2: int
    v2: foo <Short> (new Short((-1) as short))
    res: 200000

# unboxing conversion
  - { op: '-', type1: Int, v1: new Int(1), type2: int, v2: 1, res: 0 }
  - { op: '/', type1: double, v1: 0.1, type2: Double, v2: new Double(0.1), res: 1.0 }

# unboxing conversion followed by a widening primitive conversion
  - { op: '-', type1: Byte, v1: new Byte(2 as byte), type2: int, v2: 1, res: 1 }
  - { op: '*', type1: Float, v1: new Float(0.0 as float), type2: double, v2: 3.14, res: 0.0 }
