# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - defs: |-
      class S<V> {}
      class T<V> extends S<V> {
          public res: int = 42;
      }
    stype: S<Int>
    sval: new T<Int>()
    dtype: T<Int>
    dval: src as T<Int>

  - defs: |-
      interface S<V> {
          res: int;
      }
      interface T<V> extends S<V> {}
      class B<V> implements T<V> {
          res: int = 42;
      }
    stype: S<Long>
    sval: new B<Long>()
    dtype: T<Long>
    dval: src as T<Long>

  - defs: |-
      interface T<V> {
          res: int;
      }
      class S<V> {}
      class Z<V> extends S<V> implements T<V> {
          res: int = 42;
      }
    stype: S<Exception>
    sval: new Z<Exception>()
    dtype: T<Exception>
    dval: src as T<Exception>

  - defs: |-
      interface T<V> {
          res: int;
      }
      class S<V> implements T<V> {
          res: int = 42;
      }
    stype: S<Byte>
    sval: new S<Byte>()
    dtype: T<Byte>
    dval: src as T<Byte>

  - defs: |-
      interface S<V> {}
      class T<V> {
          public res: int = 42;
      }
      class Z<V> extends T<V> implements S<V> {}
    stype: S<Int>
    sval: new Z<Int>()
    dtype: T<Int>
    dval: src as T<Int>

  - defs: |-
      interface S<V> {}
      class T<V> implements S<V> {
          public res: int = 42;
      }
    stype: S<Int>
    sval: new T<Int>()
    dtype: T<Int>
    dval: src as T<Int>

  - defs: |-
      class A {}
      class B extends A {}
      class C extends B {
          public res: int = 42;
      }
      class BBox<S extends A> {
          public v: A
          public constructor (p: S) {
              this.v = p
          }
      }
    stype: BBox<A>
    sval: new BBox<A>(new C())
    dtype: C
    dval: src.v as C

  - defs: |-
      class C {
          public res: int = 42;
      }
      class BBox<S extends Object> {
          public v: Object;
          public constructor(p: S) {
              this.v = p
          }
      }
    stype: BBox<Object>
    sval: new BBox<Object>(new C())
    dtype: C
    dval: src.v as C

  - defs: |-
      interface I {}
      class B implements I {}
      class C extends B {
          public res: int = 42;
      }
      class BBox<S extends I> {
          public v: I
          public constructor(p: S) {
              this.v = p
          }
      }
    stype: BBox<B>
    sval: new BBox<B>(new C())
    dtype: C
    dval: src.v as C

  - defs: |-
      interface I {}
      class B implements I {}
      class C extends B {
          public res: int = 42;
      }
      class BBox<S extends I> {
          public v: I
          public constructor(p: S) {
              this.v = p
          }
      }
    stype: BBox<I>
    sval: new BBox<I>(new C())
    dtype: C
    dval: src.v as C
