# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # tuples
  - defs: |-
      let s: [Object, Boolean, Long] = [new Object(), new Boolean(), new Long()]
    stype: 'Object'
    val: s
    dtype: '[Object, Boolean, Long]'

  - defs: |-
      type TT = [int, string, Error]
      let s: TT = [42, "A", new Error()]
    stype: 'Object'
    val: s
    dtype: TT

  - { stype: 'Object', val: '[] as []', dtype: '[]' } # empty tuple

  # functions
  - defs: |-
      let f = (): void => {}
    stype: 'Object'
    val: f
    dtype: '() => void'

  - defs: |-
      function foo(p: int): Int {
          return new Int(p)
      }
    stype: Object
    val: foo
    dtype: '(p: int) => Int'

  # classes
  - defs: |-
      class A {}
      class B extends A {}
    stype: A
    val: new B()
    dtype: B

  - defs: |-
      class A {}
      class B extends A {}
    stype: Object
    val: new B()
    dtype: B

  - defs: |-
      class A {}
      class B extends A {}
    stype: Object
    val: new B()
    dtype: A

  - defs: |-
      class A {}
      class B extends A {}
      class C extends B {}
    stype: A
    val: new C()
    dtype: B

  # interfaces
  - defs: |-
      interface J {}
      class A implements J {}
    stype: J
    val: new A()
    dtype: A

  - defs: |-
      interface J {}
      class A implements J {}
    stype: Object
    val: new A()
    dtype: J

  - defs: |-
      interface I {}
      interface J extends I {}
      class A implements J {}
    stype: I
    val: new A()
    dtype: J

  - defs: |-
      interface I {}
      class A {}
      class B extends A implements I {}
    stype: I
    val: new B()
    dtype: A

  - defs: |-
      interface I {}
      class A {}
      class B extends A implements I {}
    stype: A
    val: new B()
    dtype: I

  - defs: |-
      interface I {}
      class A {}
      class B extends A implements I {}
    stype: A[]
    val: new B[1]
    dtype: I[]

  - defs: |-
      interface I {}
      interface J {}
      class A implements I, J {}
    stype: I
    val: new A()
    dtype: J

  - defs: |-
      interface I {}
      class A implements I {}
      class B extends A {}
    stype: I
    val: new B()
    dtype: A

  # array of classes
  - { stype: 'Object', val: '[new Object(), new Object()]', dtype: 'Object[]' }

  - defs: |-
      class A {}
      class B extends A {}
    stype: A[]
    val: '[new B()] as B[]'
    dtype: B[]

  - defs: |-
      class A {}
      class B extends A {}
    stype: Object[]
    val: '[new B(), new B()] as B[]'
    dtype: B[]

  - defs: |-
      class A {}
      class B extends A {}
    stype: Object[]
    val: '[new B(), new B()] as B[]'
    dtype: A[]

  - defs: |-
      class A {}
      class B extends A {}
      class C extends B {}
    stype: A[]
    val: '[new C()] as C[]'
    dtype: B[]

  - defs: |-
      class S<V> {}
      class T<V> extends S<V> {}
    stype: S<Int>[]
    val: new T<Int>[1]
    dtype: T<Int>[]

  - defs: |-
      class A {}
    stype: Object[]
    val: new A[1]
    dtype: A[]

  - defs: |-
      class A {}
    stype: Object
    val: new A[1]
    dtype: A[]

  - defs: |-
      class A {}
    stype: Object
    val: new A[1][1][1]
    dtype: Object[][]

  # array of interfaces
  - defs: |-
      interface J {}
      class A implements J {}
    stype: J[]
    val: new A[1]
    dtype: A[]

  - defs: |-
      interface J {}
      class A implements J {}
    stype: Object[]
    val: new A[1]
    dtype: J[]

  - defs: |-
      interface I {}
      interface J extends I {}
      class A implements J {}
    stype: I[]
    val: new A[1]
    dtype: J[]

  - defs: |-
      interface I {}
      interface J {}
      class A implements I, J {}
    stype: I[]
    val: new A[1]
    dtype: J[]

  - defs: |-
      interface I {}
      class A {}
      class B extends A implements I {}
    stype: I[]
    val: new B[1]
    dtype: A[]

  - defs: |-
      interface I {}
      class A implements I {}
      class B extends A {}
    stype: I[]
    val: new B[1]
    dtype: A[]

  # array of functions
  - defs: |-
      type F = () => void
      let f: F = (): void => {}
    stype: 'Object'
    val: '[f, f, f] as F[]'
    dtype: 'F[]'

  - defs: |-
      type F = (p: int) => Int
      function foo(p: int): Int {
          return new Int(p)
      }
    stype: 'Object'
    val: '[foo, foo] as F[]'
    dtype: 'F[]'
