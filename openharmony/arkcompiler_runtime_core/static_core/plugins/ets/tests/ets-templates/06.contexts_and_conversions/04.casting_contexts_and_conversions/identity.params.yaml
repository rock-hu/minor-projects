# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - types:
      - { type: byte, expr: 0x55 as byte, op: '!=' }
      - { type: char, expr: "c'W'", op: '!=' }
      - { type: short, expr: 0x5555 as short, op: '!=' }
      - { type: int, expr: 0x12121212 as int, op: '!=' }
      - { type: long, expr: 0x3434343456565656 as long, op: '!=' }
      - { type: float, expr: 0.00001 as float, op: '!=' }
      - { type: double, expr: 0.00000000001 as double, op: '!=' }
      - { type: Boolean, expr: new Boolean(true), op: '!==' }
      - { type: Byte, expr: new Byte(new Int(1).byteValue()), op: '!==' }
      - { type: Char, expr: new Char(c'A'), op: '!==' }
      - { type: ClassNotFoundException, expr: new ClassNotFoundException("msg"), op: '!==' }
      - { type: 'char[]', expr: "[c'A', c'B']", op: '!==' }
      - { type: '(x: Char) => char', expr: '(p: Char): char => { return p.unboxed(); }', op: '!==' }
      - { type: '((x: Char) => char)[]', expr: '[(p: Char): char => { return p.unboxed(); }]', op: '!==' }
      - { type: Foo, expr: '(p: Char): char => { return p.unboxed(); }', op: '!==' }
      - { type: 'Foo[]', expr: '[(p: Char): char => { return p.unboxed(); }]', op: '!==' }
      - { type: 'Color', expr: Color.Red, op: '!==' }
      - { type: 'Color[]', expr: '[Color.Blue]', op: '!==' }
