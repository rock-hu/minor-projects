# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - { stype: byte, sval: 0 as byte, dtype: boolean }
  - { stype: byte, sval: 0 as byte, dtype: Boolean }

  - { stype: char, sval: "c'X'", dtype: boolean }
  - { stype: char, sval: "c'X'", dtype: Boolean }

  - { stype: short, sval: 0 as short, dtype: boolean }
  - { stype: short, sval: 0 as short, dtype: Boolean }

  - { stype: int, sval: 0 as int, dtype: boolean }
  - { stype: int, sval: 0 as int, dtype: Boolean }

  - { stype: long, sval: 0 as long, dtype: boolean }
  - { stype: long, sval: 0 as long, dtype: Boolean }

  - { stype: float, sval: 0.0 as float, dtype: boolean }
  - { stype: float, sval: 0.0 as float, dtype: Boolean }

  - { stype: double, sval: 0.0 as double, dtype: boolean }
  - { stype: double, sval: 0.0 as double, dtype: Boolean }

  - { stype: boolean, sval: 'true', dtype: byte }
  - { stype: boolean, sval: 'true', dtype: short }
  - { stype: boolean, sval: 'true', dtype: char }
  - { stype: boolean, sval: 'true', dtype: int }
  - { stype: boolean, sval: 'true', dtype: long }
  - { stype: boolean, sval: 'true', dtype: float }
  - { stype: boolean, sval: 'true', dtype: double }
  - { stype: boolean, sval: 'true', dtype: Byte }
  - { stype: boolean, sval: 'true', dtype: Short }
  - { stype: boolean, sval: 'true', dtype: Char }
  - { stype: boolean, sval: 'true', dtype: Int }
  - { stype: boolean, sval: 'true', dtype: Long }
  - { stype: boolean, sval: 'true', dtype: Float }
  - { stype: boolean, sval: 'true', dtype: Double }

  - { stype: Byte, sval: new Byte(0 as byte), dtype: boolean }
  - { stype: Byte, sval: new Byte(0 as byte), dtype: Boolean }

  - { stype: Char, sval: new Char(c'X'), dtype: boolean }
  - { stype: Char, sval: new Char(c'X'), dtype: Boolean }

  - { stype: Short, sval: new Short(0 as short), dtype: boolean }
  - { stype: Short, sval: new Short(0 as short), dtype: Boolean }

  - { stype: Int, sval: new Int(0 as int), dtype: boolean }
  - { stype: Int, sval: new Int(0 as int), dtype: Boolean }

  - { stype: Long, sval: new Long(0 as long), dtype: boolean }
  - { stype: Long, sval: new Long(0 as long), dtype: Boolean }

  - { stype: Float, sval: new Float(0 as float), dtype: boolean }
  - { stype: Float, sval: new Float(0 as float), dtype: Boolean }

  - { stype: Double, sval: new Double(0 as double), dtype: boolean }
  - { stype: Double, sval: new Double(0 as double), dtype: Boolean }

  - { stype: Boolean, sval: new Boolean('true'), dtype: byte }
  - { stype: Boolean, sval: new Boolean('true'), dtype: short }
  - { stype: Boolean, sval: new Boolean('true'), dtype: char }
  - { stype: Boolean, sval: new Boolean('true'), dtype: int }
  - { stype: Boolean, sval: new Boolean('true'), dtype: long }
  - { stype: Boolean, sval: new Boolean('true'), dtype: float }
  - { stype: Boolean, sval: new Boolean('true'), dtype: double }
  - { stype: Boolean, sval: new Boolean('true'), dtype: Byte }
  - { stype: Boolean, sval: new Boolean('true'), dtype: Short }
  - { stype: Boolean, sval: new Boolean('true'), dtype: Char }
  - { stype: Boolean, sval: new Boolean('true'), dtype: Int }
  - { stype: Boolean, sval: new Boolean('true'), dtype: Long }
  - { stype: Boolean, sval: new Boolean('true'), dtype: Float }
  - { stype: Boolean, sval: new Boolean('true'), dtype: Double }
