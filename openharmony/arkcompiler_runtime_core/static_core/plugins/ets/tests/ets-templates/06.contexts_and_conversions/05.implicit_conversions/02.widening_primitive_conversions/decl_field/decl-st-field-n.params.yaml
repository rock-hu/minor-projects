# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # from byte
    - { from_type: byte, expr: 0b0 as byte, to_type: boolean }
    - { from_type: byte, expr: 0b0 as byte, to_type: Color }

    # from short
    - { from_type: short, expr: 0b0 as short, to_type: byte }
    - { from_type: short, expr: 0b0 as short, to_type: boolean }
    - { from_type: short, expr: 0b0 as short, to_type: Color }

    # from int
    - { from_type: int, expr: 0, to_type: byte }
    - { from_type: int, expr: 0, to_type: short }
    - { from_type: int, expr: 0, to_type: boolean }
    - { from_type: int, expr: 0, to_type: Color }

    # from long
    - { from_type: long, expr: 0 as long, to_type: byte }
    - { from_type: long, expr: 0 as long, to_type: short }
    - { from_type: long, expr: 0 as long, to_type: int }
    - { from_type: long, expr: 0 as long, to_type: boolean }
    - { from_type: long, expr: 0 as long, to_type: Color }

    # from float
    - { from_type: float, expr: +0.0 as float, to_type: byte }
    - { from_type: float, expr: +0.0 as float, to_type: short }
    - { from_type: float, expr: +0.0 as float, to_type: int }
    - { from_type: float, expr: +0.0 as float, to_type: long }
    - { from_type: float, expr: +0.0 as float, to_type: boolean }
    - { from_type: float, expr: +0.0 as float, to_type: Color }

    # from char
    - { from_type: char, expr: "c'\\u0000'", to_type: byte }
    - { from_type: char, expr: "c'\\u0000'", to_type: short }
    - { from_type: char, expr: "c'\\u0000'", to_type: boolean }
    - { from_type: char, expr: "c'\\u0000'", to_type: Color }
