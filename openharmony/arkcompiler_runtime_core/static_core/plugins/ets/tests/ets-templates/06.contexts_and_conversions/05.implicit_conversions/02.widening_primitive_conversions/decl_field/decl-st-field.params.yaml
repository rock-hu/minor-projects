# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - from_type: byte
      to_type: short
      values:
          - { expr: 0b0 as byte, val: 0 as short }
          - { expr: Byte.MIN_VALUE as byte, val: -128 as short }
          - { expr: Byte.MAX_VALUE as byte, val: 127 as short }

    - from_type: byte
      to_type: int
      values:
          - { expr: 0b0 as byte, val: 0 }
          - { expr: Byte.MIN_VALUE as byte, val: -128 }
          - { expr: Byte.MAX_VALUE as byte, val: 127 }

    - from_type: byte
      to_type: long
      values:
          - { expr: 0b0 as byte, val: 0 as long }
          - { expr: Byte.MIN_VALUE as byte, val: -128 as long }
          - { expr: Byte.MAX_VALUE as byte, val: 127 as long }

    - from_type: byte
      to_type: float
      values:
          - { expr: 0b0 as byte, val: 0.0 as float }
          - { expr: Byte.MIN_VALUE as byte, val: -128.0 as float }
          - { expr: Byte.MAX_VALUE as byte, val: 127.0 as float }

    - from_type: byte
      to_type: double
      values:
          - { expr: 0b0 as byte, val: 0.0 }
          - { expr: Byte.MIN_VALUE as byte, val: -128.0 as double }
          - { expr: Byte.MAX_VALUE as byte, val: 127.0 as double }

    - from_type: byte
      to_type: number
      values:
          - { expr: 0b0 as byte, val: 0.0 }
          - { expr: Byte.MIN_VALUE as byte, val: -128.0 as number }
          - { expr: Byte.MAX_VALUE as byte, val: 127.0 as number }

    - from_type: byte
      to_type: char
      values:
          - { expr: 0b0 as byte, val: "c'\\u0000'" }
          - { expr: Byte.MIN_VALUE as byte, val: "c'\\uFF80'" }
          - { expr: Byte.MAX_VALUE as byte, val: "c'\\u007F'" }

    - from_type: short
      to_type: int
      values:
          - { expr: 0b0 as short, val: 0 }
          - { expr: Short.MIN_VALUE as short, val: -32_768 }
          - { expr: Short.MAX_VALUE as short, val: 32_767 }

    - from_type: short
      to_type: long
      values:
          - { expr: 0b0 as short, val: 0 as long }
          - { expr: Short.MIN_VALUE as short, val: -32_768 as long }
          - { expr: Short.MAX_VALUE as short, val: 32_767 as long }

    - from_type: short
      to_type: float
      values:
          - { expr: 0b0 as short, val: 0.0 as float }
          - { expr: Short.MIN_VALUE as short, val: -32_768.0 as float }
          - { expr: Short.MAX_VALUE as short, val: 32_767.0 as float }

    - from_type: short
      to_type: double
      values:
          - { expr: 0b0 as short, val: 0.0 }
          - { expr: Short.MIN_VALUE as short, val: -32_768.0 as double}
          - { expr: Short.MAX_VALUE as short, val: 32_767.0 as double }

    - from_type: short
      to_type: number
      values:
          - { expr: 0b0 as short, val: 0.0 }
          - { expr: Short.MIN_VALUE as short, val: -32_768.0 as number }
          - { expr: Short.MAX_VALUE as short, val: 32_767.0 as number }

    - from_type: int
      to_type: long
      values:
          - { expr: 0, val: 0 as long }
          - { expr: Int.MIN_VALUE as int, val: -2147483648 as long }
          - { expr: Int.MAX_VALUE as int, val: 2147483647 as long }

    - from_type: int
      to_type: float
      values:
          - { expr: 0, val: 0.0 as float }
          - { expr: Int.MIN_VALUE as int, val: -2147483600.0 as float } # expected loss of precision
          - { expr: Int.MAX_VALUE as int, val: 2147483600 as float } # expected loss of precision

    - from_type: int
      to_type: double
      values:
          - { expr: 0, val: 0.0 }
          - { expr: Int.MIN_VALUE as int, val: -2147483648.0 as double }
          - { expr: Int.MAX_VALUE as int, val: 2147483647.0 as double }

    - from_type: int
      to_type: number
      values:
          - { expr: 0, val: 0.0 }
          - { expr: Int.MIN_VALUE as int, val: -2147483648.0 as number }
          - { expr: Int.MAX_VALUE as int, val: 2147483647.0 as number }

    - from_type: long
      to_type: float
      values:
          - { expr: 0 as long, val: 0.0 as float }
          - { expr: Long.MIN_VALUE as long, val: -9223372000000000000 as float } # expected loss of precision
          - { expr: Long.MAX_VALUE as long, val: 9223372000000000000 as float } # expected loss of precision

    - from_type: long
      to_type: double
      values:
          - { expr: 0 as long, val: 0.0 }
          - { expr: Long.MIN_VALUE as long, val: -9223372036854775808.0 as double }
          - { expr: Long.MAX_VALUE as long, val: 9223372036854775807.0 as double }

    - from_type: long
      to_type: number
      values:
          - { expr: 0 as long, val: 0.0 }
          - { expr: Long.MIN_VALUE as long, val: -9223372036854775808.0 as number }
          - { expr: Long.MAX_VALUE as long, val: 9223372036854775807.0 as number }

    - from_type: float
      to_type: double
      values:
          - { expr: +0.0 as float, val: +0.0 }
          - { expr: -0.0 as float, val: -0.0 }
          - { expr: 3.4028234663852886e38 as float, val: 3.4028234663852886e38 as double }
          - { expr: 1.401298464324817e-45 as float, val: 1.401298464324817e-45 as double }
          - { expr: -3.4028234663852886e38 as float, val: -3.4028234663852886e38 as double }
          - { expr: -1.401298464324817e-45 as float, val: -1.401298464324817e-45 as double }

    - from_type: char
      to_type: int
      values:
          - { expr: "c'\\u0000'", val: 0 }
          - { expr: "c'\\u0FFF'", val: 4095 }
          - { expr: "c'\\uFFFF'", val: 65535 }

    - from_type: char
      to_type: long
      values:
          - { expr: "c'\\u0000'", val: 0 as long }
          - { expr: "c'\\u0FFF'", val: 4095 as long }
          - { expr: "c'\\uFFFF'", val: 65535 as long }

    - from_type: char
      to_type: float
      values:
          - { expr: "c'\\u0000'", val: 0.0 as float }
          - { expr: "c'\\u0FFF'", val: 4095.0 as float }
          - { expr: "c'\\uFFFF'", val: 65535.0 as float }

    - from_type: char
      to_type: double
      values:
          - { expr: "c'\\u0000'", val: 0.0 as double }
          - { expr: "c'\\u0FFF'", val: 4095.0 as double }
          - { expr: "c'\\uFFFF'", val: 65535.0 as double }

    - from_type: Color
      to_type: int
      defs: |-
          enum Color { Red, Green, Blue }
      values:
          - { expr: Color.Red, val: 0 }
          - { expr: Color.Green, val: 1 }
          - { expr: Color.Blue, val: 2 }

    - from_type: Color
      to_type: long
      defs: |-
          enum Color { Red=100, Green=200, Blue=300 }
      values:
          - { expr: Color.Red, val: 100 as long }
          - { expr: Color.Green, val: 200 as long }
          - { expr: Color.Blue, val: 300 as long }

    - from_type: Color
      to_type: float
      defs: |-
          enum Color { Red=10, Green=20, Blue=30 }
      values:
          - { expr: Color.Red, val: 10.0 as float }
          - { expr: Color.Green, val: 20.0 as float }
          - { expr: Color.Blue, val: 30.0 as float }

    - from_type: Color
      to_type: double
      defs: |-
          enum Color { Red=10001, Green=10002, Blue=10003 }
      values:
          - { expr: Color.Red, val: 10001.0 as double }
          - { expr: Color.Green, val: 10002.0 as double }
          - { expr: Color.Blue, val: 10003.0 as double }

    - from_type: Color
      to_type: number
      defs: |-
          enum Color { Red=20001, Green=20002, Blue=20003 }
      values:
          - { expr: Color.Red, val: 20001.0 as number }
          - { expr: Color.Green, val: 20002.0 as number }
          - { expr: Color.Blue, val: 20003.0 as number }
