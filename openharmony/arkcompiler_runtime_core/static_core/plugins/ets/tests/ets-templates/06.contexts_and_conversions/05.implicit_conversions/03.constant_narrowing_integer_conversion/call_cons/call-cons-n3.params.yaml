# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - from_type: short
      to_type: byte
      values:
          - { expr: 0 as short, val: 0 as byte }
          - { expr: -128 as short, val: -128 as byte }
          - { expr: 0x7F as short, val: 0x7F as byte }

    - from_type: int
      to_type: byte
      values:
          - { expr: 0 as int, val: 0 as byte }
          - { expr: -128 as int, val: -128 as byte }
          - { expr: 0x7F as int, val: 0x7F as byte }

    - from_type: int
      to_type: short
      values:
          - { expr: 0 as int, val: 0 as short }
          - { expr: -32768 as int, val: -32768 as short }
          - { expr: 32767 as int, val: 32767 as short }

    - from_type: long
      to_type: byte
      values:
          - { expr: 0 as long, val: 0 as byte }
          - { expr: -128 as long, val: -128 as byte }
          - { expr: 0x7F as long, val: 0x7F as byte }

    - from_type: long
      to_type: short
      values:
          - { expr: 0 as long, val: 0 as short }
          - { expr: -32768 as long, val: -32768 as short }
          - { expr: 32767 as long, val: 32767 as short }

    - from_type: long
      to_type: int
      values:
          - { expr: 0 as long, val: 0 as int }
          - { expr: -2147483648 as long, val: -2147483648 as int }
          - { expr: 2147483647 as long, val: 2147483647 as int }

    - from_type: char
      to_type: byte
      values:
          - { expr: "c'\\u007F'", val: 127 as byte }
          - { expr: "c'\\u0000'", val: 0 as byte }
          - { expr: c' ', val: 32 as byte }

    - from_type: int
      to_type: char
      values:
          - { expr: 0, val: "c'\\u0000'" }
          - { expr: 32767, val: "c'\\u7fff'" }
          - { expr: 65535, val: "c'\\uFFFF'" }

    - from_type: long
      to_type: char
      values:
          - { expr: 0 as long, val: "c'\\u0000'" }
          - { expr: 32767 as long, val: "c'\\u7fff'" }
          - { expr: 65535 as long, val: "c'\\uFFFF'" }
