# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - to_type: int
      values:
          - { from_type: '+0|1|2|3|-4|5', expr: '3' }
          - { from_type: '-1|-3|-7|+9_99', expr: '-7' }
          - { from_type: '0x7FFF|0x001|0xE|0xCAFE|-999', expr: '0xCAFE' }
          - { from_type: '0o777|-55|0o120|0x7FFFFFFF', expr: '0o777' }
          - { from_type: '-1|0b10101010|0b1111|-12|0o7654321', expr: '0b1111' }

    - to_type: float
      values:
          - { from_type: '+0.1f|1.1f|2.5f|3.5f|-4.005f', expr: '3.5f' }
          - { from_type: '+1.1e+10f|-1.1e-20f', expr: '-1.1E-20f' }
          - { from_type: '123_45e6f|12_34_56E7f|1234567e8f', expr: '1234567E8f' }

    - to_type: number
      values:
          - { from_type: '+0.1|1.1|2.5|3.5|-4.005', expr: '3.5' }
          - { from_type: '-1.1E10|-1.1E-20', expr: '-1.1E-20' }
          - { from_type: '123_45E6|123456E7|123_4567E8', expr: '1234567e+08' }

    - to_type: bigint
      values:
          - { from_type: '1n|2n|3n', expr: '3n' }
          - { from_type: '123_456_789_012_345_678_901_234_567_890n|98765432109876543210987654321n|0n', expr: '123456789012345678901234567890n' }

    - to_type: boolean
      values:
          - { from_type: 'false|true', expr: 'false' }
          - { from_type: 'true|false|true|false', expr: 'true' }

    - to_type: string
      values:
          - { from_type: '"false"|"true"', expr: '"false"' }
          - { from_type: '"true"|"false"|"true"|"false"', expr: '"true"' }

    - to_type: string
      decl: |-
          let a: string = "ABC"
      values:
          - { from_type: '`abc${a}abc`|`xyz${a}xyz`|""', expr: '""' }
          - { from_type: '`abc`|`def`|`ghi`|`jkl`', expr: '`def`' }

    - to_type: char
      values:
          - { from_type: "c'A'|c'B'|c'C'", expr: "c'A'" }
          - { from_type: "c'\\u0000'|c'\\u0001'|c'\\uCAFE'", expr: "c'\\u0000'" }
