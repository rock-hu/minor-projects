# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - to_type: byte|short|int|long
      values:
          - { from_type: 'byte|short', ref_type: 'Long', expr: '127', eq: '==' }
          - { from_type: 'int|byte', ref_type: 'Long', expr: '-128', eq: '==' }
          - { from_type: 'long|short|byte', ref_type: 'Long', expr: '0o777', eq: '==' }

    - to_type: Byte|Short|Int|Long
      decl: |-
          let vByte: Byte = new Byte(127 as byte)
          let vInt: Int = new Int(-7)
          let vShort: Short = new Short(0xCAFE as short)
          let vLong: Long = new Long(0o777 as long)
      values:
          - { from_type: 'Byte|Long', expr: vByte, eq: '===' }
          - { from_type: 'Short|Byte|Int', expr: vInt, eq: '===' }
          - { from_type: 'Int|Short', expr: vShort, eq: '===' }
          - { from_type: 'Long|Byte', expr: vLong, eq: '===' }

    - to_type: float|double|number
      values:
          - { from_type: 'float|number', ref_type: 'Double', expr: '3.5f', eq: '==' }
          - { from_type: 'double|float', ref_type: 'Double', expr: '-1.1E-20', eq: '==' }
          - { from_type: 'number|double', ref_type: 'Double', expr: '1234567e8', eq: '==' }

    - to_type: Float|Double|Number
      decl: |-
          let vFloat: Float = new Float(3.5f)
          let vDouble: Double = new Double(-1.1E-20)
          let vNumber: Number = new Number(1234567e8)
      values:
          - { from_type: 'Float|Number', expr: vFloat, eq: '===' }
          - { from_type: 'Double|Float', expr: vDouble, eq: '===' }
          - { from_type: 'Number|Double', expr: vNumber, eq: '===' }

    - to_type: byte|short|int|long|float|double
      values:
          - { from_type: 'byte|float', ref_type: 'Double', expr: '127', eq: '==' }
          - { from_type: 'short|int', ref_type: 'Double', expr: '-7', eq: '==' }
          - { from_type: 'int|short|byte|double', ref_type: 'Double', expr: '0xCAFE', eq: '==' }
          - { from_type: 'long|double', ref_type: 'Double', expr: '0o777', eq: '==' }
          - { from_type: 'float|short|double|float', ref_type: 'Double', expr: '3.5f', eq: '==' }
          - { from_type: 'double|int|long', ref_type: 'Double', expr: '-1.1E-20', eq: '==' }
          - { from_type: 'number|byte', ref_type: 'Double', expr: '1234567e8', eq: '==' }

    - to_type: Byte|Short|Int|Long|Float|Double
      decl: |-
          let vByte: Byte = new Byte(127 as byte)
          let vInt: Int = new Int(-7)
          let vShort: Short = new Short(0xCAFE as short)
          let vLong: Long = new Long(0o777 as long)
          let vFloat: Float = new Float(3.5f)
          let vDouble: Double = new Double(-1.1E-20)
          let vNumber: Number = new Number(1234567e8)
      values:
          - { from_type: 'Byte|Float', expr: vByte, eq: '===' }
          - { from_type: 'Short|Int', expr: vShort, eq: '===' }
          - { from_type: 'Int|Short|Byte|Double', expr: vInt, eq: '===' }
          - { from_type: 'Long|Double', expr: vLong, eq: '===' }
          - { from_type: 'Float|Short|Double|Float', expr: vFloat, eq: '===' }
          - { from_type: 'Double|Int|Long', expr: vDouble, eq: '===' }

    - to_type: byte|short|int|long|boolean|char|float|double|bigint|string
      values:
          - { from_type: 'byte|boolean|char', ref_type: Byte, expr: '127 as byte', eq: '==' }
          - { from_type: 'short|char|string|double', ref_type: Short, expr: '0xCAFE as short', eq: '==' }
          - { from_type: 'int|boolean', ref_type: Int, expr: -7, eq: '==' }
          - { from_type: 'long|string|long|string|boolean', ref_type: Long, expr: 0o777 as long, eq: '==' }
          - { from_type: 'char|byte|short', ref_type: Char, expr: "c'\\u5C5C'", eq: '==' }
          - { from_type: 'boolean|string', ref_type: Boolean, expr: 'false', eq: '==' }
          - { from_type: 'float|bigint', ref_type: Float, expr: 3.5f, eq: '==' }
          - { from_type: 'double|bigint|int', ref_type: Double, expr: '-1.1E-20', eq: '==' }
          - { from_type: 'bigint|boolean|string', ref_type: BigInt, expr: 11111111111111111111111111111111111111111n, eq: '==' }
          - { from_type: 'string|float|long', ref_type: String, expr: '"abcdefghijklmnopqrstuvwxyz"', eq: '==' }

    - decl: |-
          class A {}
          class B {}
          let a: A = {}
          let b: B = {}
          let e: Error = {}
      to_type: A|B|Error
      values:
          - { from_type: 'A|Error', ref_type: '(Object|null)', expr: 'e', eq: '===' }
          - { from_type: 'B|A', ref_type: '(Object|null)', expr: 'a', eq: '===' }
          - { from_type: 'Error|B', ref_type: '(Object|null)', expr: 'b', eq: '===' }

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          let c: C = new C()
      to_type: A|B|C|null|undefined
      values:
          - { from_type: 'C|A', ref_type: 'B', expr: 'c', eq: '===' }
          - { from_type: 'B|C|undefined', ref_type: 'A', expr: 'c', eq: '===' }
          - { from_type: 'C|B', ref_type: 'B', expr: 'c', eq: '===' }
          - { from_type: 'A|C|null', ref_type: 'A', expr: 'c', eq: '===' }

    - decl: |-
          interface I {}
          interface J extends I {}
          interface K {}
          class A implements J {}
          class B extends A {}
          let a: A = new A()
          let b: B = new B()
      to_type: Error|I|K|undefined|null
      values:
          - { from_type: 'A|null|K', ref_type: 'J', expr: 'a', eq: '===' }
          - { from_type: 'undefined|B|I', ref_type: 'A', expr: 'b', eq: '===' }

    - decl: |-
          class A {}
          class B {}
          class C {}
          type AU = A | undefined
          type BU = B | undefined
          let a1: AU = new A()
          let a2: AU = undefined
          let b1: BU = new B()
          let b2: BU = undefined
      to_type: A|B|undefined|Double|Boolean|Char|Byte|C
      values:
          - { from_type: 'AU|C|Double', ref_type: 'AU', expr: 'a1', eq: '===' }
          - { from_type: 'AU|C|Boolean', ref_type: 'AU', expr: 'a2', eq: '===' }
          - { from_type: 'BU|C|Char', ref_type: 'BU', expr: 'b1', eq: '===' }
          - { from_type: 'BU|C|Byte', ref_type: 'BU', expr: 'b2', eq: '===' }

    - decl: |-
          class A {}
          class B {}
          class C {}
          type AN = A | null
          type BN = B | null
          let a1: AN = new A()
          let a2: AN = null
          let b1: BN = new B()
          let b2: BN = null
      to_type: null|A|B|C|Error
      values:
          - { from_type: 'C|AN|Error', ref_type: 'AN', expr: 'a1', eq: '===' }
          - { from_type: 'C|AN', ref_type: 'AN', expr: 'a2', eq: '===' }
          - { from_type: 'C|BN', ref_type: 'BN', expr: 'b1', eq: '===' }
          - { from_type: 'C|BN|Error', ref_type: 'BN', expr: 'b2', eq: '===' }

    - decl: |-
          class A<T> {}
          class B<T> extends A<T> {}
          const a1: A<Long> = new A<Long>()
          const a2: A<Short> = new A<Short>()
          const b1: B<Error> = new B<Error>()
          const b2: B<Boolean> = new B<Boolean>()
      to_type: Error|A<Long>|A<Short>|B<Error>|B<Boolean>
      values:
          - { from_type: 'A<Long>|B<Boolean>|B<Error>', ref_type: 'A<Long>', expr: 'a1', eq: '===' }
          - { from_type: 'B<Error>|A<Short>|B<Boolean>', ref_type: 'A<Short>', expr: 'a2', eq: '===' }
          - { from_type: 'B<Error>|Error', ref_type: 'B<Error>', expr: 'b1', eq: '===' }
          - { from_type: 'Error|B<Boolean>|A<Short>', ref_type: 'B<Boolean>', expr: 'b2', eq: '===' }
