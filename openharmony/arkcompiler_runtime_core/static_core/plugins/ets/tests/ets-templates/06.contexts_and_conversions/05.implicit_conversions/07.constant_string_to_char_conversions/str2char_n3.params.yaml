# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          const s: string = "A"
          const r: string = "B"
      use: |-
          // assignment-like context, variable declaration
          let c4: char = r + s + ""
          assertEQ( c4, c'B' )

    - decl: |-
          const s: string = "A"
          const r: string = "B"
          // assignment-like context, field declaration
          class A {
              c: char = "" + r + s
          }
      use: |-
          assertEQ( new A().c, c'B' )

    - decl: |-
          const s: string = "XYZ"
          let v1: char
      use: |-
          // assignment-like context, variable assignment
          v1 = s
          assertEQ( v1, c'X' )

    - decl: |-
          const s: string = "Z"
          const r: string = "Z"
          // assignment-like context, field assignment
          class A {
              c1: char
          }
      use: |-
          let a: A = new A()
          a.c1 = r + s
          assertEQ( a.c1, c'Z' )


    - decl: |-
          // call context, function
          function foo(p: char): char {
              return p
          }
          const s: string = "Test"
          const r: string = ""
      use: |-
          assertEQ( foo(r + s + ""), c' ' )

    - decl: |-
          // call context, method
          class A {
              meth(p: char): char {
                  return p
              }
          }
          const r: string = "  "
      use: |-
          let a: A = new A()
          assertEQ( a.meth(r), c' ' )

    - decl: |-
          // call context, constructor
          class A {
              fld: char
              constructor(p: char) {
                  this.fld = p
              }
          }
          const s: string = "\u0000"
          const r: string = "\u0000"
      use: |-
          assertEQ( new A(r + s).fld, c'\u0000' )

    - decl: |-
          // call context, lambda
          const s: string = ""
          const r: string = ""
      use: |-
          assertEQ( ((p: char): char => { return p })(r + s + "XYZ"), c'X' )

    - decl: |-
          // array composite
          const s: string = " "
      use: |-
          let v1: char[] = [c'X', "\uFFFF", s + " "]
          assertEQ( v1[0], c'X' )

    - decl: |-
          // object composite
          const s: string = "!!"
          class A {
              fld: char
          }
      use: |-
          let a: A = { fld: s }
          assertEQ( a.fld, c'!' )
