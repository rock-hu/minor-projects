# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - from_type: Byte
      values:
          - { to_type: Integral, expr: new Byte(-128 as byte) }
          - { to_type: Numeric, expr: new Byte(127 as byte) }
          - { to_type: Object, expr: new Byte() }
          - { to_type: Comparable<Byte>, expr: new Byte() }

    - from_type: Short
      values:
          - { to_type: Integral, expr: new Short(Byte.MAX_VALUE as short) }
          - { to_type: Numeric, expr: new Short(Byte.MIN_VALUE as short) }
          - { to_type: Object, expr: new Short() }
          - { to_type: Comparable<Short>, expr: new Short() }

    - from_type: Int
      values:
          - { to_type: Integral, expr: new Int(Byte.MAX_VALUE as int) }
          - { to_type: Numeric, expr: new Int(Byte.MIN_VALUE as int) }
          - { to_type: Object, expr: new Int() }
          - { to_type: Comparable<Int>, expr: new Int() }

    - from_type: Long
      values:
          - { to_type: Integral, expr: new Long(Byte.MAX_VALUE as long) }
          - { to_type: Numeric, expr: new Long(Byte.MIN_VALUE as long) }
          - { to_type: Object, expr: new Long() }
          - { to_type: Comparable<long>, expr: new Long() }

    - from_type: Float
      values:
          - { to_type: Floating, expr: new Float(Byte.MIN_VALUE as float) }
          - { to_type: Numeric, expr: new Float(-0.0 as float) }
          - { to_type: Object, expr: new Float(+0.0 as float) }
          - { to_type: Comparable<Float>, expr: new Float(+0.0 as float) }

    - from_type: Double
      values:
          - { to_type: Floating, expr: new Double(Byte.MIN_VALUE as double) }
          - { to_type: Numeric, expr: new Double(-0.0 as float) }
          - { to_type: Object, expr: new Double(+0.0 as float) }
          - { to_type: Comparable<Double>, expr: new Double(+0.0 as float) }

    - from_type: Char
      values:
          - { to_type: Object, expr: "new Char(c'\\u0000')" }
          - { to_type: Comparable<Char>, expr: "new Char(c'\\u0000')" }

    - from_type: Boolean
      values:
          - { to_type: Object, expr: new Boolean(false) }
          - { to_type: Object, expr: new Boolean(true) }
          - { to_type: Comparable<Boolean>, expr: new Boolean(true) }

    - from_type: String
      values:
          - { to_type: Object, expr: new String("Hello!") }
          - { to_type: Comparable<String>, expr: new String("Hello!") }

    - from_type: BigInt
      values:
          - { to_type: Object, expr: 1234567890n }
          - { to_type: Object, expr: new BigInt("1234567890") }

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
      from_type: C
      values:
          - { to_type: B, expr: new C() }
          - { to_type: A, expr: new C() }
          - { to_type: Object, expr: new C() }

    - decl: |-
          interface I {}
          interface J extends I {}
          interface K extends J {}
          class A implements K {}
      from_type: K
      values:
          - { to_type: J, expr: new A() }
          - { to_type: I, expr: new A() }
          - { to_type: Object, expr: new A() }

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
      from_type: C[]
      values:
          - { to_type: 'B[]', expr: 'new C[1]' }
          - { to_type: 'A[]', expr: 'new C[1]' }
          - { to_type: 'Object[]', expr: 'new C[1]' }
          - { to_type: 'Object', expr: 'new C[1]' }

    - decl: |-
          interface I {}
          interface J extends I {}
          interface K extends J {}
          class A implements K {}
      from_type: K[]
      values:
          - { to_type: 'J[]', expr: 'new A[1]' }
          - { to_type: 'I[]', expr: 'new A[1]' }
          - { to_type: 'Object[]', expr: 'new A[1]' }
          - { to_type: 'Object', expr: 'new A[1]' }

    - decl: |-
          type F = (p: number) => number
          function foo(p: number): number {
              return p + p
          }
      from_type: F
      values:
          - { to_type: Object, expr: foo }

    - decl: |-
          type F = (p: number) => number
          function foo(p: number): number {
              return p + p
          }
          let func: F = foo
      from_type: F[]
      values:
          - { to_type: 'Object[]', expr: '[func, func, foo]' }
          - { to_type: 'Object', expr: '[func, foo]' }

    - decl: |-
          type UT = number | boolean | string
      from_type: UT
      values:
          - { to_type: 'Object', expr: 42 }
          - { to_type: 'Object', expr: 'false' }
          - { to_type: 'Object', expr: '"hello!"' }

    - decl: |-
          type UT = number | boolean | string
      from_type: UT[]
      values:
          - { to_type: 'Object[]', expr: '[42]' }
          - { to_type: 'Object', expr: '[42]' }
          - { to_type: 'Object[]', expr: '[false]' }
          - { to_type: 'Object', expr: '[false]' }
          - { to_type: 'Object[]', expr: '["hello!"]' }
          - { to_type: 'Object', expr: '["hello!"]' }

    - decl: |-
          type TT = [number, boolean, string]
      from_type: TT
      values:
          - { to_type: 'Object', expr: '[42, false, "hello!"]' }

    - decl: |-
          type TT = [number, boolean, string]
      from_type: TT[]
      values:
          - { to_type: 'Object[]', expr: '[[42, false, "hello!"]]' }
          - { to_type: 'Object', expr: '[[42, false, "hello!"]]' }

    - decl: |-
          enum Color { Red, Green, Blue }
      from_type: Color
      values:
          - { to_type: Object, expr: Color.Green }

    - decl: |-
          enum Color { Red, Green, Blue }
      from_type: Color[]
      values:
          - { to_type: 'Object[]', expr: '[Color.Green, Color.Blue]' }
          - { to_type: Object, expr: '[Color.Red, Color.Green]' }

    - decl: |-
          class A {}
          interface I<T> {}
          class B<T> implements I<T> {}
          class C<T> extends B<T> {}
      from_type: C<A>
      values:
          - { to_type: B<A>, expr: new C<A>() }
          - { to_type: I<A>, expr: new C<A>() }
          - { to_type: Object, expr: new C<A>() }
