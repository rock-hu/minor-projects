# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - doc: Example 1
    decl: |-
      class Base {}
      class Derived extends Base {}
    use:
      - "let b: Base = new Derived()"

  - doc: Interface :> Class
    decl: |-
      interface Base {}
      class Derived implements Base {}
    use:
      - "let b: Base = new Derived()"

  - doc: Abstract class :> Class
    decl: |-
      abstract class Base {}
      class Derived extends Base {}
    use:
      - "let b: Base = new Derived()"

  - doc: Interface :> Interface :> Class, root interface
    decl: |-
      interface Base {}
      interface Base2 extends Base {}
      class Derived implements Base2 {}
    use:
      - "let b: Base = new Derived()"

  - doc: Interface :> Interface :> Class, intermediate interface
    decl: |-
      interface Base {}
      interface Base2 extends Base {}
      class Derived implements Base2 {}
    use:
      - "let b: Base2 = new Derived()"

  - doc: Abstract class :> Abstract class :> Class
    decl: |-
      abstract class Base {}
      abstract class Base2 extends Base {}
      class Derived extends Base2 {}
    use:
      - "let b: Base = new Derived()"

  - doc: Abstract class :> Abstract class :> Class
    decl: |-
      abstract class Base {}
      abstract class Base2 extends Base {}
      class Derived extends Base2 {}
    use:
      - "let b: Base2 = new Derived()"

  - doc: Interface :> Abstract class :> Class
    decl: |-
      interface Base {}
      abstract class Base2 implements Base {}
      class Derived extends Base2 {}
    use:
      - "let b: Base = new Derived()"

  - doc: Interface :> Abstract class :> Class
    decl: |-
      interface Base {}
      abstract class Base2 implements Base {}
      class Derived extends Base2 {}
    use:
      - "let b: Base2 = new Derived()"

  - doc: Union of interfaces :> Class
    decl: |-
      interface I1 {}
      interface I2 {}
      interface II1 extends I1 {}
      interface II2 extends I2 {}
      class C1 implements II1 {}
      class C2 implements II2 {}
    use:
      - "let b: II1|I2 = new C1()"
      - "let b: II1|II2 = new C2()"
      - "let b: I1|II2 = new C1()"
      - "let b: I1|I2 = new C2()"

  - doc: Union of abstract classes :> Class
    decl: |-
      abstract class A1 {}
      abstract class A2 {}
      abstract class AA1 extends A1 {}
      abstract class AA2 extends A2 {}
      class C1 extends AA1 {}
      class C2 extends AA2 {}
    use:
      - "let b: AA1|A2 = new C1()"
      - "let b: AA1|AA2 = new C2()"
      - "let b: A1|AA2 = new C1()"
      - "let b: A1|A2 = new C2()"

  - doc: Union of abstract classes :> Class
    decl: |-
      class C1 {}
      class C2 {}
      class CC1 extends C1 {}
      class CC2 extends C2 {}
      class A extends CC1 {}
      class B extends CC2 {}
    use:
      - "let b: CC1|C2 = new A()"
      - "let b: CC1|CC2 = new B()"
      - "let b: C1|CC2 = new A()"
      - "let b: C1|C2 = new B()"

  - doc: Generic class, Base :> Intermediate :> Derived
    decl: |-
      class C1<T> {}
      class C2<T> {}
      class CC1<T,V> extends C1<T> {}
      class CC2<T,V> extends C2<T> {}
      class A<T,V> extends CC1<T,V> {}
      class B<T,V> extends CC2<T,V> {}
    use:
      - "let b: CC1<Object,Object>|C2<Object> = new A<Object,Object>()"
      - "let b: CC1<Object,Object>|CC2<Object,Object> = new B<Object,Object>()"
      - "let b: C1<Object>|CC2<Object,Object> = new A<Object,Object>()"
      - "let b: C1<Object>|C2<Object> = new B<Object,Object>()"

  - doc: Generic interface, Base :> Intermediate :> Derived class
    decl: |-
      interface C1<T> {}
      interface C2<T> {}
      interface CC1<T,V> extends C1<T> {}
      interface CC2<T,V> extends C2<T> {}
      class A<T,V> implements CC1<T,V> {}
      class B<T,V> implements CC2<T,V> {}
    use:
      - "let b: CC1<Object,Object>|C2<Object> = new A<Object,Object>()"
      - "let b: CC1<Object,Object>|CC2<Object,Object> = new B<Object,Object>()"
      - "let b: C1<Object>|CC2<Object,Object> = new A<Object,Object>()"
      - "let b: C1<Object>|C2<Object> = new B<Object,Object>()"

  - doc: Generic abstract class, Base :> Intermediate :> Derived class
    decl: |-
      abstract class C1<T> {}
      abstract class C2<T> {}
      abstract class CC1<T,V> extends C1<T> {}
      abstract class CC2<T,V> extends C2<T> {}
      class A<T,V> extends CC1<T,V> {}
      class B<T,V> extends CC2<T,V> {}
    use:
      - "let b: CC1<Object,Object>|C2<Object> = new A<Object,Object>()"
      - "let b: CC1<Object,Object>|CC2<Object,Object> = new B<Object,Object>()"
      - "let b: C1<Object>|CC2<Object,Object> = new A<Object,Object>()"
      - "let b: C1<Object>|C2<Object> = new B<Object,Object>()"

  - doc: Example 2
    use:
      - "let s: string = \"literal\""
