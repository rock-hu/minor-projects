# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          const s: string = "Z"
          const r: string = ""
      use: |-
          // assignment-like context, variable declaration
          let v1: char = "\u0000"
          assert v1 == c'\u0000'

          let v2: char = "\uFFFF" + ""
          assert v2 == c'\uFFFF'

          let v3: char = s
          assert v3 == c'Z'

          let v4: char = r + s + ""
          assert v4 == c'Z'

          // assignment-like context, constant declaration
          const c1: char = "\u0000"
          assert c1 == c'\u0000'

          const c2: char = "\uFFFF" + ""
          assert c2 == c'\uFFFF'

          const c3: char = s
          assert c3 == c'Z'

          const c4: char = r + s + ""
          assert c4 == c'Z'

    - decl: |-
          const s: string = "Z"
          const r: string = ""
          // assignment-like context, field declaration
          class A {
              c1: char = "\u0000"
              c2: char = "\uCAFE" + ""
              c3: char = s
              c4: char = r + s + ""
          }
      use: |-
          let a: A = new A()
          assert a.c1 == c'\u0000'
          assert a.c2 == c'\uCAFE'
          assert a.c3 == c'Z'
          assert a.c4 == c'Z'

    - decl: |-
          const s: string = "Z"
          const r: string = ""
          let v1: char
          let v2: char
          let v3: char
          let v4: char
      use: |-
          // assignment-like context, variable assignment
          v1 = "\u0000"
          assert v1 == c'\u0000'

          v2 = "\uFFFF" + ""
          assert v2 == c'\uFFFF'

          v3 = s
          assert v3 == c'Z'

          v4 = r + s + ""
          assert v4 == c'Z'

    - decl: |-
          const s: string = "Z"
          const r: string = ""
          // assignment-like context, field assignment
          class A {
              c1: char
              c2: char
              c3: char
              c4: char
          }
      use: |-
          let a: A = new A()
          a.c1 = "\u000F"
          assert a.c1 == c'\u000F'

          a.c2 = "\uFFFF" + ""
          assert a.c2 == c'\uFFFF'

          a.c3 = s
          assert a.c3 == c'Z'

          a.c4 = r + s + ""
          assert a.c4 == c'Z'

    - decl: |-
          // call context, function
          function foo(p: char): char {
              return p
          }
          const s: string = "W"
          const r: string = ""
      use: |-
          assert foo("\u0000") == c'\u0000'
          assert foo("" + ("" + "\uCAFE") + "") == c'\uCAFE'
          assert foo(s) == c'W'
          assert foo(r + s + "") == c'W'

    - decl: |-
          // call context, method
          class A {
              meth(p: char): char {
                  return p
              }
          }
          const s: string = "W"
          const r: string = ""
      use: |-
          let a: A = new A()
          assert a.meth("\u0000") == c'\u0000'
          assert a.meth("" + ("" + "\uCAFE") + "") == c'\uCAFE'
          assert a.meth(s) == c'W'
          assert a.meth(r + s + "") == c'W'

    - decl: |-
          // call context, constructor
          class A {
              fld: char
              constructor(p: char) {
                  this.fld = p
              }
          }
          const s: string = "W"
          const r: string = ""
      use: |-
          assert new A("\u0000").fld == c'\u0000'
          assert new A("" + ("" + "\uCAFE") + "").fld == c'\uCAFE'
          assert new A(s).fld == c'W'
          assert new A(r + s + "").fld == c'W'

    - decl: |-
          // call context, lambda
          const s: string = "W"
          const r: string = ""
      use: |-
          assert ((p: char): char => { return p })("\u0000") == c'\u0000'
          assert ((p: char): char => { return p })("" + ("" + "\uCAFE") + "") == c'\uCAFE'
          assert ((p: char): char => { return p })(s) == c'W'
          assert ((p: char): char => { return p })(r + s + "") == c'W'

    - decl: |-
          // array composite
          const s: string = "W"
          const r: string = ""
      use: |-
          let v1: char[] = ["\u0000", c'X', "\uFFFF"]
          assert v1[0] == c'\u0000'
          assert v1[1] == c'X'
          assert v1[2] == c'\uFFFF'

          v1 = ["" + "Z" + ""]
          assert v1[0] == c'Z'

          v1 = [c'X', s, s + r, "" + s]
          assert v1[0] == c'X'
          assert v1[1] == c'W'
          assert v1[2] == c'W'
          assert v1[3] == c'W'

    - decl: |-
          // object composite
          const s: string = "W"
          const r: string = ""
          class A {
              fld: char
          }
      use: |-
          let a: A = { fld: "\u8000" }
          assert a.fld == c'\u8000'

          a = { fld: "" + "" + "" + "\uCAFE" }
          assert a.fld == c'\uCAFE'

          a = { fld: s }
          assert a.fld == c'W'

          a = { fld: "" + s + r }
          assert a.fld == c'W'
