# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          const s: string = "Z"
          let r: string = ""
      use: |-
          // assignment-like context, variable declaration
          let v: char = r + s + ""
          assert v == c'Z'

    - decl: |-
          let s: string = "Z"
          const r: string = ""
      use: |-
          // assignment-like context, constant declaration
          const v: char = r + s + ""
          assert v == c'Z'

    - decl: |-
          const s: string = "Z"
          let r: string = ""
          // assignment-like context, field declaration
          class A {
              c: char = r + s + ""
          }
      use: |-
          let a: A = new A()
          assert a.c == c'Z'

    - decl: |-
          let s: string = "Z"
          const r: string = ""
          let v: char
      use: |-
          // assignment-like context, variable assignment
          v = r + s + ""
          assert v == c'Z'

    - decl: |-
          const s: string = "Z"
          let r: string = ""
          // assignment-like context, field assignment
          class A {
              c: char
          }
      use: |-
          let a: A = new A()
          a.c = r + s + ""
          assert a.c == c'Z'

    - decl: |-
          // call context, function
          function foo(p: char): char {
              return p
          }
          let s: string = "W"
          const r: string = ""
      use: |-
          assert foo(r + s + "") == c'W'

    - decl: |-
          // call context, method
          class A {
              meth(p: char): char {
                  return p
              }
          }
          const s: string = "W"
          let r: string = ""
      use: |-
          let a: A = new A()
          assert a.meth(r + s + "") == c'W'

    - decl: |-
          // call context, constructor
          class A {
              fld: char
              constructor(p: char) {
                  this.fld = p
              }
          }
          const s: string = "W"
          let r: string = ""
      use: |-
          assert new A(r + s + "").fld == c'W'

    - decl: |-
          // call context, lambda
          let s: string = "W"
          const r: string = ""
      use: |-
          assert ((p: char): char => { return p })(r + s + "") == c'W'

    - decl: |-
          // array composite
          let s: string = "W"
          const r: string = ""
      use: |-
          let v1: char[] = [c'X', s, s + r, "" + s]
          assert v1[0] == c'X'

    - decl: |-
          // object composite
          const s: string = "W"
          let r: string = ""
          class A {
              fld: char
          }
      use: |-
          let a: A = { fld: "\u8000" }
          a = { fld: "" + s + r }
          assert a.fld == c'W'
