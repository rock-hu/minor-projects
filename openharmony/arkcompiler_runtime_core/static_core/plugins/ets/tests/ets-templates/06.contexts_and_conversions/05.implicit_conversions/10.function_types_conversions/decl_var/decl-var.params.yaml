# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # classes
    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          let a: A = new A()
          let b: B = new B()
          let c: C = new C()

          function foo(p: A): C {
              return c
          }
      to:
          - type: '(p: A) => C'
            call: '(new A()) === c'
          - type: '(p: B) => C'
            call: '(new B()) === c'
          - type: '(p: C) => C'
            call: '(new C()) === c'

          - type: '(p: A) => B'
            call: '(new A()) === c'
          - type: '(p: B) => B'
            call: '(new B()) === c'
          - type: '(p: C) => B'
            call: '(new C()) === c'

          - type: '(p: A) => A'
            call: '(new A()) === c'
          - type: '(p: B) => A'
            call: '(new B()) === c'
          - type: '(p: C) => A'
            call: '(new C()) === c'

          - type: '(p: A) => Object'
            call: '(new A()) === c'
          - type: '(p: B) => Object'
            call: '(new B()) === c'
          - type: '(p: C) => Object'
            call: '(new C()) === c'

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          let a: A = new A()
          let b: B = new B()
          let c: C = new C()

          function foo(p: B): B {
              return b
          }
      to:
          - type: '(p: B) => B'
            call: '(new B()) === b'
          - type: '(p: C) => B'
            call: '(new C()) === b'

          - type: '(p: B) => A'
            call: '(new B()) === b'
          - type: '(p: C) => A'
            call: '(new C()) === b'

          - type: '(p: B) => Object'
            call: '(new B()) === b'
          - type: '(p: C) => Object'
            call: '(new C()) === b'

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          let a: A = new A()
          let b: B = new B()
          let c: C = new C()

          function foo(p: C): A {
              return a
          }
      to:
          - type: '(p: C) => A'
            call: '(new C()) === a'
          - type: '(p: C) => Object'
            call: '(new C()) === a'

    # interfaces
    - decl: |-
          interface I {}
          interface J extends I {}
          class A implements J {}
          let a: A = new A()

          function foo(p: I): J {
              return a
          }
      to:
          - type: '(p: I) => J'
            call: '(new A()) === a'
          - type: '(p: I) => I'
            call: '(new A()) === a'
          - type: '(p: I) => Object'
            call: '(new A()) === a'

          - type: '(p: J) => J'
            call: '(new A()) === a'
          - type: '(p: J) => I'
            call: '(new A()) === a'
          - type: '(p: J) => Object'
            call: '(new A()) === a'

          - type: '(p: A) => J'
            call: '(new A()) === a'
          - type: '(p: A) => I'
            call: '(new A()) === a'
          - type: '(p: A) => Object'
            call: '(new A()) === a'

    # arrays
    - decl: |-
          class A {}
          class B extends A {}
          let a: A[] = new A[1]
          let b: B[] = new B[1]

          function foo(p: A[]): B[] {
              return b
          }
      to:
          - type: '(p: A[]) => B[]'
            call: '(new A[1]) === b'
          - type: '(p: B[]) => B[]'
            call: '(new B[1]) === b'

          - type: '(p: A[]) => A[]'
            call: '(new A[1]) === b'
          - type: '(p: B[]) => A[]'
            call: '(new B[1]) === b'

          - type: '(p: A[]) => Object[]'
            call: '(new A[1]) === b'
          - type: '(p: B[]) => Object[]'
            call: '(new B[1]) === b'

    - decl: |-
          class A {}
          class B extends A {}
          let a: A[] = new A[1]
          let b: B[] = new B[1]

          function foo(p: B[]): A[] {
              return a
          }
      to:
          - type: '(p: B[]) => A[]'
            call: '(new B[1]) === a'
          - type: '(p: B[]) => Object[]'
            call: '(new B[1]) === a'

    # functions
    - decl: |-
          class A {}
          class B extends A {}
          type F1 = (p: A) => A
          type F2 = (p: A) => A throws

          function f1(p: A): A {
              return p
          }

          function f2(p: A): A throws {
              if (p instanceof B) {
                  throw new Exception()
              }
              return p
          }

          function foo(p: F2): F1 {
              return f1
          }
      to:
          - type: '(p: F2) => F1'
            call: '(f2) === f1'
          - type: '(p: F1) => F1'
            call: '(f1) === f1'

          - type: '(p: F2) => F2'
            call: '(f2) === f1'
          - type: '(p: F1) => F2'
            call: '(f1) === f1'

    # unions
    - decl: |-
          type T1 = String|Boolean
          type T2 = Number|String|Boolean
          let t1: T1 = "test"
          let t2: T2 = 42.0
          function foo(p: T2): T1 {
              return t1
          }
      to:
          - type: '(p: T2) => T1'
            call: '(t2) as string == t1 as string'
          - type: '(p: T1) => T1'
            call: '(t1) as string == t1 as string'
          - type: '(p: String) => T1'
            call: '("") as string == t1 as string'
          - type: '(p: Number) => T1'
            call: '(42.0) as string == t1 as string'
          - type: '(p: Boolean) => T1'
            call: '(false) as string == t1 as string'

          - type: '(p: T2) => T2'
            call: '(t2) as string == t1 as string'
          - type: '(p: T1) => T2'
            call: '(t1) as string == t1 as string'
          - type: '(p: String) => T2'
            call: '("") as string == t1 as string'
          - type: '(p: Number) => T2'
            call: '(42.0) as string == t1 as string'
          - type: '(p: Boolean) => T2'
            call: '(false) as string == t1 as string'

          - type: '(p: T2) => Object'
            call: '(t2) as string == t1 as string'
          - type: '(p: T1) => Object'
            call: '(t1) as string == t1 as string'
          - type: '(p: String) => Object'
            call: '("") as string == t1 as string'
          - type: '(p: Number) => Object'
            call: '(42.0) as string == t1 as string'
          - type: '(p: Boolean) => Object'
            call: '(false) as string == t1 as string'

    - decl: |-
          type T1 = String|Boolean
          type T2 = Number|String|Boolean
          let t1: T1 = "test"
          let t2: T2 = 42.0
          function foo(p: T1): T2 {
              return t2
          }
      to:
          - type: '(p: T1) => T2'
            call: '(t1) as number == t2 as number'
          - type: '(p: String) => T2'
            call: '("") as number == t2 as number'
          - type: '(p: Boolean) => T2'
            call: '(true) as number == t2 as number'

          - type: '(p: T1) => Object'
            call: '(t1) as number == t2 as number'
          - type: '(p: String) => Object'
            call: '("") as number == t2 as number'
          - type: '(p: Boolean) => Object'
            call: '(true) as number == t2 as number'

    # nullish
    - decl: |-
          let t1: number = 1.0
          let t2: number|null = 2.0

          function foo(p: number|null): number {
              return t1
          }
      to:
          - type: '(p: number|null) => number'
            call: '(t2) == t1'
          - type: '(p: number) => number'
            call: '(t1) == t1'

          - type: '(p: number|null) => number|null'
            call: '(t2) == t1'
          - type: '(p: number) => number|null'
            call: '(t1) == t1'

          - type: '(p: number|null) => number|undefined'
            call: '(t2) == t1'
          - type: '(p: number) => number|undefined'
            call: '(t1) == t1'

    - decl: |-
          let t1: number = 1.0
          let t2: number|undefined = 2.0

          function foo(p: number|undefined): number {
              return t1
          }
      to:
          - type: '(p: number|undefined) => number'
            call: '(t2) == t1'
          - type: '(p: number) => number'
            call: '(t1) == t1'

          - type: '(p: number|undefined) => number|undefined'
            call: '(t2) == t1'
          - type: '(p: number) => number|undefined'
            call: '(t1) == t1'

          - type: '(p: number|undefined) => number|null'
            call: '(t2) == t1'
          - type: '(p: number) => number|null'
            call: '(t1) == t1'

    # primitive
    - decl: |-
          function foo(p: Object): float {
              return 1.5f
          }
      to:
          - type: '(p: Numeric) => float'
            call: '(1) == 1.5f'
          - type: '(p: Floating) => float'
            call: '(1.0) == 1.5f'
          - type: '(p: float) => float'
            call: '(1f) == 1.5f'

          - type: '(p: Numeric) => Floating'
            call: '(1) as Float == 1.5f'
          - type: '(p: Floating) => Floating'
            call: '(1.0) as Float == 1.5f'
          - type: '(p: float) => Floating'
            call: '(1f) as Float == 1.5f'

          - type: '(p: Numeric) => Numeric'
            call: '(1) as Float == 1.5f'
          - type: '(p: Floating) => Numeric'
            call: '(1.0) as Float == 1.5f'
          - type: '(p: float) => Numeric'
            call: '(1f) as Float == 1.5f'

          - type: '(p: Numeric) => Object'
            call: '(1) as Float == 1.5f'
          - type: '(p: Floating) => Object'
            call: '(1.0) as Float == 1.5f'
          - type: '(p: float) => Object'
            call: '(1f) as Float == 1.5f'

    - decl: |-
          let t1: byte = 127
          function foo(p: Numeric): byte {
              return 127
          }
      to:
          - type: '(p: Numeric) => byte'
            call: '(t1) == 127'
          - type: '(p: Integral) => byte'
            call: '(t1) == 127'
          - type: '(p: Byte) => byte'
            call: '(t1) == 127'

          - type: '(p: Numeric) => Integral'
            call: '(t1) as Byte == 127'
          - type: '(p: Integral) => Integral'
            call: '(t1) as Byte == 127'
          - type: '(p: Byte) => Integral'
            call: '(t1) as Byte == 127'

          - type: '(p: Numeric) => Numeric'
            call: '(t1) as Byte == 127'
          - type: '(p: Integral) => Numeric'
            call: '(t1) as Byte == 127'
          - type: '(p: Byte) => Numeric'
            call: '(t1) as Byte == 127'

          - type: '(p: Numeric) => Object'
            call: '(t1) as Byte == 127'
          - type: '(p: Integral) => Object'
            call: '(t1) as Byte == 127'
          - type: '(p: Byte) => Object'
            call: '(t1) as Byte == 127'

    # enums
    - decl: |-
          enum Color { Red, Green, Blue }
          function foo(p: Color): Color {
              return Color.Green
          }
      to:
          - type: '(p: Color) => Object'
            call: '(Color.Red) as Color == Color.Green'

    - decl: |-
          enum Color { Red, Green, Blue }
          function foo(p: Object): Color {
              return Color.Green
          }
      to:
          - type: '(p: Color) => Color'
            call: '(Color.Red) == Color.Green'

    # tuples
    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          let bb: [B, B] = [new B(), new B()]
          function foo(p: [B, B]): [B, B] {
              return bb
          }
      to:
          - type: '(p: [B, B]) => [B, B]'
            call: '(bb) === bb'
          - type: '(p: [B, B]) => Object'
            call: '(bb) as [B, B] === bb'

    - decl: |-
          class A {}
          class B extends A {}
          class C extends B {}
          let bb: [B, B] = [new B(), new B()]
          function foo(p: Object): [B, B] {
              return bb
          }
      to:
          - type: '(p: [B, B]) => [B, B]'
            call: '(bb) === bb'
