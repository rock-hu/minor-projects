# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:

    - decl: |-
          class A {}
          class B extends A {}
          let a: A = new A()
          let b: B = new B()
      from:
          - { type: A, expr: "a" }
          - { type: B, expr: "b" }
      to:
          - { type: A }
          - { type: A }

    - decl: |-
          class A {}
          class B extends A {}
          let a: A = new A()
          let b: B = new B()
      from:
          - { type: A, expr: "a" }
          - { type: B, expr: "b" }
      to:
          - { type: A|null }
          - { type: B|undefined }

    - decl: |-
          interface I {}
          interface J extends I {}
          class A implements I {}
          class B implements J {}
          let i: I = new A()
          let j: J = new B()
      from:
          - { type: I, expr: "i" }
          - { type: J, expr: "j" }
      to:
          - { type: I }
          - { type: I }

    - decl: |-
          interface I {}
          interface J extends I {}
          class A implements I {}
          class B implements J {}
          let i: I = new A()
          let j: J = new B()
      from:
          - { type: I, expr: "i" }
          - { type: J, expr: "j" }
      to:
          - { type: I|J }
          - { type: J|I }

    - decl: |-
          let int_arr: int[] = [-2147483648]
          let number_arr: number[] = [Double.NaN]
      from:
          - { type: "int[]", expr: "int_arr" }
          - { type: "number[]", expr: "number_arr" }
      to:
          - { type: "Object" }
          - { type: "Object" }

    - decl: |-
          let obj: Object = new Error()
          type FOO = (p: int, q: int) => int
          let foo: FOO = (p: int, q: int): int => { return p + q }
      from:
          - { type: "FOO", expr: "foo" }
          - { type: "Object", expr: "obj" }
      to:
          - { type: "Object" }
          - { type: "Object" }

    - decl: |-
          type UT1 = number | string
          type UT2 = string | boolean
          let ut1: UT1 = "hello"
          let ut2: UT2 = "world"
      from:
          - { type: "UT1", expr: "ut1" }
          - { type: "UT2", expr: "ut2" }
      to:
          - { type: number|string|boolean }
          - { type: number|string|boolean }
