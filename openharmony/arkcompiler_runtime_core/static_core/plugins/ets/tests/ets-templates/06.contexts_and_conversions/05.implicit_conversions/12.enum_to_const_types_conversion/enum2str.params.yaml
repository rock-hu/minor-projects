# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          let s: string = "Z"
      use: |-
          // assignment-like context, variable declaration
          let v1: string = Color.Red
          assert v1 == "r"

          let v2: string = Color.Green + Color.Blue
          assert v2 == "gb"

          let v3: string = s + Color.Blue + "X"
          assert v3 == "ZbX"

          // assignment-like context, constant declaration
          const c1: string = Color.Red
          assert c1 == "r"

          const c2: string = Color.Green + Color.Blue
          assert c2 == "gb"

          const c3: string = s + Color.Blue + "X"
          assert c3 == "ZbX"

    - decl: |-
          let s: string = "Z"
          let v: string
      use: |-
          // assignment-like context, variable assignment
          v = Color.Red
          assert v == "r"

          v = Color.Green + Color.Blue
          assert v == "gb"

          v = s + Color.Blue + "X"
          assert v == "ZbX"

    - decl: |-
          let s: string = "Z"
          class A {
              fld1: string = Color.Red
              fld2: string = Color.Blue + Color.Green
              fld3: string = s + Color.Green + "X"
          }
      use: |-
          // assignment-like context, field declaration
          let a: A = new A()
          assert a.fld1 == "r"
          assert a.fld2 == "bg"
          assert a.fld3 == "ZgX"

    - decl: |-
          let s: string = "Z"
          class A {
              fld1: string = ""
              fld2: string = ""
              fld3: string = ""
          }
      use: |-
          // assignment-like context, field assignment
          let a: A = new A()
          a.fld1 = Color.Red
          a.fld2 = Color.Blue + Color.Green
          a.fld3 = s + Color.Green + "X"
          assert a.fld1 == "r"
          assert a.fld2 == "bg"
          assert a.fld3 == "ZgX"

    - decl: |-
          let s: string = "Z"
          function foo(p: string): string {
              return p + "!"
          }
      use: |-
          // call context, function
          assert foo(Color.Red) == "r!"
          assert foo(Color.Green + Color.Blue) == "gb!"
          assert foo(s + Color.Blue + "X") == "ZbX!"

    - decl: |-
          let s: string = "Z"
          class A {
              meth(p: string): string {
                  return p + "!"
              }
          }
      use: |-
          // call context, method
          let a: A = new A()
          assert a.meth(Color.Red) == "r!"
          assert a.meth(Color.Green + Color.Blue) == "gb!"
          assert a.meth(s + Color.Blue + "X") == "ZbX!"

    - decl: |-
          let s: string = "Z"
          class A {
              fld: string = ""
              constructor(p: string) {
                  this.fld = p
              }
          }
      use: |-
          // call context, constructor
          assert new A(Color.Red).fld == "r"
          assert new A(Color.Green + Color.Blue).fld == "gb"
          assert new A(s + Color.Blue + "X").fld == "ZbX"

    - decl: |-
          let s: string = "Z"
      use: |-
          // call context, lambda
          assert ((p: string): string => { return p + "!" })(Color.Red) == "r!"
          assert ((p: string): string => { return p + "!" })(Color.Green + Color.Blue) == "gb!"
          assert ((p: string): string => { return p + "!" })(s + Color.Blue + "X") == "ZbX!"

    - decl: |-
          let s: string = "Z"
          class A {
              fld: string = ""
          }
      use: |-
          // composite object
          let a: A = { fld: Color.Red }
          assert a.fld == "r"
          a = { fld: Color.Blue + Color.Green }
          assert a.fld == "bg"
          a = { fld: s + Color.Blue + "!" }
          assert a.fld == "Zb!"

    - decl: |-
          let s: string = "Z"
      use: |-
          // composite array
          let v: string[] = [ Color.Red ]
          assert v[0] == "r"
          v = [ Color.Green + Color.Blue, Color.Blue + s + "!" ]
          assert v[0] == "gb"
          assert v[1] == "bZ!"
