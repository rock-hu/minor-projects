# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Interfaces with static members and type parameters inside
cases:
  - desc: Verify that using JSON.stringify() correctly converts an array to a string.
    decl: |-
      let arr: number[] = [1, 2, 3];
      let str: string = JSON.stringify(arr);
    logic: |-
      assertEQ(str, "[1,2,3]");

  - desc: Verify that converting an empty string to a number results in 0.
    decl: |-
      let str: string = "";
      let num: number = Number(str);
    logic: |-
      assertEQ(num, 0);

  - desc: Verify that converting a non-empty string to a boolean using the Boolean() function correctly evaluates to true.
    decl: |-
      let str: string = "hello";
      let bool: boolean = Boolean(str);
    logic: |-
      assertEQ(bool, true);

  - desc: Verify that using String() constructor correctly converts a number to a string.
    decl: |-
      let num: number = 42;
      let str: string = String(num);
    logic: |-
      assertEQ(str, "42");

  - desc: Verify that using parseFloat() correctly converts a string to a number.
    decl: |-
      let str: string = "42.5";
      let num: number = parseFloat(str);
    logic: |-
      assertEQ(num, 42.5);

  - desc: Verify that attempting to cast a readonly number[] to a number[] results in a type error.
    decl: |-
      let readonlyArr: readonly number[] = [1, 2, 3];
      let mutableArr: number[] = readonlyArr as number[];
    logic: |-
      assertEQ(mutableArr[0], 1);
      assertEQ(mutableArr[1], 2);
      assertEQ(mutableArr[2], 3);

  - desc: Verify that using toString() correctly converts an array to a string.
    decl: |-
      let arr: number[] = [1, 2, 3];
      let str: string = arr.toString();
    logic: |-
      assertEQ(str, "1,2,3");

  - desc: Verify that using parseInt() correctly converts a string to a number.
    decl: |-
      let str: string = "42";
      let num: number = parseInt(str, 10);
    logic: |-
      assertEQ(num, 42);

  - desc: Verify that using String() constructor correctly converts an array to a string.
    decl: |-
      let arr: number[] = [1, 2, 3];
      let str: string = String(arr);
    logic: |-
      assertEQ(str, "1,2,3");

  - desc: Verify that using template literals correctly converts an array to a string.
    decl: |-
      let arr: number[] = [1, 2, 3];
      let str: string = `${arr}`;
    logic: |-
      assertEQ(str, "1,2,3");

  - desc: Verify that using Number() constructor correctly converts a string to a number.
    decl: |-
      let str: string = "42";
      let num: number = Number(str);
    logic: |-
      assertEQ(num, 42);