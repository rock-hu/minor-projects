# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - init: 'let v: A = new A()'
    expr: 'let x: A = v as A'
    fail: 0

  - init: 'let v: A = new A()'
    expr: 'let x: B = v as B'
    fail: 1

  - init: 'let v: A = new A()'
    expr: 'let x: I = v as I'
    fail: 0

  - init: 'let v: A = new A()'
    expr: 'let x: J = v as J'
    fail: 1

  - init: 'let v: A = new A()'
    expr: 'let x: K = v as K'
    fail: 1


  - init: 'let v: Object = new A()'
    expr: 'let x: A = v as A'
    fail: 0

  - init: 'let v: Object = new A()'
    expr: 'let x: B = v as B'
    fail: 1

  - init: 'let v: Object = new A()'
    expr: 'let x: I = v as I'
    fail: 0

  - init: 'let v: Object = new A()'
    expr: 'let x: J = v as J'
    fail: 1

  - init: 'let v: Object = new A()'
    expr: 'let x: K = v as K'
    fail: 1


  - init: 'let v: I = new A()'
    expr: 'let x: A = v as A'
    fail: 0

  - init: 'let v: I = new A()'
    expr: 'let x: B = v as B'
    fail: 1

  - init: 'let v: I = new A()'
    expr: 'let x: I = v as I'
    fail: 0

  - init: 'let v: I = new A()'
    expr: 'let x: J = v as J'
    fail: 1

  - init: 'let v: I = new A()'
    expr: 'let x: K = v as K'
    fail: 1


  - init: 'let v: B = new B()'
    expr: 'let x: A = v as A'
    fail: 0

  - init: 'let v: B = new B()'
    expr: 'let x: B = v as B'
    fail: 0

  - init: 'let v: B = new B()'
    expr: 'let x: I = v as I'
    fail: 0

  - init: 'let v: B = new B()'
    expr: 'let x: J = v as J'
    fail: 0

  - init: 'let v: B = new B()'
    expr: 'let x: K = v as K'
    fail: 1


  - init: 'let v: A = new B()'
    expr: 'let x: A = v as A'
    fail: 0

  - init: 'let v: A = new B()'
    expr: 'let x: B = v as B'
    fail: 0

  - init: 'let v: A = new B()'
    expr: 'let x: I = v as I'
    fail: 0

  - init: 'let v: A = new B()'
    expr: 'let x: J = v as J'
    fail: 0

  - init: 'let v: A = new B()'
    expr: 'let x: K = v as K'
    fail: 1


  - init: 'let v: I = new B()'
    expr: 'let x: A = v as A'
    fail: 0

  - init: 'let v: I = new B()'
    expr: 'let x: B = v as B'
    fail: 0

  - init: 'let v: I = new B()'
    expr: 'let x: I = v as I'
    fail: 0

  - init: 'let v: I = new B()'
    expr: 'let x: J = v as J'
    fail: 0

  - init: 'let v: I = new B()'
    expr: 'let x: K = v as K'
    fail: 1


  - init: 'let v: J = new B()'
    expr: 'let x: A = v as A'
    fail: 0

  - init: 'let v: J = new B()'
    expr: 'let x: B = v as B'
    fail: 0

  - init: 'let v: J = new B()'
    expr: 'let x: I = v as I'
    fail: 0

  - init: 'let v: J = new B()'
    expr: 'let x: J = v as J'
    fail: 0

  - init: 'let v: J = new B()'
    expr: 'let x: K = v as K'
    fail: 1
