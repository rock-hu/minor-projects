# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # call context
    - decl: |-
          function foo(a: Array<boolean>) {
              assertEQ(a[0], false)
              assertEQ(a[1], true)
              assertEQ(a[2], true)
              assertEQ(a.length, 3)
          }
      use: |-
          // call context, array of primitives
          foo([!true, true, true])

    - decl: |-
          function foo(a: Array<long>) {
              assertEQ(a[3], -9223372036854775808)
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of primitives
          foo([1, 2, 3, -9223372036854775808])

    - decl: |-
          function foo(a: Array<Array<int>>) {
              assertEQ(a.length, 4)
              assertEQ(a[0][0], -2147483647)
              assertEQ(a[2][2], 2147483647)
          }
      use: |-
          // call context, array of array of primitives
          foo([[-2147483647, 2, ], [3, ], [4, 5, 2147483647, ], [], ])

    - decl: |-
          function foo(a: Array<number>) {
              assertTrue(Number.isNaN(a[0]))
              assertEQ(a[3], 1.7976931348623157e+308)
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of primitives
          foo([Number.NaN, 0, 3.14, 1.7976931348623157e+308, ])

    - decl: |-
          function foo(a: Array<Number>) {
              assertTrue(Number.isNaN(a[0].unboxed()))
              assertEQ(a[3].unboxed(), 1.7976931348623157e+308)
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of boxed
          foo([Number.NaN, 0, 3.14, 1.7976931348623157e+308, ])

    - decl: |-
          function foo(a: Array<Boolean>) {
              assertEQ(a[0].unboxed(), false)
              assertEQ(a[1].unboxed(), true)
              assertEQ(a[2].unboxed(), true)
              assertEQ(a.length, 3)
          }
      use: |-
          // call context, array of boxed
          foo([false, true, true])

    - decl: |-
          function foo(a: Array<Long>) {
              assertEQ(a[3].unboxed(), -9223372036854775808)
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of boxed
          foo([1, 2, 3, -9223372036854775808,])

    - decl: |-
          function foo(a: Array<string>) {
              assertEQ(a[3], '-9223372036854775808')
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of strings
          foo(['1', '2', '', '-9223372036854775808', ])

    - decl: |-
          function foo(a: Array<string>) {
              assertEQ(a[0], 'x')
              assertEQ(a[1], 'x1')
              assertEQ(a[2], 'x2')
              assertEQ(a[3], 'x3')
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of strings
          foo(['x', 'x' + '1', 'x' + '2', 'x' + '3', ])

    - decl: |-
          function bar(i: int): char {
              return (i + 1) as char
          }
          function foo(a: Array<char>) {
              assertEQ(a[0], c'+')
              assertEQ(a[1], c',')
              assertEQ(a[2], c'-')
              assertEQ(a.length, 3)
          }
      use: |-
          // call context, array of chars
          foo([bar(42), bar(43), bar(44), ])

    - decl: |-
          function foo(a: Array<Array<String>>) {
              assertEQ(a[0][0], '1')
              assertEQ(a[0][1], '11')
              assertEQ(a[1][0], '')
              assertEQ(a[1][1], '-9223372036854775808')
              assertEQ(a.length, 2)
          }
      use: |-
          // call context, array of array of strings
          let s = '1'
          foo([[s, s + s,], ['', '-9223372036854775808',], ])

    - decl: |-
          function foo(a: Array<bigint>) {
              assertEQ(a[1], 2n)
              assertEQ(a[2], 33333333333333333333333333333333333333333333333333n)
              assertEQ(a.length, 3)
          }
      use: |-
          // call context, array of bigint
          foo([1n, 2n, 33333333333333333333333333333333333333333333333333n])

    - decl: |-
          function foo(a: Array<Array<bigint>>) {
              assertEQ(a[0][0], 11111111111111111111111111111111111111111111111n)
              assertEQ(a[2][0], 33333333333333333333333333333333333333333333333333n)
              assertEQ(a.length, 3)
          }
      use: |-
          // call context, array of array of bigint
          foo([[11111111111111111111111111111111111111111111111n], [2n], [33333333333333333333333333333333333333333333333333n]])

    - decl: |-
          class A {}
          function foo(a: Array<A>) {
              assertTrue(a[0] instanceof A)
              assertEQ(a.length, 1)
          }
      use: |-
          // call context, array of A
          foo([{}])

    - decl: |-
          class A<T> {}
          let v = new A<Number>
          let q = new A<Number>
          function foo<T>(a: Array<A<T>>) {
              assertEQ(a[0], v)
              assertEQ(a[1], q)
              assertEQ(a.length, 2)
          }
      use: |-
          // call context, array of A<T>
          foo<Number>([v, q])

    - decl: |-
          function foo(a: Array<Array<Number>>) {
              assertEQ(a.length, 4)
              assertEQ(a[0][0].unboxed(), 1.7976931348623157e+308)
              assertEQ(a[2][2].unboxed(), 6.0)
          }
      use: |-
          // call context, array of array of boxed
          foo([[1.7976931348623157e+308, 2, ], [3, ], [4, 5, 6, ], [], ])

    - decl: |-
          function foo(a: Array<Array<Object>>) {
              assertEQ(a[0][0] as string,  "a")
              assertEQ(a[0][1] as int,  1)
              assertEQ(a[0][2] as boolean,  true)
              assertEQ(a[0][3] as bigint,  2n)
              assertEQ(a.length, 1)
          }
      use: |-
          // call context, array of array
          foo([["a", 1, true, 2n]])

    - decl: |-
          function sum(p: Array<Long>): long {
              let s: long = 0
              for (let v of p)
                  s += v
              return s
          }
      use: |-
          // call context
          assertEQ( sum([1, 2, 3]),  6 )
          assertEQ( sum([]),  0 )
          assertEQ( sum([0x0f0f0f0f, 0b10110011001, 42, 8 as byte]),  252646618 )

    - decl: |-
          class A {
              foo(p: Array<Object>): int {
                  let s = p.length
                  for (let v of p) {
                      s += v instanceof A ? 1 : 0
                  }
                  return s
              }
          }
      use: |-
          // call context
          assertEQ( new A().foo([new Object(), new Long(), new Int(), ]),  3 )
          assertEQ( new A().foo([new A(), new A(), new Object()]),  5 )
          assertEQ( new A().foo(["aaa", new A(), new Object(), ]),  4 )

    - decl: |-
          enum Color { Red, Green, Blue }
          function foo(a: Array<Color>) {
              assertEQ(a[0], Color.Red)
              assertEQ(a[1], Color.Blue)
              assertEQ(a.length, 2)
          }
      use: |-
          // call context, array of enums
          foo([Color.Red, Color.Blue])

    - decl: |-
          enum Color { Red, Green, Blue }
          function foo(a: Array<Array<Color>>) {
              assertEQ(a[0][0], Color.Red)
              assertEQ(a[0][1], Color.Blue)
              assertEQ(a.length, 1)
          }
      use: |-
          // call context, array of array of enums
          foo([[Color.Red, Color.Blue]])

    - decl: |-
          enum Color { Red, Green, Blue }
          type F = (p: Color) => int
          function foo(a: Array<F>) {
              assertEQ(a[0](Color.Red), 0)
              assertEQ(a[1](Color.Red), 1)
              assertEQ(a[2](Color.Blue), 4)
              assertEQ(a.length, 3)
          }
      use: |-
          // call context, array of functions
          foo([(p: Color): int => p.valueOf(), (p: Color): int => p.valueOf() + 1, (p: Color): int => p.valueOf() + 2])

    - decl: |-
          enum Color { Red, Green, Blue }
          type F = (p: Color) => int
          function foo(a: Array<Array<F>>) {
              assertEQ(a[0][0](Color.Red), 0)
              assertEQ(a[1][0](Color.Red), 1)
              assertEQ(a[2][0](Color.Blue), 4)
              assertEQ(a.length, 3)
          }
      use: |-
          // call context, array of array of functions
          foo([[(p: Color): int => p.valueOf()], [(p: Color): int => p.valueOf() + 1], [(p: Color): int => p.valueOf() + 2]])

    - decl: |-
          let u: undefined = undefined
          let n: null = null
          let o: Object = {}
          function foo(a: Array<null|undefined|Object>) {
              assertEQ(a[0], null)
              assertEQ(a[1] as Object, o)
              assertEQ(a[2] as Object, o)
              assertEQ(a[3], undefined)
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of unions
          foo([n, o, o, u])

    - decl: |-
          function foo(a: Array<boolean|int|string|null>) {
              assertEQ(a[0] as boolean, true)
              assertEQ(a[1] as int, 1)
              assertEQ(a[2] as string, 'a')
              assertEQ(a[3], null)
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of unions
          foo([true, 1, 'a', null])

    - decl: |-
          function foo(a: Array<Array<boolean|int|string|null>>) {
              assertEQ(a[0][0] as boolean, true)
              assertEQ(a[0][1] as int, 1)
              assertEQ(a[0][2] as string, 'a')
              assertEQ(a[0][3], null)
              assertEQ(a.length, 1)
          }
      use: |-
          // call context, array of array of unions
          foo([[true, 1, 'a', null]])

    - decl: |-
          let e = new Error
          function foo(a: Array<Number|Error|((p: string)=>string)|Boolean>) {
              assertEQ(a[0] as Error, e)
              assertEQ(a[1] as Boolean, false)
              assertEQ((a[2] as ((p: string) => string))('a'), 'aa')
              assertEQ(a[3] as Number, 42)
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of union with boxed
          foo([e, false, (p: string): string => p + p, 42])

    - decl: |-
          let e = new Error
          function foo(a: Array<Array<Number|Error|((p: string)=>string)|Boolean>>) {
              assertEQ(a[0][0] as Error, e)
              assertEQ(a[1][0] as Boolean, false)
              assertEQ((a[2][0] as ((p: string) => string))('a'), 'aa')
              assertEQ(a[3][0] as Number, 42)
              assertEQ(a.length, 4)
          }
      use: |-
          // call context, array of array of union with boxed
          foo([[e], [false], [(p: string): string => p + p], [42]])

    - decl: |-
          function foo(a: Array<Number>|Array<String>|Array<Boolean>) {
              assertEQ((a as Array<Boolean>)[0], false)
              assertEQ((a as Array<Boolean>)[1], true)
              assertEQ((a as Array<Boolean>)[2], false)
              assertEQ((a as Array<Boolean>).length, 3)
          }
      use: |-
          // call context, union of arrays
          foo([!true, true, !true])

    - decl: |-
          function foo(a: Array<Number>|Array<String>|Array<Boolean>) {
              assertEQ((a as Array<Number>)[0], 1)
              assertEQ((a as Array<Number>)[1], 2)
              assertEQ((a as Array<Number>)[2], 43)
              assertEQ((a as Array<Number>).length, 3)
          }
      use: |-
          // call context, union of arrays
          foo([1, 2, 40 + 3.0])

    - decl: |-
          function foo(a: Array<Number>|Array<String>|Array<Boolean>) {
              assertEQ((a as Array<String>)[0], '1')
              assertEQ((a as Array<String>)[1], '2')
              assertEQ((a as Array<String>)[2], '43')
              assertEQ((a as Array<String>).length, 3)
          }
      use: |-
          // call context, union of arrays
          foo(['1', '2', '43'])

    - decl: |-
          enum Color { Red, Green, Blue }
          enum Size { S, M, L, XL }
          function foo(a: Array<Color|Size>) {
              assertEQ(a[0] as Color, Color.Red)
              assertEQ(a[1] as Color, Color.Green)
              assertEQ(a[2] as Size, Size.XL)
              assertEQ(a.length, 3)
          }
      use: |-
          // call context, array of union of enums
          foo([Color.Red, Color.Green, Size.XL])
