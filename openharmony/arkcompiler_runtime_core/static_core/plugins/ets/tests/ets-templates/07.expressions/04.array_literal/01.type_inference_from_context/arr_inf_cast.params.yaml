# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # casting context
    - use: |-
          // casting context, array of primitives
          let a = [!true, true, true] as boolean[]
          assertEQ(a[0], false)
          assertEQ(a[1], true)
          assertEQ(a[2], true)
          assertEQ(a.length, 3)

    - use: |-
          // casting context, array of primitives
          let a = [1, 2, 3, -9223372036854775807 - 1] as long[]
          assertEQ(a[3], -9223372036854775808)
          assertEQ(a.length, 4)

    - use: |-
          // casting context, array of array of primitives
          let a = [[-2147483647, 2, ], [3, ], [2 + 2, 5, 2147483646 + 1, ], [], ] as int[][]
          assertEQ(a.length, 4)
          assertEQ(a[0][0], -2147483647)
          assertEQ(a[2][2], 2147483647)

    - use: |-
          // casting context, array of primitives
          let a = [Number.NaN, 0, 3.14, 1.7976931348623157e+308, ] as number[]
          assertTrue(Number.isNaN(a[0]))
          assertEQ(a[3], 1.7976931348623157e+308)
          assertEQ(a.length, 4)

    - use: |-
          // casting context, array of boxed
          let a = [false, true, true] as Boolean[]
          assertEQ(a[0].unboxed(), false)
          assertEQ(a[1].unboxed(), true)
          assertEQ(a[2].unboxed(), true)
          assertEQ(a.length, 3)

    - use: |-
          // casting context, array of boxed
          let a = [1, 2, 3, -9223372036854775808,] as Long[]
          assertEQ(a[3].unboxed(), -9223372036854775808)
          assertEQ(a.length, 4)

    - use: |-
          // casting context, array of boxed
          let a = [Number.NaN, 0, 3.14, 1.7976931348623157e+308, ] as Number[]
          assertTrue(Number.isNaN(a[0].unboxed()))
          assertEQ(a[3].unboxed(), 1.7976931348623157e+308)
          assertEQ(a.length, 4)

    - use: |-
          // casting context, array of array of boxed
          let a = [[1.7976931348623157e+308, 2, ], [3, ], [4, 5, 6, ], [], ] as Number[][]
          assertEQ(a.length, 4)
          assertEQ(a[0][0].unboxed(), 1.7976931348623157e+308)
          assertEQ(a[2][2].unboxed(), 6.0)

    - use: |-
          // casting context, array of strings
          let a = ['1', '2', '', '-9223372036854775808', ] as string[]
          assertEQ(a[3], '-9223372036854775808')
          assertEQ(a.length, 4)

    - use: |-
          // casting context, array of strings
          let a = ['x', 'x' + '1', 'x' + '2', 'x' + '3', ] as string[]
          assertEQ(a[0], 'x')
          assertEQ(a[1], 'x1')
          assertEQ(a[2], 'x2')
          assertEQ(a[3], 'x3')
          assertEQ(a.length, 4)

    - decl: |-
          function bar(i: int): char {
              return (i + 1) as char
          }
      use: |-
          // casting context, array of chars
          let a = [bar(42), bar(43), bar(44), ] as char[]
          assertEQ(a[0], c'+')
          assertEQ(a[1], c',')
          assertEQ(a[2], c'-')
          assertEQ(a.length, 3)

    - use: |-
          // casting context, array of array of strings
          let s = '1'
          let a = [[s, s + s,], ['', '-9223372036854775808',], ] as String[][]
          assertEQ(a[0][0], '1')
          assertEQ(a[0][1], '11')
          assertEQ(a[1][0], '')
          assertEQ(a[1][1], '-9223372036854775808')
          assertEQ(a.length, 2)

    - use: |-
          // casting context, array of bigint
          let a = [1n, 2n, 33333333333333333333333333333333333333333333333333n] as bigint[]
          assertEQ(a[1], 2n)
          assertEQ(a[2], 33333333333333333333333333333333333333333333333333n)
          assertEQ(a.length, 3)

    - use: |-
          // casting context, array of array of bigint
          let a = [[11111111111111111111111111111111111111111111111n], [2n], [33333333333333333333333333333333333333333333333333n]] as bigint[][]
          assertEQ(a[0][0], 11111111111111111111111111111111111111111111111n)
          assertEQ(a[2][0], 33333333333333333333333333333333333333333333333333n)
          assertEQ(a.length, 3)

    - decl: |-
          class A {}
      use: |-
          // casting context, array of A
          let a = [{}] as A[]
          assertTrue(a[0] instanceof A)
          assertEQ(a.length, 1)

    - decl: |-
          class A<T> {}
          let v = new A<Number>
          let q = new A<Number>
      use: |-
          // casting context, array of A<T>
          let a = [v, q] as A<Number>[]
          assertEQ(a[0], v)
          assertEQ(a[1], q)
          assertEQ(a.length, 2)

    - use: |-
          // casting context, array of array
          let a = [["a", 1, true, 2n]] as Object[][]
          assertEQ(a[0][0] as string,  "a")
          assertEQ(a[0][1] as int,  1)
          assertEQ(a[0][2] as boolean,  true)
          assertEQ(a[0][3] as bigint,  2n)
          assertEQ(a.length, 1)

    - decl: |-
          enum Color { Red, Green, Blue }
      use: |-
          // casting context, array of enums
          let a = [Color.Red, Color.Blue] as Color[]
          assertEQ(a[0], Color.Red)
          assertEQ(a[1], Color.Blue)
          assertEQ(a.length, 2)

    - decl: |-
          enum Color { Red, Green, Blue }
      use: |-
          // casting context, array of array of enums
          let a = [[Color.Red, Color.Blue]] as Color[][]
          assertEQ(a[0][0], Color.Red)
          assertEQ(a[0][1], Color.Blue)
          assertEQ(a.length, 1)

    - decl: |-
          enum Color { Red, Green, Blue }
          type F = (p: Color) => int
      use: |-
          // casting context, array of functions
          let a = [(p: Color): int => p.valueOf(), (p: Color): int => p.valueOf() + 1, (p: Color): int => p.valueOf() + 2] as F[]
          assertEQ(a[0](Color.Red), 0)
          assertEQ(a[1](Color.Red), 1)
          assertEQ(a[2](Color.Blue), 4)
          assertEQ(a.length, 3)

    - decl: |-
          enum Color { Red, Green, Blue }
          type F = (p: Color) => int
      use: |-
          // casting context, array of array of functions
          let a = [[(p: Color): int => p.valueOf()], [(p: Color): int => p.valueOf() + 1], [(p: Color): int => p.valueOf() + 2]] as F[][]
          assertEQ(a[0][0](Color.Red), 0)
          assertEQ(a[1][0](Color.Red), 1)
          assertEQ(a[2][0](Color.Blue), 4)
          assertEQ(a.length, 3)

    - decl: |-
          let u: undefined = undefined
          let n: null = null
          let o: Object = {}
      use: |-
          // casting context, array of unions
          let a = [n, o, o, u] as (null|undefined|Object)[]
          assertEQ(a[0], null)
          assertEQ(a[1] as Object, o)
          assertEQ(a[2] as Object, o)
          assertEQ(a[3], undefined)
          assertEQ(a.length, 4)

    - use: |-
          // casting context, array of unions
          let a = [true, 1, 'a', null] as (boolean|int|string|null)[]
          assertEQ(a[0] as boolean, true)
          assertEQ(a[1] as int, 1)
          assertEQ(a[2] as string, 'a')
          assertEQ(a[3], null)
          assertEQ(a.length, 4)

    - use: |-
          // casting context, array of array of unions
          let a = [[true, 1, 'a', null]] as (boolean|int|string|null)[][]
          assertEQ(a[0][0] as boolean, true)
          assertEQ(a[0][1] as int, 1)
          assertEQ(a[0][2] as string, 'a')
          assertEQ(a[0][3], null)
          assertEQ(a.length, 1)

    - decl: |-
          let e = new Error
      use: |-
          // casting context, array of union with boxed
          let a = [e, false, (p: string): string => p + p, 42] as (Number|Error|((p: string)=>string)|Boolean)[]
          assertEQ(a[0] as Error, e)
          assertEQ(a[1] as Boolean, false)
          assertEQ((a[2] as ((p: string) => string))('a'), 'aa')
          assertEQ(a[3] as Number, 42)
          assertEQ(a.length, 4)

    - decl: |-
          let e = new Error
      use: |-
          // casting context, array of array of union with boxed
          let a = [[e], [false], [(p: string): string => p + p], [42]] as (Number|Error|((p: string)=>string)|Boolean)[][]
          assertEQ(a[0][0] as Error, e)
          assertEQ(a[1][0] as Boolean, false)
          assertEQ((a[2][0] as ((p: string) => string))('a'), 'aa')
          assertEQ(a[3][0] as Number, 42)
          assertEQ(a.length, 4)

    - decl: |-
          type T = Number[]|String[]|Boolean[]
      use: |-
          // casting context, union of arrays
          let a = [false, !false, false] as T
          assertEQ((a as Boolean[])[0], false)
          assertEQ((a as Boolean[])[1], true)
          assertEQ((a as Boolean[])[2], false)
          assertEQ((a as Boolean[]).length, 3)

    - decl: |-
          type T = Number[]|String[]|Boolean[]
      use: |-
          // casting context, union of arrays
          let a = [1, 2, 43] as T
          assertEQ((a as Number[])[0], 1)
          assertEQ((a as Number[])[1], 2)
          assertEQ((a as Number[])[2], 43)
          assertEQ((a as Number[]).length, 3)

    - decl: |-
          let s = '4'
      use: |-
          // casting context, union of arrays
          let a = ['1', '2', s + '3'] as Number[]|String[]|Boolean[]
          assertEQ((a as string[])[0], '1')
          assertEQ((a as string[])[1], '2')
          assertEQ((a as string[])[2], '43')
          assertEQ((a as string[]).length, 3)

    - decl: |-
          enum Color { Red, Green, Blue }
          enum Size { S, M, L, XL }
      use: |-
          // casting context, array of union of enums
          let a = [Color.Red, Color.Green, Size.XL] as (Color|Size)[]
          assertEQ(a[0] as Color, Color.Red)
          assertEQ(a[1] as Color, Color.Green)
          assertEQ(a[2] as Size, Size.XL)
          assertEQ(a.length, 3)
