# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # array of objects
    - val: '[new Object, new Object]'
      type: 'Object[]'

    - val: '[[new Object], [new Object]]'
      type: 'Object[][]'

    - decl: |-
          let a = new Object
          const b = new Object
      val: '[a, b, ]'
      type: 'Object[]'

    - decl: |-
          let a = [new Object]
          const b = new Object
      val: '[a, [new Object], [b]]'
      type: 'Object[][]'

    - val: '[new Error, new Error, new Error]'
      type: 'Error[]'

    - decl: |-
          let a: Error = new Error
          const b = new Error
          let c = b
      val: '[[c], [b], [new Error], [a], [new Error], ]'
      type: 'Error[][]'

    # array of strings
    - val: "['a', 'b', 'c']"
      type: "string[]"

    - val: "[['a'], ['b'], ['c']]"
      type: "string[][]"

    - decl: |-
          let a: string = 'a'
          let b: string = 'b'
          const c: string = 'c'
      val: '[a, b, c]'
      type: 'string[]'

    - decl: |-
          const a: string = 'a'
          let b: string = 'b'
          let c: string = 'c'
      val: '[[a], [b], [c]]'
      type: 'string[][]'

    - decl: |-
          let a: string = 'a'
          let b: string = 'b'
          const c: string = 'c'
      val: "[a, b, c, 'd', 'e', ]"
      type: 'string[]'

    - decl: |-
          const a: string = 'a'
          let b: string = 'b'
          let c: string = 'c'
      val: "[['1'], ['2'], [a], [b], [c]]"
      type: 'string[][]'

    - decl: |-
          function foo(p: string): string {
              return p + p
          }
      val: "[foo('a'), foo('b'), foo('c')]"
      type: 'string[]'

    - decl: |-
          function foo(p: string): string {
              return p + p
          }
      val: "[[foo('a')], [foo('b')], [foo('c')]]"
      type: 'string[][]'

    # array of user classes
    - decl: |-
          class A {}
          let a = new A
          const b = new A
          let c = b
      val: '[{} as A, a, new A, b, c, ]'
      type: 'A[]'

    - decl: |-
          class A {}
          let a = new A
          const b = new A
          let c = b
      val: '[[c], [{} as A], [a], [new A], [b]]'
      type: 'A[][]'

    # array of interfaces
    - decl: |-
          interface I {}
          class A implements I {}
          let a = new A
      val: '[{} as A, a, new A]'
      type: 'I[]'

    - decl: |-
          interface I {}
          class A implements I {}
          let a = new A
      val: '[[{} as A], [a], [new A]]'
      type: 'I[][]'

    # array of enums
    - decl: |-
          enum Color { Red, Green, Blue }
      val: '[Color.Red, Color.Green]'
      type: 'Color[]'

    - decl: |-
          enum Color { Red, Green, Blue }
      val: '[[Color.Red], [Color.Green]]'
      type: 'Color[][]'

    # array of functions
    - decl: |-
          type F = (p: number) => number
          function foo(p: number): number {
              return p + p
          }
      val: '[foo, foo, foo]'
      type: 'F[]'

    - decl: |-
          let cnt: number
          type F = () => number
          function foo(): number {
              return cnt++
          }
          function bar(): number {
              return ++cnt
          }
          function baz(): number {
              return cnt--
          }
          let a = [foo, bar, baz, foo]
      val: a
      type: 'F[]'

    - decl: |-
          type F = (p: number) => number
          function foo(p: number): number {
              return p + p
          }
      val: '[foo, foo, (p: number): number => 0]'
      type: 'F[]'

    - decl: |-
          type F = (p: number) => number
          function foo(p: number): number {
              return p + p
          }
      val: '[[(p: number): number => 0], [foo], [foo]]'
      type: 'F[][]'

    - val: '[() => {}, () => {}]'
      type: '(() => void)[]'

    - val: '[[() => {}], [() => {}]]'
      type: '(() => void)[][]'

    - decl: |-
          type F = (p: string) => string
          let a: F = (p: string): string => p + p
          let b: F = (p: string): string => p + p + p
          let c: F = (p: string): string => p + p + p + p
      val: '[a, b, c]'
      type: 'F[]'

    - decl: |-
          type F = (p: string) => string
          let a: F = (p: string): string => p + p
          let b: F = (p: string): string => p + p + p
          let c: F = (p: string): string => p + p + p + p
      val: '[[a], [b], [c]]'
      type: 'F[][]'

    # array of tuples
    - decl: |-
          type T = [number, string]
          let a: T = [1, '1']
          let b: T = [2, '1']
      val: "[a, b, a, [3, '3'] as T]"
      type: 'T[]'

    - decl: |-
          type T = [number, string]
          let a: T = [1, '1']
          let b: T = [2, '1']
      val: "[[a], [b], [a], [[3, '3'] as T]]"
      type: 'T[][]'

    - decl: |-
          let a: [number, string] = [1, '1']
          let b: [number, string] = [2, '1']
      val: '[a, b, a]'
      type: '[number, string][]'

    - decl: |-
          let a: [number, string] = [1, '1']
          let b: [number, string] = [2, '1']
      val: '[[a], [b], [a]]'
      type: '[number, string][][]'

    # array of booleans
    - decl: |-
          let a = false
          const b = true
      val: '[a, true, true, b, false,]'
      type: 'boolean[]'

    - decl: |-
          let a = false
          const b = true
      val: '[[true], [true], [a], [false], [b]]'
      type: 'boolean[][]'

    - decl: |-
          let a = new Boolean(false)
          const b = new Boolean(true)
      val: '[new Boolean(), a, new Boolean(), new Boolean(), b, ]'
      type: 'Boolean[]'

    - decl: |-
          let a = new Boolean(false)
          const b = new Boolean(true)
      val: '[[b,], [new Boolean(),], [a,], [new Boolean(),], [new Boolean(),], ]'
      type: 'Boolean[][]'

    # array of nullish
    - decl: |-
          let a: Error|null
          let b: Error|null = new Error
      val: '[a, b]'
      type: '(Error|null)[]'

    - decl: |-
          let a: Error|null
          let b: Error|null = new Error
      val: '[[a], [b]]'
      type: '(Error|null)[][]'

    - decl: |-
          let a: Error|undefined
          let b: Error|undefined = new Error
      val: '[a, b]'
      type: '(Error|undefined)[]'

    - decl: |-
          let a: Error|undefined
          let b: Error|undefined = new Error
      val: '[[a], [b]]'
      type: '(Error|undefined)[][]'

    # array of chars
    - val: "[c'1', c'2']"
      type: 'char[]'

    - decl: |-
          let a: char = c'a'
          const b: char = c'b'
          let c = b
      val: '[c, b, a]'
      type: 'char[]'

    - decl: |-
          let a: char = c'a'
          const b: char = c'b'
          let c = b
      val: "[c'd', c, c'e', b, a]"
      type: 'char[]'

    - decl: |-
          let a: Char = new Char(c'a')
          const b: Char = new Char(c'b')
          let c = b
      val: '[c, b, a,]'
      type: 'Char[]'
