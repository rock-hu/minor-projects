# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          interface A {}
          interface B {}
      use: |-
          let a: A = {}
          let b: B = {}
          assertTrue( a instanceof A  )
          assertTrue( b instanceof B )
          assertTrue( a != b )

    - decl: |-
          class A {}
          interface B {
              ref: A
          }
      use: |-
          let a: A = {}
          let b1: B = { ref: {} }
          let b2: B = { ref: a }
          let b3: B = { ref: new A() }
          assertTrue( b1.ref instanceof A )
          assertTrue( b2.ref instanceof A )
          assertTrue( b3.ref instanceof A )
          assertTrue( b2.ref == a )

    - decl: |-
          interface A {
              b: B
          }
          interface B {
              c: C
          }
          interface C {
              name: string;
              age: number
          }
      use: |-
          let a: A = { b: { c: { age: 42, name: "John" }}}
          assertTrue( a.b.c.name == "John" )
          assertTrue( a.b.c.age == 42 )

    - decl: |-
          interface A {
              arr: string[]
          }
          function foo(a: A): A {
              return { arr: [ a.arr[1], a.arr[0] ]}
          }
      use: |-
          assertTrue( { arr: ["a", "b"] } as A != { arr: ["a", "b"] } as A )
          let a: A = foo({ arr: ["a", "b"]})
          assertTrue( a.arr[0] == "b" )
          assertTrue( a.arr[1] == "a" )

    - decl: |-
          interface A {
              name: string|null
          }
          class B implements A {
              name: string|null = null
          }
      use: |-
          let arr: A[] = [new B, new B]
          arr[0] = { name: "John" }
          arr[1] = { name: "Jack" }
          assertTrue( arr[0] instanceof A && arr[0].name == "John" )
          assertTrue( arr[1] instanceof A && arr[1].name == "Jack" )

    - decl: |-
          interface A {
              name: string|null
          }
      use: |-
          let arr: A[] = [ { name: "John" }, { name: null } ]
          assertTrue( arr[0] instanceof A && arr[0].name == "John" )
          assertTrue( arr[1] instanceof A && arr[1].name == null )

    - decl: |-
          interface A {
              name: string|undefined
          }
          interface B extends A {
              age: number
          }
      use: |-
          let b: B = { name: "John", age: 42 }
          assertTrue( b instanceof B && b.age == 42 && b.name == "John" )
          let a: A = b
          assertTrue( a instanceof A && a.name == "John" )
          let c: B = {}
          assertTrue( c instanceof B && c.age == 0 && c.name == undefined )

    - decl: |-
          interface A {
              age: number
          }
      use: |-
          let a: A = {}
          assertTrue( a instanceof A && a.age == 0 )

    - decl: |-
          interface A {}
      use: |-
          let v: A[] = [{}, {}, {}, {}, {}]
          assertTrue( v.length == 5 && v[0] instanceof A && v[0] != v[4] )

    - decl: |-
          interface A {
              age: number
          }
          interface B {
              age: number
          }
      use: |-
          let v: Object[] = [ {} as A, {} as B, {} ]
          assertTrue( v[0] instanceof A && (v[0] as A).age == 0 )
          assertTrue( v[1] instanceof B && (v[1] as B).age == 0 )
          assertTrue( v[2] instanceof Object )

    - decl: |-
          interface A {
              readonly name: string|null
          }
      use: |-
          let a: A = { name: "John" }
          assertTrue( a.name == "John" )

    - decl: |-
          interface A {
              age: number;
              adult: boolean
          }
      use: |-
          let v = 42
          // expressions in field values
          let a: A = { age: v, adult: v >= 18 }
          assertTrue(a.age == 42 && a.adult)

    - decl: |-
          interface A {
              fld1: number;
              fld2: number;
              fld3: number
          }
      use: |-
          let v = 42
          // expressions in field values
          let a: A = { fld1: v++, fld2: v++, fld3: v++ }
          assertTrue(v == 45 && a.fld1 == 42 && a.fld2 == 43 && a.fld3 == 44)

    - decl: |-
          interface A {
              first_name: string|undefined;
              last_name: string|undefined;
              full_name: string|undefined
          }
          function ln(): string {
              return "Smith"
          }
      use: |-
          let fn = "John"
          // expressions in field values
          let a: A = { first_name: fn, last_name: ln(), full_name: fn + " " + ln() }
          assertTrue(a.full_name == "John Smith")
