# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - use: |-
          let a: Record<number, string> = {}
          let b: Record<number, string> = {}
          assert a instanceof Record
          assert b instanceof record
          assert a != b

    - use: |-
          let a: Record<number, string> = {
              1: "Jan",
              2: "Feb",
              -10: "Dec",
          }
          assert a[1] == "Jan"
          assert a[2] == "Feb"
          assert a[-10] == "Dec"
          a = {}
          assert a[1] == undefined
          assert a[2] == undefined
          assert a[-10] == undefined

    - use: |-
          let a: Record<-10 | 2 | number, string> = {
              1: "Jan",
              2: "Feb",
              -10: "Dec",
          }
          assert a[1] == "Jan"
          assert a[2] == "Feb"
          assert a[-10] == "Dec"
          a = {}
          assert a[1] == undefined
          assert a[2] == undefined
          assert a[-10] == undefined

    - use: |-
          let a: Record<"a" | "b" | "c", Record<number, boolean>> = {
              "c": { 1: false,
                     42: true,
              },
              "b": {},
              "a": { 1: true,
                     42: false,
              },
          }
          assert a["a"][1]
          assert a["b"][123] === undefined
          assert a["c"][42]

    - decl: |-
          enum Color { Red, Green, Blue }
          type Keys = "A" | 1 | "B" | 2
          type Values = Color | string
      use: |-
          let a: Record<Keys, Values> = {
              1: Color.Red,
              2: "green",
              "A" : Color.Blue,
              "B": "green"
            }
          assert a[1] == Color.Red
          assert a[2] == a["B"]
          assert a["A"] == Color.Blue

    - decl: |-
          type R = Record<string, string>
          function foo(p: R): R {
              if (p["A"] == "B") {
                  return { "exitCode": "0" }
              } else {
                  return { "exitCode": "1" }
              }
          }
      use: |-
          assert foo({ "A": "B" })["exitCode"] == "0"
          assert foo({ "A": "C" })["exitCode"] == "1"

    - decl: |-
          type func = (p: number) => R
          type R = Record<number, func | boolean>
          function foo(p: number): R {
              if (p == 0) {
                  return { p: true }
              } else {
                  return { p: foo }
              }
          }
      use: |-
          assert foo(1)[1](2)[2](3)[3](0)[0]
