# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - use: |-
          // empty records
          let a: Record<number, string> = {}
          let b: Record<number, string> = {}
          assertEQ(a instanceof Record, true)
          assertEQ(b instanceof Record, true)
          assertEQ(a != b, true)

    - use: |-
          // number to string
          let a: Record<number, string> = {
              0: "Zero",
              1: "One",
              3.14159: "PI",
          }
          assertEQ(a[0], "Zero")
          assertEQ(a[1], "One")
          assertEQ(a[3.14159], "PI")
          assertEQ(a[42], undefined)
          a = {}
          assertEQ(a[0], undefined)
          assertEQ(a[1], undefined)
          assertEQ(a[3.14159], undefined)

    - decl: |-
          function foo(p: string): string {
              return p + p
          }
      use: |-
          // number to string expression
          let a: Record<number, string> = {
              0: foo("Zero"),
              1: foo("One"),
              3.14159: "P" + foo("I"),
          }
          assertEQ(a[0], "ZeroZero")
          assertEQ(a[1], "OneOne")
          assertEQ(a[3.14159], "PII")
          assertEQ(a[42], undefined)
          a = {}
          assertEQ(a[0], undefined)
          assertEQ(a[1], undefined)
          assertEQ(a[3.14159], undefined)

    - use: |-
          // string to number
          let a: Record<string, number> = {
              "Zero": 0b0,
              "One": 1.0,
              "Two": 2e00,
              "Minus PI": -3.14159,
          }
          assertEQ(a["Zero"], 0)
          assertEQ(a["One"], 1)
          assertEQ(a["Two"], 2)
          assertEQ(a["Minus PI"], -3.14159)
          assertEQ(a["PI"], undefined)
          a = {}
          assertEQ(a["Zero"], undefined)
          assertEQ(a["One"], undefined)
          assertEQ(a["Two"], undefined)
          assertEQ(a["Minus PI"], undefined)

    - use: |-
          // string literals to number
          let a: Record<"Zero" | "One" | "Two", number> = {
              "Zero": 0b0,
              "One": 1.0,
              "Two": 2e00,
          }
          assertEQ(a["Zero"], 0)
          assertEQ(a["One"], 1)
          assertEQ(a["Two"], 2)

    - use: |-
          // string literals and string to number
          let a: Record<string | "Zero" | "One" | "Two", number> = {
              "": 0x00,
              " ": 0x01,
              "One": 1.0,
              "Two": 2e00,
              "PI constant value": 3.14159,
          }
          assertEQ(a["Zero"], undefined)
          assertEQ(a["One"], 1)
          assertEQ(a["Two"], 2)
          assertEQ(a[""], 0)
          assertEQ(a[" "], 1)
          assertEQ(a["PI constant value"], 3.14159)

    - use: |-
          // string literals to Record
          let a: Record<"a" | "b" | "c", Record<number, boolean>> = {
              "c": { 1: false,
                     42: true,
              },
              "b": {},
              "a": { 1: true,
                     42: false,
              },
          }
          assertEQ(a["a"][1]!, true)
          assertEQ(!(a["a"][42]!), true)
          assertEQ(a["b"][123], undefined)
          assertEQ(!(a["c"][1]!), true)
          assertEQ(a["c"][42]!, true)

    - use: |-
          // string to Record
          let a: Record<string, Record<number, boolean>> = {
              "c": { 1: false,
                     42: true,
              },
              "b": {},
          }
          assertEQ(a["b"]![123], undefined)
          assertEQ(!(a["c"]![1]!), true)
          assertEQ(a["c"]![42]!, true)

    - use: |-
          // short to Error
          let a: Record<Short, Error> = {
              1: new Error,
              22: new Error,
              333: new Error,
          }
          assertEQ(a[1] instanceof Error && a[22] instanceof Error && a[333] instanceof Error, true)
          assertEQ(a[1] != a[22] && a[1] != a[333], true)
          assertEQ(a[2], undefined)

    - use: |-
          // byte to union
          let a: Record<Byte, Double | Boolean | null> = {
              0: 3.14159,
              50: false,
              100: null,
              127: 127.0,
          }
          assertEQ(a[0], 3.14159)
          assertEQ(a[50], false)
          assertEQ(a[100], null)
          assertEQ(a[127], 127.0)
          assertEQ(a[1], undefined)

    - decl: |-
          // union to union
          enum Color { Red, Green, Blue }
          type Keys = "A" | "B"
          type Values = Color | string
      use: |-
          let a: Record<Keys, Values> = {
              "A" : Color.Blue,
              "B": "green"
            }
          assertEQ(a["A"], Color.Blue)
          assertEQ(a["B"], "green")
          a["A"] = Color.Red
          assertEQ(a["A"], Color.Red)

    - decl: |-
          // infer Record type from function signature
          type R = Record<string, string>
          function foo(p: R): R {
              if (p["A"] == "B") {
                  return { "exitCode": "0" }
              } else {
                  return { "exitCode": "1" }
              }
          }
      use: |-
          assertEQ(foo({ "A": "B" })["exitCode"], "0")
          assertEQ(foo({ "A": "C" })["exitCode"], "1")

    - use: |-
          // string to array
          let r: Record<string, string[]> = {
              "\u0000": [""],
              "\u0001": ["", "1"],
              "\u0002": ["", "1", "2"],
              "wrong key": [] as string[]
          }
          assertEQ(r["\u0000"]![0], "")
          assertEQ(r["\u0001"]![0], "")
          assertEQ(r["\u0001"]![1], "1")
          assertEQ(r["\u0002"]![0], "")
          assertEQ(r["\u0002"]![1], "1")
          assertEQ(r["\u0002"]![2], "2")
          assertEQ(r["wrong key"]!.length, 0)
          assertEQ(r["bad key"], undefined)

    - use: |-
          // string literals to tuple
          let r: Record<"Q"|"W"|"E", [number, bigint]> = {
              "Q": [1e0, 1n],
              "W": [1e10, 111111111n],
              "E": [1e20, 111111111111111111n]
          }
          assertEQ(r["Q"][0], 1)
          assertEQ(r["Q"][1], 1n)
          assertEQ(r["W"][0], 1e10)
          assertEQ(r["W"][1], 111111111n)
          assertEQ(r["E"][0], 1e20)
          assertEQ(r["E"][1], 111111111111111111n)

    - use: |-
          // string literals to function
          let r: Record<"add" | "mul", (p: number) => number> = {
              "add": (p: number): number => p + p,
              "mul": (p: number): number => p * p
          }
          assertEQ(r["add"](42), 84)
          assertEQ(r["mul"](12), 144)
          r["add"] = (p: number): number => p + p + p
          assertEQ(r["add"](3), 9)

    - use: |-
          // string to function
          let r: Record<string, (p: number) => number> = {
              "add": (p: number): number => p + p,
              "mul": (p: number): number => p * p
          }
          assertEQ(r["add"]!(42), 84)
          assertEQ(r["mul"]!(12), 144)
          assertEQ(r["div"], undefined)

    - use: |-
          // number to union
          let r: Record<number, string|double|null|undefined> = {
              1: "1",
              2: 2.5,
              3: null,
              4: undefined,
          }
          assertEQ(r[1], "1")
          assertEQ(r[2], 2.5)
          assertEQ(r[3], null)
          assertEQ(r[4], undefined)
          assertEQ(r[5], undefined)

    - use: |-
          // string literals to union
          let r: Record<"1"|"2"|"3"|"4", Char|Boolean|Long|Error> = {
              "1": c'1',
              "2": false,
              "3": Long.MAX_VALUE,
              "4": new Error()
          }
          assertEQ(r["1"], c'1')
          assertEQ(r["2"], false)
          assertEQ(r["3"], Long.MAX_VALUE)
          assertEQ(r["4"] instanceof Error, true)
    - decl: |-
          class Test {
              me: int;
              constructor(e: int) {
                  this.me = e;
              }
          }
      use: |-
          // string literals to union
          let r: Record<"hw"|"HW"|"hW", Test> = {
              "hw": new Test(100),
              "HW": new Test(150),
              "hW": new Test(225)
          }

          assertEQ(r["hw"].me, 100)
          assertEQ(r["HW"].me, 150)
          assertEQ(r["hW"].me, 225)
    - decl: |-
          enum Queen { Dont, Stop, Me, Now }
      use: |-
          let r: Record<"Dont"|"Stop"|"Me"|"Now", Queen> = {
              "Dont": Queen.Now,
              "Stop": Queen.Me,
              "Me": Queen.Stop,
              "Now": Queen.Dont
          }

          assertEQ(r["Dont"], Queen.Now)
          assertEQ(r["Stop"], Queen.Me)
          assertEQ(r["Me"], Queen.Stop)
          assertEQ(r["Now"], Queen.Dont)
    - use: |-
          let r: Record<"concat"|"remove", (f: string, s: string) => string> = {
              "concat": (f: string, s: string): string => f + s,
              "remove": (f: string, s: string): string => f.replace(s, '')
          }

          assertEQ(r["concat"]("Hello, ", "world!"), "Hello, world!")
          assertEQ(r["remove"]("What are you doing?", " doing"), "What are you?")
    - use: |-
          let r: Record<"Nor"|"Shall"|"Death"|"Brag", Record<"Thou"|"Wanderst"|"In"|"His"|"Shade", int>> = {
              "Nor": {
                  "Thou": 1,
                  "Wanderst": 2,
                  "In": 3,
                  "His": 4,
                  "Shade": 5,
              },
              "Shall": {
                  "Thou": 10,
                  "Wanderst": 20,
                  "In": 30,
                  "His": 40,
                  "Shade": 50,
              },
              "Death": {
                  "Thou": 100,
                  "Wanderst": 200,
                  "In": 300,
                  "His": 400,
                  "Shade": 500,
              },
              "Brag": {
                  "Thou": 1000,
                  "Wanderst": 2000,
                  "In": 3000,
                  "His": 4000,
                  "Shade": 5000,
              }
          }

          assertEQ(r["Nor"]["Thou"], 1);
          assertEQ(r["Nor"]["Wanderst"], 2);
          assertEQ(r["Nor"]["In"], 3);
          assertEQ(r["Nor"]["His"], 4);
          assertEQ(r["Nor"]["Shade"], 5);

          assertEQ(r["Shall"]["Thou"], 10);
          assertEQ(r["Shall"]["Wanderst"], 20);
          assertEQ(r["Shall"]["In"], 30);
          assertEQ(r["Shall"]["His"], 40);
          assertEQ(r["Shall"]["Shade"], 50);

          assertEQ(r["Death"]["Thou"], 100);
          assertEQ(r["Death"]["Wanderst"], 200);
          assertEQ(r["Death"]["In"], 300);
          assertEQ(r["Death"]["His"], 400);
          assertEQ(r["Death"]["Shade"], 500);

          assertEQ(r["Brag"]["Thou"], 1000);
          assertEQ(r["Brag"]["Wanderst"], 2000);
          assertEQ(r["Brag"]["In"], 3000);
          assertEQ(r["Brag"]["His"], 4000);
          assertEQ(r["Brag"]["Shade"], 5000);
    - decl: |-
          let r: Record<"Please"|"Read"|"Beware"|"Of"|"Pity", string> = {
              "Please": "Book",
              "Read": "Written by",
              "Beware": "Stefan",
              "Of": "Zweig",
              "Pity": "in 1939"
          }
      use: |-
          assertEQ(r["Please"], "Book")
          assertEQ(r["Read"], "Written by")
          assertEQ(r["Beware"], "Stefan")
          assertEQ(r["Of"], "Zweig")
          assertEQ(r["Pity"], "in 1939")
    - decl: |-
          class VulkanAPI {
              callMeOrDie() {
                  let r: Record<"Chill"|"Just"|"Joking :)", boolean> = {
                      "Chill": true,
                      "Just": true,
                      "Joking :)": false
                  }

                  assertEQ(r["Chill"], true)
                  assertEQ(r["Just"], true)
                  assertEQ(!r["Joking :)"], true)
              }
          }
      use: |-
          let api: VulkanAPI = {}
          api.callMeOrDie()