# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
# arrays
    - decl: |-
          let a1: Object|null|undefined = new Object
          class A {
              fld: int
              constructor(...p: Object[]) {
                  this.fld = p.length > 0 ? p.length : -1
              }
          }
      use: |-
          // not array type
          assert(new A(...a1).fld == -1)
      tags: 'negative, compile-only'

    - decl: |-
          let a1: number[] = [1.0, 2.0]
          class A {
              fld: number
              constructor(p1: number, p2: number) {
                  this.fld = p1 + p2
              }
          }
      use: |-
          // not rest parameters
          assert(new A(...a1).fld == 3.0)
      tags: 'negative, compile-only'

    - decl: |-
          class A {
              fld: int
              constructor(...p: Object[]) {
                  this.fld = p.length
              }
          }
      use: |-
          // empty arrays
          let a1: Object[] = [], a2: Error[] = []
          assert(new A(...[...a1, ...a2, new Object(), ...a1]).fld == 1)

    - decl: |-
          class A {
              fld: int
              constructor(...p: char[]) {
                  this.fld = p.length
              }
          }
      use: |-
          // spread of char array
          let a: char[] = [c'b', c'c']
          assert(new A(...a).fld == 2)

    - decl: |-
          class A {
              fld: int
              constructor(a: int, ...p: byte[]) {
                  this.fld = a + reduce(p, (prev: int, next: byte) => prev + next, 0)
              }
          }
      use: |-
          // spread of byte array
          let a: byte[] = [1 as byte, 2 as byte, 3 as byte]
          assert(new A(42, ...a).fld == 48)

    - decl: |-
          class A {
              fld: int
              constructor(a: int, ...p: short[]) {
                  this.fld = a + reduce(p, (prev: int, next: short) => prev + next, 0)
              }
          }
      use: |-
          // spread of short array
          let a: short[] = [1 as short, 2 as short, 3 as short]
          assert(new A(42, ...a).fld == 48)

    - decl: |-
          class A {
              fld: long
              constructor(a: long, ...p: long[]) {
                  this.fld = a + reduce(p, (prev: long, next: long) => prev + next, 0 as long)
              }
          }
      use: |-
          // spread of long array
          let a: long[] = [1 as long, 2 as long, 3 as long]
          assert(new A(42, ...a).fld == 48)

    - decl: |-
          class A {
              fld: float
              constructor(a: float, ...p: float[]) {
                  this.fld = a + reduce(p, (prev: float, next: float) => prev + next, 0f)
              }
          }
      use: |-
          // spread of float array
          let a: float[] = [1f, 2f, 3f]
          assert(new A(42f, ...a).fld == 48f)

    - decl: |-
          class A {
              fld: number
              constructor(a: number, ...p: number[]) {
                  this.fld = a + reduce(p, (prev: number, next: number) => prev + next, 0.0)
              }
          }
      use: |-
          // spread of number array
          let a: number[] = [1.0, 2.0, 3.0]
          assert(new A(42, ...a).fld == 48.0)

    - decl: |-
          type F = (p: number) => number
          class A {
              fld: number
              constructor(a: number, ...p: F[]) {
                  let res = a
                  for (let el of p) res += el(res)
                  this.fld = res
              }
          }
      use: |-
          // spread of function array
          let a: F[] = [(p: number) => p * 2, (p: number) => p * 3]
          let b: F[] = [(p: number) => p * 4, (p: number) => p * 5]
          let obj = new A(1.0, ...[...a, ...b])
          assert(obj.fld == 360.0)

    - decl: |-
          enum Color { Red, Green, Blue }
          class A {
              fld: Color
              constructor(...p: Color[]) {
                  this.fld = p.length ? p[p.length - 1] : Color.Red
              }
          }
      use: |-
          // spread of enums
          let a: Color[] = [Color.Red, Color.Blue, Color.Green]
          let obj = new A(...a)
          assert(obj.fld == Color.Green)

    - decl: |-
          class A {
              fld: number
              constructor(...p: number[]) {
                  this.fld = p.length ? p[p.length - 1] : -1.0
              }
          }
      use: |-
          // expression in parentheses
          assert(new A(...([1.0, 2.0])).fld == 2.0)

    - decl: |-
          class A {
              fld: int
              constructor(a: int, ...p: Object[]) {
                  this.fld = a + p.length
              }
          }
          class B extends A {
              constructor(a: int, ...p: Object[]) {
                  super(a, ...p)
              }
          }
      use: |-
          // ensure-not-nullish expression
          let a1: Object[]|null = [new Object, new Object]
          let obj = new B(5, ...a1!)
          assert(obj.fld == 7)

    - decl: |-
          class A {
              fld: int
              constructor(a: int, ...p: Object[]) {
                  this.fld = a + p.length
              }
          }
          let a1: Object[]|null = null
      use: |-
          // ensure-not-nullish expression
          let obj = new A(5, ...a1!)  // NPE expected
          assert(obj.fld == 7)
      tags: 'negative'

    - decl: |-
          class A {
              fld: int
              constructor(a: int, ...p: Object[]) {
                  this.fld = a + p.length
              }
          }
          let a1: Object[]|null = [new Object, new Object]
      use: |-
          // nullish expression
          let obj = new A(5, ...a1)  // CTE expected
          assert(obj.fld == 7)
      tags: 'negative, compile-only'

    - decl: |-
          let a1: Object[]|null = null
          let a2: Object[]|null = [new Object, new Object]
          class A {
              fld: int
              constructor(a: int, ...p: Object[]) {
                  this.fld = a + p.length
              }
          }
      use: |-
          // nullish-coalescing expression
          assert(new A(5, ...(a1 ?? a2)!).fld == 7)

    - decl: |-
          class A {
              foo(): number[] {
                  return [1.0, 2.0]
              }
          }
          class B {
              fld: number
              constructor(...p: number[]) {
                  this.fld = reduce(p, (prev: number, next: number) => prev + next, 0.0)
              }
          }
      use: |-
          // method call in expression
          let a = new A()
          let b = new B(...a.foo())
          assert(b.fld == 3.0)

    - decl: |-
          class A {
              fld: string
              constructor(...p: string[]) {
                  this.fld = String.join(p, "")
              }
          }
      use: |-
          // method call in expression
          let s = ["h", "", "el", "", "", "l", "", "o"]
          assert(new A(...((s: string[]): string[] => {
                let res: string[] = []
                for (let el of s) if (el.length > 0) res = [...res, el]
                return res
          })(s)).fld == "hello")

    - decl: |-
          class A {
              fld: number
              constructor(...p: number[]) {
                  this.fld = p.length ? p[p.length - 1] : -1
              }
          }
      use: |-
          // new expression in expression
          assert(new A(...(new number[256])).fld == 0)

    - decl: |-
          class A {
              fld: double
              constructor(...p: double[]) {
                  this.fld = p[0] + p[1]
              }
          }
      use: |-
          // array index expression
          let a: double[][] = [[2.0, 3.0], []]
          assert(new A(...a[0]).fld == 5)

    - decl: |-
          class A {
              fld: double
              constructor(...p: double[]) {
                  this.fld = p[0] + p[1] + p[2]
              }
          }
      use: |-
          // tuple index expression
          let a: [string, double[], string] = ["X", [2.0, 3.0, 4.0], "Z"]
          let obj = new A(...a[1])
          assert(obj.fld == 9)

    - decl: |-
          class A {
              fld: string
              constructor(...p: string[]) {
                  this.fld = String.join(p, "-")
              }
          }
      use: |-
          // assignment expression in expression
          let a1 = ["1", "2", "3"]
          let a2 = ["a", "b"]
          let obj = new A(...(a1 = a2))
          assert((obj).fld == "a-b")

    - decl: |-
          let a1 = ["1", "2", "3"]
          let a2 = ["a", "b"]
          class A {
              fld: string
              constructor(...p: string[]) {
                  this.fld = String.join(p, "-")
              }
          }
      use: |-
          // conditional expression in expression
          assert(new A(...(a1.length > a2.length ? a1 : a2)).fld == "1-2-3")

    - decl: |-
          class A {
              fld: boolean[]
              constructor(p: boolean[], q: boolean[]) {
                  this.fld = [...p, ...q]
              }
              meth(): int {
                  return new B(42, ...this.fld).fld
              }
          }
          class B {
              fld: int
              constructor(a: int, ...p: boolean[]) {
                  this.fld = a + p.length
              }
          }
      use: |-
          // use this expression
          let a: A = new A([false, false], [true, true])
          assert(a.meth() == 46)

    - decl: |-
          abstract class A {
              fld: boolean[]
              constructor(p: boolean[]) {
                  this.fld = p
              }
              meth(): boolean[] {
                  return this.fld
              }
          }
          class B extends A {
              constructor(p: boolean[], q: boolean[]) {
                  super([...p, ...q])
              }
              bar(): int {
                  return new C(42, ...super.meth()).fld
              }
          }
          class C {
              fld: int
              constructor(a: int, ...p: boolean[]) {
                  this.fld = a + p.length
              }
          }
      use: |-
          // use super expression
          let b: B = new B([false, false], [true, true])
          assert(b.bar() == 46)

    - decl: |-
          class A {
              fld: int
              constructor(...p: number[][]) {
                  let res = 0
                  for (let el of p) res += el.length
                  this.fld = res
              }
          }
          let a1: number[][] = [[1.0, 2.0], [], [3.0, 4.0], [5.0]]
      use: |-
          // spread of arrays
          assert(new A(...a1).fld == 5)

    - decl: |-
          class A {
              fld: number[]
              constructor(...p: number[][]) {
                  let res: number[] = []
                  for (let el of p) res = [...res, ...el]
                  this.fld = res
              }
          }
          class B {
              fld: number
              constructor(...p: number[]) {
                  let res = 0.0
                  for (let el of p) res += el
                  this.fld = res
              }
          }
          let a1: number[][] = [[1.0, 2.0], [3.0, 4.0]]
          let a2: number[][] = [[5.0, 6.0], []]
      use: |-
          // spread of arrays, flatten array
          assert(new B(...[...new A(...a1).fld, ...new A(...a2).fld]).fld == 21.0)

    - decl: |-
          class A {
              fld: double
              constructor(...p: (Double|Short|Byte)[]) {
                  let res = 0.0
                  for (let el of p) res += (el as Numeric).doubleValue()
                  this.fld = res
              }
          }
      use: |-
          // union of value types in result array
          let a1: Double[] = [1, 2, 3], a2: Short[] = [4, 5], a3: Byte[] = [6]
          assert(new A(...[-10.0, ...a1, ...a1, ...a2, ...a2, ...a3, 10.0, ...a3]).fld == 42.0)

    - decl: |-
          class A {
              fld: int
              constructor(...p: (Int|Number|String|undefined)[]) {
                  this.fld = p.length
              }
          }
      use: |-
          // union of reference types in result array
          let a1: (Int|Number|String|undefined)[] = [new Int(), new Int(), undefined, "Z", 42.0]
          assert(new A(...a1).fld == 5)

    - decl: |-
          class A<T> {}
          class B<T> {}
          class C<T> {}
          class Z<T, U, V> {
              fld: int
              constructor(...p: (A<T>|B<U>|C<V>|null)[]) {
                  this.fld = p.length
              }
          }
      use: |-
          // use generics
          let a1: (A<String>|B<Long>|C<Error>|null)[] = [new A<String>, new B<Long>, new C<Error>]
          let obj = new Z<String, Long, Error>(...a1)
          assert(obj.fld == 3)

    - decl: |-
          let a1 = ["1", "2", "3"]
          class A {
              fld: string
              constructor(...p: string[]) {
                  this.fld = String.join(p, "")
              }
          }
      use: |-
          // lambda expression in expression
          assert(new A(...((): string[] => a1)()).fld == "123")

    - decl: |-
          let a1 = ["1", "2", "3"]
          class A {
              fld: string
              constructor(...p: string[]) {
                  this.fld = String.join(p, "")
              }
          }
      use: |-
          // lambda expression in expression
          assert(new A(...((p: string[], q: string[]): string[] => [...p, ...q])(a1, a1)).fld == "123123")

# tuples
    - decl: |-
          class A {
              fld: [boolean, number]
              constructor(...p: [number, boolean]) {
                  this.fld = [p[1], p[0]]
              }
          }
      use: |-
          // spread a tuple to same type tuple
          let t1: [number, boolean] = [1.0, true]
          let r: [boolean, number] = new A(...t1).fld
          assert(r[0] && r[1] == 1.0)

    - decl: |-
          class A {
              fld: [number, number, boolean, boolean]
              constructor(...p: [number, boolean]) {
                  this.fld = [p[0], p[0], p[1], p[1]]
              }
          }
      use: |-
          // spread tuples to different types
          let t: [number, boolean] = [1.0, true]
          let r: [number, number, boolean, boolean] = new A(...t).fld
          assert(r[0] == 1.0 && r[1] == 1.0 && r[2] && r[3])

    - decl: |-
          class A {
              fld: [byte, short, int, long, float, double, boolean, char, string, int]
              constructor(...p: [byte, short, int, long, float, double, boolean, char, string]) {
                  this.fld = [...p, 42]
              }
          }
      use: |-
          // spread tuples of all value types
          let r: [byte, short, int, long, float, double, boolean, char, string] =
              [1 as byte, 2 as short, 3, 4 as long, 5f, 6.0, true, c'Z', "X"]
          assert(new A(...r).fld[9] == 42)

    - decl: |-
          class A {
              fld: int
              constructor(...p: [Object, Error]) {
                  this.fld = p[0] != p[1] ? 3 : 0
              }
          }
          let a1: [Object, Error]|null = [new Object, new Error]
      use: |-
          // ensure-not-nullish expression
          assert(new A(...a1!).fld == 3)

    - decl: |-
          class A {
              fld: int
              constructor(...p: [Object, Error]) {
                  this.fld = p[0] != p[1] ? 3 : 0
              }
          }
          let a1: [Object, Error]|null = null
      use: |-
          // ensure-not-nullish expression
          assert(new A(...a1!).fld == 3) // NPE expected
      tags: 'negative'

    - decl: |-
          let a1: [Object, Error]|null = null
          let a2: [Object, Error]|null = [new Object, new Error]
          class A {
              fld: int
              constructor(...p: [Object, Error]) {
                  this.fld = p[0] != p[1] ? 3 : 0
              }
          }
      use: |-
          // nullish-coalescing expression
          let obj = new A(...(a1 ?? a2)!)
          assert(obj.fld == 3)

    - decl: |-
          let a1: [Object, Error]|null = null
          let a2: [Object, Error]|null = null
          class A {
              fld: int
              constructor(...p: [Object, Error]) {
                  this.fld = p[0] != p[1] ? 3 : 0
              }
          }
      use: |-
          // nullish-coalescing expression
          assert(new A(...(a1 ?? a2)!).fld == 3) // NPE expected
      tags: 'negative'

    - decl: |-
          let a1: [Object, Error]|null = null
          let a2: [Object, Error]|null = null
          class A {
              fld: int
              constructor(...p: [Object, Error]) {
                  this.fld = p[0] != p[1] ? 3 : 0
              }
          }
      use: |-
          // nullish-coalescing expression
          assert(new A(...(a1 ?? a2)).fld == 3)  // CTE, nullish expression
      tags: 'negative, compile-only'

    - decl: |-
          class A {
              fld: [string, number]
              constructor(...p: [number, string]) {
                  this.fld = [p[1], p[0]]
              }
              static foo(): [number, string] {
                  return [1.0, "X"]
              }
          }
      use: |-
          // function call in expression
          let r: [string, number] = new A(...A.foo()).fld
          assert(r[0] == "X" && r[1] == 1)

    - decl: |-
          class A {
              fld: double
              constructor(...p: [double, double]) {
                  this.fld = p[0] + p[1]
              }
          }
      use: |-
          // tuple index expression
          let a: [[double, double], [char, char]] = [[2.0, 3.0], [c'Z', c'X']]
          let obj = new A(...a[0])
          assert(obj.fld == 5.0)

    - decl: |-
          class A {
              fld: int
              constructor(...p: [string, int]) {
                  this.fld = p[1]
              }
          }
      use: |-
          // assignment expression in expression
          let a1: [string, int] = ["1", 10]
          let a2: [string, int] = ["2", 20]
          assert(new A(...(a1 = a2)).fld == 20)

    - decl: |-
          let a1: [int, int] = [1, 2]
          let a2: [int, int] = [5, 6]
          class A {
              fld: int
              constructor(...p: [int, int]) {
                  this.fld = p[0] + p[1]
              }
          }
      use: |-
          // conditional expression in expression
          let r = new A(...(a1[0] > a2[0] ? a1 : a2)).fld
          assert(r == 11)

    - decl: |-
          class A {
              fld: [int, char]
              constructor(p: int, q: char) {
                  this.fld = [p, q]
              }
              meth(): int {
                  return 10 + new Z(...this.fld).fld
              }
          }
          class Z {
              fld: int
              constructor(...p: [int, char]) {
                  this.fld = 100 + p[0]
              }
          }
      use: |-
          // use this expression
          let a: A = new A(1, c'Z')
          assert(a.meth() == 111)

    - decl: |-
          abstract class A {
              fld: [int, char]
              constructor(p: [int, char]) {
                  this.fld = p
              }
              meth(): [int, char] {
                  return this.fld
              }
          }
          class B extends A {
              constructor(p: int, q: char) {
                  super([p, q])
              }
              meth(): int {
                  return 10 + new Z(...super.meth()).fld
              }
          }
          class Z {
              fld: int
              constructor(...p: [int, char]) {
                  this.fld = 100 + p[0]
              }
          }
      use: |-
          // use super expression
          let b: B = new B(1, c'Z')
          assert(b.meth() == 111)

    - decl: |-
          class A<T> {}
          class B<T> {}
          class Z<T, U> {
              fld: boolean
              constructor(...p: [A<T>, B<U>]) {
                  this.fld = p[0] == p[1]
              }
          }
      use: |-
          // use generics
          let a1: [A<Long>, B<Error>] = [new A<Long>, new B<Error>]
          assert(new A<Long, Error>(...a1).fld == false)

    - decl: |-
          let a2: [int, int] = [6, 5]
          class A {
              fld: string
              constructor(...p: [int, int]) {
                  this.fld = "" + p[0] + p[1]
              }
          }
      use: |-
          // lambda expression in expression
          let r = new A(...((p: [int, int]): [int, int] => [p[1], p[0]])(a2)).fld
          assert(r == "56")
