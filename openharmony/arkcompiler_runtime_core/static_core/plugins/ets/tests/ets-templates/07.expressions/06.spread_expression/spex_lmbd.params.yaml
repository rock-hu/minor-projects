# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
# arrays
    - decl: |-
          let a1: Object|null|undefined = new Object
      use: |-
          // not array type
          assertTrue(((...p: Object[]): int => p.length > 0 ? p.length : -1)(...a1) == -1)
      tags: 'negative, compile-only'

    - decl: |-
          let a1: number[] = [1.0, 2.0]
      use: |-
          // not rest parameters
          assertTrue(((p1: number, p2: number): number => p1 + p2)(...a1) == 3.0)
      tags: 'negative, compile-only'

    - use: |-
          // empty arrays
          let a1: Object[] = [], a2: Error[] = []
          assertTrue(((...p: Object[]): int => p.length)(...[...a1, ...a2, new Object(), ...a1]) == 1)

    - use: |-
          // spread of char array
          let a: char[] = [c'b', c'c']
          assertTrue(((...p: char[]): int => p.length)(...a) == 2)

    - use: |-
          // spread of byte array
          let a: byte[] = [1 as byte, 2 as byte, 3 as byte]
          assertTrue(((a: int, ...p: byte[]): int => a + reduce(p, (prev: int, next: byte) => prev + next, 0))(42, ...a) == 48)

    - use: |-
          // spread of short array
          let a: short[] = [1 as short, 2 as short, 3 as short]
          assertTrue(((a: int, ...p: short[]): int => a + reduce(p, (prev: int, next: short) => prev + next, 0))(42, ...a) == 48)

    - use: |-
          // spread of long array
          let a: long[] = [1 as long, 2 as long, 3 as long]
          assertTrue(((a: long, ...p: long[]): long => a + reduce(p, (prev: long, next: long) => prev + next, 0 as long))(42, ...a) == 48)

    - use: |-
          // spread of float array
          let a: float[] = [1f, 2f, 3f]
          assertTrue(((a: float, ...p: float[]): float => a + reduce(p, (prev: float, next: float) => prev + next, 0f))(42f, ...a) == 48f)

    - use: |-
          // spread of number array
          let a: number[] = [1.0, 2.0, 3.0]
          assertTrue(((a: number, ...p: number[]): number => a + reduce(p, (prev: number, next: number) => prev + next, 0.0))(42, ...a) == 48.0)

    - decl: |-
          type F = (p: number) => number
      use: |-
          // spread of function array
          let a: F[] = [(p: number) => p * 2, (p: number) => p * 3]
          let b: F[] = [(p: number) => p * 4, (p: number) => p * 5]
          assertTrue(((a: number, ...p: F[]): number => {
              let res = a
              for (let el of p) res += el(res)
              return res
          })(1.0, ...[...a, ...b]) == 360.0)

    - decl: |-
          enum Color { Red, Green, Blue }
      use: |-
          // spread of enums
          let a: Color[] = [Color.Red, Color.Blue, Color.Green]
          assertTrue(((...p: Color[]): Color => p.length ? p[p.length - 1] : Color.Red)(...a) == Color.Green)

    - use: |-
          // expression in parentheses
          assertTrue(((...p: number[]): number => p.length ? p[p.length - 1] : -1.0)(...([1.0, 2.0])) == 2.0)

    - decl: |-
          let a1: Object[]|null = [new Object, new Object]
      use: |-
          // ensure-not-nullish expression
          assertTrue(((a: int, ...p: Object[]): int => a + p.length)(5, ...a1!) == 7)

    - decl: |-
          let a1: Object[]|null = null
      use: |-
          // ensure-not-nullish expression
          assertTrue(((a: int, ...p: Object[]): int => a + p.length)(5, ...a1!) == 7)  // NPE expected
      tags: 'negative'

    - decl: |-
          let a1: Object[]|null = [new Object, new Object]
      use: |-
          // nullish expression
          assertTrue(((a: int, ...p: Object[]): int => a + p.length)(5, ...a1) == 7)  // CTE expected
      tags: 'negative, compile-only'

    - decl: |-
          let a1: Object[]|null = null
          let a2: Object[]|null = [new Object, new Object]
      use: |-
          // nullish-coalescing expression
          assertTrue(((a: int, ...p: Object[]): int => a + p.length)(5, ...(a1 ?? a2)!) == 7)

    - decl: |-
          function foo(): number[] {
              return [1.0, 2.0]
          }
      use: |-
          // function call in expression
          assertTrue(((...p: number[]): number => reduce(p, (prev: number, next: number) => prev + next, 0.0))(...foo()) == 3.0)

    - use: |-
          // function call in expression
          let s = ["h", "", "el", "", "", "l", "", "o"]
          assertTrue(((...p: string[]): string => String.join(p, ""))(...((s: string[]): string[] => {
                let res: string[] = []
                for (let el of s) if (el.length > 0) res = [...res, el]
                return res
          })(s)) == "hello")

    - use: |-
          // new expression in expression
          assertTrue(((...p: number[]): number =>  p.length ? p[p.length - 1] : -1)(...(new number[256])) == 0)

    - use: |-
          // array index expression
          let a: double[][] = [[2.0, 3.0], []]
          assertTrue(((...p: double[]): double => p[0] + p[1])(...a[0]) == 5)

    - use: |-
          // tuple index expression
          let a: [string, double[], string] = ["X", [2.0, 3.0, 4.0], "Z"]
          assertTrue(((...p: double[]): double => p[0] + p[1] + p[2])(...a[1]) == 9)

    - use: |-
          // assignment expression in expression
          let a1 = ["1", "2", "3"]
          let a2 = ["a", "b"]
          assertTrue(((...p: string[]): string => String.join(p, "-"))(...(a1 = a2)) == "a-b")

    - decl: |-
          let a1 = ["1", "2", "3"]
          let a2 = ["a", "b"]
      use: |-
          // conditional expression in expression
          assertTrue(((...p: string[]): string => String.join(p, "-"))(...(a1.length > a2.length ? a1 : a2)) == "1-2-3")

    - decl: |-
          class A {
              fld: boolean[]
              constructor(p: boolean[], q: boolean[]) {
                  this.fld = [...p, ...q]
              }
              meth(): int {
                  return ((a: int, ...p: boolean[]): int => a + p.length)(42, ...this.fld)
              }
          }
      use: |-
          // use this expression
          let a: A = new A([false, false], [true, true])
          assertTrue(a.meth() == 46)

    - decl: |-
          abstract class A {
              fld: boolean[]
              constructor(p: boolean[]) {
                  this.fld = p
              }
              meth(): boolean[] {
                  return this.fld
              }
          }
          class B extends A {
              constructor(p: boolean[], q: boolean[]) {
                  super([...p, ...q])
              }
              bar(): int {
                  return ((a: int, ...p: boolean[]): int => a + p.length)(42, ...super.meth())
              }
          }
      use: |-
          // use super expression
          let b: B = new B([false, false], [true, true])
          assertTrue(b.bar() == 46)

    - use: |-
          // spread of arrays
          let a1: number[][] = [[1.0, 2.0], [], [3.0, 4.0], [5.0]]
          assertTrue(((...p: number[][]): int => {
              let res = 0
              for (let el of p) res += el.length
              return res
          })(...a1) == 5)

    - decl: |-
          function bar(...p: number[]): number {
              let res = 0.0
              for (let el of p) res += el
              return res
          }
      use: |-
          // spread of arrays, flatten array
          let a1: number[][] = [[1.0, 2.0], [3.0, 4.0]]
          let a2: number[][] = [[5.0, 6.0], []]
          assertTrue(bar(...[
              ...((...p: number[][]): number[] => {
                  let res: number[] = []
                  for (let el of p) res = [...res, ...el]
                  return res
              })(...a1),
              ...((...p: number[][]): number[] => {
                  let res: number[] = []
                  for (let el of p) res = [...res, ...el]
                  return res
              })(...a2)
          ]) == 21.0)

    - use: |-
          // union of value types in result array
          let a1: Double[] = [1, 2, 3], a2: Short[] = [4, 5], a3: Byte[] = [6]
          let ar = [-10.0, ...a1, ...a1, ...a2, ...a2, ...a3, 10.0, ...a3]
          assertTrue(((...p: (Double|Short|Byte)[]): double => {
              let res = 0.0
              for (let el of p) res += (el as Numeric).toDouble()
              return res
          })(...ar) == 42.0)

    - use: |-
          // union of reference types in result array
          let a1: (Int|Number|String|undefined)[] = [new Int(), new Int(), undefined, "Z", 42.0]
          assertTrue(((...p: (Int|Number|String|undefined)[]): int => p.length)(...a1) == 5)

    - decl: |-
          class A<T> {}
          class B<T> {}
          class C<T> {}
      use: |-
          // use generics
          let f = <T, U, V> (...p: (A<T>|B<U>|C<V>|null)[]): int => p.length
          let a1: (A<String>|B<Long>|C<Error>|null)[] = [new A<String>, new B<Long>, new C<Error>]
          assertTrue(f<String, Long, Error>(...a1) == 3)

    - decl: |-
          let a1 = ["1", "2", "3"]
      use: |-
          // lambda expression in expression
          assertTrue(((...p: string[]): string => String.join(p, ""))(...((): string[] => a1)()) == "123")

    - decl: |-
          let a1 = ["1", "2", "3"]
      use: |-
          // lambda expression in expression
          assertTrue(((...p: string[]): string => String.join(p, ""))(...((p: string[], q: string[]): string[] => [...p, ...q])(a1, a1)) == "123123")

# tuples
    - use: |-
          // spread a tuple to same type tuple
          let t1: [number, boolean] = [1.0, true]
          let r: [boolean, number] = ((...p: [number, boolean]): [boolean, number] => [p[1], p[0]])(...t1)
          assertTrue(r[0] && r[1] == 1.0)

    - use: |-
          // spread tuples to different types
          let r: [number, number, boolean, boolean] = ((...p: [number, boolean]): [number, number, boolean, boolean] => [p[0], p[0], p[1], p[1]])(...[1.0, true])
          assertTrue(r[0] == 1.0 && r[1] == 1.0 && r[2] && r[3])

    - use: |-
          // spread tuples of all value types
          let r: [byte, short, int, long, float, double, boolean, char, string] =
              [1 as byte, 2 as short, 3, 4 as long, 5f, 6.0, true, c'Z', "X"]
          assertTrue(((...p: [byte, short, int, long, float, double, boolean, char, string]):
              [byte, short, int, long, float, double, boolean, char, string, int] =>
              [...p, 42])(...r)[9] == 42)

    - decl: |-
          let a1: [Object, Error]|null = [new Object, new Error]
      use: |-
          // ensure-not-nullish expression
          assertTrue(((...p: [Object, Error]): int => p[0] != p[1] ? 3 : 0)(...a1!) == 3)

    - decl: |-
          let a1: [Object, Error]|null = null
      use: |-
          // ensure-not-nullish expression
          assertTrue(((...p: [Object, Error]): int => p[0] != p[1] ? 3 : 0)(...a1!) == 3) // NPE expected
      tags: 'negative'

    - decl: |-
          let a1: [Object, Error]|null = null
          let a2: [Object, Error]|null = [new Object, new Error]
      use: |-
          // nullish-coalescing expression
          assertTrue(((...p: [Object, Error]): int => p[0] != p[1] ? 3 : 0)(...(a1 ?? a2)!) == 3)

    - decl: |-
          let a1: [Object, Error]|null = null
          let a2: [Object, Error]|null = null
      use: |-
          // nullish-coalescing expression
          assertTrue(((...p: [Object, Error]): int => p[0] != p[1] ? 3 : 0)(...(a1 ?? a2)!) == 3) // NPE expected
      tags: 'negative'

    - decl: |-
          let a1: [Object, Error]|null = null
          let a2: [Object, Error]|null = null
      use: |-
          // nullish-coalescing expression
          assertTrue(((...p: [Object, Error]): int => p[0] != p[1] ? 3 : 0)(...(a1 ?? a2)) == 3)  // CTE, nullish expression
      tags: 'negative, compile-only'

    - decl: |-
          function foo(): [number, string] {
              return [1.0, "X"]
          }
      use: |-
          // function call in expression
          let r: [string, number] = ((...p: [number, string]): [string, number] => [p[1], p[0]])(...foo())
          assertTrue(r[0] == "X" && r[1] == 1)

    - use: |-
          // tuple index expression
          let a: [[double, double], [char, char]] = [[2.0, 3.0], [c'Z', c'X']]
          assertTrue(((...p: [double, double]): double => p[0] + p[1])(...a[0]) == 5.0)

    - use: |-
          // assignment expression in expression
          let a1: [string, int] = ["1", 10]
          let a2: [string, int] = ["2", 20]
          assertTrue(((...p: [string, int]): int => p[1])(...(a1 = a2)) == 20)

    - decl: |-
          let a1: [int, int] = [1, 2]
          let a2: [int, int] = [5, 6]
      use: |-
          // conditional expression in expression
          let r = ((...p: [int, int]): int => p[0] + p[1])(...(a1[0] > a2[0] ? a1 : a2))
          assertTrue(r == 11)

    - decl: |-
          class A {
              fld: [int, char]
              constructor(p: int, q: char) {
                  this.fld = [p, q]
              }
              meth(): int {
                  return 10 + ((...p: [int, char]): int => 100 + p[0])(...this.fld)
              }
          }
      use: |-
          // use this expression
          let a: A = new A(1, c'Z')
          assertTrue(a.meth() == 111)

    - decl: |-
          abstract class A {
              fld: [int, char]
              constructor(p: [int, char]) {
                  this.fld = p
              }
              meth(): [int, char] {
                  return this.fld
              }
          }
          class B extends A {
              constructor(p: int, q: char) {
                  super([p, q])
              }
              meth(): [int, char] {
                  this.fld[0] = 10 + ((...p: [int, char]): int => 100 + p[0])(...super.meth())
                  return this.fld 
              }
          }
      use: |-
          // use super expression
          let b: B = new B(1, c'Z')
          assertEQ(b.meth()[0], 111)

    - decl: |-
          class A<T> {}
          class B<T> {}
      use: |-
          // use generics
          let f = <T, U> (...p: [A<T>, B<U>]): boolean => p[0] == p[1]
          let a1: [A<Long>, B<Error>] = [new A<Long>, new B<Error>]
          assertTrue(f<Long, Error>(...a1) == false)

    - decl: |-
          let a2: [int, int] = [6, 5]
      use: |-
          // lambda expression in expression
          let r = ((...p: [int, int]): string => "" + p[0] + p[1])(...((p: [int, int]): [int, int] => [p[1], p[0]])(a2))
          assertTrue(r == "56")
