# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
              met(p: Number): string {
                  return "N"
              }
          }
      use: |-
          // select method with no boxing/unboxing
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )
          assertEQ( c.met(new Number()),  "N" )


    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
          }
      use: |-
          // select method with with unboxing
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )
          assertEQ( c.met(new Number()),  "n" )


    - decl: |-
          class C {
              met(p: Number): string {
                  return "N"
              }
          }
      use: |-
          // select method with boxing
          let c: C = new C()
          assertEQ( c.met(0.0),  "N" )
          assertEQ( c.met(new Number()),  "N" )


    - decl: |-
          class C {
              met(...p: number[]): string {
                  return "nR"
              }
              met(...p: Number[]): string {
                  return "NR"
              }
          }
      use: |-
          // select method with rest parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "nR" )
          assertEQ( c.met(new Number()),  "NR" )


    - decl: |-
          class C {
              met(...p: number[]): string {
                  return "nR"
              }
          }
      use: |-
          // select method with rest parameter and unboxing
          let c: C = new C()
          assertEQ( c.met(0.0),  "nR" )
          assertEQ( c.met(new Number()),  "nR" )


    - decl: |-
          class C {
              met(...p: Number[]): string {
                  return "NR"
              }
          }
      use: |-
          // select method with rest parameter and boxing
          let c: C = new C()
          assertEQ( c.met(0.0),  "NR" )
          assertEQ( c.met(new Number()),  "NR" )


    - decl: |-
          class C {
              met(p: number, q: number = 0.0): string {
                  return "nD1"
              }
              met(p: Number, q: number = 0.0): string {
                  return "ND1"
              }
          }
      use: |-
          // select method with default parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "nD1" )
          assertEQ( c.met(new Number()),  "ND1" )


    - decl: |-
          class C {
              met(p: number, q: number = 0.0): string {
                  return "nD1"
              }
          }
      use: |-
          // select method with default parameter and unboxing
          let c: C = new C()
          assertEQ( c.met(0.0),  "nD1" )
          assertEQ( c.met(new Number()),  "nD1" )


    - decl: |-
          class C {
              met(p: Number, q: number = 0.0): string {
                  return "ND1"
              }
          }
      use: |-
          // select method with default parameter and boxing
          let c: C = new C()
          assertEQ( c.met(0.0),  "ND1" )
          assertEQ( c.met(new Number()),  "ND1" )


    - decl: |-
          class C {
              met(p: number, q?: Number): string {
                  return "nD2"
              }
              met(p: Number, q?: Number): string {
                  return "ND2"
              }
          }
      use: |-
          // select method with undefined parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "nD2" )
          assertEQ( c.met(new Number()),  "ND2" )


    - decl: |-
          class C {
              met(p: number, q?: Number): string {
                  return "nD2"
              }
          }
      use: |-
          // select method with undefined parameter and unboxing
          let c: C = new C()
          assertEQ( c.met(0.0),  "nD2" )
          assertEQ( c.met(new Number()),  "nD2" )


    - decl: |-
          class C {
              met(p: Number, q?: Number): string {
                  return "ND2"
              }
          }
      use: |-
          // select method with undefined parameter and boxing
          let c: C = new C()
          assertEQ( c.met(0.0),  "ND2" )
          assertEQ( c.met(new Number()),  "ND2" )


    - decl: |-
          class C {
              met(...p: number[]): string {
                  return "nR"
              }
              met(p: Number, q: number = 0.0): string {
                  return "ND1"
              }
          }
      use: |-
          // select method with rest parameter and default parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "nR" )
          assertEQ( c.met(new Number()),  "ND1" )


    - decl: |-
          class C {
              met(...p: number[]): string {
                  return "nR"
              }
              met(p: Number, q?: Number): string {
                  return "ND2"
              }
          }
      use: |-
          // select method with rest parameter and undefined parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "nR" )
          assertEQ( c.met(new Number()),  "ND2" )


    - decl: |-
          class C {
              met(p: number, q: number = 0.0): string {
                  return "nD1"
              }
              met(...p: Number[]): string {
                  return "NR"
              }
          }
      use: |-
          // select method with rest parameter and default parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "nD1" )
          assertEQ( c.met(new Number()),  "NR" )


    - decl: |-
          class C {
              met(p: number, q?: Number): string {
                  return "nD2"
              }
              met(...p: Number[]): string {
                  return "NR"
              }
          }
      use: |-
          // select method with rest parameter and default parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "nD2" )
          assertEQ( c.met(new Number()),  "NR" )


    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
              met(p: Number): string {
                  return "N"
              }
              met(...p: number[]): string {
                  return "nR"
              }
              met(...p: Number[]): string {
                  return "NR"
              }
          }
      use: |-
          // select method without boxing/unboxing and without rest
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )
          assertEQ( c.met(new Number()),  "N" )


    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
              met(...p: number[]): string {
                  return "nR"
              }
              met(...p: Number[]): string {
                  return "NR"
              }
          }
      use: |-
          // select method with unboxing and without rest
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )
          assertEQ( c.met(new Number()),  "n" )


    - decl: |-
          class C {
              met(p: Number): string {
                  return "N"
              }
              met(...p: number[]): string {
                  return "nR"
              }
              met(...p: Number[]): string {
                  return "NR"
              }
          }
      use: |-
          // select method with boxing and without rest
          let c: C = new C()
          assertEQ( c.met(0.0),  "N" )
          assertEQ( c.met(new Number()),  "N" )


    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
              met(p: Number): string {
                  return "N"
              }
              met(p: number, q: number = 0.0): string {
                  return "nD1"
              }
              met(p: Number, q: number = 0.0): string {
                  return "ND1"
              }
          }
      use: |-
          // select method without boxing/unboxing and without default parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )
          assertEQ( c.met(new Number()),  "N" )


    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
              met(p: number, q: number = 0.0): string {
                  return "nD1"
              }
              met(p: Number, q: number = 0.0): string {
                  return "ND1"
              }
          }
      use: |-
          // select method with unboxing and without default parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )
          assertEQ( c.met(new Number()),  "n" )


    - decl: |-
          class C {
              met(p: Number): string {
                  return "N"
              }
              met(p: number, q: number = 0.0): string {
                  return "nD1"
              }
              met(p: Number, q: number = 0.0): string {
                  return "ND1"
              }
          }
      use: |-
          // select method with boxing and without default parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "N" )
          assertEQ( c.met(new Number()),  "N" )


    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
              met(p: Number): string {
                  return "N"
              }
              met(p: number, q?: Number): string {
                  return "nD2"
              }
              met(p: Number, q?: Number): string {
                  return "ND2"
              }
          }
      use: |-
          // select method without boxing/unboxing and without undefined parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )
          assertEQ( c.met(new Number()),  "N" )


    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
              met(p: number, q?: Number): string {
                  return "nD2"
              }
              met(p: Number, q?: Number): string {
                  return "ND2"
              }
          }
      use: |-
          // select method with unboxing and without undefined parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )
          assertEQ( c.met(new Number()),  "n" )


    - decl: |-
          class C {
              met(p: Number): string {
                  return "N"
              }
              met(p: number, q?: Number): string {
                  return "nD2"
              }
              met(p: Number, q?: Number): string {
                  return "ND2"
              }
          }
      use: |-
          // select method with boxing and without undefined parameter
          let c: C = new C()
          assertEQ( c.met(0.0),  "N" )
          assertEQ( c.met(new Number()),  "N" )


    - decl: |-
          class A {
              met(p: boolean): string {
                  return "A-" + p
              }
          }
          class B extends A {
              met(p: Boolean): string {
                  return "B-" + p.unboxed()
              }
          }
          class C extends B {
              override met(p: boolean): string {
                  return "C-" + p
              }
          }
      use: |-
          let a: A = new C()
          assertEQ( a.met(true),  "C-true" )
          assertEQ( a.met(new Boolean()),  "B-false" )

          let b: B = new B()
          assertEQ( b.met(true),  "A-true" )
          assertEQ( b.met(new Boolean()),  "B-false" )


    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
              met(...p: number[]): string {
                  return "nR"
              }
              met(p: number, q: number = 0.0): string {
                  return "nD1"
              }
          }
      use: |-
          // more than one applicable method
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )

    - decl: |-
          class C {
              met(p: number): string {
                  return "n"
              }
              met(...p: number[]): string {
                  return "nR"
              }
              met(p: number, q?: Number): string {
                  return "nD2"
              }
          }
      use: |-
          // more than one applicable method
          let c: C = new C()
          assertEQ( c.met(0.0),  "n" )
