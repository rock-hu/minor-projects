# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          function foo<T extends Object>(p: T): number {
              return p.toString().length
          }
      use: |-
          assertEQ( foo<out>(0.0), 1 ) // CTE: wildcard in type arguments

    - decl: |-
          function foo<T extends Object>(p: T): number {
              return p.toString().length
          }
      use: |-
          assertEQ( foo<out Number>(0.0), 1 ) // CTE: wildcard in type arguments

    - decl: |-
          function foo<T extends Object>(p: T): number {
              return p.toString().length
          }
      use: |-
          assertEQ( foo<in Number>(0.0), 1 ) // CTE: wildcard in type arguments

    - decl: |-
          function bar(p: string): string {
              return p + p
          }
          let ft = "bar"
      use: |-
          assertEQ( ft("A"), "AA" ) // CTE: not a function type called

    - decl: |-
          function bar(p: string): string {
              return p + p
          }
          let ft: ((p: string) => string)|null = bar
      use: |-
          assertEQ( ft("A"), "AA" ) // CTE: no ?. for nullish expression

    - decl: |-
          function foo() {}
      use: |-
          let e = foo() // CTE: void cannot be used as type annotation

    - decl: |-
          function bar(callee: () => void): void {}
      use: |-
          bar("A") // CTE: not a function type called

    - decl: |-
          function bar(callee: () => void): void {
            callee()
          }
      use: |-
          bar((): int => { return 1 }) // CTE: No matching call signature

    - decl: |-
          function bar(callee: () => void): void {
            callee()
          }
      use: |-
          bar((a: int): void => {}) // CTE: No matching call signature

    - decl: |-
          function bar(callee: (a: int) => void): void {
            callee(1)
          }
      use: |-
          bar((): void => {}) // CTE: No matching call signature

