# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          type UT = number | string | null | undefined
          function foo(p: Number): string {
              return "N"
          }
          function foo(p: Number|null): string {
              return "NN"
          }
          function foo(p: UT): string {
              return "UT"
          }
      use: |-
          // select the most-specific function
          assertEQ( foo(new Number()), "N" )


    - decl: |-
          type UT = 1 | 2 | 3 | number  // normalized to Number
          function foo(p: Number|null): string {
              return "NN"
          }
          function foo(p: UT): string {
              return "UT"
          }
      use: |-
          // select the most-specific function
          assertEQ( foo(new Number()), "UT" )


    - decl: |-
          type UT = 1 | 2 | 3 | number  // normalized to Number
          function foo(p: Number|null): string {
              return "NN"
          }
          function foo(p: UT): string {
              return "UT"
          }
          function foo(p: number): string {
              return "n"
          }
      use: |-
          // select the most-specific function without boxing/unboxing
          assertEQ( foo(new Number()), "UT" )


    - decl: |-
          function foo(p: Number|null): string {
              return "NN"
          }
          function foo(p: number): string {
              return "n"
          }
      use: |-
          // select the most-specific function without boxing/unboxing
          assertEQ( foo(0.0), "n" )
          assertEQ( foo(new Number()), "NN" )


    - decl: |-
          function foo(p: number): string {
              return "n"
          }
      use: |-
          // select function with with unboxing
          assertEQ( foo(0.0), "n" )
          assertEQ( foo(new Number()), "n" )


    - decl: |-
          function foo(p: Number|null): string {
              return "NN"
          }
          function foo(p: Number): string {
              return "N"
          }
      use: |-
          // select function with boxing
          assertEQ( foo(0.0), "N" )
          assertEQ( foo(new Number()), "N" )


    - decl: |-
          function foo(...p: (Number|null)[]): string {
              return "NNR"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(...p: Number[]): string {
              return "NR"
          }
      use: |-
          // select function with rest parameter
          assertEQ( foo(0.0), "nR" )
          assertEQ( foo(new Number()), "NR" )


    - decl: |-
          function foo(...p: number[]): string {
              return "nR"
          }
      use: |-
          // select function with rest parameter and unboxing
          assertEQ( foo(0.0), "nR" )
          assertEQ( foo(new Number()), "nR" )


    - decl: |-
          function foo(...p: Number[]): string {
              return "NR"
          }
          function foo(...p: (Number|null)[]): string {
              return "NNR"
          }
      use: |-
          // select function with rest parameter and boxing
          assertEQ( foo(0.0), "NR" )
          assertEQ( foo(new Number()), "NR" )


    - decl: |-
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
          function foo(p: Number, q: number = 0.0): string {
              return "ND1"
          }
          function foo(p: Number|null, q: number = 1.0): string {
              return "NND1"
          }
      use: |-
          // select function with default parameter
          assertEQ( foo(0.0), "nD1" )
          assertEQ( foo(new Number()), "ND1" )


    - decl: |-
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
      use: |-
          // select function with default parameter and unboxing
          assertEQ( foo(0.0), "nD1" )
          assertEQ( foo(new Number()), "nD1" )


    - decl: |-
          function foo(p: Number, q: number = 0.0): string {
              return "ND1"
          }
          function foo(p: Number|null, q: number = 1.0): string {
              return "NND1"
          }
      use: |-
          // select function with default parameter and boxing
          assertEQ( foo(0.0), "ND1" )
          assertEQ( foo(new Number()), "ND1" )


    - decl: |-
          function foo(p: Number|null, q?: Number): string {
              return "NND2"
          }
          function foo(p: number, q?: Number): string {
              return "nD2"
          }
          function foo(p: Number, q?: Number): string {
              return "ND2"
          }
      use: |-
          // select function with undefined parameter
          assertEQ( foo(0.0), "nD2" )
          assertEQ( foo(new Number()), "ND2" )


    - decl: |-
          function foo(p: number, q?: Number): string {
              return "nD2"
          }
      use: |-
          // select function with undefined parameter and unboxing
          assertEQ( foo(0.0), "nD2" )
          assertEQ( foo(new Number()), "nD2" )


    - decl: |-
          function foo(p: Number|null, q?: Number): string {
              return "NND2"
          }
          function foo(p: Number, q?: Number): string {
              return "ND2"
          }
      use: |-
          // select function with undefined parameter and boxing
          assertEQ( foo(0.0), "ND2" )
          assertEQ( foo(new Number()), "ND2" )


    - decl: |-
          function foo(p: Number|null, q: number = 1.0): string {
              return "NND1"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(p: Number, q: number = 0.0): string {
              return "ND1"
          }
      use: |-
          // select function with rest parameter and default parameter
          assertEQ( foo(0.0), "nR" )
          assertEQ( foo(new Number()), "ND1" )


    - decl: |-
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(p: Number, q?: Number): string {
              return "ND2"
          }
          function foo(p: Number|null, q?: Number): string {
              return "NND2"
          }
      use: |-
          // select function with rest parameter and undefined parameter
          assertEQ( foo(0.0), "nR" )
          assertEQ( foo(new Number()), "ND2" )


    - decl: |-
          function foo(...p: (Number|null)[]): string {
              return "NNR"
          }
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
          function foo(...p: Number[]): string {
              return "NR"
          }
      use: |-
          // select function with rest parameter and default parameter
          assertEQ( foo(0.0), "nD1" )
          assertEQ( foo(new Number()), "NR" )


    - decl: |-
          function foo(p: number, q?: Number): string {
              return "nD2"
          }
          function foo(...p: Number[]): string {
              return "NR"
          }
          function foo(...p: (Number|null)[]): string {
              return "NNR"
          }
      use: |-
          // select function with rest parameter and default parameter
          assertEQ( foo(0.0), "nD2" )
          assertEQ( foo(new Number()), "NR" )


    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(p: Number): string {
              return "N"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(...p: Number[]): string {
              return "NR"
          }
      use: |-
          // select function without boxing/unboxing and without rest
          assertEQ( foo(0.0), "n" )
          assertEQ( foo(new Number()), "N" )


    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(...p: Number[]): string {
              return "NR"
          }
      use: |-
          // select function with unboxing and without rest
          assertEQ( foo(0.0), "n" )
          assertEQ( foo(new Number()), "n" )


    - decl: |-
          function foo(p: Number): string {
              return "N"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(...p: Number[]): string {
              return "NR"
          }
      use: |-
          // select function with boxing and without rest
          assertEQ( foo(0.0), "N" )
          assertEQ( foo(new Number()), "N" )


    - decl: |-
          function foo(p: Number): string {
              return "N"
          }
          function foo(p: Number|null): string {
              return "NN"
          }
          function foo(p: number, q?: Number): string {
              return "nD2"
          }
          function foo(p: Number, q?: Number): string {
              return "ND2"
          }
      use: |-
          // select function with boxing and without undefined parameter
          assertEQ( foo(0.0), "N" )
          assertEQ( foo(new Number()), "N" )


    - decl: |-
          // value types
          function foo(p: boolean): string {
              return "b"
          }
          function foo(...p: boolean[]): string {
              return "bR"
          }
          function foo(p: boolean, q?: boolean): string {
              return "bD1"
          }
          function foo(p: boolean, q: boolean = false): string {
              return "bD2"
          }
          function foo(p?: boolean): string {
              return "b1"
          }
          function foo(p: boolean = true): string {
              return "b2"
          }
          // reference types
          function foo(p: Boolean): string {
              return "B"
          }
          function foo(...p: Boolean[]): string {
              return "BR"
          }
          function foo(p: Boolean, q?: Boolean): string {
              return "BD1"
          }
          function foo(p: Boolean, q: Boolean = new Boolean(false)): string {
              return "BD2"
          }
          function foo(p?: Boolean): string {
              return "B1"
          }
          function foo(p: Boolean = new Boolean(true)): string {
              return "B2"
          }
      use: |-
          // value types
          assertEQ( foo(true), "b" )
          assertEQ( foo(true, false), "bR" )
          assertEQ( foo(true, false, true), "bR" )

          // reference types
          assertEQ( foo(new Boolean(true)), "B" )
          assertEQ( foo(new Boolean(true), new Boolean(true)), "BR" )
          assertEQ( foo(new Boolean(true), new Boolean(true), new Boolean(true)), "BR" )

          assertTrue( foo() == "b1" || foo() == "b2" || foo() == "bR" || foo() == "B1" || foo() == "B2" || foo() == "BR" )

    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
      use: |-
          // more than one applicable function
          assertEQ( foo(0.0), "n" )

    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(p: number, q?: Number): string {
              return "nD2"
          }
      use: |-
          // more than one applicable function
          assertEQ( foo(0.0), "n" )

    - decl: |-
          type UT = int | number  // normalized to Number
          function foo(p: Number): string {
              return "N"
          }
          function foo(p: UT): string {
              return "UT"
          }
      use: |-
          // duplicate functions
          assertEQ( foo(new Number()), "N" )


    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(p: Number): string {
          return "N"
          }
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
          function foo(p: Number, q: number = 0.0): string {
              return "ND1"
          }
      use: |-
          // select function without boxing/unboxing and without default parameter
          assertEQ( foo(0.0), "n" )
          assertEQ( foo(new Number()), "N" )


    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
          function foo(p: Number, q: number = 0.0): string {
              return "ND1"
          }
      use: |-
          // select function with unboxing and without default parameter
          assertEQ( foo(0.0), "n" )
          assertEQ( foo(new Number()), "ND1" )


    - decl: |-
          function foo(p: Number): string {
              return "N"
          }
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
          function foo(p: Number, q: number = 0.0): string {
              return "ND1"
          }
      use: |-
          // select function with boxing and without default parameter
          assertEQ( foo(0.0), "nD1" )
          assertEQ( foo(new Number()), "N" )


    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(p: Number): string {
              return "N"
          }
          function foo(p: number, q?: Number): string {
              return "nD2"
          }
          function foo(p: Number, q?: Number): string {
              return "ND2"
          }
      use: |-
          // select function without boxing/unboxing and without undefined parameter
          assertEQ( foo(0.0), "n" )
          assertEQ( foo(new Number()), "N" )

