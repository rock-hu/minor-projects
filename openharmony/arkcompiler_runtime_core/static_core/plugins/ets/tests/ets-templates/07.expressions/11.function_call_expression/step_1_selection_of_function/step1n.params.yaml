# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
      use: |-
          // more than one applicable function
          assert foo(0.0) == "n"

    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(p: number, q?: Number): string {
              return "nD2"
          }
      use: |-
          // more than one applicable function
          assert foo(0.0) == "n"

    - decl: |-
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
          function foo(p: number, q?: Number): string {
              return "nD2"
          }
      use: |-
          // more than one applicable function
          assert foo(0.0) == "nR"

    - decl: |-
          function foo(p: number): string {
              return "n"
          }
          function foo(...p: number[]): string {
              return "nR"
          }
          function foo(p: number, q: number = 0.0): string {
              return "nD1"
          }
          function foo(p: number, q?: Number): string {
              return "nD2"
          }
      use: |-
          // no applicable function
          assert foo() == "n"

    - decl: |-
          type UT = int | number  // normalized to Number
          function foo(p: Number): string {
              return "N"
          }
          function foo(p: UT): string {
              return "UT"
          }
      use: |-
          // duplicate functions
          assert foo(new Number()) == "N"

