# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - desc: numeric type
      name: number
      decl: |-
          const n = Math.random()
          let t = typeof (n / 2)

    - desc: Object
      name: object
      decl: |-
          function f(o: Object) {
            return typeof o
          }
          let t = f(new Object)

    - desc: union type
      name: object
      decl: |-
          class A {}
          class B {}
          function f(o: A|B) {
            return typeof o
          }
          let t = f(new A)

    - desc: union type
      name: object
      decl: |-
          class A {}
          class B {}
          function f(o: A|B) {
            return typeof o
          }
          let t = f(new B)

    - desc: type parameter
      name: object
      decl: |-
          class A<T> {
              f: T
              m() {
                  return typeof this.f
              }
              constructor(p: T) {
                  this.f  = p
              }
          }
          let a = new A<Object>(new Object())
          let t = a.m()

    - desc: type parameter
      name: object
      decl: |-
          class A<T> {
              f: T
              m() {
                  return typeof this.f
              }
              constructor(p: T) {
                  this.f  = p
              }
          }
          let a = new A<null>(null)
          let t = a.m()

    - desc: type parameter
      name: undefined
      decl: |-
          class A<T> {
              f: T
              m() {
                  return typeof this.f
              }
              constructor(p: T) {
                  this.f  = p
              }
          }
          let a = new A<undefined>(undefined)
          let t = a.m()
