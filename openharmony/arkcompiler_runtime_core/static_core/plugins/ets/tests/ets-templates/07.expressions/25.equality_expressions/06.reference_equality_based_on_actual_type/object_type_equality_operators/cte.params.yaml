# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          function eq(p: Object, q: String): boolean {
              return p == q
          }

          class A<T extends Object, U extends String> {
              meth(t: T, u: U): boolean {
                  return eq(t, u)
              }
          }
      code: |-
          let a: A<string, string> = new A<string, string>()
          if (!a.meth('a', 'a')) return 1

    - decl: |-
          let p: Object
          let q: string

          class A<T extends Object, U extends String> {
              meth(t: T, u: U): boolean {
                  p = t
                  q = u
                  return p == q
              }
          }
      code: |-
          let a: A<string, string> = new A<string, string>()
          if (!a.meth('a', 'a')) return 1

    - decl: |-
          function eq(p: Object|null|undefined, q: Object|null|undefined): boolean {
              return p == q
          }

          class A<T extends Object|null, U extends Number|undefined> {
              meth(t: T, u: U): boolean {
                  return eq(t, u)
              }
          }
      code: |-
          let a: A<number, number> = new A<number, number>()
          if (!a.meth(1.0, 1.0)) return 1

    - tags: 'compile-only, negative'
      decl: |-
          function eq(p: Object, q: String): boolean {
              return p == q
          }

          class A<T, U> {
              meth(t: T, u: U): boolean {
                  return eq(t, u)
              }
          }
      code: |-
          let a: A<string, string> = new A<string, string>()
          if (!a.meth('a', 'a')) return 1

    - tags: 'compile-only, negative'
      decl: |-
          let p: Object
          let q: string

          class A<T, U> {
              meth(t: T, u: U): boolean {
                  p = t
                  q = u
                  return p == q
              }
          }
      code: |-
          let a: A<string, string> = new A<string, string>()
          if (!a.meth('a', 'a')) return 1

    - tags: 'compile-only, negative'
      decl: |-
          function eq(p: Object, q: Number): boolean {
              return p == q
          }

          class A<T extends Object|null, U> {
              meth(t: T, u: U): boolean {
                  return eq(t, u)
              }
          }
      code: |-
          let a: A<number, number> = new A<number, number>()
          if (!a.meth(1.0, 1.0)) return 1
