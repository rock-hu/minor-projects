# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # numerical equality
    - type: Number
      case1:
          - '-128.0'
          - new Double(-128.0)
      case2:
          - '-128 as byte'
          - '-128'
          - '-128f'
          - new Short(-128 as short)
          - new Long(-128 as long)

    - type: Long
      case1:
          - '127 as long'
          - new Long(127 as long)
      case2:
          - '127 as short'
          - '127f'
          - '127.0'
          - c'\u007f'
          - new Byte(127 as byte)
          - new Int(127)

    - type: Char
      case1:
          - c'\u0000'
          - new Char(c'\u0000')
      case2:
          - '0 as byte'
          - '0'
          - '0 as long'
          - '0f'
          - new Short(0 as short)
          - new Long(0 as long)
          - new Double(0.0)

    # string equality
    - type: string
      case1:
          - "'abc def'"
      case2:
          - '`abc def`'
          - new String('abc def')

    - type: String
      case1:
          - new String('')
      case2:
          - "''"
          - '``'

    # boolean equality
    - type: Boolean
      case1:
          - new Boolean(true)
      case2:
          - 'true'

    - type: Boolean
      case1:
          - 'false'
      case2:
          - new Boolean(false)

    # enumeration  equality
    - type: Color
      decl: |-
          enum Color { Red, Green, Blue }
      case1:
          - Color.Red
      case2:
          - Color.values()[0]
          - "Color.getValueOf('Red')"

    - type: Size
      decl: |-
          enum Size { Small = "S", Medium = "M", Large = "L" }
      case1:
          - Size.values()[1]
      case2:
          - Size.Medium
          - "Size.getValueOf('Medium')"

    # bigint equality
    - type: BigInt
      case1:
        - new BigInt(12345)
      case2:
        - 12345n
        - new BigInt('12345')

    - type: BigInt
      case1:
        - '-0n'
      case2:
        - '0n'
        - new BigInt()
        - new BigInt(0.0)
