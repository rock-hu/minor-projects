# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # numerical equality, not equal values
    - type1: int|boolean
      type2: string|long
      case1:
          - '-128'
          - new Int(-128)
      case2:
          - '-129 as long'
          - new Long(-129 as long)

    - type1: number|string
      type2: Object|null
      case1:
          - '-128.0'
          - new Double(-128.0)
      case2:
          - '127 as byte'
          - '127 as short'
          - '127'
          - '127 as long'
          - '127f'
          - new Byte(127 as byte)
          - new Short(127 as short)
          - new Int(127)
          - new Long(127 as long)
          - new Float(127f)

    - type1: byte|short|Error
      type2: char|long|Error
      case1:
          - '0 as byte'
          - '0 as short'
          - new Byte(0 as byte)
          - new Short(0 as short)
      case2:
          - '1 as long'
          - "c'\\u0001'"
          - new Long(1 as long)
          - "new Char(c'\\u0001')"

    # numerical equality, not compatible actual types
    - type1: int|boolean
      type2: string|long
      case1:
          - '-128'
          - new Int(-128)
      case2:
          - '"-128"'
          - '"-128 as long"'

    - type1: number|string
      type2: Object|null
      case1:
          - '-128.0'
          - new Double(-128.0)
      case2:
          - 'null'
          - new Error()

    - type1: byte|short|Error
      type2: char|long|Error
      case1:
          - '0 as byte'
          - '0 as short'
          - new Byte(0 as byte)
          - new Short(0 as short)
      case2:
          - new Error()

    # string equality, not equal values
    - type1: number|string|boolean
      type2: char|Error|string|null
      case1:
          - "'   '"
      case2:
          - '`  `'
          - new String(' ')

    - type1: Object|string
      type2: Error|string
      case1:
          - "'AA'"
          - '`AAA`'
      case2:
          - new String('A')

    # string equality, not compatible actual types
    - type1: number|string|boolean
      type2: char|Error|string|null
      case1:
          - '1.0'
      case2:
          - new Error()
          - 'null'

    - type1: Object|string
      type2: Error|string
      case1:
          - new Number()
          - "''"
      case2:
          - new Error()

    # boolean equality, not equal values
    - type1: Error|number|boolean
      type2: string|number|boolean
      case1:
          - 'true'
      case2:
          - new Boolean(false)

    - type1: A|boolean
      type2: B|boolean
      decl: |-
          class A {}
          class B extends A {}
      case1:
          - 'false'
      case2:
          - new Boolean(true)

    # boolean equality, not compatible actual types
    - type1: Error|number|boolean
      type2: string|number|boolean
      case1:
          - new Error()
      case2:
          - new Boolean(false)

    - type1: A|boolean
      type2: B|boolean
      decl: |-
          class A {}
          class B extends A {}
      case1:
          - 'false'
      case2:
          - new B()

    # enumeration equality, different values
    - decl: |-
          enum Color { Red, Green, Blue }
      type1: Color|string
      type2: number|Color|null
      case1:
          - Color.Red
      case2:
          - Color.Green
          - Color.Blue

    - decl: |-
          enum Size { Small = "S", Medium = "M", Large = "L" }
      type1: number|Size|boolean
      type2: boolean|Size
      case1:
          - Size.Medium
      case2:
          - Size.Large

    # enumeration equality, different actual types
    - decl: |-
          enum Color { Red, Green, Blue }
      type1: Color|string
      type2: number|Color|null
      case1:
          - Color.Red
      case2:
          - 'null'
          - '111.0'

    - decl: |-
          enum Size { Small = "S", Medium = "M", Large = "L" }
      type1: number|Size|boolean
      type2: boolean|Size
      case1:
          - Size.Medium
      case2:
          - 'false'

    # bigint equality, not equal values
    - type1: long|bigint
      type2: bigint|int
      case1:
          - '1n'
      case2:
          - new BigInt(-1)

    - type1: boolean|bigint
      type2: bigint|string
      case1:
          - '0n'
          - new BigInt()
      case2:
          - '-1n'
          - new BigInt(1.0)

    # bigint equality, not equal actual types
    - type1: long|bigint
      type2: bigint|int
      case1:
          - '1n'
          - new BigInt(1)
      case2:
          - new Int(1)

    - type1: boolean|bigint
      type2: bigint|string
      case1:
          - '0n'
          - new BigInt()
      case2:
          - '"0"'
