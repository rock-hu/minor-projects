# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Conditional OR for boolean
cases:
  - doc: Conditional OR for 2x boolean - false false
    decl: |-
      let a: boolean = false;
      let b: boolean = false;
      assert((a || b) == false);

  - doc: Conditional OR for 2x boolean - false true
    decl: |-
      let a: boolean = false;
      let b: boolean = true;
      assert((a || b) == true);

  - doc: Conditional OR for 2x boolean - true unknown
    decl: |-
      let a: boolean = true;
      assert((a || fail()) == true);

  - doc: Conditional OR for 4x boolean - false false false false
    decl: |-
      let a: boolean = false;
      let b: boolean = false;
      let c: boolean = false;
      let d: boolean = false;
      assert((a || b || c || d) == false)

  - doc: Conditional OR for 4x boolean - false false false true
    decl: |-
      let a: boolean = false;
      let b: boolean = false;
      let c: boolean = false;
      let d: boolean = true;
      assert((a || b || c || d) == true)

  - doc: Conditional OR for 4x boolean - false false true unknown
    decl: |-
      let a: boolean = false;
      let b: boolean = false;
      let c: boolean = true;
      assert((a || b || c || fail()) == true)

  - doc: Conditional OR for 4x boolean - false true unknown...
    decl: |-
      let a: boolean = false;
      let b: boolean = true;
      assert((a || b || fail() || fail()) == true)

  - doc: Conditional OR for 4x boolean - true unknown...
    decl: |-
      let a: boolean = true;
      assert((a || fail() || fail() || fail()) == true)

