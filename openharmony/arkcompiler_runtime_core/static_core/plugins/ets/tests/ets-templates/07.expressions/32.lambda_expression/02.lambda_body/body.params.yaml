# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Body
cases:
  - desc: single expression
    impl: |-
        let f = () => "Hello, World!"
        assertEQ(f(), "Hello, World!", "single expression failed")

  - desc: block
    impl: |-
        let f = () => {
            let a = "Hello"
            let b = ", "
            let c = "World!"

            return a + b + c
        }
        assertEQ(f(), "Hello, World!", "block failed")

  - desc: capture "this"
    impl: |-
        class A {
            count: number = 0

            test(op: () => void) {
                op()
            }

            increment() {
                this.test(() => { this.count++ })
            }
        }

        let a = new A()
        a.increment()
        assertEQ(a.count, 1, "capture \"this\" failed")

  - desc: capture "super"
    impl: |-
        class A {
            private _count: number = 0

            test(op: () => void) {
                op()
            }

            get count(): number{
                return this._count;
            }

            set count(p: number){
                this._count = p;
            }
        }

        class B extends A {
            decrement() {
                this.test(() => { super.count-- })
            }
        }

        let b = new B()
        b.decrement()
        assertEQ(b.count, -1, "capture \"super\" failed")

  - desc: capture local variable
    impl: |-
        function f() {
            let y: int = 1
            let x = () => { return y + 1 }
            return x()
        }
        assertEQ(f(), 2, "use local variable failed")

  - desc: capture local variable
    impl: |-
        function f() {
            let y: int = 1
            let x = () => { y++ }
            x()
            return y
        }
        assertEQ(f(), 2, "modify local variable failed")

  - desc: capture formal parameter
    impl: |-
        function f(y: int) {
            let x = () => { return y + 1 }
            return x()
        }
        assertEQ(f(4), 5, "use formal parameter failed")

  - desc: capture formal parameter
    impl: |-
        function f(y: int) {
            let x = () => { y++ }
            x()
            return y
        }
        assertEQ(f(6), 7, "modify formal parameter failed")
