# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - use: |-
          let arr: int[] = new int[0]
          for (let v of arr) res += v
          assertEQ( res, "" )

    - use: |-
          let arr: int[]|null = new int[0]
          for (let v of arr) res += v
          assertEQ( res, "" )

    - use: |-
          let arr: int[]|null = (): int[]|null => { return new int[0]; }()
          for (let v of arr!) res += v
          assertEQ( res, "" )

    - use: |-
          for (let v of "") res += v
          assertEQ( res, "" )

    - use: |-
          let arr: int[][] = [[1,2,3], [4,5,6], [7,8,9]]
          for (const v of arr) {
              res += ' '
              for (const q of v)
                  res += q
          }
          assertEQ( res, " 123 456 789" )

    - use: |-
          const v: int = 0;
          for (let v of [1,2,3,4]) res += v
          assertEQ( res, "1234" )
          assertEQ( v, 0 )

    - use: |-
          let v: int;
          for (v of [1,2,3,4]) res += v
          assertEQ( res, "1234" )

    - use: |-
          let v: float;
          for (v of [1.1,2.2,3.3,4.4] as float[]) res += v
          assertEQ( res, "1.12.23.34.4" )

    - use: |-
          let v: double
          for (v of [1.1,2.2,3.3,4.4]) res += v
          assertEQ( res, "1.12.23.34.4" )

    - use: |-
          let v: long;
          for (v of [1,2,3,4]) res += v
          assertEQ( res, "1234" )

    - use: |-
          let v: number;
          for (v of [1.1,2.2,3.3,4.4]) res += v
          assertEQ( res, "1.12.23.34.4" )

    - use: |-
          for (const ch of [c'1', c'2', c'3', c'4']) res += ch
          assertEQ( res, "1234" )

    - use: |-
          const ch: char = c'X'
          for (let ch of "A" + "B" + "CD") {
              res += ch
              ch = c' '
              res += ch
          }
          assertEQ( res, "A B C D " )

    - use: |-
          let ch: char
          for (ch of "ABCD") res += ch
          assertEQ( res, "ABCD" )

    - use: |-
          let ch: char
          for (ch of "ABCD") {
              res += ch
              ch = c' '
              res += ch
          }
          assertEQ( res, "A B C D " )

    - use: |-
        let foo: () => String = ():String => { return "ABCD" }
        for (let ch of foo()) res += ++ch
        assertEQ( res, "BCDE" )

    - use: |-
          let arr: Long[] = new Long[3]
          for (let i: int = 0; i < 3; i++) arr[i] = new Long(i as long)
          for (let i of arr) res += i
          assertEQ( res, "012" )

    - use: |-
          let arr: int[] = [1,2,3]
          for (let v of arr) {v *= 2; res += v }
          assertEQ( res, "246" )

    - use: |-
          let arr: int[] = [1,2,3]
          let v = 4
          for (v of arr); res += v
          assertEQ( res, "3" )

    - decl: |-
          function foo<T extends String>(s: T): T[] {
              return [s, s, s];
          }
      use: |-
          for (let v of foo<String>("A")) res += v
          assertEQ( res, "AAA" )

    - use: |-
          let s: String|null = ""
          for (let v of s) res += v
          assertEQ( res, "" )

    - use: |-
          let s: String|null = (): string|null => { return ""; }();
          for (let v of s!) res += v
          assertEQ( res, "" )

    - use: |-
          let s: string|null = (): string|null => { return null; }();
          try {
              for (let v of s!) res += v
              assertTrue( false )
          } catch (e: NullPointerError) {
              assertTrue( true )
          } catch (e) {
              assertTrue( false )
          }

    - use: |-
          let s: string|undefined = (): string|undefined => { return undefined; }();
          try {
              for (let v of s!) res += v
              assertTrue( false )
          } catch (e: NullPointerError) {
              assertTrue( true )
          } catch (e) {
              assertTrue( false )
          }

    - decl: |-
          let i = 0;
          class A {
              i: int;
              constructor() {
                  this.i = i++;
              }
          }
      use: |-
          i = 0;
          let array: A[] = new A[10];
          let c = 0;
          for (let x of array) c += x.i;
          assertEQ( c, 45)

    - use: |-
          let s: number[]|null = (): number[]|null => { return null; }();
          try {
              for (let v of s!) res += v
              assertTrue(false)
          } catch (e: NullPointerError) {
              assertTrue(true)
          } catch (e) {
              assertTrue(false)
          }

    - use: |-
          let s: number[]|undefined = (): number[]|undefined => { return undefined; }();
          try {
              for (let v of s!) res += v
              assertTrue( false )
          } catch (e: NullPointerError) {
              assertTrue(true)
          } catch (e) {
              assertTrue(false)
          }

    - decl: |-
          class A {
              data: string[] = ['a', 'b', 'c'];
              $_iterator() {
                return new CIterator(this);
              }
          }
          class CIterator implements Iterator<string> {
              index = 0;
              base: A;
              constructor (base: A) {
                  this.base = base;
              }
              next(): IteratorResult<string> {
                  return {
                    done: this.index >= this.base.data.length,
                    value: this.index >= this.base.data.length ? undefined : this.base.data[this.index++]
                  }
              }
          }
      use: |-
          let a = new A();
          for (let x of a) res += x;
          assertEQ( res, "abc")

    - decl: |-
          type UT = string[] | string
      use: |-
          let ua: UT[] = [['abc', 'def'] as string[], 'ghi']
          for (let x of ua) {
              for (let y of x) {
                  res += y
              }
          }
          assertEQ(res, 'abcdefghi')
