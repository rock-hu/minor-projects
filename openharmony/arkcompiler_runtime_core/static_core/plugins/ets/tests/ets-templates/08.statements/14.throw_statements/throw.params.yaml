# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - defs: |-
      class Err extends Error {}
    use: |-
      let p: Object = new Err();
      try {
          if (t1 != t2) throw p as Error;
      } catch (e) {
          assertTrue( e instanceof Err )
          return
      }
      assertTrue(false, "No expected error")

  - defs: |-
      interface Ie {}
      class Err extends Error implements Ie {}
    use: |-
      let p: Ie = new Err();
      try {
          if (t1 != t2) throw p as Error;
      } catch (e) {
          assertTrue( e instanceof Ie )
          return
      }
      assertTrue(false, "No expected error")

  - defs: |-
      class Err extends Error {}
    use: |-
      try {
          if (t1 != t2) throw new Err();
      } catch (e) {
          assertTrue( e instanceof Err )
          return
      }
      assertTrue(false, "No expected error")

  - defs: |-
      class Err extends Error {}
    use: |-
      let v = 0;
      try {
          try {
              if (t1 != t2) throw new Err();
          } catch (e) {
              if (e instanceof Err) {
                  v++;
                  throw e;
              }
          }
      } catch (e) {
          if (e instanceof Err) {
              v++
          }
      }
      assertEQ(v, 2)

  - defs: |-
      class Err extends Error {}
      let err: Err = new Err();

      function foo(): void {
          try {
              bar();
          } catch (f) {
              throw f
          }
      }

      function bar(): void {
          try {
              if (t1 != t2) throw err;
          } catch (p) {
              throw p;
          }
      }
    use: |-
      try {
          foo()
      } catch (e) {
          assertEQ(e, err)
          return
      }
      assertTrue(false, "No expected error")

  - defs: |-
      class A extends Error {}
      let p: A|null = new A();
    use: |-
      try {
          if (t1 != t2) throw p!;
      } catch (e) {
          assertEQ(e, p)
          return
      }
      assertTrue(false, "No expected error")

  - defs: |-
      class Err extends Error {}
      let err: Err = new Err();

      function foo() {
          try {
              if (t1 != t2) throw err
          } catch (f) {
              throw f
          }
      }
    use: |-
      try {
          foo()
      } catch (e) {
          assertEQ(e, err)
          return
      }
      assertTrue(false, "No expected error")
