# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

 # List of valid class members
members:
  #0
  - base: "field: int"
    child: "field: int"
    tags: "compile-only"
    params: "simple overriding"
  #1
  - base: "field: int"
    child: "field: float"
    tags: "compile-only, negative"
    params: "different types"
  #2
  - base: "static field: int"
    child: "static field: int"
    tags: "compile-only"
    params: "simple overriding, both static"
  #3
  - base: "static field: int = 5"
    child: "field: int = 7"
    params: "overriding with different static status"
    main: >
      let a: Base = new A(); 
      assertEQ(a.field, 7);
      assertEQ(Base.field, 5);
  #4
  - base: "static field: int = 5"
    child: "field: int = 7"
    params: "overriding with different static status"
    main: >
      let a: Base = new A(); 
      assertEQ(a.field, 7);
      assertEQ(A.field, 5);
  #5
  - base: "static field: int = 5"
    child: "field: int = 7"
    params: "overriding with different static status"
    main: >-
      let a: A = new A(); 
      assertEQ(a.field, 7);
      assertEQ(A.field, 5);
  #6
  - base: "field: int = 7"
    child: "static field: int = 5"
    params: "overriding with different static status"
    main: >-
      let a: Base = new A(); 
      assertEQ(a.field, 7);
      assertEQ(A.field, 5);
  #7
  - base: "field: int = 7"
    child: "static field: int = 5"
    params: "overriding with different static status"
    tags: "compile-only, negative"
    main: >-
      let a: A = new A(); 
      assertEQ(a.field, 7);
      assertEQ(Base.field, 5);
  #8
  - base: "field: int = 7"
    child: "static field: int = 5"
    params: "overriding with different static status"
    main: >-
      let a: A = new A(); 
      assertEQ(a.field, 7);
      assertEQ(A.field, 5);
  #9
  - base: "field: int = 5"
    child: "field: int = 5"
    params: "simple overriding"
    main: >-
        let a: Base = new A(); 
        assertEQ(a.field, 5);
  #10
  - base: "field: int = 5"
    child: "field: int = 7"
    params: "simple overriding, different values"
    main: >-
        let a: Base = new A();
        assertEQ(a.field, 7);
  #11
  - base: "static field: int = 5"
    child: "static field: int = 7"
    params: "simple overriding, different values with static"
    main: >-
        assertEQ(A.field, 7);
        assertEQ(Base.field, 5);
  #12
  - base: "field: int = 5"
    child: "override field: int = 7"
    params: "simple overriding with override keyword"
    main: >-
        let a: Base = new A();
        assertEQ(a.field, 7);
  #13
  - base: "static field: int = 5"
    child: "override static field: int = 7"
    params: "simple overriding, different values with static and override keywords"
    main: >-
        assertEQ(A.field, 7);
        assertEQ(Base.field, 5);
