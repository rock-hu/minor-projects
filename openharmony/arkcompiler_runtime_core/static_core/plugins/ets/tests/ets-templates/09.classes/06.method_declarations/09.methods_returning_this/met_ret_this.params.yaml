# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          // return 'this' from instance method
          class A {
              fld: int
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }
      use: |-
          let a = new A
          assertEQ(a.foo().foo(), a)

    - decl: |-
          // return 'this' from extension function and overloaded method
          class B {
              fld: int
          }

          function foo(this: B, p: int): this {
              this.fld += p
              return this
          }
          class A extends B {
              foo(): this {
                  this.fld += 1
                  return this
              }
          }
      use: |-
          let a: A = { fld: 1 }
          assertEQ(a.foo().foo(10).foo(), a)
          assertEQ(a.fld, 13)

    - decl: |-
          // return 'this' from instance method in generic class
          class A<T extends Error> {
              fld: int
              foo(p: T): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw p as Error
              }
          }
      use: |-
          let a = new A<Error>
          assertEQ(a.foo(new Error).foo(new Error), a)

    - decl: |-
          // return 'this' from generic method
          class A {
              fld: number
              foo<T extends Error>(p: T): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw p as Error
              }
              bar<T extends Number>(p: T): this {
                  if (this.fld == 0) {
                      this.fld += p.valueOf()
                      return this
                  }
                  throw new Error
              }
          }

          class Er extends Error {}
      use: |-
          let a = new A
          assertEQ(a.foo<Er>(new Er).bar<Number>(11.0), a)
          assertEQ(a.fld, 11.0)

    - decl: |-
          // return 'this' from function with receiver
          function foo(this: A): this {
              if (this.fld == 0) {
                  return this
              }
              throw new Error
          }

          class A {
              fld: int
          }
      use: |-
          let a = new A
          assertEQ(a.foo().foo(), a)

    - decl: |-
          // return 'this' from final method
          class A {
              fld: int
              final foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }
      use: |-
          let a = new A
          assertEQ(a.foo().foo(), a)

    - decl: |-
          // return 'this' from superclass
          abstract class Super {
              fld: number = 0
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }

          class A extends Super {}
      use: |-
          let s: Super = new A
          assertEQ(s.foo().foo(), s)
          let a: A = new A
          assertEQ(a.foo().foo(), a)

    - decl: |-
          // return 'this' from superclass
          abstract class Super {
              fld: number = 0
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }

          class A extends Super {}

          let s: Super = new A
          let a: A = new A
      use: |-
          assertEQ(s.foo().foo(), s)
          assertEQ(a.foo().foo(), a)

    - decl: |-
          // return 'this' from superclass with field overridden
          abstract class Super {
              fld: number = 0
              foo(): this {
                  return this
              }
          }

          class A extends Super {
              fld: number = 1
          }

          let s: Super = new A
          let a: A = new A
      use: |-
          assertEQ(s.foo().fld, 1)
          assertEQ(a.foo().fld, 1)

    - decl: |-
          // return 'this' from superclass with method overridden
          abstract class Super {
              fld: string = ""
              foo(): this {
                  if (this.fld == "") {
                      return this
                  }
                  throw new Error
              }
              bar(): string {
                  return this.fld + "Super"
              }
          }

          class A extends Super {
              bar(): string {
                  return this.fld + "A"
              }
          }

          let s: Super = new A
          let a: A = new A
      use: |-
          assertEQ(s.foo().bar(), "A")
          assertEQ(a.foo().bar(), "A")

    - decl: |-
          // return 'this' from superclass from function with receiver
          function foo(this: Super): this {
              if (this.fld == 0) {
                  return this
              }
              throw new Error
          }

          abstract class Super {
              fld: int
          }

          class A extends Super {}

          let s: Super = new A
          let a: A = new A
      use: |-
          assertEQ(s.foo().foo(), s)
          assertEQ(a.foo().foo(), a)

    - decl: |-
          // return 'this' from superclass with overriding
          abstract class Super {
              fld: int
              foo(): this {
                  if (this.fld == 999) {
                      return this
                  }
                  throw new Error
              }
          }

          class A extends Super {
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }

          let s: Super = new A
          let a: A = new A
      use: |-
          assertEQ(s.foo().foo(), s)
          assertEQ(a.foo().foo(), a)

    - decl: |-
          // return 'this' from superclass with overriding abstract method
          abstract class Super {
              fld: int
              abstract foo(): this
          }

          class A extends Super {
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }

          let s: Super = new A
          let a: A = new A
      use: |-
          assertEQ(s.foo().foo(), s)
          assertEQ(a.foo().foo(), a)

    - decl: |-
          // return 'this' from superclass with different methods
          abstract class Super {
              fld: int
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }

          class A extends Super {
              bar(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }

      use: |-
          let s: Super = new A
          let a: A = new A
          assertEQ(s.foo().bar().foo().bar(), s)
          assertEQ(a.foo().bar().foo().bar(), a)

    - decl: |-
          // return 'this' from superclass with different functions with receiver
          abstract class Super {
              fld: int
          }

          function foo(this: Super): this {
              if (this.fld == 0) {
                  return this
              }
              throw new Error
          }

          class A extends Super {}

          function bar(this: A): this {
              if (this.fld == 0) {
                  return this
              }
              throw new Error
          }

          let a: A = new A
          let s: Super = new A
      use: |-
          assertEQ((s.foo() as A).bar(), s)
          assertEQ(a.bar().foo(), a)

    - decl: |-
          // return 'this' from interface
          interface I {
              foo(): this
          }

          class A implements I {
              fld: int
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }

          let i: I = new A
      use: |-
          assertEQ(i.foo().foo(), i)

    - decl: |-
          // return 'this' from default interface method
          interface I {
              fld: int
              foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }

          class A implements I {
              fld: int
          }

          let i: I = new A
      use: |-
          assertEQ(i.foo().foo(), i)

    - decl: |-
          // call method returning 'this' from constructor
          class A {
              fld: int
              constructor() {
                  this.foo().fld = 1
              }
              private foo(): this {
                  if (this.fld == 0) {
                      return this
                  }
                  throw new Error
              }
          }

          let a = new A
      use: |-
          assertEQ(a.fld, 1)

    - decl: |-
          // call function returning 'this' from constructor
          class A {
              fld: int
              constructor() {
                  this.foo().fld = 1
              }
          }

          function foo(this: A): this {
              if (this.fld == 0) {
                  return this
              }
              throw new Error
          }

          let a = new A
      use: |-
          assertEQ(a.fld, 1)

    - decl: |-
          // calling method returning 'this' from throw statement
          class A extends Error {
              fld: int
              constructor(p: string) {
                  super(p)
              }
              foo(p: int): this {
                  if (p == 0) {
                      throw new A('Error in A')
                  }
                  this.fld += p
                  return this
              }
          }
      use: |-
          let a = new A('Error in main')
          try {
              if (a.foo(1) == a) {
                  throw a.foo(1).foo(2).foo(3)
              }
          } catch (e: A) {
              assertEQ(e.message, 'Error in main')
              assertEQ(e.fld, 7)
              return
          }
          assertTrue(false, 'Expected error not thrown')

    - decl: |-
          // calling extension function returning 'this' from throw statement
          class A extends Error {
              fld: int
              constructor(p: string) {
                  super(p)
              }
          }

          function foo(this: A, p: int): this {
              if (p == 0) {
                  throw new A('Error in A')
              }
              this.fld += p
              return this
          }
      use: |-
          let a = new A('Error in main')
          try {
              if (a.foo(1) == a) {
                  throw a.foo(1).foo(2).foo(3)
              }
          } catch (e: A) {
              assertEQ(e.message, 'Error in main')
              assertEQ(e.fld, 7)
              return
          }
          assertTrue(false, 'Expected error not thrown')

    - decl: |-
          // calling method returning 'this' from throw statement
          class A extends Error {
              fld: int
              constructor(p: string) {
                  super(p)
              }
              foo(p: int): this {
                  if (p == 0) {
                      throw new A('Error in A')
                  }
                  this.fld += p
                  return this
              }
          }
      use: |-
          let a = new A('Error in main')
          try {
              if (a.fld == 0) {
                  throw a.foo(0).foo(1).foo(2)
              }
          } catch (e: A) {
              assertEQ(e.message, 'Error in A')
              assertEQ(e.fld, 0)
              return
          }
          assertTrue(false, 'Expected error not thrown')

    - decl: |-
          // calling extension function returning 'this' from throw statement
          class A extends Error {
              fld: int
              constructor(p: string) {
                  super(p)
              }
          }

          function foo(this: A, p: int): this {
              if (p == 0) {
                  throw new A('Error in A')
              }
              this.fld += p
              return this
          }
      use: |-
          let a = new A('Error in main')
          try {
              if (a.fld == 0) {
                  throw a.foo(0).foo(1).foo(2)
              }
          } catch (e: A) {
              assertEQ(e.message, 'Error in A')
              assertEQ(e.fld, 0)
              return
          }
          assertTrue(false, 'Expected error not thrown')

    - decl: |-
          // calling method returning 'this' from coroutine
          import { launch } from "std/concurrency"
          import { Job } from "std/concurrency"
          class A {
              fld: int
              foo(): this {
                  if (this.fld == 999) {
                      throw new Error
                  }
                  this.fld += 1
                  return this
              }

              bar(): Job<this> {
                  return launch<A, () => A>(this.foo().foo().foo)
              }
          }
      use: |-
          let a = new A
          assertEQ((a.bar().Await()), a)
          assertEQ(a.fld, 3)

    - decl: |-
          // calling extension function returning 'this' from coroutine
          class A {
              fld: int
              bar(): Promise<this> {
                  return Promise.resolve(this.foo().foo().foo())
              }
          }

          function foo(this: A): this {
              if (this.fld == 999) {
                  throw new Error
              }
              this.fld += 1
              return this
          }
      use: |-
          let a = new A
          assertEQ((await a.bar()), a)
          assertEQ(a.fld, 3)

    - decl: |-
          // calling async method returning 'this'
          class A {
              fld: int
              async foo(): Promise<this> {
                  if (this.fld == 999) {
                      throw new Error
                  }
                  this.fld += 1
                  return this
              }
          }
      use: |-
          let a = new A
          assertEQ((await (await a.foo()).foo()), a)
          assertEQ(a.fld, 2)
