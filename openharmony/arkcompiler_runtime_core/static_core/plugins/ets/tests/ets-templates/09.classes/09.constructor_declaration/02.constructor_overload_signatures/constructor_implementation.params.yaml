# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  # semicolon breaks the single constructor body rule
    - tags: |-
        negative, compile-only
      decl: |-
        class A {
            constructor();
            constructor(i: int) { }
        }

    - tags: |-
        negative, compile-only
      decl: |-
        class A {
            constructor();
            {}
        }

  # missing constructor body
    - tags: |-
        negative, compile-only
      decl: |-
        class A {
            constructor();
        }

    - tags: |-
        negative, compile-only
      decl: |-
        class A {
            constructor()
            foo() { }
            { }
        }

    - decl: |-
        let i: int = 0;
        class A {
            constructor(j: int)




            { i = 1; }
        }
        function main() {
            i = 0;
            let a: A = new A(0);
            assert(i == 1);
        }

    - decl: |-
        let i: int = 0;
        class A {
            constructor()
            constructor(j: int)
            constructor(f: float)
            { i = 1; }
        }
        function main() {
            i = 0;
            let a: A = new A();
            assert(i == 1);
            i = 0;
            let b: A = new A(1 as int);
            assert(i == 1);
            i = 0;
            let c: A = new A(1.1 as float);
            assert(i == 1);
        }

    - decl: |-
        let i: int = 0;
        class A {
            constructor() { i = 1; }
            private constructor(j: int)
            private constructor(f: float)
            { i = 2; }
        }
        function main() {
            i = 0;
            let a: A = new A();
            assert(i == 1);
        }

    - decl: |-
        let i: int = 0;
        class A {
            constructor() { i = 1; }
            protected constructor(j: int)
            protected constructor(f: float)
            { i = 2; }
        }
        function main() {
            i = 0;
            let a: A = new A();
            assert(i == 1);
        }

    - tags: |-
        negative, compile-only
      decl: |-
        let i: int = 0;
        class A {
            constructor(j: int)
            constructor(j: Int)
            private constructor(f: float)
            { i = 1; }
        }

    - tags: |-
        negative, compile-only
      decl: |-
        let i: int = 0;
        class A {
            constructor(j: int)
            constructor(j: Int)
            protected constructor(f: float)
            { i = 1; }
        }

    - tags: |-
        negative, compile-only
      decl: |-
        let i: int = 0;
        class A {
            private constructor(j: int)
            constructor(j: Int)
            constructor(f: float)
            { i = 1; }
        }

    - tags: |-
        negative, compile-only
      decl: |-
        let i: int = 0;
        class A {
            constructor(j: int)
            protected constructor(j: Int)
            constructor(f: float)
            { i = 1; }
        }
