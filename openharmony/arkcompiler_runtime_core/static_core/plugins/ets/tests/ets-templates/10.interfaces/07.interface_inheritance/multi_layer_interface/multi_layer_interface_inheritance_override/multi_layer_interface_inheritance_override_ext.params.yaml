# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Interfaces with static members and type parameters inside
cases:
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the string data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): string
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): string
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): string {
          return "grandparentMethod_override";
        }
        parentMethod(): string {
          return "parentMethod_override";
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: string = obj.grandparentMethod();
      assertEQ(tmp1, "grandparentMethod_override");
      let tmp2: string = obj.parentMethod();
      assertEQ(tmp2, "parentMethod_override");
  - desc: An upper-layer interface has multiple methods. In multi-layer inheritance, the sub-interface overrides the methods of all upper-layer interfaces.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): string
        grandparentMethod_1(): number
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): string
        parentMethod_1(): number
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): string {
          return "grandparentMethod_override";
        }
        grandparentMethod_1(): number {
          return 200;
        }
        parentMethod(): string {
          return "parentMethod_override";
        }
        parentMethod_1(): number {
          return 300;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: string = obj.grandparentMethod();
      assertEQ(tmp1, "grandparentMethod_override");
      let tmp2: string = obj.parentMethod();
      assertEQ(tmp2, "parentMethod_override");
      let tmp3: number = obj.grandparentMethod_1();
      assertEQ(tmp3, 200);
      let tmp4: number = obj.parentMethod_1();
      assertEQ(tmp4, 300);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the number data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): number
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): number
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): number {
          return 3;
        }
        parentMethod(): number {
          return 4;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: number = obj.grandparentMethod();
      assertEQ(tmp1, 3);
      let tmp2: number = obj.parentMethod();
      assertEQ(tmp2, 4);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the byte data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): byte
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): byte
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): byte {
          return 3;
        }
        parentMethod(): byte {
          return 4;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: byte = obj.grandparentMethod();
      assertEQ(tmp1, 3);
      let tmp2: byte = obj.parentMethod();
      assertEQ(tmp2, 4);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the short data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): short
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): short
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): short {
          return 3;
        }
        parentMethod(): short {
          return 4;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: short = obj.grandparentMethod();
      assertEQ(tmp1, 3);
      let tmp2: short = obj.parentMethod();
      assertEQ(tmp2, 4);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the int data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): int
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): int
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): int {
          return 3;
        }
        parentMethod(): int {
          return 4;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: int = obj.grandparentMethod();
      assertEQ(tmp1, 3);
      let tmp2: int = obj.parentMethod();
      assertEQ(tmp2, 4);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the long data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): long
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): long
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): long {
          return 3;
        }
        parentMethod(): long {
          return 4;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: long = obj.grandparentMethod();
      assertEQ(tmp1, 3);
      let tmp2: long = obj.parentMethod();
      assertEQ(tmp2, 4);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the double data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): double
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): double
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): double {
          return 3;
        }
        parentMethod(): double {
          return 4;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: double = obj.grandparentMethod();
      assertEQ(tmp1, 3);
      let tmp2: double = obj.parentMethod();
      assertEQ(tmp2, 4);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the enumeration data type.
    decl: |-
      enum ColorSet {
        Red = 0,
        Green = 1,
        Blue = 2
      }
      interface GrandParentInterface {
        grandparentMethod(): ColorSet
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): ColorSet
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): ColorSet {
          return ColorSet.Green;
        }
        parentMethod(): ColorSet {
          return ColorSet.Red;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: ColorSet = obj.grandparentMethod();
      assertEQ(tmp1.valueOf(), 1);
      let tmp2: ColorSet = obj.parentMethod();
      assertEQ(tmp2.valueOf(), 0);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the char data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): char
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): char
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): char {
          return 3;
        }
        parentMethod(): char {
          return 4;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: char = obj.grandparentMethod();
      assertEQ(tmp1, 3);
      let tmp2: char = obj.parentMethod();
      assertEQ(tmp2, 4);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the boolean data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): boolean
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): boolean
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): boolean {
          return false;
        }
        parentMethod(): boolean {
          return true;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: boolean = obj.grandparentMethod();
      assertEQ(tmp1, false);
      let tmp2: boolean = obj.parentMethod();
      assertEQ(tmp2, true);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the [] data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): []
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): []
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): [] {
          return [];
        }
        parentMethod(): [] {
          return [];
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: [] = obj.grandparentMethod();
      assertEQ(tmp1.toString(), "");
      let tmp2: [] = obj.parentMethod();
      assertEQ(tmp2.toString(), "");
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the number[] data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): number[]
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): number[]
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): number[] {
          return [1, 2, 3];
        }
        parentMethod(): number[] {
          return [4, 5, 6];
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: number[] = obj.grandparentMethod();
      assertEQ(tmp1[0], 1);
      let tmp2: number[] = obj.parentMethod();
      assertEQ(tmp2[1], 5);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the bigint data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): bigint
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): bigint
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): bigint {
          return 3n;
        }
        parentMethod(): bigint {
          return 4n;
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: bigint = obj.grandparentMethod();
      assertEQ(tmp1, 3n);
      let tmp2: bigint = obj.parentMethod();
      assertEQ(tmp2, 4n);
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the string[] data type.
    decl: |-
      interface GrandParentInterface {
        grandparentMethod(): string[]
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): string[]
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): string[] {
          return ["1", "2", "3"];
        }
        parentMethod(): string[] {
          return ["4", "5", "6"];
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: string[] = obj.grandparentMethod();
      assertEQ(tmp1[0], "1");
      let tmp2: string[] = obj.parentMethod();
      assertEQ(tmp2[1], "5");
  - desc: The upper-layer interface has a method. In multi-layer inheritance, the sub-interface overrides all the methods of the upper-layer interface. The return value of the method is of the object data type.
    decl: |-
      interface Person {
        name: string;
        age: number;
        hobbies: string[];
      }
      interface GrandParentInterface {
        grandparentMethod(): Person
      }
      interface ParentInterface extends GrandParentInterface {
        parentMethod(): Person
      }
      interface ChildInterface extends ParentInterface {
        grandparentMethod(): Person {
          return {
            name: "John3",
            age: 30,
            hobbies: ["reading", "swimming"]
          };
        }
        parentMethod(): Person {
          return {
            name: "John4",
            age: 30,
            hobbies: ["reading", "swimming"]
          };
        }
      }
      class ConcreteClass implements ChildInterface {
      }
    logic: |-
      const obj: ChildInterface = new ConcreteClass();
      let tmp1: Person = obj.grandparentMethod();
      assertEQ(tmp1.name, "John3");
      let tmp2: Person = obj.parentMethod();
      assertEQ(tmp2.name, "John4");