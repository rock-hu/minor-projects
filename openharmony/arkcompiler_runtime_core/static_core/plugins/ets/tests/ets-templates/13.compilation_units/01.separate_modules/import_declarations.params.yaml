# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - import: |-
        import {A} from "./modules/declarations.ets"  // Base class
    decl: |-
        class B extends A {};
    call: |-
        let z: A = new A();
        assertTrue(z instanceof A);
        let x: B = new B();
        assertTrue(x instanceof A);

  - import: |-
        import {A} from "./modules/declarations.ets"  // Base class
        import {B} from "./modules/declarations.ets"  // Derived class
    call: |-
        let z: B = new B();
        assertTrue(z instanceof A);

  - import: |-
        import {AC} from "./modules/declarations.ets"  // Abstract class
        import {C} from "./modules/declarations.ets"  // Derived class
    decl: |-
        class B extends AC {};
    call: |-
        let z: AC = new C();
        assertTrue(z instanceof AC);
        assertTrue(z instanceof C);
        let x: B = new B();
        assertTrue(x instanceof AC);
        assertTrue(x instanceof B);

  - import: |-
        import {I} from "./modules/declarations.ets"  // Base interface
        import {II} from "./modules/declarations.ets"  // Derived interface
    decl: |-
        class A implements I {};
        class B implements II {};
    call: |-
        let z: I = new B();
        assertTrue(z instanceof B);
        assertTrue(z instanceof I);
        assertTrue(z instanceof II);
        let x: A = new A();
        assertTrue(x instanceof A);
        assertTrue(x instanceof I);

  - import: |-
        import {I} from "./modules/declarations.ets"  // Base interface
        import {II} from "./modules/declarations.ets"  // Derived interface
        import {D} from "./modules/declarations.ets"  // Derived class
    call: |-
        let z: I = new D();
        assertTrue(z instanceof D);
        assertTrue(z instanceof I);
        assertTrue(z instanceof II);

  - import: |-
        import {ENUM} from "./modules/declarations.ets"  // Enum
    call: |-
        assertEQ(ENUM.Red.valueOf(), 0);
        assertEQ(ENUM.Blue.valueOf(), 1);

  - import: |-
        import {A} from "./modules/declarations.ets"  // Base class
        import {CLASS_A} from "./modules/declarations.ets"  // Type, class
    call: |-
        let z: CLASS_A = new CLASS_A();
        assertTrue(z instanceof A);

  - import: |-
        import {VAR_i} from "./modules/declarations.ets"  // variable of primitive type (int)
    call: |-
        let z: VAR_i = 3;
        assertEQ(z, 3);

  - import: |-
        import {TPL} from "./modules/declarations.ets"  // Tuple type
    call: |-
        let z: TPL = [new Number(), new String()];
        assertTrue(z[0] instanceof Number);
        assertTrue(z[1] instanceof String);

  - import: |-
        import {NoArg} from "./modules/declarations.ets"  // Function without arguments
        import {res} from "./modules/declarations.ets"  // Function without arguments

    call: |-
        NoArg();
        assertEQ(res, 1);

  - import: |-
        import {OneArg} from "./modules/declarations.ets"  // Function, argument of Number type
    call: |-
        assertEQ(OneArg(new Number()), 2);

  - import: |-
        import {TwoArgs} from "./modules/declarations.ets"  // Function, arguments of char and byte types
    call: |-
        assertEQ(TwoArgs(c'A', 1 as byte), 3);

  - import: |-
        import {Gen} from "./modules/declarations.ets"  // Function, generic argument
    call: |-
        let s = "knock-knock";
        assertEQ(Gen(s), s);
        assertEQ(Gen(new Number(1.45)), 1.45);

  - import: |-
        import {ArgFun} from "./modules/declarations.ets"  // Function, argument is of function type
    call: |-
        assertEQ(ArgFun( () => { return 3; } ), 3);

  - import: |-
        import {ArgFun2} from "./modules/declarations.ets"  // Function, arguments - function type + primitive
    call: |-
        assertEQ(ArgFun2( (i) => { return i; }, 4), 4);

  - import: |-
        import {a} from "./modules/declarations.ets"  // Variable, primitive, implicit type
    call: |-
        assertEQ(a, 1);
        a = 2;
        assertEQ(a, 2);
        a = 1;

  - import: |-
        import {i} from "./modules/declarations.ets"  // Variable, int
    call: |-
        assertEQ(i, 2);
        i += 3;
        assertEQ(i, 5);
        i = 2;

  - import: |-
        import {n} from "./modules/declarations.ets"  // Variable, number
    call: |-
        assertEQ(n, 3);
        n += 0.1;
        assertEQ(n, 3.1);
        n = 3;

  - import: |-
        import {s} from "./modules/declarations.ets"  // Variable, String
    call: |-
        assertEQ(s, "knock-knock");
        s += " who`s there";
        assertEQ(s, "knock-knock who`s there");
        s = "knock-knock";

  - import: |-
        import {c} from "./modules/declarations.ets"  // Variable, char
    call: |-
        assertEQ(c, c'A');
        c = c'b';
        assertEQ(c, c'b');
        c = c'A';

  - import: |-
        import {u} from "./modules/declarations.ets"  // Variable, union
    call: |-
        assertEQ(u, undefined);
        u = new Number(1.2);
        assertEQ(u, 1.2);
        u = "hi there";
        assertEQ(u, "hi there");
        u = undefined;

  - import: |-
        import {arr} from "./modules/declarations.ets"  // Variable, bytes[3]
    call: |-
        assertEQ(arr.length, 3);
        arr = new byte[2];
        assertEQ(arr.length, 2);
        arr = new byte[3];

  - import: |-
        import {ca} from "./modules/declarations.ets"  // Const implicit int
    call: |-
        assertEQ(ca, 11);

  - import: |-
        import {ca} from "./modules/declarations.ets"  // Const implicit int
    call: |-
        ca = 21;
    tags: |-
         negative, compile-only

  - import: |-
        import {ci} from "./modules/declarations.ets"  // Const int
    call: |-
        assertEQ(ci, 12);

  - import: |-
        import {ci} from "./modules/declarations.ets"  // Const int
    call: |-
        ci = 22;
    tags: |-
      negative, compile-only

  - import: |-
        import {cs} from "./modules/declarations.ets"  // Const str
    call: |-
        assertEQ(cs, "who`s there");

  - import: |-
        import {cs} from "./modules/declarations.ets"  // Const str
    call: |-
        cs = "new value";
    tags: |-
      negative, compile-only
