# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - import: |-
        import {A} from "./modules/declarations.sts"  // Base class
    decl: |-
        class B extends A {};
    call: |-
        let z: A = new A();
        assert(z instanceof A);
        let x: B = new B();
        assert(x instanceof A);

  - import: |-
        import {A} from "./modules/declarations.sts"  // Base class
        import {B} from "./modules/declarations.sts"  // Derived class
    call: |-
        let z: B = new B();
        assert(z instanceof A);

  - import: |-
        import {AC} from "./modules/declarations.sts"  // Abstract class
        import {C} from "./modules/declarations.sts"  // Derived class
    decl: |-
        class B extends AC {};
    call: |-
        let z: AC = new C();
        assert(z instanceof AC);
        assert(z instanceof C);
        let x: B = new B();
        assert(x instanceof AC);
        assert(x instanceof B);

  - import: |-
        import {I} from "./modules/declarations.sts"  // Base interface
        import {II} from "./modules/declarations.sts"  // Derived interface
    decl: |-
        class A implements I {};
        class B implements II {};
    call: |-
        let z: I = new B();
        assert(z instanceof B);
        assert(z instanceof I);
        assert(z instanceof II);
        let x: A = new A();
        assert(x instanceof A);
        assert(x instanceof I);

  - import: |-
        import {I} from "./modules/declarations.sts"  // Base interface
        import {II} from "./modules/declarations.sts"  // Derived interface
        import {D} from "./modules/declarations.sts"  // Derived class
    call: |-
        let z: I = new D();
        assert(z instanceof D);
        assert(z instanceof I);
        assert(z instanceof II);

  - import: |-
        import {ENUM} from "./modules/declarations.sts"  // Enum
    call: |-
        assert(ENUM.Red.valueOf() == 0);
        assert(ENUM.Blue.valueOf() == 1);

  - import: |-
        import {A} from "./modules/declarations.sts"  // Base class
        import {CLASS_A} from "./modules/declarations.sts"  // Type, class
    call: |-
        let z: CLASS_A = new CLASS_A();
        assert(z instanceof A);

  - import: |-
        import {VAR_i} from "./modules/declarations.sts"  // variable of primitive type (int)
    call: |-
        let z: VAR_i = 3;
        assert(z == 3);

  - import: |-
        import {TPL} from "./modules/declarations.sts"  // Tuple type
    call: |-
        let z: TPL = [new Number(), new String()];
        assert(z[0] instanceof Number);
        assert(z[1] instanceof String);

  - import: |-
        import {NoArg} from "./modules/declarations.sts"  // Function without arguments
        import {res} from "./modules/declarations.sts"  // Function without arguments

    call: |-
        NoArg();
        assert(res == 1);

  - import: |-
        import {OneArg} from "./modules/declarations.sts"  // Function, argument of Number type
    call: |-
        assert(OneArg(new Number()) == 2);

  - import: |-
        import {TwoArgs} from "./modules/declarations.sts"  // Function, arguments of char and byte types
    call: |-
        assert(TwoArgs(c'A', 1 as byte) == 3);

  - import: |-
        import {Gen} from "./modules/declarations.sts"  // Function, generic argument
    call: |-
        let s = "knock-knock";
        assert(Gen(s) == s);
        assert(Gen(new Number(1.45)) == 1.45);

  - import: |-
        import {ArgFun} from "./modules/declarations.sts"  // Function, argument is of function type
    call: |-
        assert(ArgFun( () => { return 3; } ) == 3);

  - import: |-
        import {ArgFun2} from "./modules/declarations.sts"  // Function, arguments - function type + primitive
    call: |-
        assert(ArgFun2( (i) => { return i; }, 4) == 4);

  - import: |-
        import {a} from "./modules/declarations.sts"  // Variable, primitive, implicit type
    call: |-
        assert(a == 1);
        a = 2;
        assert(a == 2);
        a = 1;

  - import: |-
        import {i} from "./modules/declarations.sts"  // Variable, int
    call: |-
        assert(i == 2);
        i += 3;
        assert(i == 5);
        i = 2;

  - import: |-
        import {n} from "./modules/declarations.sts"  // Variable, number
    call: |-
        assert(n == 3);
        n += 0.1;
        assert(n == 3.1);
        n = 3;

  - import: |-
        import {s} from "./modules/declarations.sts"  // Variable, String
    call: |-
        assert(s == "knock-knock");
        s += " who`s there";
        assert(s == "knock-knock who`s there");
        s = "knock-knock";

  - import: |-
        import {c} from "./modules/declarations.sts"  // Variable, char
    call: |-
        assert(c == c'A');
        c = c'b';
        assert(c == c'b');
        c = c'A';

  - import: |-
        import {u} from "./modules/declarations.sts"  // Variable, union
    call: |-
        assert(u == undefined);
        u = new Number(1.2);
        assert(u == 1.2);
        u = "hi there";
        assert(u == "hi there");
        u = undefined;

  - import: |-
        import {arr} from "./modules/declarations.sts"  // Variable, bytes[3]
    call: |-
        assert(arr.length == 3);
        arr = new byte[2];
        assert(arr.length == 2);
        arr = new byte[3];

  - import: |-
        import {ca} from "./modules/declarations.sts"  // Const implicit int
    call: |-
        assert(ca == 11);

  - import: |-
        import {ca} from "./modules/declarations.sts"  // Const implicit int
    call: |-
        ca = 21;
    tags: |-
         negative, compile-only

  - import: |-
        import {ci} from "./modules/declarations.sts"  // Const int
    call: |-
        assert(ci == 12);

  - import: |-
        import {ci} from "./modules/declarations.sts"  // Const int
    call: |-
        ci = 22;
    tags: |-
      negative, compile-only

  - import: |-
        import {cs} from "./modules/declarations.sts"  // Const str
    call: |-
        assert(cs == "who`s there");

  - import: |-
        import {cs} from "./modules/declarations.sts"  // Const str
    call: |-
        cs = "new value";
    tags: |-
      negative, compile-only
