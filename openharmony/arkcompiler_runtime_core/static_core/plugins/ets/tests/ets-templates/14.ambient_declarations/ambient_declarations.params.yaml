# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

declarations:
  # variables
  - >
    declare let x: int;
  - >
    declare const obj: Object;
  - >
    declare let a: int, b: float, c: string, d: Byte[], e: string[];
  - >
    declare const a: short, b: double, c: Object[];
  # functions
  - >
    declare function fun(x: int): void
  - >
    declare function foo(x: number, y: string, z: Object[]): double
  - >
    declare function bar<U, V, R>(x: U, y: V): R
  - >
    declare function baz(x?: int, y?: number): void
  # classes
  - >
    declare class A
  - >
    declare final class B
  - >
    declare abstract class C
  - >
    class A {}

    declare class B extends A
  - >
    interface A {}

    declare class B implements A
  - >
    declare class A<T1, T2>
  - >
    declare class A {}
  - >
    declare final class B {}
  - >
    declare abstract class C {}
  - >
    class A {}

    declare class B extends A {}
  - >
    interface A {}

    declare class B implements A {}
  - >
    declare class A<T1, T2> {}
  # classes and fields
  - >
    declare class A {
      s: string
    }
  - >
    declare class A {
      readonly v: int
    }
  - >
    declare class A {
      static x: double
    }
  - >
    declare class A<T> {
      T: double
    }
  - >
    declare class A<U, V> {
      readonly v1: U
      static v2: V
    }
  # classes and constructors
  - >
    declare class A {
      constructor()
    }
  - >
    declare class A {
      constructor(x: int)
    }
  - >
    declare class A {
      constructor(x: short, y: double, z: string[])
    }
  - >
    declare class A<U, V> {
      constructor(u: U, v: V)
    }
  - >
    declare class A {
      constructor() throws
    }
  # classes and methods
  - >
    declare class A {
      foo(): void
    }
  - >
    declare abstract class A {
      abstract foo(): void
    }
  - >
    declare class A {
      static foo(): void
    }
  - >
    declare class A {
      final foo(): void
    }
  - >
    class A {
      foo(): void {}
    }

    declare class B extends A {
      override foo(): void
    }
  - >
    declare class A {
      native foo(): void
    }
  - >
    declare class A {
      foo(x: int, y: int): string
    }
  - >
    declare class A<U, V, R> {
      foo(u: U, v: V): R
    }
  - >
    declare class A {
      foo(): int throws Exception
    }
  # classes and accessors
  - >
    declare class A {
      get foo(): int
      set foo(x: int): void
    }
  - >
    declare abstract class A {
      abstract get foo(): int
      abstract set foo(x: int): void
    }
  - >
    declare class A {
      final get foo(): int
      final set foo(x: int): void
    }
  - >
    declare class A {
      static get foo(): int
      static set foo(x: int): void
    }
  - >
    class A {
      private x: int
      get foo() { return this.x }
      set foo(x: int): void { this.x = x }
    }

    declare class B extends A {
      override get foo(): int
      override set foo(x: int): void
    }
  # interfaces
  - >
    declare interface A {}
  - >
    declare interface B {
       a: int
       b: float
       c: Byte[]
    }
  - >
    declare interface C {
      foo(x: number, y: string, z: double[]): void
    }
  - >
    declare interface D<T1, T2> {
      a: T1
      b: T2
    }
  - >
    declare interface E<U, V, R> {
      foo(x: U, y: V): R
    }
  - >
    declare interface A {
    }
    
    declare interface B extends A {
    }
  - >
    declare interface A {
      get foo(): int
      set foo(v: int): void
    }
  # namespaces
  - >
    declare namespace Ambient {}
  - >
    declare namespace Ambient {
      let x: int
      let y: double
      let z: string
    }
  - >
    declare namespace Ambient {
      const x: Object
      const y: float
      const z: Byte[]
    }
  - >
    declare namespace Ambient {
      foo(): void
    }
  - >
    declare namespace Ambient {
      class A
    }
  - >
    declare namespace Ambient {
      interface A
    }
  - >
    declare namespace Ambient {
      namespace NestedAmbient {
      }
    }
