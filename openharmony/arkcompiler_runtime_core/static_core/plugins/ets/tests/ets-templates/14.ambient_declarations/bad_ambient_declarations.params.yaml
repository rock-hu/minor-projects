# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

declarations:
  # Ambient declarations cannot include executable code. As a consequence, they have no initializers.
  - >
    declare let x = 5: int;
  - >
    declare const PI = 3.14: double;
  - >
    declare class A {
      s: string = "should fail"
    }
  # Ambient functions, methods, and constructors have no body.
  - >
    declare function fun(x: int): void {}
  - >
    declare class A {
      constructor() {}
    }
  - >
    declare class A {
      foo(): int { return 0 }
    }
  - >
    declare class A {
      get foo(): int { return 42 }
    }
  # Ambient functions cannot have parameters
  - >
    declare function foo(int param = 1)
  # A compile-time error occurs if an explicit return type is not specified for an ambient function declaration
  - >
    declare function foo()
  # The modifier ‘async’ cannot be used in an ambient context
  - >
    declare async function foo() {}
  # A compile-time error occurs if the modifier ‘declare’ is used in a context that is already ambient
  - >
    declare namespace Ambient {
      declare namespace NestedAmbient {
      }
    }
  # Some illegal code, should fail
  - >
    declare declare let x: int
  - >
    function foo() {
      declare const C: char
    }
  - >
    class A {
      declare let y: int
    }
