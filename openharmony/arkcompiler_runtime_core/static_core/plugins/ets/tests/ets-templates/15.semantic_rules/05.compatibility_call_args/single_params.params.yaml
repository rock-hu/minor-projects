# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - arg: short
      values:
          - { val: 0b0 as byte, result: 0 }
          - { val: Byte.MIN_VALUE, result: -128 }
          - { val: Byte.MAX_VALUE, result: 127 }

    
    - arg: int
      values:
          - { val: 0b0 as byte, result: 0 }
          - { val: Byte.MIN_VALUE, result: -128 }
          - { val: Byte.MAX_VALUE, result: 127 }

    
    - arg: long
      values:
          - { val: 0b0 as byte, result: 0 as long }
          - { val: Byte.MIN_VALUE, result: -128 as long }
          - { val: Byte.MAX_VALUE, result: 127 as long }

    
    - arg: float
      values:
          - { val: 0b0 as byte, result: 0.0 as float }
          - { val: Byte.MIN_VALUE, result: -128.0 as float }
          - { val: Byte.MAX_VALUE, result: 127.0 as float }

    
    - arg: double
      values:
          - { val: 0b0 as byte, result: 0.0 }
          - { val: Byte.MIN_VALUE, result: -128.0 as double }
          - { val: Byte.MAX_VALUE, result: 127.0 as double }

    
    - arg: number
      values:
          - { val: 0b0 as byte, result: 0.0 }
          - { val: Byte.MIN_VALUE, result: -128.0 as number }
          - { val: Byte.MAX_VALUE, result: 127.0 as number }

    
    - arg: char
      values:
          - { val: 0b0 as byte, result: "c'\\u0000'" }
          - { val: Byte.MIN_VALUE, result: "c'\\uFF80'" }
          - { val: Byte.MAX_VALUE, result: "c'\\u007F'" }

    
    - arg: int
      values:
          - { val: 0b0 as short, result: 0 }
          - { val: Short.MIN_VALUE, result: -32_768 }
          - { val: Short.MAX_VALUE, result: 32_767 }

    
    - arg: long
      values:
          - { val: 0b0 as short, result: 0 as long }
          - { val: Short.MIN_VALUE, result: -32_768 as long }
          - { val: Short.MAX_VALUE, result: 32_767 as long }

    
    - arg: float
      values:
          - { val: 0b0 as short, result: 0.0 as float }
          - { val: Short.MIN_VALUE, result: -32_768.0 as float }
          - { val: Short.MAX_VALUE, result: 32_767.0 as float }

    
    - arg: double
      values:
          - { val: 0b0 as short, result: 0.0 }
          - { val: Short.MIN_VALUE, result: -32_768.0 as double}
          - { val: Short.MAX_VALUE, result: 32_767.0 as double }

    
    - arg: number
      values:
          - { val: 0b0 as short, result: 0.0 }
          - { val: Short.MIN_VALUE, result: -32_768.0 as number }
          - { val: Short.MAX_VALUE, result: 32_767.0 as number }

    
    - arg: long
      values:
          - { val: 0, result: 0 as long }
          - { val: Int.MIN_VALUE, result: -2147483648 as long }
          - { val: Int.MAX_VALUE, result: 2147483647 as long }

    
    - arg: float
      values:
          - { val: 0, result: 0.0 as float }
          - { val: Int.MIN_VALUE, result: -2147483600.0 as float } # expected loss of precision
          - { val: Int.MAX_VALUE, result: 2147483600 as float } # expected loss of precision

    
    - arg: double
      values:
          - { val: 0, result: 0.0 }
          - { val: Int.MIN_VALUE, result: -2147483648.0 as double }
          - { val: Int.MAX_VALUE, result: 2147483647.0 as double }

    
    - arg: number
      values:
          - { val: 0, result: 0.0 }
          - { val: Int.MIN_VALUE, result: -2147483648.0 as number }
          - { val: Int.MAX_VALUE, result: 2147483647.0 as number }

    
    - arg: float
      values:
          - { val: 0 as long, result: 0.0 as float }
          - { val: Long.MIN_VALUE, result: -9223372000000000000 as float }
          - { val: Long.MAX_VALUE, result: 9223372000000000000 as float }

    
    - arg: double
      values:
          - { val: 0 as long, result: 0.0 }
          - { val: Long.MIN_VALUE, result: -9223372036854775808.0 as double }
          - { val: Long.MAX_VALUE, result: 9223372036854775807.0 as double }

    
    - arg: number
      values:
          - { val: 0 as long, result: 0.0 }
          - { val: Long.MIN_VALUE, result: -9223372036854775808.0 as number }
          - { val: Long.MAX_VALUE, result: 9223372036854775807.0 as number }

    
    - arg: double
      values:
          - { val: +0.0 as float, result: +0.0 }
          - { val: -0.0 as float, result: -0.0 }
          - { val: 3.4028234663852886e38 as float, result: 3.4028234663852886e38 as double }
          - { val: 1.401298464324817e-45 as float, result: 1.401298464324817e-45 as double }
          - { val: -3.4028234663852886e38 as float, result: -3.4028234663852886e38 as double }
          - { val: -1.401298464324817e-45 as float, result: -1.401298464324817e-45 as double }

    
    - arg: int
      values:
          - { val: "c'\\u0000'", result: 0 }
          - { val: "c'\\u0FFF'", result: 4095 }
          - { val: "c'\\uFFFF'", result: 65535 }

    
    - arg: long
      values:
          - { val: "c'\\u0000'", result: 0 as long }
          - { val: "c'\\u0FFF'", result: 4095 as long }
          - { val: "c'\\uFFFF'", result: 65535 as long }

    
    - arg: float
      values:
          - { val: "c'\\u0000'", result: 0.0 as float }
          - { val: "c'\\u0FFF'", result: 4095.0 as float }
          - { val: "c'\\uFFFF'", result: 65535.0 as float }

    
    - arg: double
      values:
          - { val: "c'\\u0000'", result: 0.0 as double }
          - { val: "c'\\u0FFF'", result: 4095.0 as double }
          - { val: "c'\\uFFFF'", result: 65535.0 as double }

    
    - arg: int
      defs: |-
          enum Color { Red, Green, Blue }
      values:
          - { val: Color.Red, result: 0 }
          - { val: Color.Green, result: 1 }
          - { val: Color.Blue, result: 2 }

    
    - arg: long
      defs: |-
          enum Color { Red=100, Green=200, Blue=300 }
      values:
          - { val: Color.Red, result: 100 as long }
          - { val: Color.Green, result: 200 as long }
          - { val: Color.Blue, result: 300 as long }

    
    - arg: float
      defs: |-
          enum Color { Red=10, Green=20, Blue=30 }
      values:
          - { val: Color.Red, result: 10.0 as float }
          - { val: Color.Green, result: 20.0 as float }
          - { val: Color.Blue, result: 30.0 as float }

    
    - arg: double
      defs: |-
          enum Color { Red=10001, Green=10002, Blue=10003 }
      values:
          - { val: Color.Red, result: 10001.0 as double }
          - { val: Color.Green, result: 10002.0 as double }
          - { val: Color.Blue, result: 10003.0 as double }

    
    - arg: number
      defs: |-
          enum Color { Red=20001, Green=20002, Blue=20003 }
      values:
          - { val: Color.Red, result: 20001.0 as number }
          - { val: Color.Green, result: 20002.0 as number }
          - { val: Color.Blue, result: 20003.0 as number }
