# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
    # var init
    - code: |-
          let v: string|number|boolean = 42.0
          res = v + 1 == 43.0

    # var assignment
    - code: |-
          let v: number|string|boolean = true
          v = 42.0
          res = v + 1 == 43.0

    # function argument
    - code: |-
          let v: number|string|boolean = true
          v = 42.0
          if (!res) {
              res = foo(v) == 43.0
          }
      decl: |-
          function foo(p: number): number {
              return p + 1
          }

    - code: |-
          let v: number|string|boolean = true
          if (!res) {
              v = 42.0
          }
          res = foo(v) == 43.0
      decl: |-
          function foo(p: number): number {
              return p + 1
          }
      tags: 'compile-only, negative'

    # constructor argument
    - decl: |-
          class A {
              fld: number
              constructor(p: number) {
                  this.fld = p + 1
              }
          }
      code: |-
          let v: number|string|boolean = true
          v = 42.0
          if (!res) {
              let a: A = new A(v)
              res = a.fld == 43.0
          }

    - decl: |-
          class A {
              fld: number
              constructor(p: number) {
                  this.fld = p + 1
              }
          }
      tags: 'compile-only, negative'
      code: |-
          let v: number|string|boolean = true
          if (!res) {
              v = 42.0
          }
          let a: A = new A(v)
          res = a.fld == 43.0

    # method argument
    - decl: |-
          class A {
              meth(p: number): number {
                  return p + 1
              }
          }
      code: |-
          let v: number|string|boolean = '1.0'
          let a: A = new A()
          v = 42.0
          if (!res) {
              res = a.meth(v) == 43.0
          }

    - decl: |-
          class A {
              meth(p: number): number {
                  return p + 1
              }
          }
      tags: 'compile-only, negative'
      code: |-
          let v: number|string|boolean = '1.0'
          let a: A = new A()
          if (!res) {
              v = 42.0
          }
          res = a.meth(v) == 43.0

    # array literal element
    - code: |-
          let v: number|string|boolean = '0.0'
          let arr: number[]
          v = 42.0
          if (!res) {
              arr = [v, v + 1, v + 2]
              res = arr[0] == 42.0 && arr[1] == 43.0 && arr[2] == 44.0
          }

    - code: |-
          let v: number|string|boolean = '0.0'
          let arr: number[]
          if (!res) {
              v = 42.0
          }
          arr = [v, v + 1, v + 2]
          res = arr[0] == 42.0 && arr[1] == 43.0 && arr[2] == 44.0
      tags: 'compile-only, negative'

    # object literal
    - decl: |-
          class A {
              f: number
          }
      code: |-
          let v: number|string|boolean = false
          v = 42.0
          if (!res) {
              let a: A = { f: v + 1 }
              res = a.f == 43.0
          }

    - decl: |-
          class A {
              f: number
          }
      tags: 'compile-only, negative'
      code: |-
          let v: number|string|boolean = false
          if (!res) {
              v = 42.0
          }
          let a: A = { f: v + 1 }
          res = a.f == 43.0

    # lambda argument
    - code: |-
          let v: number|string|boolean = '1.0'
          res = ((p: number): number => { return p + 1 })(v = 42.0) == 43.0

    # array indexing expression
    - code: |-
          let v: int|string|boolean = false
          let arr: string[] = ['A', 'B', 'C']
          v = 1
          if (!res) {
              res = arr[v] == 'B'
          }

    - code: |-
          let v: int|string|boolean = false
          let arr: string[] = ['A', 'B', 'C']
          if (!res) {
              v = 1
          }
          res = arr[v] == 'B'
      tags: 'compile-only, negative'

    # func types union
    - decl: |-
          type F1 = (p: string) => string
          type F2 = (p: number) => string
      code: |-
          let v: F1|F2|string|null = null
          v = (p: string): string => { return p + '1' }
          if (!res) {
              res = v('X') == 'X1'
          }

    - decl: |-
          type F1 = (p: string) => string
          type F2 = (p: number) => string
      code: |-
          let v: F1|F2|string|null = null
          if (!res) {
              v = (p: string): string => { return p + '1' }
          }
          res = v('X') == 'X1'
      tags: 'compile-only, negative'

    - decl: |-
          type F1 = (p: string) => string
          type F2 = (p: number) => string
      code: |-
          let v: F1|F2|string|null = null
          v = (p: number): string => { return '2' + p }
          if (!res) {
              res = v(42) == '242'
          }
