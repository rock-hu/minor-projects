# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
    # var init
    - code: |-
          let v: string|number|boolean = '42.0'
          res = v + 1 == '42.01'

    # var assignment
    - code: |-
          let v: number|string|boolean = true
          v = '42.0'
          res = v + 1 == '42.01'

    # function argument
    - code: |-
          let v: number|string|boolean = 0.0
          res = foo(v = '42.0') == '42.01'
      decl: |-
          function foo(p: string): string {
              return p + 1
          }

    # constructor argument
    - decl: |-
          class A {
              fld: string
              constructor(p: string) {
                  this.fld = p + 1
              }
          }
      code: |-
          let v: number|string|boolean = 0.0
          let a: A = new A(v = '42.0')
          res = a.fld == '42.01'

    # method argument
    - decl: |-
          class A {
              meth(p: string): string {
                  return p + 1
              }
          }
      code: |-
          let v: number|string|boolean = false
          let a: A = new A()
          v = '42.0'
          res = a.meth(v) == '42.01'

    # class field
    - decl: |-
          class A {
              fld: number|string|boolean = false
              constructor(p: number) {
                  this.fld = p
                  this.fld = this.fld / 2
              }
          }
      code: |-
          let a: A = new A(42.0)
          res = a.fld as number == 21.0
      tags: 'compile-only, negative'

    - decl: |-
          class A {
              fld: number|string|boolean = false
              constructor(p: string) {
                  this.fld = p
                  this.fld = this.fld + this.fld
              }
          }
      code: |-
          let a: A = new A('1')
          res = a.fld as string == '11'
      tags: 'compile-only, negative'

    - decl: |-
          class A {
              fld: number|string|boolean = false
              meth(p: number) {
                  this.fld = p
                  this.fld = this.fld / 2
              }
          }
      code: |-
          let a: A = new A()
          a.meth(42.0)
          res = a.fld as number == 21.0
      tags: 'compile-only, negative'

    - decl: |-
          class A {
              fld: number|string|boolean = false
              meth(p: string) {
                  this.fld = p
                  this.fld = this.fld + this.fld
              }
          }
      code: |-
          let a: A = new A()
          a.meth('1')
          res = a.fld as string == '11'
      tags: 'compile-only, negative'

    # array literal element
    - code: |-
          let v: number|string|boolean = 0.0
          v = '42.0'
          let arr: string[] = [v, v + 1, v + 2]
          res = arr[0] == '42.0' && arr[1] == '42.01' && arr[2] == '42.02'

    # object literal
    - decl: |-
          class A {
              f: string = ''
          }
      code: |-
          let v: number|string|boolean = 0.0
          v = '42.0'
          let a: A = { f: v + 1 }
          res = a.f == '42.01'

    # lambda argument
    - code: |-
          let v: number|string|boolean = true
          res = ((p: string): string => { return p + 1 })(v = '42.0') == '42.01'
