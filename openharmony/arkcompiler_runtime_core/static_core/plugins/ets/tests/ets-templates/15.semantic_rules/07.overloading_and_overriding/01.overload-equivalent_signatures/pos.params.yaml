# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # functions
  - decl: |-
      function foo(a: int) {}
      function foo(a: Int) {}
    tags: [compile-only]

  - decl: |-
      function foo(a: Int) {}
      function foo(a: Int|null) {}
    tags: [compile-only]

  - decl: |-
      class X {}
      class Y {}
      class Z {}
      function foo<T extends X, U extends Y, V extends Z>(t: T, u: U, v: V): T { return t; }
      function foo<T extends X, U extends Y>(t: T, u: U, v: Object): T { return t; }
      function foo<T extends X>(t: T, u: Object, v: Object): T { return t; }
      function foo(t: Object, u: Object, v: Object): Object { return new Object(); }
    tags: [compile-only]

  - decl: |-  
      class Z {}
      function foo<X extends Z>(a: int, b: long, c: double, d: X): X { return d; }
      function bar<X extends Z>(a: int, b: long, c: double, d: X): X { return d; }
    tags: [compile-only]

  - decl: |-
      class Z {}
      function foo<X extends Z>(a: int, b: long, c: double, d: X): X { return d; }
      function foo<X extends Z>(a: long, b: long, c: double, d: X): X { return d; }
    tags: [compile-only]

  - decl: |-
      function foo(a: int[]): void {}
      function foo(...a: int[]): void {}
    tags: [compile-only]

  - decl: |-
      enum Color { Red, Green, Blue }
      enum Size { S, M, L, XL }
      function foo(a: Color): Color { return a; }
      function foo(a: Size): Size { return a; }
    tags: [compile-only]

  # class methods
  - decl: |-
      class X {}
      class Y {}
      class A<T extends X, U extends Y> {
          public met(a: T) {}
          public met(a: U) {}
      }
    tags: [compile-only]

  - decl: |-
      class X {}
      class Y {}
      class A<T extends X, U extends Y> {
          public met(a: T, b: U) {}
          public met(a: U, b: T) {}
      }
    tags: [compile-only]

  - decl: |-
      class X {}
      class Y {}
      class A<T extends X, U extends Y> {
          public met(a: T): T|null { return null; }
          public met(a: U): U|null { return null; }
      }
    tags: [compile-only]

  - decl: |-
      class A {
          public met(a: FixedArray<Object>) {}
          public met(a: FixedArray<FixedArray<Object>>) {}
      }
    tags: [compile-only]

  # class constructors
  - decl: |-
      class X {}
      class Y {}
      class A<T extends X, U extends Y> {
          constructor (a: T) {}
          constructor (b: U) {}
      }
    tags: [compile-only]

  - decl: |-
      class X {}
      class Y {}
      class A<T extends X, U extends Y> {
          constructor (a: T, b: U) {}
          constructor (b: U, a: T) {}
      }
    tags: [compile-only]

  - decl: |-
      class A {
          public constructor (...a: int[]) {}
          public constructor (a: int) {}
      }
    tags: [compile-only]
