# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # ARRAY, PARAMETER
  - base: |-
      foo(i: Base[]) {
          res = 1
      }
    derived: |-
      override foo(i: Base[]) {
          res = 2
      }
    call: |-
      new Derived().foo([new Base()])
      assertEQ( res, 2 )
      new Derived().foo([new Derived()])
      assertEQ( res, 2 )
    params: override-compatible with itself parameter

  - base: |-
      foo(i: Base[]) {
          res = 1
      }
    derived: |-
      foo(i: Derived[]) {
          res = 2
      }
    call: |-
      new Derived().foo([new Base()])
      assertEQ( res, 2 )
      new Derived().foo([new Derived()])
      assertEQ( res, 2 )
    params: override-compatible parameter (covariance)

  - base: |-
      foo(i: Derived[]) {
          res = 1
      }
    derived: |-
      foo(i: Base[]) {
          res = 2
      }
    call: |-
      new Derived().foo([new Base()])
      assertEQ( res, 2 )
      new Derived().foo([new Derived()])
      assertEQ( res, 1 )
    params: override-incompatible parameter (contravariance), not overload-equivalent

  - tags: 'negative, compile-only'
    base: |-
      foo(i: Derived[]) {
          res = 1
      }
    derived: |-
      override foo(i: Base[]) {
          res = 2
      }
    params: override-incompatible parameter (contravariance)

  # ARRAY, RETURN VALUE
  - base: |-
      foo(): Base[] {
          res = 1
          return [new Base()]
      }
      bar(): Derived[] {
          res = 1
          return [new Derived()]
      }
    derived: |-
      foo(): Base[] {
          res = 2
          return [new Base()]
      }
      override bar(): Derived[] {
          res = 2
          return [new Derived()]
      }
    call: |-
      new Derived().foo()
      assertEQ( res, 2 )
      new Derived().bar()
      assertEQ( res, 2 )
    params: override-compatible with itself return value

  - base: |-
      foo(): Base[] {
          res = 1
          return [new Base()]
      }
      bar(): Base[] {
          res = 1
          return [new Base()]
      }
    derived: |-
      foo(): Derived[] {
          res = 2
          return [new Derived()]
      }
      override bar(): Derived[] {
          res = 2
          return [new Derived()]
      }
    call: |-
      new Derived().foo()
      assertEQ( res, 2 )
      new Derived().bar()
      assertEQ( res, 2 )
    params: override-compatible return value (covariance)

  - tags: 'negative, compile-only'
    base: |-
      foo(): Derived[] {
          res = 1
          return [new Derived()]
      }
    derived: |-
      override foo(): Base[] {
          res = 2
          return [new Base()]
      }
    params: override-incompatible return value (contravariance)

  - tags: 'negative, compile-only'
    base: |-
      foo(): Derived[] {
          res = 1
          return [new Derived()]
      }
    derived: |-
      foo(): Base[] {
          res = 2
          return [new Base()]
      }
    params: override-incompatible return value (contravariance), overload-equivalent
