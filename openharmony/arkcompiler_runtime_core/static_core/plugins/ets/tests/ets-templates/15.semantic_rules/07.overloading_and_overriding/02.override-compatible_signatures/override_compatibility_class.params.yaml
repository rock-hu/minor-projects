# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # CLASS, PARAMETER
  - base: |-
      foo(i: Derived): void {
          res = 1
      }
    derived: |-
      override foo(i: Base): void {
          res = 2
      }
    call: |-
      new Derived().foo(new Base())
      assertEQ( res, 2 )
      new Derived().foo(new Derived())
      assertEQ( res, 2 )
    doc: Class/Interface type
    params: override-compatible parameter (contravariance)

  - tags: 'negative, compile-only'
    base: |-
      foo(i: Base): void {
          res = 1;
      }
    derived: |-
      override foo(i: Derived): void {
          res = 2;
      }
    doc: Class/Interface type
    params: override-incompatible parameter (covariance)

  - base: |-
      foo(i: Base): void {
          res = 1;
      }
    derived: |-
      foo(i: Derived): void {
          res = 2;
      }
    call: |-
      new Derived().foo(new Base())
      assertEQ( res, 1 )
      new Derived().foo(new Derived())
      assertEQ( res, 2 )
    doc: Class/Interface type
    params: overload-compatible parameter (covariance)

  - base: |-
      foo(i: Base): void {
          res = 1;
      }
    derived: |-
      foo(i: Base): void {
          res = 2;
      }
      foo(i: Derived): void {
          res = 3;
      }
    call: |-
      new Derived().foo(new Base())
      assertEQ( res, 2 )
      new Derived().foo(new Derived())
      assertEQ( res, 3 )
    doc: Class/Interface type
    params: overload-compatible with itself parameter

  # CLASS, RETURN VALUE
  - base: |-
      foo(): Base {
          res = 1;
          return this;
      }
    derived: |-
      override foo(): Derived {
          res = 2;
          return this;
      }
    call: |-
      new Derived().foo();
      assertEQ( res, 2 )
    doc: Class/Interface type
    params: override-compatible return value (covariance)

  - tags: 'negative, compile-only'
    base: |-
      foo(): Derived {
          res = 1;
          return new Derived();
      }
    derived: |-
      override foo(): Base {
          res = 2;
          return this;
      }
    doc: Class/Interface type
    params: override-incompatible return value (contravariance).

  - tags: 'negative, compile-only'
    base: |-
      foo(): Derived {
          res = 1;
          return new Derived();
      }
    derived: |-
      foo(): Base {
          res = 2;
          return this;
      }
    doc: Class/Interface type
    params: override-incompatible return value (contravariance) and overload-equivalent

  - base: |-
      foo(): Base {
          res = 1;
          return this;
      }
      bar(): Derived {
          res = 2;
          return new Derived();
      }
    derived: |-
      foo(): Base {
          res = 3;
          return new Base();
      }
      bar(): Derived {
          res = 4;
          return this;
      }
    call: |-
      new Derived().foo()
      assertEQ( res, 3 )
      new Derived().bar()
      assertEQ( res, 4 )
    doc: Class/Interface type
    params: override-compatible with itself return value

  # INTERFACE, PARAMETER
  - decl: |-
      interface IBase {}
      interface IDerived extends IBase {}
      class A implements IBase {}
      class B implements IDerived {}
    base: |-
      foo(i: IDerived): void {
        res = 1
      }
    derived: |-
      override foo(i: IBase): void {
        res = 2
      }
    call: |-
      new Derived().foo(new A())
      assertEQ( res, 2 )
      new Derived().foo(new B())
      assertEQ( res, 2 )
    doc: Class/Interface type
    params: override-compatible parameter (contravariance)

  - tags: 'negative, compile-only'
    decl: |-
      interface IBase {}
      interface IDerived extends IBase {}
      class A implements IBase {}
      class B implements IDerived {}
    base: |-
      foo(i: IBase): void {
          res = 1;
      }
    derived: |-
      override foo(i: IDerived): void {
          res = 2;
      }
    doc: Class/Interface type
    params: override-incompatible parameter (covariance)

  - decl: |-
      interface IBase {}
      interface IDerived extends IBase {}
      class A implements IBase {}
      class B implements IDerived {}
    base: |-
      foo(i: IBase): void {
          res = 1;
      }
    derived: |-
      foo(i: IDerived): void {
          res = 2;
      }
    call: |-
      new Derived().foo(new A())
      assertEQ( res, 1 )
      new Derived().foo(new B())
      assertEQ( res, 2 )
    doc: Class/Interface type
    params: override-incompatible parameter (covariance), not overload-equivalent

  - decl: |-
      interface IBase {}
      interface IDerived extends IBase {}
      class A implements IBase {}
      class B implements IDerived {}
    base: |-
      foo(i: IBase): void {
          res = 1;
      }
      bar(i: IDerived): void {
          res = 2;
      }
    derived: |-
      foo(i: IBase): void {
          res = 3;
      }
      foo(i: IDerived): void {
          res = 4;
      }
    call: |-
      new Derived().foo(new A())
      assertEQ( res, 3 )
      new Derived().foo(new B())
      assertEQ( res, 4 )
    doc: Class/Interface type
    params: override-compatible with itself parameter

  # INTERFACE, RETURN VALUE
  - decl: |-
      interface IBase {}
      interface IDerived extends IBase {}
      class A implements IBase {}
      class B implements IDerived {}
    base: |-
      foo(): IBase {
          res = 1;
          return new A();
      }
    derived: |-
      override foo(): IDerived {
          res = 2;
          return new B();
      }
    call: |-
      new Derived().foo();
      assertEQ( res, 2 )
    doc: Class/Interface type
    params: override-compatible return value (covariance)

  - tags: 'negative, compile-only'
    decl: |-
      interface IBase {}
      interface IDerived extends IBase {}
      class A implements IBase {}
      class B implements IDerived {}
    base: |-
      foo(): IDerived {
          res = 1;
          return new B();
      }
    derived: |-
      override foo(): IBase {
          res = 2;
          return new A();
      }
    doc: Class/Interface type
    params: override-incompatible return value (contravariance).

  - tags: 'negative, compile-only'
    decl: |-
      interface IBase {}
      interface IDerived extends IBase {}
      class A implements IBase {}
      class B implements IDerived {}
    base: |-
      foo(): IDerived {
          res = 1;
          return new B();
      }
    derived: |-
      foo(): IBase {
          res = 2;
          return new A();
      }
    doc: Class/Interface type
    params: override-incompatible return value (contravariance) and overload-equivalent.

  - decl: |-
      interface IBase {}
      interface IDerived extends IBase {}
      class A implements IBase {}
      class B implements IDerived {}
    base: |-
      foo(): IBase {
          res = 1;
          return new A();
      }
      bar(): IDerived {
          res = 2;
          return new B();
      }
    derived: |-
      foo(): IBase {
          res = 3;
          return new A();
      }
      bar(): IDerived {
          res = 4;
          return new B();
      }
    call: |-
      new Derived().foo()
      assertEQ( res, 3 )
      new Derived().bar()
      assertEQ( res, 4 )
    doc: Class/Interface type
    params: override-compatible with itself return value
