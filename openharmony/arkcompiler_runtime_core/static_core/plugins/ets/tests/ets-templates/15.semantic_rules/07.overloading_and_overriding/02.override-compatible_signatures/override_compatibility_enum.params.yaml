# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # ENUM TYPE, PARAMETER
  - base: |-
      class Base {
          foo(i: SHIPYARD) {
              res = i
          }
      }
    derived: |-
      class Derived extends Base {
          foo(i: HARBOUR) {
              res = i
          }
      }
    call: |-
      new Derived().foo(HARBOUR.Flippers)
      assertEQ( res , 2 )
      new Derived().foo(SHIPYARD.Flippers)
      assertEQ( res , 1 )
    params: enum is not override-compatible, overload is used

  - tags: 'negative, compile-only'
    base: |-
      class Base {
          foo(i: SHIPYARD) {
          }
      }
    derived: |-
      class Derived extends Base {
          override foo(i: HARBOUR) {
          }
      }
    params: enum is not override-compatible

  # TYPE PARAMETER, RETURN VALUE
  - base: |-
      class Base {
          foo(): SHIPYARD {
              return SHIPYARD.Flippers
          }
      }
    derived: |-
      class Derived extends Base {
          foo(): SHIPYARD {
              return SHIPYARD.SwimRing
          }
      }
    call: |-
      assertEQ( new Derived().foo(), SHIPYARD.SwimRing )
      assertEQ( new Base().foo(), SHIPYARD.Flippers )
    params: override-compatible with itself return value (invariance)

  - tags: 'negative, compile-only'
    base: |-
      class Base {
          foo(): SHIPYARD {
              return SHIPYARD.Flippers
          }
      }
    derived: |-
      class Derived extends Base {
          foo(): HARBOUR {
              return HARBOUR.Boat
          }
      }
    params: override-incompatible return value, not overload-equivalent

  - tags: 'negative, compile-only'
    base: |-
      class Base {
          foo(): SHIPYARD {
              return SHIPYARD.Flippers
          }
      }
    derived: |-
      class Derived extends Base {
          override foo(): HARBOUR {
              return HARBOUR.Boat
          }
      }
    params: override-incompatible return value
