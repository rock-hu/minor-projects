# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # FUNCTION, PARAMETER
  - base: |-
      foo( i: (j: Base) => Derived ): void {
          res = 1
      }
    derived: |-
      override foo(i: (j: Base) => Derived): void {
          res = 2
      }
    call: |-
      new Derived().foo( ( i:Base ): Derived => { return new Derived() } )
      assertEQ( res, 2)
    params: override-compatible with itself parameter

  - base: |-
      foo( i: (j: Base) => Derived ): void {
          res = 1
      }
    derived: |-
      override foo(i: (j: Derived) => Derived): void {
          res = 2
      }
    call: |-
      new Derived().foo( ( i:Base ): Derived => { return new Derived() } )
      assertEQ( res, 2)
      new Derived().foo( ( i:Derived ): Derived => { return new Derived() } )
      assertEQ( res, 2)
    params: override-compatible parameter (covariance)

  - base: |-
      foo( i: (j: Base) => Derived ): void {
          res = 1
      }
    derived: |-
      override foo(i: (j: Derived) => Base): void {
          res = 2
      }
    call: |-
      new Derived().foo( ( i:Base ): Derived => { return new Derived() } )
      assertEQ( res, 2)
      new Derived().foo( ( i:Derived ): Derived => { return new Derived() } )
      assertEQ( res, 2)
      new Derived().foo( ( i:Base ): Base => { return new Base() } )
      assertEQ( res, 2)
      new Derived().foo( ( i:Derived ): Base => { return new Base() } )
      assertEQ( res, 2)
    params: override-compatible parameter (covariance)

  - tags: 'negative, compile-only'
    base: |-
      foo( i: (j: Derived) => Base ): void {
          res = 1
      }
    derived: |-
      override foo(i: (j: Base) => Derived): void {
          res = 2
      }
    params: override-incompatible parameter (contravariance)

  - tags: 'negative, compile-only'
    base: |-
      foo( i: (j: Derived) => Base ): void {
          res = 1
      }
    derived: |-
      override foo(i: (j: Base) => Base): void {
          res = 2
      }
    params: override-incompatible parameter (contravariance)

  - tags: 'negative, compile-only'
    base: |-
      foo( i: (j: Derived) => Derived ): void {
          res = 1
      }
    derived: |-
      override foo(i: (j: Base) => Derived): void {
          res = 2
      }
    params: override-incompatible parameter (contravariance)

  - tags: 'compile-only'
    base: |-
      foo( i: (j: Derived) => Derived ): void {
          res = 1
      }
    derived: |-
      foo(i: (j: Base) => Derived): void {
          res = 2
      }
    call: |-
      let func = (j: Base) : Derived => new Derived()
      new Derived().foo(func)
      assertEQ(res, 2)
    params: override-incompatible parameter, overloading is also unavailable

  - tags: 'negative, compile-only'
    base: |-
      foo( i: (j: Derived) => Derived ): void {
          res = 1
      }
    derived: |-
      foo(i: (j: Base) => Derived): void {
          res = 2
      }
      foo(i: (j: Derived) => Base): void {
          res = 2
      }
    params: duplicated function implementation

  # FUNCTION, RETURN VALUE
  - decl: |-
      function fdb(i: Derived): Base {
          return new Base()
      }
    base: |-
      foo(): (i: Derived) => Base {
          res = 1
          return fdb
      }
    derived: |-
      override foo(): (i: Derived) => Base {
          res = 2
          return fdb
      }
    call: |-
      new Derived().foo()
      assertEQ( res, 2)
    params: override-compatible with itself return value

  - tags: 'negative, compile-only'
    decl: |-
      function fdb(i: Derived): Base {
          return new Base()
      }
      function fbb(i: Base): Base {
          return i
      }
    base: |-
      foo(): (i: Base) => Base {
          res = 1
          return fbb
      }
    derived: |-
      foo(): (i: Derived) => Base {
          res = 2
          return fdb
      }
    params: override-incompatible return value (covariance), overload incompatible

  - decl: |-
      function fdb(i: Derived): Base {
          return new Base()
      }
      function fbb(i: Base): Base {
          return i
      }
    base: |-
      foo(): (i: Derived) => Base {
          res = 1
          return fdb
      }
    derived: |-
      override foo(): (i: Base) => Base {
          res = 2
          return fbb
      }
    call: |-
      new Derived().foo()
      assertEQ( res, 2)
    params: override-compatible return value (contravariance)
