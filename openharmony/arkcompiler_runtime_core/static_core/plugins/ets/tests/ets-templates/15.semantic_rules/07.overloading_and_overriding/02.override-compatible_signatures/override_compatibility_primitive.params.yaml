# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # PRIMITIVES, PARAMETER
  - base: |-
      foo(i: number): void {
          res = 1
      }
    derived: |-
      override foo(i: number): void {
          res = 2
      }
    call: |-
      new Derived().foo(1)
      assertEQ( res, 2 )
    params: override-compatible with itself parameter

  - base: |-
      foo(i: number): void {
          res = 1
      }
    derived: |-
      foo(i: long): void {
          res = 2
      }
    call: |-
      new Derived().foo(1 as number)
      assertEQ( res, 1 )
      new Derived().foo(1 as long)
      assertEQ( res, 2 )
    params: override-incompatible parameter, overload-compatible

  - tags: 'negative, compile-only'
    base: |-
      foo(i: number): void {
          res = 1
      }
    derived: |-
      override foo(i: long): void {
          res = 2
      }
    params: override-incompatible parameter (no invariance)

  - tags: 'negative, compile-only'
    base: |-
      foo(i: Number): void {
          res = 1
      }
    derived: |-
      override foo(i: number): void {
          res = 2
      }
    params: override-incompatible parameter

  - tags: 'negative, compile-only'
    base: |-
      foo(i: number): void {
          res = 1
      }
    derived: |-
      override foo(i: Number): void {
          res = 2
      }
    params: override-incompatible parameter

# PRIMITIVES, RETURN VALUE
  - base: |-
      foo(): number {
          res = 1
          return 1.0
      }
    derived: |-
      foo(): number {
          res = 2
          return 1.0
      }
    call: |-
      new Derived().foo()
      assertEQ( res, 2 )
    params: override-compatible return value

  - tags: 'negative, compile-only'
    base: |-
      foo(): number {
          res = 1
          return 1.0
      }
    derived: |-
      override foo(): boolean {
          res = 2
          return true
      }
    params: override-incompatible return value

  - tags: 'negative, compile-only'
    base: |-
      foo(): number {
          res = 1
          return 1.0
      }
    derived: |-
      foo(): Number {
          res = 2
          return new Number()
      }
    params: override-incompatible return value

  - tags: 'negative, compile-only'
    base: |-
      foo(): Number {
          res = 1
          return new Number()
      }
    derived: |-
      foo(): number {
          res = 2
          return 1.0
      }
    params: override-incompatible return value

  - tags: 'negative, compile-only'
    base: |-
      foo(): void {
          res = 1
      }
    derived: |-
      foo(): number {
          res = 2
          return 1.0
      }
    params: override-incompatible return value

  - tags: 'negative, compile-only'
    base: |-
      foo(): number {
          res = 1
          return 1.0
      }
    derived: |-
      foo(): void {
          res = 2
      }
    params: override-incompatible return value
