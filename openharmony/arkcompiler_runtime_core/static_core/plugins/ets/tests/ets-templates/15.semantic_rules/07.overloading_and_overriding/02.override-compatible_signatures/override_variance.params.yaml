# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # CLASS
  # override-compatible argument (contravariance)
  - base: |-
      foo(i: Derived): void {
          res = 1;
      }
    derived: |-
      override foo(i: Base): void {
          res = 2;
      }
    call: new Derived().foo(new Base());
    result: 2

  # override-compatible argument (contravariance)
  - base: |-
      foo(i: Derived): void {
          res = 1;
      }
    derived: |-
      override foo(i: Base): void {
          res = 2;
      }
    call: new Derived().foo(new Derived());
    result: 1

  # override-incompatible argument (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo(i: Base): void {
          res = 1;
      }
    derived: |-
      override foo(i: Derived): void {
          res = 2;
      }
    call: new Derived().foo(new Base());
    result: 1

  # override-compatible return value (covariance)
  - base: |-
      foo(): Base {
          res = 1;
          return this;
      }
    derived: |-
      override foo(): Derived {
          res = 2;
          return this;
      }
    call: new Derived().foo();
    result: 2

  # override-compatible return value (covariance)
  - base: |-
      foo(): Base {
          res = 1;
          return this;
      }
    derived: |-
      override foo(): Base {
          res = 2;
          return this;
      }
    call: new Derived().foo();
    result: 2

  # override-incompatible return value (covariance)
  - tags: 'negative, compile-only'
    base: |-
      foo(): Derived {
          res = 1;
          return new Derived();
      }
    derived: |-
      override foo(): Base {
          res = 2;
          return this;
      }
    call: new Derived().foo();
    result: 2

  # FUNCTION
  # override-compatible argument (invariance)
  - base: |-
      foo( i: (j: Base) => Derived ): void {
          i(new Base());
          res = 1;
      }
    derived: |-
      override foo(i: (j: Base) => Derived): void {
          i(new Base());
          res = 2;
      }
    call: |-
      new Derived().foo( ( i:Base ): Derived => { return i as Derived } );
    result: 2

  # override-compatible argument (covariance)
  - base: |-
      foo( i: (j: Base) => Derived ): void {
          i(new Base());
          res = 1;
      }
    derived: |-
      override foo(i: (j: Derived) => Derived): void {
          i(new Derived());
          res = 2;
      }
    call: |-
      new Derived().foo( ( i:Base ): Derived => { return i as Derived } );
    result: 1

  # override-compatible argument (covariance)
  - base: |-
      foo( i: (j: Base) => Derived ): void {
          i(new Base());
          res = 1;
      }
    derived: |-
      override foo(i: (j: Derived) => Derived): void {
          i(new Derived());
          res = 2;
      }
    call: |-
      new Derived().foo( ( i:Derived ): Derived => { return i } );
    result: 2

  # override-incompatible argument (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: (j: Derived) => Derived ): void {
          i(new Derived());
          res = 1;
      }
    derived: |-
      override foo(i: (j: Base) => Derived): void {
          i(new Base());
          res = 2;
      }
    call: |-
      new Derived().foo( ( i:Base ): Derived => { return i } );
    result: 2

  # override-compatible return value (invariance)
  - base: |-
      foo( i: (j: Base) => Base ): void {
          i(new Base());
          res = 1;
      }
    derived: |-
      override foo(i: (j: Base) => Base): void {
          i(new Base());
          res = 2;
      }
    call: |-
      new Derived().foo( ( i:Base ): Base => { return i } );
    result: 2

  # override-compatible return value (contravariance)
  - base: |-
      foo( i: (j: Base) => Derived ): void {
          i(new Base());
          res = 1;
      }
    derived: |-
      override foo(i: (j: Base) => Base): void {
          i(new Base());
          res = 2;
      }
    call: |-
      new Derived().foo( ( i:Base ): Base => { return i } );
    result: 2

  # override-compatible return value (contravariance)
  - base: |-
      foo( i: (j: Base) => Derived ): void {
          i(new Base());
          res = 1;
      }
    derived: |-
      override foo(i: (j: Base) => Base): void {
          i(new Base());
          res = 2;
      }
    call: |-
      new Derived().foo( ( i:Base ): Derived => { return i as Derived } );
    result: 1

  # override-incompatible return value (covariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: (j: Base) => Base ): void {
          i(new Base());
          res = 1;
      }
    derived: |-
      override foo(i: (j: Base) => Derived): void {
          i(new Base());
          res = 2;
      }
    call: |-
      new Derived().foo( ( i:Base ): Derived => { return i as Derived } );
    result: 2

  # PRIMITIVE TYPE
  # override-compatible argument (invariance)
  - base: |-
      foo( i: number ): void {
          res = 1;
      }
    derived: |-
      override foo(i: number): void {
          res = 2;
      }
    call: new Derived().foo(1);
    result: 2

  # override-compatible argument (invariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: string ): void {
          res = 1;
      }
    derived: |-
      override foo(i: string): void {
          res = 2;
      }
    call: new Derived().foo("some string");
    result: 2

  # override-incompatible argument (covariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: Number ): void {
          res = 1;
      }
    derived: |-
      override foo(i: number): void {
          res = 2;
      }
    call: new Derived().foo(1);
    result: 2

  # override-compatible argument (invariance)
  - base: |-
      foo( i: String ): void {
          res = 1;
      }
    derived: |-
      override foo(i: string): void {
          res = 2;
      }
    call: new Derived().foo("some str");
    result: 2

  # override-incompatible argument (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: number ): void {
          res = 1;
      }
    derived: |-
      override foo(i: Number): void {
          res = 2;
      }
    call: new Derived().foo(1);
    result: 2

  # override-compatible argument (invariance)
  - base: |-
      foo( i: string ): void {
          res = 1;
      }
    derived: |-
      override foo(i: String): void {
          res = 2;
      }
    call: new Derived().foo("some string");
    result: 2

  # override-compatible return value (invariance)
  - base: |-
      foo( i: number ): number {
          res = 1;
          return i;
      }
    derived: |-
      override foo(i: number): number {
          res = 2;
          return i;
      }
    call: new Derived().foo(1);
    result: 2

  # override-incompatible return value (covariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: number ): Number {
          res = 1;
          return i;
      }
    derived: |-
      override foo(i: number): number {
          res = 2;
          return i;
      }
    call: new Derived().foo(1);
    result: 2

  # override-incompatible return value (covariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: number ): String {
          res = 1;
          return i;
      }
    derived: |-
      override foo(i: number): string {
          res = 2;
          return i;
      }
    call: new Derived().foo(1);
    result: 2

  # override-incompatible return value (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: number ): number {
          res = 1;
          return i;
      }
    derived: |-
      override foo(i: number): Number {
          res = 2;
          return i;
      }
    call: new Derived().foo(1);
    result: 2

  # override-incompatible return value (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: number ): number {
          res = 1;
          return i;
      }
    derived: |-
      override foo(i: number): void {
          res = 2;
          return i;
      }
    call: new Derived().foo(1);
    result: 2

  # override-incompatible return value (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: number ): string {
          res = 1;
          return i;
      }
    derived: |-
      override foo(i: number): String {
          res = 2;
          return i;
      }
    call: new Derived().foo(1);
    result: 2

  # ARRAY TYPE
  # override-compatible argument (invariance)
  - base: |-
      foo( i: Base[] ): void {
          res = 1;
      }
    derived: |-
      override foo(i: Base[]): void {
          res = 2;
      }
    call: new Derived().foo(new Base[2]);
    result: 2

  # override-incompatible argument (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: Base[] ): void {
          res = 1;
      }
    derived: |-
      override foo(i: Derived[]): void {
          res = 2;
      }
    call: new Derived().foo(new Base[2]);
    result: 2

  # override-incompatible argument (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo( i: Base[] ): void {
          res = 1;
      }
    derived: |-
      override foo(i: Derived[]): void {
          res = 2;
      }
    call: new Derived().foo(new Derived[2]);
    result: 2

  # override-compatible argument (covariance)
  - base: |-
      foo( i: Derived[] ): void {
          res = 1;
      }
    derived: |-
      override foo(i: Base[]): void {
          res = 2;
      }
    call: new Derived().foo(new Derived[2]);
    result: 1

  # override-compatible argument (covariance)
  - base: |-
      foo( i: Derived[] ): void {
          res = 1;
      }
    derived: |-
      override foo(i: Base[]): void {
          res = 2;
      }
    call: new Derived().foo(new Base[2]);
    result: 2

  # override-compatible return value (invariance)
  - base: |-
      foo(): Base[] {
          res = 1;
          return new Base[2];
      }
    derived: |-
      override foo(): Base[] {
          res = 2;
          return new Base[2];
      }
    call: new Derived().foo();
    result: 2

  # override-incompatible return value (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo(): Derived[] {
          res = 1;
          return new Derived[2];
      }
    derived: |-
      override foo(): Base[] {
          res = 2;
          return new Base[2];
      }
    call: new Derived().foo();
    result: 2

  # override-compatible return value (covariance)
  - base: |-
      foo(): Base[] {
          res = 1;
          return new Base[2];
      }
    derived: |-
      override foo(): Derived[] {
          res = 2;
          return new Derived[2];
      }
    call: new Derived().foo();
    result: 2

  # TUPLE TYPE
  # override-compatible argument (invariance)
  - base: |-
      foo(i: [Base, Base]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Base, Base]): void {
          res = 2;
      }
    call: |-
      let i: [Base, Base] =  [ new Base(), new Base()];
      new Derived().foo(i);
    result: 2

  # override-compatible argument (invariance)
  - base: |-
      foo(i: [Base, Derived]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Base, Derived]): void {
          res = 2;
      }
    call: |-
      let i: [Base, Derived] =  [ new Base(), new Derived()];
      new Derived().foo(i);
    result: 2

  # override-compatible argument (invariance)
  - base: |-
      foo(i: [Derived, Base]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Derived, Base]): void {
          res = 2;
      }
    call: |-
      let i: [Derived, Base] =  [ new Derived(), new Base()];
      new Derived().foo(i);
    result: 2

  # override-incompatible argument (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo(i: [Derived, Derived]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Derived, Base]): void {
          res = 2;
      }
    call: |-
      let i: [Derived, Base] =  [ new Derived(), new Base()];
      new Derived().foo(i);
    result: 2

  # override-incompatible argument (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo(i: [Derived, Derived]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Base, Derived]): void {
          res = 2;
      }
    call: |-
      let i: [Base, Derived] =  [ new Base(), new Derived()];
      new Derived().foo(i);
    result: 2

  # override-incompatible argument (contravariance)
  - tags: 'negative, compile-only'
    base: |-
      foo(i: [Derived, Derived]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Base, Base]): void {
          res = 2;
      }
    call: |-
      let i: [Base, Base] =  [ new Base(), new Base()];
      new Derived().foo(i);
    result: 2

  # override-compatible argument (covariance)
  - base: |-
      foo(i: [Base, Base]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Derived, Derived]): void {
          res = 2;
      }
    call: |-
      let i: [Derived, Derived] =  [ new Derived(), new Derived()];
      new Derived().foo(i);
    result: 2

  # override-compatible argument (covariance)
  - base: |-
      foo(i: [Base, Base]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Derived, Derived]): void {
          res = 2;
      }
    call: |-
      let i: [Base, Base] =  [ new Base(), new Base()];
      new Derived().foo(i);
    result: 1

  # override-compatible argument (covariance)
  - base: |-
      foo(i: [Base, Base]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Derived, Base]): void {
          res = 2;
      }
    call: |-
      let i: [Derived, Base] =  [ new Derived(), new Base()];
      new Derived().foo(i);
    result: 2

  # override-compatible argument (covariance)
  - base: |-
      foo(i: [Base, Base]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Base, Derived]): void {
          res = 2;
      }
    call: |-
      let i: [Base, Derived] =  [ new Base(), new Derived()];
      new Derived().foo(i);
    result: 2

  # override-compatible return value (invariance)
  - base: |-
      foo(): [Base, Base] {
          res = 1;  
          return [ new Base(), new Base()];
      }
    derived: |-
      override foo(): [Base, Base] {
          res = 2;  
          return [ new Base(), new Base()];
      }
    call: new Derived().foo();
    result: 2

  # override-compatible return value (invariance)
  - base: |-
      foo(): [Base, Derived] {
          res = 1;  
          return [ new Base(), new Derived()];
      }
    derived: |-
      override foo(): [Base, Derived] {
          res = 2;  
          return [ new Base(), new Derived()];
      }
    call: new Derived().foo();
    result: 2

  # override-incompatible return value (contravariance)
    base: |-
      foo(): [Derived, Base] {
          res = 1;  
          return [ new Derived(), new Base()];
      }
    derived: |-
      override foo(): [Base, Base] {
          res = 2;  
          return [ new Base(), new Base()];
      }
    call: new Derived().foo();
    result: 2

  # override-incompatible return value (contravariance)
    base: |-
      foo(): [Base, Derived] {
          res = 1;  
          return [ new Base(), new Derived()];
      }
    derived: |-
      override foo(): [Base, Base] {
          res = 2;  
          return [ new Base(), new Base()];
      }
    call: new Derived().foo();
    result: 2

  # override-compatible return value (covariance)
  - base: |-
      foo(): [Base, Base] {
          res = 1;  
          return [ new Base(), new Base()];
      }
    derived: |-
      override foo(): [Derived, Derived] {
          res = 2;  
          return [ new Derived(), new Derived()];
      }
    call: new Derived().foo();
    result: 2

  # override-compatible return value (covariance)
  - base: |-
      foo(): [Base, Base] {
          res = 1;  
          return [ new Base(), new Base()];
      }
    derived: |-
      override foo(): [Derived, Base] {
          res = 2;  
          return [ new Derived(), new Base()];
      } 
    call:  new Derived().foo();
    result: 2

  # override-compatible return value (covariance)
  - base: |-
      foo(): [Base, Base] {
          res = 1;  
          return [ new Base(), new Base()];
      }
    derived: |-
      override foo(): [Base, Derived] {
          res = 2;  
          return [ new Base(), new Derived()];
      } 
    call:  new Derived().foo();
    result: 2