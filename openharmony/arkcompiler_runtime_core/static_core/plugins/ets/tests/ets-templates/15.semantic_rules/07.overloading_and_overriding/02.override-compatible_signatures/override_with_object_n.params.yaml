# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:

  # override-compatible argument (covariance)
  - base: |-
      foo(i: [Object, Object]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Object, Base]): void {
          res = 2;
      }
    call: |-
      let i: [Base, Base] =  [ new Base(), new Base()];
      new Derived().foo(i);
    result: 2

# override-compatible argument (covariance)
  - base: |-
      foo(i: [Object, Object]): void {
          res = 1;
      }
    derived: |-
      override foo(i: [Object, Base]): void {
          res = 2;
      }
    call: |-
      let i: [Base, Object] =  [ new Base(), new Object()];
      new Derived().foo(i);
    result: 2

  # override-incompatible return value (contravariance)
    base: |-
      foo(): [Base, Object] {
          res = 1;  
          return [ new Base(), new Object()];
      }
    derived: |-
      override foo(): [Object, Object] {
          res = 2;  
          return [ new Object(), new Object()];
      }
    call: new Derived().foo();
    result: 2

  # override-incompatible return value (contravariance)
    base: |-
      foo(): [Base, Base] {
          res = 1;  
          return [ new Base(), new Object()];
      }
    derived: |-
      override foo(): [Object, Object] {
          res = 2;  
          return [ new Object(), new Object()];
      }
    call: new Derived().foo();
    result: 2

