# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - doc: Override as number of type parameters is the same
      decl: |-
          class A {}
          class B {}
          interface I {}
          class C implements I {}
          class Base<T,S> {
              foo(i: T, j: S) {
                res == 11;
              }

              static foo(i: T, j: S) {
                res == 12;
              }
          }
          class Derived<T,S> extends Base<T,S> {
              foo(i: T, j: S) {
                res == 21;
              }

              static foo(i: T, j: S) {
                res == 22;
              }
          }
      use: |-
          new Derived<A, B>().foo(new A(), new B());
          assert(res == 21);
          new Derived<B, I>().foo(new B(), new C());
          assert(res == 21);
          Derived.foo(new Number(), new String());
          assert(res == 22);

    - doc: Override as type parameter of derived class function is contravariant to those used in base class
      decl: |-
          class A {}
          class B extends A {}
          class Base {
              foo(i: B) {
                res == 11;
              }

              static foo(i: B) {
                res == 12;
              }
          }
          class Derived extends Base {
              foo(i: B) {
                res == 21;
              }

              static foo(i: B) {
                res == 22;
              }
          }
      use: |-
          new Derived().foo(new A());
          assert(res == 21);
          new Derived().foo(new B());
          assert(res == 21);
          Derived.foo(new A());
          assert(res == 22);
          Derived.foo(new B());
          assert(res == 22);

    - doc: Override as type parameter of derived class function is invariant to those used in base class
      decl: |-
          interface I {}
          class A implements I {}
          class Base {
              foo(i: I) {
                res == 11;
              }

              static foo(i: I) {
                res == 12;
              }
          }
          class Derived extends Base {
              foo(i: I) {
                res == 21;
              }

              static foo(i: I) {
                res == 22;
              }
          }
      use: |-
          new Derived().foo(new A());
          assert(res == 21);
          let i: I = new A();
          new Derived().foo(i);
          assert(res == 21);
          Derived.foo(new A());
          assert(res == 22);
          Derived.foo(i);
          assert(res == 22);

    - doc: Overload as type parameter of derived class function is covariant to those used in base class
      decl: |-
          interface I {}
          class A implements I {}
          class Base {
              foo(i: A) {
                res == 11;
              }

              static foo(i: A) {
                res == 12;
              }
          }
          class Derived extends Base {
              foo(i: I) {
                res == 21;
              }

              static foo(i: I) {
                res == 22;
              }
          }
      use: |-
          let i: I = new A();
          new Derived().foo(i);
          assert(res == 21);
          new Derived().foo(new A());
          assert(res == 11);
          Derived.foo(i);
          assert(res == 22);
          Derived.foo(new A());
          assert(res == 12);

    - doc: Overload due to the different number of type parameters
      decl: |-
          class A {}
          class B extends A {}
          interface I {}
          class Base<T,S> {
              foo(i: T, j: S) {
                res == 11;
              }

              static foo(i: T, j: S) {
                res == 12;
              }
          }
          class Derived<T,S> extends Base<T,S> {
              foo(i: T) {
                res == 21;
              }

              static foo(i: T) {
                res == 22;
              }
          }
      use: |-
          new Derived<A, B>().foo(new A(), new B());
          assert(res == 11);
          new Derived<A, B>().foo(new A());
          assert(res == 21);
          Derived<A, B>.foo(new A(), new B());
          assert(res == 11);
          Derived<A, B>.foo(new A());
          assert(res == 22);

    - doc: |-
          Override failed due to different return value types.
          Methods are overload-equivalent, so cannot be overloaded.
      tags: compile-only, negative
      decl: |-
          class A {}
          class B extends A {}
          class Base<T,S> {
              foo(i: T, j: S) {
                res == 11;
              }
          }
          class Derived<T,S> extends Base<T,S> {
              foo(i: T, j: S): int {
                res == 21;
                return 1;
              }
          }
      use: |-
          new Derived<A, B>();

    - doc: |-
          Base method is overridden as B covariant to A.
      decl: |-
          class A {}
          class B extends A {}
          class Base<T, S> {
              foo(i: T, j: S): A {
                res == 11;
                return new A();
              }
          }
          class Derived<T, S> extends Base<T, S> {
              foo(i: T, j: S): B {
                res == 21;
                return new B();
              }
          }
      use: |-
          new Derived<Number, String>().foo(new Number(), new String());
          assert(res == 21);

    - doc: |-
          Base method is overridden as A invariant to A.
      decl: |-
          class A {}
          class B extends A {}
          class Base<T,S> {
              foo(i: T, j: S): A {
                res == 11;
                return new A();
              }
          }
          class Derived<T,S> extends Base<T,S> {
              foo(i: T, j: S): A {
                res == 21;
                return new A();
              }
          }
      use: |-
          new Derived<A,B>().foo(new A(), new B());
          assert(res == 21);

    - doc: |-
          Override failed as A contravariant to B.
          Methods are overload-equivalent, so cannot be overloaded.
      tags: compile-only, negative
      decl: |-
          class A {}
          class B extends A {}
          class Base<T, S> {
              foo(i: T, j: S): B {
                res == 11;
                return new B();
              }
          }
          class Derived<T, S> extends Base<T, S> {
              foo(i: T, j: S): A {
                res == 21;
                return new A();
              }
          }
      use: |-
          new Derived<Number, String>();

    - doc: |-
          Static methods are overload-equivalent, base method gets hidden
      decl: |-
          class A {}
          class B extends A {}
          class Base<T,S> {
              static foo(i: T, j: S): int {
                res == 11;
                return 1;
              }
          }
          class Derived<T,S> extends Base<T,S> {
              static foo(i: S, j: T): float {
                res == 21;
                return 1.1 as float;
              }
          }
      use: |-
          Derived<A,B>.foo(new A(), new B());
          assert(res == 21);

    # Tuple
    - doc: |-
          Overloading instance method having arguments of tuple with primitives
      decl: |-
          type TPL_BF = [boolean, float];
          type TPL_FB = [float, boolean];
          
          class Base {
              foo(i: TPL_BF) { res = 11;}
          }
          
          class Derived extends Base {
              foo(i: TPL_FB) { res = 21;}
          }
      use: |-
          let a = new Derived();
          let tpl1: TPL_BF = [ true, 1.1 as float];
          let tpl2: TPL_FB = [ 1.1 as float, true];
          a.foo(tpl1);
          assert(res == 11);
          a.foo(tpl2);
          assert(res == 21);

    - doc: |-
          Overloading instance method having arguments of tuple with reference types.
      decl: |-
          class C {}
          class D extends C {}
          class E extends D {}

          type TPL_CE = [C, E];
          type TPL_EC = [E, C];

          class Base {
              foo(i: TPL_CE) { res = 11;}
          }

          class Derived extends Base {
              foo(i: TPL_EC) { res = 21;}
          }
      use: |-
          let a = new Derived();
          let tpl1: TPL_CE = [ new C(), new E() ];
          let tpl2: TPL_EC = [ new E(), new C() ];
          a.foo(tpl1);
          assert(res == 11);
          a.foo(tpl2);
          assert(res == 21);

    - doc: |-
          Overriding instance method having arguments of tuple with covariant reference types.
          Overloading instance method having arguments of tuple with covariant reference types but different number of elements.
      decl: |-
          class C {}
          class D extends C {}
          class E extends D {}

          type TPL_CD = [C, D];
          type TPL_DE = [D, E];
          type TPL_CE = [C, E];
          type TPL_CDE = [C, D, E];

          class Base {
              foo(i: TPL_CD) { res = 11;}
          }

          class Derived extends Base {
              foo(i: TPL_DE) { res = 21;}
              foo(i: TPL_CDE) { res = 22;}
          }
      use: |-
          let a = new Derived();
          let tpl1: TPL_CD = [ new C(), new D() ];
          let tpl2: TPL_DE = [ new D(), new E() ];
          let tpl3: TPL_CDE = [ new C(), new D(), new E() ];
          a.foo(tpl1);
          assert(res == 22);
          a.foo(tpl2);
          assert(res == 22);
          a.foo(tpl3);
          assert(res == 23);
