# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: |-
      constructor() { res = 21;}
    use: |-
      new Derived<Number>();
      assertEQ( res, 21 );

  - decl: |-
      constructor() {
        super();
        res += 20;
      }
    use: |-
      new Derived<Number>();
      assertEQ( res, 21 );

  - decl: |-
      constructor() { 
        super(1.1 as number);
        res += 20;
      }
    use: |-
      new Derived<Number>();
      assertEQ( res, 22 );

  - decl: |-
      constructor() { 
        super("some string");
        res += 20;
      }
    use: |-
      new Derived<Number>();
      assertEQ( res, 23 );

  - decl: |-
      constructor(i: number) { res = 21; }
    use: |-
      new Derived<Number>(1.1 as number);
      assertEQ( res, 21 );

  - decl: |-
      constructor(i: number) { super();}
    use: |-
      new Derived<Number>(1.1 as number);
      assertEQ( res, 1 );

  - decl: |-
      constructor(i: number) { super(i);}
    use: |-
      new Derived<Number>(1.1 as number);
      assertEQ( res, 2 );

  - decl: |-
      constructor(i: string) { res = 21;}
    use: |-
      new Derived<Number>("some string");
      assertEQ( res, 21 );

  - tags: negative, compile-only
    decl: |-
      constructor() {}
    use: |-
      new Derived<Number>("some string");

  - tags: negative, compile-only
    use: |-
      new Derived<Number>("some string");

  - tags: negative, compile-only
    use: |-
      new Derived<Number>(new Number());

  - decl: |-
      constructor(i: Number) { res = 24;}
    use: |-
      new Derived<Number>(new Number());
      assertEQ( res, 24 );

  - tags: negative, compile-only
    use: |-
      let a: byte[] = [1 as byte, 2 as byte];
      new Derived<Number>(a);

  - decl: |-
      constructor(i: byte[]) { res = 25;}
    use: |-
      let a: byte[] = [1 as byte, 2 as byte];
      new Derived<Number>(a);
      assertEQ( res, 25 );

  - tags: negative, compile-only
    use: |-
      let a: TPL = [ false, 1.2];
      new Derived<Number>(a);

  - decl: |-
      constructor(i: TPL) { res = 26;}
    use: |-
      let a: TPL = [ false, 1.2];
      new Derived<Number>(a);
      assertEQ( res, 26 );

  - tags: negative, compile-only
    use: |-
      new Derived<Number>( () => { return true; } );

  - decl: |-
      constructor(i: BoolFun) { res = 27;}
    use: |-
      new Derived<Number>( () => { return true; } );
      assertEQ( res, 27 );

  - tags: negative, compile-only
    use: |-
      new Derived<Number>( undefined );

  - decl: |-
      constructor(i: undefined|Number|null) { res = 28;}
    use: |-
      new Derived<Number>( undefined );
      assertEQ( res, 28 );

  - tags: negative, compile-only
    use: |-
      new Derived<Number>( null );

  - decl: |-
      constructor(i: null|undefined|Number) { res = 28;}
    use: |-
      new Derived<Number>( null );
      assertEQ( res, 28 );

  - tags: negative, compile-only
    use: |-
      new Derived<Number>( new Gen<Byte>() );

  - decl: |-
      constructor(i: Gen<T>) { res = 29;}
    use: |-
      new Derived<Byte>( new Gen<Byte>() );
      assertEQ( res, 29 );
