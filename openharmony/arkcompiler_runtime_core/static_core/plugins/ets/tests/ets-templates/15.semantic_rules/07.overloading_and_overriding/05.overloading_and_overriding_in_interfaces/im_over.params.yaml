# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          // overload-equivalent signatures
          interface I {
              meth(p: number)
              meth(d: double)
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          type J = I
          // overload-equivalent signatures
          interface I {
              meth(p: I)
              meth(d: J)
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          // overload-equivalent signatures
          interface I {
              meth(p: number|string|undefined)
              meth(d: string|number|undefined)
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          // primitives and boxed
          interface J {
              meth(p: Byte): int
              meth(p: Int): int
              meth(p: long): int
              meth(p: Long): int
              meth(p: char): int
              meth(p: Char): int
              meth(p: boolean): int
              meth(p: short): int
              meth(p: double): int
              meth(p: Object): int
          }
          interface I extends J {
              meth(p: byte): int
              meth(p: Byte): int
              meth(p: Short): int
              meth(p: int): int
              meth(p: Boolean): int
              meth(p: float): int
              meth(p: Float): int
              meth(p: double): int
              meth(p: Double): int
          }
          class A implements I {
              meth(p: Object): int { return -1 } // should never be called
              meth(p: byte): int { return 1 }
              meth(p: Byte): int { return 11 }
              meth(p: short): int { return 2 }
              meth(p: Short): int { return 12 }
              meth(p: int): int { return 3 }
              meth(p: Int): int { return 13 }
              meth(p: long): int { return 4 }
              meth(p: Long): int { return 14 }
              meth(p: char): int { return 6 }
              meth(p: Char): int { return 16 }
              meth(p: boolean): int { return 7 }
              meth(p: Boolean): int { return 17 }
              meth(p: float): int { return 8 }
              meth(p: Float): int { return 18 }
              meth(p: double): int { return 9 }
              meth(p: Double): int { return 19 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth(new Byte(-1 as byte)), 11)
          assertEQ( i.meth(new Short(-1 as short)), 12)
          assertEQ( i.meth(new Int(-1 as int)), 13)
          assertEQ( i.meth(new Long(-1 as long)), 14)
          assertEQ( i.meth(new Char(c'A')), 16)
          assertEQ( i.meth(new Boolean(false)), 17)
          assertEQ( i.meth(new Float(3.14 as float)), 18)
          assertEQ( i.meth(new Double(3.14)), 19)
          assertEQ( i.meth(-1 as long), 4)
          assertEQ( i.meth(-1 as int), 3)
          assertEQ( i.meth(-1 as short), 2)
          assertEQ( i.meth(-1 as byte), 1)
          assertEQ( i.meth(c'A'), 6)
          assertEQ( i.meth(false), 7)
          assertEQ( i.meth(3.14), 9)
          assertEQ( i.meth(3.14 as float), 8)

    - decl: |-
          // primitives and boxed, with default methods
          interface I {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: byte): int { return 1 }
              meth(p: Byte): int { return 11 }
              meth(p: short): int { return 2 }
              meth(p: Short): int { return 12 }
              meth(p: int): int { return 3 }
              meth(p: Int): int { return 13 }
              meth(p: long): int { return 4 }
              meth(p: Long): int { return 14 }
              meth(p: char): int { return 6 }
              meth(p: Char): int { return 16 }
              meth(p: boolean): int { return 7 }
              meth(p: Boolean): int { return 17 }
              meth(p: float): int { return 8 }
              meth(p: Float): int { return 18 }
              meth(p: double): int { return 9 }
              meth(p: Double): int { return 19 }
          }
          class A implements I {}
      use: |-
          let i: I = new A()
          assertEQ( i.meth(new Byte(-1 as byte)), 11)
          assertEQ( i.meth(new Short(-1 as short)), 12)
          assertEQ( i.meth(new Int(-1 as int)), 13)
          assertEQ( i.meth(new Long(-1 as long)), 14)
          assertEQ( i.meth(new Char(c'A')), 16)
          assertEQ( i.meth(new Boolean(false)), 17)
          assertEQ( i.meth(new Float(3.14 as float)), 18)
          assertEQ( i.meth(new Double(3.14)), 19)
          assertEQ( i.meth(-1 as long), 4)
          assertEQ( i.meth(-1 as int), 3)
          assertEQ( i.meth(-1 as short), 2)
          assertEQ( i.meth(-1 as byte), 1)
          assertEQ( i.meth(c'A'), 6)
          assertEQ( i.meth(false), 7)
          assertEQ( i.meth(3.14), 9)
          assertEQ( i.meth(3.14 as float), 8)

    - decl: |-
          // primitives and boxed, with overridden default methods
          interface I {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: byte): int { return 91 }
              meth(p: Byte): int { return 911 }
              meth(p: short): int { return 92 }
              meth(p: Short): int { return 912 }
              meth(p: int): int { return 93 }
              meth(p: Int): int { return 913 }
              meth(p: long): int { return 94 }
              meth(p: Long): int { return 914 }
              meth(p: char): int { return 96 }
              meth(p: Char): int { return 916 }
              meth(p: boolean): int { return 97 }
              meth(p: Boolean): int { return 917 }
              meth(p: float): int { return 98 }
              meth(p: Float): int { return 918 }
              meth(p: double): int { return 99 }
              meth(p: Double): int { return 919 }
          }
          class A implements I {
              meth(p: byte): int { return 1 }
              meth(p: Byte): int { return 11 }
              meth(p: short): int { return 2 }
              meth(p: Short): int { return 12 }
              meth(p: int): int { return 3 }
              meth(p: Int): int { return 13 }
              meth(p: long): int { return 4 }
              meth(p: Long): int { return 14 }
              meth(p: char): int { return 6 }
              meth(p: Char): int { return 16 }
              meth(p: boolean): int { return 7 }
              meth(p: Boolean): int { return 17 }
              meth(p: float): int { return 8 }
              meth(p: Float): int { return 18 }
              meth(p: double): int { return 9 }
              meth(p: Double): int { return 19 }
              meth(p: Object): int { return 999 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth(new Byte(-1 as byte)), 11)
          assertEQ( i.meth(new Short(-1 as short)), 12)
          assertEQ( i.meth(new Int(-1 as int)), 13)
          assertEQ( i.meth(new Long(-1 as long)), 14)
          assertEQ( i.meth(new Char(c'A')), 16)
          assertEQ( i.meth(new Boolean(false)), 17)
          assertEQ( i.meth(new Float(3.14 as float)), 18)
          assertEQ( i.meth(new Double(3.14)), 19)
          assertEQ( i.meth(-1 as long), 4)
          assertEQ( i.meth(-1 as int), 3)
          assertEQ( i.meth(-1 as short), 2)
          assertEQ( i.meth(-1 as byte), 1)
          assertEQ( i.meth(c'A'), 6)
          assertEQ( i.meth(false), 7)
          assertEQ( i.meth(3.14), 9)
          assertEQ( i.meth(3.14 as float), 8)

    - decl: |-
          // enums
          enum Color { Red, Green=82, Blue }
          enum Size { S="small", M="medium", L="large" }
          interface J {
              meth(p: Color): int
              meth(p: Size): int
              meth(p: string): int
              meth(p: Object): int
          }
          interface I extends J {
              meth(p: int): int
              meth(p: Size): int
              meth(p: string): int
              meth(p: Object): int
          }
          class A implements I {
              meth(p: Object): int { return -1 } // should never be called
              meth(p: Color): int { return 3 }
              meth(p: int): int { return 1 }
              meth(p: Size): int { return 4 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth(-1), 1)
          assertEQ( i.meth(Color.Red), 3)
          assertEQ( i.meth(-2 as short), 1)
          assertEQ( i.meth("abc"), 2)
          assertEQ( i.meth(Size.L), 4)
          assertEQ( i.meth(42 as byte), 1)

    - decl: |-
          // enums, with default methods
          enum Color { Red, Green=82, Blue }
          enum Size { S="small", M="medium", L="large" }
          interface I  {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: int): int { return 1 }
              meth(p: string): int { return 2 }
              meth(p: Color): int { return 3 }
              meth(p: Size): int { return 4 }
          }
          class A implements I {}
      use: |-
          let i: I = new A()
          assertEQ( i.meth(-1), 1)
          assertEQ( i.meth(Color.Red), 3)
          assertEQ( i.meth(-2 as short), 1)
          assertEQ( i.meth("abc"), 2)
          assertEQ( i.meth(Size.L), 4)
          assertEQ( i.meth(42 as byte), 1)

    - decl: |-
          // enums, with overridden default methods
          enum Color { Red, Green=82, Blue }
          enum Size { S="small", M="medium", L="large" }
          interface I  {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: int): int { return 91 }
              meth(p: string): int { return 92 }
              meth(p: Color): int { return 93 }
              meth(p: Size): int { return 94 }
          }
          class A implements I {
              meth(p: int): int { return 1 }
              meth(p: string): int { return 2 }
              meth(p: Color): int { return 3 }
              meth(p: Size): int { return 4 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth(-1), 1)
          assertEQ( i.meth(Color.Red), 3)
          assertEQ( i.meth(-2 as short), 1)
          assertEQ( i.meth("abc"), 2)
          assertEQ( i.meth(Size.L), 4)
          assertEQ( i.meth(42 as byte), 1)

    - decl: |-
          // arrays
          enum Color { Red, Green = 82, Blue }
          enum Size { S="small", M="medium", L="large" }
          interface J {
              meth(p: A[]): int
              meth(p: Object[]): int
              meth(p: byte[]): int
              meth(p: short[]): int
              meth(p: int[]): int
              meth(p: long[]): int
              meth(p: char[]): int
              meth(p: boolean[]): int
              meth(p: float[]): int
              meth(p: double[]): int
              meth(p: Byte[]): int
              meth(p: Short[]): int
              meth(p: Int[]): int
              meth(p: Object): int
          }
          interface I extends J {
              meth(p: float[]): int
              meth(p: double[]): int
              meth(p: Byte[]): int
              meth(p: Short[]): int
              meth(p: Int[]): int
              meth(p: Long[]): int
              meth(p: Char[]): int
              meth(p: Boolean[]): int
              meth(p: Float[]): int
              meth(p: Double[]): int
              meth(p: Color[]): int
              meth(p: Size[]): int
          }
          class A implements I {
              meth(p: Object): int { return -1 } // should never be called
              meth(p: A[]): int { return 20 }
              meth(p: Object[]): int { return 17 }
              meth(p: byte[]): int { return 1 }
              meth(p: short[]): int { return 2 }
              meth(p: int[]): int { return 3 }
              meth(p: long[]): int { return 4 }
              meth(p: char[]): int { return 5 }
              meth(p: boolean[]): int { return 6 }
              meth(p: float[]): int { return 7 }
              meth(p: double[]): int { return 8 }
              meth(p: Byte[]): int { return 9 }
              meth(p: Short[]): int { return 10 }
              meth(p: Int[]): int { return 11 }
              meth(p: Long[]): int { return 12 }
              meth(p: Char[]): int { return 13 }
              meth(p: Boolean[]): int { return 14 }
              meth(p: Float[]): int { return 15 }
              meth(p: Double[]): int { return 16 }
              meth(p: Color[]): int { return 18 }
              meth(p: Size[]): int { return 19 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth([-1 as byte]), 1)
          assertEQ( i.meth([-1 as short]), 2)
          assertEQ( i.meth([-1 as int]), 3)
          assertEQ( i.meth([-1 as long]), 4)
          assertEQ( i.meth([c'A']), 5)
          assertEQ( i.meth([false]), 6)
          assertEQ( i.meth([3.14 as float]), 7)
          assertEQ( i.meth([3.14]), 8)
          assertEQ( i.meth([new Byte(-1 as byte)]), 9)
          assertEQ( i.meth([new Short(-1 as short)]), 10)
          assertEQ( i.meth([new Int(-1)]), 11)
          assertEQ( i.meth([new Long(-1 as long)]), 12)
          assertEQ( i.meth([new Char(c'A')]), 13)
          assertEQ( i.meth([new Boolean(false)]), 14)
          assertEQ( i.meth([new Float(3.14 as float)]), 15)
          assertEQ( i.meth([new Double(3.14)]), 16)
          assertEQ( i.meth([new Object()]), 17)
          assertEQ( i.meth([Color.Red]), 18)
          assertEQ( i.meth([Size.M]), 19)
          assertEQ( i.meth(new A[1]), 20)

    - decl: |-
          // arrays with default methods
          enum Color { Red, Green = 82, Blue }
          enum Size { S="small", M="medium", L="large" }
          interface I {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: byte[]): int { return 1 }
              meth(p: short[]): int { return 2 }
              meth(p: int[]): int { return 3 }
              meth(p: long[]): int { return 4 }
              meth(p: char[]): int { return 5 }
              meth(p: boolean[]): int { return 6 }
              meth(p: float[]): int { return 7 }
              meth(p: double[]): int { return 8 }
              meth(p: Byte[]): int { return 9 }
              meth(p: Short[]): int { return 10 }
              meth(p: Int[]): int { return 11 }
              meth(p: Long[]): int { return 12 }
              meth(p: Char[]): int { return 13 }
              meth(p: Boolean[]): int { return 14 }
              meth(p: Float[]): int { return 15 }
              meth(p: Double[]): int { return 16 }
              meth(p: Object[]): int { return 17 }
              meth(p: Color[]): int { return 18 }
              meth(p: Size[]): int { return 19 }
              meth(p: A[]): int { return 20 }
          }
          class A implements I {}
      use: |-
          let i: I = new A()
          assertEQ( i.meth([-1 as byte]), 1)
          assertEQ( i.meth([-1 as short]), 2)
          assertEQ( i.meth([-1 as int]), 3)
          assertEQ( i.meth([-1 as long]), 4)
          assertEQ( i.meth([c'A']), 5)
          assertEQ( i.meth([false]), 6)
          assertEQ( i.meth([3.14 as float]), 7)
          assertEQ( i.meth([3.14]), 8)
          assertEQ( i.meth([new Byte(-1 as byte)]), 9)
          assertEQ( i.meth([new Short(-1 as short)]), 10)
          assertEQ( i.meth([new Int(-1)]), 11)
          assertEQ( i.meth([new Long(-1 as long)]), 12)
          assertEQ( i.meth([new Char(c'A')]), 13)
          assertEQ( i.meth([new Boolean(false)]), 14)
          assertEQ( i.meth([new Float(3.14 as float)]), 15)
          assertEQ( i.meth([new Double(3.14)]), 16)
          assertEQ( i.meth([new Object()]), 17)
          assertEQ( i.meth([Color.Red]), 18)
          assertEQ( i.meth([Size.M]), 19)
          assertEQ( i.meth(new A[1]), 20)

    - decl: |-
          // arrays with overridden default methods
          enum Color { Red, Green = 82, Blue }
          enum Size { S="small", M="medium", L="large" }
          interface I {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: byte[]): int { return 91 }
              meth(p: short[]): int { return 92 }
              meth(p: int[]): int { return 93 }
              meth(p: long[]): int { return 94 }
              meth(p: char[]): int { return 95 }
              meth(p: boolean[]): int { return 96 }
              meth(p: float[]): int { return 97 }
              meth(p: double[]): int { return 98 }
              meth(p: Byte[]): int { return 99 }
              meth(p: Short[]): int { return 910 }
              meth(p: Int[]): int { return 911 }
              meth(p: Long[]): int { return 912 }
              meth(p: Char[]): int { return 913 }
              meth(p: Boolean[]): int { return 914 }
              meth(p: Float[]): int { return 915 }
              meth(p: Double[]): int { return 916 }
              meth(p: Object[]): int { return 917 }
              meth(p: Color[]): int { return 918 }
              meth(p: Size[]): int { return 919 }
              meth(p: A[]): int { return 920 }
          }
          class A implements I {
              meth(p: A[]): int { return 20 }
              meth(p: Object[]): int { return 17 }
              meth(p: byte[]): int { return 1 }
              meth(p: short[]): int { return 2 }
              meth(p: int[]): int { return 3 }
              meth(p: long[]): int { return 4 }
              meth(p: char[]): int { return 5 }
              meth(p: boolean[]): int { return 6 }
              meth(p: float[]): int { return 7 }
              meth(p: double[]): int { return 8 }
              meth(p: Byte[]): int { return 9 }
              meth(p: Short[]): int { return 10 }
              meth(p: Int[]): int { return 11 }
              meth(p: Long[]): int { return 12 }
              meth(p: Char[]): int { return 13 }
              meth(p: Boolean[]): int { return 14 }
              meth(p: Float[]): int { return 15 }
              meth(p: Double[]): int { return 16 }
              meth(p: Color[]): int { return 18 }
              meth(p: Size[]): int { return 19 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth([-1 as byte]), 1)
          assertEQ( i.meth([-1 as short]), 2)
          assertEQ( i.meth([-1 as int]), 3)
          assertEQ( i.meth([-1 as long]), 4)
          assertEQ( i.meth([c'A']), 5)
          assertEQ( i.meth([false]), 6)
          assertEQ( i.meth([3.14 as float]), 7)
          assertEQ( i.meth([3.14]), 8)
          assertEQ( i.meth([new Byte(-1 as byte)]), 9)
          assertEQ( i.meth([new Short(-1 as short)]), 10)
          assertEQ( i.meth([new Int(-1)]), 11)
          assertEQ( i.meth([new Long(-1 as long)]), 12)
          assertEQ( i.meth([new Char(c'A')]), 13)
          assertEQ( i.meth([new Boolean(false)]), 14)
          assertEQ( i.meth([new Float(3.14 as float)]), 15)
          assertEQ( i.meth([new Double(3.14)]), 16)
          assertEQ( i.meth([new Object()]), 17)
          assertEQ( i.meth([Color.Red]), 18)
          assertEQ( i.meth([Size.M]), 19)
          assertEQ( i.meth(new A[1]), 20)

    - decl: |-
          // tuples, sub/super interfaces
          type T = [number, string]
          type R = [number, boolean]
          interface J {
              meth(p: R): int
              meth(p: number[]): int
              meth(p: boolean): int
          }
          interface I extends J {
              meth(p: R): int
              meth(p: T): int
              meth(p: string[]): int
          }
          class A implements I {
              meth(p: Object): int { return -1 } // should never be called
              meth(p: T): int { return 1 }
              meth(p: R): int { return 2 }
              meth(p: number[]): int { return 3 }
              meth(p: string[]): int { return 4 }
              meth(p: boolean): int { return 5 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth([3.14, "abc"]), 1)
          assertEQ( i.meth([3.14, false]), 2)
          assertEQ( i.meth([3.14]), 3)
          assertEQ( i.meth(["abc"]), 4)
          assertEQ( i.meth(true), 5)

    - decl: |-
          // tuples, sub/super interfaces, default methods
          type T = [number, string]
          type R = [number, boolean]
          interface I {
              meth(p: T): int { return 1 }
              meth(p: R): int { return 2 }
              meth(p: number[]): int { return 3 }
              meth(p: string[]): int { return 4 }
              meth(p: boolean): int { return 5 }
          }
          class A implements I {}
      use: |-
          let i: I = new A()
          assertEQ( i.meth([3.14, "abc"]), 1)
          assertEQ( i.meth([3.14, false]), 2)
          assertEQ( i.meth([3.14]), 3)
          assertEQ( i.meth(["abc"]), 4)
          assertEQ( i.meth(true), 5)

    - decl: |-
          // tuples, sub/super interfaces, overridden default methods
          type T = [number, string]
          type R = [number, boolean]
          interface I {
              meth(p: T): int { return 91 }
              meth(p: R): int { return 92 }
              meth(p: number[]): int { return 93 }
              meth(p: string[]): int { return 94 }
              meth(p: boolean): int { return 95 }
          }
          class A implements I {
              meth(p: T): int { return 1 }
              meth(p: [number, boolean]): int { return 2 }
              meth(p: number[]): int { return 3 }
              meth(p: string[]): int { return 4 }
              meth(p: boolean): int { return 5 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth([3.14, "abc"]), 1)
          assertEQ( i.meth([3.14, false]), 2)
          assertEQ( i.meth([3.14]), 3)
          assertEQ( i.meth(["abc"]), 4)
          assertEQ( i.meth(true), 5)

    - decl: |-
          // unions with sub/super interfaces
          interface J {
              meth(p: Boolean|undefined): int
              meth(p: string): int
          }
          interface I extends J {
              meth(p: string|Number|null): int
              meth(p: Number): int
          }
          class A implements I {
              meth(p: Object): int { return -1 } // should never be called
              meth(p: string|Number|null): int { return 1 }
              meth(p: Boolean|undefined): int { return 2 }
              meth(p: string): int { return 3 }
              meth(p: Number): int { return 4 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth(3.14), 4)
          assertEQ( i.meth(""), 3)
          let t1: string|Number|null = "xyz"
          assertEQ( i.meth(t1), 1)
          let t2: Boolean|undefined = undefined
          assertEQ( i.meth(t2), 2)

    - decl: |-
          // unions with sub/super interfaces, default methods
          interface I {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: string|Number|null): int { return 1 }
              meth(p: Boolean|undefined): int { return 2 }
              meth(p: string): int { return 3 }
              meth(p: Number): int { return 4 }
          }
          class A implements I {}
      use: |-
          let i: I = new A()
          assertEQ( i.meth(3.14), 4)
          assertEQ( i.meth(""), 3)
          let t1: string|Number|null = "xyz"
          assertEQ( i.meth(t1), 1)
          let t2: Boolean|undefined = undefined
          assertEQ( i.meth(t2), 2)

    - decl: |-
          // unions with sub/super interfaces, overridden default methods
          interface I {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: string|Number|null): int { return 91 }
              meth(p: Boolean|undefined): int { return 92 }
              meth(p: string): int { return 93 }
              meth(p: Number): int { return 94 }
          }
          class A implements I {
              meth(p: string|Number|null): int { return 1 }
              meth(p: Boolean|undefined): int { return 2 }
              meth(p: string): int { return 3 }
              meth(p: Number): int { return 4 }
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth(3.14), 4)
          assertEQ( i.meth(""), 3)
          let t1: string|Number|null = "xyz"
          assertEQ( i.meth(t1), 1)
          let t2: Boolean|undefined = undefined
          assertEQ( i.meth(t2), 2)

    - decl: |-
          // function types
          type FF=(p: number) => string
          type EE=(p: string) => number
          interface J {
              meth(p: FF): int
              meth(p: EE): int
          }
          interface I extends J {
              meth(p: () => void): int
              meth(p: (p: number) => void): int
          }
          class A implements I {
              meth(p: Object): int { return -1 } // should never be called
              meth(p: () => void): int { return 1 }
              meth(p: (p: number) => void): int { return 2 }
              meth(p: FF): int { return 3 }
              meth(p: EE): int { return 4 }
          }
          function fff(v: number): string {
              return " " + v + " "
          }
          function eee(v: string): number {
              return v == "" ? 0.0 : 1.0
          }
          function foo() {
              assertTrue( false )
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth(foo), 1)
          assertEQ( i.meth((v: number): void => { assertEQ( v, 0.0 )}), 2)
          assertEQ( i.meth(fff), 3)
          assertEQ( i.meth(eee), 4)
      tags: negative, compile-only

    - decl: |-
          // function types with default methods
          type FF=(p: number) => string
          type EE=(p: string) => number
          interface I {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: () => void): int { return 1 }
              meth(p: (p: number) => void): int { return 2 }
              meth(p: FF): int { return 3 }
              meth(p: EE): int { return 4 }
          }
          class A implements I {}
          function fff(v: number): string {
              return " " + v + " "
          }
          function eee(v: string): number {
              return v == "" ? 0.0 : 1.0
          }
          function foo() {
              assertTrue( false )
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth(foo), 1)
          assertEQ( i.meth((v: number): void => { assertEQ( v, 0.0 )}), 2)
          assertEQ( i.meth(fff), 3)
          let v: EE = eee
          assertEQ( i.meth(v), 4)
      tags: negative, compile-only

    - decl: |-
          // function types with overridden default methods
          type FF=(p: number) => string
          type EE=(p: string) => number
          interface I {
              meth(p: Object): int { return -2 } // should never be called
              meth(p: () => void): int { return 91 }
              meth(p: (p: number) => void): int { return 92 }
              meth(p: FF): int { return 93 }
              meth(p: EE): int { return 94 }
          }
          class A implements I {
              meth(p: () => void): int { return 1 }
              meth(p: (p: number) => void): int { return 2 }
              meth(p: FF): int { return 3 }
              meth(p: EE): int { return 4 }
          }
          function fff(v: number): string {
              return " " + v + " "
          }
          function eee(v: string): number {
              return v == "" ? 0.0 : 1.0
          }
          function foo() {
              assertTrue( false )
          }
      use: |-
          let i: I = new A()
          assertEQ( i.meth(foo), 1)
          assertEQ( i.meth((v: number): void => { assertEQ( v, 0.0 )}), 2)
          assertEQ( i.meth(fff), 3)
          let v: EE = eee
          assertEQ( i.meth(v), 4)
      tags: negative, compile-only

    - decl: |-
          // nullish types
          type S=string
          type SN=string|null
          type SU=string|undefined
          type SNU=string|null|undefined
          interface J {
              meth(p: SN): int
              meth(p: S): int
          }
          interface I extends J {
              meth(p: SU): int
              meth(p: SNU): int
          }
          class A implements I {
              meth(p: Object|null|undefined): int { return -1 } // should never be called
              meth(p: SN): int { return 1 }
              meth(p: SU): int { return 2 }
              meth(p: SNU): int { return 3 }
              meth(p: S): int { return 4 }
          }
      use: |-
          let a: A = new A()
          let s: S = "ABC"
          assertEQ( a.meth(s), 4)
          let sn: SN = "ABC"
          assertEQ( a.meth(sn), 1)
          let su: SU = "ABC"
          assertEQ( a.meth(su), 2)
          let snu: SNU = "ABC"
          assertEQ( a.meth(snu), 3)
          sn = null
          assertEQ( a.meth(sn), 1)
          su = undefined
          assertEQ( a.meth(su), 2)
          snu = undefined
          assertEQ( a.meth(snu), 3)

    - decl: |-
          // nullish types with default methods
          type S=string
          type SN=string|null
          type SU=string|undefined
          type SNU=string|null|undefined
          interface I {
              meth(p: SN): int { return 1 }
              meth(p: SU): int { return 2 }
              meth(p: S): int { return 4 }
              meth(p: SNU): int { return 3 }
          }
          class A implements I {
              meth(p: Object|null|undefined): int { return -1 } // should never be called
          }
      use: |-
          let i: A = new A()
          let s: S = "ABC"
          assertEQ( i.meth(s), 4)
          let sn: SN = "ABC"
          assertEQ( i.meth(sn), 1)
          let su: SU = "ABC"
          assertEQ( i.meth(su), 2)
          let snu: SNU = "ABC"
          assertEQ( i.meth(snu), 3)
          sn = null
          assertEQ( i.meth(sn), 1)
          su = undefined
          assertEQ( i.meth(su), 2)
          snu = undefined
          assertEQ( i.meth(snu), 3)

    - decl: |-
          // nullish types with overridden default methods
          type S=string
          type SN=string|null
          type SU=string|undefined
          type SNU=string|null|undefined
          interface I {
              meth(p: SN): int { return 91 }
              meth(p: SU): int { return 92 }
              meth(p: S): int { return 94 }
              meth(p: SNU): int { return 93 }
          }
          class A implements I {
              meth(p: SN): int { return 1 }
              meth(p: SU): int { return 2 }
              meth(p: SNU): int { return 3 }
              meth(p: S): int { return 4 }
          }
      use: |-
          let i: I = new A()
          let s: S = "ABC"
          assertEQ( i.meth(s), 4)
          let sn: SN = "ABC"
          assertEQ( i.meth(sn), 1)
          let su: SU = "ABC"
          assertEQ( i.meth(su), 2)
          let snu: SNU = "ABC"
          assertEQ( i.meth(snu), 3)
          sn = null
          assertEQ( i.meth(sn), 1)
          su = undefined
          assertEQ( i.meth(su), 2)
          snu = undefined
          assertEQ( i.meth(snu), 3)
