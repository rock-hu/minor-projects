# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - decl: |-
      interface I {
          foo(i: number) {
              return 1;
          }
      }
      interface J extends I {
          foo(j: string) {
              return 2;
          }
      }
      class A implements I, J {}
    call: |-
      let a = new A();
      assert(a.foo(1.1 as number) == 1);
      assert(a.foo("some string") == 2);

  - decl: |-
      interface I {
          foo(i: number) {
              return 1;
          }
      }
      interface J extends I {
          foo(j: number) {
              return 2;
          }
      }
      class A implements I, J {}
    call: |-
      let a = new A();
      assert(a.foo(1.1 as number) == 2);

  - decl: |-
      interface I {
          foo(i: number) {
              return 1;
          }
      }
      interface J {
          foo(j: string) {
              return 2;
          }
      }
      class A implements I, J {}
    call: |-
      let a = new A();
      assert(a.foo(1.1 as number) == 1);
      assert(a.foo("some string") == 2);

  - decl: |-
      interface I {
          foo(i: number) {
              return 1;
          }
      }
      interface J {
          foo(j: number) {
              return 2;
          }
      }
      class A implements I, J {}
    call: |-
      let a = new A();
      assert(a.foo(1.1 as number) == 2);

  - decl: |-
      interface I {
          foo(i: number) {
              return 1;
          }
      }
      interface J {
          foo(j: number) {
              return 2;
          }
      }
      class A implements J, I {}
    call: |-
      let a = new A();
      assert(a.foo(1.1 as number) == 1);
