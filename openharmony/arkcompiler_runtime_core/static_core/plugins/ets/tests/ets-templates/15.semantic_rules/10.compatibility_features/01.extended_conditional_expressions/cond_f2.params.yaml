# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # falsy values
cases:
    - { val: 'null', type: 'Object|null' }
    - { val: 'undefined', type: 'Object|undefined' }

    - { val: '0', type: 'int' }
    - { val: '0', type: 'byte' }
    - { val: '0', type: 'short' }
    - { val: '0', type: 'long' }
    - { val: '0', type: 'float' }
    - { val: '0', type: 'double' }
    - { val: 'Float.NaN', type: 'float' }
    - { val: 'Double.NaN', type: 'double' }

    - { val: '-0', type: 'int' }
    - { val: '-0', type: 'byte' }
    - { val: '-0', type: 'short' }
    - { val: '-0', type: 'long' }
    - { val: '-0', type: 'float' }
    - { val: '-0', type: 'double' }

    - { val: 'new Int()', type: 'int' }
    - { val: 'new Byte()', type: 'byte' }
    - { val: 'new Short()', type: 'short' }
    - { val: 'new Long()', type: 'long' }
    - { val: 'new Float()', type: 'float' }
    - { val: 'new Double()', type: 'double' }

    - { val: '""', type: 'string' }
    - { val: 'new String("abc").substring(0, 0)', type: 'string' }
    - { val: '"" + ""', type: 'string' }
    - { val: '``', type: 'string' }

    - { val: "c'\\u0000'", type: 'char' }

    - { val: 'false', type: 'boolean' }
    - { val: '!!false', type: 'boolean' }
    - { val: '!true', type: 'boolean' }
    - { val: '42 - 21 - 21', type: 'number' }
    - { val: '42 * (21 - 11 - 10)', type: 'number' }

    - decl: |-
        class A {}
        class B {}
        type UT = A | B | null
      type: UT
      val: 'null'

    - decl: |-
        let empty: string = ''
      type: string
      val: '`${empty}`'

    - decl: |-
        interface I {}
        type NI = I | null
      type: NI
      val: 'null'

    - decl: |-
        enum Color { Red, Green, Blue }
      type: Color
      val: Color.Red

    - { val: 'new Byte()', type: 'Byte' }
    - { val: 'new Short()', type: 'Short' }
    - { val: 'new Int()', type: 'Int' }
    - { val: 'new Long()', type: 'Long' }
    - { val: 'new Double(Double.NaN)', type: 'Double' }
    - { val: 'new Float(Float.NaN)', type: 'Float' }
    - { val: 'new Boolean(false)', type: 'Boolean' }
