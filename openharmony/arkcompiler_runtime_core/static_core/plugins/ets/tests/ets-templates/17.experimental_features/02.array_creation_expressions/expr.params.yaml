# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - use: |-
          let size = 1  // identity dimension conversion
          let v: number[] = new number[size]

          v[0] = 42.0
          assert v[0] == 42.0

    - use: |-
          let size: Int = new Int(1)  // unboxing dimension conversion
          let v: number[] = new number[size]

          v[0] = 42.0
          assert v[0] == 42.0

    - use: |-
          let size: long = 1 as long  // narrowing dimension conversion
          let v: Byte[] = new Byte[size]

          v[0] = new Byte(42 as byte)
          assert v[0] instanceof Byte && v[0] == 42

    - use: |-
          let size: Long = new Long(1 as long)  // unboxing and narrowing dimension conversion
          let v: Byte[] = new Byte[size]

          v[0] = new Byte(42 as byte)
          assert v[0] instanceof Byte && v[0] == 42

    - use: |-
          let size: number = 1  // narrowing dimension conversion
          let v: Byte[] = new Byte[size]

          v[0] = new Byte(42 as byte)
          assert v[0] instanceof Byte && v[0] == 42

    - use: |-
          let size: Number = new Number(1)  // unboxing and narrowing dimension conversion
          let v: Byte[] = new Byte[size]

          v[0] = new Byte(42 as byte)
          assert v[0] instanceof Byte && v[0] == 42

    - use: |-
          let size: float = 1.0  // narrowing dimension conversion
          let v: Byte[] = new Byte[size]

          v[0] = new Byte(42 as byte)
          assert v[0] instanceof Byte && v[0] == 42

    - use: |-
          let size: Float = new Float(1.0)  // unboxing and narrowing dimension conversion
          let v: Byte[] = new Byte[size]

          v[0] = new Byte(42 as byte)
          assert v[0] instanceof Byte && v[0] == 42

    - use: |-
          let size: byte = 10 as byte  // widening dimension conversion
          let v: Error[] = new Error[size]

          v[9] = new Error()
          assert v[9] instanceof Error

    - use: |-
          let size: Byte = new Byte(10 as byte)  // unboxing and widening dimension conversion
          let v: Error[] = new Error[size]

          v[9] = new Error()
          assert v[9] instanceof Error

    - use: |-
          let size: short = 1000 as short  // widening dimension conversion
          let v: Number[] = new Number[size]

          v[999] = new Number(42.0)
          assert v[999] instanceof Number && v[999] == 42

    - use: |-
          let size: Short = new Short(1000 as short)  // unboxing and widening dimension conversion
          let v: Number[] = new Number[size]

          v[999] = new Number(42.0)
          assert v[999] instanceof Number && v[999] == 42.0

    - use: |-
          let size1: Byte = new Byte(7 as byte)
          let size2: Short = new Short(8 as short)
          let size3: Int = new Int(9)

          let v: string[][][] = new string[size1][size2][size3]  // unboxing and widening
          v[size1 - 1][size2 - 1][size3 - 1] = "abc"
          assert v[size1 - 1][size2 - 1][size3 - 1] == "abc"

    - use: |-
          let size: char = c'A'  // widening conversion
          let v: char[] = new char[size]

          v[0] = c'X'
          assert v[0] == c'X'
