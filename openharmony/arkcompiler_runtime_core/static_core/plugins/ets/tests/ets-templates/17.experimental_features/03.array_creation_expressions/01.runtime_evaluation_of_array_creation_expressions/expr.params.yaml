# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - defs: |-
          let res: string = ""
          function foo(p: int): int {
              res += p
              return p
          }
      use: |-
          res = ""
          let v: number[][][][][] = new number[foo(1)][foo(2)][foo(3)][foo(4)][foo(5)]
          return (res == "12345" && v instanceof Object ? 0 : 1)

    - defs: |-
          type UT = number[][][][][] | null
          let res: string = ""
          function foo(p: int): int {
              res += p
              if (p == 3) {
                  throw new Error()
              }
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          try {
              v = new number[foo(1)][foo(2)][foo(3)][foo(4)][foo(5)]
              return 1
          } catch (e) {
              // expected
          }
          return (res == "123" && v == null ? 0 : 1)

    - defs: |-
          type UT = number[][][][][] | null
          let res: string = ""
          function foo(p: int): int {
              res += p
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          try {
              v = new number[foo(1)][foo(2)][foo(3)][foo(-4)][foo(5)]
              return 1
          } catch (e: NegativeArraySizeError) {
              // expected
              return (res == "123-45" && v == null ? 0 : 1)
          }

    - defs: |-
          type UT = number[][][][][] | null
          let res: string = ""
          function foo(p: int): int {
              res += p
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          try {
              v = new number[foo(-1)][foo(-2)][foo(-3)][foo(4)][foo(-5)]
              return 1
          } catch (e: NegativeArraySizeError) {
              // expected
              return (res == "-1-2-34-5" && v == null ? 0 : 1)
          }

    - defs: |-
          type UT = number[][][][][] | null
          let res: string = ""
          function foo(p: int): int {
              res += p
              if (p == 3) {
                  throw new Error()
              }
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          try {
              v = new number[foo(-1)][foo(-2)][foo(3)][foo(4)][foo(-5)]
              return 1
          } catch (e: NegativeArraySizeError) {
              return 1
          } catch (e) {
              // expected
              return (res == "-1-23" && v == null ? 0 : 1)
          }

    - defs: |-
          type UT = number[][] | null
          let size = 1_000_000
          let res: string = ""
          function foo(p: int): int {
              res += p
              return p
          }
      use: |-
          res = ""
          let v: UT = null
          try {
              v = new number[foo(size)][foo(size)]
          } catch (e: OutOfMemoryError) {
              // expected
              return (res == "10000001000000" && v == null ? 0 : 1)
          }
          return 1

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int
              public constructor() {
                  this.fld = cntr++
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(100)]
          return (res == "100" && cntr == 100 && v[99] instanceof A && v[99].fld == 99 ? 0 : 1)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int
              public constructor() {
                  this.fld = cntr++
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[][] = new A[foo(10)][foo(10)]
          return (res == "1010" && cntr == 100 && v[9][9] instanceof A && v[9][9].fld == 99 ? 0 : 1)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = cntr++
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          return (res == "42" && cntr == 42 && v[41] instanceof A && v[41].fld == 41 ? 0 : 1)

    - defs: |-
          let cntr: int = 0
          class A {
              fld: int = cntr
              constructor() {
                  this.fld = cntr++
              }
              constructor(p: int) {
                  this.fld = p
              }
          }
          function foo(p: int): int {
              res += p
              return p
          }
          let res: string = ""
      use: |-
          cntr = 0
          res = ""
          let v: A[] = new A[foo(42)]
          return (res == "42" && cntr == 42 && v[41] instanceof A && v[41].fld == 41 ? 0 : 1)

    - use: |-
          let v: int[] = new int[33]  // initialized with 0
          for (let i = 0; i < 33; i++) {
              if (v[i] != 0) {
                  return 1
              }
          }
          return 0

    - use: |-
          let v: number[] = new number[33]  // initialized with 0.0
          for (let i = 0; i < 33; i++) {
              if (v[i] != 0.0) {
                  return 1
              }
          }
          return 0

    - use: |-
          let v: char[] = new char[33]  // initialized with c'\u0000'
          for (let i = 0; i < 33; i++) {
              if (v[i] != c'\u0000') {
                  return 1
              }
          }
          return 0

    - use: |-
          let v: boolean[] = new boolean[33]  // initialized with false
          for (let i = 0; i < 33; i++) {
              if (v[i] != false) {
                  return 1
              }
          }
          return 0

    - defs: |-
          type EN = Error|undefined
      use: |-
          let v: EN[] = new EN[33]  // initialized with undefined
          for (let i = 0; i < 33; i++) {
              if (v[i] != undefined) {
                  return 1
              }
          }
          return 0

    - defs: |-
          type EU = Error|undefined
      use: |-
          let v: EU[] = new EU[33]  // initialized with undefined
          for (let i = 0; i < 33; i++) {
              if (v[i] != undefined) {
                  return 1
              }
          }
          return 0
