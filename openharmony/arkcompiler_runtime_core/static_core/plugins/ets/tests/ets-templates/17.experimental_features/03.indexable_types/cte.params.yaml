# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # positive case, read-write
    - decl: |-
          class A {
              ind: string = ''
              val: number
              $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
              $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          a['a'] = 42.0
          if (a['a'] != 42.0) return 1
          a['a'] = 43.0
          if (a['a'] != 43.0) return 1

    # positive case, read-only, no $_set
    - decl: |-
          class A {
              ind: string = ''
              val: number
              $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
          }
      code: |-
          let a: A = new A
          if (!Number.isNaN(a['a'])) return 1
          if (a[''] != 0.0) return 1

    # negative case, read-only, no $_set
    - tags: 'compile-only, negative'
      decl: |-
          class A {
              ind: string = ''
              val: number
              $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
          }
      code: |-
          let a: A = new A
          a['a'] = 42.0  // CTE
          if (a['a'] != 42.0) return 1

    # positive case, read-only, private $_set
    - decl: |-
          class A {
              ind: string = ''
              val: number
              $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
              private $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          if (!Number.isNaN(a['a'])) return 1
          if (a[''] != 0.0) return 1

    # negative case, read-only, private $_set
    - tags: 'compile-only, negative'
      decl: |-
          class A {
              ind: string = ''
              val: number
              $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
              private $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          a['a'] = 42.0  // CTE
          if (a['a'] != 42.0) return 1

    # positive case, write-only, no $_get
    - decl: |-
          class A {
              ind: string = ''
              val: number
              $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          a['a'] = 42.0
          if (a.val != 42.0) return 1

    # negative case, write-only, no $_get
    - tags: 'compile-only, negative'
      decl: |-
          class A {
              ind: string = ''
              val: number
              $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          a['a'] = 42.0
          if (a['a'] != 42.0) return 1  // CTE

    # positive case, write-only, private $_get
    - decl: |-
          class A {
              ind: string = ''
              val: number
              private $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
              $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          a['a'] = 42.0
          if (a.val != 42.0) return 1

    # negative case, write-only, private $_get
    - tags: 'compile-only, negative'
      decl: |-
          class A {
              ind: string = ''
              val: number
              private $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
              $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          a['a'] = 42.0
          if (a['a'] != 42.0) return 1  // CTE

    # negative cases, static is not allowed
    - tags: 'compile-only, negative'
      decl: |-
          class A {
              static $_get(i: string): number {
                  return 42.0
              }
          }
      code: |-
          let x = A['a']  // CTE

    - tags: 'compile-only, negative'
      decl: |-
          class A {
              static $_get(i: string): number {
                  return 42.0
              }
          }
      code: |-
          let a = new A
          let x = a['a']  // CTE

    - tags: 'compile-only, negative'
      decl: |-
          class A {
              static $_set(i: string, v: number) {
                  return
              }
          }
      code: |-
          A['a'] = 42.0  // CTE

    - tags: 'compile-only, negative'
      decl: |-
          class A {
              static $_set(i: string, v: number) {
                  return
              }
          }
      code: |-
          let a = new A
          a['a'] = 42.0  // CTE

    # positive case, public read-write
    - decl: |-
          class A {
              ind: string = ''
              val: number
              public $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
              public $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }

          class B extends A {
              push(ind: string, val: number) {
                  super[ind] = val
              }
              pull(ind: string): number {
                  return super[ind]
              }
          }
      code: |-
          let b = new B
          b.push('a', 11.0)
          if (b.pull('a') != 11.0) return 1

    # positive case, protected read-write
    - decl: |-
          class A {
              ind: string = ''
              val: number
              protected $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
              protected $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }

          class B extends A {
              push(ind: string, val: number) {
                  super[ind] = val
              }
              pull(ind: string): number {
                  return super[ind]
              }
          }
      code: |-
          let b = new B
          b.push('a', 11.0)
          if (b.pull('a') != 11.0) return 1

    # positive case, private read-write
    - decl: |-
          class B {
              ind: string = ''
              val: number
              private $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
              private $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
              public push(ind: string, val: number) {
                  this[ind] = val
              }
              public pull(ind: string): number {
                  return this[ind]
              }
          }
      code: |-
          let b = new B
          b.push('a', 11.0)
          if (b.pull('a') != 11.0) return 1

    # positive case, calling as ordinary methods
    - decl: |-
          class A {
              ind: string = ''
              val: number
              $_get(i: string): number {
                  return i == this.ind ? this.val : Number.NaN
              }
              $_set(i: string, v: number) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          a.$_set('a', 42.0)
          if (a.$_get('a') != 42.0) return 1
          a.$_set('a', 43.0)
          if (a.$_get('a') != 43.0) return 1

    # negative cases, async is not allowed
    - tags: 'compile-only, negative'
      decl: |-
          class A {
              async $_get(i: string): number {  // CTE
                  return 42.0
              }
          }
      code: |-
          let a = new A

    - tags: 'compile-only, negative'
      decl: |-
          class A {
              async $_set(i: string, v: number) {  // CTE
                  return
              }
          }
      code: |-
          let a = new A

    # positive case, array value
    - decl: |-
          let empty: number[] = []
          class A {
              ind: string = ''
              val: number[] = []
              $_get(i: string): number[] {
                  return i == this.ind ? this.val : empty
              }
              $_set(i: string, v: number[]) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          a['a'] = [42.0]
          if (a['a'][0] != 42.0) return 1
          a['a'] = [43.0, 44.0]
          if (a['a'][1] != 44.0) return 1

    - decl: |-
          let empty: number[] = []
          class A {
              ind: int
              val: number[] = []
              $_get(i: int): number[] {
                  return i == this.ind ? this.val : empty
              }
              $_set(i: int, v: number[]) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          a[0] = [42.0]
          if (a[0][0] != 42.0) return 1
          a[1] = [43.0, 44.0]
          if (a[1][1] != 44.0) return 1

    - decl: |-
          let empty: number[] = []
          class A {
              ind: int
              val: number[] = []
              $_get(i: int): number[] {
                  return i == this.ind ? this.val : empty
              }
              $_set(i: int, v: number[]) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A[] = [new A, new A]
          a[0][0] = [42.0]
          if (a[0][0][0] != 42.0) return 1
          a[1][1] = [43.0, 44.0]
          if (a[1][1][1] != 44.0) return 1

    # positive case, another indexable class value
    - decl: |-
          let empty: number[] = []
          class A {
              ind: int
              val: B = new B
              $_get(i: int): B {
                  return i == this.ind ? this.val : new B
              }
              $_set(i: int, v: B) {
                  this.ind = i
                  this.val = v
              }
          }
          class B {
              ind: int
              val: number[] = []
              $_get(i: int): number[] {
                  return i == this.ind ? this.val : empty
              }
              $_set(i: int, v: number[]) {
                  this.ind = i
                  this.val = v
              }
          }
      code: |-
          let a: A = new A
          let b1: B = new B
          a[0] = b1
          a[0][0] = [42.0]
          if (a[0][0][0] != 42.0) return 1
          let b2: B = new B
          a[1] = b2
          a[1][1] = [43.0, 44.0]
          if (a[1][1][1] != 44.0) return 1
