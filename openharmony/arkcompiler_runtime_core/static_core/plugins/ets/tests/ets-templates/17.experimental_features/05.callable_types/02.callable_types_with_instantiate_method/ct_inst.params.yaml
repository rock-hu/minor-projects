# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
    - decl: |-
          // calling a static method, not a callable type case
          class C {
              static instantiate() { return 'abc' }
          }
      use: |-
          if (C.instantiate() != 'abc') return 1

    - decl: |-
          // calling a static method with a factory, not a callable type case
          class C {
              static instantiate(f: () => C) { return 'abc' }
          }
          function foo(): C {
              return new C()
          }
      use: |-
          if (C.instantiate(foo) != 'abc') return 1

    - decl: |-
          // no parameters, implicit void return
          class C {
              static inst: C|null = null
              static instantiate(f: () => C) { C.inst = f() }
          }
      use: |-
          C.inst = null
          C()
          if (!(C.inst instanceof C)) return 1

    - decl: |-
          // no parameters, explicit void return
          class C {
              static inst: C|null = null
              static instantiate(f: () => C): void { C.inst = f() }
          }
      use: |-
          C.inst = null
          C()
          if (!(C.inst instanceof C)) return 1

    - decl: |-
          // using type alias
          type A = C
          class C {
              static instantiate(f: () => C, p: string): string {
                  return f().meth(p)
              }
              meth(p: string): string { return p + p }
          }
      use: |-
          if (A('abc') != 'abcabc') return 1

    - decl: |-
          // singleton with implicit factory
          class C {
              static instance: C|null|undefined = null
              static instantiate(f: () => C): C {
                  if (C.instance == null) {
                      C.instance = f()
                  }
                  return C.instance!
              }
          }
      use: |-
          if (C() != C()) return 1

    - decl: |-
          // singleton with explicit factory
          class C {
              static instance: C|null|undefined = null
              static instantiate(f: () => C): C {
                  if (C.instance == null) {
                      C.instance = f()
                  }
                  return C.instance!
              }
          }
      use: |-
          let f: ()=>C = (): C => new C()
          if (C.instantiate(f) != C.instantiate(f)) return 1

    - decl: |-
          // using parameters
          enum Color { Red, Green, Blue }
          class C {
              clr: Color|undefined
              static instantiate(f: ()=>C, clr: Color): [C, C, C] {
                  let c = f()
                  c.clr = clr
                  return [c, c, c]
              }
          }
      use: |-
          let x = C(Color.Green)
          if (x[0] != x[1] || x[1] != x[2]) return 1

    - decl: |-
          // using rest parameters
          class Conc {
              static instantiate(f: ()=>Conc, ...strings: string[]): Conc {
                  let ss = ''
                  for (let s of strings) ss += s
                  let res = f()
                  res.s = ss
                  return res
              }
              s: string = 'X'
          }
      use: |-
          if (Conc().s != '') return 1
          if (Conc('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h').s != 'abcdefgh') return 1

    - decl: |-
          // shadowed instantiate
          class A {
              static instantiate(f: ()=>A): A { return f() }
          }
          class B extends A {
              static instantiate(f: ()=>B): B { return f() }
          }
          class C extends B {
              static instantiate(f: ()=>C): C { return f() }
          }
      use: |-
          let a = A()
          if (!(a instanceof A) || a instanceof B || a instanceof C) return 1
          let b = B()
          if (!(b instanceof A) || !(b instanceof B) || b instanceof C) return 1
          let c = C()
          if (!(c instanceof A) || !(c instanceof B) || !(c instanceof C)) return 1

    - decl: |-
          // shadowed instantiate
          class A {
              name: string = 'X'
              static instantiate(f: ()=>A, p: number): A { return foo(f, 'A', p) }
          }
          class B extends A {
              static instantiate(f: ()=>B, p: number): B { return foo(f, 'B', p) as B }
          }
          class C extends B {
              static instantiate(f: ()=>C, p: number): C { return foo(f, 'C', p) as C }
          }
          function foo(f: ()=>A, p: string, n: number): A {
              let r = f()
              r.name = p + n
              return r
          }
      use: |-
          if (A(1.0).name != 'A1') return 1
          if (B(2.0).name != 'B2') return 1
          if (C(3.0).name != 'C3') return 1

    - decl: |-
          // overloaded instantiate
          class C {
              static instantiate(f: ()=>C, p: number): number { return p + p }
              static instantiate(f: ()=>C, p: string): string { return p + p }
          }
      use: |-
          // implicit factory arg
          if (C(42.0) != 84.0) return 1
          if (C('abc') != 'abcabc') return 1
          // explicit factory arg
          if (C.instantiate(() => { return new C() }, 42.0) != 84.0) return 1
          if (C.instantiate(() => { return new C() }, 'abc') != 'abcabc') return 1

    - decl: |-
          // overloaded instantiate
          class B {
              static instantiate(f: ()=>B, p: number): number { return p + p }
          }
          class C extends B {
              static instantiate(f: ()=>C, p: string): string { return p + p }
          }
      use: |-
          // implicit factory arg
          if (C(42.0) != 84.0) return 1
          if (C('abc') != 'abcabc') return 1
          // explicit factory arg
          if (C.instantiate(() => { return new C() }, 42.0) != 84.0) return 1
          if (C.instantiate(() => { return new C() }, 'abc') != 'abcabc') return 1

    - decl: |-
          // mix of static and instance instantiate
          class B {
              static instantiate(f: ()=>B, p: number): number {
                  return f().instantiate(f, p)
              }
              instantiate(f: ()=>B, p: number): number { return p + p }
          }
          class C extends B {
              static instantiate(f: ()=>C, p: string): string {
                  return f().instantiate(f, p)
              }
              instantiate(f: ()=>C, p: string): string { return '1' + p }
          }
          function foo_C(): C {
              return new C()
          }
      use: |-
          if (C('abc') != '1abc') return 1
          if (B(42.0) != 84.0) return 1
          if (C(42.0) != 84.0) return 1

    - decl: |-
          // error propagation from instantiate
          class MyError extends Error {}
          class C {
              static instantiate(f: ()=>C, p: boolean): C {
                  if (p) {
                      throw new MyError()
                  }
                  return f()
              }
          }
      use: |-
          try {
              let x = C(true)
              return 1
          } catch (e) {
              if (!(e instanceof MyError)) return 1
          }

    - decl: |-
          // error propagation from instantiate
          class MyError extends Error {}
          class C {
              static instantiate(f: ()=>C, p: boolean): C {
                  return f()
              }
              constructor() {
                  throw new MyError()
              }
          }
      use: |-
          try {
              let x = C(true)
              return 1
          } catch (e) {
              if (!(e instanceof MyError)) return 1
          }

    - decl: |-
          // exception propagation from instantiate
          class MyException extends Exception {}
          class C {
              static instantiate(f: ()=>C, p: boolean): C throws {
                  if (p) {
                      throw new MyException()
                  }
                  return f()
              }
          }
      use: |-
          try {
              let x = C(true)
              return 1
          } catch (e) {
              if (!(e instanceof MyException)) return 1
          }

    - decl: |-
          // exception propagation from instantiate
          class MyException extends Exception {}
          class C {
              static instantiate(f: () => C throws, p: boolean): C throws {
                  return f()
              }
              constructor() throws {
                  throw new MyException()
              }
          }
      use: |-
          try {
              let x = C(true)
              return 1
          } catch (e) {
              if (!(e instanceof MyException)) return 1
          }

    - decl: |-
          // using trailing lambda as explicit factory
          class C {
              fld: number = 0.0
              static instantiate(f: ()=>C): C {
                  let x = f()
                  x.fld = 1.0
                  return x
              }
          }
      use: |-
          let x = C.instantiate() { return new C() }
          if (x.fld != 1.0) return 1

    - decl: |-
          // instantiate returns the factory
          class C {
              static instantiate(f: ()=>C): ()=>C { return f }
          }
      use: |-
          if (!(C()() instanceof C)) return 1
          if (!(C.instantiate(() => { return new C() })() instanceof C)) return 1

    - decl: |-
          // instantiate returns array
          class C {
              static instantiate(f: ()=>C): C[] {
                  let x: C[] = [f(), f(), f()]
                  return x
              }
          }
      use: |-
          for (let z of C())
              if (!(z instanceof C)) return 1

          for (let z of C.instantiate() { return new C() })
              if (!(z instanceof C)) return 1
