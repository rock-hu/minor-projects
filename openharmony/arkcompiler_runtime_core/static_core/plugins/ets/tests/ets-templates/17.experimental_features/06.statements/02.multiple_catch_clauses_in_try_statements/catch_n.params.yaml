# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # Ex catch goes twice
  - defs: |-
      class Ex extends Exception {}
      class Er extends Error {}

    use: |-
      try {
          if (1 != 2) throw new Ex();
          return 0;
      } catch (e1: Ex) {
          return 0;
      } catch (f: Er) {
          return 0;
      } catch (e2: Ex) {
          return 0;
      } catch (e) {
          return 0;
      }
      return 0;

  # default catch is not the last
  - defs: |-
      class Ex extends Exception {}
      class Er extends Error {}

    use: |-
      try {
          if (1 != 2) throw new Ex();
          return 0;
      } catch (e: Ex) {
          return 0;
      } catch (e) {
          return 0;
      } catch (f: Er) {
          return 0;
      }
      return 0;

  # Ez is not an exception nor error
  - defs: |-
      class Ez {}
      class Er extends Error {}

    use: |-
      try {
          if (1 != 2) throw new Er();
          return 0;
      } catch (e: Ez) {
          return 0;
      } catch (f: Er) {
          return 0;
      }
      return 0;

  # main is not a throwing function but try doesn't have default catch clause
  - defs: |-
      class Ex extends Exception {}
      class Fx extends Exception {}

    use: |-
      try {
          if (1 != 2) throw new Fx();
          return 0;
      } catch (e: Ex) {
          return 0;
      }
      return 0;

  # parameterized class is not allowed
  - defs: |-
      class Ex<T> extends Exception {}

    use: |-
      let exc: Ex<Long> = new Ex<Long>();
      try {
          if (1 != 2) throw exc;
          return 0;
      } catch (e: Ex<Long>) {
          return 0;
      } catch (e) {
          return 0;
      }
      return 0;
