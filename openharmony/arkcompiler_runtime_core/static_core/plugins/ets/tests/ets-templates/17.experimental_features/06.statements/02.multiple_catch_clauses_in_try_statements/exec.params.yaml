# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  # exception propagation to caller context
  - defs: |-
      class Ex extends Exception {}
      function foo(e: Ex, cnt: int): Ex throws {
          if (cnt > 0) throw foo(e, --cnt);
          return e;
      }
    use: |-
      try {
          foo(new Ex(), 100);
      } catch (e: Ex) {
          return 0;
      } catch (def) {
          return 1;
      }
      return 1;

  # error propagation to caller context
  - defs: |-
      class Ex extends Error {}
      function foo(e: Ex, cnt: int): Ex {
          if (cnt > 0) throw foo(e, --cnt);
          return e;
      }
    use: |-
      try {
          foo(new Ex(), 100);
      } catch (e: Ex) {
          return 0;
      } catch (def) {
          return 1;
      }
      return 1;

  # UncatchedExceptionError
  - defs: |-
      class Ex extends Exception {}
      function foo(): void {
          try {
              if (1 != 2) throw new Exception();
          } catch (e: Ex) {
              return;
          } catch (e) {
              return;
          }
      }
    use: |-
      try {
          foo();
      } catch (e: UncatchedExceptionError) {
          return 0;
      } catch (def) {
          return 1;
      }
      return 1;

# default catch for exceptions
  - defs: |-
      interface I {}
      class Ex extends Exception implements I {}
      class F extends Exception implements I {}
    use: |-
      let exc: I = new Ex();
      try {
          if (1 != 2) throw exc as Exception;
      } catch (f: F) {
          return 1;
      } catch (def) {
          return 0;
      }
      return 1;

# default catch for errors
  - defs: |-
      interface I {}
      class Ex extends Error implements I {}
      class F extends Error implements I {}
    use: |-
      let err: I = new Ex();
      try {
          if (1 != 2) throw err as Error;
      } catch (f: F) {
          return 1;
      } catch (def) {
          return 0;
      }
      return 1;

# assignment compatible to exception
  - defs: |-
      interface I {}
      class Ex extends Exception implements I {}
    use: |-
      let exc: I = new Ex();
      try {
          if (1 != 2) throw exc as Exception;
      } catch (e: Ex) {
          return 0;
      } catch (def) {
          return 1;
      }
      return 1;

# assignment compatible to error
  - defs: |-
      interface I {}
      class Ex extends Error implements I {}
    use: |-
      let err: I = new Ex();
      try {
          if (1 != 2) throw err as Error;
      } catch (e: Ex) {
          return 0;
      } catch (def) {
          return 1;
      }
      return 1;
