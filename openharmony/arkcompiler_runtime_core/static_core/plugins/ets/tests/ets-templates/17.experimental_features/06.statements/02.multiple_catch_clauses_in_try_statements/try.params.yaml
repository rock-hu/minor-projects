# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - use: |-
        try {
              if (t1 != t2) throw new Fx();
              return 1;
          } catch (e: Ex) {
              return 1;
          } catch (x: X) {
              return 1;
          } catch (f: Fx) {
              return f instanceof Fx ? 0 : 1;  // expected
          } catch (y: Y) {
              return 1;
          } catch (e) {
              return 1;
          }

    - use: |-
          // empty try block
          try {} catch (e: X) { return 1; } catch (e: Y) { return 1 }
          catch (e: Fx) { return 1 } catch (e: Ex) { return 1 } catch (e) { return 1 }
          return 0;

    - use: |-
          // empty catch block
          try {
              if (t1 != t2) throw new Ex()
          } catch (e: X) {
          } catch (e: Y) {
          } catch (e) {
          } finally {
              return 0;
          }

    - use: |-
          // empty finally block
          try {
              if (t1 != t2) throw new Ex()
              return 1;
          } catch (e: Fx) {
              return 1;
          } catch (e: X) {
              return 1;
          } catch (e) {
              return 0;
          } finally {
          }

    - defs: |-
        function catch(e: Exception) throws { // catch is a soft keyword
            throw e;
        }
      use: |-
        let e: Exception = new Exception();
        try {
            try {
                  if (t1 == t2) throw new Fx();
              } catch (f: Fx) {
                  return 1;
              } catch (y: Y) {
                  return 1;
              } catch (e)   // function call
              {
                  // empty block
              }
        } catch (e1) {
            return e1 === e ? 0 : 1;
        }
        return 1;
