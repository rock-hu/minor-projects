# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
  - defs: |-
      function foo() {}
      function foo(): void {}

  - defs: |-
      function foo(): void throws {}
      function foo(): void {}

  - defs: |-
      function foo(): int {
        return 0;
      }
      native function foo(): void;

  - defs: |-
      function foo(): int {
        return 0;
      }
      function foo(): short {
        return 0 as short;
      }

  - defs: |-
      function foo(... a: byte): void {}
      native function foo(... b: byte): long;

  - defs: |-
      function foo<T, U>(a: T, b: U): T {
        return a;
      }
      function foo<V, T>(a: V, b: T): V {
        return a;
      }

  - defs: |-
      function foo<T, U>(a: T, b: U): T {
        return a;
      }
      function foo<V, T>(a: V, b: T): int {
        return 1;
      }

  - defs: |-
      function foo<T>(a: T) throws {
        throw ArithmeticError;
      }
      function foo<T>(a: T) {
        return;
      }

  - defs: |-
      function bar<T>(a: T) throws {
        throw ArithmeticError;
      }
      function foo<V>(a: (a: V) throws) rethrows {}
      function foo<T>(a: (a: T) throws) rethrows {}

  - defs: |-
      interface I {}
      interface J {}
      class A implements I, J {}

      function foo(a: I): int {
          return 1;
      }
      function foo(a: J): int {
          return 2;
      }
    use: |-
      let i: int = foo(new A());

  - defs: |-
      class A {}
      class B {}

      function foo(a: A|null): int {
          return 1;
      }
      function foo(a: B|null): int {
          return 2;
      }
    use: |-
      let i: int = foo(null);

  - defs: |-
      function foo(...p: int[]): int {
          return 1;
      }
      function foo(...p: boolean[]): int {
          return 2;
      }
    use: |-
      let i: int = foo(1, true)

  - defs: |-
      function foo(...p: int[]): int {
          return 1;
      }
      function foo(...p: boolean[]): int {
          return 2;
      }
    use: |-
      let i: int = foo()

  - defs: |-
      function foo(...p: int[]): int {
          return 1;
      }
      function foo(...p: long[]): int {
          return 2;
      }
    use: |-
      let i: int = foo()

  - defs: |-
       function foo(...p: int[]): int {
           return 1;
       }
       function foo(...p: boolean[]): int {
           return 2;
       }
    use: |-
      let i: int = foo()

  - defs: |-
      function foo(...p: float[]): int {
          return 1;
      }
      function foo(...p: double[]): int {
          return 2;
      }
    use: |-
      let i: int = foo()
