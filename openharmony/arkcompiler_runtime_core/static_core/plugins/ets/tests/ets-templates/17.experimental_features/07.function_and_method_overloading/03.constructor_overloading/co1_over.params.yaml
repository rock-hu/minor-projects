# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          // override-equivalent signatures
          class A {
              constructor(p: number) {}
              constructor(v: double) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          class A {
              constructor(p: Number) {}
              constructor(v: Double) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          class A {
              constructor(p: String) {}
              constructor(v: string) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          type B = A
          // override-equivalent signatures
          class A {
              constructor(p: A) {}
              constructor(v: B) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          type B = A
          // override-equivalent signatures
          class A {
              constructor(p: A|string) {}
              constructor(v: string|B) {}
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          // primitives and boxed
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: byte) { this.t = "byte" }
              constructor(p: Byte) { this.t = "Byte" }
              constructor(p: short) { this.t = "short" }
              constructor(p: Short) { this.t = "Short" }
              constructor(p: int) { this.t = "int" }
              constructor(p: Int) { this.t = "Int" }
              constructor(p: long) { this.t = "long" }
              constructor(p: Long) { this.t = "Long" }
              constructor(p: char) { this.t = "char" }
              constructor(p: Char) { this.t = "Char" }
              constructor(p: boolean) { this.t = "boolean" }
              constructor(p: Boolean) { this.t = "Boolean" }
              constructor(p: float) { this.t = "float" }
              constructor(p: Float) { this.t = "Float" }
              constructor(p: double) { this.t = "double" }
              constructor(p: Double) { this.t = "Double" }
          }
      use: |-
          assert(new A(new Byte(-1 as byte)).getType() == "Byte")
          assert(new A(new Short(-1 as short)).getType() == "Short")
          assert(new A(new Int(-1 as int)).getType() == "Int")
          assert(new A(new Long(-1 as long)).getType() == "Long")
          assert(new A(new Char(c'A')).getType() == "Char")
          assert(new A(new Boolean(false)).getType() == "Boolean")
          assert(new A(new Float(3.14 as float)).getType() == "Float")
          assert(new A(new Double(3.14)).getType() == "Double")
          assert(new A(-1 as long).getType() == "long")
          assert(new A(-1).getType() == "int")
          assert(new A(-1 as short).getType() == "short")
          assert(new A(-1 as byte).getType() == "byte")
          assert(new A(c'A').getType() == "char")
          assert(new A(false).getType() == "boolean")
          assert(new A(3.14).getType() == "double")
          assert(new A(3.14 as float).getType() == "float")

    - decl: |-
          // primitives and boxed with sub/superclass
          class B {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: byte) { this.t = "byte" }
              constructor(p: Byte) { this.t = "Byte" }
              constructor(p: short) { this.t = "short" }
              constructor(p: Short) { this.t = "Short" }
              constructor(p: int) { this.t = "int" }
              constructor(p: Int) { this.t = "Int" }
              constructor(p: long) { this.t = "long" }
              constructor(p: Long) { this.t = "Long" }
              constructor(p: char) { this.t = "char" }
              constructor(p: Char) { this.t = "Char" }
              constructor(p: boolean) { this.t = "boolean" }
              constructor(p: Boolean) { this.t = "Boolean" }
              constructor(p: float) { this.t = "float" }
              constructor(p: Float) { this.t = "Float" }
              constructor(p: double) { this.t = "double" }
              constructor(p: Double) { this.t = "Double" }
          }
          class A extends B {
              constructor(p: Object) { super(p) }
              constructor(p: byte) { super(p) }
              constructor(p: Byte) { super(p) }
              constructor(p: short) { super(p) }
              constructor(p: Short) { super(p) }
              constructor(p: int) { super(p) }
              constructor(p: Int) { super(p) }
              constructor(p: long) { super(p) }
              constructor(p: Long) { super(p) }
              constructor(p: char) { super(p) }
              constructor(p: Char) { super(p) }
              constructor(p: boolean) { super(p) }
              constructor(p: Boolean) { super(p) }
              constructor(p: float) { super(p) }
              constructor(p: Float) { super(p) }
              constructor(p: double) { super(p) }
              constructor(p: Double) { super(p) }
          }
      use: |-
          assert(new A(new Byte(-1 as byte)).getType() == "Byte")
          assert(new A(new Short(-1 as short)).getType() == "Short")
          assert(new A(new Int(-1 as int)).getType() == "Int")
          assert(new A(new Long(-1 as long)).getType() == "Long")
          assert(new A(new Char(c'A')).getType() == "Char")
          assert(new A(new Boolean(false)).getType() == "Boolean")
          assert(new A(new Float(3.14 as float)).getType() == "Float")
          assert(new A(new Double(3.14)).getType() == "Double")
          assert(new A(-1 as long).getType() == "long")
          assert(new A(-1).getType() == "int")
          assert(new A(-1 as short).getType() == "short")
          assert(new A(-1 as byte).getType() == "byte")
          assert(new A(c'A').getType() == "char")
          assert(new A(false).getType() == "boolean")
          assert(new A(3.14).getType() == "double")
          assert(new A(3.14 as float).getType() == "float")

    - decl: |-
          // enums
          enum Color { Red, Green=82, Blue }
          enum Size { S="small", M="medium", L="large" }
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: int) { this.t = "int" }
              constructor(p: Color) { this.t = "Color" }
              constructor(p: string) { this.t = "string" }
              constructor(p: Size) { this.t = "Size" }
              constructor(p: short) { this.t = "short" }
          }
      use: |-
          assert(new A(-1).getType() == "int")
          assert(new A(-2 as short).getType() == "short")
          assert(new A(-3 as byte).getType() == "int")
          assert(new A(Color.Red).getType() == "Color")
          assert(new A("abc").getType() == "string")
          assert(new A(Size.L).getType() == "Size")

    - decl: |-
          // arrays
          enum Color { Red, Green = 82, Blue }
          enum Size { S="small", M="medium", L="large" }
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() {}
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: A[]) { this.t = "A" }
              constructor(p: Object[]) { this.t = "Object" }
              constructor(p: byte[]) { this.t = "byte" }
              constructor(p: short[]) { this.t = "short" }
              constructor(p: int[]) { this.t = "int" }
              constructor(p: long[]) { this.t = "long" }
              constructor(p: char[]) { this.t = "char" }
              constructor(p: boolean[]) { this.t = "boolean" }
              constructor(p: float[]) { this.t = "float" }
              constructor(p: double[]) { this.t = "double" }
              constructor(p: Byte[]) { this.t = "Byte" }
              constructor(p: Short[]) { this.t = "Short" }
              constructor(p: Int[]) { this.t = "Int" }
              constructor(p: Long[]) { this.t = "Long" }
              constructor(p: Char[]) { this.t = "Char" }
              constructor(p: Boolean[]) { this.t = "Boolean" }
              constructor(p: Float[]) { this.t = "Float" }
              constructor(p: Double[]) { this.t = "Double" }
              constructor(p: Color[]) { this.t = "Color" }
              constructor(p: Size[]) { this.t = "Size" }
          }
      use: |-
          assert(new A([-1 as byte]).getType() == "byte")
          assert(new A([-1 as short]).getType() == "short")
          assert(new A([-1 as int]).getType() == "int")
          assert(new A([-1 as long]).getType() == "long")
          assert(new A([c'A']).getType() == "char")
          assert(new A([false]).getType() == "boolean")
          assert(new A([3.14 as float]).getType() == "float")
          assert(new A([3.14]).getType() == "double")
          assert(new A([new Byte(-1 as byte)]).getType() == "Byte")
          assert(new A([new Short(-1 as short)]).getType() == "Short")
          assert(new A([new Int(-1)]).getType() == "Int")
          assert(new A([new Long(-1 as long)]).getType() == "Long")
          assert(new A([new Char(c'A')]).getType() == "Char")
          assert(new A([new Boolean(false)]).getType() == "Boolean")
          assert(new A([new Float(3.14 as float)]).getType() == "Float")
          assert(new A([new Double(3.14)]).getType() == "Double")
          assert(new A([new Object()]).getType() == "Object")
          assert(new A([Color.Red]).getType() == "Color")
          assert(new A([Size.M]).getType() == "Size")
          assert(new A(new A[1]).getType() == "A")

    - decl: |-
          // tuples
          type T = [number, string]
          type R = [number, boolean]
          class B {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() { this.t = "none" }
              protected constructor(p: Object) { this.t = "should never be called" }
              protected constructor(p: T) { this.t = "T" }
              protected constructor(p: R) { this.t = "R" }
              protected constructor(p: number[]) { this.t = "number[]" }
              protected constructor(p: string[]) { this.t = "string[]" }
              protected constructor(p: Boolean) { this.t = "Boolean" }
          }
          class A extends B {
              constructor() {}
              constructor(p: Object) { super(p) }
              constructor(p: T) { super(p) }
              constructor(p: R) { super(p) }
              constructor(p: number[]) { super(p) }
              constructor(p: string[]) { super(p) }
              constructor(p: Boolean) { super(p) }
          }
      use: |-
          assert(new A(new Boolean(true)).getType() == "Boolean")
          assert(new A([3.14, 0.0]).getType() == "number[]")
          let t: T = [3.14, ""]
          assert(new A(t).getType() == "T")
          let r: R = [3.14, false]
          assert(new A(r).getType() == "R")
          assert(new A(["3.14", "xyz"]).getType() == "string[]")
          assert(new A().getType() == "none")

    - decl: |-
          // unions
          type USN = string | number
          type USB = string | Boolean
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() {}
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: USN) { this.t = "USN" }
              constructor(p: USB) { this.t = "USB" }
              constructor(p: string) { this.t = "string" }
              constructor(p: number) { this.t = "number" }
              constructor(p: Boolean) { this.t = "Boolean" }
          }
      use: |-
          assert(new A(new Boolean(false)).getType() == "Boolean")
          assert(new A("").getType() == "string")
          assert(new A(1.0).getType() == "number")
          let usn: USN = "abc"
          assert(new A(usn).getType() == "USN")
          usn = 42.0
          assert(new A(usn).getType() == "USN")
          let usb: USB = new Boolean(true)
          assert(new A(usb).getType() == "USB")
          usb = "xyz"
          assert(new A(usb).getType() == "USB")

    - decl: |-
          // function types
          type FF=(p: number) => string
          type EE=(p: string) => number
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() {}
              constructor(p: Object) { this.t = "should never be called" }
              constructor(p: () => void) { this.t = "void-void" }
              constructor(p: FF) { this.t = "FF" }
              constructor(p: EE) { this.t = "EE" }
          }
          function fff(v: number): string {
              return " " + v + " "
          }
          function eee(v: string): number {
              return v == "" ? 0.0 : 1.0
          }
          function foo() {
              assert(false)
          }
      use: |-
          assert(new A(foo).getType() == "void-void")
          let f: FF = fff
          assert(new A(f).getType() == "FF")
          assert(new A(eee).getType() == "EE")

    - decl: |-
          // Parameter names and return types do not influence overload-equivalence
          type FF=(p: number) => string
          class A {
              constructor(i: (i: number) => void) { return 1 }
              constructor(p: FF) { return 2 }
          }
      use: return
      tags: compile-only, negative

    - decl: |-
          // nullish types
          type S=string
          type SN=string|null
          type SU=string|undefined
          type SNU=string|null|undefined
          class A {
              t: string = ""
              getType(): string {
                  return this.t
              }
              constructor() {}
              constructor(p: Object|null|undefined) { this.t = "should never be called" }
              constructor(p: SN) { this.t = "SN" }
              constructor(p: SU) { this.t = "SU" }
              constructor(p: SNU) { this.t = "SNU" }
              constructor(p: S) { this.t = "S" }
          }
      use: |-
          let s: S = "ABC"
          assert(new A(s).getType() == "S")
          let sn: SN = "ABC"
          assert(new A(sn).getType() == "SN")
          let su: SU = "ABC"
          assert(new A(su).getType() == "SU")
          let snu: SNU = "ABC"
          assert(new A(snu).getType() == "SNU")
          sn = null
          assert(new A(sn).getType() == "SN")
          su = undefined
          assert(new A(su).getType() == "SU")
          snu = undefined
          assert(new A(snu).getType() == "SNU")
