# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
cases:
    - decl: |-
          // empty array
          let arr: int[] = new int[0]
      use: |-
          for (let v: int of arr) res += v
          if (res == "") return 0;

    - decl: |-
          // empty nullable array
          let arr: int[]|null = new int[0]
      use: |-
          for (let v: int of arr!) res += v
          if (res == "") return 0;

    - decl: |-
          // empty nullable array
          let arr: int[]|undefined = new int[0]
      use: |-
          for (const v: int of arr!) res += v
          if (res == "") return 0;

    - use: |-
          // empty string
          for (let v: char of "") res += v
          if (res == "") return 0;

    - decl: |-
          // empty nullable string
          let s: string|null = ""
      use: |-
          for (let v: char of s!) res += v
          if (res == "") return 0;

    - decl: |-
          // empty nullable string
          let s: string|undefined = ""
      use: |-
          for (const v: char of s!) res += v
          if (res == "") return 0;

    - decl: |-
          // array of primitives (char)
          let arr: char[] = [c'1', c'2', c'3']
      use: |-
          for (let v: char of arr) res += v
          if (res == "123") return 0;

    - decl: |-
          // array of primitives (long)
          let arr: long[] = [Long.MIN_VALUE, 0 as long, Long.MAX_VALUE]
      use: |-
          let sum: long = 0
          for (let v: long of arr) sum += v
          if (sum == -1) return 0;

    - use: |-
          // array of primitives (int)
          const v: int = 0;
          for (let v: int of [1,2,3,4]) res += v
          if (res == "1234" && v == 0) return 0;

    - use: |-
          // array of primitives (boolean)
          let v: boolean = true;
          for (const v: boolean of [true, false, false]) res += v
          if (res == "truefalsefalse" && v == true) return 0;

    - decl: |-
          enum Color { Red, Green, Blue }
          // array of enums
          const arr: Color[] = [Color.Green, Color.Red]
      use: |-
          for (let v: Color of arr) res += v
          if (res == "10") return 0;

    - use: |-
          // array of boxed primitives (Char) with implicit unboxing
          for (const ch: char of [new Char(c'1'), new Char(c'2'), new Char(c'3'), new Char(c'4')]) res += ch
          if (res == "1234") return 0;

    - decl: |-
          // array of boxed numeric (Long) with implicit unboxing
          let arr: Long[] = [new Long(10 as long), new Long(12 as long), new Long(33 as long)]
      use: |-
          for (let i: long of arr) res += i
          if (res == "101233") return 0;

    - use: |-
          // array of primitives (int) with implicit boxing
          for (const v: Int of [9, 8, 7, 6, 5]) res += v.unboxed()
          if (res == "98765") return 0;

    - use: |-
          // array of primitives (boolean) with implicit boxing
          for (const v: Boolean of [false, true, true, false]) res += v.unboxed()
          if (res == "falsetruetruefalse") return 0;

    - decl: |-
          // array of boxed numeric (Float) with unboxing and widening conversion
          let arr: Float[] = [new Float(4.0), new Float(-2.0), new Float()]
      use: |-
          let sum: double = 0.0
          for (let v: double of arr) sum += v
          if (sum == 2.0) return 0;

    - decl: |-
          let NUM = 42.0
          let STR = "Hello!"

          interface I {
              getN(): number
          }
          interface J {
              getS(): string
          }
          class A implements I, J {
              getN(): number {
                  return NUM
              }
              getS(): string {
                  return STR
              }
          }
          class B implements J {
              getS(): string {
                  return STR
              }
          }
      use: |-
          // array of Objects with reference widening conversion
          let arr: Object[] = [new B(), new A()]
          let ok = true
          for (let v: Object of arr) {
              if (v instanceof I) {
                  ok &= (v as I).getN() == NUM
              } else if (v instanceof J) {
                  ok &= (v as J).getS() == STR
              }
          }
          if (ok) return 0;

    - decl: |-
          let NUM = 42.0
          interface I {
              getN(): number
          }
          class A implements I {
              getN(): number {
                  return NUM
              }
          }
      use: |-
          // array of objects with reference widening conversion
          let arr: A[] = [new A(), new A()]
          let ok = true
          for (let v: I of arr) {
              res += v.getN()
          }
          if (res == "4242") return 0;

    - use: |-
          // array of unions
          let arr: (number|boolean)[] = [true, false, 1.0, 2.0]
          for (const v: (number|boolean) of arr) {
              if (v instanceof Number) res += v as Number
              if (v instanceof Boolean) res += v as Boolean
          }
          if (res == "truefalse12") return 0

    - decl: |-
          type U=number|boolean
      use: |-
          // array of unions with type alias
          let arr: U[] = [true, 1.0, false, 2.0]
          for (const v: U of arr) {
              if (v instanceof Number) res += v as Number
              if (v instanceof Boolean) res += v as Boolean
          }
          if (res == "true1false2") return 0

    - decl: |-
          // array of arrays
          let arr: int[][] = [[1,2,3], [4,5,6], [7,8,9]]
      use: |-
          for (const v: int[] of arr) {
              res += ' '
              for (const q: int of v)
                  res += q
          }
          if (res == " 123 456 789") return 0;

    - decl: |-
          // array of strings
          let arr: string[] = ["ABC", "DEF", "GHJ"]
      use: |-
          for (let v: string of arr)
              for (let q: char of v)
                  res += q + " "
          if (res == "A B C D E F G H J ") return 0

    - decl: |-
          // function, implicit widening conversion: byte -> int
          let foo: () => byte[] = ():byte[] => { return [42 as byte, 43 as byte] }
      use: |-
          for (let v: int of foo()) res += new Int(v)
          if (res == "4243") return 0;

    - use: |-
          // expression with strings
          let ch: char = c'X'
          for (let ch: char of "A" + "B" + "CD") {
              res += ch
              ch = c' '
              res += ch
          }
          if (res == "A B C D " && ch == c'X') return 0;

    - decl: |-
          function foo<T extends String>(s: T): T[] {
              return [s, s, s];
          }
      use: |-
          // function with generics, String array
          for (let v: String of foo<String>("AZ")) {
              res += "-"
              for (let q: Char of v) {
                  res += q.unboxed()
              }
          }
          if (res == "-AZ-AZ-AZ") return 0;

    - decl: |-
          enum Color { Red, Green, Blue }
          // array of tuples
          let arr: [number, Color][] = [[42.0, Color.Red], [43.0, Color.Blue]]
      use: |-
          for (const v: [number, Color] of arr) {
              res += v[0]
              res += v[1]
          }
          if (res == "420432") return 0

    - decl: |-
          type T=[number, boolean]
          // array of tuples with type alias
          let arr: T[] = [[42.0, true], [43.0, false]]
      use: |-
          for (const v: T of arr) {
              res += v[0]
              res += v[1]
          }
          if (res == "42true43false") return 0

    - decl: |-
          let data: number[] = [7.0, 8.0, 9.0]
          class A implements Iterator<Number> {
              index = 0

              $_iterator() {
                  this.index = 0
                  return this
              }

              next(): IteratorResult<Number> {
                  return {
                      done: this.index >= data.length,
                      value: this.index >= data.length ? undefined : data[this.index++]
                  }
              }
          }
      use: |-
          // iterable object
          for (let v: number of new A()) {
              res += v
          }
          if (res == "789") return 0
