# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          // override-equivalent signatures, different return types
          class A {
              meth(p: double): string { return "" + p }
              meth(p: number): Error { return new Error() }
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          type B = A
          // override-equivalent signatures, different return types
          class A {
              meth(p: A): string { return "" }
              meth(p: B): B { return p }
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          // override-equivalent signatures, different return types
          class A {
              meth(p: A|string|null): Error { return new Error() }
              meth(p: string|A|null): string { return "" + p }
          }
      use: return
      tags: negative, compile-only

    - decl: |-
          // primitives and boxed, different return types
          class A {
              meth(p: Byte): Byte { return Byte.MAX_VALUE as Byte }
              meth(p: short): short { return Short.MIN_VALUE }
              meth(p: Int): Int { return Int.MAX_VALUE as Int }
              meth(p: long): long { return Long.MIN_VALUE }
              meth(p: Char): Char { return Char.MAX_VALUE as Char }
              meth(p: boolean): boolean { return false as boolean }
              meth(p: Float): Float { return Float.MAX_VALUE as Float }
              meth(p: double): double { return Double.MIN_VALUE }
          }
      use: |-
          let a: A = new A()
          assertEQ( a.meth(new Byte(-1 as byte)), Byte.MAX_VALUE )
          assertEQ( a.meth(new Int(-1 as int)), Int.MAX_VALUE )
          assertEQ( a.meth(new Char(c'A')), Char.MAX_VALUE )
          assertEQ( a.meth(new Float(3.14 as float)), Float.MAX_VALUE )
          assertEQ( a.meth(-1 as long), Long.MIN_VALUE )
          assertEQ( a.meth(-1 as short), Short.MIN_VALUE )
          assertEQ( a.meth(false), false )
          assertEQ( a.meth(3.14), Double.MIN_VALUE )

    - decl: |-
          // arrays of primitives and boxed, different return types
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              meth(p: byte[]): byte { if (p.length == 0) throw ex; else return Byte.MIN_VALUE }
              meth(p: Byte[]): Byte { return Byte.MAX_VALUE as Byte }
              meth(p: short[]): short { return Short.MIN_VALUE }
              meth(p: Short[]): Short { if (p.length == 0) throw ex; else return Short.MAX_VALUE as Short }
              meth(p: int[]): int { if (p.length == 0) throw ex; else return Int.MIN_VALUE }
              meth(p: Int[]): Int { return Int.MAX_VALUE as Int }
              meth(p: long[]): long { return Long.MIN_VALUE }
              meth(p: Long[]): long { if (p.length == 0) throw ex; else return Long.MAX_VALUE as Long }
              meth(p: char[]): char { if (p.length == 0) throw ex; else return Char.MIN_VALUE as char }
              meth(p: Char[]): Char { return Char.MAX_VALUE as Char }
              meth(p: boolean[]): boolean { return false }
              meth(p: Boolean[]): Boolean { return true as Boolean }
              meth(p: float[]): float { if (p.length == 0) throw ex; else return Float.MIN_VALUE }
              meth(p: Float[]): Float { return Float.MAX_VALUE as Float }
              meth(p: double[]): double { return Double.MIN_VALUE }
              meth(p: Double[]): Double { if (p.length == 0) throw ex; else return Double.MAX_VALUE as Double }
          }
      use: |-
          let a: A = new A()
          try {
              assertEQ( a.meth([new Byte(-1 as byte)]), Byte.MAX_VALUE )
              assertEQ( a.meth([new Short(-1 as short)]), Short.MAX_VALUE )
              assertEQ( a.meth([new Int(-1 as int)]), Int.MAX_VALUE )
              assertEQ( a.meth([new Long(-1 as long)]), Long.MAX_VALUE )
              assertEQ( a.meth([new Char(c'A')]), Char.MAX_VALUE )
              assertEQ( a.meth([new Boolean(false)]), true )
              assertEQ( a.meth([new Float(3.14 as float)]), Float.MAX_VALUE )
              assertEQ( a.meth([new Double(3.14)]), Double.MAX_VALUE )
              assertEQ( a.meth([-1 as long]), Long.MIN_VALUE )
              assertEQ( a.meth([-1 as int]), Int.MIN_VALUE )
              assertEQ( a.meth([-1 as short]), Short.MIN_VALUE )
              assertEQ( a.meth([-1 as byte]), Byte.MIN_VALUE )
              assertEQ( a.meth([c'A']), Char.MIN_VALUE )
              assertEQ( a.meth([false]), false )
              assertEQ( a.meth([3.14]), Double.MIN_VALUE )
              assertEQ( a.meth([3.14 as float]), Float.MIN_VALUE )
          } catch (e) {
              assertTrue( false, "Unexpected error" )
          }

    - decl: |-
          // enums, different return types
          enum Color { Red, Green=82, Blue }
          enum Size { S="small", M="medium", L="large" }
          enum Status { ready, set, go }
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              meth(p: Color): void { if (p.valueOf() >= 2) throw ex }
              meth(p: Size): string { return "Size" }
              meth(p: Status): Size { if (p.valueOf() >= 2) throw ex; else return Size.L }
          }
      use: |-
          let a: A = new A()
          try {
              a.meth(Color.Red)
              assertEQ( a.meth(Size.L), "Size" )
              assertEQ( a.meth(Status.ready), Size.L )
          } catch (e) {
              assertTrue( false, "Unexpected error" )
          }

    - decl: |-
          // tuples, different return types
          type T = [number, string]
          type R = [number, boolean]
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              meth(p: Object): string { return "" } // should never be called
              meth(p: T): int { return 33 }
              meth(p: R): string { if (p[0] == 0) throw ex; else return "R" }
          }
      use: |-
          let a: A = new A()
          try {
              let t: T = [3.14, "abc"]
              assertEQ( a.meth(t), 33 )
              let r: R = [3.14, false]
              assertEQ( a.meth(r), "R" )
              t = [42.0, "xyz"]
              assertEQ( a.meth(t), 33 )
              r = [42.0, true]
              assertEQ( a.meth(r), "R" )
          } catch (e) {
              assertTrue( false, "Unexpected error" )
          }

    - decl: |-
          // unions, different return types
          type U=number|string
          type V=Boolean|Double
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              meth(p: Object): string { return "" } // should never be called
              meth(p: U): int {
                  if (p instanceof Number) {
                      throw ex
                  } else {
                      return 333
                  }
              }
              meth(p: V): number { return 1.0 }
          }
      use: |-
          let a: A = new A()
          try {
              let u: U = "3.14"
              assertEQ( a.meth(u), 333 )
              let v: V = new Boolean(true)
              assertEQ( a.meth(v), 1.0 )
              v = new Double(1.5)
              assertEQ( a.meth(v), 1.0 )
          } catch (e) {
              assertTrue( false, "Unexpected error" )
          }

    - decl: |-
          // function types, different return types
          type FF=(p: number) => string
          type EE=(p: string) => number
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              meth(p: Object): string { return "" } // should never be called
              meth(p: FF): string {
                  if (ex instanceof Ex) {
                      return "FF"
                  } else {
                      throw ex
                  }
              }
              meth(p: EE): int { return 12 }
          }
          function fff(v: number): string {
              return " " + v + " "
          }
          function eee(v: string): number {
              return v == "" ? 0.0 : 1.0
          }
      use: |-
          let a: A = new A()
          try {
              assertEQ( a.meth(fff), "FF" )
              assertEQ( a.meth(eee), 12 )
          } catch (e) {
              assertTrue( false, "Unexpected error" )
          }

    - decl: |-
          // nullish types with different return types
          type S=string
          type SN=string|null
          type SU=string|undefined
          type SNU=string|null|undefined
          class Ex extends Error {}
          let ex: Ex = new Ex()
          class A {
              meth(p: Object|null|undefined): string { return "" } // should never be called
              meth(p: SN): string { if (ex instanceof Ex) return "SN"; else throw ex }
              meth(p: SU): number { return 1.0 }
              meth(p: SNU): boolean { if (p==null) throw ex; else return true }
              meth(p: S): Error { return ex }
          }
      use: |-
          let a: A = new A()
          try {
              let s: S = "ABC"
              assertEQ( a.meth(s), ex )
              let sn: SN = "ABC"
              assertEQ( a.meth(sn), "SN" )
              let su: SU = "ABC"
              assertEQ( a.meth(su), 1.0 )
              let snu: SNU = "ABC"
              assertEQ( a.meth(snu), true )
              sn = null
              assertEQ( a.meth(sn), "SN" )
              su = undefined
              assertEQ( a.meth(su), 1.0 )
              snu = undefined
              assertEQ( a.meth(snu), true )
          } catch (e) {
              assertTrue( false, "Unexpected error" )
          }
