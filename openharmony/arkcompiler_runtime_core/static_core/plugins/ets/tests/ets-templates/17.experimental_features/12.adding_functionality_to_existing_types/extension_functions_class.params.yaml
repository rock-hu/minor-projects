# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # 0. Regular extension functions
    - decl: |-
          class A {}
          function test(this:A, n: int) { return n }
      use: |-
          let a = new A()
          assertEQ( a.test(99), 99 )

    # 1. Extension functions with different signatures
    - decl: |-
          class A {}
          function test(this: A, n: double) { return 1 }
          function test(this: A, n: string) { return 2 }
          function test(this: A, n: int) { return 3 }
      use: |-
          let a = new A()
          assertEQ( a.test(1), 3 )
          assertEQ( a.test(14.1), 1 )
          assertEQ( a.test("test"), 2 )

    # 2. Extension function working with class member
    - decl: |-
          class A { n1: int = 10 }
          function test(this: A) { return this.n1 }
      use: |-
          let a = new A()
          assertEQ( a.test(), 10 )

    # 3. Extension function working with class member function
    - decl: |-
          class A { 
              sum(n1: int, n2: int) {
                return n1 + n2
              }
          }
          function test(this: A, n1: int, n2: int) { 
              return this.sum(n1, n2) 
          }
      use: |-
          let a = new A()
          assertEQ( a.test(99, 100), 199 )

    # 4. Extension function is shadowed by a class member function
    - decl: |-
          class A {
              goo() : int { return this.test() }
              private test(): int { return 1 }
          }
          function test(this: A): int { return 2 }
      use: |-
          let a = new A()
          assertEQ( a.test(), 2 )
          assertEQ( a.goo(), 1 )

    # 5. Extension function and member function with different signatures
    - decl: |-
          class A {
              test(n: long): int { return 1 }
          }
          function test(this: A, n: double): int { return 2 }
      use: |-
          let a = new A()
          assertEQ( a.test(4140100.0), 2 )
          assertEQ( a.test(4140100), 1 )

    # 6. Extension function for built-in class
    - decl: |-
          function test_add(this: Long, n: long): long { 
              return this as long  + n
          }
      use: |-
          let a: Long = 1002000
          assertEQ( a.test_add(444), 1002444 )