# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # regular lambda cases as baseline for trailing lambda
    - decl: |-
          let globl: number = 0.0
          function foo(n: number, f: () => void) {
              f()
              globl += n
          }
      use: |-
          // regular lambda
          foo(10.0, () => {
              globl = 3.0
          })
          assert globl == 13.0

    - decl: |-
          type FF = () => void
          let globl: number = 0.0
          function foo(n: number, f?: FF) { // optional
              f?.()
              globl += n
          }
      use: |-
          // regular lambda
          foo(10.0, () => {
              globl = 3.0
          })
          assert globl == 13.0

          foo(10.0)
          assert globl == 23.0

    # trailing lambda cases
    - decl: |-
          type FF = () => void
          let globl: number = 0.0
          function foo(n: number, f: FF) {
              f()
              globl += n
          }
      use: |-
          foo(10.0)  // trailing lambda
          {
              globl = 3.0
          }
          assert globl == 13.0

    - decl: |-
          let globl: number = 0.0
          function foo(n: number, f?: () => void) { // optional
              f?.()
              globl += n
          }
      use: |-
          foo(10.0)  // trailing lambda
          {
              globl = 3.0
          }
          assert globl == 13.0

          foo(10.0)
          assert globl == 23.0

    # regular lambda cases with extra block afterwards
    - decl: |-
          let globl: number = 0.0
          function foo(n: number, f: () => void) {
              f()
              globl += n
          }
      use: |-
          // regular lambda
          foo(10.0, () => { globl = 3.0 })
          {
              globl = 4.0
          }
          assert globl == 4.0

    - decl: |-
          let globl: number = 0.0
          function foo(n: number, f?: () => void) { // optional
              f?.()
              globl += n
          }
      use: |-
          // regular lambda
          foo(10.0, () => { globl = 3.0 })
          {
              globl = 4.0
          }
          assert globl == 4.0

          foo(10.0) // trailing lambda
          {
              globl = 5.0
          }
          assert globl == 15.0

          foo(10.0)  // no trailing lambda
          assert globl == 25.0

    # regular lambda cases with extra block afterwards separated by a semicolon
    - decl: |-
          let globl: number = 0.0
          function foo(n: number, f: () => void) {
              f()
              globl += n
          }
      use: |-
          // not a trailing lambda, block separated by semicolon
          foo(10.0, () => { globl = 3.0 }); { globl = 4.0 }
          assert globl == 4.0

    - decl: |-
          let globl: number = 0.0
          function foo(n: number, f?: () => void) { // optional
              f?.()
              globl += n
          }
      use: |-
          // not a trailing lambda, block separated with semicolon
          foo(10.0, () => { globl = 3.0 }); { globl = 4.0 }
          assert globl == 4.0

          foo(10.0) { globl = 13.0 }  // trailing lambda
          assert globl == 23.0

          foo(10.0); { globl = 13.0 } // not a trailing lambda
          assert globl == 13.0

    # cases without last function parameter
    - decl: |-
          let globl: number = 0.0
          function foo(n: number) {
              globl += n
          }
      use: |-
          globl = 1.0
          foo(10.0) { globl = 4.0 } // no last function parameter
          assert globl == 4.0

    # trailing lambda as function argument
    - decl: |-
          type FF = () => void
          let globl: number = 0.0
          function foo(n: number, f: FF): number {
              f()
              return globl + n
          }
      use: |-
          globl = 0.0
          assert foo(foo(3.0) { globl = 6.0 }) { globl = 2.0 } == 11.0

    - decl: |-
          type FF = () => void
          let globl: string = ""
          function foo(s: string, f: FF): string {
              f()
              return globl += s
          }
      use: |-
          globl = ""
          assert foo(foo("A") { globl += "B" }) { globl += "C" } == "BACBA"

    - decl: |-
          type FF = () => void
          let globl: number = 0.0
          function foo(n: number, f?: FF): number { // optional
              f?.()
              return globl + n
          }
      use: |-
          globl = 0.0
          assert foo(foo(3.0)
              {
                  globl = 6.0
              }
          ) { globl = 2.0 } == 11.0

          globl = 0.0
          assert foo(foo(3.0) {}) {} == 3.0
          assert foo(foo(3.0)) { globl = 1.0 } == 4.0
          assert foo(foo(3.0) { globl = 1.0 }) == 5.0

    - decl: |-
          type FF = () => void
          let globl: string = ""
          function foo(s: string, f?: FF): string { // optional
              f?.()
              return globl += s
          }
      use: |-
          globl = ""
          assert foo(foo("A") { globl += "B" }) { globl += "C" } == "BACBA"

          globl = ""
          assert foo(foo("A")) {
              globl += "C"
          } == "ACA"

          globl = ""
          assert foo(foo("A") { globl += "B" }) == "BABA"

          globl = ""
          assert foo(foo("A")) == "AA"

    # trailing lambda in object literal
    - decl: |-
          let globl = 0.0
          function foo(n: number, f: () => void) {
              f()
              return globl += n
          }
          class A {
              fld1: number
              fld2: number
          }
      use: |-
          globl = 0.0
          let v: A = { fld1: foo(1.0) { globl = 3.0 }, fld2: foo(2.0) { globl += 5.0 } }
          assert v.fld1 == 4.0 && v.fld2 == 11.0

    # trailing lambda in template literals
    - decl: |-
          let globl = ""
          function foo(s: string, f?: () => void): string {
              f?.()
              return globl + s
          }
      use: |-
          globl = ""
          let s = `abc ${foo("A") { globl = "Z" }} def ${foo("B")} ghi ${foo("C") {}} jkl`
          assert s == "abc ZA def ZB ghi ZC jkl"

    # multiple lambda in parameters
    - decl: |-
          type FF = () => void
          let g1 = 0.0
          let g2 = 0.0
          function foo(f1: FF, f2?: FF): number {
              f1()
              f2?.()
              return g1 + 10.0 * g2
          }
      use: |-
          g1 = 0.0
          g2 = 0.0
          assert foo(() => { g1 = 2.0 }, () => { g2 = 4.0 }) == 42.0
          g1 = 0.0
          g2 = 0.0
          assert foo(() => { g1 = 2.0 }) { g2 = 4.0 } == 42.0
          g1 = 0.0
          g2 = 0.0
          assert foo(() => { g1 = 2.0 }) == 2.0
