# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          // Promise in function argument, no error
          function foo(r: Promise<int>): int {
              return await r
          }
          async function bar(p: int): Promise<int> {
              return p + 1
          }
      use: |-
          assertTrue(foo(bar(1)) == 2)

    - decl: |-
          // Error in launch function propagates outside
          function foo(r: Promise<int>): int {
              return await r
          }
          async function bar(p: int): Promise<int> {
              if (p == 1) {
                  throw new Error('ABC')
              }
              return p + 1
          }
      use: |-
          try {
              foo(bar(1))
              assertTrue(false)
          } catch (e: Error) {
              assertTrue(e.message == 'ABC')  // expected
          } catch (e) {
              assertTrue(false)
          }

    - decl: |-
          // Error in await function propagates outside
          function foo(r: Promise<int>, p: int): int {
              if (p == 1) {
                  throw new Error('ABC')
              }
              return await r
          }
          async function bar(p: int): Promise<int> {
              return p + 1
          }
      use: |-
          try {
              foo(bar(1), 1)
              assertTrue(false)
          } catch (e: Error) {
              assertTrue(e.message == 'ABC')  // expected
          } catch (e) {
              assertTrue(false)
          }

    - decl: |-
          // Error in one promise should not affect other running promises
          async function foo(p: int): Promise<string> {
              if (p == 2) {
                  throw new Error('X')
              }
              return `${p}`
          }

          function bar(p: Promise<string>): string {
              try {
                  return await p
              } catch (e: Error) {
                  return e.message
              }
          }

          let arr: Promise<string>[]
      use: |-
          let res = ''
          arr = [foo(1), foo(2), foo(3)]
          for (let v of arr) res += bar(v)
          assertTrue(res == '1X3')

    - decl: |-
          async function foo(p: string): Promise<string> {
              return p + p
          }
          class A {
              fld: Promise<string>
              constructor() {
                  this.fld = foo('')
                  await this.fld
              }
              constructor(p: Promise<string>) {
                  this.fld = p
              }
              meth(): Promise<string> {
                  return this.fld
              }
          }
          function p1(): Promise<string>|null|undefined { return foo('A') }
          function p2(): Promise<string>|null|undefined { return null }
      use: |-
          // array element
          let arr: Promise<string>[] = [foo('A')]
          assertTrue((await arr[0]) == 'AA')

          // tuple element
          let tup: [boolean, Promise<string>] = [false, foo('A')]
          assertTrue((await tup[1]) == 'AA')

          // union type
          let ut: boolean|number|Promise<string> = foo('A')
          assertTrue((await (ut as Promise<string>)) == 'AA')

          // nullish type
          let nt: Promise<string>|null|undefined = p1()
          assertTrue((await nt!) == 'AA')

          nt = p2()
          try {
              await nt!
              assertTrue(false)
          } catch (e) {
              // OK
          }

          // function call
          let f: (p: Promise<string>) => Promise<string> = (p: Promise<string>): Promise<string> => p
          assertTrue((await f(foo('A'))) == 'AA')

          // instance field
          let a: A = { fld: foo('A') }
          assertTrue((await a.fld) == 'AA')

          // method call
          let b: A = new A(foo('A'))
          assertTrue((await b.meth()) == 'AA')

          // conditional expression
          let expr1 = foo('A')
          let expr2 = foo('B')
          assertTrue(await (a instanceof A ? expr1 : expr2) == 'AA')
          assertTrue(await (!(a instanceof A) ? expr1 : expr2) == 'BB')
