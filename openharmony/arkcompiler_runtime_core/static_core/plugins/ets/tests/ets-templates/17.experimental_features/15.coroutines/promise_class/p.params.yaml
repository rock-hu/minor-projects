# Copyright (c) 2024-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    - decl: |-
          type ON = Object|null
          let s = 'XYZ'
      use: |-
          // test resolving path
          let r: Promise<string> = new Promise<string>(
              (resolve: (p: string) => void, reject: (p: ON) => void): void => {
                  if (s == 'XYZ') {
                      resolve(s)
                  } else {
                      reject(new Error('ABC'))
                  }
              }
          )
          assertTrue((await r) == 'XYZ')

    - decl: |-
          type ON = Object|null
          let s = 'XYZ'
      use: |-
          // test rejection path
          let r: Promise<string> = new Promise<string>(
              (resolve: (p: string) => void, reject: (p: ON) => void): void => {
                  if (s != 'XYZ') {
                      resolve(s)
                  } else {
                      reject(new Error('ABC'))
                  }
              }
          )

          try {
              await r
          } catch (e: Error) {
              assertTrue(e.message == 'ABC')
              return
          }
          assertTrue(false)

    - decl: |-
          type ON = Object|null
          let s = 'XYZ'
      use: |-
          // test throw from resolving path
          let r: Promise<string> = new Promise<string>(
              (resolve: (p: string) => void, reject: (p: ON) => void): void => {
                  if (s == 'XYZ') {
                      throw new Error(s)
                  } else {
                      reject(new Error('ABC'))
                  }
              }
          )

          try {
              await r
          } catch (e: Error) {
              assertTrue(e.message == 'XYZ')
              return
          }
          assertTrue(false)

    - decl: |-
          type ON = Object|null
          let initVal: number = 1.0
      use: |-
          // test then chain, resolved
          let r = new Promise<number>(
              (resolve: (p: number) => void, reject: (p: ON) => void): void => {
                  if (initVal > 0) {
                      resolve(initVal)
                  } else {
                      reject(new Error('A'))
                  }
              }
          ).then<number>(
              (p: number): number => {
                  return p + 10.0
              }
          ).then<number>(
              (p: number): number => {
                  return p + 100.0
              }
          )
          assertTrue((await r) == 111.0)

    - decl: |-
          type ON = Object|null
          let initVal: number = 1.0
      use: |-
          // test catch chain
          let r: Promise<string|number> = new Promise<number>(
              (resolve: (p: number) => void, reject: (p: ON) => void): void => {
                  if (initVal < 0) {
                      resolve(initVal)
                  } else {
                      reject(new Error('A'))
                  }
              }
          ).catch<string>(
              (p: ON): string => {
                  if (initVal > 0) {
                      let e: Error = p! as Error
                      throw new Error(e.message + 'B')
                  }
                  return 'Y'
              }
          ).catch<string>(
              (p: ON): string => {
                  if (initVal > 0) {
                      let e: Error = p! as Error
                      throw new Error(e.message + 'C')
                  }
                  return 'X'
              }
          )

          try {
              await r
          } catch (e: Error) {
              assertTrue(e.message == 'ABC')
              return
          }
          assertTrue(false)

    - decl: |-
          type ON = Object|null
          let initVal: number = 1.0
      use: |-
          // test mixed then and catch chain
          let r: Promise<string> = new Promise<string>(
              (resolve: (p: string) => void, reject: (p: ON) => void): void => {
                  if (initVal > 0) {
                      resolve('A')
                  } else {
                      reject(new Error('B'))
                  }
              }
          ).catch<string>(  // skipped
              (p: ON): string => {
                  if (initVal > 0) {
                      let e: Error = p! as Error
                      throw new Error(e.message + 'C')
                  }
                  return 'D'
              }
          ).then<string>(
              (p: string): string => {
                  return p + 'E'
              },
              (p: ON): string => {
                  return ''
              }
          ).then<string>(
              (p: string): string => {
                  if (initVal > 0) {
                      throw new Error(p + 'F')
                  }
                  return p + 'G'
              },
              (p: ON): string => {
                  return ''
              }
          ).then<string>(  // skipped
              (p: string): string => {
                  return p + 'H'
              }
          ).then<string>(
              (p: string): string => {
                  return p + 'I'
              },
              (p: ON): string => {
                  if (initVal > 0) {
                      let e: Error = p! as Error
                      throw new Error(e.message + 'J')
                  }
                  return 'K'
              }
          )

          try {
              await r
          } catch (e: Error) {
              assertTrue(e.message == 'AEFJ')
              return
          }
          assertTrue(false)

    - decl: |-
          type ON = Object|null
      use: |-
          // ensure verify succeed
          const r1 = new Promise<string>(
              (resolve: (p: string) => void, reject: (p: ON) => void): void => {
                  resolve("Async Data")
              }
          ).then(
              (data:string) => console.log(data)
          );
          await r1;
          const r2 = new Promise<string>(
              (resolve: (p: string) => void, reject: (p: ON) => void): void => {
                  resolve("Async Data")
              }
          ).then(
              (data:string) => { console.log(data) }
          );
          await r2;
          assertTrue(true);
