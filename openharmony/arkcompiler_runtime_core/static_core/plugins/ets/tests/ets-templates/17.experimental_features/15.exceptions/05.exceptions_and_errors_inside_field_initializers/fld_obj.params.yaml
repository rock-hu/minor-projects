# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # negative, throws exception
    - decl: |-
          function foo(p: number): Object throws {
              if (p == 0) {
                  throw new MyException()
              }
              return new Object()
          }
          class A {
              static fld: Object|null|undefined = foo(4.0) // CTE expected
          }
      use: |-
          assert A.fld != null
      tags: 'compile-only, negative'

    # positive, throws error
    - decl: |-
          function foo(p: number): Object {
              if (p == 0) {
                  throw new MyError()
              }
              return new Object()
          }
          class A {
              static fld: Object|null|undefined = foo(4.0)
          }
      use: |-
          assert A.fld != null

    # negative, exception throwing lambda
    - decl: |-
          class A {
              static fld: Object|null|undefined = ((p: number): Object throws => {
                  if (p == 0) {
                      throw new MyException()
                  }
                  return new Object()
              })(4.0)  // CTE expected
          }
      use: |-
          assert A.fld != null
      tags: 'compile-only, negative'

    # positive, error throwing lambda
    - decl: |-
          class A {
              static fld: Object|null|undefined = ((p: number): Object => {
                  if (p == 0) {
                      throw new MyError()
                  }
                  return new Object()
              })(4.0)
          }
      use: |-
          assert A.fld != null

    # negative, rethrows with non-throwing argument
    - decl: |-
          function foo(p: number): Object {
              return new Object()
          }
          function bar(p: (p: number) => Object throws, q: number): Object rethrows {
              return p(q)
          }
          class A {
              static fld: Object|null|undefined = bar(foo, 2.0)  // CTE expected
          }
      use: |-
          assert A.fld != null
      tags: 'compile-only, negative'

    # negative, rethrows with throwing argument
    - decl: |-
          function foo(p: number): Object throws {
              if (p == 0) {
                  throw new MyException()
              }
              return new Object()
          }
          function bar(p: (p: number) => Object throws, q: number): Object rethrows {
              return p(q)
          }
          class A {
              static fld: Object|null|undefined = bar(foo, 2.0)  // CTE expected
          }
      use: |-
          assert A.fld != null
      tags: 'compile-only, negative'

    # negative, rethrows with non-throwing lambda argument
    - decl: |-
          function bar(p: (p: number) => Object throws, q: number): Object rethrows {
              return p(q)
          }
          class A {
              static fld: Object|null|undefined = bar((p: number): Object => new Object(), 2.0)  // CTE expected
          }
      use: |-
          assert A.fld != null
      tags: 'compile-only, negative'

    # negative, rethrows with throwing lambda argument
    - decl: |-
          function bar(p: (p: number) => Object throws, q: number): Object rethrows {
              return p(q)
          }
          class A {
              static fld: Object|null|undefined = bar((p: number): Object throws => {
                  if (p == 0) {
                      throw new MyException()
                  }
                  return new Object()
              }, 2.0)  // CTE expected
          }
      use: |-
          assert A.fld != null
      tags: 'compile-only, negative'
