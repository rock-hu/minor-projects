# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- # Interfaces with static members and type parameters inside
cases:
  - desc: Force return of non-empty generic instance, using object as generic type.
    decl: |-
      class A<T> {
        foo(p: T): T! {
          return p!;
        }
      }
    logic: |-
      let a = new A<Object>();
      let result = a.foo(new Object());
      assertEQ(result!== null && result!== undefined, true);
  - desc: Force return of a non-empty generic instance, Using an inherited union type object | null. 
        Using object as generic type.
    decl: |-
      class A {
          value: string;
          constructor(value: string) {
              this.value = value;
          }
      }

      class B<T extends A | null> {
          foo(p: T): T! {
              return p!;
          }
      }
    logic: |-
      let b = new B<A>();
      let result = b.foo(new A("test"));
      assertEQ(result!== null, true);
  - desc: Force return of a non-empty generic instance, Using an inherited union type object | undefined.
        Using object as generic type.
    decl: |-
      class A {
          value: string;
          constructor(value: string) {
              this.value = value;
          }
      }

      class B<T extends A | undefined> {
          foo(p: T): T! {
              return p!;
          }
      }
    logic: |-
      let b = new B<A>();
      let result = b.foo(new A("test"));
      assertEQ(result!== undefined, true);
  - desc: Force return of a non-empty generic instance, Using an inherited union type object | null. 
        Using null as generic type.
    decl: |-
      class A {
          value: string;
          constructor(value: string) {
              this.value = value;
          }
      }

      class B<T extends A | null> {
          foo(p: T): T! {
              return p!;
          }
      }
    logic: |-
      let b = new B<null>();
      try{
        let result = b.foo(null);
      } catch (e) {}
  - desc: Force return of a non-empty generic instance, Using an inherited union type object | null. 
        Using null as generic type.
    decl: |-
      class A {
          value: string;
          constructor(value: string) {
              this.value = value;
          }
      }

      class B<T extends A | null> {
          foo(p: T): T! {
              return p!;
          }
      }
    logic: |-
      let b = new B<null>();
      try{
        let result = b.foo(null);
      } catch (e) {}
  - desc: Force return of a non-empty generic instance, Using an inherited union type object | undefined. 
        Using undefined as generic type.
    decl: |-
      class A {
          value: string;
          constructor(value: string) {
              this.value = value;
          }
      }

      class B<T extends A | undefined> {
          foo(p: T): T! {
              return p!;
          }
      }
    logic: |-
      let b = new B<undefined>();
      try{
        let result = b.foo(undefined);
      } catch (e) {}