# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
cases:
    # internal access modifier, same-package cases
    - files: './pkg_int_A1/file_A.ets'
      tags: 'compile-only, negative'
      decl: |-
          import { A } from './pkg_int_A1';
      use: |-
          // package module, negative case with internal accessor
          let a = new A
          a.foo = 42
          assertEQ( a.foo, 42 )

    - files: './pkg_int_A1/file_A.ets'
      decl: |-
          import { C } from './pkg_int_A1';
      use: |-
          // package module, positive case with internal accessor, from same-package subclass
          let c = new C
          c.foo = 42
          assertEQ( c.foo, 44 )

    - files: './pkg_int_A1/file_A.ets'
      tags: 'compile-only, negative'
      decl: |-
          import { D } from './pkg_int_A1';
      use: |-
          // package module, negative case with internal accessor, from same-package subclass
          let d = new D
          d.foo = 42
          assertEQ( d.foo, 42 )

    - files: './pkg_int_A2/file_A.ets, ./pkg_int_A2/file_B.ets'
      decl: |-
          import { B } from './pkg_int_A2';
      use: |-
          // package module, positive case with internal accessor, from same-package subclass
          let b = new B
          b.foo = 42
          assertEQ( b.foo, 62 )

    - files: './pkg_int_A2/file_A.ets, ./pkg_int_A2/file_B.ets'
      tags: 'compile-only, negative'
      decl: |-
          import { F } from './pkg_int_A2';
      use: |-
          // package module, negative case with internal accessor, from same-package subclass
          let f = new F
          f.foo = 42
          assertEQ( f.foo, 42 )

    # internal access modifier, other-package cases
    - files: './pkg_int_A1/file_A.ets, ./pkg_int_B1/file.ets'
      tags: 'compile-only, negative'
      decl: |-
          import { K } from './pkg_int_B1';
      use: |-
          // package module, negative case with internal accessor, from other-package subclass
          let k = new K
          k.foo = 42
          assertEQ( k.foo, 42 )

    - files: './pkg_int_A1/file_A.ets, ./pkg_int_B2/file.ets'
      tags: 'compile-only, negative'
      decl: |-
          import { L } from './pkg_int_B2';
      use: |-
          // package module, negative case with internal accessor, from other-package subclass
          let l = new L
          l.foo = 42
          assertEQ( l.foo, 42 )

    - files: './pkg_int_A1/file_A.ets, ./pkg_int_B3/file.ets'
      decl: |-
          import { M } from './pkg_int_B3';
      use: |-
          // package module, positive case with internal accessor, from other-package subclass
          let m = new M
          m.foo = 42
          assertEQ( m.foo, 62 )

    - files: './pkg_int_A1/file_A.ets, ./pkg_int_B4/file.ets'
      decl: |-
          import { N } from './pkg_int_B4';
      use: |-
          // package module, positive case with internal accessor, from other-package subclass
          let n = new N
          n.foo = 42
          assertEQ( n.foo, 44 )
