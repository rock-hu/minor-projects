# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

category: Array
sub:
  - self:
      - Array.of<number>(0, -0.0, 4, 1, 2, -1, Infinity, 11, -Infinity, 1, 21, 111, NaN, -NaN, 0, -0.0)
      - Array.of<number>(0, -0.0, 4, 1, 2, -1, 1, 21, 111, 0, -0.0)
      - Array.of<number>()
    self_type: Array<number>
    vars:
      default_inds: ["self.length", "-self.length", "self.length - 1", "-self.length + 1", 1.1, 5.0, 100.0, -1.1, 2.0, "Infinity", "-Infinity", "NaN", "0x8 as number", "-0o4 as number"]
      default_inds_undef: ["self.length", "-self.length", "self.length - 1", "-self.length + 1", 1.1, 5.0, 100.0, -1.1, 2.0, "Infinity", "-Infinity", "NaN", "0x8 as number", "-0o4 as number", "undefined"]
      default_search: ["NaN", "-NaN", "Infinity", "-Infinity", 0.0, "-0.0", 100, 1]
      reduce_lamdbas:
        - |
          (): number => 1234.0
        - |
          (x: number): number => x
        - |
          (x: number, y: number): number => x * y
        - |
          (x: number, y: number, i: number): number => x - y + i
        - |
          (x: number, y: number, i: number, array: Array<number>): number => y - x + i + array[i]
      reduce_u_lamdbas:
        - |
          (): string => "1234.0"
        - |
          (x: string): string => x
        - |
          (x: string, y: number): string => x + y
        - |
          (x: string, y: number, i: number): string => x + y + i
        - |
          (x: string, y: number, i: number, array: Array<number>): string => y + x + i + array[i]
    sub:
      - method: "concat"
        rest:
          - combinationRest "Array.of<number>(1)", "Array.of<number>()", "Array.of<number>(NaN, 10, Infinity)"
      - method: values
      - method: keys
      - method: entries
        ret_type: Iterable<[number, number]>
      - expr: self.length
      - expr: "0.0"
        setup: |
          ((): void => { self.length = pars })()
        params:
          - paramOf '0.0', '-1.0'
      - method: at
        params:
          - paramOf(*default_inds)
      - method: "with"
        params:
          - paramOf(*default_inds)
          - paramOf(1.0, 12.0, "NaN")
      - method: "fill"
        params:
          - paramOf(1.0, 12.0)
          - paramOf(*default_inds_undef)
          - paramOf(*default_inds_undef)
        mandatory: 1
      - self:
          - |
            Array.of<number>(0, -0.0, 4, 1, 2, -1, Infinity, 11, -Infinity, 1, 21, 111, NaN, -NaN, 0, -0.0)
        sub:
          - method: "copyWithin"
            params:
              - paramOf(*default_inds)
              - paramOf(*default_inds)
              - paramOf(*default_inds_undef)
            mandatory: 2
          - method: "splice"
            ret_type: Array<number>
            params:
              - paramOf(*default_inds)
              - paramOf(*default_inds)
            mandatory: 1
            rest:
              - combinationRest 31, 34, 45
      - method: "slice"
        ret_type: Array<number>
        params:
          - paramOf(*default_inds_undef)
          - paramOf(*default_inds_undef)
        mandatory: 0
      - method: includes
        params:
          - paramOf(*default_search)
          - paramOf(*default_inds_undef)
        mandatory: 1
      - method: indexOf
        params:
          - paramOf(*default_search)
          - paramOf(*default_inds_undef)
        mandatory: 1
      - method: lastIndexOf
        params:
          - paramOf(*default_search)
          - paramOf(*default_inds_undef)
        mandatory: 1
      - method: toString
      - self:
          - Array.of<string>(',', ',', '123')
        method: toString
      - method: join
        params:
           - |
             paramOf("'---'", "''", undefined)
        mandatory: 0
      - method: reverse
      - method: sort
        self:
          - Array.of<number>(0, -0.0, 4, 1, 2, -1, 1, 21, 111, 0, -0.0)
          - Array.of<number>(0.0, 2147483647, -0.0, -2147483648, Infinity, -Infinity)
          - Array.of<number>(0, -0.0, 0.0, -0.0, 0, -0.0, 0.0, -0.0, 0, -0.0, 0.0, -0.0)
        setup: |
          const fn1 = (a: number, b: number): number => b - a
          const fn2 = (a: number, b: number): number => a - b
        params:
          - paramOf 'fn1', 'fn2'
        mandatory: 0
      - method: sort
        self:
          - Array.of<number | string | null | undefined>(0, -0.0, 4, 1, 2, -1, 1, 21, 111, 0, -0.0)
        self_type: Array<number | string | null | undefined>
        setup: |
          const fn1 = (a: number | string | null | undefined, b: number | string | null | undefined): number => new String(a).length - new String(b).length
        params:
          - paramOf 'fn1'
        mandatory: 0
      # tests whenever sort is stable
      - self:
          - Array.of<number>(2, 4, 4, 13, 9, 4, 6, 0, 0, 3, 5, 15, 0, 20, 0, 5, 19, 15, 9, 6, 15, 17, 5, 17, 5, 7, 7, 7, 12, 8, 6, 14, 13, 2, 9, 17, 20, 4, 18, 4, 16, 1, 15, 11, 6, 4, 14, 7, 7, 18, 12, 20, 15, 0, 5, 9, 1, 15, 12, 7, 20, 18, 1, 4, 2)
          - Array.of<number>(2, 14, 7, 7, 18, NaN, NaN, 15, 12, 7, 20, 18, 1, 4)
        expr: self.sort(pars)
        setup: |
          const fn1 = (a: number, b: number): number => 0
          const fn2 = (a: number, b: number): number => NaN
        params:
          - paramOf 'fn1', 'fn2'
      - self_type: Array<Object | null | undefined>
        self:
          - Array.of<Object | null | undefined>(null, undefined, 1, "123", 'undefined', 'undefine', 'undefined1', 'null', 'nul', 'null1')
        sub:
          - method: toLocaleString
          - method: sort
            ret_type: Array<Object | null | undefined>
      - method: toReversed
      - method: toSorted
      - method: unshift
        rest:
          - emptyRest
          - combinationRest 0.0, 10, 11
      - method: reduce
        mandatory: 1
        params:
          - paramOf *reduce_lamdbas
        #  - paramOf '0.0', 'NaN', '-1.0'
      - method: reduce<string>
        params:
          - paramOf *reduce_u_lamdbas
          - paramOf "'!'"
      - method: reduceRight
        mandatory: 1
        params:
          - paramOf *reduce_lamdbas
        #  - paramOf '0.0', 'NaN', '-1.0'
      - method: reduceRight<string>
        params:
          - paramOf *reduce_u_lamdbas
          - paramOf "'!'"
      - self:
          - Array.of<number>()
          - Array.of<number>(1, 2)
          - Array.of<number>(3, 4, 5)
        self_type: Array<number>
        sub:
          - method: pop
          - method: shift
      - self:
          - Array.of<Object | null | undefined>(null, undefined, "123", "")
        self_type: Array<Object | null | undefined>
        sub:
          - method: includes
            params:
              - paramOf("null", "undefined", '""', '"123"', 123, "NaN")
              - paramOf(0.0, 1.0, 2.0, 3.0)
            mandatory: 1
          - method: indexOf
            params:
              - paramOf("null", "undefined", '""', '"123"', "NaN")
              - paramOf(0.0, 1.0, 2.0, 3.0)
            mandatory: 1
          - method: values
            ret_type: Iterable<Object | null | undefined>
          - method: keys
          - method: entries
            excluded: true # es2panda parser fails
            ret_type: Iterable<[number, Object | null | undefined]>
      - self: null
        sub:
          - expr: Array.of<number>(pars).length
            rest:
              - combinationRest 1, 2, 3, 'NaN'
          - expr: Array.of<number>(pars)
            rest:
              - combinationRest 1, 2, 3, 'NaN'
          - method: Array.of<number>
            rest:
              - combinationRest "NaN", "10.0", "Infinity"
            ret_type: Array<number>
          - expr: Array.from<Number>([1 as Number, 2 as Number, 3 as Number])
          - expr: Array.from<number>(pars)
            params:
              -
                - Array.of<number>(1, 2, 3, NaN)
                - new Set<number>(Array.of<number>(1, 2, 3, NaN))
          - expr: Array.from<number, number>(pars)
            params:
              -
                - Array.of<number>(1, 2, 3, NaN)
                - new Set<number>(Array.of<number>(1, 2, 3, NaN))
              -
                - |
                  (v: number, k: number): number => v * k
                - |
                  (v: number, k: number): number => v / (k + 1)
          - expr: Array.from<number, string>(pars)
            params:
              -
                - Array.of<number>(1, 2, 3, NaN)
                - new Set<number>(Array.of<number>(1, 2, 3, NaN))
              -
                - |
                  (v: number, k: number): string => '' + v + k
          - expr: new Array<string>(pars)
            rest:
              - combinationRest ''.inspect, '123'.inspect, "!@#".inspect
          - expr: Array.from<string>(pars)
            params:
              -
                - |
                  '\uD842'
                - |
                  '\uDFB7'
                - |
                  '\uD842a'
                - |
                  '\uDFB7b'
                - |
                  'b\uD842'
                - |
                  'a\uDFB7'
                - |
                  'að ®·b'
      - self: null
        sub:
          - expr: Array<number>().length
            ret_type: number
            expected: 0
          - expr: Array<number>(5).length
            ret_type: number
            expected: 5
          - expr: Array<number>(0).length
            ret_type: number
            expected: 0
