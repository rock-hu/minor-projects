# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

category: ArrayLambdas
sub:
  - self:
      - Array.of<number>(-2, -1, 0, 1, 2)
      - Array.of<number>(2, -2, 1, -1, 0)
      - Array.of<number>(NaN, Infinity, -Infinity, NaN)
    self_type: Array<number>
    vars:
      bool_lambdas:
        - |
          (): boolean => true
        - |
          (): boolean => false
        - |
          (x: number): boolean => true
        - |
          (x: number): boolean => false
        - |
          (x: number): boolean => isNaN(x)
        - |
          (x: number): boolean => x > 0
        - |
          (x: number): boolean => x < 0
        - |
          (x: number): boolean => x == 1
        - |
          (x: number): boolean => x % 2 == 0
        - |
          (x: number): boolean => Math.abs(x) == 1
        - |
          (x: number, i: number, s: Array<number>): boolean => (x + i) > 0
        - |
          (x: number, i: number, s: Array<number>): boolean => (x + i) % 2 == 0
        - |
          (x: number, i: number, s: Array<number>): boolean => i % 2 == 0
        - |
          (x: number, i: number, s: Array<number>): boolean => (x + i) < 0
        - |
          (x: number, i: number, s: Array<number>): boolean => (x + i) == 1
      number_lambdas:
        - |
          (): number => 1234.0
        - |
          (x: number): number => x * 2.0
        - |
          (x: number, i: number): number => x + i
        - |
          (x: number, i: number, s: Array<number>): number => x + i + s[i]
    sub:
      - method: filter
        params:
          - paramOf *bool_lambdas
      - method: every
        params:
          - paramOf *bool_lambdas
      - method: some
        params:
          - paramOf *bool_lambdas
      - method: find
        params:
          - paramOf *bool_lambdas
      - method: findIndex
        params:
          - paramOf *bool_lambdas
      - method: findLast
        params:
          - paramOf *bool_lambdas
      - method: findLastIndex
        params:
          - paramOf *bool_lambdas
      - method: forEach
        ret_type: void
        params:
          -
            - |
              (value: number, index: number, array: Array<number>): void => {
                if (array.length < 15) {
                  array.push(-value)
                }
              }
            - |
              (value: number, index: number): void => { value = value + index }
            - |
              (value: number): void => { value = value + value }
            - |
              (): void => {}
      - method: map<number>
        ret_type: Array<number>
        params:
          - paramOf *number_lambdas
