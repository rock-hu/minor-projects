# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


category: DataView
self:
  - |
    new DataView(new ArrayBuffer(32))
setup: |
  self.setFloat64(0.0, 1.1)
  self.setFloat32(8.0, 1.5)
  self.setInt32(12.0, -1.0)
  self.setInt32(24, 65535)
# self.setBigUint64(16.0, 1n << 63n)
vars:
  default_inds: [-1.0, 0.0, 8.0, 12.0, 16.0, 24.0, 14.0, NaN, Infinity, -Infinity]
  default_ints_set: [-1.0, 0.0, 8.0, 65536, 65535, 16.0, 24.0, 14.0, NaN]
sub:
  ### numeric getters
  - method: getInt8
    params:
      - paramOf(*default_inds)
  - method: getUint8
    params:
      - paramOf(*default_inds)
  - method: getInt16
    params:
      - paramOf(*default_inds)
      - paramOf true, false
    mandatory: 1
  - method: getUint16
    params:
      - paramOf(*default_inds)
      - paramOf true, false
    mandatory: 1
  - method: getInt32
    params:
      - paramOf(*default_inds)
      - paramOf true, false
    mandatory: 1
  - method: getUint32
    params:
      - paramOf(*default_inds)
      - paramOf true, false
    mandatory: 1
  - method: getFloat32
    params:
      - paramOf(*default_inds)
      - paramOf true, false
    mandatory: 1
  - method: getFloat64
    params:
      - paramOf(*default_inds)
      - paramOf true, false
    mandatory: 1

  ### numeric setters
  - method: setInt8
    ret_type: void
    params:
      - paramOf(*default_inds)
      - paramOf(*default_ints_set)
  - method: setUint8
    ret_type: void
    params:
      - paramOf(*default_inds)
      - paramOf(*default_ints_set)
  - method: setInt16
    ret_type: void
    params:
      - paramOf(*default_inds)
      - paramOf(*default_ints_set)
      - paramOf true, false
    mandatory: 2
  - method: setUint16
    ret_type: void
    params:
      - paramOf(*default_inds)
      - paramOf(*default_ints_set)
      - paramOf true, false
    mandatory: 2
  - method: setInt32
    ret_type: void
    params:
      - paramOf(*default_inds)
      - paramOf(*default_ints_set)
      - paramOf true, false
    mandatory: 2
  - method: setUint32
    ret_type: void
    params:
      - paramOf(*default_inds)
      - paramOf(*default_ints_set)
      - paramOf true, false
    mandatory: 2
  - method: setFloat32
    ret_type: void
    params:
      - paramOf(*default_inds)
      - paramOf('1.5', '-3000.21', *default_ints_set.filter { |o| o.kind_of? Float })
      - paramOf true, false
    mandatory: 2
  - method: setFloat64
    ret_type: void
    params:
      - paramOf(*default_inds)
      - paramOf('1.5', '-3000.21', *default_ints_set.filter { |o| o.kind_of? Float })
      - paramOf true, false
    mandatory: 2

  ### floats
  # note that infinity and nan have more than one bit representation and hence not tested here
  - setup: |
      self.setFloat32(0.0, 1.1)
      self.setFloat32(4.0, 1.5)
      self.setFloat64(8.0, -1.0)
      self.setFloat64(16.0, 65536)
    sub:
      - method: getFloat32
        params:
          - paramOf 0.0, 4.0, 8.0, 16.0
          - paramOf true, false
        mandatory: 1
      - method: getFloat64
        params:
          - paramOf 0.0, 4.0, 8.0, 16.0
          - paramOf true, false
        mandatory: 1
  - setup: |
      self.setFloat64(0.0, pars)
    expr: self.getFloat64(0.0)
    params:
      - paramOf 'Infinity', 'NaN', '-Infinity', '1e-30', '1e10'
  - setup: |
      self.setFloat32(0.0, pars)
    expr: self.getFloat32(0.0)
    params:
      - paramOf 'Infinity', 'NaN', '-Infinity', '1e-30', '1e10'
