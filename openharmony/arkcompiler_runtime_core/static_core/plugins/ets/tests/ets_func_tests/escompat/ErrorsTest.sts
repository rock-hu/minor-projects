/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const success = 0;
const fail = 1;

class ErrorCause {
    reason: String = "";
}

function main(): int {
    let failures = 0;

    failures += test(testCreateError(), "Create an Error object with a message");
    failures += test(testThrowError(), "Throw an Error and catch it");
    failures += test(testErrorMessage(), "Validate the message of the caught Error");
    failures += test(testErrorWithCause(), "Error object with cause");
    failures += test(testCreateAggregateError(), "Create an AggregateError object with an array of errors");
    failures += test(testCreateAggregateErrorFromArray(), "Create an AggregateError object with an Array<Error>");
    failures += test(testAggregateErrorMessage(), "Validate the message of the AggregateError");
    failures += test(testEvalError(), "EvalError with message and options");
    failures += test(testRangeError(), "RangeError with message and options");
    failures += test(testReferenceError(), "ReferenceError with message and options");
    failures += test(testSyntaxError(), "SyntaxError with message and options");
    failures += test(testTypeError(), "TypeError with message and options");
    failures += test(testURIError(), "URIError with message and options");
    return test(failures, "All tests run");
}

function testCreateError(): int {
    let err = new Error("Test error");
    let errSc = Error("Test error");
    if (errSc.message == err.message && err.message == "Test error") {
        return success;
    }
    return fail;
}

function testThrowError(): int {
    try {
        throw new Error("Test throw");
    } catch (err: Error) {
        return success;
    }
}

function testErrorMessage(): int {
    try {
        throw new Error("Error message test");
    } catch (err: Error) {
        if (err.message == "Error message test") return success;
        return fail;
    }
}

function testErrorWithCause(): int {
    let cause: ErrorCause = { reason: "Test cause" };
    let err = new Error("Test error with cause", new ErrorOptions(cause));
    let errSc = Error("Test error with cause", new ErrorOptions(cause));
    if (errSc.cause == err.cause && err.cause == cause) {
        return success;
    }
    return fail;
}

function testCreateAggregateError(): int {
    let errors = [new Error("Error 1"), new Error("Error 2")];
    let aggErr = new AggregateError(errors, "Aggregate error message");
    if (aggErr.errors.length != 2 || aggErr.message != "Aggregate error message") {
        return fail;
    }

    // Note(ivan-tyulyandin): the code below has to moved into generated tests
    // after internal issue #20142 is resolved
    const errInArr = [new Error]
    const emptyStr = ""
    const nonEmptyStr = "text"
    const errOpts = new ErrorOptions
    const assertMsg = "length of errors has to be 1"

    // AggregateError(Error)
    aggErr = new AggregateError(errInArr)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])

    // AggregateError(Error, undefined)
    aggErr = new AggregateError(errInArr, undefined)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])
    assertEQ<string, Object|undefined>(emptyStr, aggErr.message)

    // AggregateError(Error, undefined, undefined)
    aggErr = new AggregateError(errInArr, undefined)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])
    assertEQ<string, Object|undefined>(emptyStr, aggErr.message)
    assertEQ<undefined, Object|undefined>(undefined, aggErr.cause)

    // AggregateError(Error, "")
    aggErr = new AggregateError(errInArr, emptyStr)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])
    assertEQ<string, string>(emptyStr, aggErr.message)

    // AggregateError(Error, "text")
    aggErr = new AggregateError(errInArr, nonEmptyStr)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])
    assertEQ<string, string>(nonEmptyStr, aggErr.message)

    // AggregateError(Error, "", undefined)
    aggErr = new AggregateError(errInArr, emptyStr)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])
    assertEQ<string, string>(emptyStr, aggErr.message)
    assertEQ<undefined, Object|undefined>(undefined, aggErr.cause)

    // AggregateError(Error, "text", undefined)
    aggErr = new AggregateError(errInArr, nonEmptyStr, undefined)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])
    assertEQ<string, string>(nonEmptyStr, aggErr.message)
    assertEQ<undefined, Object|undefined>(undefined, aggErr.cause)

    // AggregateError(Error, undefined, ErrorOptions)
    aggErr = new AggregateError(errInArr, undefined, errOpts)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])
    assertEQ<string, Object|undefined>(emptyStr, aggErr.message)
    assertEQ<Object|undefined, Object|undefined>(errOpts.cause, aggErr.cause)

    // AggregateError(Error, "", ErrorOptions)
    aggErr = new AggregateError(errInArr, emptyStr, errOpts)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])
    assertEQ<string, string>(emptyStr, aggErr.message)
    assertEQ<Object|undefined, Object|undefined>(errOpts.cause, aggErr.cause)

    // AggregateError(Error, "text", ErrorOptions)
    aggErr = new AggregateError(errInArr, nonEmptyStr, errOpts)
    assertTrue(aggErr.errors.length == 1, assertMsg)
    assertEQ<Error, Error>(errInArr[0], aggErr.errors[0])
    assertEQ<string, string>(nonEmptyStr, aggErr.message)
    assertEQ<Object|undefined, Object|undefined>(errOpts.cause, aggErr.cause)

    return success;
}

function testCreateAggregateErrorFromArray(): int {
    let errors = Array.from<Error>([new Error("Error 1"), new Error("Error 2")]);
    let aggErr = new AggregateError(errors, "Aggregate error message");
    if (aggErr.errors.length == 2 && aggErr.message == "Aggregate error message") {
        return success;
    }
    return fail;
}

function testAggregateErrorMessage(): int {
    let aggErr = new AggregateError([] as Error[], "Test aggregate error message");
    if (aggErr.message == "Test aggregate error message") {
        return success;
    }
    return fail;
}

function checkMessageAndName(
    err: Error,
    errSc: Error,
    expected_message: string,
    expected_name: string
): boolean {
    return errSc.message == err.message &&
        err.message == expected_message &&
        errSc.name == err.name &&
        err.name == expected_name;
}

function testEvalError(): int {
    let err = new EvalError("Test EvalError", new ErrorOptions("Eval cause"));
    let errSc = EvalError("Test EvalError", new ErrorOptions("Eval cause"));
    if (checkMessageAndName(err, errSc, "Test EvalError", "EvalError")) {
        return success;
    }
    return fail;
}

function testRangeError(): int {
    let err = new RangeError("Test RangeError", new ErrorOptions("Range cause"));
    let errSc = RangeError("Test RangeError", new ErrorOptions("Range cause"));
    if (checkMessageAndName(err, errSc, "Test RangeError", "RangeError")) {
        return success;
    }
    return fail;
}

function testReferenceError(): int {
    let err = new ReferenceError("Test ReferenceError", new ErrorOptions("Reference cause"));
    let errSc = ReferenceError("Test ReferenceError", new ErrorOptions("Reference cause"));
    if (checkMessageAndName(err, errSc, "Test ReferenceError", "ReferenceError")) {
        return success;
    }
    return fail;
}

function testSyntaxError(): int {
    let err = new SyntaxError("Test SyntaxError", new ErrorOptions("Syntax cause"));
    let errSc = SyntaxError("Test SyntaxError", new ErrorOptions("Reference cause"));
    if (checkMessageAndName(err, errSc, "Test SyntaxError", "SyntaxError")) {
        return success;
    }
    return fail;
}

function testTypeError(): int {
    let err = new TypeError("Test TypeError", new ErrorOptions("Type cause"));
    let errSc = TypeError("Test TypeError", new ErrorOptions("Reference cause"));
    if (checkMessageAndName(err, errSc, "Test TypeError", "TypeError")) {
        return success;
    }
    return fail;
}

function testURIError(): int {
    let err = new URIError("Test URIError", new ErrorOptions("URI cause"));
    let errSc = URIError("Test URIError", new ErrorOptions("Reference cause"));
    if (checkMessageAndName(err, errSc, "Test URIError", "URIError")) {
        return success;
    }
    return fail;
}

function test(result: int, message: String): int {
    if (result == 0) {
      return success;
    }
    console.println("FAILED: " + message);
    return fail;
}
