/*
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function main(): int {
    let failures: int = 0;
    failures += test(createEmptySet(),"Create Empty Set");
    failures += test(createSetAndAdd(), "Create Set and Add single item");

    failures += test(createSetAddAndClear(), "Create Set add and clear it");
    failures += test(createSetAddAndRemove(), "Create Set add and remove some key");

    failures += test(createSetAndGetValues(), "Get All Values from empty set");
    failures += test(createSetAddAndGetValues(), "Get All Values from non empty set");

    failures += test(createSetAddRemoveAndGetValues(), "Get Values after some value removed");
    failures += test(createSetAddClearAndGetValues(), "Get Values after all values removed");

    failures += test(createSetAddAndCheckHasValue(),"Check set has given value");
    return test(failures, "All tests run");

}

function getIteratorLen<T>(iter: Iterator<T>): int {
    let size: int = 0
    while(!iter.next().done)
        size++

    return size;
}

function createSetAddAndCheckHasValue(): int {
    let set: Set<char> = new Set<char>;
    set.add(c'a');
    set.add(c'b');
    set.add(c'c');
    let result = set.has(c'c') ? 0 : 1;
    return result;
}

function createEmptySet(): int {
    let set: Set<char> = new Set<char>;
    return set.size as int;
}

function createSetAndGetValues(): int {
    let set: Set<char> = new Set<char>;
    let values = set.values();

    let result = getIteratorLen<char>(values) == 0 ? 0 : 1;
    return result;
}

function createSetAddAndGetValues(): int {
    let set: Set<char> = new Set<char>;
    set.add(c'a');
    set.add(c'c');
    set.add(c'b');
    set.add(c'c');
    let values = set.values();

    let result = getIteratorLen<char>(values) == 3 ? 0 : 1;
    return result;
}

function createSetAddRemoveAndGetValues(): int {
    let set: Set<char> = new Set<char>;
    set.add(c'a');
    set.add(c'b');
    set.add(c'c');
    set.delete(c'c');
    let values = set.values();
    let result = getIteratorLen<char>(values) == 2 ? 0 : 1;
    return result;
}

function createSetAddClearAndGetValues(): int {
    let set: Set<char> = new Set<char>;
    set.add(c'a');
    set.add(c'b');
    set.add(c'c');
    set.add(c'c');
    set.clear();
    let values = set.values();
    let result = getIteratorLen<char>(values) == 0 ? 0 : 1;
    return result;
}

function createSetAddAndRemove(): int {
    let set: Set<char> = new Set<char>;
    set.add(c'a');
    set.add(c'b');
    set.add(c'c');
    set.delete(c'c');
    let result = set.size == 2 ? 0 : 1;
    return result;
}

function createSetAddAndClear(): int {
    let set: Set<char> = new Set<char>;
    set.add(c'a');
    set.add(c'b');
    set.add(c'c');
    set.clear();
    let result = set.size == 0 ? 0 : 1;
    return result;
}

function createSetAndAdd(): int {
    let set: Set<char> = new Set<char>;
    set.add(c'a');
    let result = set.size == 1 ? 0 : 1;
    return result;
}

function test(result: int, message: String ): int {
    if(result == 0) {
      console.println('PASSED: ' + message);
      return 0;
    }
    console.println('FAILED: ' + message);
    return 1;
}
