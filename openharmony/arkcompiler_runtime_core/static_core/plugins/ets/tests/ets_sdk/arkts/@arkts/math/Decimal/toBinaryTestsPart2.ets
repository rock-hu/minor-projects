/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0(the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Decimal } from "@arkts.math.Decimal";

function main(): int {
    const suite = new arktest.ArkTestsuite("Decimal toBinary API tests");
    suite.addTest("Decimal toBinary with different precision and rounding", testToBinaryWithDiffPRAndRM);
    suite.addTest("Decimal toBinary with two parameters", testToBinaryWithTwoParameters);
    return suite.run();
}

function checkToBinaryResult(expected: string, n: string | number, sd: number, rm: number) {
    Decimal.precision = sd;
    Decimal.rounding = rm;
    arktest.assertEQ(new Decimal(n).toBinary(), expected);
}

function testToBinaryWithDiffPRAndRM() {
    Decimal.set({ toExpNeg: -9e15, toExpPos: 9e15, minE: -9e15, maxE: 9e15 });
    checkToBinaryResult('0b111011000010100011011110010000000000010110111001001100010010101101000001000010111010110001110010010101', '4677623609407056260314308484245', 102, 4);
    checkToBinaryResult('0b1010001000000011111000000101001100001011100000011111111001101000100001001011010110000010011011111111000011110101010001110011', '13459691377936385656205820498694591603', 124, 4);
    checkToBinaryResult('0b101111100101010010010101000010100111111101111011110111100110', '857171914848189926', 60, 4);
    checkToBinaryResult('0b110110001001110001101001101001011100110000000100111101101000111101100100110101001110010001', '1047466460252578697656357777', 90, 4);
    checkToBinaryResult('0b10000101011010001000100001111111001110010010110100011000111101001010000001001011001000111010010000011010101111001111101101010001', '177330090800059334179372876785623300945', 128, 4);
    checkToBinaryResult('0b1010', '10', 4, 4);
    checkToBinaryResult('0b1110000101111000100101111000000001000100111010100110100101100011001010000101101001100000000100101011101001110000001110011101000001110', '9590478319392434269891419865097211165198', 133, 4);
    checkToBinaryResult('0b1101010001110100011011010010011010100010111111101000101011111111111011011100001000010100011100010000111011001011000101100010010001111011101111010100100011000010001', '9703219505953893074023234217532878016916428047889', 163, 4);
    checkToBinaryResult('0b1101000001100011011001110000010011000100110001000011010110000100', '15015958852762088836', 64, 4);
    checkToBinaryResult('0b11110011111110100111011111001010001010010100010010110', '8584226467555478', 53, 4);
    checkToBinaryResult('0b11111001001000111101010101111010100110110100011001001110111101011011100101010101001111001011', '4819067998434611218882057163', 92, 4);
    checkToBinaryResult('0b1000', '8', 4, 4);
    checkToBinaryResult('0b101110001000011100101111000001100011100000100010101011101011110', '6648324064296392542', 63, 4);
    checkToBinaryResult('0b100000001011010111010101110111110011000100', '2211226025156', 42, 4);
    checkToBinaryResult('0b111000010011100011011111000001110100100', '483660891044', 39, 4);
    checkToBinaryResult('0b1100110100110100011011000', '26896600', 25, 4);
    checkToBinaryResult('0b1110110001001101110110101111110100001000011011100111000000100111110010011011000010011001111011101010010010111111101000001011011', '157051027737987715731727950696316653659', 127, 4);
    checkToBinaryResult('0b10101101101110101011101100011100010010011011011011000110111000010000001001110111010100111', '420051957077295313153486503', 89, 4);
    checkToBinaryResult('0b111010110111100110100010101.1110000001100101001000101100010001111011', '123456789.87654321', 67, 4);
    checkToBinaryResult('-0b0.000000000000000000000010000100100011111', '-0.000000123456789', 17, 4);
    checkToBinaryResult('0b1111100111.11111111101111100111011011001000101101', '999.999', 48, 4);
    checkToBinaryResult('-0b11111100001000110000100000101.010000000010101111110001111101011011111', '-528769285.2506705498654986754987694357629487612132293856', 68, 4);
    checkToBinaryResult('0b111011.001010010001', '59.160508253119229720226315984803348705', 18, 4);
    checkToBinaryResult('0b1000001001001100110111.101011101111000111000101011111000010001111111011100010001100111111100100011010100001010111111', '2134839.683376639182809009377393376566052153774412236905434', 115, 4);
    checkToBinaryResult('0b110100110001101011110111011000010000110100000011111011110000111111110101000111000110001111011110111110111000010111001110000001101.1101111001111010101101110101011001000011000000101011010000001111011001101010010101', '561214248546542162784739085096665717773.86906', 211, 4);
    checkToBinaryResult('0b10110111000101011010101011100011110110000011100101000100101000111000001101110001010010110011101100101000001100011111010111011100.000110111100110011011100001111010100110111000100110000100000010010100101100011001101', '243361227524012342673912659288240813532.10859467026399996528383947490', 212, 4);
    checkToBinaryResult('0b110001011001101010010100100001011011001101010101111001010011100010110001001010010110100000111000000000001101000000110000100011100001101001100011010100110101111010110001.1011100011010100100011101101101100101011000110000110111110001100000110011000111100001', '288798319290142875873517012221913212736305288666801.721993378169914151', 253, 4);
    checkToBinaryResult('0b101111111100000110101111100000101000111011101010001100001110', '863594881689232141.62881568577668460977625904', 60, 4);
    checkToBinaryResult('0b101110011110011', '23794.501525', 15, 4);
    checkToBinaryResult('0b1000', '7.792303494645702446763290630498884400068339335428470929289382355', 4, 4);
    checkToBinaryResult('0b10110001101000000001011000001011111010111100011101101011011001001001011011010111110000111101001001110101110101011011011100010', '29513071238598351326634077220532565729.753116233815194468461197227952', 125, 4);
    checkToBinaryResult('0b110010', '50.3', 6, 4);
}

function testToBinaryWithTwoParameters() {
    arktest.assertEQ(new Decimal('0').toBinary(40, 4), '0b0p+0');
    arktest.assertEQ(new Decimal('9007199254740992').toBinary(40, 4), '0b1p+53');
    arktest.assertEQ(new Decimal('384').toBinary(40, 4), '0b1.1p+8');
    arktest.assertEQ(new Decimal('2').toBinary(40, 4), '0b1p+1');
    arktest.assertEQ(new Decimal('256').toBinary(40, 4), '0b1p+8');
    arktest.assertEQ(new Decimal('0.857421875').toBinary(40, 4), '0b1.10110111p-1');
    arktest.assertEQ(new Decimal('0.857421875').toBinary(9, 4), '0b1.10110111p-1');
    arktest.assertEQ(new Decimal('0b1.001010101110101p-4').toBinary(16, 1), '0b1.001010101110101p-4');
}
