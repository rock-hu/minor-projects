/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { random } from "std/math"

function AllocMemoryAndReturnFreeHeapSize(): long throws {
    const ALLOC_SIZE = 10000;
    let mem = new long[ALLOC_SIZE];
    return GC.getFreeHeapSize();
}

function main(): void throws {

    let free_size_in_start = GC.getFreeHeapSize();
    let free_size_after_new = AllocMemoryAndReturnFreeHeapSize();
    GC.startGC(GC.FULL_CAUSE);
    let free_size_after_gc = GC.getFreeHeapSize();

    assert free_size_in_start > 0;
    assert free_size_after_new < free_size_in_start: "After allocation free memory value should decrease";
    assert free_size_after_gc > free_size_after_new: "After in place gc free memory value should increase";
    assert free_size_after_gc <= free_size_in_start;
}
