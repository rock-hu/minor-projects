/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { CoroutineExtras, AtomicFlag } from "std/debug/concurrency";

function returnAbc(): string {
    return (() => "a")() + (() => "b")() + (() => "c")();
}

function returnFailAbc(): string {
    throw new Error("Concurrent function failed");
}

function main(): int {
    let commonTaskSuite = new ArkTestsuite("taskpool.CommonTask");
    commonTaskSuite.addTest("GetTaskpoolInfoTest", () =>
    {
        CoroutineExtras.setSchedulingPolicy(CoroutineExtras.POLICY_NON_MAIN);
        let flagForTask: AtomicFlag = new AtomicFlag(false);
        let isRunTask: AtomicFlag = new AtomicFlag(false);
        let funcForTask = (): string => {
            isRunTask.set(true);
            while (flagForTask.get() != true) {}
            return "result"
        };
        let task = new taskpoolTask("task_name", funcForTask);
        let p = taskpool.execute(task);
        // wait for task started
        while (isRunTask.get() != true) {}
        let info = taskpool.getTaskPoolInfo();
        // Notify to continue task
        flagForTask.set(true);
        assertEQ(info.taskInfos.length, 1);
        assertNE(info.threadInfos.length, 0);
        let isNonEmptyWorker: boolean = false;
        for (let threadInfo of info.threadInfos) {
            assertLT(0, threadInfo.tid);
            isNonEmptyWorker = isNonEmptyWorker || (threadInfo.taskIds != undefined);
        }
        assertEQ(isNonEmptyWorker, true);
        // NOTE(ipetrov, #20349): uncomment when frontend fix enum comparison
        assertEQ(info.taskInfos[0].state as int, taskpoolState.RUNNING as int);
        assertEQ(info.taskInfos[0].name, "task_name");
        assertEQ(await p, "result");
        CoroutineExtras.setSchedulingPolicy(CoroutineExtras.POLICY_DEFAULT);
    });
    commonTaskSuite.addTest("OneTaskExecutionTest", () =>
    {
        assertEQ(taskpool.isConcurrent(returnAbc), true);
        let Sum = (): int => {
            return 10 + 20;
        }
        // Task with lambda
        let lambdaTask = new taskpoolTask(Sum);
        let result = await taskpool.execute(lambdaTask);
        assertEQ(result, 30);
        assertEQ(lambdaTask.isDone(), true);
        // Task with function
        let funcTask = new taskpoolTask(returnAbc);
        let res = await taskpool.execute(funcTask);
        assertEQ(res, "abc");
        assertEQ(funcTask.isDone(), true);
        // Execute one task several times
        let p1 = taskpool.execute(funcTask);
        let p2 = taskpool.execute(funcTask);
        let p3 = taskpool.execute(funcTask);
        let p4 = taskpool.execute(funcTask);
        assertEQ(await p1, "abc");
        assertEQ(await p2, "abc");
        assertEQ(await p3, "abc");
        assertEQ(await p4, "abc");
        assertEQ(funcTask.isDone(), true);
    });
    commonTaskSuite.addTest("CallbackTest", (): void throws =>
    {
        let onEnqueuedStr = "";
        let onEnqueuedExpectedStr = "enqueue callback is done";
        let onEnqueuedCallback = () => { onEnqueuedStr = onEnqueuedExpectedStr; };
        let onStartExecutionStr = "";
        let onStartExecutionExpepctedStr = "start callback is done";
        let onStartExecutionCallback = () => { onStartExecutionStr = onStartExecutionExpepctedStr; };
        let onExecutionSucceededStr = "";
        let onExecutionSucceededExpectedStr = "success callback is done";
        let onExecutionSucceededCallback = () => { onExecutionSucceededStr = onExecutionSucceededExpectedStr; };
        let onExecutionFailedStr = "";
        let onExecutionFailedExpectedStr = "Concurrent function failed, fail callback is done";
        let onExecutionFailedCallback = (e: Error) => { onExecutionFailedStr = e.message + ", fail callback is done"; };
        // Successed task
        let task = new taskpoolTask(returnAbc);
        task.onEnqueued(onEnqueuedCallback);
        task.onStartExecution(onStartExecutionCallback);
        task.onExecutionSucceeded(onExecutionSucceededCallback);
        task.onExecutionFailed(onExecutionFailedCallback);
        let res = await taskpool.execute(task);
        assertEQ(res, "abc");
        assertEQ(onEnqueuedStr, onEnqueuedExpectedStr);
        assertEQ(onStartExecutionStr, onStartExecutionExpepctedStr);
        assertEQ(onExecutionSucceededStr, onExecutionSucceededExpectedStr);
        assertEQ(onExecutionFailedStr, "");
        // Failed task
        onEnqueuedStr = "";
        onStartExecutionStr = "";
        onExecutionSucceededStr = "";
        let failedTask = new taskpoolTask(returnFailAbc);
        failedTask.onEnqueued(onEnqueuedCallback);
        failedTask.onStartExecution(onStartExecutionCallback);
        failedTask.onExecutionSucceeded(onExecutionSucceededCallback);
        failedTask.onExecutionFailed(onExecutionFailedCallback);
        expectError(() => { await taskpool.execute(failedTask) },
                    new Error("Concurrent function failed"));
        assertEQ(onEnqueuedStr, onEnqueuedExpectedStr);
        assertEQ(onStartExecutionStr, onStartExecutionExpepctedStr);
        assertEQ(onExecutionSucceededStr, "");
        assertEQ(onExecutionFailedStr, onExecutionFailedExpectedStr);
        // Add callbacks for executed task
        let executedTask = new taskpoolTask(returnAbc);
        let expectedCallbackError = new Error("taskpool:: The executed task does not support the registration of listeners.");
        taskpool.execute(executedTask);
        expectError(() => { executedTask.onEnqueued(() => {}); }, expectedCallbackError);
        expectError(() => { executedTask.onStartExecution(() => {}); }, expectedCallbackError);
        expectError(() => { executedTask.onExecutionSucceeded(() => {}); }, expectedCallbackError);
        expectError(() => { executedTask.onExecutionFailed((e: Error) => {}); }, expectedCallbackError);
    });
    commonTaskSuite.addTest("IsCancelTest", (): void throws =>
    {
        assertEQ(taskpoolTask.isCanceled(), false);
        let t = new taskpoolTask(returnAbc);
        taskpool.execute(t);
        assertEQ(taskpoolTask.isCanceled(), false);
        // Check canceling of exeuting task
        CoroutineExtras.setSchedulingPolicy(CoroutineExtras.POLICY_NON_MAIN); 
        let isCanceled: AtomicFlag = new AtomicFlag(false);
        let isRunning: AtomicFlag = new AtomicFlag(false);
        let waitForCancel: AtomicFlag = new AtomicFlag(true);
        let funcForTask = (): boolean => {
            isRunning.set(true);
            while(waitForCancel.get()) {}
            // Set isCanceled value from taskpool
            isCanceled.set(taskpoolTask.isCanceled());
            isRunning.set(false);
            return true;
        };
        let task = new taskpoolTask(funcForTask);
        let p = taskpool.execute(task);
        while (!isRunning.get()) {}
        assertEQ(task.isDone(), false);
        taskpool.cancel(task);
        waitForCancel.set(false);
        while (isRunning.get()) {}
        // Check isCanceled from taskpool
        assertEQ(isCanceled.get(), true);
        expectError(() => { await p }, new Error("taskpool:: task has been canceled"));
        CoroutineExtras.setSchedulingPolicy(CoroutineExtras.POLICY_DEFAULT);
    });
    commonTaskSuite.addTest("CancelNonExecutingTaskTest", (): void throws =>
    {
        let expectedError = new Error("taskpool:: task is not executed or has been executed");
        expectError(() => {
            let t = new taskpoolTask(returnAbc);
            taskpool.cancel(t);
            taskpool.execute(t);
        }, expectedError);
        expectError(() => {
            let t = new taskpoolTask(returnAbc);
            await taskpool.execute(t);
            taskpool.cancel(t);
        }, expectedError);
    });
    commonTaskSuite.addTest("CancelExecutingTaskTest", (): void throws =>
    {
        let t = new taskpoolTask(returnAbc);
        let p = taskpool.execute(t);
        try {
            taskpool.cancel(t);
        } catch(e: Error) {
            assertEQ(e.message, "taskpool:: task is not executed or has been executed");
            return;
        }
        expectError(() => { await p }, new Error("taskpool:: task has been canceled"));
        // task finished, new execution should not produce an Error
        expectNoThrow(() => { await taskpool.execute(t) });
    });
    commonTaskSuite.addTest("DependentTasksTest", (): void throws =>
    {
        let resultStr: string = "";
        let func1 = (): string => {
            resultStr += "1";
            return resultStr;
        };
        let func2 = (): string => {
            resultStr += "2";
            return resultStr;
        }
        let func3 = (): string => {
            resultStr += "3";
            return resultStr;
        }
        let task1 = new taskpoolTask(func1);
        let task2 = new taskpoolTask(func2);
        let task3 = new taskpoolTask(func3);
        task1.addDependency(task2);
        task2.addDependency(task3);
        let p1 = taskpool.execute(task1);
        let p2 = taskpool.execute(task2);
        let p3 = taskpool.execute(task3);
        let res2 = await p2;
        assertEQ(res2, "32");
        let res3 = await p3;
        assertEQ(res3, "3");
        let res1 = await p1;
        assertEQ(res1, "321");
        assertEQ(resultStr, "321");
        // Empty dependencies
        expectError(() => {
            let task = new taskpoolTask(returnAbc);
            task.addDependency();
        }, new Error("addDependency has no params."));
        expectError(() => {
            let task = new taskpoolTask(returnAbc);
            task.removeDependency();
        }, new Error("removeDependency has no params."));
    });
    commonTaskSuite.addTest("CircularDependencyTest", (): void throws =>
    {
        let task1 = new taskpoolTask(returnAbc);
        let task2 = new taskpoolTask(returnAbc);
        let task3 = new taskpoolTask(returnAbc);
        let task4 = new taskpoolTask(returnAbc);
        let task5 = new taskpoolTask(returnAbc);
        let task6 = new taskpoolTask(returnAbc);
        let expectedError = new Error("There is a circular dependency");
        expectNoThrow(() => {
            task1.addDependency(task2);
            task2.addDependency(task3);
            task3.addDependency(task4);
            task4.addDependency(task5);
            task5.addDependency(task6);
        });
        expectError(() => {
            // circular dependency
            task6.addDependency(task1);
        }, expectedError);
        expectError(() => { task1.addDependency(task1) }, expectedError);
        expectError(() => { task1.removeDependency(task3) }, new Error("The dependency does not exist, "));
    });
    commonTaskSuite.addTest("DependencyExecutedTaskTest", (): void throws =>
    {
        let task1 = new taskpoolTask(returnAbc);
        let task2 = new taskpoolTask(returnAbc);
        expectError(() => { task1.removeDependency(task2) }, new Error("taskpool:: task has no dependency"));
        taskpool.execute(task2);
        expectError(() => { task1.addDependency(task2) }, new Error("taskpool:: seqRunnerTask or executedTask cannot be relied on"));
        expectError(() => { task2.addDependency(task1) }, new Error("taskpool:: seqRunnerTask or executedTask cannot addDependency"));
        let task3 = new taskpoolTask(returnAbc);
        let task4 = new taskpoolTask(returnAbc);
        let expectedAgainExecuteError = new Error("taskpool:: executedTask with dependency cannot execute again");
        task1.addDependency(task3);
        taskpool.execute(task3);
        expectError(() => { task1.removeDependency(task3); }, new Error("taskpool:: cannot removeDependency on a dependent and executed task"));
        expectError(() => { task1.removeDependency(task4); }, new Error("taskpool:: task has no dependency"));
        taskpool.execute(task1);
        expectError(() => { taskpool.execute(task1) }, expectedAgainExecuteError);
        expectError(() => { taskpool.execute(task3) }, expectedAgainExecuteError);
        // Try to remove dependency after execute
        let task5 = new taskpoolTask(returnAbc);
        let task6 = new taskpoolTask(returnAbc);
        task5.addDependency(task6);
        taskpool.execute(task5);
        expectError(() => { task5.removeDependency(task6); }, new Error("taskpool:: executedTask cannot removeDependency"));
        taskpool.execute(task6);
    });
    commonTaskSuite.addTest("SendReceiveDataTest", () =>
    {
        let res = 0;
        let recvCallback = (): string => {
            res += 10;
            return "";
        };
        let sendDataFunc = (): string => {
            taskpoolTask.sendData();
            return "abc";
        };
        let t = new taskpoolTask(sendDataFunc);
        t.onReceiveData(recvCallback);
        let p1 = taskpool.execute(t);
        let p2 = taskpool.execute(t);
        let res1 = await p1;
        let res2 = await p2;
        assertEQ(res1, "abc");
        assertEQ(res2, "abc");
        assertEQ(res, 20);
        let r = await taskpool.execute(t);
        assertEQ(r, "abc");
        assertEQ(res, 30);
    });
    return commonTaskSuite.run();
}
