/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function returnAbc() {
    return (() => "a")() + (() => "b")() + (() => "c")();
}

function TaskpoolSequenceRunnerTestOrder() {
    let resultStr: string = "";
    let func1 = (): string => {
        resultStr += "1";
        return resultStr;
    };
    let func2 = (): string => {
        resultStr += "2";
        return resultStr;
    }
    let func3 = (): string => {
        resultStr += "3";
        return resultStr;
    }
    let runner = new taskpoolSequenceRunner();
    let task1 = new taskpoolTask(func1);
    let task2 = new taskpoolTask(func2);
    let task3 = new taskpoolTask(func3);
    let p1 = runner.execute(task1);
    let p2 = runner.execute(task2);
    let p3 = runner.execute(task3);
    let res2 = await p2;
    assert(res2 == "12");
    let res3 = await p3;
    assert(res3 == "123");
    let res1 = await p1;
    assert(res1 == "1");
    assert(resultStr == "123");
}

function TaskpoolSequenceRunnerTestExecuteCommonTask() {
    let runner = new taskpoolSequenceRunner();
    let task = new taskpoolTask(returnAbc);
    taskpool.execute(task);
    let isErrorOccurred = false;
    try {
        runner.execute(task);
    } catch(e: Error) {
        isErrorOccurred = true;
        assert(e.message == "taskpool:: SequenceRunner cannot execute seqRunnerTask or executedTask");
    }
    assert(isErrorOccurred);
}

function TaskpoolSequenceRunnerTestExecuteSeqRunnerTask() {
    let runner1 = new taskpoolSequenceRunner();
    let runner2 = new taskpoolSequenceRunner();
    let task = new taskpoolTask(returnAbc);
    runner1.execute(task);
    let isErrorOccurred = false;
    try {
        runner2.execute(task);
    } catch(e: Error) {
        isErrorOccurred = true;
        assert(e.message == "taskpool:: SequenceRunner cannot execute seqRunnerTask or executedTask");
    }
    assert(isErrorOccurred);
}

function TaskpoolSequenceRunnerTestExecuteGroupTask() {
    let runner = new taskpoolSequenceRunner();
    let group = new taskpoolTaskGroup();
    let task = new taskpoolTask(returnAbc);
    group.addTask(task);
    let isErrorOccurred = false;
    try {
        runner.execute(task);
    } catch(e: Error) {
        isErrorOccurred = true;
        assert(e.message == "taskpool:: SequenceRunner cannot execute groupTask");
    }
    assert(isErrorOccurred);
}

function TaskpoolSequenceRunnerTestCancelNonStartedTask() {
    let task = new taskpoolTask(returnAbc);
    let runner = new taskpoolSequenceRunner();
    let isErrorOccurred = false;
    try {
        taskpool.cancel(task);
        runner.execute(task);
    } catch(e: Error) {
        isErrorOccurred = true;
        assert(e.message == "taskpool:: task is not executed or has been executed");
    }
    assert(isErrorOccurred);
}

function TaskpoolSequenceRunnerTestCancelExecutingTask() {
    let task = new taskpoolTask(returnAbc);
    let runner = new taskpoolSequenceRunner();
    let p = runner.execute(task);
    try {
        taskpool.cancel(task);
    } catch(e: Error) {
        assert(e.message == "taskpool:: sequenceRunner task has been executed");
        return;
    }
    let isErrorOccurred = false;
    try {
        let res = await p;
    } catch(e: Error) {
        assert(e.message == "taskpool:: sequenceRunner task has been canceled");
        isErrorOccurred = true;
    }
    assert(isErrorOccurred);
}

function TaskpoolSequenceRunnerTestCancelExecutedTask() {
    let task = new taskpoolTask(returnAbc);
    let runner = new taskpoolSequenceRunner();
    let isErrorOccurred = false;
    try {
        await runner.execute(task);
        taskpool.cancel(task);
    } catch(e: Error) {
        isErrorOccurred = true;
        assert(e.message == "taskpool:: sequenceRunner task has been executed");
    }
    assert(isErrorOccurred);
}

function main(): int {
    TaskpoolSequenceRunnerTestOrder();
    TaskpoolSequenceRunnerTestExecuteCommonTask();
    TaskpoolSequenceRunnerTestExecuteSeqRunnerTask();
    TaskpoolSequenceRunnerTestExecuteGroupTask();
    TaskpoolSequenceRunnerTestCancelNonStartedTask();
    TaskpoolSequenceRunnerTestCancelExecutingTask();
    TaskpoolSequenceRunnerTestCancelExecutedTask();
    return 0;
} 