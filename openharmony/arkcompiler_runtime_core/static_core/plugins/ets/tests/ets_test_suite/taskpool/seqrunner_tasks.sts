/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function returnAbc() {
    return (() => "a")() + (() => "b")() + (() => "c")();
}

function main(): int {
    let seqRunnerSuite = new ArkTestsuite("taskpool.SequenceRunner");
    seqRunnerSuite.addTest("OrderTest", () =>
    {
        let resultStr: string = "";
        let func1 = (): string => {
            resultStr += "1";
            return resultStr;
        };
        let func2 = (): string => {
            resultStr += "2";
            return resultStr;
        }
        let func3 = (): string => {
            resultStr += "3";
            return resultStr;
        }
        let runner = new taskpoolSequenceRunner();
        let task1 = new taskpoolTask(func1);
        let task2 = new taskpoolTask(func2);
        let task3 = new taskpoolTask(func3);
        let p1 = runner.execute(task1);
        let p2 = runner.execute(task2);
        let p3 = runner.execute(task3);
        let res2 = await p2;
        assertEQ(res2, "12");
        let res3 = await p3;
        assertEQ(res3, "123");
        let res1 = await p1;
        assertEQ(res1, "1");
        assertEQ(resultStr, "123");
        assertEQ(task1.isDone(), true);
        assertEQ(task2.isDone(), true);
        assertEQ(task3.isDone(), true);
        // Execute LongTask
        let longTask = new taskpoolLongTask(returnAbc);
        let res = await runner.execute(longTask);
        assertEQ(res, "abc");
    });
    seqRunnerSuite.addTest("ExecuteCommonTest", (): void throws => 
    {
        let runner = new taskpoolSequenceRunner();
        let task = new taskpoolTask(returnAbc);
        taskpool.execute(task);
        expectError(() => { runner.execute(task) },
                    new Error("taskpool:: SequenceRunner cannot execute seqRunnerTask or executedTask"));
    });
    seqRunnerSuite.addTest("ExecuteSeqRunnerTaskTest", (): void throws =>
    {
        let runner1 = new taskpoolSequenceRunner();
        let runner2 = new taskpoolSequenceRunner();
        let task = new taskpoolTask(returnAbc);
        runner1.execute(task);
        expectError(() => { runner2.execute(task) },
                    new Error("taskpool:: SequenceRunner cannot execute seqRunnerTask or executedTask"));
    });
    seqRunnerSuite.addTest("ExecuteGroupTaskTest", (): void throws => {
        let runner = new taskpoolSequenceRunner();
        let group = new taskpoolTaskGroup();
        let task = new taskpoolTask(returnAbc);
        group.addTask(task);
        expectError(() => { runner.execute(task) },
                    new Error("taskpool:: SequenceRunner cannot execute groupTask"));
    });
    seqRunnerSuite.addTest("CancelNonStartedTaskTest", (): void throws =>
    {
        let task = new taskpoolTask(returnAbc);
        let runner = new taskpoolSequenceRunner();
        expectError(() => {
            taskpool.cancel(task);
            runner.execute(task);
        }, new Error("taskpool:: task is not executed or has been executed"));
    });
    seqRunnerSuite.addTest("CancelExecutingTaskTest", (): void throws =>
    {
        let task = new taskpoolTask(returnAbc);
        let runner = new taskpoolSequenceRunner();
        let p = runner.execute(task);
        try {
            taskpool.cancel(task);
        } catch(e: Error) {
            assertEQ(e.message, "taskpool:: sequenceRunner task has been executed");
            return;
        }
        expectError(() => { let res = await p; },
                    new Error("taskpool:: sequenceRunner task has been canceled"));
    });
    seqRunnerSuite.addTest("CancelExecutedTaskTest", (): void throws =>
    {
        let task = new taskpoolTask(returnAbc);
        let runner = new taskpoolSequenceRunner();
        expectError(() => {
            await runner.execute(task);
            taskpool.cancel(task);
        }, new Error("taskpool:: sequenceRunner task has been executed"));
    });
    seqRunnerSuite.addTest("AddDependentTaskTest", (): void throws =>
    {
        let task1 = new taskpoolTask(returnAbc);
        let task2 = new taskpoolTask(returnAbc);
        task1.addDependency(task2);
        let runner = new taskpoolSequenceRunner();
        expectError(() => { runner.execute(task1) }, new Error("seqRunner:: dependent task not allowed."));
    });
    seqRunnerSuite.addTest("AddDependencyExecutedTaskTest", (): void throws =>
    {
        let task1 = new taskpoolTask(returnAbc);
        let task2 = new taskpoolTask(returnAbc);
        let runner = new taskpoolSequenceRunner();
        runner.execute(task2);
        expectError(() => { task1.addDependency(task2) }, new Error("taskpool:: seqRunnerTask or executedTask cannot be relied on"));
        expectError(() => { task2.addDependency(task1) }, new Error("taskpool:: seqRunnerTask or executedTask cannot addDependency"));
    });
    return seqRunnerSuite.run();
}
