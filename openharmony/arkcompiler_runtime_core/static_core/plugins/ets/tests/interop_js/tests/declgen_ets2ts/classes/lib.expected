/*
 * Copyright (c) 2023-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare const exports: any;
let ETSGLOBAL: any = (globalThis as any).Panda.getClass('LETSGLOBAL;');

function _$init$_(): void { return {} as any; };
(_$init$_ as any) = ETSGLOBAL._$init$_;
_$init$_();

interface I0 {
    I0Method(a: string): string;
}
export {I0};


interface I1 {
    I1Method(a: number): number;
}
export {I1};


class Base {
    public a: number = {} as any;
    public constructor(a: number) {};
};
(Base as any) = (globalThis as any).Panda.getClass('LBase;');
export {Base};
exports.Base = Base;

class Derived extends Base implements I0, I1 {
    public I0Method(a: string): string { return {} as any; };
    public I1Method(a: number): number { return {} as any; };
    public b: number = {} as any;
    public constructor(a: number, b: number){ super(...{} as (ConstructorParameters<typeof Base>)); };
};
(Derived as any) = (globalThis as any).Panda.getClass('LDerived;');
export {Derived};
exports.Derived = Derived;

