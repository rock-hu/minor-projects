/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export declare function foo(arg: BarNameSpace.Callback): void;
export declare function bar(arg: BarNameSpace.FooNameSpace.Callback2): void;
export declare let rectangleShape: MySpace.IShape;
export declare let a: N.NA;
export declare let b: N.NN.NNA;
export declare let c: N.NN.NNN.NNNA;
export declare function foo1(arg: N.NA): void;
export declare function foo2(arg: N.NN.NNA): void;
export declare function foo3(arg: N.NN.NNN.NNNA): N.NN.NNN.NNNA;
export declare namespace A {
    let v1: number;
    namespace B {
        let v2: number;
        namespace C {
            let v3: number;
        }
    }
}
export declare namespace X1 {
    function foo1(): void;
}
export declare namespace X {
    function foo(): void;
}
export declare namespace myNamespace {
    enum nsEnum {
        White = 0,
        Blue = 2,
        Red = 2,
    }
}
export declare namespace BarNameSpace {
    namespace FooNameSpace {
        type Callback2 = (arg: string) => void;
    }
    type Callback = (arg: string) => void;
}
export declare namespace MySpace {
    let count: number;
    let message: string;
    function resetMessage(): void;
    function resetState(): void;
    interface IShape {
        area(): number;
    }
    class Rectangle implements IShape {
        public get width(): number;
        public set width(value: number);
        public get height(): number;
        public set height(value: number);
        public constructor(width: number, height: number);
        public area(): number;
    }
    enum Color {
        RED = 0,
        GREEN = 1,
        BLUE = 2,
    }
}
export declare namespace N {
    namespace NN {
        namespace NNN {
            class NNNA {
                constructor();
            }
        }
        class NNA {
            constructor();
        }
    }
    class NA {
        constructor();
    }
    type NB = (arg: string) => void;
}
