/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class Test {
    constructor(numCheckpoints: int) {
        this.numCheckpoints = numCheckpoints;
        this.sequence = new Array<number>();
    }

    check(): boolean {
        if (this.result == Test.RESULT_FAILED) {
            return false;
        }
        if (this.sequence.length != this.numCheckpoints) {
            console.log("Test failed. Expected " + this.numCheckpoints + " checkpoints, but got " + this.sequence.length);
            this.result = Test.RESULT_FAILED;
            return false;
        }
        for (let i = 0; i < this.sequence.length; ++i) {
            if (this.sequence[i] != i) {
                console.log("Test failed. Expected " + i + "-th checkpoint to be " + i + ", but got " + this.sequence[i]);
                this.result = Test.RESULT_FAILED;
                return false;
            }
        }
        return true;
    }

    fail(message: string): void {
        this.result = Test.RESULT_FAILED;
        console.log(message);
    }

    checkpoint(value: int) {
        this.sequence.push(value);
    }

    private static RESULT_UNSET: int = 0;
    private static RESULT_PASSED: int = 1;
    private static RESULT_FAILED: int = 2;

    result: int = Test.RESULT_UNSET;
    failMessage: string = "";
    private sequence: Array<number>;
    private numCheckpoints: int;
}

function check(): boolean {
    return globalTest!.check();
}

let globalTest: Test | null = null;

function testSetTimeout(): void {
    globalTest = new Test(3);
    let sequence = new Array<number>();
    let delay = 100;
    globalTest!.checkpoint(0);
    let start = Date.now();
    setTimeout((): void => {
        // To get time Date.now and libuv uses clock_gettime under the hood, but with different parameters. Date.now() uses CLOCK_REALTIME, but libuv uses CLOCK_MONOTONIC.
        // When we calculate time interval there may be an error. For example time interval measured by Date.now may be 5.9ms round to 5
        // and time interval measured by libuv is 6.1 round to 6.
        // To avoid such error just add +1 to time interval.
        let spentTime = Date.now() - start + 1;
        if (spentTime < delay) {
            globalTest!.fail("The callback is called after " + spentTime + "ms. Expected to be called after " + delay + "ms at least.");
        }
        globalTest!.checkpoint(2);
    }, delay);
    globalTest!.checkpoint(1);
}

function testClearTimeout(): void {
    globalTest = new Test(2);
    let sequence = new Array<number>();
    globalTest!.checkpoint(0);
    let timerId = setTimeout((): void => {
        globalTest!.fail("The callback should not be called.");
    }, 0);
    clearTimeout(timerId);
    globalTest!.checkpoint(1);
}

function testSetInterval(): void {
    globalTest = new Test(6);
    let sequence = new Array<number>();
    let delay = 100;
    let checkpoint = 2;
    globalTest!.checkpoint(0);
    let start = Date.now();
    let timerId: int;
    timerId = setInterval((): void => {
        // To get time Date.now and libuv uses clock_gettime under the hood, but with different parameters. Date.now() uses CLOCK_REALTIME, but libuv uses CLOCK_MONOTONIC.
        // When we calculate time interval there may be an error. For example time interval measured by Date.now may be 5.9ms round to 5
        // and time interval measured by libuv is 6.1 round to 6.
        // To avoid such error just add +1 to time interval.
        let spentTime = Date.now() - start + 1;
        if (spentTime < delay) {
            globalTest!.fail("The callback is called after " + spentTime + "ms. Expected to be called after " + delay + "ms at least.");
        }
        if (checkpoint == 5) {
            clearInterval(timerId);
        }
        globalTest!.checkpoint(checkpoint);
        ++checkpoint;
    }, delay);
    globalTest!.checkpoint(1);
}
