# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
  method_name: asIntN,
  object_type: BigInt,
  param_init_data_types: {"param1":"long[]", "param2": "bigint[]"},
  param_types: {
    "param1": Long,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[0,    3,   4,    5]",
    "param2": "[0n, 25n, 25n, -25n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "bigint[]",
  expected_test_data: "[0n, 1n, -7n, 7n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asIntN,
  object_type: BigInt,
  param_init_data_types: {"param1":"long[]", "param2": "bigint[]"},
  param_types: {
    "param1": Long,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[5,         100]",
    "param2": "[255657n,   25n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "bigint[]",
  expected_test_data: "[9n, 25n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asUintN,
  object_type: BigInt,
  param_init_data_types: {"param1":"long[]", "param2": "bigint[]"},
  param_types: {
    "param1": Long,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
      "param1": "[0,    3,   4,    5]",
      "param2": "[0n, 25n, 25n, -25n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "bigint[]",
  expected_test_data: "[0n, 1n, 9n, 7n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asUintN,
  object_type: BigInt,
  param_init_data_types: {"param1":"long[]", "param2": "bigint[]"},
  param_types: {
    "param1": Long,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[5,         100]",
    "param2": "[255657n,   25n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "bigint[]",
  expected_test_data: "[9n, 25n]",
  verify_test_result_function: comparePrimitiveValue
}
