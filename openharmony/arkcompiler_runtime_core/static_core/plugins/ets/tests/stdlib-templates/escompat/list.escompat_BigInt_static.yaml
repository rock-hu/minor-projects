# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
  method_name: asIntN,
  object_type: BigInt,
  param_init_data_types: {"param1":"long[]", "param2": "bigint[]"},
  param_types: {
    "param1": Long,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[0,    3,   4,    5]",
    "param2": "[0n, 25n, 25n, -25n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "bigint[]",
  expected_test_data: "[0n, 1n, -7n, 7n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asIntN,
  object_type: BigInt,
  param_init_data_types: {"param1":"long[]", "param2": "bigint[]"},
  param_types: {
    "param1": Long,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[5,         100]",
    "param2": "[255657n,   25n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "bigint[]",
  expected_test_data: "[9n, 25n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asIntN,
  object_type: BigInt,
  param_init_data_types: {"param1":"FixedArray<double>", "param2": "FixedArray<bigint>"},
  param_types: {
    "param1": Double,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[0, 10, 15, 16, 17, 31, 32, 33, 1048576000, 9007199254740991]",
    "param2": "[5n, 0n, 32767n, 32767n, 32767n, 2147483647n, 2147483647n, 2147483647n, 123n, 123n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "FixedArray<bigint>",
  expected_test_data: "[0n, 0n, -1n, 32767n, 32767n, -1n, 2147483647n, 2147483647n, 123n, 123n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asIntN,
  object_type: BigInt,
  param_init_data_types: {"param1":"FixedArray<double>", "param2": "FixedArray<bigint>"},
  param_types: {
    "param1": Double,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[8, 15, 16, 17, 31, 32, 33, 1048576000, 9007199254740991]",
    "param2": "[-1n, -32768n, -32768n, -32768n, -2147483648n, -2147483648n, -2147483648n, -123n, -123n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "FixedArray<bigint>",
  expected_test_data: "[-1n, 0n, -32768n, -32768n, 0n, -2147483648n, -2147483648n, -123n, -123n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asUintN,
  object_type: BigInt,
  param_init_data_types: {"param1":"long[]", "param2": "bigint[]"},
  param_types: {
    "param1": Long,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
      "param1": "[0,    3,   4,    5]",
      "param2": "[0n, 25n, 25n, -25n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "bigint[]",
  expected_test_data: "[0n, 1n, 9n, 7n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asUintN,
  object_type: BigInt,
  param_init_data_types: {"param1":"long[]", "param2": "bigint[]"},
  param_types: {
    "param1": Long,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[5,         100]",
    "param2": "[255657n,   25n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "bigint[]",
  expected_test_data: "[9n, 25n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asUintN,
  object_type: BigInt,
  param_init_data_types: {"param1":"FixedArray<double>", "param2": "FixedArray<bigint>"},
  param_types: {
    "param1": Double,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[0, 10, 15, 16, 17, 31, 32, 33, 1048576000, 9007199254740991]",
    "param2": "[10n, 0n, 65535n, 65535n, 65535n, 4294967295n, 4294967295n, 4294967295n, 123n, 123n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "FixedArray<bigint>",
  expected_test_data: "[0n, 0n, 32767n, 65535n, 65535n, 2147483647n, 4294967295n, 4294967295n, 123n, 123n]",
  verify_test_result_function: comparePrimitiveValue
}

- {
  method_name: asUintN,
  object_type: BigInt,
  param_init_data_types: {"param1":"FixedArray<double>", "param2": "FixedArray<bigint>"},
  param_types: {
    "param1": Double,
    "param2": bigint
  },
  param_nature: {
    "param1": object,
    "param2": object
  },
  param_list: {
    "param1": "[16, 15, 16, 17, 32, 31, 32, 33]",
    "param2": "[-1n, -32768n, -32768n, -32768n, -1n, -2147483648n, -2147483648n, -2147483648n]"
  },
  method_return_type: bigint,
  expected_data_item_type: bigint,
  expected_data_type: "FixedArray<bigint>",
  expected_test_data: "[65535n, 0n, 32768n, 98304n, 4294967295n, 0n, 2147483648n, 6442450944n]",
  verify_test_result_function: comparePrimitiveValue
}
