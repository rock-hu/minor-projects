# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    method_name: Math.abs,
    func_name: abs,
    method_nature: function,
    result_type: double,
    method_signature: {v: "double"},

    method_test_index_data:
      {
        test1:  {v: 0.0,},
        test2:  {v: PI, },
        test3:  {v: -PI,},
        test4:  {v: 123.0, },
        test5:  {v: -123.0,},
        test6:  {v: doubleNaN, },
        test7:  {v: doubleInf, },
        test8:  {v: doubleNegInf,},
        test9:  {v: Double.MAX_VALUE, },
        test10: {v: -Double.MAX_VALUE, },
        test11: {v: Double.MIN_VALUE, },
        test12: {v: -Double.MIN_VALUE, }

      },
    method_expected_data:
      {
        test1:  0.0,
        test2:  PI,
        test3:  PI,
        test4:  123.0,
        test5:  123.0,
        test6:  doubleNaN,
        test7:  doubleInf,
        test8:  doubleInf,
        test9:  Double.MAX_VALUE,
        test10: Double.MAX_VALUE,
        test11: Double.MIN_VALUE,
        test12: Double.MIN_VALUE,
      },
  }
- {
    method_name: Math.trunc,
    func_name: trunc,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1:  {v: 0.0,},
        test2:  {v: 1.0, },
        test3:  {v: 1.0000001,},
        test4:  {v: PI, },
        test5:  {v: -E },
        test6:  {v: doubleNaN, },
        test7:  {v: doubleInf, },
        test8:  {v: doubleNegInf,},
        test9:  {v: Double.MAX_VALUE, },
        test10: {v: Double.MIN_VALUE, }
      },
    method_expected_data:
      {
        test1:  0.0,
        test2:  1.0,
        test3:  1.0,
        test4:  3.0,
        test5: -2.0,
        test6:  doubleNaN,
        test7:  doubleInf,
        test8:  doubleNegInf,
        test9:  Double.MAX_VALUE,
        test10: 0
      },
  }
- {
    method_name: Math.ceil,
    func_name: ceil,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1:  {v: 0.0,},
        test2:  {v: 1.0, },
        test3:  {v: 1.0 + doubleEpsilon,},
        test4:  {v: PI, },
        test5:  {v: -E },
        test6:  {v: doubleNaN, },
        test7:  {v: doubleInf, },
        test8:  {v: doubleNegInf,},
        test9:  {v: Double.MAX_VALUE, },
        test10: {v: Double.MIN_VALUE, }
      },
    method_expected_data:
      {
        test1:  0.0,
        test2:  1.0,
        test3:  2.0,
        test4:  4.0,
        test5: -2.0,
        test6: -doubleNaN,
        test7:  doubleInf,
        test8:  doubleNegInf,
        test9:  Double.MAX_VALUE,
        test10: 1,
      },
  }
- {
    method_name: Math.floor,
    func_name: floor,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test10:  {v: 0.0,},
        test20:  {v: 1.0, },
        test30:  {v: 1.0 + doubleEpsilon,},
        test40:  {v: 2.0 - doubleEpsilon,},
        test50:  {v: -1.0  + doubleEpsilon, },
        test60:  {v: -1.0  - doubleEpsilon, },
        test70:  {v: doubleNaN, },
        test80:  {v: doubleInf, },
        test90:  {v: doubleNegInf,},
        test100: {v: Double.MAX_VALUE, },
        test110: {v: Double.MIN_VALUE, }
      },
    method_expected_data:
      {
        test10:  0.0,
        test20:  1.0,
        test30:  1.0,
        test40:  1.0,
        test50: -1.0,
        test60: -2.0,
        test70: -doubleNaN,
        test80:  doubleInf,
        test90:  doubleNegInf,
        test100: Double.MAX_VALUE,
        test110: Double.MIN_VALUE,
      },
  }
- {
    method_name: Math.round,
    func_name: round,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test10:  {v:  0.0,},
        test20:  {v:  0.5 + doubleEpsilon,},
        test30:  {v:  0.5 - doubleEpsilon,},
        test40:  {v:  1.0,},
        test50:  {v: -0.5 - doubleEpsilon,},
        test60:  {v: -0.5 + doubleEpsilon,},
        test70:  {v: -1.0, },
        test80:  {v: doubleNaN, },
        test90:  {v: doubleInf, },
        test100: {v: doubleNegInf,},
        test110: {v: Double.MAX_VALUE, },
        test120: {v: Double.MIN_VALUE, }
      },
    method_expected_data:
      {
        test10:  0.0,
        test20:  1.0,
        test30:  0.0,
        test40:  1.0,
        test50: -1.0,
        test60:  0.0,
        test70: -1.0,
        test80: -doubleNaN,
        test90:  doubleInf,
        test100: doubleNegInf,
        test110: Double.MAX_VALUE,
        test120: Double.MIN_VALUE,
      },
  }
- {
    func_name: max,
    method_name: Math.max,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double", u: "double"},

    method_test_index_data:
      {
        test10:  {v:  128.0, u:  256.0},
        test20:  {v:  139.0, u:  139.0},
        test30:  {v: -233.0, u: -233.0},
        test40:  {v: -234.0, u: -133.0},
        test50:  {v:  777.0, u:  777.0 + doubleEpsilon},
        test60:  {v: -777.0 - doubleEpsilon, u: -777.0},
        test70:  {v: doubleNaN, u: doubleNaN},
        test80:  {v: doubleInf, u: doubleInf},
        test90:  {v: doubleNegInf, u: doubleNegInf},
        test100: {v: Double.MAX_VALUE, u: 0.0},
        test110: {v: 256.0, u: Double.MIN_VALUE},
        test120: {v: doubleInf, u: doubleNaN}

      },
    method_expected_data:
      {
        test10:  256.0,
        test20:  139.0,
        test30: -233.0,
        test40: -133.0,
        test50:  777.0 + doubleEpsilon,
        test60: -777.0,
        test70:  doubleNaN,
        test80:  doubleInf,
        test90:  doubleNegInf,
        test100: Double.MAX_VALUE,
        test110: 256.0,
        test120: doubleNaN,
      },
  }
- {
    func_name: max,
    method_name: Math.max,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double", u: "double", z: "double"},

    method_test_index_data:
      {
        test10:  {v:  128.0, u:  256.0, z:  198.0},
        test20:  {v:  139.0, u:  139.0, z:  43.0},
        test30:  {v: -233.0, u: -233.0, z: -289.0},
        test40:  {v: -234.0, u: -133.0, z: -176.0},
        test50:  {v:  777.0, u:  777.0 + doubleEpsilon, z: 777.0 - doubleEpsilon},
        test60:  {v: -777.0 - doubleEpsilon, u: -777.0, z: -777.0 + doubleEpsilon},
        test70:  {v: doubleNaN, u: doubleNaN, z: doubleNaN},
        test80:  {v: doubleInf, u: doubleInf, z: doubleInf},
        test90:  {v: doubleNegInf, u: doubleNegInf, z: doubleNegInf},
        test100: {v: Double.MAX_VALUE, u: 256.0, z: Double.MIN_VALUE}

      },
    method_expected_data:
      {
        test10:  256.0,
        test20:  139.0,
        test30: -233.0,
        test40: -133.0,
        test50:  777.0 + doubleEpsilon,
        test60: -777.0 + doubleEpsilon,
        test70:  doubleNaN,
        test80:  doubleInf,
        test90:  doubleNegInf,
        test100: Double.MAX_VALUE
      },
  }
- {
    func_name: min,
    method_name: Math.min,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double", u: "double"},

    method_test_index_data:
      {
        test10:  {v:  128.0, u:  256.0},
        test20:  {v:  139.0, u:  139.0},
        test30:  {v: -233.0, u: -233.0},
        test40:  {v: -234.0, u: -133.0},
        test50:  {v:  777.0, u:  777.0 + doubleEpsilon},
        test60:  {v: -777.0 - doubleEpsilon, u: -777.0},
        test70:  {v: doubleNaN, u: doubleNaN},
        test80:  {v: doubleInf, u: doubleInf},
        test90:  {v: doubleNegInf, u: doubleNegInf},
        test100: {v: Double.MAX_VALUE, u: 0.0},
        test110: {v: Double.MIN_VALUE, u: 256.0},
        test120: {v: doubleInf, u: doubleNaN}

      },
    method_expected_data:
      {
        test10:  128.0,
        test20:  139.0,
        test30: -233.0,
        test40: -234.0,
        test50:  777.0,
        test60: -777.0 - doubleEpsilon,
        test70:  doubleNaN,
        test80:  doubleInf,
        test90:  doubleNegInf,
        test100: 0.0,
        test110: Double.MIN_VALUE,
        test120: doubleNaN
      },
  }
- {
    func_name: min,
    method_name: Math.min,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double", u: "double", z: "double"},

    method_test_index_data:
      {
        test10:  {v:  128.0, u:  256.0, z:  198.0},
        test20:  {v:  139.0, u:  139.0, z:  143.0},
        test30:  {v: -233.0, u: -233.0, z: -198.0},
        test40:  {v: -234.0, u: -133.0, z: -176.0},
        test50:  {v:  777.0, u:  777.0 + doubleEpsilon, z: 777.0 - doubleEpsilon},
        test60:  {v: -777.0 - doubleEpsilon, u: -777.0, z: -777.0 + doubleEpsilon},
        test70:  {v: doubleNaN, u: doubleNaN, z: doubleNaN},
        test80:  {v: doubleInf, u: doubleInf, z: doubleInf},
        test90:  {v: doubleNegInf, u: doubleNegInf, z: doubleNegInf},
        test100: {v: Double.MAX_VALUE, u: Double.MIN_VALUE, z: 128.0}

      },
    method_expected_data:
      {
        test10:  128.0,
        test20:  139.0,
        test30: -233.0,
        test40: -234.0,
        test50:  777.0 - doubleEpsilon,
        test60: -777.0 - doubleEpsilon,
        test70:  doubleNaN,
        test80:  doubleInf,
        test90:  doubleNegInf,
        test100: Double.MIN_VALUE,
      },
  }
- {
    method_name: Math.imul,
    func_name: imul,
    method_nature: function,
    result_type: double,
    method_signature:  {a: "double", b: "double"},

    method_test_index_data:
      {
        test10:  {a:  2.5, b:  2.5},
        test20:  {a:  5.0, b:  5.05},
        test21:  {a: -5.0, b:  5.05},
        test22:  {a:  5.0, b: -5.05},
        test23:  {a: -5.0, b: -5.05},
        test30:  {a: 1e18, b: -5.0},
        test31:  {a: 1e18, b: -1.0},
        test32:  {a: -5.0, b: 1e18},
        test33:  {a: -1.0, b: 1e18},
      },
    method_expected_data:
      {
        test10:  4,
        test20:  25,
        test21: -25,
        test22: -25,
        test23:  25,
        test30: -1156841472,
        test31:  1486618624,
        test32: -1156841472,
        test33:  1486618624
      },
  }
- {
    method_name: Math.fround,
    func_name: fround,
    method_nature: function,
    result_type: double,
    method_signature:  {doubleVal: "double"},

    method_test_index_data:
      {
        test10:  {doubleVal:  2.5},
        test20:  {doubleVal:  5.0},
        test21:  {doubleVal:  5.05},
        test30:  {doubleVal: -5.0},
        test31:  {doubleVal:  5.123456789123456},
        test32:  {doubleVal: -5.123456789123456},
        test40:  {doubleVal:  0},
        test50:  {doubleVal:  Double.MAX_VALUE - 1000},
        test60:  {doubleVal:  doubleNaN},
        test70:  {doubleVal:  doubleInf},
        test80:  {doubleVal:  doubleNegInf},
        test90:  {doubleVal:  Double.MAX_VALUE, },
        test100: {doubleVal:  Double.MIN_VALUE, }

      },
    method_expected_data:
      {
        test10:  2.5,
        test20:  5.0,
        test21:  5.05,
        test30: -5.0,
        test31:  5.12345700000000,
        test32: -5.12345700000000,
        test40:  0.0,
        test50:  doubleInf,
        test60:  doubleNaN,
        test70:  doubleInf,
        test80:  doubleNegInf,
        test90:  doubleInf,
        test100: Double.MIN_VALUE,
      },
  }
