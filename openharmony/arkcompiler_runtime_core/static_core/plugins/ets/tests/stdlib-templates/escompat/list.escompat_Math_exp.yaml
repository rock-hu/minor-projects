# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    method_name: Math.exp,
    func_name: exp,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: { v: 0.0, },
        test2: { v: 1.0,},
        test3: { v: 2.0, },
        test4: { v: -1.0, },
        test5: { v: PI,  },
        test6: { v: doubleNaN, },
        test7: { v: doubleInf, },
        test8: { v: doubleNegInf,},
        test9: {v: Double.MAX_VALUE, },
        test10: {v: Double.MIN_VALUE, }
      },
    method_expected_data:
      {
        test1: 1.0,
        test2: E,
        test3: E * E,
        test4: 0.36787941,
        test5: 23.140692633,
        test6: -doubleNaN,
        test7: doubleInf,
        test8: 0.0,
        test9: doubleInf,
        test10: 1.0,
      },
  }
- {
    method_name: Math.expm1,
    func_name: expm1,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: {v: -1.0,},
        test2: {v:  0.0,},
        test3: {v:  1.0,},
        test4: {v:  2.0,},
        test5: {v:  3.0, },
        test6: {v: doubleNaN,},
        test7: {v: doubleInf, },
        test8: {v: doubleNegInf,},
        test9: {v: Double.MAX_VALUE, },
        test10: {v: Double.MIN_VALUE, }
      },
    method_expected_data:
      {
        test1:  -0.63212056,
        test2:   0.0,
        test3:   E - 1,
        test4:   6.389056,
        test5:   19.08553692,
        test6:  -doubleNaN,
        test7:   doubleInf,
        test8:  -1.0,
        test9:   doubleInf,
        test10:  Double.MIN_VALUE,
      },
  }
- {
    method_name: Math.pow,
    func_name: pow,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double", u: "double"},

    method_test_index_data:
      {
        test1: { v: 2.0, u: 3.0},
        test2: { v: 4.0, u: 0.5},
        test3: { v: -2.0, u: 3.0 },
        test4: { v: -2.0, u: 4.0,},
        test5: { v: doubleNaN, u: doubleInf},
        test6: { v: doubleInf, u: doubleInf},
        test7: { v: Double.MAX_VALUE, u: 5.0 },
        test8: { v: Double.MIN_VALUE, u: 5.0 },
        test9: { v: -1.0, u: doubleNegInf },
        test10: { v: 1.0, u: doubleNegInf },
        test11: { v: -2.0, u: 0.5 }
      },
    method_expected_data:
      {
        test1:  8.0,
        test2:  2.0,
        test3:  -8.0,
        test4:  16,
        test5:  doubleNaN,
        test6:  doubleInf,
        test7:  doubleInf,
        test8:  0.0,
        test9:  1.0,
        test10: 1.0,
        test11: doubleNaN,
      },
  }
- {
    method_name: Math.sqrt,
    func_name: sqrt,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: { v:  0.0},
        test2: { v:  E},
        test3: { v:  PI },
        test4: { v:  4.0,},
        test5: { v: -1.0 },
        test6: { v: doubleNaN, },
        test7: { v: doubleInf, },
        test8: { v: doubleNegInf,},
        test9: { v: Double.MAX_VALUE, },
        test10: {v: Double.MIN_VALUE, },
        test11: {v: 1e20 },
        },
    method_expected_data:
      {
        test1:  0.0,
        test2:  1.64872127,
        test3:  1.77245385,
        test4:  2.0,
        test5:  doubleNaN,
        test6: -doubleNaN,
        test7:  doubleInf,
        test8:  -doubleNaN,
        test9:  1.3407807929942596e+154,
        test10: 1.4916681462400413e-154,
        test11: 1e10
      },
  }
- {
    method_name: Math.cbrt,
    func_name: cbrt,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: { v: 0.0},
        test2: { v: E },
        test3: { v: PI},
        test4: { v: 8.0 },
        test5: { v: -0.5 },
        test6: { v: -3 },
        test7: { v: 1e21 },
        test8: { v: doubleNaN, },
        test9: { v: doubleInf, },
        test10: { v: doubleNegInf, },
        test11: { v: Double.MAX_VALUE, },
        test12: {v: Double.MIN_VALUE, }
        },
    method_expected_data:
      {
        test1:  0.0,
        test2:  1.39561243,
        test3:  1.46459189,
        test4:  2.0,
        test5: -0.7937005259840998,
        test6: -1.4422495703074083,
        test7:  1e7,
        test8: -doubleNaN,
        test9:  doubleInf,
        test10:  doubleNegInf,
        test11: 5.643803094122362e+102,
        test12: 1.7031839360032603e-108,
      },
  }
