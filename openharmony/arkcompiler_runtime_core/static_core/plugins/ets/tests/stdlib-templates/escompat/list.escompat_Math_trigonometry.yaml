# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    method_name: Math.sin,
    func_name: sin,
    method_nature: function, 
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: { v: 0.0, },
        test2: { v: PI,},
        test3: { v: PI/2, },
        test4: { v: PI/4, },
        test5: { v: -PI,  },
        test6: { v: -PI/2, },
        test7: { v: -PI/4, },
        test8: { v: doubleNaN, },
        test9: { v: doubleInf, },
        test10: { v: doubleNegInf,},
        test11: { v: Double.MAX_VALUE },
        test12: { v: Double.MIN_VALUE },
      },
    method_expected_data:
      {
        test1: 0.0,
        test2: 0.0,
        test3: 1.0,
        test4: SQRT1_2,
        test5: 0.0,
        test6: -1.0,
        test7: -(SQRT1_2),
        test8: -doubleNaN,
        test9: -doubleNaN,
        test10: -doubleNaN,
        test11: 0.004961954789184062,
        test12: Double.MIN_VALUE,
      },
  }
- {
    method_name: Math.cos,
    func_name: cos,
    method_nature: function, 
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: {v: 0.0,},
        test2: {v: PI,},
        test3: {v: PI/2,},
        test4: {v: PI/4,},
        test5: {v: -PI, },
        test6: {v: -PI/2, },
        test7: {v: -PI/4, },
        test8: {v: doubleNaN,},
        test9: {v: doubleInf, },
        test10: { v: doubleNegInf,},
        test11: { v: Double.MAX_VALUE },
        test12: { v: Double.MIN_VALUE },
      },
    method_expected_data:
      {
        test1: 1.0,
        test2: -1.0,
        test3: 0.0,
        test4: SQRT1_2,
        test5: -1.0,
        test6: 0.0,
        test7: SQRT1_2,
        test8: -doubleNaN,
        test9: -doubleNaN,
        test10: -doubleNaN,
        test11: -0.9999876894265599,
        test12: 1.0,
      },
  }
- {
    method_name: Math.tan,
    func_name: tan,
    method_nature: function, 
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: { v: 0.0,},
        test2: { v: PI,},
        test3: { v: PI/2 },
        test4: { v: PI/4,},
        test5: { v: -PI, },
        test6: { v: -PI/2, },
        test7: { v: -PI/4, },
        test8: { v: doubleNaN,},
        test9: { v: doubleInf,},
        test10: { v: doubleNegInf, },
        test11: { v: Double.MAX_VALUE },
        test12: { v: Double.MIN_VALUE },
        test13: { v: 1e18 },
        test14: { v: 1e30 },
      },
    method_expected_data:
      {
        test1: 0.0,
        test2: 0.0,
        test3: 16331239353195370,
        test4: 1.0,
        test5: 0.0,
        test6: -16331239353195370,
        test7: -1.0,
        test8: -doubleNaN,
        test9:  doubleNaN,
        test10: -doubleNaN,
        test11: -0.004962015874444895,
        test12: Double.MIN_VALUE,
        test13: -8.388549680593687,
        test14: -0.009331875232662407,
      },
  }
- {
    method_name: Math.asin,
    func_name: asin,
    method_nature: function, 
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: { v: -1.0},
        test2: { v: -0.866025404},
        test3: { v: -SQRT1_2 },
        test4: { v: -0.5,},
        test5: { v: 0.0 },
        test6: { v: 0.5 },
        test7: { v: SQRT1_2, },
        test8: { v: 0.866025404,},
        test9: { v: 1.0},
        test10: { v: doubleNaN, },
        test11: { v: doubleInf, },
        test12: { v: doubleNegInf, },
        test13: { v: Double.MAX_VALUE },
        test14: { v: Double.MIN_VALUE },
        },
    method_expected_data:
      {
        test1: -PI/2,
        test2: -PI/3,
        test3: -PI/4,
        test4: -PI/6,
        test5: 0.0,
        test6: PI/6,
        test7: PI/4,
        test8: PI/3,
        test9:  PI/2,
        test10: doubleNaN,
        test11: doubleNaN,
        test12: doubleNaN,
        test13: doubleNaN,
        test14: Double.MIN_VALUE,
      },
  }
- {
    method_name: Math.acos,
    func_name: acos,
    method_nature: function, 
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: { v: -1.0},
        test2: { v: -0.866025404},
        test3: { v: -SQRT1_2 },
        test4: { v: -0.5,},
        test5: { v: 0.0 },
        test6: { v: 0.5 },
        test7: { v: SQRT1_2, },
        test8: { v: 0.866025404,},
        test9: { v: 1.0},
        test10: { v: doubleNaN, },
        test11: { v: doubleInf, },
        test12: { v: doubleNegInf, },
        test13: { v: Double.MAX_VALUE },
        test14: { v: Double.MIN_VALUE },
        },
    method_expected_data:
      {
        test1: PI,
        test2: (5*PI)/6,
        test3: (3*PI)/4,
        test4: (2*PI)/3,
        test5: PI/2,
        test6: PI/3,
        test7: PI/4,
        test8: PI/6,
        test9:  0.0,
        test10: -doubleNaN,
        test11: doubleNaN,
        test12: doubleNaN,
        test13: doubleNaN,
        test14: 1.5707963267948966,
      },
  }
- {
    method_name: Math.atan,
    func_name: atan,
    method_nature: function, 
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: { v: -1.0},
        test2: { v: -0.866025404},
        test3: { v: -SQRT1_2 },
        test4: { v: -0.5,},
        test5: { v: 0.0 },
        test6: { v: 0.5 },
        test7: { v: SQRT1_2, },
        test8: { v: 0.866025404,},
        test9: { v: 1.0},
        test10: { v: doubleNaN, },
        test11: { v: doubleInf, },
        test12: { v: doubleNegInf, },
        test13: { v: Double.MAX_VALUE },
        test14: { v: Double.MIN_VALUE },
        },
    method_expected_data:
      {
        test1: -PI/4,
        test2: -0.71372438,
        test3: -0.61547971,
        test4: -0.46364761,
        test5: 0.0,
        test6: 0.46364761,
        test7: 0.61547971,
        test8: 0.71372438,
        test9: PI/4,
        test10: -doubleNaN,
        test11: PI/2,
        test12: -PI/2,
        test13: 1.5707963267948966,
        test14: Double.MIN_VALUE,
      },
  }
- {
    method_name: Math.atan2,
    func_name: atan2,
    method_nature: function, 
    result_type: double,
    method_signature:  {y: "double", x: "double"},

    method_test_index_data:
      {
        test1: { y: 90, x: 15},
        test2: { y: 15, x: 90},
        test3: { y: doubleNaN, x: doubleNaN },
        test4: { y: doubleInf, x: doubleInf },
        test5: { y: doubleNegInf, x: doubleInf },
        test6: { y: Double.MAX_VALUE, x: 90 },
        test7: { y: Double.MIN_VALUE, x: 90 },

        },
    method_expected_data:
      {
        test1: 1.40564764,
        test2: 0.165148677,
        test3: -doubleNaN,
        test4: 0.7853981633974483,
        test5: -0.7853981633974483,
        test6: 1.5707963267948966,
        test7: 0.0,
      },
  }
- {
    method_name: Math.hypot,
    func_name: hypot,
    method_nature: function, 
    result_type: double,
    method_signature:  {u: "double", v: "double"},

    method_test_index_data:
      {
        test1:  { u: 3.0, v: 4.0},
        test2:  { u: -3.0, v: -4.0},
        test3:  { u: 0.0, v: 4.0},
        test4:  { u: 4.0, v: 0.0},
        test5:  { u: 0.0, v: 0.0},
        test6:  { u: doubleNaN, v: doubleNaN },
        test7:  { u: doubleInf, v: doubleInf },
        test8:  { u: doubleNegInf, v: doubleInf },
        test9:  { u: Double.MAX_VALUE, v: 0.0},
        test10: { u: Double.MIN_VALUE, v: 0.0},
        test11: { u: doubleNaN, v: doubleInf },
        },
    method_expected_data:
      {
        test1:  5.0,
        test2:  5.0,
        test3:  4.0,
        test4:  4.0,
        test5:  0.0,
        test6:  doubleNaN,
        test7:  doubleInf,
        test8:  doubleInf,
        test9:  Double.MAX_VALUE,
        test10: Double.MIN_VALUE,
        test11: doubleInf
      },
  }
