# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    method_name: copyTo,
    method_nature: procedure,
    result: dst,
    result_nature: array,
    result_type: "FixedArray<boolean>",
    init_value: "[]",
    method_signature_desc: {first: "boolean_array", second: "boolean_array", dstStart: int, srcStart: int, srcEnd: int},
    method_signature:
      {
        src: "FixedArray<boolean>",
        dst: "FixedArray<boolean>",
        dstStart: int,
        srcStart: int,
        srcEnd: int,
      },
    method_throws: "true",
    method_test_index_data:
      {
        test1:
          {
            src: "[false,  false,  false,  false,  false,  false,  false,  false,  false]",
            dst: "[true,  true,  true,  true,  true,  true,  true,  true,  true]",
            dstStart: 0,
            srcStart: 2,
            srcEnd: 3,
          },
        test2:
          {
            src: "[false,  false,  false,  false,  false,  false,  false,  false,  false]",
            dst: "[true,  true,  true,  true,  true,  true,  true,  true,  true]",
            dstStart: 1,
            srcStart: 7,
            srcEnd: 8,
          },
        test3:
          {
            src: "[false,  false,  false,  false,  false,  false,  false,  false,  false]",
            dst: "[true,  true,  true,  true,  true,  true,  true,  true,  true]",
            dstStart: 0,
            srcStart: 0,
            srcEnd: 8,
          },
        test4:
          {
            src: "[false,  false,  false,  false,  false,  false,  false,  false,  false]",
            dst: "[true,  true,  true,  true,  true,  true,  true,  true,  true]",
            dstStart: 7,
            srcStart: 1,
            srcEnd: 2,
          },
      },

    method_expected_data:
      {
        test1: "[false, true, true, true, true, true, true, true, true ]",
        test2: "[true, false, true, true, true, true, true, true, true ]",
        test3: "[false, false, false, false, false, false, false, false, true  ]",
        test4: "[true, true, true, true, true, true, true, false, true ]",
      },
  }
- {
    method_name: copyTo,
    method_nature: procedure,
    result: dst,
    result_nature: array,
    result_type: "FixedArray<byte>",
    init_value: "[]",
    method_signature_desc: {first: "byte_array", second: "byte_array", dstStart: int, srcStart: int, srcEnd: int},
    method_signature:
      {
        src: "FixedArray<byte>",
        dst: "FixedArray<byte>",
        dstStart: int,
        srcStart: int,
        srcEnd: int,
      },
    method_throws: "true",
    method_test_index_data:
      {
        test1:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 2,
            srcEnd: 3,
          },
        test2:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 1,
            srcStart: 7,
            srcEnd: 8,
          },
        test3:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 0,
            srcEnd: 8,
          },
        test4:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 7,
            srcStart: 1,
            srcEnd: 2,
          },
      },
    method_expected_data:
      {
        test1: "[0, 1, 1, 1, 1, 1, 1, 1, 1]",
        test2: "[1, 0, 1, 1, 1, 1, 1, 1, 1]",
        test3: "[0, 0, 0, 0, 0, 0, 0, 0, 1]",
        test4: "[1, 1, 1, 1, 1, 1, 1, 0, 1 ]",
      },
  }
- {
    method_name: copyTo,
    method_nature: procedure,
    result: dst,
    result_nature: array,
    result_type: "FixedArray<short>",
    init_value: "[]",
    method_signature_desc: {first: "short_array", second: "short_array", dstStart: int, srcStart: int, srcEnd: int},
    method_signature:
      {
        src: "FixedArray<short>",
        dst: "FixedArray<short>",
        dstStart: int,
        srcStart: int,
        srcEnd: int,
      },
    method_throws: "true",

    method_test_index_data:
      {
        test1:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 2,
            srcEnd: 3,
          },
        test2:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 1,
            srcStart: 7,
            srcEnd: 8,
          },
        test3:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 0,
            srcEnd: 8,
          },
        test4:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 7,
            srcStart: 1,
            srcEnd: 2,
          },
      },
    method_expected_data:
      {
        test1: "[0, 1, 1, 1, 1, 1, 1, 1, 1]",
        test2: "[1, 0, 1, 1, 1, 1, 1, 1, 1]",
        test3: "[0, 0, 0, 0, 0, 0, 0, 0, 1]",
        test4: "[1, 1, 1, 1, 1, 1, 1, 0, 1 ]",
      },
  }
- {
    method_name: copyTo,
    method_nature: procedure,
    result: dst,
    result_nature: array,
    result_type: "FixedArray<int>",
    init_value: "[]",
    method_signature_desc: {first: "int_array", second: "int_array", dstStart: int, srcStart: int, srcEnd: int},
    method_signature:
      { src: "FixedArray<int>", dst: "FixedArray<int>", dstStart: int, srcStart: int, srcEnd: int },
    method_throws: "true",

    method_test_index_data:
      {
        test1:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 2,
            srcEnd: 3,
          },
        test2:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 1,
            srcStart: 7,
            srcEnd: 8,
          },
        test3:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 0,
            srcEnd: 8,
          },
        test4:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 7,
            srcStart: 1,
            srcEnd: 2,
          },
      },
    method_expected_data:
      {
        test1: "[0, 1, 1, 1, 1, 1, 1, 1, 1]",
        test2: "[1, 0, 1, 1, 1, 1, 1, 1, 1]",
        test3: "[0, 0, 0, 0, 0, 0, 0, 0, 1]",
        test4: "[1, 1, 1, 1, 1, 1, 1, 0, 1 ]",
      },
  }
- {
    method_name: copyTo,
    method_nature: procedure,
    result: dst,
    result_nature: array,
    result_type: "FixedArray<long>",
    init_value: "[]",
    method_signature_desc: {first: "long_array", second: "long_array", dstStart: int, srcStart: int, srcEnd: int},
    method_signature:
      {
        src: "FixedArray<long>",
        dst: "FixedArray<long>",
        dstStart: int,
        srcStart: int,
        srcEnd: int,
      },
    method_throws: "true",
    method_test_index_data:
      {
        test1:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 2,
            srcEnd: 3,
          },
        test2:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 1,
            srcStart: 7,
            srcEnd: 8,
          },
        test3:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 0,
            srcEnd: 8,
          },
        test4:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 7,
            srcStart: 1,
            srcEnd: 2,
          },
      },
    method_expected_data:
      {
        test1: "[0, 1, 1, 1, 1, 1, 1, 1, 1]",
        test2: "[1, 0, 1, 1, 1, 1, 1, 1, 1]",
        test3: "[0, 0, 0, 0, 0, 0, 0, 0, 1]",
        test4: "[1, 1, 1, 1, 1, 1, 1, 0, 1 ]",
      },
  }
- {
    method_name: copyTo,
    method_nature: procedure,
    result: dst,
    result_nature: array,
    result_type: "FixedArray<float>",
    init_value: "[]",
    method_signature_desc: {first: "float_array", second: "float_array", dstStart: int, srcStart: int, srcEnd: int},
    method_signature:
      {
        src: "FixedArray<float>",
        dst: "FixedArray<float>",
        dstStart: int,
        srcStart: int,
        srcEnd: int,
      },
    method_throws: "true",

    method_test_index_data:
      {
        test1:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 2,
            srcEnd: 3,
          },
        test2:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 1,
            srcStart: 7,
            srcEnd: 8,
          },
        test3:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 0,
            srcEnd: 8,
          },
        test4:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 7,
            srcStart: 1,
            srcEnd: 2,
          },
      },
    method_expected_data:
      {
        test1: "[0, 1, 1, 1, 1, 1, 1, 1, 1]",
        test2: "[1, 0, 1, 1, 1, 1, 1, 1, 1]",
        test3: "[0, 0, 0, 0, 0, 0, 0, 0, 1]",
        test4: "[1, 1, 1, 1, 1, 1, 1, 0, 1 ]",
      },
  }
- {
    method_name: copyTo,
    method_nature: procedure,
    result: dst,
    result_nature: array,
    result_type: "FixedArray<double>",
    init_value: "[]",
    method_signature_desc: {first: "double_array", second: "double_array", dstStart: int, srcStart: int, srcEnd: int},
    method_signature:
      {
        src: "FixedArray<double>",
        dst: "FixedArray<double>",
        dstStart: int,
        srcStart: int,
        srcEnd: int,
      },
    method_throws: "true",

    method_test_index_data:
      {
        test1:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 2,
            srcEnd: 3,
          },
        test2:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 1,
            srcStart: 7,
            srcEnd: 8,
          },
        test3:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 0,
            srcStart: 0,
            srcEnd: 8,
          },
        test4:
          {
            src: "[0, 0, 0, 0, 0, 0, 0, 0, 0]",
            dst: "[1, 1, 1, 1, 1, 1, 1, 1, 1]",
            dstStart: 7,
            srcStart: 1,
            srcEnd: 2,
          },
      },
    method_expected_data:
      {
        test1: "[0, 1, 1, 1, 1, 1, 1, 1, 1]",
        test2: "[1, 0, 1, 1, 1, 1, 1, 1, 1]",
        test3: "[0, 0, 0, 0, 0, 0, 0, 0, 1]",
        test4: "[1, 1, 1, 1, 1, 1, 1, 0, 1 ]",
        },
  }
- {
    method_name: copyTo,
    method_nature: procedure,
    result: dst,
    result_nature: array,
    result_type: "FixedArray<char>",
    init_value: "[]",
    method_signature_desc: {first: "char_array", second: "char_array", dstStart: int, srcStart: int, srcEnd: int},
    method_signature:
      {
        src: "FixedArray<char>",
        dst: "FixedArray<char>",
        dstStart: int,
        srcStart: int,
        srcEnd: int,
      },
    method_throws: "true",

    method_test_index_data:
      {
        test1:
          {
            src: "[c'a', c'b', c'c', c'd', c'e', c'f', c'g', c'h', c'j']",
            dst: "[c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'H', c'J']",
            dstStart: 0,
            srcStart: 2,
            srcEnd: 3,
          },
        test2:
          {
            src: "[c'a', c'b', c'c', c'd', c'e', c'f', c'g', c'h', c'j']",
            dst: "[c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'H', c'J']",
            dstStart: 1,
            srcStart: 7,
            srcEnd: 8,
          },
        test3:
          {
            src: "[c'a', c'b', c'c', c'd', c'e', c'f', c'g', c'h', c'j']",
            dst: "[c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'H', c'J']",
            dstStart: 0,
            srcStart: 0,
            srcEnd: 8,
          },
        test4:
          {
            src: "[c'a', c'b', c'c', c'd', c'e', c'f', c'g', c'h', c'j']",
            dst: "[c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'H', c'J']",
            dstStart: 7,
            srcStart: 1,
            srcEnd: 2,
          },
      },
    method_expected_data:
      {
        test1: "[c'c', c'B', c'C', c'D', c'E', c'F', c'G', c'H', c'J']",
        test2: "[c'A', c'h', c'C', c'D', c'E', c'F', c'G', c'H', c'J']",
        test3: "[c'a', c'b', c'c', c'd', c'e', c'f', c'g', c'h', c'J']",
        test4: "[c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'b', c'J']",
      },
  }
