# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    method_name: sort,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "boolean[]",
    method_signature: { arr: "boolean[]" },
    method_throws: "false",
    method_signature_desc: {arr: "boolean_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[false, false, false, false, false, true]",
          },
        test2:
          {
            arr: "[false, false, false, false, true, false]",
          },
        test3:
          {
            arr: "[true, false, true, false, false, true]",
          },
        test4:
          {
            arr: "[]",
          },
      },
    method_expected_data:
      {
        test1: "[false, false, false, false, false, true]",
        test2: "[false, false, false, false, false, true]",
        test3: "[false, false, false, true, true, true]",
        test4: "[]"
      },
  }
- {
    method_name: sort,
    method_nature: procedure,
    result: arr,
    result_nature: array,
    result_type: "byte[]",
    method_signature: { arr: "byte[]"},
    method_throws: "false",
    method_signature_desc: {arr: "byte_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test2:
          {
            arr: "[4, 3, 2, -11, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test3:
          {
            arr: "[0, 1, 2, 3, 4, 5, 9, 8, 7, 6, 10, 11, 12, 13, 14, 15, 16]",
          },
        test4:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 15, 14, 13]",
          },
        test5:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]",
          },
        test6:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]",
          },
        test7:
          {
            arr: "[0, 1, 2, 3, 1, 5, 6, 1, 8, 9, 11, 1,  12,  1,  1, 1,  1]",
          },
        test8:
          {
            arr: "[]",
          },   

      },
    method_expected_data:
      {
        test1: "[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test2: "[-11, 0,  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test3: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test4: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test5: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test6: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test7: "[0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3,  5,  6,  8,  9,  11, 12]",
        test8: "[]"
      },
  }
- {
    method_name: sort,
    method_nature: procedure,
    method_return_type: void,
    result: arr,
    result_nature: array,
    result_type: "short[]",
    method_signature: { arr: "short[]" },
    method_throws: "false",
    method_signature_desc: {arr: "short_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test2:
          {
            arr: "[4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test3:
          {
            arr: "[0, 1, 2, 3, 4, 5, 9, 8, 7, 6, 10, 11, 12, 13, 14, 15, 16]",
          },
        test4:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 15, 14, 13]",
          },
        test5:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]",
          },
        test6:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, -13, 14, 15, 16]",
          },
        test7:
          {
            arr: "[0, 1, 2, 3, 1, 5, 6, 1, 8, 9, 11, 1,  12,  1,  1, 1,  1]",
          },
        test8:
          {
            arr: "[]",
          },   
      },
    method_expected_data:
      {
        test1: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test2: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test3: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test4: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test5: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test6: "[-13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16]",
        test7: "[0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3,  5,  6,  8,  9,  11, 12]",
        test8: "[]"
      },
  }
- {
    method_name: sort,
    method_nature: procedure,
    method_return_type: void,
    result: arr,
    result_nature: array,
    result_type: "int[]",
    method_signature: { arr: "int[]"},
    method_throws: "false",
    method_signature_desc: {arr: "int_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test2:
          {
            arr: "[4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test3:
          {
            arr: "[0, 1, 2, 3, 4, 5, 9, 8, 7, 6, 10, 11, 12, 13, 14, 15, 16]",
          },
        test4:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 15, 14, 13]",
          },
        test5:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]",
          },
        test6:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]",
          },
        test7:
          {
            arr: "[0, 1, 2, 3, 1, 5, 6, 1, 8, 9, 11, 1,  12,  1,  1, 1,  1]",
          },
        test8:
          {
            arr: "[]",
          },  
      },
    method_expected_data:
      {
        test1: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test2: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test3: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test4: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test5: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test6: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test7: "[0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3,  5,  6,  8,  9,  11, 12]",
        test8: "[]"
      },
  }
- {
    method_name: sort,
    method_nature: procedure,
    method_return_type: void,
    result: arr,
    result_nature: array,
    result_type: "long[]",
    method_signature: { arr: "long[]"},
    method_throws: "false",
    method_signature_desc: {arr: "long_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test2:
          {
            arr: "[4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test3:
          {
            arr: "[0, 1, 2, 3, 4, 5, 9, 8, 7, 6, 10, 11, 12, 13, 14, 15, 16]",
          },
        test4:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 15, 14, 13]",
          },
        test5:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]",
          },
        test6:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]",
          },
        test7:
          {
            arr: "[0, 1, 2, 3, 1, 5, 6, 1, 8, 9, 11, 1,  12,  1,  1, 1,  1]",
          },
        test8:
          {
            arr: "[]",
          },  
      },
    method_expected_data:
      {
        test1: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test2: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test3: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test4: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test5: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test6: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test7: "[0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3,  5,  6,  8,  9,  11, 12]",
        test8: "[]"
      },
  }
- {
    method_name: sort,
    method_nature: procedure,
    method_return_type: void,
    result: arr,
    result_nature: array,
    result_type: "float[]",
    method_signature: { arr: "float[]"},
    method_throws: "false",
    method_signature_desc: {arr: "float_array"},
    method_test_index_data:
      {
        test1:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test2:
          {
            arr: "[4.0, 3.0, 2.0, 1.0, 0.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test3:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 9.0, 8.0, 7.0, 6.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test4:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 16.0, 15.0, 14.0, 13.0]",
          },
        test5:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 10.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test6:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 10.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test7:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 1.0, 5.0, 6.0, 1.0, 8.0, 9.0, 11.0, 1.0,  12.0, 1.0,  1.0,  1.0,  1.0]",
          },
        test8:
          {
            arr: "[]",
          },  
      },
    method_expected_data:
      {
        test1: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test2: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test3: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test4: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test5: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test6: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test7: "[0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 3.0,  5.0,  6.0,  8.0,  9.0,  11.0, 12.0]",
        test8: "[]"
      },
  }
- {
    method_name: sort,
    method_nature: procedure,
    method_return_type: void,
    result: arr,
    result_nature: array,
    result_type: "double[]",
    method_signature: { arr: "double[]" },
    method_throws: "false",
    method_signature_desc: {arr: "double_array"},

    method_test_index_data:
      {
        test1:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test2:
          {
            arr: "[4.0, 3.0, 2.0, 1.0, 0.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test3:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 9.0, 8.0, 7.0, 6.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test4:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 16.0, 15.0, 14.0, 13.0]",
          },
        test5:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 10.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test6:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 10.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
          },
        test7:
          {
            arr: "[0.0, 1.0, 2.0, 3.0, 1.0, 5.0, 6.0, 1.0, 8.0, 9.0, 11.0, 1.0,  12.0, 1.0,  1.0,  1.0,  1.0]",
          },
        test8:
          {
            arr: "[]",
          },  
      },
    method_expected_data:
      {
        test1: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test2: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test3: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test4: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test5: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test6: "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0]",
        test7: "[0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 3.0,  5.0,  6.0,  8.0,  9.0,  11.0, 12.0]",
        test8: "[]"
      },
  }
- {
    method_name: sort,
    method_nature: procedure,
    method_return_type: void,
    result: arr,
    result_nature: array,
    result_type: "char[]",
    method_signature: { arr: "char[]"},
    method_throws: "false",
    method_signature_desc: {arr: "char_array"},

    method_test_index_data:
      {
        test1:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test2:
          {
            arr: "[4, 3, 2, 1, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
          },
        test3:
          {
            arr: "[0, 1, 2, 3, 4, 5, 9, 8, 7, 6, 10, 11, 12, 13, 14, 15, 16]",
          },
        test4:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 15, 14, 13]",
          },
        test5:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]",
          },
        test6:
          {
            arr: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16]",
          },
        test7:
          {
            arr: "[0, 1, 2, 3, 1, 5, 6, 1, 8, 9, 11, 1,  12,  1,  1, 1,  1]",
          },
        test8:
          {
            arr: "[]",
          },  
      },
    method_expected_data:
      {
        test1: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test2: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test3: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test4: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test5: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test6: "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
        test7: "[0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3,  5,  6,  8,  9,  11, 12]",
        test8: "[]"
      },
  }
