# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    method_name: valueOf,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: Char,
    expected_data_item_type: char,
    expected_data_type: "char[]",
    param_list: { "param1": "[c'A', c'a', c'1']" },
    expected_test_data: "[c'A', c'a', c'1']",
    verify_test_result_function: compareWrapperObjectValue,
  }
- {
    method_name: toUpperCase,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: Char,
    expected_data_item_type: char,
    expected_data_type: "char[]",
    param_list:
      {
        "param1": "[c'a', c'b', c'c', c'd', c'e', c'f', c'g', c'h', c'i', c'j', c'k', c'l', c'm', c'n', c'o', c'p', c'q', c'r', c's', c't', c'u', c'v', c'w', c'x', c'y', c'z', c'Z', c'1']",
      },
    expected_test_data: "[c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'H', c'I', c'J', c'K', c'L', c'M', c'N', c'O', c'P', c'Q', c'R', c'S', c'T', c'U', c'V', c'W', c'X', c'Y', c'Z', c'Z', c'1']",
    verify_test_result_function: compareWrapperObjectValue,
  }
- {
    method_name: toLowerCase,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: Char,
    expected_data_item_type: char,
    expected_data_type: "char[]",
    param_list:
      {
        "param1": "[c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'H', c'I', c'J', c'K', c'L', c'M', c'N', c'O', c'P', c'Q', c'R', c'S', c'T', c'U', c'V', c'W', c'X', c'Y', c'Z', c'z', c'1']",
      },
    expected_test_data: "[c'a', c'b', c'c', c'd', c'e', c'f', c'g', c'h', c'i', c'j', c'k', c'l', c'm', c'n', c'o', c'p', c'q', c'r', c's', c't', c'u', c'v', c'w', c'x', c'y', c'z', c'z', c'1']",
    verify_test_result_function: compareWrapperObjectValue,
  }
- {
    method_name: isInBasicMultilingualPlane,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[c'\\uD7FF', c'\\uD800', c'\\uD801', c'\\uDBFE', c'\\uDBFF', c'\\uDC00', c'\\uDC01', c'\\uDFFE', c'\\uDFFF', c'\\uE000']",
      },
    expected_test_data: "[true, false, false, false, false, false, false, false, false, true]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isInBasicMultilingualPlane,
    object_type: Char,
    param_init_data_types: { "param1": "UTF_16_CodePoint[]" },
    param_types: { "param1": UTF_16_CodePoint },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[0xD7FF, 0xD800, 0xD801, 0xD900, 0xDFFE, 0xDFFF, 0xE000, 0x10000]",
      },
    expected_test_data: "[true, false, false, false, false, false, true, false]",
    verify_test_result_function: comparePrimitiveValue,
  }

- {
    method_name: isHighSurrogate,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[c'\\uD7FF', c'\\uD800', c'\\uD801', c'\\uDBFE', c'\\uDBFF', c'\\uDC00', c'\\uDC01']",
      },
    expected_test_data: "[false, true, true, true, true, false, false]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isLowSurrogate,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[c'\\uDBFF', c'\\uDC00', c'\\uDC01', c'\\uDFFE', c'\\uDFFF', c'\\uE000']",
      },
    expected_test_data: "[false, true, true, true, true, false]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: compare,
    object_type: Char,
    param_init_data_types: { "param1": "char[]", "param2": "char[]" },
    param_types: { "param1": char, "param2": char },
    param_nature: { "param1": primitive, "param2": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list: { "param1": "[c'a', c'b', c'd']", "param2": "[c'a', c'c', c'c']" },
    expected_test_data: "[true, false, false]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isBinDigit,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list: { "param1": "[c'0', c'1', c'x', c'2']" },
    expected_test_data: "[true, true, false, false]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isDecDigit,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[c'0', c'1', c'2', c'3', c'4', c'5', c'6', c'7', c'8', c'9', c'A', c'Ñ‰']",
      },
    expected_test_data: "[true, true, true, true, true, true, true, true, true, true, false, false]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isHexDigit,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[c'0', c'1',  c'2',  c'3',  c'4',  c'5',  c'6',  c'7',  c'8',  c'9', c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'a', c'b', c'c', c'd', c'e', c'f', c'g']",
      },
    expected_test_data: "[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true,  false]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isLowerCase,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[c'a', c'b', c'c', c'd', c'e', c'f', c'g', c'h', c'i', c'j', c'k', c'l', c'm', c'n', c'o', c'p', c'q', c'r', c's', c't', c'u', c'v', c'w', c'x', c'y', c'z', c'A', c'1']",
      },
    expected_test_data: "[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isUpperCase,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'H', c'I', c'J', c'K', c'L', c'M', c'N', c'O', c'P', c'Q', c'R', c'S', c'T', c'U', c'V', c'W', c'X', c'Y', c'Z', c'a', c'1']",
      },
    expected_test_data: "[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isLetter,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[c'a', c'b', c'c', c'd', c'e', c'f', c'g', c'h', c'i', c'j', c'k', c'l', c'm', c'n', c'o', c'p', c'q', c'r', c's', c't', c'u', c'v', c'w', c'x', c'y', c'z', c'A', c'B', c'C', c'D', c'E', c'F', c'G', c'H', c'I', c'J', c'K', c'L', c'M', c'N', c'O', c'P', c'Q', c'R', c'S', c'T', c'U', c'V', c'W', c'X', c'Y', c'Z', c'1']",
      },
    expected_test_data: "[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isWhiteSpace,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      { "param1": "[c' ', c'\\t', c'\\n', c'\\r', c'\\v', c'\\f', c'A', c'1', c'\u0000', c'\u00A0', c'\uFEFF']" },
    expected_test_data: "[true, true, true, true, true, true, false, false, false, true, true]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isWhiteSpace,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      { "param1": "[c'\u1680',c'\u2000',c'\u2001',c'\u2002',c'\u2003',c'\u2004',c'\u2005',c'\u2006',c'\u2007',c'\u2008',c'\u2009',c'\u200A',c'\u202F',c'\u205F',c'\u3000']" },
    expected_test_data: "[true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isPartOfSurrogatePair,
    object_type: Char,
    param_init_data_types: { "param1": "char[]" },
    param_types: { "param1": char },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[c'\\uD7FF', c'\\uD800', c'\\uD801', c'\\uD810', c'\\uDBFE', c'\\uDBFF', c'\\uDC00', c'\\uDC01', c'\\uDFFE', c'\\uDFFF', c'\\uE000']",
      },
    expected_test_data: "[    false,    true,      true,      true,      true,       true,      true,     true,       true,      true,      true]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: isValidCodePoint,
    object_type: Char,
    param_init_data_types: { "param1": "UTF_16_CodePoint[]" },
    param_types: { "param1": UTF_16_CodePoint },
    param_nature: { "param1": primitive },
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    param_list:
      {
        "param1": "[0xD000, 0xD7FF, 0x10000, 0x10401, 0x10FBFE, 0x10FFFF, 0xE000, 0xD800DBFF]",
      },
    expected_test_data: "[true, true, true, true, true, true, true, false ]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: codeUnitsToEncode,
    object_type: Char,
    param_init_data_types: { "param1": "UTF_16_CodePoint[]" },
    param_types: { "param1": UTF_16_CodePoint },
    param_nature: { "param1": primitive },
    method_return_type: int,
    expected_data_item_type: int,
    expected_data_type: "int[]",
    param_list: { "param1": "[0x0000D700, 0x10000, 0x0000E000]" },
    expected_test_data: "[1,2,1]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: charsToCodePoint,
    object_type: Char,
    param_init_data_types: { "param1": "char[]", "param2": "char[]" },
    param_types: { "param1": char, "param2": char },
    param_nature: { "param1": primitive, "param2": primitive },
    method_return_type: UTF_16_CodePoint,
    expected_data_item_type: UTF_16_CodePoint,
    expected_data_type: "UTF_16_CodePoint[]",
    param_list:
      {
        "param1": "[c'\\uD800', c'\\uD801', c'\\uDBFE', c'\\uDBFF']",
        "param2": "[c'\\uDC00', c'\\uDC01', c'\\uDFFE', c'\\uDFFF']",
      },
    expected_test_data: "[0x10000, 0x10401, 0x10FBFE, 0x10FFFF]",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: getHighSurrogate,
    object_type: Char,
    param_init_data_types: { "param1": " UTF_16_CodePoint[]" },
    param_types: { "param1": UTF_16_CodePoint },
    param_nature: { "param1": primitive },
    method_return_type: char,
    expected_data_item_type: char,
    expected_data_type: "char[]",
    param_list: { "param1": "[0x10401, 0x10802]" },
    expected_test_data: "[c'\\uD801', c'\\uD802']",
    verify_test_result_function: comparePrimitiveValue,
  }
- {
    method_name: getLowSurrogate,
    object_type: Char,
    param_init_data_types: { "param1": " UTF_16_CodePoint[]" },
    param_types: { "param1": UTF_16_CodePoint },
    param_nature: { "param1": primitive },
    method_return_type: char,
    expected_data_item_type: char,
    expected_data_type: "char[]",
    param_list: { "param1": "[0x10401, 0x10802]" },
    expected_test_data: "[c'\\uDC01', c'\\uDC02']",
    verify_test_result_function: comparePrimitiveValue,
  }
