# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    method_name: unboxed,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,
    param_init_data_types: {},
    param_types: {},
    param_list: {},    
    method_return_type: double,
    init_object_data: "[0 as double, 1 as double, Byte.MIN_VALUE as double, Byte.MAX_VALUE as double]",
    expected_data_type: "double[]",
    expected_test_data: "[0 as double, 1 as double, Byte.MIN_VALUE as double, Byte.MAX_VALUE as double]",
    verify_test_result_function: compareFloatPointValue
  }
- {
    method_name: byteValue,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,
    param_init_data_types: {},
    param_types: {},
    param_list: {},
    method_return_type: byte,
    init_object_data: "[0 as double, 1 as double, Byte.MIN_VALUE as double, Byte.MAX_VALUE as double]",
    expected_data_type: "byte[]",
    expected_test_data: "[0 as byte, 1 as byte, Byte.MIN_VALUE as byte, Byte.MAX_VALUE as byte]",
    verify_test_result_function: comparePrimitiveValue
  }
- {
    method_name: shortValue,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,
    param_init_data_types: {},
    param_types: {},
    param_list: {},    
    method_return_type: short,
    init_object_data: "[0 as double, 1 as double, Short.MIN_VALUE as byte, Short.MAX_VALUE as byte]",
    expected_data_type: "short[]",
    expected_test_data: "[0 as short, 1 as short, Short.MIN_VALUE as byte, Short.MAX_VALUE as byte]",
    verify_test_result_function: comparePrimitiveValue
  }
- {
    method_name: intValue,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,
    param_init_data_types: {},
    param_types: {},
    param_list: {},    
    method_return_type: int,
    init_object_data: "[0 as double, 1 as double, Int.MIN_VALUE as double, Int.MAX_VALUE as double]",
    expected_data_type: "int[]",
    expected_test_data: "[0 as int, 1 as int, Int.MIN_VALUE as int, Int.MAX_VALUE as int]",
    verify_test_result_function: comparePrimitiveValue
  }
- {
    method_name: longValue,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,
    param_init_data_types: {},
    param_types: {},
    param_list: {},    
    method_return_type: long,
    init_object_data: "[0 as double, 1 as double, Long.MIN_VALUE as double, Long.MAX_VALUE as double]",
    expected_data_type: "long[]",
    expected_test_data: "[0 as long, 1 as long, Long.MIN_VALUE as long, Long.MAX_VALUE as long]",
    verify_test_result_function: comparePrimitiveValue
  } 
- {
    method_name: floatValue,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    param_init_data_types: {},
    param_types: {},
    param_list: {},    
    method_return_type: float,
    init_object_data: "[0 as byte, 1 as byte, Double.MIN_VALUE as float, Double.MAX_VALUE as float]",
    expected_data_type: "float[]",
    expected_test_data: "[0 as float, 1 as float, Double.MIN_VALUE as float, Double.MAX_VALUE as float]",
    verify_test_result_function: compareFloatPointValue
  } 
- {
    method_name: doubleValue,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,
    param_init_data_types: {},
    param_types: {},
    param_list: {},     
    method_return_type: double,
    init_object_data: "[0 as double, 1 as double, Double.MIN_VALUE as double, Double.MAX_VALUE as double]",
    expected_data_type: "double[]",
    expected_test_data: "[0 as double, 1 as double, Double.MIN_VALUE as double, Double.MAX_VALUE as double]",
    verify_test_result_function: compareFloatPointValue
  } 
- {
    method_name: toString,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,
    param_init_data_types: {},
    param_types: {},
    param_list: {},    
    method_return_type: String,
    init_object_data: "[0 as double, 1 as double, Double.MIN_VALUE as double, Double.MAX_VALUE as double, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.EPSILON, 0.34567423843258427, Int.MAX_VALUE as double, -0.0]",
    expected_data_type: "String[]",
    expected_test_data: '["0", "1", "5e-324", "1.7976931348623157e+308", "NaN", "Infinity", "-Infinity", "2.220446049250313e-16", "0.34567423843258427", "2147483647", "0"]',
    verify_test_result_function: compareStringTrivial
  }
- {
    method_name: toString,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,

    param_types: {radix: int},
    param_nature: {radix: primitive},
    param_init_data_types: {radix: "int[]"},
    param_list: {radix: "[36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36]"}, 

    method_return_type: String,
    init_object_data: "[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]",
    expected_data_type: "String[]",
    expected_test_data: '["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]',
    verify_test_result_function: compareStringTrivial
  }
- {
    method_name: toString,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,

    param_types: {radix: int},
    param_nature: {radix: primitive},
    param_init_data_types: {radix: "int[]"},
    param_list: {radix: "[2, 3, 2, 16, 2, 2, 8, 10, 2, 10, 2]"}, 

    method_return_type: String,
    init_object_data: "[0.0 as double, 0.0 as double, 6, 254, -10, -0xff, 3.14 as double, -0xff, 3.14 as double, 3.14159 as double, -3.14 as double]",
    expected_data_type: "String[]",
    expected_test_data: '["0", "0", "110", "fe", "-1010", "-11111111",  "3.10753412172702437", "-255", 
    "11.001000111101011100001010001111010111000010100011111", "3.14159", "-11.001000111101011100001010001111010111000010100011111"]',
    verify_test_result_function: compareStringTrivial
  } 
- {
    method_name: $_hashCode,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_type_nature: primitive,
    param_init_data_types: {},
    param_types: {},
    param_list: {},    
    method_return_type: int,
    init_object_data: "[0 as double, 1 as double, Byte.MIN_VALUE as double, Byte.MAX_VALUE as double]",
    expected_data_type: "int[]",
    expected_test_data: '[0 as int, 1 as int, -128 as int, 127 as int]',
    verify_test_result_function: comparePrimitiveValue
  } 
- {
    method_name: add,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[0 as double, 1 as double, (-1) as double, (-1) as double]",
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1": "[0 as double, 1 as double, (-1) as double, 1 as double]"},
    method_return_type: Double,
    expected_data_item_type: double,
    expected_data_type: "double[]",
    expected_test_data: "[0 as double, 2 as double, (-2) as double, 0 as double]",
    verify_test_result_function: compareWrapperObjectValue,
  }
- {
    method_name: sub,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[0 as double, 1 as double, (-1) as double, (-1) as double]",    
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1": "[0 as double, 1 as double, (-1) as double, 1 as double]"},
    method_return_type: Double,
    expected_data_item_type: double,
    expected_data_type: "double[]",
    expected_test_data: "[0 as double, 0 as double, 0 as double, (-2) as double]",
    verify_test_result_function: compareWrapperObjectValue,
  }
- {
    method_name: mul,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[0 as double, 1 as double, (-1) as double, 1 as double]",    
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1": "[0 as double, 1 as double, (-1) as double, (-1) as double]"},
    method_return_type: Double,
    expected_data_item_type: double,
    expected_data_type: "double[]",
    expected_test_data: "[0 as double, 1 as double, 1 as double, (-1) as double]",
    verify_test_result_function: compareWrapperObjectValue,
  }
- {
    method_name: div,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[0 as double, 1 as double, (-1) as double, 1 as double]",    
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1": "[1 as double, 1 as double, (-1) as double, (-1) as double]"},
    method_return_type: Double,
    expected_data_item_type: double,
    expected_data_type: "double[]",
    expected_test_data: "[0 as double, 1 as double, 1 as double, (-1) as double]",
    verify_test_result_function: compareWrapperObjectValue,
  }  
- {
    method_name: isLessThan,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double]",
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1" : "[125 as double, 125 as double, 126 as double, 126 as double, 127 as double, 127 as double, (-127) as double, (-127) as double, (-128) as double, (-128) as double]"},
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",        
    expected_test_data: "[false, true, false, true, true, true, false, true, false, false]",
    verify_test_result_function: comparePrimitiveValue,
  } 
- {
    method_name: isLessEqualThan,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double]",
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1" : "[125 as double, 125 as double, 126 as double, 126 as double, 127 as double, 127 as double, (-127) as double, (-127) as double, (-128) as double, (-128) as double]"},
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",    
    expected_test_data: "[false, true, true, true, true, true, false, true, false, true]",
    verify_test_result_function: comparePrimitiveValue,
  } 
- {
    method_name: isGreaterThan,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double]",
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1" : "[125 as double, 125 as double, 126 as double, 126 as double, 127 as double, 127 as double, (-127) as double, (-127) as double, (-128) as double, (-128) as double]"},
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    expected_test_data: "[true, false, false, false, false, false, true, false, true, false]",
    verify_test_result_function: comparePrimitiveValue,
  }
  
- {
    method_name: isGreaterEqualThan,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double]",
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1" : "[125 as double, 125 as double, 126 as double, 126 as double, 127 as double, 127 as double, (-127) as double, (-127) as double, (-128) as double, (-128) as double]"},
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    expected_test_data: "[true, false, true, false, false, false, true, false, true, true]",
    verify_test_result_function: comparePrimitiveValue,
  } 
- {
    method_name: equals,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double, 126 as double, (-128) as double]",
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1" : "[125 as double, 125 as double, 126 as double, 126 as double, 127 as double, 127 as double, (-127) as double, (-127) as double, (-128) as double, (-128) as double]"},
    method_return_type: boolean,
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    expected_test_data: "[false, false, true, false, false, false, false, false, false, true]",
    verify_test_result_function: comparePrimitiveValue,
  } 
- {
    method_name: compareTo,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[126 as double, (-128) as double, 126 as double, (-128) as double]",
    param_init_data_types: {"param1": "double[]"},
    param_types: {"param1": Double},
    param_nature: {"param1": object},
    param_list: {"param1" : "[125 as double, (-128) as double, 127 as double, (-128) as double]"},
    method_return_type: int,
    expected_data_item_type: int,
    expected_data_type: "int[]",
    
    
    expected_test_data: "[1, 0, -1, 0]",
    verify_test_result_function: compareCompareToResult,
  } 
- {
    method_name: isSafeInteger,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[(-1) as double, 0 as double, 1 as double, Double.MAX_SAFE_INTEGER, Double.MAX_SAFE_INTEGER + 1, 12.5 as double, Double.MIN_SAFE_INTEGER, (Double.MIN_SAFE_INTEGER -1)]",

    param_list: {},
    param_init_data_types: {},
    param_types: {},
    param_nature: {},
    
    method_return_type: boolean,
    
    expected_data_item_type: boolean,
    expected_data_type: "boolean[]",
    

    expected_test_data: "[true, true, true, true, false, false, true, false]",
    verify_test_result_function: comparePrimitiveValue
  }

  # toExponential(double) returns String representing the underlying double in exponential notation
- {
    method_name: toExponential,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[0.25, 0.25, 0.25, 0.25, 12345.01, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN, 123456, 77, -77]",

    param_init_data_types: {"param1":"Double[]"},
    param_types: {"param1":double},
    param_nature: {"param1": primitive},
    param_list: {"param1": '[0.0, 2.0, 2.5, 1.0, 10.0, 10.0, 10.0, 10.0, 2.0, 0.0, 0.0]'},

    method_return_type: String,
    
    expected_data_item_type: String,
    expected_data_type: "String[]",
    expected_test_data: '["2e-1", "2.50e-1", "2.50e-1", "2.5e-1", "1.2345010000e+4", "Infinity", "-Infinity", "NaN", "1.23e+5", "8e+1", "-8e+1"]',
    verify_test_result_function: compareStringTrivial
  }

  # toExponential returns String representing the underlying double in exponential notation
- {
    method_name: toExponential,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[0.25, -0.25, 12345.01, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN, 123456, 77, -77, 1234567890123456, -1234567890123456, 0.1234567890123456, 0.0, -0.0, Double.MAX_VALUE, Double.MIN_VALUE, Int.MAX_VALUE, Int.MIN_VALUE]",

    param_init_data_types: {},
    param_types: {},
    param_nature: {},
    param_list: {},

    method_return_type: String,
    
    expected_data_item_type: String,
    expected_data_type: "String[]",
    expected_test_data: '["2.5e-1", "-2.5e-1", "1.234501e+4", "Infinity", "-Infinity", "NaN", "1.23456e+5", "7.7e+1", "-7.7e+1", "1.234567890123456e+15", "-1.234567890123456e+15", "1.234567890123456e-1", "0e+0", "0e+0", "1.7976931348623157e+308", "5e-324", "2.147483647e+9", "-2.147483648e+9"]',
    verify_test_result_function: compareStringTrivial
  }

  # toPrecision(double) returns std.core.String representing the underlying double on the specified precision

- {
    method_name: toPrecision,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[0.25, 0.25, 0.25, 1.01, 11.01, -0.1234567e-8, 0.1234567e-8, 11, 12345.123455, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY]",

    param_init_data_types: {"param1":"Double[]"},
    param_types: {"param1":double},
    param_nature: {"param1": primitive},
    param_list: {"param1": '[3.8, 4.0, 4.5, 4.7, 1.0, 5.0, 5.0, 2.0, 10.0, 1.0, 1.0, 1.0]'},

    method_return_type: String,
    
    expected_data_item_type: String,
    expected_data_type: "String[]",
    expected_test_data: '["0.250", "0.2500", "0.2500", "1.010", "1e+1", "-1.2346e-9", "1.2346e-9", "11", "12345.12346", "NaN", "Infinity", "-Infinity"]',
    verify_test_result_function: compareStringTrivial    
  }

- {
    method_name: toPrecision,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[0.0, 0.25, 1.01, 11.01, 12345.123455, -12345.123455]",

    param_init_data_types: {},
    param_types: {},
    param_nature: {},
    param_list: {},

    method_return_type: String,
    
    expected_data_item_type: String,
    expected_data_type: "String[]",
    expected_test_data: '["0", "0.25", "1.01", "11.01", "12345.123455", "-12345.123455"]',
    verify_test_result_function: compareStringTrivial    
  }

- {
    method_name: toFixed,
    object_type: Double,
    init_object_data_type: "double[]",
    init_object_type: double,
    init_object_data: "[0.1, 0.7, 0.7, Double.POSITIVE_INFINITY, Double.NaN, 0.12345, 0.12345, -0.12345, -0.12345, 12345.0, 12345]",

    param_init_data_types: {"param1":"Double[]"},
    param_types: {"param1":double},
    param_nature: {"param1": primitive},
    param_list: {"param1": '[0.0, 0.0, 1.0, 3.0, 3.0, 1.0, 3.0, 1.0, 3.0, 4.0, 0.0]'},

    method_return_type: String,
    
    expected_data_item_type: String,
    expected_data_type: "String[]",
    expected_test_data: '["0", "1", "0.7", "Infinity", "NaN", "0.1", "0.123", "-0.1", "-0.123", "12345.0000", "12345"]',
    verify_test_result_function: compareStringTrivial    
  }
