# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
  objectType: "Int8Array",
  type: "number",
  primitiveType: "byte",
  cast2primitive: " as byte",
  create: "",
  primitiveSizeBytes: 1,
  data: "[Byte.MIN_VALUE as byte, -120 as byte, -77 as byte, -1 as byte, 0 as byte, 1 as byte, 77 as byte, 120 as byte, Byte.MAX_VALUE as byte]"

}
- {
  objectType: "Int16Array",
  type: "number",
  primitiveType: "short",
  cast2primitive: " as short",
  create: "",
  primitiveSizeBytes: 2,
  data: "[Short.MIN_VALUE as short, -12345 as short, -777 as short, -1 as short, 0 as short, 1 as short, 777 as short, 12345 as short, Short.MAX_VALUE as short]"
}
- {
  objectType: "Int32Array",
  type: "number",
  primitiveType: "int",
  cast2primitive: " as int",
  create: "",
  primitiveSizeBytes: 4,
  data: "[Int.MIN_VALUE, -1234567, -7777, -1, 0, 1, 7777, 1234567, Int.MAX_VALUE]"
}
- {
  objectType: "BigInt64Array",
  type: "BigInt",
  primitiveType: "long",
  cast2primitive: ".getLong()",
  create: "new BigInt",
  primitiveSizeBytes: 8,
  data: "[Long.MIN_VALUE as long, -123456789 as long, -77777 as long, -1 as long, 0 as long, 1 as long, 77777 as long, 123456789 as long, Long.MAX_VALUE as long]"
}

- {
  objectType: "Float64Array",
  type: "number",
  primitiveType: "double",
  cast2primitive: " as double",
  create: "",
  primitiveSizeBytes: 8,
  data: "[Double.MIN_VALUE, Double.MAX_VALUE, 0.0, -0.0, Double.POSITIVE_INFINITY, -Double.NEGATIVE_INFINITY, 1e10, 3.141592653589793, 30, 0.5]"
}

- {
  objectType: "Float64Array",
  type: "number",
  primitiveType: "double",
  cast2primitive: " as double",
  create: "",
  primitiveSizeBytes: 8,
  data: "[0.1, 0.2, 1e10]"
}

- {
  objectType: "Float32Array",
  type: "number",
  primitiveType: "float",
  cast2primitive: " as float",
  create: "",
  primitiveSizeBytes: 4,
  data: "[Float.MIN_VALUE, Float.MAX_VALUE, 0.0, -0.0, Float.POSITIVE_INFINITY, -Float.NEGATIVE_INFINITY, 1e10 as float, 3.141592653589793, 30, 0.5]"
}
