# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    objectType: "Uint8Array",
    type: "number",
    primitiveType: "byte",
    elementType: "byte",
    cast2primitive: "",
    create: "",
    primitiveSizeBytes: 1,
    primitiveTypeWide: "short",
    sourceElementsType: "number",
    data: "[0, 18, 37, 72, Byte.MAX_VALUE, 180, 221, 0xFF]",
    abnormalData: "[-1, 256, 257, Byte.MIN_VALUE -2, Byte.MIN_VALUE -1, Byte.MAX_VALUE + 1]"
}

- {
    objectType: "Uint16Array",
    type: "number",
    primitiveType: "short",
    elementType: "short",
    cast2primitive: " as short",
    create: "",
    primitiveSizeBytes: 2,
    primitiveTypeWide: "int",
    sourceElementsType: "number",
    data: "[0, 10234, 21445, Short.MAX_VALUE, 43690, 55321, 65504, 0xFFFF]",
    abnormalData: "[-1, 65536, 65537, Short.MIN_VALUE - 2, Short.MIN_VALUE - 1, Short.MAX_VALUE + 1]"
}

- {
    objectType: "Uint32Array",
    type: "number",
    primitiveType: "int",
    elementType: "int",
    cast2primitive: " as int",
    create: "",
    primitiveSizeBytes: 4,
    primitiveTypeWide: "long",
    sourceElementsType: "number",
    data: "[0, 1073741824, Int.MAX_VALUE, 3221225472, 3758096384, 4026531840, 4160749568]",
    abnormalData: "[-1, 4294967296, 4294967297, Int.MIN_VALUE - 2,  Int.MIN_VALUE - 1,  Int.MAX_VALUE as number + 1]"
}

- {
    objectType: "Uint8ClampedArray",
    type: "number",
    primitiveType: "short",
    elementType: "short",
    cast2primitive: " as short",
    create: "",
    primitiveSizeBytes: 1,
    primitiveTypeWide: "short",
    sourceElementsType: "number",
    data: "[0, 18, 37, 72, Byte.MAX_VALUE, 180, 221, 0xFF]",
    abnormalData: "[-1, 256, 257, Byte.MIN_VALUE -2, Byte.MIN_VALUE -1, Byte.MAX_VALUE + 1]"
}

- {
    objectType: "BigUint64Array",
    type: "BigInt",
    elementType: "bigint",
    primitiveType: "long",
    cast2primitive: ".getULong()",
    create: "new BigInt",
    primitiveSizeBytes: 8,
    sourceElementsType: "long",
    data: "[0 as long, 1073741824 as long, 2147483648 as long, 3221225472 as long, 3758096384 as long, 4026531840 as long, 4160749568 as long, 4294967295 as long]",
    abnormalData: "[-1, Long.MAX_VALUE + 1, Long.MIN_VALUE - 1]"
}
