# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
  objectType: "Uint8Array",
  type: "number",
  primitiveType: "byte",
  elementType: "byte",
  cast2primitive: " as byte",
  create: "",
  primitiveSizeBytes: 1,
  primitiveTypeWide: "short",
  sourceElementsType: "number",
  data: "[0 as byte, 18 as byte, 37 as byte, 72 as byte, Byte.MAX_VALUE as byte]",
  abnormalData: "[180 as byte, 221 as byte, 0xFF as byte]",
}

- {
  objectType: "Uint16Array",
  type: "number",
  primitiveType: "short",
  elementType: "short",
  cast2primitive: " as short",
  create: "",
  primitiveSizeBytes: 2,
  primitiveTypeWide: "int",
  sourceElementsType: "number",
  data: "[0 as short, 10234 as short, 21445 as short, Short.MAX_VALUE as short]",
  abnormalData: "[43690 as short, 55321 as short, 65504 as short, 0xFFFF as short]",
}

- {
  objectType: "Uint32Array",
  type: "number",
  primitiveType: "int",
  elementType: "int",
  cast2primitive: " as int",
  create: "",
  primitiveSizeBytes: 4,
  primitiveTypeWide: "long",
  sourceElementsType: "number",
  data: "[0 as int, 1073741824 as int, Int.MAX_VALUE as int]",
  abnormalData: "[]",
  # Note: uncomment once the issue(21569) is fixed
  # abnormalData: "[3221225472 as int, 3758096384 as int, 4026531840 as int, 4160749568 as int]",
}

- {
  objectType: "Uint8ClampedArray",
  type: "number",
  primitiveType: "short",
  elementType: "short",
  cast2primitive: " as short",
  create: "",
  primitiveSizeBytes: 1,
  primitiveTypeWide: "short",
  sourceElementsType: "number",
  data: "[0 as short, 18 as short, 37 as short, 72 as short, Byte.MAX_VALUE as short, 180 as short, 221 as short, 0xFF as short]",
  abnormalData: "[]",
}

- {
  objectType: "BigUint64Array",
  type: "BigInt",
  elementType: "bigint",
  primitiveType: "long",
  cast2primitive: ".getULong()",
  create: "new BigInt",
  primitiveSizeBytes: 8,
  sourceElementsType: "long",
  data: "[0 as long, 1073741824 as long, 2147483648 as long, 3221225472 as long, 3758096384 as long, 4026531840 as long, 4160749568 as long, 4294967295 as long]",
  abnormalData: "[]",
}
