# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- {
    method_name: abs,
    method_nature: function,
    result_type: double,
    method_signature: {v: "double"},

    method_test_index_data:
      {
        test1: {v: 0.0,},
        test2: {v: PI, },
        test3: {v: -PI,},
        test4: {v: 123.0, },
        test5: {v: -123.0,},
        test6: {v: doubleNaN, },
        test7: {v: doubleInf, },
        test8: {v: doubleNegInf,},
      },
    method_expected_data:
      {
        test1: 0.0,
        test2: PI,
        test3: PI,
        test4: 123.0,
        test5: 123.0,
        test6: doubleNaN,
        test7: doubleInf,
        test8: doubleInf,
      },
  }
- {
    method_name: trunc,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: {v: 0.0,},
        test2: {v: 1.0, },
        test3: {v: 1.0000001,},
        test4: {v: PI, },
        test5: {v: -E },
        test6: {v: doubleNaN, },
        test7: {v: doubleInf, },
        test8: {v: doubleNegInf,},
      },
    method_expected_data:
      {
        test1:  0.0,
        test2:  1.0,
        test3:  1.0,
        test4:  3.0,
        test5: -2.0,
        test6:  doubleNaN,
        test7:  doubleInf,
        test8:  doubleNegInf,
      },
  }
- {
    method_name: ceil,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test1: {v: 0.0,},
        test2: {v: 1.0, },
        test3: {v: 1.0 + doubleEpsilon,},
        test4: {v: PI, },
        test5: {v: -E },
        test6: {v: doubleNaN, },
        test7: {v: doubleInf, },
        test8: {v: doubleNegInf,},
      },
    method_expected_data:
      {
        test1:  0.0,
        test2:  1.0,
        test3:  2.0,
        test4:  4.0,
        test5: -2.0,
        test6: -doubleNaN,
        test7:  doubleInf,
        test8:  doubleNegInf,
      },
  }
- {
    method_name: floor,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test10: {v: 0.0,},
        test20: {v: 1.0, },
        test30: {v: 1.0 + doubleEpsilon,},
        test40: {v: 2.0 - doubleEpsilon,},
        test50: {v: -1.0  + doubleEpsilon, },
        test60: {v: -1.0  - doubleEpsilon, },
        test70: {v: doubleNaN, },
        test80: {v: doubleInf, },
        test90: {v: doubleNegInf,},
      },
    method_expected_data:
      {
        test10:  0.0,
        test20:  1.0,
        test30:  1.0,
        test40:  1.0,
        test50: -1.0,
        test60: -2.0,
        test70: -doubleNaN,
        test80:  doubleInf,
        test90:  doubleNegInf,
      },
  }
- {
    method_name: round,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double"},

    method_test_index_data:
      {
        test10:  {v:  0.0,},
        test20:  {v:  0.5 + doubleEpsilon,},
        test30:  {v:  0.5 - doubleEpsilon,},
        test40:  {v:  1.0,},
        test50:  {v: -0.5 - doubleEpsilon,},
        test60:  {v: -0.5 + doubleEpsilon,},
        test70:  {v: -1.0, },
        test80:  {v: doubleNaN, },
        test90:  {v: doubleInf, },
        test100: {v: doubleNegInf,},
      },
    method_expected_data:
      {
        test10:  0.0,
        test20:  1.0,
        test30:  0.0,
        test40:  1.0,
        test50: -1.0,
        test60:  0.0,
        test70: -1.0,
        test80: -doubleNaN,
        test90:  doubleInf,
        test100: doubleNegInf,
      },
  }
- {
    method_name: mod,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double", u: "double"},

    method_test_index_data:
      {
        test10:  {v:  10.0, u: 10.0},
        test20:  {v:  20.0, u: 11.0},
        test30:  {v:  PI, u: 2.0},
        test40:  {v: -PI, u: 2.0,},
        test50:  {v: doubleNaN, u: doubleNaN},
        test60:  {v: doubleInf, u: doubleInf},
        test70:  {v: doubleNegInf, u: doubleNegInf},
      },
    method_expected_data:
      {
        test10:  0.0,
        test20:  9.0,
        test30:  1.14159265,
        test40: -1.14159265,
        test50:  doubleNaN,
        test60:  doubleInf,
        test70:  doubleNegInf,
        test80: -doubleNaN,
      },
  }
- {
    method_name: rem,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double", u: "double"},

    method_test_index_data:
      {
        test10:  {v:  10.0, u: 10.0},
        test20:  {v:  20.0, u: 11.0},
        test30:  {v:  PI, u: 2.0},
        test40:  {v: -PI, u: 2.0,},
        test50:  {v: doubleNaN, u: doubleNaN},
        test60:  {v: doubleInf, u: doubleInf},
        test70:  {v: doubleNegInf, u: doubleNegInf},
      },
    method_expected_data:
      {
        test10:  0.0,
        test20: -2.0,
        test30: -0.858407,
        test40:  0.858407,
        test50:  doubleNaN,
        test60:  doubleInf,
        test70:  doubleNegInf,
        test80: -doubleNaN,
      },
  }
- {
    method_name: max,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double", u: "double"},

    method_test_index_data:
      {
        test10:  {v:  128.0, u:  256.0},
        test20:  {v:  139.0, u:  139.0},
        test30:  {v: -233.0, u: -233.0},
        test40:  {v: -234.0, u: -133.0},
        test50:  {v:  777.0, u:  777.0 + doubleEpsilon},
        test60:  {v: -777.0 - doubleEpsilon, u: -777.0},
        test70:  {v: doubleNaN, u: doubleNaN},
        test80:  {v: doubleInf, u: doubleInf},
        test90:  {v: doubleNegInf, u: doubleNegInf},

      },
    method_expected_data:
      {
        test10:  256.0,
        test20:  139.0,
        test30: -233.0,
        test40: -133.0,
        test50:  777.0 + doubleEpsilon,
        test60: -777.0,
        test70:  doubleNaN,
        test80:  doubleInf,
        test90:  doubleNegInf,
      },
  }
- {
    method_name: max,
    method_nature: function,
    result_type: int,
    method_signature:  {v: "int", u: "int"},

    method_test_index_data:
      {
        test10:  {v:  128, u:  256},
        test20:  {v:  139, u:  139},
        test30:  {v: -233, u: -233},
        test40:  {v: -234, u: -133},
      },
    method_expected_data:
      {
        test10:  256,
        test20:  139,
        test30: -233,
        test40: -133,
      },
  }
- {
    method_name: min,
    method_nature: function,
    result_type: double,
    method_signature:  {v: "double", u: "double"},

    method_test_index_data:
      {
        test10:  {v:  128.0, u:  256.0},
        test20:  {v:  139.0, u:  139.0},
        test30:  {v: -233.0, u: -233.0},
        test40:  {v: -234.0, u: -133.0},
        test50:  {v:  777.0, u:  777.0 + doubleEpsilon},
        test60:  {v: -777.0 - doubleEpsilon, u: -777.0},
        test70:  {v: doubleNaN, u: doubleNaN},
        test80:  {v: doubleInf, u: doubleInf},
        test90:  {v: doubleNegInf, u: doubleNegInf},

      },
    method_expected_data:
      {
        test10:  128.0,
        test20:  139.0,
        test30: -233.0,
        test40: -234.0,
        test50:  777.0,
        test60: -777.0 - doubleEpsilon,
        test70:  doubleNaN,
        test80:  doubleInf,
        test90:  doubleNegInf,
      },
  }
- {
    method_name: imul,
    method_nature: function,
    result_type: int,
    method_signature:  {a: "float", b: "float"},

    method_test_index_data:
      {
        test10:  {a:  2.5, b:  2.5},
        test20:  {a:  5.0, b:  5.05},
        test21:  {a:  -5.0, b:  5.05},
        test22:  {a:  5.0, b: -5.05},
        test23:  {a: -5.0, b: -5.05},
        test30:  {a: floatNan, b:  1},
        test40:  {a: floatInf, b:  1},
        test50:  {a: floatNegInf, b:  1},

      },
    method_expected_data:
      {
        test10:  4,
        test20:  25,
        test21:  25,
        test22:  25,
        test23:  25,
        test30:  0,
        test40:  0,
        test50:  0
      },
  }
- {
    method_name: fround,
    method_nature: function,
    result_type: double,
    method_signature:  {doubleVal: "double"},

    method_test_index_data:
      {
        test10:  {doubleVal:  2.5},
        test20:  {doubleVal:  5.0},
        test21:  {doubleVal:  5.05},
        test30:  {doubleVal: -5.0},
        test31:  {doubleVal:  5.123456789123456},
        test32:  {doubleVal: -5.123456789123456},
        test40:  {doubleVal:  0},
        test50:  {doubleVal:  Double.MAX_VALUE - 1000},
        test60:  {doubleVal:  doubleNaN},
        test70:  {doubleVal:  doubleInf},
        test80:  {doubleVal:  doubleNegInf},

      },
    method_expected_data:
      {
        test10:  2.5,
        test20:  5.0,
        test21:  5.05,
        test30: -5.0,
        test31:  5.12345700000000,
        test32: -5.12345700000000,
        test40:  0.0,
        test50:  doubleInf,
        test60:  doubleNaN,
        test70:  doubleInf,
        test80:  doubleNegInf
      },
  }
