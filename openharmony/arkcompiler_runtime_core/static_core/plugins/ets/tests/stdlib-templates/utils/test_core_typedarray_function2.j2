/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const success: number = 0;
const fail: number = 1;

function main(): int {
  let failures: number = 0;

  failures += check(testSubarrayWithOutParam(), "Try to Array subarray() function");
  failures += check(testSubarrayOneParam(), "Try to Array subarray(1) function");
  failures += check(testSubarrayTwoParams(), "Try to Array subarray(2) function");
  failures += check(testSubarrayTwoParamsWithOtherNumber(), "Try to Array subarray(2) With Other Number function");
  failures += check(testSubarrayOneLengthTwoParams(), "Try to Array subarray(2) One Length Two Params function");

  failures += check(testNonEmptyTypedArraySetValue(), "Test Set Value to Nonempty Array");

  failures += check(testTypedArrayIncludesOneParamWithNormalNum(), "Test Includes One Param With NormalNum");
  failures += check(testTypedArrayIncludesTwoParamWithNormalIndex(), "Test Includes Two Param With Normal Index");

  {%- if item.objectType != 'BigInt64Array' %}
  failures += check(testTypedArrayIncludesOneParamWithAbnormalNum(), "Test Includes One Param With AbnormalNum");
  failures += check(testTypedArrayIncludesTwoParamWithAbnormalIndex(), "Test Includes Two Param With Abnormal Index");
  {% endif %}

  failures += check(testTypedArrayJoinWithEmptyArray(), "Test Join With EmptyArray");
  failures += check(testTypedArrayJoinWithNonEmptyArray(), "Test Join With NonEmptyArray");
  failures += check(testTypedArrayJoinWithNonEmptyArrayAndAbnormalStr(), "Test Join With NonEmptyArray And AbnormalStr");
  failures += check(testTypedArrayKeysWithEmptyArray(), "Test Keys With EmptyArray");
  failures += check(testTypedArrayKeysWithSingleElementArray(), "Test Keys With SingleElement");
  failures += check(testTypedArrayKeysWithMultipleElementArray(), "Test Keys With MultipleElementArray");

  failures += check(testTypedArrayForEach(), "Try to apply a function to each element of the TypedArray using TypedArray.forEach() function");
  failures += check(testTypedArrayForEachValueIndexCallback(), "Test case for forEach(callbackFn: (value: number, index: number) => void)");
  failures += check(testTypedArrayForEachValueCallback(), "Test case for forEach(callbackFn: (value: number) => void)");
  failures += check(testTypedArrayForEachNoArgsCallback(), "Test case for forEach(callbackFn: () => void)");
  failures += check(testTypedArrayEntries(), "Test TypedArray Entries");

  failures += check(testTypedArrayGet(), "Test TypedArray $_get");
  failures += check(testTypedArraySet(), "Test TypedArray $_set");

  if (failures > 0){
    console.log("failed");
    return fail;
  }

  console.log("All passed");
  return success;
}

function check(result: int, message: String): number {
  if (result == 0) {
    return success;
  }
  console.log("\nFAILED: " + message);
  return fail;
}

function check(result: number, message: String): number {
  if (result == 0) {
    return success;
  }
  console.log("\nFAILED: " + message);
  return fail;
}

const source: {{.item.primitiveType}}[] = {{.item.data}};
const abnormalSource: {{.item.primitiveType}}[] = {{.item.abnormalData}};

function testSubarrayWithOutParam(): int {
  //let source: {{.item.primitiveType}}[] = [10, 20, 30, 40, 50, 60];
  let ss = new ArrayBuffer(source.length as int * {{.item.primitiveSizeBytes}});

  let origin: {{.item.objectType}};

  try {
    origin = new {{.item.objectType}}(ss);
    origin.set(source);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let target: {{.item.objectType}};

  try {
    target = origin.subarray();
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != origin.length as int) {
    console.log("Array length mismatch on slice");
    return fail;
  }

  //Check all the data copied;
  for (let i: int = 0; i< origin.length as int; i++) {
    let tv = target[i]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  origin= new {{.item.objectType}}(0);
  if (origin.length as int != 0){
    return fail;
  }

  try {
    target = origin.subarray();
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != 0){
    return fail;
  }
  return success;
}

function testSubarrayOneParam(): int {
  //let source: {{.item.primitiveType}}[] = [10, 20, 30, 40, 50, 60];
  let ss = new ArrayBuffer(source.length as int * {{.item.primitiveSizeBytes}});

  let origin: {{.item.objectType}};

  try {
    origin = new {{.item.objectType}}(ss);
    origin.set(source);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let subarrayStart: int = 1;
  let subarrayEnd: int = origin.length as int;

  let target: {{.item.objectType}};

  try {
    target = origin.subarray(subarrayStart);
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != origin.length as int - subarrayStart) {
    console.log("Array length mismatch on subarray One Params" + target.length);
    return fail;
  }

  //Check all the data copied;
  for (let i: int = subarrayStart; i< subarrayEnd; i++) {
    let tv = target[i - subarrayStart]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  subarrayStart = 0;
  try {
    target = origin.subarray(undefined);
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != origin.length as int) {
    console.log("Array length mismatch on subarray One Params" + target.length);
    return fail;
  }

  //Check all the data copied;
  for (let i: int = subarrayStart; i< subarrayEnd; i++) {
    let tv = target[i - subarrayStart]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  //The subarray method returns a view of the original array, so modifications made to the subarray will affect the original array, and vice versa.
  /*TypedArrays will support it later
  target[subarrayStart] = 1;
  for (let i: int = subarrayStart; i< subarrayEnd; i++) {
    let tv = target[i - subarrayStart]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  origin[subarrayStart] = 2;
  for (let i: int = subarrayStart; i< subarrayEnd; i++) {
    let tv = target[i - subarrayStart]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }*/

  return success;
}

function testSubarrayTwoParams(): int {
  //let source: {{.item.primitiveType}}[] = [10, 20, 30, 40, 50, 60, 70, 80];
  let ss = new ArrayBuffer(source.length as int * {{.item.primitiveSizeBytes}});

  let origin: {{.item.objectType}};

  try {
    origin = new {{.item.objectType}}(ss);
    origin.set(source);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let subarrayStart: int = 2;
  let subarrayEnd: int = 4;

  let target: {{.item.objectType}};

  try {
    target = origin.subarray(subarrayStart, subarrayEnd);
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != subarrayEnd - subarrayStart) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  //Check all the data copied;
  for (let i: int = subarrayStart; i< subarrayEnd; i++) {
    let tv = target[i - subarrayStart]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  subarrayStart = 0;
  subarrayEnd = origin.length as int;
  try {
    target = origin.subarray(subarrayStart, subarrayEnd);
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != subarrayEnd - subarrayStart) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  //Check all the data copied;
  for (let i: int = subarrayStart; i< subarrayEnd; i++) {
    let tv = target[i - subarrayStart]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  try {
    target = origin.subarray(new Number(subarrayStart), undefined);
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != subarrayEnd - subarrayStart) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  //Check all the data copied;
  for (let i: int = subarrayStart; i< subarrayEnd; i++) {
    let tv = target[i - subarrayStart]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  try {
    target = origin.subarray(undefined, undefined);
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != subarrayEnd - subarrayStart) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  //Check all the data copied;
  for (let i: int = subarrayStart; i< subarrayEnd; i++) {
    let tv = target[i - subarrayStart]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  try {
    target = origin.subarray(undefined, new Number(subarrayEnd));
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != subarrayEnd - subarrayStart) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  //Check all the data copied;
  for (let i: int = subarrayStart; i< subarrayEnd; i++) {
    let tv = target[i - subarrayStart]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  try {
    target = origin.subarray(0, 0);
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != 0) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  return success;
}

function testSubarrayTwoParamsWithOtherNumber(): int {
  //let source: {{.item.primitiveType}}[] = [10, 20, 30, 40, 50, 60, 70, 80];
  let ss = new ArrayBuffer(source.length as int * {{.item.primitiveSizeBytes}});

  let origin: {{.item.objectType}};

  try {
    origin = new {{.item.objectType}}(ss);
    origin.set(source);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let subarrayStart: int = 4;
  let subarrayEnd: int = 2;

  let target: {{.item.objectType}};

  try {
    target = origin.subarray(subarrayStart, subarrayEnd);
  } catch(e) {
    return fail;
  }

  if (target.length as int != 0) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  subarrayStart = -1;
  subarrayEnd = origin.length as int;
  try {
    target = origin.subarray(subarrayStart, subarrayEnd);
  } catch(e) {
    return fail;
  }

  if (target.length as int != subarrayEnd - (origin.length + subarrayStart)) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  //Check all the data copied;
  for (let i: int = (origin.length + subarrayStart) as int; i< subarrayEnd; i++) {
    let tv = target[(i - (origin.length + subarrayStart)) as int]{{.item.cast2primitive}};
    let ov = origin[i]{{.item.cast2primitive}};
    console.log(source[i] + "->" + tv + "->" + ov);
    if (tv != ov) {
      console.log("Array data mismatch");
      return fail;
    }
  }

  subarrayStart = 0;
  subarrayEnd = -origin.length as int;
  try {
    target = origin.subarray(subarrayStart, subarrayEnd);
  } catch(e) {
    console.log(e);
    return fail;
  }

  if (target.length as int != (origin.length + subarrayEnd) - subarrayStart) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  return success;
}

function testSubarrayOneLengthTwoParams(): int {
  let source1: {{.item.primitiveType}}[] = [10];
  let ss = new ArrayBuffer(source1.length as int * {{.item.primitiveSizeBytes}});

  let origin: {{.item.objectType}};

  try {
    origin = new {{.item.objectType}}(ss);
    origin.set(source1);
  } catch(e) {
    console.log(e);
    return fail;
  }
  
  let subarrayStart: int = 4;
  let subarrayEnd: int = 2;

  let target: {{.item.objectType}};

  try {
    target = origin.subarray(subarrayStart, subarrayEnd);
  } catch(e) {
    return fail;
  }

  if (target.length as int != 0) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  subarrayStart = 2;
  subarrayEnd = 4;
  try {
    target = origin.subarray(subarrayStart, subarrayEnd);
  } catch(e) {
    return fail;
  }

  if (target.length as int != 0) {
    console.log("Array length mismatch on subarray2");
    return fail;
  }

  return success;
}

function testNonEmptyTypedArraySetValue(): number {
  let ss = new ArrayBuffer(5 * {{.item.primitiveSizeBytes}});
  let typedArray: {{.item.objectType}};

  try {
    typedArray = new {{.item.objectType}}(ss);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let length = typedArray.length;

  {%- if item.objectType == 'Int8Array' %}
    const minValue = Byte.MIN_VALUE as byte;
    const maxValue = Byte.MAX_VALUE as byte;
  {%- elif item.objectType == 'Int16Array' %}
    const minValue = Short.MIN_VALUE as short;
    const maxValue = Short.MAX_VALUE as short;
  {%- elif item.objectType == 'Int32Array' %}
    const minValue = Int.MIN_VALUE;
    const maxValue = Int.MAX_VALUE;
  {%- elif item.objectType == 'Float32Array' %}
    const minValue = Float.MIN_VALUE;
    const maxValue = Float.MAX_VALUE;
  {%- elif item.objectType == 'Float64Array' %}
    const minValue = Double.MIN_VALUE;
    const maxValue = Double.MAX_VALUE;
  {% elif item.objectType == 'BigInt64Array' %}
    const minValue = Long.MIN_VALUE;
    const maxValue = Long.MAX_VALUE;
  {%- endif %}    

  try {
    typedArray[0] = {{.item.create}}(1);
    typedArray[1] = {{.item.create}}(2);
    typedArray[2] = {{.item.create}}(minValue);
    typedArray[3] = {{.item.create}}(maxValue);
    typedArray[4] = {{.item.create}}(-1);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let expectedArray: {{.item.primitiveType}}[] = [1, 2, minValue, maxValue, -1];

  for (let i = 0; i < typedArray.length; i++) {
    if (typedArray[i] != {{.item.create}}(expectedArray[i])) {
      console.log("Test failed. testNonEmptyTypedArraySetValue: " + typedArray[i]);
      return fail;
    }
  }
  
  if (typedArray.at(length) != undefined) { // check value,  wrong index
    console.log("Test failed. typedArray.at(length) : " + typedArray.at(length));
    return fail;
  }
  if (typedArray.at(-1) != typedArray.at(-1 + length)) {  // check value,  wrong index
    console.log("Test failed. typedArray.at(-1) : " + typedArray.at(-1));
    return fail;
  }

  return success;
}

function checkEntries(actual: [number, {{.item.type}}], expected: [number, {{.item.type}}], name: string): int {
    let result = (actual[0] == expected[0]) && (actual[1] == expected[1])
    if (result) {
        console.println("PASSED: " + name)
        return success
    }
    console.println("FAILED: " + name + ", expected: [" + expected.toString() + "], actual: [" + actual.toString() + "]")
    return fail
}

function assertEq(expr: boolean, expected: boolean, name: string): int {
    if (expr == expected) {
        console.println("PASSED: " + name)
        return success
    }
    console.println("FAILED: " + name + ", expected: " + (expected ? "true": "false") + ", actual: " + (expr ? "true": "false"))
    return fail
}

function testTypedArrayEntries(): int {
    let failures = 0
    const firstResult = [0 as number, {{.item.create}}(1)] as [number, {{.item.type}}]
    const secondResult = [1 as number, {{.item.create}}(2)] as [number, {{.item.type}}]
    const numbers = [{{.item.create}}(1), {{.item.create}}(2)]
    let entries = (new {{.item.objectType}}(numbers)).entries()

    let entry1 = entries.next().value!
    let entry1res: [number, {{.item.type}}] = [entry1[0] as number, {{.item.create}}(entry1[1])]
    let entry2 = entries.next().value!
    let entry2res: [number, {{.item.type}}] = [entry2[0] as number, {{.item.create}}(entry2[1])]

    failures += checkEntries(entry1res, firstResult, "{{.item.objectType}}.entries() - next() #1")
    failures += checkEntries(entry2res, secondResult, "{{.item.objectType}}.entries() - next() #2")
    failures += assertEq(entries.next().done, true, "{{.item.objectType}}.entries() - next() #3 (done)")
    return failures
}

// Test case for TypedArray.includes(searchElement) with Normal Number
function testTypedArrayIncludesOneParamWithNormalNum(): number {
  let ss = new ArrayBuffer(source.length as int * {{.item.primitiveSizeBytes}});
  let typedArray: {{.item.objectType}};

  try {
    typedArray = new {{.item.objectType}}(ss);
    typedArray.set(source);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let searchElementArray: {{.item.primitiveType}}[] =  {{.item.data}};

  for (let i = 0; i < searchElementArray.length; i++) {
    if (!typedArray.includes(searchElementArray[i])) {
      console.log("Test failed. testTypedArrayIncludesOneParamWithNormalNum: typed" + JSON.stringify(typedArray[i]));
      console.log("Test failed. testTypedArrayIncludesOneParamWithNormalNum: " + JSON.stringify(searchElementArray[i]));
      return fail;
    }
  }

  let searchElement = 8;
  let result = typedArray.includes(searchElement);
  if (result) {
    console.log(`Includes ${searchElement}? true`);
    return fail;
  } else {
    console.log(`Includes ${searchElement}? false`);
  }
  return success; 
}

{%- if item.objectType != 'BigInt64Array' %}
// Test case for TypedArray.includes(searchElement) with abnormal number
function testTypedArrayIncludesOneParamWithAbnormalNum(): number {
  let ss = new ArrayBuffer(abnormalSource.length as int * {{.item.primitiveSizeBytes}});
  let typedArray: {{.item.objectType}};

  try {
    typedArray = new {{.item.objectType}}(ss);
    typedArray.set(abnormalSource);
  } catch(e) {
    console.log(e);
    return fail;
  }

  {%- if item.objectType == 'Int8Array' %}
    let searchElementArray: {{.item.primitiveType}}[] = [Byte.MAX_VALUE - 1 as byte, Byte.MAX_VALUE as byte, Byte.MIN_VALUE as byte, Byte.MIN_VALUE + 1 as byte];
  {%- elif item.objectType == 'Int16Array' %}
    let searchElementArray: {{.item.primitiveType}}[] = [Short.MAX_VALUE - 1 as short, Short.MAX_VALUE as short, Short.MIN_VALUE as short, Short.MIN_VALUE + 1 as short];
  {%- elif item.objectType == 'Int32Array' %}
    let searchElementArray: {{.item.primitiveType}}[] = [Int.MAX_VALUE - 1, Int.MAX_VALUE, Int.MIN_VALUE, Int.MIN_VALUE + 1];
  {%- elif item.objectType == 'Float32Array' %}
    let searchElementArray: {{.item.primitiveType}}[] = [-2, -1, Float.MAX_VALUE, Float.MAX_VALUE - 1];
  {%- elif item.objectType == 'Float64Array' %}
    let searchElementArray: {{.item.primitiveType}}[] = [-2, -1, Double.MAX_VALUE, Double.MAX_VALUE - 1];
  {%- endif %}

  for (let i = 0; i < searchElementArray.length; i++) {
    if (!typedArray.includes(searchElementArray[i])) {
      console.log("Test failed. testTypedArrayIncludesOneParamWithAbnormalNum: typed" + JSON.stringify(typedArray[i]));
      console.log("Test failed. testTypedArrayIncludesOneParamWithAbnormalNum: " + JSON.stringify(searchElementArray[i]));
      return fail;
    }
  }

  let searchElement = 8;
  let result = typedArray.includes(searchElement);
  if (result) {
    console.log(`Includes ${searchElement}? true`);
    return fail;
  } else {
    console.log(`Includes ${searchElement}? false`);
  }

  //with large Number
  let large_number: number[] = [-0x8000000000000000, 0x7FFFFFFFFFFFFFFF];
  {%- if item.objectType == 'Float32Array' or item.objectType == 'Float64Array' %}
    let convertedValues: number[] = [-0x8000000000000000, 0x7FFFFFFFFFFFFFFF];
  {%- elif item.objectType == 'Int32Array'%}
    let convertedValues: number[] = [Int.MIN_VALUE, Int.MAX_VALUE];
  {%- else %}
    let convertedValues: number[] = [0, -1];
  {%- endif %}
  typedArray = new {{.item.objectType}}(large_number);

  for (let i = 0; i < convertedValues.length; i++) {
    if (!typedArray.includes(convertedValues[i])) {
      console.log("Test failed. testtypedArrayIncludesOneParamWithAbnormalNum large number typed" + JSON.stringify(typedArray[i]));
      console.log("Test failed. testtypedArrayIncludesOneParamWithAbnormalNum large number except" + JSON.stringify(convertedValues[i]));
      return fail;
    }
  }
  return success; 
}
{% endif %}

// Test case for TypedArray.includes(searchElement, fromIndex)
function testTypedArrayIncludesTwoParamWithNormalIndex(): number {
   let source1: {{.item.type}}[] = [
      {{.item.create}}(1),
      {{.item.create}}(2),
      {{.item.create}}(3),
      {{.item.create}}(4),
      {{.item.create}}(5),
  ];
  let ss = new ArrayBuffer(source1.length * {{.item.primitiveSizeBytes}});
  let typedArray: {{.item.objectType}};

  try {
    typedArray = new {{.item.objectType}}(ss);
    typedArray.set(source1);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let fromIndex = 1;
  let searchElement = 3;
  // Test when searchElement exists in the TypedArray with fromIndex specified
  let result = typedArray.includes(searchElement, fromIndex);
  if (result) {
    console.log(`Includes ${searchElement} from index ${fromIndex}? true`);
  } else {
    console.log(`Includes ${searchElement} from index ${fromIndex}? false`);
    return fail;
  }

  fromIndex = 4;
  result = typedArray.includes(searchElement, fromIndex);
  if (result) {
    console.log(`Includes ${searchElement} from index ${fromIndex}? true`);
    return fail;
  } else {
    console.log(`Includes ${searchElement} from index ${fromIndex}? false`);
  }

  return success;
}

{%- if item.objectType != 'BigInt64Array' %}
// Test case for TypedArray.includes(searchElement, fromIndex)
function testTypedArrayIncludesTwoParamWithAbnormalIndex(): number {
  let source1: {{.item.type}}[] = [
   {{.item.create}}(1),
   {{.item.create}}(2),
   {{.item.create}}(3),
   {{.item.create}}(4),
   {{.item.create}}(5),
  ];
  let ss = new ArrayBuffer(source1.length * {{.item.primitiveSizeBytes}});
  let typedArray: {{.item.objectType}};

  try {
    typedArray = new {{.item.objectType}}(ss);
    typedArray.set(source1);
  } catch(e) {
    console.log(e);
    return fail;
  }

  let searchElement = 1;
  // Test when searchElement exists in the TypedArray with fromIndex specified
  //fromIndex = undefined,fromIndex = 0
  let result = typedArray.includes(searchElement, undefined);
  if (result) {
    console.log(`Includes ${searchElement} from undefined? true`);
  } else {
    console.log(`Includes ${searchElement} from undefined? false`);
    return fail;
  }

  let fromIndex = 0;
  let arrayLen = typedArray.length;
  //a. Let k be len + n.
  //ECMA: if fromIndex < 0(k < 0) ,a. Let k be len + n. 
  //      b. If k < 0, set k to 0. typedArray need to be fixed
  for (let i = 0 as int; i < arrayLen; i++) {
    fromIndex = (- arrayLen + i) as int;
    result = typedArray.includes(searchElement, fromIndex);
    let exceptResult = typedArray.includes(searchElement, i);
    if (result == exceptResult) {
      console.log(`Includes ${searchElement} from index ${fromIndex}? true`);
    } else {
      console.log(`Includes ${searchElement} from index ${fromIndex}? false`);
      return fail;
    }
  }
 
  //index > len, return false;
  fromIndex = 6 as int;
  result = typedArray.includes(searchElement, fromIndex);
  if (result) {
    console.log(`Includes ${searchElement} from index ${fromIndex}? true`);
    return fail;
  } else {
    console.log(`Includes ${searchElement} from index ${fromIndex}? false`);
  }

  //Currently not supported for typedArray
  //b. If k < 0, set k to 0.
  fromIndex = (-arrayLen -1) as int;
  result = typedArray.includes(searchElement, fromIndex);
  if (result) {
    console.log(`Includes ${searchElement} from index ${fromIndex}? true`);
  } else {
    console.log(`Includes ${searchElement} from index ${fromIndex}? false`);
    return fail;
  }
  //index = Infinity, return false
  result = typedArray.includes(searchElement, Infinity);
  if (result) {
    console.log(`Includes ${searchElement} from index Infinity? true`);
    return fail;
  } else {
    console.log(`Includes ${searchElement} from index Infinity? false`);
  }

  //fromIndex = -Infinity, fromIndex = 0
  result = typedArray.includes(searchElement, -Infinity);
  if (result) {
    console.log(`Includes ${searchElement} from index -Infinity? true`);
  } else {
    console.log(`Includes ${searchElement} from index -Infinity? false`);
    return fail;
  }

  return success;
}
{% endif %}

function compareJoinResult(typedArray:{{.item.objectType}}, separator: string | undefined, expected: string): number {
   const result = typedArray.join(separator);
   return result == expected ? success : fail;
}

function testTypedArrayJoinWithEmptyArray(): number {
  let ss = new ArrayBuffer(0);
  let typedArray: {{.item.objectType}};
  try {
    typedArray = new {{.item.objectType}}(ss, 0);
  } catch(e) {
    return fail;
  }
  if (typedArray.length as number != 0 || typedArray.byteOffset as number != 0) {
    return fail;
  }

  // Test case 0: Using empty param
  const testResult0 = typedArray.join() == '' ? success : fail;

  // Test case 1: Using default separator
  const testResult1 = compareJoinResult(typedArray, undefined, '');
  console.log(`Test 1 result: ${testResult1}`); // Expected output: 0

  // Test case 2: Using comma as separator
  const testResult2 = compareJoinResult(typedArray, ',', '');
  console.log(`Test 2 result: ${testResult2}`); // Expected output: 0

  // Test case 3: Using hyphen as separator
  const testResult3 = compareJoinResult(typedArray, '-', '');
  console.log(`Test 3 result: ${testResult3}`); // Expected output: 0

  // Return the combined result of all test cases using addition
  return testResult0 + testResult1 + testResult2 + testResult3;
}

function testTypedArrayJoinWithNonEmptyArray(): number {
  let source1: {{.item.type}}[] = [
   {{.item.create}}(1),
   {{.item.create}}(2),
   {{.item.create}}(3),
   {{.item.create}}(4),
   {{.item.create}}(5),
  ];
  let ss = new ArrayBuffer(source1.length * {{.item.primitiveSizeBytes}});
  let typedArray: {{.item.objectType}};

  try {
    typedArray = new {{.item.objectType}}(ss);
    typedArray.set(source1);
  } catch(e) {
    console.log(e);
    return fail;
  }

  // Test case 0: Using empty param
  const testResult0 = typedArray.join() == '1,2,3,4,5' ? success : fail;

   // Test case 1: Using default separator (comma)
  const testResult1 = compareJoinResult(typedArray, undefined, '1,2,3,4,5');

  // Test case 2: Using comma as separator
  const testResult2 = compareJoinResult(typedArray, ',', '1,2,3,4,5');

  // Test case 3: Using hyphen as separator
  const testResult3 = compareJoinResult(typedArray, '-', '1-2-3-4-5');

  // Test case 4: Using empty string as separator
  const testResult4 = compareJoinResult(typedArray, '', '12345');

  // Test case 5: Using space as separator
  const testResult5 = compareJoinResult(typedArray, ' ', '1 2 3 4 5');

  // Test case 6: Using a multi-character separator
  const testResult6 = compareJoinResult(typedArray, ' | ', '1 | 2 | 3 | 4 | 5');

  // Test case 7: Using a numeric separator (will be coerced to string)
  const testResult7 = compareJoinResult(typedArray, `${1}`, '112131415');

  // Assert that all test cases pass
  return testResult0 + testResult1 + testResult2 + testResult3 + testResult4 + testResult5 + testResult6 + testResult7;
}

function testTypedArrayJoinWithNonEmptyArrayAndAbnormalStr(): number {
  let source1: {{.item.type}}[] = [
   {{.item.create}}(1),
   {{.item.create}}(2),
   {{.item.create}}(3),
   {{.item.create}}(4),
   {{.item.create}}(5),
  ];
  let ss = new ArrayBuffer(source1.length * {{.item.primitiveSizeBytes}});
  let typedArray: {{.item.objectType}};

  try {
    typedArray = new {{.item.objectType}}(ss);
    typedArray.set(source1);
  } catch(e) {
    console.log(e);
    return fail;
  }

  // Test case 1: Use newline character as a separator
  const testResult1 = compareJoinResult(typedArray, '\n', '1\n2\n3\n4\n5');

  // Test case 2: Use tab character as a separator
  const testResult2 = compareJoinResult(typedArray, '\t', '1\t2\t3\t4\t5');

  // Test case 3: Use backslash as a separator
  const testResult3 = compareJoinResult(typedArray, '\\', '1\\2\\3\\4\\5');

  // Assert that all test cases pass
  return testResult1 + testResult2 + testResult3;
}

function testTypedArrayKeysWithEmptyArray(): number {
  let ss = new ArrayBuffer(0);
  let typedArray: {{.item.objectType}};
  try {
    typedArray = new {{.item.objectType}}(ss, 0);
  } catch(e) {
    return fail;
  }
  if (typedArray.length as number != 0 || typedArray.byteOffset as number != 0) {
    return fail;
  }
  
  const emptyKeysArray = typedArray.keys();
  if(emptyKeysArray.next().value != undefined){
    return fail;
  }
  return success;
}

function testTypedArrayKeysWithSingleElementArray(): number {
  let typedArray: {{.item.objectType}};
  try {
    typedArray = new {{.item.objectType}}([1]);
  } catch(e) {
    return fail;
  }
  
  const emptyKeysArray = typedArray.keys();
  if(emptyKeysArray.next().value != 0){
    return fail;
  }

  //test nonInteger Length
  try {
    const nonIntegerLengthArray = new {{.item.objectType}}(3.5);
    const nonIntegerLengthIterator = nonIntegerLengthArray.keys();
    const expectedValues = [0, 1, 2];
    for (const expected of expectedValues) {
        if (nonIntegerLengthIterator.next().value != expected) {
            return fail;
        }
    }
    if (!nonIntegerLengthIterator.next().done) {
        return fail;
    }
    console.log(`Non-Integer Length Array Test Result: success`);
  } catch (error) {
      console.log('Non-Integer Length Array Test threw an error:', error);
      return fail;
  }

  //test big length,comment out the code to prevent potential unknown errors. 
  /*
  try {
      const largeLengthArray = new {{.item.objectType}}(1e4);
      let largeLengthKeysResult = 0;
      const largeLengthIterator = largeLengthArray.keys();
      for (let i = 0; i < 1e4; i++) {
        if (largeLengthIterator.next().value != i) {
            return fail;
        }
      }
      if (!largeLengthIterator.next().done) {
          return fail;
      }
      console.log(`Large Length Array Test Result: ${largeLengthKeysResult}`);
  } catch (error) {
      console.log('Large Length Array Test threw an error:', error);
      return fail;
  }*/
  return success;
}

function testTypedArrayKeysWithMultipleElementArray(): number {
  try {
    let typedArray = new {{.item.objectType}}([5, 15, 25, 35]);
    let multipleElementKeysResult = 0;
    const multipleElementIterator = typedArray.keys();
    const expectedValues = [0, 1, 2, 3];
    for (const expected of expectedValues) {
        if (multipleElementIterator.next().value != expected) {
            return fail;
        }
    }
    if (!multipleElementIterator.next().done) {
        return fail;
    }
      console.log(`Multiple Element Array Test Result: ${multipleElementKeysResult}`);
  } catch (error) {
      console.log('Multiple Element Array Test threw an error:', error);
      return fail;
  }
  return success;
}


function doubleElementsInArray(element: {{.item.type}}, index: number, array: {{.item.objectType}}): {{.item.primitiveType}} {
   return (element * {{.item.create}}(2)){{.item.cast2primitive}};
}

// Test case for forEach(callbackFn)
function testTypedArrayForEach(): number{
  let source1: {{.item.type}}[] = [
   {{.item.create}}(1),
   {{.item.create}}(2),
   {{.item.create}}(3),
   {{.item.create}}(4),
   {{.item.create}}(5),
  ];
  let ss = new ArrayBuffer(source1.length * {{.item.primitiveSizeBytes}});
  let typedArray: {{.item.objectType}};

  try {
    typedArray = new {{.item.objectType}}(ss);
    typedArray.set(source1);
  } catch(e) {
    console.log(e);
    return 1; // Return 1 if there is an error in creating the typed array
  }

  typedArray.forEach((value, index, array) => {
    array[index] = value * {{.item.create}}(2);
  });

  // Compare the modified array with the expected result
  const expectedArray = [2, 4, 6, 8, 10];
  for (let i = 0; i < typedArray.length; i++) {
    if (typedArray[i] != {{.item.create}}(expectedArray[i])) {
      console.log("Test failed. testTypedArrayForEach: " + JSON.stringify(typedArray[i]));
      return fail;
    }
  }
  return success;
}

// Test case for forEach(callbackFn: (value: number, index: number) => void)
function testTypedArrayForEachValueIndexCallback(): number {
    let source1: {{.item.type}}[] = [
     {{.item.create}}(1),
     {{.item.create}}(2),
     {{.item.create}}(3),
     {{.item.create}}(4),
     {{.item.create}}(5),
    ];
    let ss = new ArrayBuffer(source1.length * {{.item.primitiveSizeBytes}});
    let typedArray: {{.item.objectType}};

    try {
        typedArray = new {{.item.objectType}}(ss);
        typedArray.set(source1);
    } catch (e) {
        console.log(e);
        return fail; // Return 1 if there is an error in creating the typed array
    }

    typedArray.forEach((value, index) => {
        typedArray[index] = value * {{.item.create}}(2);
        console.log("In forEach: " + JSON.stringify(typedArray[index]));
    });

    // Compare the modified array with the expected result
    const expectedArray = [2, 4, 6, 8, 10];
    for (let i = 0; i < typedArray.length; i++) {
      if (typedArray[i] != {{.item.create}}(expectedArray[i])) {
        console.log("Test failed. testTypedArrayForEachValueIndexCallback: " + JSON.stringify(typedArray[i]));
        return fail;
      }
    }
    return success;
}

// Test case for forEach(callbackFn: (value: number) => void)
function testTypedArrayForEachValueCallback(): number {
    let source1: {{.item.type}}[] = [
     {{.item.create}}(1),
     {{.item.create}}(2),
     {{.item.create}}(3),
     {{.item.create}}(4),
     {{.item.create}}(5),
    ];
    let ss = new ArrayBuffer(source1.length * {{.item.primitiveSizeBytes}});
    let typedArray: {{.item.objectType}};

    try {
        typedArray = new {{.item.objectType}}(ss);
        typedArray.set(source1);
    } catch (e) {
        console.log(e);
        return fail; // Return 1 if there is an error in creating the typed array
    }

    let index = 0;
    typedArray.forEach((value) => {
        typedArray[index] = value * {{.item.create}}(2);
        console.log("In forEach: " + JSON.stringify(typedArray[index]));
        index++;
    });

    // Compare the modified array with the expected result
    const expectedArray = [2, 4, 6, 8, 10];
    for (let i = 0; i < typedArray.length; i++) {
        if (typedArray[i] != {{.item.create}}(expectedArray[i])) {
            console.log("Test failed. testTypedArrayForEachValueCallback: " + JSON.stringify(typedArray[i]));
            return fail;
        }
    }
    return success;
}

// Test case for forEach(callbackFn: () => void)
function testTypedArrayForEachNoArgsCallback(): number {
    let source1: {{.item.type}}[] = [
     {{.item.create}}(1),
     {{.item.create}}(2),
     {{.item.create}}(3),
     {{.item.create}}(4),
     {{.item.create}}(5),
    ];
    let ss = new ArrayBuffer(source1.length * {{.item.primitiveSizeBytes}});
    let typedArray: {{.item.objectType}};

    try {
        typedArray = new {{.item.objectType}}(ss);
        typedArray.set(source1);
    } catch (e) {
        console.log(e);
        return fail; // Return 1 if there is an error in creating the typed array
    }

    let index = 0;
    typedArray.forEach(() => {
        // As forEach without arguments is not valid for typed arrays, this implementation is just for demonstration
        typedArray[index] = typedArray[index] * {{.item.create}}(2);
        index++;
    });
    // Compare the modified array with the expected result
    const expectedArray = [2, 4, 6, 8, 10];
    for (let i = 0; i < typedArray.length; i++) {
        if (typedArray[i] != {{.item.create}}(expectedArray[i])) {
            console.log("Test failed. testTypedArrayForEachNoArgsCallback: " + JSON.stringify(typedArray[i]));
            return fail;
        }
    }
    return success;
}

type ObjectTypeAndExpectations<T> = [{{.item.objectType}}, T]

const testTypedArrayGet = parametrize<ObjectTypeAndExpectations<boolean[]>>(
  "testTypedArrayGet",
  [
    [
      {{.item.objectType}}.of({{.item.create}}(10), {{.item.create}}(20), {{.item.create}}(30)),
      [true, true, true, true, true, true]
    ] as ObjectTypeAndExpectations<boolean[]>,
  ],
  (args: ObjectTypeAndExpectations<boolean[]>): number => {
    const array = args[0]
    const expected = args[1]

    const isMinusOneThrows = testTypedArrayGetException(array, -1) == success
    const isLengthThrows = testTypedArrayGetException(array, array.length) == success
    const isNegInfThrows = testTypedArrayGetException(array, -Infinity) == success
    const isPosInfThrows = testTypedArrayGetException(array, +Infinity) == success
    const isNanZero = array[NaN] == array[0]

    let isCorrectValues = true
    for (let i = 0; i < array.length; i++) {
      if (array[i] != {{.item.create}}((i + 1) * 10)) {
        isCorrectValues = false
        break
      }
    }

    let failures = 0

    failures += check(boolToResult(isMinusOneThrows == expected[0]), `{{.item.objectType}} didn't throw: array[-1]`)
    failures += check(boolToResult(isLengthThrows == expected[1]), `{{.item.objectType}} didn't throw: array[array.length]`)
    failures += check(boolToResult(isNegInfThrows == expected[2]), `{{.item.objectType}} didn't throw: array[-Infinity]`)
    failures += check(boolToResult(isPosInfThrows == expected[3]), `{{.item.objectType}} didn't throw: array[+Infinity]`)
    failures += check(boolToResult(isNanZero == expected[4]), `{{.item.objectType}} failed: array[NaN] == array[0]`)
    failures += check(boolToResult(isCorrectValues == expected[5]), `{{.item.objectType}} failed: array[i] == (i + 1) * 10`)
    
    return failures == 0 ? success: fail
  }
)

function testTypedArrayGetException(array: {{.item.objectType}}, index: number): number {
  try {
    const tmp = array[index]
  } catch (e: RangeError) {
    return success
  } catch (e) {
    console.log(e)
  }
  return fail
}

const testTypedArraySet = parametrize<ObjectTypeAndExpectations<boolean[]>>(
  "testTypedArraySet",
  [
    [
      {{.item.objectType}}.of({{.item.create}}(10), {{.item.create}}(20), {{.item.create}}(30)),
      [true, true, true, true, true, true, true, true, true]
    ] as ObjectTypeAndExpectations<boolean[]>,
  ],
  (args: ObjectTypeAndExpectations<boolean[]>): number => {
    const array = args[0]
    const expected = args[1]
    const value = 100

    const isMinusOneThrows = testTypedArraySetException(array, -1, value) == success
    const isLengthThrows = testTypedArraySetException(array, array.length, value) == success
    const isNegInfThrows = testTypedArraySetException(array, -Infinity, value) == success
    const isPosInfThrows = testTypedArraySetException(array, +Infinity, value) == success

    array[NaN] = value
    const isNanZero = array[0] == {{.item.create}}(value)

    {%- if item.objectType != 'BigInt64Array' %}

    array[0 as number] = (value + 1) as number
    const isNumberNumberCorrect = array[0] == {{.item.create}}(value + 1)
    
    array[0 as int] = (value + 2) as number
    const isIntNumberCorrect = array[0] == {{.item.create}}(value + 2)
    
    {%- endif %}

    array[0 as number] = (value + 3) as int
    const isNumberIntCorrect = array[0] == {{.item.create}}(value + 3)

    array[0 as int] = (value + 4) as int
    const isIntIntCorrect = array[0] == {{.item.create}}(value + 4)

    let failures = 0

    failures += check(boolToResult(isMinusOneThrows == expected[0]), `{{.item.objectType}} didn't throw: array[-1] = value`)
    failures += check(boolToResult(isLengthThrows == expected[1]), `{{.item.objectType}} didn't throw: array[array.length] = value`)
    failures += check(boolToResult(isNegInfThrows == expected[2]), `{{.item.objectType}} didn't throw: array[-Infinity] = value`)
    failures += check(boolToResult(isPosInfThrows == expected[3]), `{{.item.objectType}} didn't throw: array[+Infinity] = value`)
    failures += check(boolToResult(isNanZero == expected[4]), `{{.item.objectType}} failed: array[NaN] = value`)
    {%- if item.objectType != 'BigInt64Array' %}
    failures += check(boolToResult(isNumberNumberCorrect == expected[5]), `{{.item.objectType}} failed: array[0 as number] = value as number`)
    failures += check(boolToResult(isIntNumberCorrect == expected[6]), `{{.item.objectType}} failed: array[0 as int] = value as number`)
    {%- endif %}
    failures += check(boolToResult(isNumberIntCorrect == expected[7]), `{{.item.objectType}} failed: array[0 as number] = value as int`)
    failures += check(boolToResult(isIntIntCorrect == expected[8]), `{{.item.objectType}} failed: array[0 as int] = value as int`)
    
    return failures == 0 ? success: fail
  }
)

function testTypedArraySetException(array: {{.item.objectType}}, index: number, value: int): number {
  try {
    array[index] = value
  } catch (e: RangeError) {
    return success
  } catch (e) {
    console.log(e)
  }
  return fail
}
