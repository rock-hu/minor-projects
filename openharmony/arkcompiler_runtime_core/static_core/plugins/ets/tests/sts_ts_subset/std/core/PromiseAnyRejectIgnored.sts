/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Fulfill implements PromiseLike<string> {
    then<U, E>(onFulfilled?: (value: string) => U|PromiseLike<U>, _?: (error: Object) => E|PromiseLike<E>): PromiseLike<U|E> {
        return new Promise<U>((resolve: (value: U|PromiseLike<U>) => void) => {
            resolve(onFulfilled!("abc"));
        });
    }
}

class Reject implements PromiseLike<string> {
    then<U, E>(onFulfilled?: (value: string) => U|PromiseLike<U>, onRejected?: (error: Object) => E|PromiseLike<E>): PromiseLike<U|E> {
        return new Promise<U>((resolve: (value: U|PromiseLike<U>) => void) => {
            let v = onFulfilled!("def");
            onRejected!("xyz");
            resolve(v);
        });
    }
}

let thenable: PromiseLike<string>[] = [new Fulfill(), new Reject()];
Promise.any(thenable).then<void, void>((value: string): void => {
    if (value != "abc") {
        console.log("Test failed. The promise should be resolved by the specified value.");
        return;
    }
    console.log("Test passed.");
}, (error: Object): void => {
    console.log("Test failed. The promise should not be rejected.");
});
