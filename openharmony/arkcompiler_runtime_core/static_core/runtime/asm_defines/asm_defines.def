/**
 * Copyright (c) 2021-2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NOLINTBEGIN(readability-identifier-naming)
DEFINE_VALUE(SLOT_SIZE, PointerSize(RUNTIME_ARCH))
DEFINE_VALUE(POINTER_LOG_SIZE, helpers::math::GetIntLog2(sizeof(void *)))

// File offsets
DEFINE_VALUE(FILE_BASE_OFFSET, ark::panda_file::File::GetFileBaseOffset())

// Method offsets
DEFINE_VALUE(METHOD_ACCESS_FLAGS_OFFSET, Method::GetAccessFlagsOffset())
DEFINE_VALUE(METHOD_V_TABLE_INDEX_OFFSET, Method::GetVTableIndexOffset())
DEFINE_VALUE(METHOD_NUM_ARGS_OFFSET, Method::GetNumArgsOffset())
DEFINE_VALUE(METHOD_HOTNESS_COUNTER_OFFSET, Method::GetHotnessCounterOffset())
DEFINE_VALUE(METHOD_CLASS_OFFSET, Method::GetClassOffset())
DEFINE_VALUE(METHOD_COMPILED_ENTRY_POINT_OFFSET, Method::GetCompiledEntryPointOffset())
DEFINE_VALUE(METHOD_PANDA_FILE_OFFSET, Method::GetPandaFileOffset())
DEFINE_VALUE(METHOD_NATIVE_POINTER_OFFSET, Method::GetNativePointerOffset())
DEFINE_VALUE(METHOD_SHORTY_OFFSET, Method::GetShortyOffset())
DEFINE_VALUE(METHOD_CODE_ID_OFFSET, Method::GetCodeIdOffset())

// Frame offsets
DEFINE_VALUE(FRAME_METHOD_OFFSET, Frame::GetMethodOffset())
DEFINE_VALUE(FRAME_PREV_FRAME_OFFSET, Frame::GetPrevFrameOffset())
DEFINE_VALUE(FRAME_NUM_VREGS_OFFSET, Frame::GetNumVregsOffset())
DEFINE_VALUE(FRAME_NUM_ACTUAL_ARGS_OFFSET, Frame::GetNumActualArgsOffset())
DEFINE_VALUE(FRAME_ACC_OFFSET, Frame::GetAccOffset())
DEFINE_VALUE(FRAME_ACC_MIRROR_OFFSET, interpreter::AccVRegister::GetMirrorOffset())
DEFINE_VALUE(FRAME_VREGS_OFFSET, Frame::GetVregsOffset())
DEFINE_VALUE(FRAME_NEXT_INSTRUCTION_OFFSET, Frame::GetNextInstructionOffset())
DEFINE_VALUE(FRAME_BYTECODE_OFFSET, Frame::GetBytecodeOffsetOffset())
DEFINE_VALUE(FRAME_FLAGS_OFFSET, Frame::GetFlagsOffset())
DEFINE_VALUE(FRAME_INSTRUCTIONS_OFFSET, Frame::GetInstructionsOffset())
DEFINE_VALUE(FRAME_EXT_OFFSET, Frame::GetExtOffset())
DEFINE_VALUE(FRAME_SIZE, sizeof(Frame))

DEFINE_VALUE(FRAME_VREGISTER_SIZE, sizeof(interpreter::VRegister))
DEFINE_VALUE(FRAME_VREGISTER_VALUE_OFFSET, interpreter::VRegister::GetValueOffset())
DEFINE_VALUE(FRAME_VREGISTER_PRIMITIVE_TAG, 0)  // TODO(runtime): find a way to get primitive tag from vreg
DEFINE_VALUE(FRAME_VREGISTER_OBJECT_TAG, 1)     // TODO(runtime): find a way to get object tag from vreg
DEFINE_VALUE(FRAME_SLOT_OFFSET, ark::Frame::GetVregsOffset() + interpreter::VRegister::GetValueOffset())

DEFINE_VALUE(CFRAME_LR_SLOT, CFrameReturnAddr::Start())
DEFINE_VALUE(CFRAME_STACK_START_SLOT, CFrameSlots::Start())
DEFINE_VALUE(CFRAME_CALLEE_REGS_START_SLOT, CFrameLayout::RegsRegion::Start())
DEFINE_VALUE(CFRAME_LOCALS_COUNT, (CFrameSlots::Start() - CFrameData::Start()))
DEFINE_VALUE(CFRAME_HEADER_SIZE, (CFrameFlags::End() - CFrameReturnAddr::Start()))
DEFINE_VALUE(CFRAME_FLAGS_SLOT, (CFrameFlags::Start()))
DEFINE_VALUE(CFRAME_LOCALS_START_SLOT, (CFrameLocals::Start()))
DEFINE_VALUE(CFRAME_KIND_OSR, (helpers::ToUnderlying(CFrameLayout::FrameKind::OSR) << CFrameLayout::FrameKindField::START_BIT))
DEFINE_VALUE(CFRAME_KIND_NATIVE, (helpers::ToUnderlying(CFrameLayout::FrameKind::NATIVE) << CFrameLayout::FrameKindField::START_BIT))
DEFINE_VALUE(CFRAME_HAS_FLOAT_REGS_FLAG_MASK, (1U << CFrameLayout::HasFloatRegsFlag::START_BIT))
DEFINE_VALUE(CFRAME_HAS_FLOAT_REGS_FLAG_BIT, (CFrameLayout::HasFloatRegsFlag::START_BIT))
DEFINE_VALUE(CFRAME_PREV_FRAME_SLOT, CFramePrevFrame::Start())

// Thread offsets
DEFINE_VALUE(MANAGED_THREAD_G1_POST_BARRIER_BUFFER_OFFSET, ManagedThread::GetG1PostBarrierBufferOffset())
DEFINE_VALUE(MANAGED_THREAD_FRAME_KIND_OFFSET, ManagedThread::GetFrameKindOffset())
DEFINE_VALUE(MANAGED_THREAD_FLAG_OFFSET, ManagedThread::GetFlagOffset())
DEFINE_VALUE(MANAGED_THREAD_ENTRYPOINTS_OFFSET, ManagedThread::GetEntrypointsOffset())
DEFINE_VALUE(MANAGED_THREAD_OBJECT_OFFSET, ManagedThread::GetObjectOffset())
DEFINE_VALUE(MANAGED_THREAD_FRAME_OFFSET, ManagedThread::GetFrameOffset())
DEFINE_VALUE(MANAGED_THREAD_EXCEPTION_OFFSET, ManagedThread::GetExceptionOffset())
DEFINE_VALUE(MANAGED_THREAD_NATIVE_PC_OFFSET, ManagedThread::GetNativePcOffset())

DEFINE_VALUE(MANAGED_THREAD_TLAB_OFFSET, ManagedThread::GetTLABOffset())
DEFINE_VALUE(MANAGED_THREAD_CARD_TABLE_ADDR_OFFSET, ManagedThread::GetTlsCardTableAddrOffset())
DEFINE_VALUE(MANAGED_THREAD_CARD_TABLE_MIN_ADDR_OFFSET, ManagedThread::GetTlsCardTableMinAddrOffset())
DEFINE_VALUE(MANAGED_THREAD_POST_WRB_ONE_OBJECT_OFFSET, ManagedThread::GetTlsPostWrbOneObjectOffset())
DEFINE_VALUE(MANAGED_THREAD_POST_WRB_TWO_OBJECTS_OFFSET, ManagedThread::GetTlsPostWrbTwoObjectsOffset())
DEFINE_VALUE(MANAGED_THREAD_PRE_WRB_ENTRYPOINT_OFFSET, ManagedThread::GetTlsPreWrbEntrypointOffset())
DEFINE_VALUE(MANAGED_THREAD_STRING_CLASS_PTR_OFFSET, ManagedThread::GetTlsStringClassPointerOffset())
DEFINE_VALUE(MANAGED_THREAD_ARRAY_U16_CLASS_PTR_OFFSET, ManagedThread::GetTlsArrayU16ClassPointerOffset())
DEFINE_VALUE(MANAGED_THREAD_ARRAY_U8_CLASS_PTR_OFFSET, ManagedThread::GetTlsArrayU8ClassPointerOffset())
DEFINE_VALUE(MANAGED_THREAD_PRE_BUFF_OFFSET, ManagedThread::GetPreBuffOffset())
DEFINE_VALUE(MANAGED_THREAD_LANGUAGE_EXTENSION_DATA_OFFSET, ManagedThread::GetLanguageExtensionsDataOffset())
DEFINE_VALUE(MANAGED_THREAD_INTERNAL_ID_OFFSET, ManagedThread::GetInternalIdOffset())
DEFINE_VALUE(MANAGED_THREAD_RUNTIME_CALL_ENABLED_OFFSET, ManagedThread::GetRuntimeCallEnabledOffset())
DEFINE_VALUE(MANAGED_THREAD_INTERPRETER_CACHE_OFFSET, ManagedThread::GetInterpreterCacheOffset())

DEFINE_VALUE(MT_MANAGED_THREAD_LOCKED_OBJECT_CAPACITY_OFFSET, MTManagedThread::GetLockedObjectCapacityOffset())
DEFINE_VALUE(MT_MANAGED_THREAD_LOCKED_OBJECT_SIZE_OFFSET, MTManagedThread::GetLockedObjectSizeOffset())
DEFINE_VALUE(MT_MANAGED_THREAD_LOCKED_OBJECT_DATA_OFFSET, MTManagedThread::GetLockedObjectDataOffset())

DEFINE_VALUE(THREAD_VM_OFFSET, ark::Thread::GetVmOffset())

DEFINE_VALUE(LOCKED_OBJECT_INFO_SIZE, sizeof(LockedObjectInfo))
DEFINE_VALUE(LOCKED_OBJECT_INFO_MONITOR_OFFSET, LockedObjectInfo::GetMonitorOffset())
DEFINE_VALUE(LOCKED_OBJECT_INFO_STACK_OFFSET, LockedObjectInfo::GetStackOffset())

// Array offsets
DEFINE_VALUE(CORETYPES_ARRAY_DATA_OFFSET, coretypes::Array::GetDataOffset())
DEFINE_VALUE(CORETYPES_ARRAY_LENGTH_OFFSET, coretypes::Array::GetLengthOffset())
DEFINE_VALUE(CORETYPES_ARRAY_CLASS_SIZE, sizeof(ark::coretypes::Array))

// String offsets
DEFINE_VALUE(CORETYPES_STRING_DATA_OFFSET, coretypes::String::GetDataOffset())
DEFINE_VALUE(CORETYPES_STRING_LENGTH_OFFSET, coretypes::String::GetLengthOffset())
DEFINE_VALUE(CORETYPES_STRING_CLASS_SIZE, sizeof(coretypes::String))
DEFINE_VALUE(CORETYPES_STRING_MUTF8_1B_MAX, utf::UTF8_1B_MAX)

// TLAB offsets
DEFINE_VALUE(TLAB_MEMORY_START_ADDR_OFFSET, mem::TLAB::TLABStartAddrOffset())
DEFINE_VALUE(TLAB_CUR_FREE_POSITION_OFFSET, mem::TLAB::TLABFreePointerOffset())
DEFINE_VALUE(TLAB_MEMORY_END_ADDR_OFFSET, mem::TLAB::TLABEndAddrOffset())
DEFINE_VALUE(TLAB_ALIGNMENT, DEFAULT_ALIGNMENT_IN_BYTES)

// ObjectHeader offsets
DEFINE_VALUE(OBJECT_HEADER_CLASS_POINTER_OFFSET, ark::ObjectHeader::GetClassOffset())
DEFINE_VALUE(OBJECT_HEADER_MARK_WORD_OFFSET, ark::ObjectHeader::GetMarkWordOffset())

// Class offsets
DEFINE_VALUE(BASE_CLASS_MANAGED_OBJECT_OFFSET, BaseClass::GetManagedObjectOffset())
DEFINE_VALUE(BASE_CLASS_FLAGS_OFFSET, BaseClass::GetFlagsOffset())
DEFINE_VALUE(CLASS_VTABLE_OFFSET, ark::Class::GetVTableOffset())
DEFINE_VALUE(CLASS_BASE_OFFSET, ark::Class::GetBaseOffset())
DEFINE_VALUE(CLASS_METHODS_OFFSET, ark::Class::GetMethodsOffset())
DEFINE_VALUE(CLASS_COMPONENT_TYPE_OFFSET, ark::Class::GetComponentTypeOffset())
DEFINE_VALUE(CLASS_TYPE_OFFSET, ark::Class::GetTypeOffset())
DEFINE_VALUE(CLASS_STATE_OFFSET, ark::Class::GetStateOffset())

DEFINE_VALUE(CLASS_IS_CLONEABLE, ark::Class::IS_CLONEABLE)
DEFINE_VALUE(CLASS_ISARRAY_OFFSET, ark::Class::GetComponentTypeOffset())
DEFINE_VALUE(CLASS_ARRAY_ELEMENT_TYPE_OFFSET, ark::Class::GetTypeOffset())
DEFINE_VALUE(CLASS_ITABLE_OFFSET, ark::Class::GetITableOffset())
DEFINE_VALUE(CLASS_ITABLE_ENTRY_SIZE, ark::ITable::GetEntrySize())
DEFINE_VALUE(CLASS_ITABLE_ENTRIES_DATA_OFFSET, ark::ITable::GetEntriesDataOffset())
DEFINE_VALUE(CLASS_ITABLE_ENTRIES_SIZE_OFFSET, ark::ITable::GetEntriesSizeOffset())
DEFINE_VALUE(CLASS_ITABLE_ENTRY_INTERFACE_OFFSET, ark::ITable::Entry::GetInterfaceOffset())

// Field offsets
DEFINE_VALUE(FIELD_CLASS_OFFSET, Field::GetClassOffset())
DEFINE_VALUE(FIELD_OFFSET_OFFSET, Field::GetOffsetOffset())
DEFINE_VALUE(FIELD_ACCESS_FLAGS_OFFSET, Field::GetAccessFlagsOffset())

// NativePointer offsets
DEFINE_VALUE(CORETYPES_NATIVE_POINTER_EXTERNAL_POINTER_OFFSET, coretypes::NativePointer::GetExternalPointerOffset())

DEFINE_VALUE(ACCESS_STATIC, ACC_STATIC)
DEFINE_VALUE(CALLEE_SAVED_SIZE, (GetCalleeRegsCount(RUNTIME_ARCH, false) + GetCalleeRegsCount(RUNTIME_ARCH, true)) *
                                       PointerSize(RUNTIME_ARCH))

DEFINE_VALUE(BRIDGE_FRAME_SIZE, AlignUp(
    (static_cast<size_t>(CFrameLayout::HEADER_SIZE) + GetCalleeRegsCount(RUNTIME_ARCH, false) + GetCalleeRegsCount(RUNTIME_ARCH, true)) *
    PointerSize(RUNTIME_ARCH),
    16))

DEFINE_VALUE(CALLER_REG0_OFFSET, (CFrameLayout(RUNTIME_ARCH, 0).GetCallerRegsStartSlot() +
                                  GetCallerRegsCount(RUNTIME_ARCH, false) - 1) * CFrameLayout(RUNTIME_ARCH, 0).GetSlotSize())
DEFINE_VALUE(CALLER_VREG0_OFFSET, (CFrameLayout(RUNTIME_ARCH, 0).GetCallerRegsStartSlot() +
                                  GetCallerRegsCount(RUNTIME_ARCH, false) + GetCallerRegsCount(RUNTIME_ARCH, true) - 1) * CFrameLayout(RUNTIME_ARCH, 0).GetSlotSize())
DEFINE_VALUE(CALLEE_REG0_OFFSET, ((CFrameLayout::HEADER_SIZE + GetCalleeRegsCount(RUNTIME_ARCH, false)) * CFrameLayout(RUNTIME_ARCH, 0).GetSlotSize()))
DEFINE_VALUE(CALLEE_VREG0_OFFSET, ((CFrameLayout::HEADER_SIZE + GetCalleeRegsCount(RUNTIME_ARCH, false) + GetCalleeRegsCount(RUNTIME_ARCH, true)) * CFrameLayout(RUNTIME_ARCH, 0).GetSlotSize()))
DEFINE_VALUE(GP_CALLEE_REGS_COUNT, GetCalleeRegsCount(RUNTIME_ARCH, false))

DEFINE_VALUE(INTERPRETER_TO_COMPILED_CODE_BRIDGE, FrameBridgeKind::INTERPRETER_TO_COMPILED_CODE)
DEFINE_VALUE(COMPILED_CODE_TO_INTERPRETER_BRIDGE, FrameBridgeKind::COMPILED_CODE_TO_INTERPRETER)
DEFINE_VALUE(BYPASS_BRIDGE, FrameBridgeKind::BYPASS)

// Interpreter to compiler bridge consts
DEFINE_VALUE(INT_METHOD_OFFSET, BoundaryFrame<FrameKind::INTERPRETER>::METHOD_OFFSET)
DEFINE_VALUE(INT_FP_OFFSET, BoundaryFrame<FrameKind::INTERPRETER>::FP_OFFSET)
DEFINE_VALUE(INT_RETURN_OFFSET, BoundaryFrame<FrameKind::INTERPRETER>::RETURN_OFFSET)
DEFINE_VALUE(INT_CALLEES_OFFSET, BoundaryFrame<FrameKind::INTERPRETER>::CALLEES_OFFSET)

// Compiler to interpreter bridge consts
DEFINE_VALUE(COMP_METHOD_OFFSET, BoundaryFrame<FrameKind::COMPILER>::METHOD_OFFSET)
DEFINE_VALUE(COMP_FP_OFFSET, BoundaryFrame<FrameKind::COMPILER>::FP_OFFSET)
DEFINE_VALUE(COMP_RETURN_OFFSET, BoundaryFrame<FrameKind::COMPILER>::RETURN_OFFSET)
DEFINE_VALUE(COMP_CALLEES_OFFSET, BoundaryFrame<FrameKind::COMPILER>::CALLEES_OFFSET)

DEFINE_VALUE(CLASS_STATE_INITIALIZED, static_cast<std::underlying_type_t<ark::Class::State>>(ark::Class::State::INITIALIZED))

DEFINE_VALUE(ELEMENT_TYPE_U1, (int)ark::panda_file::Type::TypeId::U1)
DEFINE_VALUE(ELEMENT_TYPE_I8, (int)ark::panda_file::Type::TypeId::I8)
DEFINE_VALUE(ELEMENT_TYPE_U8, (int)ark::panda_file::Type::TypeId::U8)
DEFINE_VALUE(ELEMENT_TYPE_I16, (int)ark::panda_file::Type::TypeId::I16)
DEFINE_VALUE(ELEMENT_TYPE_U16, (int)ark::panda_file::Type::TypeId::U16)
DEFINE_VALUE(ELEMENT_TYPE_I32, (int)ark::panda_file::Type::TypeId::I32)
DEFINE_VALUE(ELEMENT_TYPE_U32, (int)ark::panda_file::Type::TypeId::U32)
DEFINE_VALUE(ELEMENT_TYPE_F32, (int)ark::panda_file::Type::TypeId::F32)
DEFINE_VALUE(ELEMENT_TYPE_F64, (int)ark::panda_file::Type::TypeId::F64)
DEFINE_VALUE(ELEMENT_TYPE_I64, (int)ark::panda_file::Type::TypeId::I64)
DEFINE_VALUE(ELEMENT_TYPE_U64, (int)ark::panda_file::Type::TypeId::U64)
DEFINE_VALUE(ELEMENT_TYPE_REFERENCE, (int)ark::panda_file::Type::TypeId::REFERENCE)

// G1 GC Structures
DEFINE_VALUE(G1_LOCK_BUFFER_DATA_OFFSET, mem::GCG1BarrierSet::G1PostBarrierRingBufferType::GetBufferOffset())
DEFINE_VALUE(G1_LOCK_BUFFER_TAIL_OFFSET, mem::GCG1BarrierSet::G1PostBarrierRingBufferType::GetTailIndexOffset())
DEFINE_VALUE(G1_LOCK_BUFFER_HEAD_OFFSET, mem::GCG1BarrierSet::G1PostBarrierRingBufferType::GetHeadIndexOffset())

DEFINE_VALUE(CARD_TABLE_CARD_BITS, mem::CardTable::GetCardBits())
DEFINE_VALUE(CARD_ALIGNMENT_MASK, (1U << mem::CardTable::GetCardBits()) - 1U)
DEFINE_VALUE(CARD_VALUE_OFFSET, mem::CardTable::Card::GetValueOffset())

DEFINE_VALUE(RUNTIME_MODE_DEFAULT, 0)
DEFINE_VALUE(RUNTIME_MODE_STUB, 1)
DEFINE_VALUE(RUNTIME_MODE_SLOW_PATH, 2)
DEFINE_VALUE(RUNTIME_MODE_ODD_SAVED, 3)

DEFINE_VALUE(MIN_PREFIX_OPCODE_INDEX, BytecodeInstruction::GetMinPrefixOpcodeIndex())
DEFINE_VALUE(TAGGED_VALUE_UNDEFINED, TaggedValue::VALUE_UNDEFINED)
// NOLINTEND(readability-identifier-naming)
#include "plugins_asm_defines.def"
