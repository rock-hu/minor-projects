# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

.record panda.ClassCastException <external>

.record A {}
.record B <extends=A> {}
.record C {}

#! CHECKER      CheckCast Elimination applied, replaced by Deoptimize.
#! RUN          force_jit: true, options: "--compiler-regex=_GLOBAL.*", entry: "_GLOBAL::main1"
#! METHOD       "_GLOBAL::main1"
#! PASS_AFTER   "Inline"
#! INST_NOT     "CheckCast"
#! INST         "Deoptimize"

.function u1 main1() {
    newobj v0, A
    lda.obj v0

try_begin:
    checkcast C
    ldai 2
    return
try_end:

catch_block1_begin:
    ldai 0
    return

catch_block2_begin:
    ldai 1
    return

.catch panda.ClassCastException, try_begin, try_end, catch_block1_begin
.catchall try_begin, try_end, catch_block2_begin
}

#! CHECKER      CheckCast Elimination applied, remove redundant checkcast.
#! RUN          force_jit: true, options: "--compiler-regex=_GLOBAL.*", entry: "_GLOBAL::main2"
#! METHOD       "_GLOBAL::main2"
#! PASS_AFTER   "Inline"
#! INST_NOT     "CheckCast"

.function u1 main2() {
    newobj v0, B
    lda.obj v0

try_begin:
    checkcast A
    lda.null
    checkcast A
    ldai 0
    return
try_end:

catch_block1_begin:
    ldai 2
    return

catch_block2_begin:
    ldai 1
    return

.catch panda.ClassCastException, try_begin, try_end, catch_block1_begin
.catchall try_begin, try_end, catch_block2_begin
}

#! CHECKER      CheckCast Elimination applied, remove redundant checkcast, inline.
#! RUN          force_jit: true, options: "--compiler-regex=_GLOBAL.*", entry: "_GLOBAL::main3"

.function i32 test1() {
    newobj v0, B
    lda.obj v0
    checkcast C
    ldai 1
    return
}

.function u1 main3() {
try_begin:
    call.short test1
    return
try_end:

catch_block1_begin:
    ldai 0
    return

catch_block2_begin:
    ldai 1
    return

.catch panda.ClassCastException, try_begin, try_end, catch_block1_begin
.catchall try_begin, try_end, catch_block2_begin
}

#! CHECKER      CheckCast Elimination applied, remove redundant checkcast for field value.
#! RUN          force_jit: true, options: "--compiler-regex=_GLOBAL.*", entry: "_GLOBAL::main4"
#! METHOD       "_GLOBAL::main4"
#! PASS_AFTER   "IrBuilder"
#! INST         "CheckCast"
#! PASS_AFTER   "ChecksElimination"
#! INST_NOT     "CheckCast"

.record D {
    B b
}

.function u1 main4() {
    newobj v0, D
    ldobj v0, D.b

try_begin:
    checkcast A
    ldai 0
    return
try_end:

catch_block1_begin:
    ldai 2
    return

catch_block2_begin:
    ldai 1
    return

.catch panda.ClassCastException, try_begin, try_end, catch_block1_begin
.catchall try_begin, try_end, catch_block2_begin
}


#! CHECKER      CheckCast Elimination applied, remove redundant checkcast for method return value.
#! RUN          force_jit: true, options: "--compiler-regex=_GLOBAL.* --compiler-inlining=false", entry: "_GLOBAL::main5"
#! METHOD       "_GLOBAL::test2"
#! PASS_AFTER   "IrBuilder"
#! INST         "CheckCast"
#! PASS_AFTER   "ChecksElimination"
#! INST_NOT     "CheckCast"

.function A createB() {
    newobj v0, B
    lda.obj v0
    return.obj
}

.function void test2(u1 a0) {
    lda a0
    jnez make_call
    newobj v1, A
    lda.obj v1
    jmp check
make_call:
    call.short createB
check:
    checkcast A
    return.void
}

.function u1 main5() {
try_begin:
    movi v0, 0
    call.short test2, v0
    movi v0, 1
    call.short test2, v0
    ldai 0
    return
try_end:

catch_block1_begin:
    ldai 2
    return

catch_block2_begin:
    ldai 1
    return

.catch panda.ClassCastException, try_begin, try_end, catch_block1_begin
.catchall try_begin, try_end, catch_block2_begin
}

#! CHECKER      CheckCast is not replaced to Deoptimize because return value can be subclass of return class.
#! RUN          force_jit: true, options: "--compiler-regex=_GLOBAL.* --compiler-inlining=false", entry: "_GLOBAL::main6"
#! METHOD       "_GLOBAL::test3"
#! PASS_AFTER   "Codegen"
#! INST         "CheckCast"

.function u1 test3(u1 a0) {
    lda a0
    jnez make_call
    newobj v1, A
    lda.obj v1
    jmp check
make_call:
    call.short createB
check:
try_begin:
    checkcast B
    ldai 0
    return
try_end:
catch_block_begin:
    ldai 1
    return
.catch panda.ClassCastException, try_begin, try_end, catch_block_begin
}

.function u1 main6() {
try_begin:
    movi v0, 0
    call.short test3, v0
    jeqz exit_failure
    movi v0, 1
    call.short test3, v0
    return
try_end:

catch_block_begin:
    ldai 2
    return

exit_failure:
    ldai 3
    return

.catchall  try_begin, try_end, catch_block_begin
}
