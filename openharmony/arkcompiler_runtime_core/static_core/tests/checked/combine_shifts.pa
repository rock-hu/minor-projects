# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#! CHECKER      Combination of two shifts is 0 or -1 when total shift is at least type size.
#! RUN          force_jit: true, options: "--compiler-inlining=false", entry: "_GLOBAL::main1"
#! METHOD       "_GLOBAL::shr_u32_zero"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "Shr", 0
#! METHOD       "_GLOBAL::shr_u32_by_8"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "Shr", 1
#! METHOD       "_GLOBAL::shl_u32_zero"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "Shl", 0
#! METHOD       "_GLOBAL::shl_u32_by_4"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "Shl", 1
#! METHOD       "_GLOBAL::ashr_i32_zero"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "AShr", 1
#! METHOD       "_GLOBAL::ashr_i32_by_24"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "AShr", 1
#! METHOD       "_GLOBAL::shl_u64_zero"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "Shl", 0
#! METHOD       "_GLOBAL::shl_u64_by_32"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "Shl", 1
#! METHOD       "_GLOBAL::ashr_i64_zero"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "AShr", 1

#! CHECKER      Combination of two shifts has the same result in interpreter mode.
#! RUN          options: "--compiler-enable-jit=false", entry: "_GLOBAL::main1"

.function u32 shr_u32_zero(u32 a0) {
    lda a0
    shri 14
    shri 18
    return
}

.function u32 shr_u32_by_8(u32 a0) {
    lda a0
    shri 0x21
    shri 0x47
    return
}

.function u32 shl_u32_zero(u32 a0) {
    lda a0
    shli 9
    shli 24
    return
}

.function u32 shl_u32_by_4(u32 a0) {
    lda a0
    shli 35
    shli 1
    return
}

.function i32 ashr_i32_zero(i32 a0) {
    lda a0
    ashri 15
    ashri 17
    return
}

.function i32 ashr_i32_by_24(i32 a0) {
    lda a0
    ashri 0xf2
    ashri 0xe6
    return
}

.function u64 shl_u64_zero(u64 a0) {
    lda a0
    movi.64 v0, 33
    shl2.64 v0
    movi.64 v0, 37
    shl2.64 v0
    return.64
}

.function u64 shl_u64_by_32(u64 a0) {
    lda a0
    movi.64 v0, 80
    shl2.64 v0
    shl2.64 v0
    return.64
}

.function i64 ashr_i64_zero(i64 a0) {
    lda.64 a0
    movi.64 v0, 31
    ashr2.64 v0
    movi.64 v0, 39
    ashr2.64 v0
    return.64
}

.function u8 main1() {
    movi v0, 0xffffffff
    call.short shr_u32_zero, v0
    jnez failure_exit_1

    movi v0, 0xabcdefff
    call.short shr_u32_by_8, v0
    movi v1, 0xabcdef
    ucmp v1
    jnez failure_exit_2

    movi v0, 0xabcdabcd
    call.short shl_u32_zero, v0
    jnez failure_exit_3

    movi v0, 0xabcdef12
    call.short shl_u32_by_4, v0
    movi v1, 0xbcdef120
    ucmp v1
    jnez failure_exit_4

    movi v0, 0x7fffffff
    call.short ashr_i32_zero, v0
    jnez failure_exit_5

    movi v0, 0x80000000
    call.short ashr_i32_zero, v0
    movi v1, 0xffffffff
    ucmp v1
    jnez failure_exit_6

    movi v0, 0xabcdef12
    call.short ashr_i32_by_24, v0
    movi v1, 0xffffffab
    ucmp v1
    jnez failure_exit_7

    movi.64 v0, 0xffffffffffffffff
    call.short shl_u64_zero, v0
    movi.64 v1, 0
    cmp.64 v1
    jnez failure_exit_8

    movi.64 v0, 0x123456789abcdeff
    call.short shl_u64_by_32, v0
    movi.64 v1, 0x9abcdeff00000000
    cmp.64 v1
    jnez failure_exit_9

    movi.64 v0, 0x7fffffffffffffff
    call.short ashr_i64_zero, v0
    movi.64 v1, 0
    cmp.64 v1
    jnez failure_exit_10

    movi.64 v0, 0x8000000000000000
    call.short ashr_i64_zero, v0
    not.64
    movi.64 v1, 0
    cmp.64 v1
    jnez failure_exit_11

    ldai 0
    return

failure_exit_1:
    ldai 1
    return
failure_exit_2:
    ldai 2
    return
failure_exit_3:
    ldai 3
    return
failure_exit_4:
    ldai 4
    return
failure_exit_5:
    ldai 5
    return
failure_exit_6:
    ldai 6
    return
failure_exit_7:
    ldai 7
    return
failure_exit_8:
    ldai 8
    return
failure_exit_9:
    ldai 9
    return
failure_exit_10:
    ldai 10
    return
failure_exit_11:
    ldai 11
    return
} 