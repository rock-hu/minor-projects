# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#! CHECKER      Monomorphic call
#! RUN          options: "--compiler-enable-jit=true --compiler-hotness-threshold=4 --compiler-profiling-threshold=2 --no-async-jit=true", entry: "Test1::main", result: 20
#! EVENT        /InterpProfiling,START,Test1::__noinline__call_func,1/
#! EVENT_NEXT   /Inline,Test1::__noinline__call_func,B1::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! EVENT_NOT    /Deoptimization,.*/

#! CHECKER      Monomorphic call AOT PGO
#! RUN_PGO_PROF entry: "Test1::main", result: 20
#! EVENT        /InterpProfiling,START,Test1::__noinline__call_func,1/
#! RUN_PGO_PAOC options: "--compiler-regex=[[:alpha:]]+1\\..*[cn]"
#! EVENT_NEXT   /Inline,Test1::__noinline__call_func,B1::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! RUN          entry: "Test1::main", result: 20
#! EVENT_NOT    /Deoptimization,.*/

.record Test1 {}
.record A1 {}
.record B1 <extends=A1> {}

.function i32 A1.func(A1 a0) {
    ldai 1
    return
}

.function i32 B1.func(B1 a0) {
    ldai 2
    return
}

.function i32 Test1.__noinline__call_func(A1 a0) {
    call.virt A1.func, a0
    return
}

.function i32 Test1.main() {
    newobj v0, B1
    movi v1, 10
    movi v2, 0
    movi v3, 0
loop:
    lda v1
    jeq v2, exit
    call.short Test1.__noinline__call_func, v0
    add2 v3
    sta v3
    inci v2, 1
    jmp loop
exit:
    lda v3
    return
}

#! CHECKER      Miss in monomorphic call
#! RUN          options: "--compiler-enable-jit=true --compiler-hotness-threshold=2 --compiler-profiling-threshold=0 --no-async-jit=true", entry: "Test1::main_miss", result: 5
#! EVENT        /InterpProfiling,START,Test1::__noinline__call_func,1/
#! EVENT_NEXT   /Inline,Test1::__noinline__call_func,A1::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! EVENT_NEXT   /Compilation,Test1::__noinline__call_func,.*,COMPILED/
#! EVENT_NEXT   /Deoptimization,Test1::__noinline__call_func.*/

#! CHECKER      Miss in monomorphic call AOT PGO
#! RUN_PGO_PROF entry: "Test1::main", result: 20
#! EVENT        /InterpProfiling,START,Test1::__noinline__call_func,1/
#! RUN_PGO_PAOC options: "--compiler-regex=[[:alpha:]]+1\\..*[cns]"
#! EVENT_NEXT   /Inline,Test1::__noinline__call_func,B1::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! EVENT_NEXT   /Compilation,Test1::__noinline__call_func,.*,COMPILED/
#! RUN          entry: "Test1::main_miss", result: 5
#! EVENT_NEXT   /Deoptimization,Test1::__noinline__call_func.*/

.function i32 Test1.main_miss() {
    newobj v4, A1
    newobj v5, B1
    movi v3, 0

    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v5
    add2 v3

    return
}

#! CHECKER           Miss in monomorphic call and recompile with polymorphic
#! RUN               options: "--compiler-enable-jit=true --compiler-hotness-threshold=2 --compiler-profiling-threshold=0 --no-async-jit=true", entry: "Test1::main_recompile", result: 10
#! EVENT             /InterpProfiling,START,Test1::__noinline__call_func,1/
#! EVENT_NEXT        /Inline,Test1::__noinline__call_func,A1::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! EVENT_NEXT        /Compilation,Test1::__noinline__call_func,.*,COMPILED/
#! EVENT_NEXT        /Deoptimization,Test1::__noinline__call_func.*/
#! EVENT_NEXT        /Inline,Test1::__noinline__call_func,A1::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT_NEXT        /Inline,Test1::__noinline__call_func,B1::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT_NEXT        /Compilation,Test1::__noinline__call_func,.*,COMPILED/
#! EVENT_NEXT_NOT    /Deoptimization,.*/

#! CHECKER           Miss in monomorphic call and recompile with polymorphic AOT PGO
#! RUN_PGO_PROF      entry: "Test1::main_recompile_prof", result: 3
#! EVENT             /InterpProfiling,START,Test1::__noinline__call_func,1/
#! RUN_PGO_PAOC      options: "--compiler-regex=[[:alpha:]]+1\\..*"
#! EVENT_NEXT        /Inline,Test1::__noinline__call_func,A1::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! EVENT_NEXT        /Compilation,Test1::__noinline__call_func,.*,COMPILED/
#! RUN               entry: "Test1::main_recompile", result: 10
#! EVENT             "AotEntrypointFound,Test1::__noinline__call_func"
#! EVENT_NEXT        /Deoptimization,Test1::__noinline__call_func.*/

.function i32 Test1.main_recompile_prof() {
    newobj v4, A1
    newobj v5, B1
    movi v3, 0

    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3

    return
}

.function i32 Test1.main_recompile() {
    newobj v4, A1
    newobj v5, B1
    movi v3, 0

    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v5
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test1.__noinline__call_func, v5
    add2 v3

    return
}

#! CHECKER           Inline monomorphic nested call
#! RUN               options: "--compiler-enable-jit=true --compiler-hotness-threshold=4 --compiler-profiling-threshold=2 --no-async-jit=true", entry: "Test2::main", result: 50
#! EVENT             /InterpProfiling,START,Test2::__noinline__call_func,1/
#! EVENT             /InterpProfiling,START,B2::func,1/
#! EVENT_NEXT        /Inline,B2::func,C2::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! EVENT_NEXT        /Inline,Test2::__noinline__call_func,B2::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! EVENT_NEXT_NOT    /Deoptimization,.*/

#! CHECKER           Inline monomorphic nested call AOT PGO
#! RUN_PGO_PROF      entry: "Test2::main", result: 50
#! EVENT             /InterpProfiling,START,Test2::__noinline__call_func,1/
#! EVENT             /InterpProfiling,START,B2::func,1/
#! RUN_PGO_PAOC      options: "--compiler-regex=[[:alpha:]]+2\\..*"
#! EVENT_NEXT        /Inline,B2::func,C2::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! EVENT_NEXT        /Inline,Test2::__noinline__call_func,B2::func,.*VIRTUAL_MONOMORPHIC,SUCCESS/
#! RUN               entry: "Test2::main", result: 50
#! EVENT_NEXT_NOT    /Deoptimization,.*/

.record Test2 {}
.record A2 {}
.record B2 <extends=A2> {}
.record C2 <extends=B2> {}

.function i32 A2.func(A2 a0, A2 a1) {
    ldai 1
    return
}

.function i32 B2.func(B2 a0, A2 a1) {
    call.virt A2.func, a1, a1
    addi 2
    return
}

.function i32 C2.func(C2 a0, A2 a1) {
    ldai 3
    return
}

.function i32 Test2.__noinline__call_func(A2 a0, A2 a1) {
    call.virt A2.func, a0, a1
    return
}

.function i32 Test2.main() {
    newobj v0, B2
    newobj v4, C2
    movi v1, 10
    movi v2, 0
    movi v3, 0
loop:
    lda v1
    jeq v2, exit
    call.short Test2.__noinline__call_func, v0, v4
    add2 v3
    sta v3
    inci v2, 1
    jmp loop
exit:
    lda v3
    return
}

#! CHECKER           Inline polymorphic call
#! RUN               options: "--compiler-enable-jit=true --compiler-hotness-threshold=6 --compiler-profiling-threshold=2 --no-async-jit=true", entry: "Test3::main", result: 60
#! EVENT             /InterpProfiling,START,Test3::__noinline__call_func,1/
#! EVENT             /Inline,Test3::__noinline__call_func,A3::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test3::__noinline__call_func,B3::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test3::__noinline__call_func,C3::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT_NEXT        /Compilation,Test3::__noinline__call_func,.*,COMPILED/
#! EVENT_NOT         /Deoptimization,.*/
#! METHOD            "Test3::__noinline__call_func"
#! PASS_AFTER        "Inline"
#! INST_NOT          "CallVirtual.Inlined"
#! INST_NOT          "ReturnInlined"

#! CHECKER           Inline polymorphic call AOT PGO
#! RUN_PGO_PROF      entry: "Test3::main", result: 60
#! EVENT             /InterpProfiling,START,Test3::__noinline__call_func,1/
#! RUN_PGO_PAOC      options: "--compiler-regex=[[:alpha:]]+3\\..*"
#! EVENT             /Inline,Test3::__noinline__call_func,A3::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test3::__noinline__call_func,B3::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test3::__noinline__call_func,C3::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT_NEXT        /Compilation,Test3::__noinline__call_func,.*,COMPILED/
#! METHOD            "Test3::__noinline__call_func"
#! PASS_AFTER        "Inline"
#! INST_NOT          "CallVirtual.Inlined"
#! INST_NOT          "ReturnInlined"
#! RUN               entry: "Test3::main", result: 60
#! EVENT_NOT         /Deoptimization,.*/

.record Test3 {}
.record A3 {}
.record B3 <extends=A3> {}
.record C3 <extends=A3> {}

.function i32 A3.func(A3 a0) {
    ldai 1
    return
}

.function i32 B3.func(B3 a0) {
    ldai 2
    return
}

.function i32 C3.func(C3 a0) {
    ldai 3
    return
}

.function i32 Test3.__noinline__call_func(A3 a0) {
    call.virt A3.func, a0
    return
}

.function i32 Test3.main() {
    newobj v4, A3
    newobj v5, B3
    newobj v6, C3
    
    movi v0, 0
    movi v1, 10
    movi v3, 0
loop:
    lda v1
    jeq v0, exit
    call.short Test3.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test3.__noinline__call_func, v5
    add2 v3
    sta v3
    call.short Test3.__noinline__call_func, v6
    add2 v3
    sta v3
    inci v0, 1
    jmp loop
exit:
    lda v3
    return
}

#! CHECKER           Inline megamorphic call
#! RUN               options: "--compiler-enable-jit=true --compiler-hotness-threshold=8 --compiler-profiling-threshold=2 --no-async-jit=true", entry: "Test3::main2", result: 150
#! EVENT             /InterpProfiling,START,Test3::__noinline__call_func,1/
#! EVENT_NEXT        /Inline,Test3::__noinline__call_func,.*VIRTUAL_POLYMORPHIC,FAIL_MEGAMORPHIC/
#! EVENT_NEXT        /Compilation,Test3::__noinline__call_func,.*,COMPILED/
#! EVENT_NOT         /Inline,Test3::__noinline__call_func,.*VIRTUAL_.*,SUCCESS/
#! EVENT_NOT         /Deoptimization,.*/

#! CHECKER           Inline megamorphic call AOT PGO
#! SKIP_IF           true # TODO fix profdata write for Test3::__noinline__call_func
#! RUN_PGO_PROF      entry: "Test3::main2", result: 150
#! EVENT             /InterpProfiling,START,Test3::__noinline__call_func,1/
#! RUN_PGO_PAOC      options: "--compiler-regex=[[:alpha:]]+3\\..*"
#! EVENT_NEXT        /Inline,Test3::__noinline__call_func,.*VIRTUAL_POLYMORPHIC,FAIL_MEGAMORPHIC/
#! EVENT_NEXT        /Compilation,Test3::__noinline__call_func,.*,COMPILED/
#! EVENT_NOT         /Inline,Test3::__noinline__call_func,.*VIRTUAL_.*,SUCCESS/
#! RUN               entry: "Test3::main2", result: 150
#! EVENT_NOT         /Deoptimization,.*/

.record D3 <extends=A3> {}
.record E3 <extends=A3> {}

.function i32 D3.func(D3 a0) {
    ldai 4
    return
}

.function i32 E3.func(E3 a0) {
    ldai 5
    return
}

.function i32 Test3.main2() {
    newobj v4, A3
    newobj v5, B3
    newobj v6, C3
    newobj v7, D3
    newobj v8, E3
    
    movi v0, 0
    movi v1, 10
    movi v3, 0
loop:
    lda v1
    jeq v0, exit
    call.short Test3.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test3.__noinline__call_func, v5
    add2 v3
    sta v3
    call.short Test3.__noinline__call_func, v6
    add2 v3
    sta v3
    call.short Test3.__noinline__call_func, v7
    add2 v3
    sta v3
    call.short Test3.__noinline__call_func, v8
    add2 v3
    sta v3
    inci v0, 1
    jmp loop
exit:
    lda v3
    return
}

#! CHECKER           Inline polymorphic call with runtime call
#! RUN               options: "--compiler-enable-jit=true --compiler-hotness-threshold=6 --compiler-profiling-threshold=2 --no-async-jit=true", entry: "Test4::main", result: 60
#! EVENT             /InterpProfiling,START,Test4::__noinline__call_func,1/
#! EVENT             /Inline,Test4::__noinline__call_func,A4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test4::__noinline__call_func,B4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test4::__noinline__call_func,C4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT_NEXT        /Compilation,Test4::__noinline__call_func,.*,COMPILED/
#! EVENT_NOT         /Deoptimization,.*/
#! METHOD            "Test4::__noinline__call_func"
#! PASS_AFTER        "Inline"
#! INST              /CallVirtual.Inlined.*C4::func/
#! INST              /CallVirtual.Inlined.*C4::func/
#! INST              "ReturnInlined"
#! INST              "ReturnInlined"

#! CHECKER           Inline polymorphic call with runtime call AOT PGO
#! RUN_PGO_PROF      entry: "Test4::main", result: 60
#! EVENT             /InterpProfiling,START,Test4::__noinline__call_func,1/
#! RUN_PGO_PAOC      options: "--compiler-regex=[[:alpha:]]+4\\..*"
#! EVENT             /Inline,Test4::__noinline__call_func,A4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test4::__noinline__call_func,B4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test4::__noinline__call_func,C4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT_NEXT        /Compilation,Test4::__noinline__call_func,.*,COMPILED/
#! EVENT_NOT         /Deoptimization,.*/
#! RUN               entry: "Test4::main", result: 60
#! METHOD            "Test4::__noinline__call_func"
#! PASS_AFTER        "Inline"
#! INST              /CallVirtual.Inlined.*C4::func/
#! INST              "ReturnInlined"

.record Test4 {}
.record A4 {}
.record B4 <extends=A4> {}
.record C4 <extends=A4> {}

.function i32 A4.func(A4 a0) {
    newobj v0, A4
    ldai 1
    return
}

.function i32 B4.func(B4 a0) {
    ldai 2
    return
}

.function i32 C4.func(C4 a0) {
    newobj v0, A4
    ldai 3
    return
}

.function i32 Test4.__noinline__call_func(A4 a0) {
    call.virt A4.func, a0
    return
}

.function i32 Test4.main() {
    newobj v4, A4
    newobj v5, B4
    newobj v6, C4
    
    movi v0, 0
    movi v1, 10
    movi v3, 0
loop:
    lda v1
    jeq v0, exit
    call.short Test4.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test4.__noinline__call_func, v5
    add2 v3
    sta v3
    call.short Test4.__noinline__call_func, v6
    add2 v3
    sta v3
    inci v0, 1
    jmp loop
exit:
    lda v3
    return
}

#! CHECKER           Miss in polymorphic call with runtime call
#! RUN               options: "--compiler-enable-jit=true --compiler-hotness-threshold=3 --compiler-profiling-threshold=0 --no-async-jit=true", entry: "Test4::main_miss", result: 10
#! EVENT             /InterpProfiling,START,Test4::__noinline__call_func,1/
#! EVENT             /Inline,Test4::__noinline__call_func,A4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test4::__noinline__call_func,B4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test4::__noinline__call_func,C4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT_NEXT        /Compilation,Test4::__noinline__call_func,.*,COMPILED/
#! EVENT_NEXT        /Deoptimization,Test4::__noinline__call_func.*/

#! CHECKER           Miss in polymorphic call with runtime call AOT PGO
#! RUN_PGO_PROF      entry: "Test4::main", result: 60
#! EVENT             /InterpProfiling,START,Test4::__noinline__call_func,1/
#! RUN_PGO_PAOC      options: "--compiler-regex=[[:alpha:]]+4\\..*"
#! EVENT             /Inline,Test4::__noinline__call_func,A4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test4::__noinline__call_func,B4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test4::__noinline__call_func,C4::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! RUN               entry: "Test4::main_miss", result: 10
#! EVENT_NEXT        /AotEntrypointFound,Test4::__noinline__call_func/
#! EVENT_NEXT        /Deoptimization,Test4::__noinline__call_func.*/

.record D4 <extends=A4> {}

.function i32 D4.func(D4 a0) {
    ldai 4
    return
}

.function i32 Test4.main_miss() {
    newobj v4, A4
    newobj v5, B4
    newobj v6, C4
    newobj v7, D4

    movi v3, 0

    call.short Test4.__noinline__call_func, v4
    add2 v3
    sta v3
    call.short Test4.__noinline__call_func, v5
    add2 v3
    sta v3
    call.short Test4.__noinline__call_func, v6
    add2 v3
    sta v3
    call.short Test4.__noinline__call_func, v7
    add2 v3
    
    return
}

# This is regression test for bug when we create Phi Instruction in polymorphic inlining for void call.
# Void call hasn't users, thus, created phi instruction hasn't inputs, that is incorrect.
#! CHECKER           Inline polymorphic void call
#! RUN               options: "--compiler-enable-jit=true --compiler-hotness-threshold=5 --compiler-profiling-threshold=1 --no-async-jit=true", entry: "Test5::main"
#! EVENT             /InterpProfiling,START,Test5::__noinline__call_func,1/
#! EVENT             /Inline,Test5::__noinline__call_func,A5::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test5::__noinline__call_func,B5::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT             /Inline,Test5::__noinline__call_func,C5::func,.*VIRTUAL_POLYMORPHIC,SUCCESS/
#! EVENT_NEXT        /Compilation,Test5::__noinline__call_func,.*,COMPILED/
#! EVENT_NOT         /Deoptimization,.*/
#! METHOD            "Test5::__noinline__call_func"
#! PASS_AFTER        "Inline"
#! INST_NOT          "CallVirtual.Inlined"

.record Test5 {}
.record A5 {}
.record B5 <extends=A5> {}
.record C5 <extends=B5> {}

.function void A5.func(A5 a0) {
    return.void
}

.function void B5.func(B5 a0) {
    return.void
}

.function void C5.func(C5 a0) {
    return.void
}

.function i32 Test5.__noinline__call_func(A5 a0) {
    call.virt A5.func, a0
    ldai 0
    return
}

.function i32 Test5.main() {
    newobj v4, A5
    newobj v5, B5
    newobj v6, C5
    
    call.short Test5.__noinline__call_func, v4
    call.short Test5.__noinline__call_func, v5
    call.short Test5.__noinline__call_func, v6
    call.short Test5.__noinline__call_func, v4
    call.short Test5.__noinline__call_func, v5
    call.short Test5.__noinline__call_func, v6
    return
}