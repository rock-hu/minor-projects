# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

.record A {}
.record B {}

#! CHECKER      IsInstance cannot be replaced by true for nullable object.
#! RUN          force_jit: true, options: "--compiler-inlining=false", entry: "_GLOBAL::main1"
#! METHOD       "_GLOBAL::main1"
#! PASS_AFTER   "Codegen"
#! INST_COUNT   "IsInstance", 2

.function A test1(u1 a0) {
    lda a0
    jnez create
    lda.null
    return.obj
create:
    newobj v0, A
    lda.obj v0
    return.obj
}

.function u1 main1() {
    movi v0, 0
    call.short test1, v0
    isinstance A
    jnez exit_failure

    movi v0, 1
    call.short test1, v0
    isinstance A
    jeqz exit_failure

    ldai 0
    return
exit_failure:
    ldai 1
    return
}

#! CHECKER      IsInstance inputs from both branches have type A, replace with true.
#! RUN          force_jit: true, options: "--compiler-inlining=false", entry: "_GLOBAL::main2"
#! METHOD       "_GLOBAL::test2"
#! PASS_AFTER   "IrBuilder"
#! INST         "IsInstance"
#! PASS_AFTER   "ChecksElimination"
#! INST_NOT     "IsInstance"

.function u1 test2(u1 a0) {
    newobj v0, A
    newobj v1, A
    lda a0
    jnez load_second
    lda.obj v0
    jmp check
load_second:
    lda.obj v1
check:
    isinstance A
    return
}

.function u1 main2() {
    movi v0, 0
    call.short test2, v0
    jeqz exit_failure

    movi v0, 1
    call.short test2, v0
    jeqz exit_failure

    ldai 0
    return
exit_failure:
    ldai 1
    return
}

#! CHECKER      Not applied, IsInstance result is different for two branches.
#! RUN          force_jit: true, options: "--compiler-inlining=false", entry: "_GLOBAL::main3"
#! METHOD       "_GLOBAL::test3"
#! PASS_AFTER   "Codegen"
#! INST         "IsInstance"

.function u1 test3(u1 a0) {
    newobj v0, A
    newobj v1, B
    lda a0
    jnez load_second
    lda.obj v0
    jmp check
load_second:
    lda.obj v1
check:
    isinstance A
    return
}

.function u1 main3() {
    movi v0, 0
    call.short test3, v0
    jeqz exit_failure

    movi v0, 1
    call.short test3, v0
    jnez exit_failure

    ldai 0
    return
exit_failure:
    ldai 1
    return
}
