# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# struct A { int[] arr}
# int main() {
#    A a;
#    a.arr = new int[5];
#    for (int i = 0; i < 5; i++) {
#       a.arr[i] = i;
#    }
#    if (sum(a) != 15) {
#       return 1;
#    }
#    return 0;
# }
#
# int sum(A a) {
#     int sum = 0;
#     int[] arr = a.arr;
#     for (int i = 0; i < 5; i++) {
#         sum += arr[i];
#     }
#     return sum;
# }

#! CHECKER      Check that NullCheck will be moved out of loop
#! RUN          options: "--compiler-hotness-threshold=0 --no-async-jit=true --compiler-regex=.*sum.*", entry: "_GLOBAL::main"
#! METHOD       "sum"
#! PASS_AFTER   "IrBuilder"
#! INST_COUNT   "NullCheck", 2
#! INST_COUNT   "BoundsCheck", 1
#! PASS_AFTER   "ChecksElimination"
#! # Check that graph have 1 NullCheck and 1 NullCheck with deoptimize flag
#! INST_COUNT   "NullCheck", 2
#! INST_COUNT   "NullCheck D", 1
#! INST_NOT     "BoundsCheck"
#! INST_COUNT   "DeoptimizeIf", 1

#! CHECKER      Check that AOT supports NullCheck with deoptimize
#! SKIP_IF      @architecture == "arm32"
#! RUN_PAOC     options: "--compiler-regex=.*sum.*"
#! METHOD       "sum"
#! PASS_AFTER   "IrBuilder"
#! INST_COUNT   "NullCheck", 2
#! INST_COUNT   "BoundsCheck", 1
#! PASS_AFTER   "ChecksElimination"
#! # Check that graph have 1 NullCheck and 1 NullCheck with deoptimize flag
#! INST_COUNT   "NullCheck", 2
#! INST_COUNT   "NullCheck D", 1
#! INST_NOT     "BoundsCheck"
#! INST_COUNT   "DeoptimizeIf", 1
#! RUN          entry: "_GLOBAL::main"

#! CHECKER      Check that LLVM AOT supports NullCheck with deoptimize
#! SKIP_IF      @architecture == "arm32"
#! RUN_LLVM     options: "--compiler-regex=.*sum.*"
#! METHOD       "sum"
#! PASS_AFTER   "IrBuilder"
#! INST_COUNT   "NullCheck", 2
#! INST_COUNT   "BoundsCheck", 1
#! PASS_AFTER   "ChecksElimination"
#! # Check that graph have 1 NullCheck and 1 NullCheck with deoptimize flag
#! INST_COUNT   "NullCheck", 2
#! INST_COUNT   "NullCheck D", 1
#! INST_NOT     "BoundsCheck"
#! INST_COUNT   "DeoptimizeIf", 1
#! RUN          entry: "_GLOBAL::main"

.record A {
    i32[] arr
}
.function i32 sum(A a0) {
    movi v0, 0
    movi v1, 0
    ldobj.obj a0, A.arr
    sta.obj v2
sum_begin:
    ldai 5
    jle v0, sum_exit

    lda v0
    ldarr v2
    add2 v1
    sta v1

    inci v0, 1
    jmp sum_begin
sum_exit:
    lda v1
    return
}

.function u1 main() {
    newobj v2, A
    movi v4, 5
    newarr v1, v4, i32[]
    movi v0, 0
init_begin:
    ldai 5
    jeq v0, init_exit

    lda v0
    starr v1, v0

    inci v0, 1
    jmp init_begin
init_exit:
    lda.obj v1
    stobj.obj v2, A.arr
    call.short sum, v2
    sta v0
    ldai 10
    jne v0, error
    ldai 0
    return
error:
    ldai 1
    return

}
