# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[project]
# dynamic = ["version"]
name = "taihe"
description = "Language-neutral API tooling"
requires-python = ">=3.10"
dependencies = [
    "antlr4-python3-runtime>=4.13.2",
    "typing-extensions>=4.13.2",
]
version = "0.34.1"

[dependency-groups]
dev = [
    "black>=25.1.0",
    "coverage>=7.8.0",
    "pyright>=1.1.400",
    "pytest>=8.3.5",
    "removestar>=1.5.2",
    "ruff>=0.11.6",
]

[[tool.uv.index]]
url = "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/"
default = true

### Build System ###

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project.scripts]
taihec      = "taihe.cli.compiler:main"
taihe-tryit = "taihe.cli.tryit:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
search_parent_directories = true
local_scheme = "dirty-tag"
version_scheme = "python-simplified-semver"

[tool.hatch.build.hooks.vcs]
version-file = "taihe/_version.py"

### Linting ###

[tool.black]
exclude = "(taihe/parse/antlr|taihe/_version.py)"
target-version = ['py310']

[tool.pyright]
include = ["taihe"]
exclude = ["taihe/parse/antlr"]
pythonVersion = '3.10'

# strict = ["taihe"]  # Maybe later: codegen
strict = ["taihe/cli", "taihe/driver", "taihe/parse", "taihe/semantics", "taihe/utils"]

### Linting (Ruff Only) ###

[tool.ruff]
target-version = 'py310'

# Don't check generated code.
exclude = ["taihe/parse/antlr/*.py", "taihe/_version.py"]

# See all rules at https://beta.ruff.rs/docs/rules/
lint.select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "F", # Pyflakes
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "I", # isort
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "UP", # pyupgrade
    "PT", # flake8-pytest-style
    "RUF", # Ruff-specific rules
]

lint.ignore = [
    "E501", # "Line too long"
    # -> "line length already regulated by black"
    "PT011", # "pytest.raises() should specify expected exception"
    # -> "would imply to update tests every time you update exception message"
    "SIM108",
    "F541", # "f-string without any placeholders"
    "E731",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107", # "Missing docstring in public function too restrictive"
    "SIM117", # allow multiple `with` statements in code generator
    "TC001",
    "TC002",
    "TC003", # "unnecessary to move to a TYPE_CHECKING block"
    "TC006",
    "B007",
]

[tool.ruff.lint.pydocstyle]
# Automatically disable rules that are incompatible with Google docstring convention
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
# Pydantic needs to be able to evaluate types at runtime
# see https://pypi.org/project/flake8-type-checking/ for flake8-type-checking documentation
# see https://beta.ruff.rs/docs/settings/#flake8-type-checking-runtime-evaluated-base-classes for ruff documentation
