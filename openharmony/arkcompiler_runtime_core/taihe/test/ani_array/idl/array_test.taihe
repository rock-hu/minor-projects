/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function SumArray(nums: Array<i32>, base: i32): i32;

function GetArrayValue(nums: Array<i64>, idx: i32): i64;

function ToStingArray(nums: Array<i32>): Array<String>;

function MakeIntArray(value: i32, num: i32): Array<i32>;

enum Color: String {
    RED = "Red",
    GREEN = "Green",
    BLUE = "Blue",
}
function MakeEnumArray(value: Color, num: i32): Array<Color>;

function MakeRecordArray(key: String, val: i64, num: i32): Array<@record Map<String, i64>>;

struct Data {
    a: String;
    b: String;
    c: i32;
}
function MakeStructArray(a: String, b: String, c: i32, num: i32): Array<Data>;
function MakeIntArray2(value: Array<i32>, num: i32): Array<Array<i32>>;
function ChangeEnumArray(value: Array<Color>, color: Color): Array<Color>;
function ChangeRecordArray(value: Array<@record Map<String, i64>>, k: String, v: i64): Array<@record Map<String, i64>>;
function ChangeStructArray(value: Array<Data>, a: String, b: String, c: i32): Array<Data>;
@gen_async("fetchBinaryData")
@gen_promise("fetchBinaryData")
function FetchBinaryDataSync(num:i32): Array<f32>;
function MakeStructArrayArray(a: String, b: String, c: i32, num1: i32, num2: i32): Array<Array<Data>>;

interface ArrayI8 {
    ArrayI8Value(value: i8): Array<i8>;
}
function GetArrayI8(): ArrayI8;

interface ArrayI16 {
    ArrayI16Value(value: i16): Array<i16>;
}
function GetArrayI16(): ArrayI16;

interface ArrayI32 {
    ArrayI32Value(value: i32): Array<i32>;
}
function GetArrayI32(): ArrayI32;

interface ArrayI64 {
    ArrayI64Value(value: i64): Array<i64>;
}
function GetArrayI64(): ArrayI64;

interface ArrayF32 {
    ArrayF32Value(value: f32): Array<f32>;
}
function GetArrayF32(): ArrayF32;

interface ArrayF64 {
    ArrayF64Value(value: f64): Array<f64>;
}
function GetArrayF64(): ArrayF64;

interface ArrayString {
    ArrayStringValue(value: String): Array<String>;
}
function GetArrayString(): ArrayString;

interface ArrayBool {
    ArrayBoolValue(value: bool): Array<bool>;
}
function GetArrayBool(): ArrayBool;

interface ArrayEnum {
    ArrayEnumValue(value: String): Array<Color>;
}
function GetArrayEnum(): ArrayEnum;

interface ArrayRecord {
    ArrayRecordValue(valStr: String, valLong: i64): Array<@record Map<String, i64>>;
}
function GetArrayRecord(): ArrayRecord;

interface ArrayRecordStrI8 {
    ArrayRecordValue(valStr: String, valNum: i8): Array<@record Map<String, i8>>;
}
function GetArrayRecordStrI8(): ArrayRecordStrI8;

interface ArrayRecordStrF32 {
    ArrayRecordValue(valStr: String, valNum: f32): Array<@record Map<String, f32>>;
}
function GetArrayRecordStrF32(): ArrayRecordStrF32;

interface ArrayRecordStrF64 {
    ArrayRecordValue(valStr: String, valNum: f64): Array<@record Map<String, f64>>;
}
function GetArrayRecordStrF64(): ArrayRecordStrF64;

interface ArrayRecordStrBool {
    ArrayRecordValue(valStr: String, valNum: bool): Array<@record Map<String, bool>>;
}
function GetArrayRecordStrBool(): ArrayRecordStrBool;

union UnionA {
    color: Color;
    name: String;
}

interface ArrayUnion {
    ArrayValue(value: String): Array<UnionA>;
}
function GetArrayUnion(): ArrayUnion;

interface ArrayPromiseI8 {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataI8(): Array<i8>;
}
function GetArrayPromiseI8(): ArrayPromiseI8;

interface ArrayPromiseI16 {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataI16(): Array<i16>;
}
function GetArrayPromiseI16(): ArrayPromiseI16;

interface ArrayPromiseI32 {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataI32(): Array<i32>;
}
function GetArrayPromiseI32(): ArrayPromiseI32;

interface ArrayPromiseI64 {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataI64(): Array<i64>;
}
function GetArrayPromiseI64(): ArrayPromiseI64;

interface ArrayPromiseF32 {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataF32(): Array<f32>;
}
function GetArrayPromiseF32(): ArrayPromiseF32;

interface ArrayPromiseF64 {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataF64(): Array<f64>;
}
function GetArrayPromiseF64(): ArrayPromiseF64;

interface ArrayPromiseString {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataString(): Array<String>;
}
function GetArrayPromiseString(): ArrayPromiseString;

interface ArrayPromiseBool {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataBool(): Array<bool>;
}
function GetArrayPromiseBool(): ArrayPromiseBool;

interface ArrayPromiseU8 {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataPro(): @typedarray Array<u8>;
}
function GetArrayPromiseU8(): ArrayPromiseU8;

interface ArrayPromiseU16 {
    @gen_async("fetchData")
    @gen_promise("fetchData")
    fetchDataPro(): @typedarray Array<u16>;
}
function GetArrayPromiseU16(): ArrayPromiseU16;

interface ArrayNest {
    ArrayNestI8(param: i8): Array<Array<i8>>;
    ArrayNestI16(param: i16): Array<Array<i16>>;
    ArrayNestF32(param: f32): Array<Array<f32>>;
    ArrayNestStrng(param: String): Array<Array<String>>;
    ArrayNestBool(param: bool): Array<Array<bool>>;
}
function GetArrayNest(): ArrayNest;

interface ArrayOptional {
    ArrayOpt(name: String): Optional<Array<String>>;
}
function GetArrayOptional(): ArrayOptional;