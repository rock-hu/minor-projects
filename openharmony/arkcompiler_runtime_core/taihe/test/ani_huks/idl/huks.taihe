/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function generateKey(keyAlias: String, options: HuksOptions): HuksResult;
function generateKeyItem(keyAlias: String, options: HuksOptions): void;
function deleteKey(keyAlias: String, options: HuksOptions): HuksResult;
function deleteKeyItem(keyAlias: String, options: HuksOptions): void;
function importKey(keyAlias: String, options: HuksOptions): HuksResult;
function importKeyItem(keyAlias: String, options: HuksOptions): void;
function importWrappedKeyItem(keyAlias: String, wrappingKeyAlias: String, options: HuksOptions): void;
function exportKey(keyAlias: String, options: HuksOptions): HuksResult;
function exportKeyItem(keyAlias: String, options: HuksOptions): HuksReturnResult;
function getKeyProperties(keyAlias: String, options: HuksOptions): HuksResult;
function getKeyItemProperties(keyAlias: String, options: HuksOptions): HuksReturnResult;
function isKeyExist(keyAlias: String, options: HuksOptions): bool;
function isKeyItemExist(keyAlias: String, options: HuksOptions): bool;
function hasKeyItem(keyAlias: String, options: HuksOptions): bool;
function init(keyAlias: String, options: HuksOptions): HuksHandle;
function initSession(keyAlias: String, options: HuksOptions): HuksSessionHandle;
function update(handle: f64, token: Optional<Array<u8>>, options: HuksOptions): HuksResult;
function updateSession(handle: f64, options: HuksOptions, token: Optional<Array<u8>>): HuksReturnResult;
function finish(handle: f64, options: HuksOptions): HuksResult;
function finishSession(handle: f64, options: HuksOptions, token: Optional<Array<u8>>): HuksReturnResult;
function abort(handle: f64, options: HuksOptions): HuksResult;
function abortSession(handle: f64, options: HuksOptions): void;
function attestKeyItem(keyAlias: String, options: HuksOptions): HuksReturnResult;
function anonAttestKeyItem(keyAlias: String, options: HuksOptions): HuksReturnResult;

function getSdkVersion(options: HuksOptions): String;
function listAliases(options: HuksOptions): HuksListAliasesReturnResult;

union HuksParamValue {
    booleanValue: bool;
    numberValue: f64;
    bigintValue: i64;
    bufferValue: Array<u8>;
}

struct HuksParam {
    tag: HuksTag;
    value: HuksParamValue;
}

struct HuksHandle {
    errorCode: f64;
    handle: f64;
    token: Optional<Array<u8>>;
}

struct HuksSessionHandle {
    handle: f64;
    challenge: Optional<Array<u8>>;
}

struct HuksOptions {
    properties: Optional<Array<HuksParam>>;
    inData: Optional<Array<u8>>;
}

struct HuksResult {
    errorCode: f64;
    outData: Optional<Array<u8>>;
    properties: Optional<Array<HuksParam>>;
    certChains: Optional<Array<String>>;
}

struct HuksReturnResult {
    outData: Optional<Array<u8>>;
    properties: Optional<Array<HuksParam>>;
    certChains: Optional<Array<String>>;
}

struct HuksListAliasesReturnResult {
    keyAliases: Array<String>;
}

enum HuksErrorCode: i32 {
    HUKS_SUCCESS = 0,
    HUKS_FAILURE = -1,
    HUKS_ERROR_BAD_STATE = -2,
    HUKS_ERROR_INVALID_ARGUMENT = -3,
    HUKS_ERROR_NOT_SUPPORTED = -4,
    HUKS_ERROR_NO_PERMISSION = -5,
    HUKS_ERROR_INSUFFICIENT_DATA = -6,
    HUKS_ERROR_BUFFER_TOO_SMALL = -7,
    HUKS_ERROR_INSUFFICIENT_MEMORY = -8,
    HUKS_ERROR_COMMUNICATION_FAILURE = -9,
    HUKS_ERROR_STORAGE_FAILURE = -10,
    HUKS_ERROR_HARDWARE_FAILURE = -11,
    HUKS_ERROR_ALREADY_EXISTS = -12,
    HUKS_ERROR_NOT_EXIST = -13,
    HUKS_ERROR_NULL_POINTER = -14,
    HUKS_ERROR_FILE_SIZE_FAIL = -15,
    HUKS_ERROR_READ_FILE_FAIL = -16,
    HUKS_ERROR_INVALID_PUBLIC_KEY = -17,
    HUKS_ERROR_INVALID_PRIVATE_KEY = -18,
    HUKS_ERROR_INVALID_KEY_INFO = -19,
    HUKS_ERROR_HASH_NOT_EQUAL = -20,
    HUKS_ERROR_MALLOC_FAIL = -21,
    HUKS_ERROR_WRITE_FILE_FAIL = -22,
    HUKS_ERROR_REMOVE_FILE_FAIL = -23,
    HUKS_ERROR_OPEN_FILE_FAIL = -24,
    HUKS_ERROR_CLOSE_FILE_FAIL = -25,
    HUKS_ERROR_MAKE_DIR_FAIL = -26,
    HUKS_ERROR_INVALID_KEY_FILE = -27,
    HUKS_ERROR_IPC_MSG_FAIL = -28,
    HUKS_ERROR_REQUEST_OVERFLOWS = -29,
    HUKS_ERROR_PARAM_NOT_EXIST = -30,
    HUKS_ERROR_CRYPTO_ENGINE_ERROR = -31,
    HUKS_ERROR_COMMUNICATION_TIMEOUT = -32,
    HUKS_ERROR_IPC_INIT_FAIL = -33,
    HUKS_ERROR_IPC_DLOPEN_FAIL = -34,
    HUKS_ERROR_EFUSE_READ_FAIL = -35,
    HUKS_ERROR_NEW_ROOT_KEY_MATERIAL_EXIST = -36,
    HUKS_ERROR_UPDATE_ROOT_KEY_MATERIAL_FAIL = -37,
    HUKS_ERROR_VERIFICATION_FAILED = -38,
    HUKS_ERROR_CHECK_GET_ALG_FAIL = -100,
    HUKS_ERROR_CHECK_GET_KEY_SIZE_FAIL = -101,
    HUKS_ERROR_CHECK_GET_PADDING_FAIL = -102,
    HUKS_ERROR_CHECK_GET_PURPOSE_FAIL = -103,
    HUKS_ERROR_CHECK_GET_DIGEST_FAIL = -104,
    HUKS_ERROR_CHECK_GET_MODE_FAIL = -105,
    HUKS_ERROR_CHECK_GET_NONCE_FAIL = -106,
    HUKS_ERROR_CHECK_GET_AAD_FAIL = -107,
    HUKS_ERROR_CHECK_GET_IV_FAIL = -108,
    HUKS_ERROR_CHECK_GET_AE_TAG_FAIL = -109,
    HUKS_ERROR_CHECK_GET_SALT_FAIL = -110,
    HUKS_ERROR_CHECK_GET_ITERATION_FAIL = -111,
    HUKS_ERROR_INVALID_ALGORITHM = -112,
    HUKS_ERROR_INVALID_KEY_SIZE = -113,
    HUKS_ERROR_INVALID_PADDING = -114,
    HUKS_ERROR_INVALID_PURPOSE = -115,
    HUKS_ERROR_INVALID_MODE = -116,
    HUKS_ERROR_INVALID_DIGEST = -117,
    HUKS_ERROR_INVALID_SIGNATURE_SIZE = -118,
    HUKS_ERROR_INVALID_IV = -119,
    HUKS_ERROR_INVALID_AAD = -120,
    HUKS_ERROR_INVALID_NONCE = -121,
    HUKS_ERROR_INVALID_AE_TAG = -122,
    HUKS_ERROR_INVALID_SALT = -123,
    HUKS_ERROR_INVALID_ITERATION = -124,
    HUKS_ERROR_INVALID_OPERATION = -125,
    HUKS_ERROR_INTERNAL_ERROR = -999,
    HUKS_ERROR_UNKNOWN_ERROR = -1000,
}

enum HuksExceptionErrCode: i32 {
    HUKS_ERR_CODE_PERMISSION_FAIL = 201,
    HUKS_ERR_CODE_NOT_SYSTEM_APP = 202,
    HUKS_ERR_CODE_ILLEGAL_ARGUMENT = 401,
    HUKS_ERR_CODE_NOT_SUPPORTED_API = 801,
    HUKS_ERR_CODE_FEATURE_NOT_SUPPORTED = 12000001,
    HUKS_ERR_CODE_MISSING_CRYPTO_ALG_ARGUMENT = 12000002,
    HUKS_ERR_CODE_INVALID_CRYPTO_ALG_ARGUMENT = 12000003,
    HUKS_ERR_CODE_FILE_OPERATION_FAIL = 12000004,
    HUKS_ERR_CODE_COMMUNICATION_FAIL = 12000005,
    HUKS_ERR_CODE_CRYPTO_FAIL = 12000006,
    HUKS_ERR_CODE_KEY_AUTH_PERMANENTLY_INVALIDATED = 12000007,
    HUKS_ERR_CODE_KEY_AUTH_VERIFY_FAILED = 12000008,
    HUKS_ERR_CODE_KEY_AUTH_TIME_OUT = 12000009,
    HUKS_ERR_CODE_SESSION_LIMIT = 12000010,
    HUKS_ERR_CODE_ITEM_NOT_EXIST = 12000011,
    HUKS_ERR_CODE_EXTERNAL_ERROR = 12000012,
    HUKS_ERR_CODE_CREDENTIAL_NOT_EXIST = 12000013,
    HUKS_ERR_CODE_INSUFFICIENT_MEMORY = 12000014,
    HUKS_ERR_CODE_CALL_SERVICE_FAILED = 12000015,
    HUKS_ERR_CODE_DEVICE_PASSWORD_UNSET = 12000016,
}

enum HuksKeyPurpose: i32 {
    HUKS_KEY_PURPOSE_ENCRYPT = 1,
    HUKS_KEY_PURPOSE_DECRYPT = 2,
    HUKS_KEY_PURPOSE_SIGN = 4,
    HUKS_KEY_PURPOSE_VERIFY = 8,
    HUKS_KEY_PURPOSE_DERIVE = 16,
    HUKS_KEY_PURPOSE_WRAP = 32,
    HUKS_KEY_PURPOSE_UNWRAP = 64,
    HUKS_KEY_PURPOSE_MAC = 128,
    HUKS_KEY_PURPOSE_AGREE = 256,
}

enum HuksKeyDigest: i32 {
    HUKS_DIGEST_NONE = 0,
    HUKS_DIGEST_MD5 = 1,
    HUKS_DIGEST_SM3 = 2,
    HUKS_DIGEST_SHA1 = 10,
    HUKS_DIGEST_SHA224 = 11,
    HUKS_DIGEST_SHA256 = 12,
    HUKS_DIGEST_SHA384 = 13,
    HUKS_DIGEST_SHA512 = 14,
}

enum HuksKeyPadding: i32 {
    HUKS_PADDING_NONE = 0,
    HUKS_PADDING_OAEP = 1,
    HUKS_PADDING_PSS = 2,
    HUKS_PADDING_PKCS1_V1_5 = 3,
    HUKS_PADDING_PKCS5 = 4,
    HUKS_PADDING_PKCS7 = 5,
    HUKS_PADDING_ISO_IEC_9796_2 = 6,
    HUKS_PADDING_ISO_IEC_9797_1 = 7,
}

enum HuksCipherMode: i32 {
    HUKS_MODE_ECB = 1,
    HUKS_MODE_CBC = 2,
    HUKS_MODE_CTR = 3,
    HUKS_MODE_OFB = 4,
    HUKS_MODE_CFB = 5,
    HUKS_MODE_CCM = 31,
    HUKS_MODE_GCM = 32,
}

enum HuksKeySize: i32 {
    HUKS_RSA_KEY_SIZE_512 = 512,
    HUKS_RSA_KEY_SIZE_768 = 768,
    HUKS_RSA_KEY_SIZE_1024 = 1024,
    HUKS_RSA_KEY_SIZE_2048 = 2048,
    HUKS_RSA_KEY_SIZE_3072 = 3072,
    HUKS_RSA_KEY_SIZE_4096 = 4096,
    HUKS_ECC_KEY_SIZE_224 = 224,
    HUKS_ECC_KEY_SIZE_256 = 256,
    HUKS_ECC_KEY_SIZE_384 = 384,
    HUKS_ECC_KEY_SIZE_521 = 521,
    HUKS_AES_KEY_SIZE_128 = 128,
    HUKS_AES_KEY_SIZE_192 = 192,
    HUKS_AES_KEY_SIZE_256 = 256,
    HUKS_AES_KEY_SIZE_512 = 512,
    HUKS_CURVE25519_KEY_SIZE_256 = 256,
    HUKS_DH_KEY_SIZE_2048 = 2048,
    HUKS_DH_KEY_SIZE_3072 = 3072,
    HUKS_DH_KEY_SIZE_4096 = 4096,
    HUKS_SM2_KEY_SIZE_256 = 256,
    HUKS_SM4_KEY_SIZE_128 = 128,
    HUKS_DES_KEY_SIZE_64 = 64,
    HUKS_3DES_KEY_SIZE_128 = 128,
    HUKS_3DES_KEY_SIZE_192 = 192,
}

enum HuksKeyAlg: i32 {
    HUKS_ALG_RSA = 1,
    HUKS_ALG_ECC = 2,
    HUKS_ALG_DSA = 3,
    HUKS_ALG_AES = 20,
    HUKS_ALG_HMAC = 50,
    HUKS_ALG_HKDF = 51,
    HUKS_ALG_PBKDF2 = 52,
    HUKS_ALG_ECDH = 100,
    HUKS_ALG_X25519 = 101,
    HUKS_ALG_ED25519 = 102,
    HUKS_ALG_DH = 103,
    HUKS_ALG_SM2 = 150,
    HUKS_ALG_SM3 = 151,
    HUKS_ALG_SM4 = 152,
    HUKS_ALG_DES = 160,
    HUKS_ALG_3DES = 161,
    HUKS_ALG_CMAC = 162,
}

enum HuksUnwrapSuite: i32 {
    HUKS_UNWRAP_SUITE_X25519_AES_256_GCM_NOPADDING = 1,
    HUKS_UNWRAP_SUITE_ECDH_AES_256_GCM_NOPADDING = 2,
}

enum HuksKeyGenerateType: i32 {
    HUKS_KEY_GENERATE_TYPE_DEFAULT = 0,
    HUKS_KEY_GENERATE_TYPE_DERIVE = 1,
    HUKS_KEY_GENERATE_TYPE_AGREE = 2,
}

enum HuksKeyFlag: i32 {
    HUKS_KEY_FLAG_IMPORT_KEY = 1,
    HUKS_KEY_FLAG_GENERATE_KEY = 2,
    HUKS_KEY_FLAG_AGREE_KEY = 3,
    HUKS_KEY_FLAG_DERIVE_KEY = 4,
}

enum HuksKeyStorageType: i32 {
    HUKS_STORAGE_TEMP = 0,
    HUKS_STORAGE_PERSISTENT = 1,
    HUKS_STORAGE_ONLY_USED_IN_HUKS = 2,
    HUKS_STORAGE_KEY_EXPORT_ALLOWED = 3,
}

enum HuksImportKeyType: i32 {
    HUKS_KEY_TYPE_PUBLIC_KEY = 0,
    HUKS_KEY_TYPE_PRIVATE_KEY = 1,
    HUKS_KEY_TYPE_KEY_PAIR = 2,
}

enum HuksRsaPssSaltLenType: i32 {
    HUKS_RSA_PSS_SALT_LEN_DIGEST = 0,
    HUKS_RSA_PSS_SALT_LEN_MAX = 1,
}

enum HuksUserAuthType: i32 {
    HUKS_USER_AUTH_TYPE_FINGERPRINT = 1 << 0,
    HUKS_USER_AUTH_TYPE_FACE = 1 << 1,
    HUKS_USER_AUTH_TYPE_PIN = 1 << 2,
}

enum HuksAuthAccessType: i32 {
    HUKS_AUTH_ACCESS_INVALID_CLEAR_PASSWORD = 1 << 0,
    HUKS_AUTH_ACCESS_INVALID_NEW_BIO_ENROLL = 1 << 1,
    HUKS_AUTH_ACCESS_ALWAYS_VALID = 1 << 2,
}

enum HuksUserAuthMode: i32 {
    HUKS_USER_AUTH_MODE_LOCAL = 0,
    HUKS_USER_AUTH_MODE_COAUTH = 1,
}

enum HuksAuthStorageLevel: i32 {
    HUKS_AUTH_STORAGE_LEVEL_DE = 0,
    HUKS_AUTH_STORAGE_LEVEL_CE = 1,
    HUKS_AUTH_STORAGE_LEVEL_ECE = 2,
}

enum HuksChallengeType: i32 {
    HUKS_CHALLENGE_TYPE_NORMAL = 0,
    HUKS_CHALLENGE_TYPE_CUSTOM = 1,
    HUKS_CHALLENGE_TYPE_NONE = 2,
}

enum HuksChallengePosition: i32 {
    HUKS_CHALLENGE_POS_0 = 0,
    HUKS_CHALLENGE_POS_1 = 1,
    HUKS_CHALLENGE_POS_2 = 2,
    HUKS_CHALLENGE_POS_3 = 3,
}

enum HuksSecureSignType: i32 {
    HUKS_SECURE_SIGN_WITH_AUTHINFO = 1,
}

enum HuksSendType: i32 {
    HUKS_SEND_TYPE_ASYNC = 0,
    HUKS_SEND_TYPE_SYNC = 1,
}

enum HuksTagType: i32 {
    HUKS_TAG_TYPE_INVALID = 0 << 28,
    HUKS_TAG_TYPE_INT = 1 << 28,
    HUKS_TAG_TYPE_UINT = 2 << 28,
    HUKS_TAG_TYPE_ULONG = 3 << 28,
    HUKS_TAG_TYPE_BOOL = 4 << 28,
    HUKS_TAG_TYPE_BYTES = 5 << 28,
}

enum HuksTag: i32 {
    HUKS_TAG_INVALID = 0 << 28 | 0,
    /* Base algorithm TAG: 1 - 200 */
    HUKS_TAG_ALGORITHM = 2 << 28 | 1,
    HUKS_TAG_PURPOSE = 2 << 28 | 2,
    HUKS_TAG_KEY_SIZE = 2 << 28 | 3,
    HUKS_TAG_DIGEST = 2 << 28 | 4,
    HUKS_TAG_PADDING = 2 << 28 | 5,
    HUKS_TAG_BLOCK_MODE = 2 << 28 | 6,
    HUKS_TAG_KEY_TYPE = 2 << 28 | 7,
    HUKS_TAG_ASSOCIATED_DATA = 5 << 28 | 8,
    HUKS_TAG_NONCE = 5 << 28 | 9,
    HUKS_TAG_IV = 5 << 28 | 10,
    HUKS_TAG_INFO = 5 << 28 | 11,
    HUKS_TAG_SALT = 5 << 28 | 12,
    HUKS_TAG_PWD = 5 << 28 | 13,
    HUKS_TAG_ITERATION = 2 << 28 | 14,
    HUKS_TAG_KEY_GENERATE_TYPE = 2 << 28 | 15,
    HUKS_TAG_DERIVE_MAIN_KEY = 5 << 28 | 16,
    HUKS_TAG_DERIVE_FACTOR = 5 << 28 | 17,
    HUKS_TAG_DERIVE_ALG = 2 << 28 | 18,
    HUKS_TAG_AGREE_ALG = 2 << 28 | 19,
    HUKS_TAG_AGREE_PUBLIC_KEY_IS_KEY_ALIAS = 4 << 28 | 20,
    HUKS_TAG_AGREE_PRIVATE_KEY_ALIAS = 5 << 28 | 21,
    HUKS_TAG_AGREE_PUBLIC_KEY = 5 << 28 | 22,
    HUKS_TAG_KEY_ALIAS = 5 << 28 | 23,
    HUKS_TAG_DERIVE_KEY_SIZE = 2 << 28 | 24,
    HUKS_TAG_IMPORT_KEY_TYPE = 2 << 28 | 25,
    HUKS_TAG_UNWRAP_ALGORITHM_SUITE = 2 << 28 | 26,
    HUKS_TAG_DERIVED_AGREED_KEY_STORAGE_FLAG = 2 << 28 | 29,
    HUKS_TAG_RSA_PSS_SALT_LEN_TYPE = 2 << 28 | 30,
    HUKS_TAG_ACTIVE_DATETIME = 3 << 28 | 201,
    HUKS_TAG_ORIGINATION_EXPIRE_DATETIME = 3 << 28 | 202,
    HUKS_TAG_USAGE_EXPIRE_DATETIME = 3 << 28 | 203,
    HUKS_TAG_CREATION_DATETIME = 3 << 28 | 204,
    /* Other authentication related TAG: 301 - 500 */
    HUKS_TAG_ALL_USERS = 4 << 28 | 301,
    HUKS_TAG_USER_ID = 2 << 28 | 302,
    HUKS_TAG_NO_AUTH_REQUIRED = 4 << 28 | 303,
    HUKS_TAG_USER_AUTH_TYPE = 2 << 28 | 304,
    HUKS_TAG_AUTH_TIMEOUT = 2 << 28 | 305,
    HUKS_TAG_AUTH_TOKEN = 5 << 28 | 306,
    /* Key secure access control and user auth TAG */
    HUKS_TAG_KEY_AUTH_ACCESS_TYPE = 2 << 28 | 307,
    HUKS_TAG_KEY_SECURE_SIGN_TYPE = 2 << 28 | 308,
    HUKS_TAG_CHALLENGE_TYPE = 2 << 28 | 309,
    HUKS_TAG_CHALLENGE_POS = 2 << 28 | 310,
    HUKS_TAG_KEY_AUTH_PURPOSE = 2 << 28 | 311,
    HUKS_TAG_AUTH_STORAGE_LEVEL = 2 << 28 | 316,
    HUKS_TAG_USER_AUTH_MODE = 2 << 28 | 319,
    /* Attestation related TAG: 501 - 600 */
    HUKS_TAG_ATTESTATION_CHALLENGE = 5 << 28 | 501,
    HUKS_TAG_ATTESTATION_APPLICATION_ID = 5 << 28 | 502,
    HUKS_TAG_ATTESTATION_ID_BRAND = 5 << 28 | 503,
    HUKS_TAG_ATTESTATION_ID_DEVICE = 5 << 28 | 504,
    HUKS_TAG_ATTESTATION_ID_PRODUCT = 5 << 28 | 505,
    HUKS_TAG_ATTESTATION_ID_SERIAL = 5 << 28 | 506,
    HUKS_TAG_ATTESTATION_ID_IMEI = 5 << 28 | 507,
    HUKS_TAG_ATTESTATION_ID_MEID = 5 << 28 | 508,
    HUKS_TAG_ATTESTATION_ID_MANUFACTURER = 5 << 28 | 509,
    HUKS_TAG_ATTESTATION_ID_MODEL = 5 << 28 | 510,
    HUKS_TAG_ATTESTATION_ID_ALIAS = 5 << 28 | 511,
    HUKS_TAG_ATTESTATION_ID_SOCID = 5 << 28 | 512,
    HUKS_TAG_ATTESTATION_ID_UDID = 5 << 28 | 513,
    HUKS_TAG_ATTESTATION_ID_SEC_LEVEL_INFO = 5 << 28 | 514,
    HUKS_TAG_ATTESTATION_ID_VERSION_INFO = 5 << 28 | 515,
    HUKS_TAG_IS_KEY_ALIAS = 4 << 28 | 1001,
    HUKS_TAG_KEY_STORAGE_FLAG = 2 << 28 | 1002,
    HUKS_TAG_IS_ALLOWED_WRAP = 4 << 28 | 1003,
    HUKS_TAG_KEY_WRAP_TYPE = 2 << 28 | 1004,
    HUKS_TAG_KEY_AUTH_ID = 5 << 28 | 1005,
    HUKS_TAG_KEY_ROLE = 2 << 28 | 1006,
    HUKS_TAG_KEY_FLAG = 2 << 28 | 1007,
    HUKS_TAG_IS_ASYNCHRONIZED = 2 << 28 | 1008,
    HUKS_TAG_SECURE_KEY_ALIAS = 4 << 28 | 1009,
    HUKS_TAG_SECURE_KEY_UUID = 5 << 28 | 1010,
    HUKS_TAG_KEY_DOMAIN = 2 << 28 | 1011,
    HUKS_TAG_IS_DEVICE_PASSWORD_SET = 4 << 28 | 1012,
    /* Inner-use TAG: 10001 - 10999 */
    HUKS_TAG_PROCESS_NAME = 5 << 28 | 10001,
    HUKS_TAG_PACKAGE_NAME = 5 << 28 | 10002,
    HUKS_TAG_ACCESS_TIME = 2 << 28 | 10003,
    HUKS_TAG_USES_TIME = 2 << 28 | 10004,
    HUKS_TAG_CRYPTO_CTX = 3 << 28 | 10005,
    HUKS_TAG_KEY = 5 << 28 | 10006,
    HUKS_TAG_KEY_VERSION = 2 << 28 | 10007,
    HUKS_TAG_PAYLOAD_LEN = 2 << 28 | 10008,
    HUKS_TAG_AE_TAG = 5 << 28 | 10009,
    HUKS_TAG_IS_KEY_HANDLE = 3 << 28 | 10010,
    HUKS_TAG_OS_VERSION = 2 << 28 | 10101,
    HUKS_TAG_OS_PATCHLEVEL = 2 << 28 | 10102,
    HUKS_TAG_SYMMETRIC_KEY_DATA = 5 << 28 | 20001,
    HUKS_TAG_ASYMMETRIC_PUBLIC_KEY_DATA = 5 << 28 | 20002,
    HUKS_TAG_ASYMMETRIC_PRIVATE_KEY_DATA = 5 << 28 | 20003,
}
