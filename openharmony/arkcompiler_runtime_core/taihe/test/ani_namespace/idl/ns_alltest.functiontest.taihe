/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@!namespace("ns_alltest", "functiontest")

enum Color: String {
    RED = "Red",
    GREEN = "Green",
    BLUE = "Blue",
}
struct Data {
  data1: String;
  data2: bool;
  data3: i32;
}

function BaseFunctionTest1():void;
function BaseFunctionTest2(param1:i8):void;
function BaseFunctionTest3(param1:i16):void;
function BaseFunctionTest4(param1:i32):void;
function BaseFunctionTest5(param1:i64):void;
function BaseFunctionTest6(param1:f32):void;
function BaseFunctionTest7(param1:f64):void;
function BaseFunctionTest8(param1:String):void;
function BaseFunctionTest9(param1:bool):void;
function BaseFunctionTest10(param1:Array<i8>):void;
function BaseFunctionTest11(param1:Array<i16>):void;
function BaseFunctionTest12(param1:Optional<i16>):void;
function BaseFunctionTest13(param1:Optional<i64>):void;
function BaseFunctionTest14(param1:@arraybuffer Array<u8>):void;
function BaseFunctionTest15(param1:@record Map<String, i32>):void;
function BaseFunctionTest16(param1:i8):i8;
function BaseFunctionTest17(param1:i16):i16;
function BaseFunctionTest18(param1:i32):i32;
function BaseFunctionTest19(param1:i64):i64;
function BaseFunctionTest20(param1:f32):f32;
function BaseFunctionTest21(param1:f64):f64;
function BaseFunctionTest22(param1:String):String;
function BaseFunctionTest23(param1:bool):bool;
function BaseFunctionTest24(param1:Array<i8>):Array<i8>;
function BaseFunctionTest25(param1:Array<i16>):Array<i16>;
function BaseFunctionTest26(param1:Optional<i16>):Optional<i16>;
function BaseFunctionTest27(param1:Optional<i64>):Optional<i64>;
function BaseFunctionTest28(param1:@arraybuffer Array<u8>):@arraybuffer Array<u8>;
function BaseFunctionTest29(param1:@record Map<String, i32>):@record Map<String, i32>;
function BaseFunctionTest30(param1:Color):Color;
function BaseFunctionTest31(param1:Color):void;
function BaseFunctionTest32(param1:i8,param2:i16,param3:i32,param4:i64,param8:bool):i16;
function BaseFunctionTest33(param1:i8,param2:i16,param3:i32,param4:i64,param8:bool):i32;
function BaseFunctionTest34(param1:i8,param2:i16,param3:i32,param4:i64,param8:bool):i64;
function BaseFunctionTest35(param1:i8,param2:i16,param3:i32,param4:i64,param8:bool):i8;
function BaseFunctionTest36(param1:i8,param2:i16,param8:bool,param9:Array<i8>,param10:Array<i64>):Array<i32>;
function BaseFunctionTest37(param1:i8,param2:i16,param3:i32,param8:bool,param10:Array<i64>):Array<i64>;
function BaseFunctionTest38(param1:i8,param7:String,param8:bool,param9:Array<i8>,param10:Array<i16>):String;
function BaseFunctionTest39(param2:i16,param7:String,param8:bool,param9:Array<bool>,param10:Array<i32>):bool;
function BaseFunctionTest40(param6:f64,param7:String,param8:bool,param9:Array<i8>,param10:@arraybuffer Array<u8>):Array<i8>;
function BaseFunctionTest41(param1:i8,param2:i16,param3:i32,param4:i64,param5:f32):void;
@overload("BaseFunctionTest42")
function BaseFunctionTest42_int(param1: i32, param2: i16): i32;
@overload("BaseFunctionTest42")
function BaseFunctionTest42_container(param1: Optional<i32>,param2: @record Map<String,i32>): i32;
@overload("BaseFunctionTest42")
function BaseFunctionTest42_void(): i32;
@overload("BaseFunctionTest42")
function BaseFunctionTest42_struct(param1: Data): void;

function BaseFunctionTest59(param1: @record Map<String,String>): void;
function BaseFunctionTest60(param1: @record Map<i64,bool>): bool;

struct ErrorResponse {
    success: bool; 
    errorCode: i16; 
    errorMessage: String;
}

interface TestNameSpace {
    BaseFunctionTest43():void;
    BaseFunctionTest44(param1:i8):i8;
    BaseFunctionTest45(param1:i16):i16;
    BaseFunctionTest46(param1:i32):i32;
    BaseFunctionTest47(param1:i64):i64;
    BaseFunctionTest48(param1:f32):f32;
    BaseFunctionTest49(param1:f64):f64;
    BaseFunctionTest50(param1:String):String;
    BaseFunctionTest51(param1:bool):bool;
    BaseFunctionTest52(param1:@arraybuffer Array<u8>):@arraybuffer Array<u8>;
    BaseFunctionTest53(param1:Optional<i8>):Optional<i8>;
    BaseFunctionTest54(param1:Optional<i32>):Optional<i32>;
    BaseFunctionTest55(param1:@record Map<i16,Data>):@record Map<i16,Data>;
    BaseFunctionTest56(param1:i32):i64;
    BaseFunctionTest57(param1:i8):i32;
    @get getTestStr(): String;
    BaseFunctionTest58(param1:bool):ErrorResponse;
}
function get_interface_NameSpace(): TestNameSpace;

interface TestInterfacePerformance1 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance1(): TestInterfacePerformance1;

interface TestInterfacePerformance2 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance2(): TestInterfacePerformance2;

interface TestInterfacePerformance3 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance3(): TestInterfacePerformance3;

interface TestInterfacePerformance4{
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance4(): TestInterfacePerformance4;

interface TestInterfacePerformance5 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance5(): TestInterfacePerformance5;

interface TestInterfacePerformance6 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance6(): TestInterfacePerformance6;

interface TestInterfacePerformance7 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance7(): TestInterfacePerformance7;

interface TestInterfacePerformance8 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance8(): TestInterfacePerformance8;

interface TestInterfacePerformance9 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance9(): TestInterfacePerformance9;

interface TestInterfacePerformance10 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance10(): TestInterfacePerformance10;

interface TestInterfacePerformance11 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance11(): TestInterfacePerformance11;

interface TestInterfacePerformance12 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance12(): TestInterfacePerformance12;

interface TestInterfacePerformance13 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance13(): TestInterfacePerformance13;

interface TestInterfacePerformance14 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance14(): TestInterfacePerformance14;

interface TestInterfacePerformance15 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance15(): TestInterfacePerformance15;

interface TestInterfacePerformance16 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance16(): TestInterfacePerformance16;

interface TestInterfacePerformance17 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance17(): TestInterfacePerformance17;

interface TestInterfacePerformance18 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance18(): TestInterfacePerformance18;

interface TestInterfacePerformance19 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance19(): TestInterfacePerformance19;

interface TestInterfacePerformance20 {
  BasePerformanceFunctionTest1():void;
  BasePerformanceFunctionTest2(param1:i8):i8;
}
function get_interface_performance20(): TestInterfacePerformance20;


union TestUnionName {
  value1:i16;
  value2:String;
  value3:bool;
  @null value4;
}


interface TestInterfacePerformance21 {
  @get geti32_test():i32;
  @get getStruct_test():Data;
  BasePerformanceFunctionTest2(param1:i8):i8;
  @get  geti8_test_attribute():i8;
  @get  geti16_test_attribute():i16;
  @get  geti32_test_attribute():i32;
  @get  geti64_test_attribute():i64;
  @get  getf32_test_attribute():f32;
  @get  getf64_test_attribute():f64;
  @get  getStr_test_attribute():String;
  @get  getbool_test_attribute():bool;
  @get  get_ArrayBuffer_test_attribute():@arraybuffer Array<u8>;
  @get  getOptional_test_attribute():Optional<i32>;
  @get  getRecord_test_attribute():@record Map<i32,Data>;
  @get  getUnion_test_attribute():TestUnionName;
  @get  getArray_test_attribute():Array<bool>;
  @get  getEnum_test_attribute():Color;
}
function get_interface_performance21(): TestInterfacePerformance21;

interface IbaseInterface1 {
  BaseTest():i32;
}


interface IbaseInterface2: IbaseInterface1 {
    BaseTest1(): String;
}

interface IbaseInterface3: IbaseInterface1 {
    BaseTest2(): bool;
}

function get_interface_IbaseInterface2(): IbaseInterface2;
function get_interface_IbaseInterface3(): IbaseInterface3;


@!sts_inject("""
export const CONSTANT_I8_001 = 127;
export const CONSTANT_I8_002 = -128;
export const CONSTANT_I32_001 = 2147483647;
""")