/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
struct Pair {
  a: String;
  b: String;
}

enum Color: String {
    RED = "Red",
    GREEN = "Green",
    BLUE = "Blue",
}

union union_primitive {
  sValue: String;      
  i8Value: i8;         
  i16Value: i16;       
  i32Value: i32;  

  f32Value: f32;       
  f64Value: f64;       
  bValue: bool;        
}

union color_map_value1 {
    colorValue: Color;
    mapValue1: @record Map<String, i8>;
}

union color_map_value2 {
    colorValue: Color;
    mapValue2: @record Map<String, i16>;
}

union color_map_value3 {
    colorValue: Color;
    mapValue3: @record Map<String, i32>;
}

union color_map_value4 {
    colorValue: Color;
    mapValue4: @record Map<String, i64>;
}

union color_map_value5 {
    colorValue: Color;
    mapValue5: @record Map<String, f32>;
}

union color_map_value6 {
    colorValue: Color;
    mapValue6: @record Map<String, f64>;
}

union color_map_value7 {
    colorValue: Color;
    mapValue7: @record Map<String, bool>;
}

union color_map_value8 {
    colorValue: Color;
    mapValue8: @record Map<String, String>;
}

union color_map_value9 {
    colorValue: Color;
    mapValue9: @record Map<i32, i32>;
}



union UnionArrayMap1 {
  arri8: Array<i8>;
  mapValue1: @record Map<String, i8>;
}


union UnionArrayMap2 {
  arri8: Array<i8>;
  mapValue2: @record Map<String, i16>;
}


union UnionArrayMap3 {
  arri8: Array<i8>;
  mapValue3: @record Map<String, i32>;
}


union UnionArrayMap4 {
  arri8: Array<i8>;
  mapValue4: @record Map<String, i64>;
}


union UnionArrayMap5 {
  arri8: Array<i8>;
  mapValue5: @record Map<String, f32>;
}


union UnionArrayMap6 {
  arri8: Array<i8>;
  mapValue6: @record Map<String, f64>;
}


union UnionArrayMap7 {
  arri8: Array<i8>;
  mapValue7: @record Map<String, bool>;
}


union UnionArrayMap8 {
  arri8: Array<i8>;
  mapValue8: @record Map<String, String>;
}


union UnionArrayMap9 {
  arri8: Array<i8>;
  mapValue9: @record Map<i32, i32>;
}

union union_mix{
  sValue: String;      
  i8Value: i8;         
  i16Value: i16;       
  i32Value: i32;  
  f32Value: f32;       
  f64Value: f64;       
  bValue: bool;     

  enumValue: Color;
  arri8: Array<i8>;
}

union union_primitive_2 {
  sValue: String;      
  i8Value: i8;               
}

union union_primitive_2_1 {   
  i8Value: i8;    
  i16Value: i16;           
}

union union_primitive_2_2 {   
  i8Value: i8;    
  i8Value2: i8;           
}

union union_primitive_2_3 {
  i16Value: i16;     
  i32Value: i32;               
}

union union_primitive_2_4 {
  i32Value: i32;      
  f32Value: f32;             
}
union union_primitive_2_5 {
  f32Value: f32;      
  f64Value: f64;               
}
union union_primitive_2_6 {
  sValue: String;      
  bValue: bool;               
}
union union_primitive_2_7 {
  bValue: bool;       
  i8Value: i8;               
}
union union_primitive_2_8 {
  bValue: bool;       
  b1Value: bool;               
}
union union_primitive_2_9 {
  sValue: String;      
  s1Value: String;               
}

union union_mix_5 {
  sValue: String;      
  i8Value: i8;
  bValue: bool;
  enumValue: Color;
  arr32: Array<i32>;               
}

union union_map{
  mapValue: @record Map<String, i8>;
}

interface MyInterface {
  FuncUnionPrimitive(data1: union_primitive, data2: union_primitive): String;
  FuncUnionPrimitive5Param(data1: union_primitive, data2: union_primitive, data3: union_primitive, data4: union_primitive, data5: union_primitive): String;
  FuncColorMapValue1(data1: color_map_value1): String;
  FuncColorMapValue2(data1: color_map_value2): String;
  FuncColorMapValue3(data1: color_map_value3): String;
  FuncColorMapValue4(data1: color_map_value4): String;
  FuncColorMapValue5(data1: color_map_value5): String;
  FuncColorMapValue6(data1: color_map_value6): String;
  FuncColorMapValue7(data1: color_map_value7): String;
  FuncColorMapValue8(data1: color_map_value8): String;
  FuncColorMapValue9(data1: color_map_value9): String;
  FuncColorMapValue10(data1: color_map_value9, data2: color_map_value9): String;

  FuncUnionArrayMap1(data1: UnionArrayMap1, data2: UnionArrayMap1): String;
  FuncUnionArrayMap2(data1: UnionArrayMap2, data2: UnionArrayMap2): String;
  FuncUnionArrayMap3(data1: UnionArrayMap3, data2: UnionArrayMap3): String;
  FuncUnionArrayMap4(data1: UnionArrayMap4, data2: UnionArrayMap4): String;
  FuncUnionArrayMap5(data1: UnionArrayMap5, data2: UnionArrayMap5): String;
  FuncUnionArrayMap6(data1: UnionArrayMap6, data2: UnionArrayMap6): String;
  FuncUnionArrayMap7(data1: UnionArrayMap7, data2: UnionArrayMap7): String;
  FuncUnionArrayMap8(data1: UnionArrayMap8, data2: UnionArrayMap8): String;
  FuncUnionArrayMap9(data1: UnionArrayMap9, data2: UnionArrayMap9): String;
  FuncUnionArrayMap10(data1: UnionArrayMap1, data2: UnionArrayMap2): String;

  FuncUnionMix(data1: union_mix,data2: union_mix,data3: union_mix,data4: union_mix,data5: union_mix): String;
  FuncUnionMix10Param(data1: union_mix,data2: union_mix,data3: union_mix,data4: union_mix,data5: union_mix,data6: union_mix,data7: union_mix,data8: union_mix,data9: union_mix,data10: union_mix): String;
  FuncUnionPrimitiveReturn(kind: String): union_primitive_2;
  FuncUnionPrimitiveReturn1(kind: String): union_primitive_2_1;
  FuncUnionPrimitiveReturn2(kind: String): union_primitive_2_2;
  FuncUnionPrimitiveReturn3(kind: String): union_primitive_2_3;
  FuncUnionPrimitiveReturn4(kind: String): union_primitive_2_4;
  FuncUnionPrimitiveReturn5(kind: String): union_primitive_2_5;
  FuncUnionPrimitiveReturn6(kind: String): union_primitive_2_6;
  FuncUnionPrimitiveReturn7(kind: String): union_primitive_2_7;
  FuncUnionPrimitiveReturn8(kind: String): union_primitive_2_8;
  FuncUnionPrimitiveReturn9(kind: String): union_primitive_2_9;

  FuncUnionMix5Return(kind: String): union_mix_5;
  FuncUnionMix10Return(kind: String): union_mix;
}

function PrintUnion(data: union_primitive): String;
function MakeUnion(kind: String): union_primitive;

function GetInterface(): MyInterface;

