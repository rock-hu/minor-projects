# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# The following comment until the empty line must be a valid YAML document 
# containing exact copy of ISA specification assertions relevant to this test.
#--- 
#   - title: Load from array
#     description: >
#       Load an element from array using accumulator as an index and puts it into accumulator.
#     instructions:
#       - sig: fldarr.64 vs
#         format: [op_vs_8]
#         type: obj
#         dtype: f64
#         etype: f64
#         properties: [acc_read, acc_write, float]
#   - title: Store to array
#     description: >
#       Store accumulator content into array slot pointed by index.
#     instructions:
#       - sig: fstarr.64 vs1, vs2
#         format: [op_vs1_4_vs2_4]
#         type: f64
#         dtype: none
#         etype: f64
#         properties: [acc_read, float]

#assert that operations with array of f64 works fine
#i64 i;
#for(i=0; i<7; i++) array[i]=(double)i;
#for(i=6; i>=0; i--) assert_eq((double)i, array[i]);

.function i32 main(){
    movi v0, 7
    newarr v1, v0, f64[]
    movi v2, 0
    ldai 0
loop:
    jeq v0, loop_exit
    i32tof64
    fstarr.64 v1, v2
    inci v2, 1
    lda v2
    jmp loop
loop_exit:
    subi 1
    sta v2
loop2:
    jltz loop2_exit
    lda v2
    i32tof64
    sta.64 v3
    lda v2
    fldarr.64 v1
    fsub2.64 v3
    sta.64 v3
    call.short abs, v3, v3
    sta.64 v3
    fldai.64 1e-13
    fcmpl.64 v3
    jlez exit_failure
    inci v2, -1
    lda v2
    jmp loop2
loop2_exit:
    ldai 0
    return
exit_failure:
    ldai 1
    return
}

.function f64 abs(f64 a0){
    fldai.64 0.0
    fcmpl.64 a0
    jlez label
    lda.64 a0
    fneg.64
    return.64
label:
    lda.64 a0
    return.64
}

