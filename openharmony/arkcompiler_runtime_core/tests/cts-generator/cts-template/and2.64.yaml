# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

definitions: []
tests:
  - file-name: "and2.64"
    isa:
      title: Two address binary operation on accumulator
      description: >
        Perform specified binary operation on accumulator and register and store result into accumulator
      exceptions:
        - x_none
    commands:
      - file-name: "op_vs_8_zero"
        isa:
          instructions:
            - sig: and2.64 v:in:i64
              acc: inout:i64
              prefix: bit
              format: [pref_op_v_8]
        code-template: |
          #
              ldai.64 0
              movi.64 v0, %s
              and2.64 v0
              movi.64 v0, 0
              cmp.64 v0
        description: Check 'and2.64' with 0 and various values.
        tags: ['tsan']
        cases:
          - values:
              - "0"
          - values:
              - "1"
          - values:
              - "-1"
          - values:
              - "0x7FFFFFFFFFFFFFFF"
          - values:
              - "0x8000000000000000"
          - values:
              - "-0x7FFFFFFFFFFFFFFF"
          - values:
              - "-0x8000000000000000"
          - values:
              - "0xFFFFFFFFFFFFFFFF"
          - values:
              - "-0xFFFFFFFFFFFFFFFF"

      - file-name: "op_vs_8_pone"
        isa:
          instructions:
            - sig: and2.64 v:in:i64
              acc: inout:i64
              prefix: bit
              format: [pref_op_v_8]
        code-template: |
          #
              ldai.64 1
              movi.64 v0, %s
              and2.64 v0
              movi.64 v0, %s
              cmp.64 v0
        description: Check 'and2.64' with +1 and various values.
        cases:
          - values:
              - "0"
              - "0"
          - values:
              - "1"
              - "1"
          - values:
              - "-1"
              - "1"
          - values:
              - "0x7FFFFFFFFFFFFFFF"
              - "1"
          - values:
              - "0x8000000000000000"
              - "0"
          - values:
              - "-0x7FFFFFFFFFFFFFFF"
              - "1"
          - values:
              - "-0x8000000000000000"
              - "0"
          - values:
              - "0xFFFFFFFFFFFFFFFF"
              - "1"
          - values:
              - "-0xFFFFFFFFFFFFFFFF"
              - "1"
      - file-name: "op_vs_8_none"
        isa:
          instructions:
            - sig: and2.64 v:in:i64
              acc: inout:i64
              prefix: bit
              format: [pref_op_v_8]
        code-template: |
          #
              ldai.64 -1
              movi.64 v0, %s
              and2.64 v0
              movi.64 v0, %s
              cmp.64 v0
        description: Check 'and2.64' with -1 and various values.
        cases:
          - values:
              - "0"
              - "0"
          - values:
              - "1"
              - "1"
          - values:
              - "-1"
              - "-1"
          - values:
              - "0x7FFFFFFFFFFFFFFF"
              - "0x7FFFFFFFFFFFFFFF"
          - values:
              - "0x8000000000000000"
              - "0x8000000000000000"
          - values:
              - "-0x7FFFFFFFFFFFFFFF"
              - "-0x7FFFFFFFFFFFFFFF"
          - values:
              - "-0x8000000000000000"
              - "-0x8000000000000000"
          - values:
              - "0xFFFFFFFFFFFFFFFF"
              - "0xFFFFFFFFFFFFFFFF"
          - values:
              - "-0xFFFFFFFFFFFFFFFF"
              - "-0xFFFFFFFFFFFFFFFF"
      - file-name: "op_vs_8_pmax"
        isa:
          instructions:
            - sig: and2.64 v:in:i64
              acc: inout:i64
              prefix: bit
              format: [pref_op_v_8]
        code-template: |
          #
              ldai.64 0x7FFFFFFFFFFFFFFF
              movi.64 v0, %s
              and2.64 v0
              movi.64 v0, %s
              cmp.64 v0
        description: Check 'and2.64' with +max and various values.
        cases:
          - values:
              - "0"
              - "0"
          - values:
              - "1"
              - "1"
          - values:
              - "-1"
              - "0x7FFFFFFFFFFFFFFF"
          - values:
              - "0x7FFFFFFFFFFFFFFF"
              - "0x7FFFFFFFFFFFFFFF"
          - values:
              - "0x8000000000000000"
              - "0"
          - values:
              - "-0x7FFFFFFFFFFFFFFF"
              - "1"
          - values:
              - "-0x8000000000000000"
              - "0"
          - values:
              - "0xFFFFFFFFFFFFFFFF"
              - "0x7FFFFFFFFFFFFFFF"
          - values:
              - "-0xFFFFFFFFFFFFFFFF"
              - "1"

      - file-name: "op_vs_8_nmax"
        isa:
          instructions:
            - sig: and2.64 v:in:i64
              acc: inout:i64
              prefix: bit
              format: [pref_op_v_8]
        code-template: |
          #
              ldai.64 -0x8000000000000000
              movi.64 v0, %s
              and2.64 v0
              movi.64 v0, %s
              cmp.64 v0
        description: Check 'and2.64' with -max and various values.
        cases:
          - values:
              - "0"
              - "0"
          - values:
              - "1"
              - "0"
          - values:
              - "-1"
              - "0x8000000000000000"
          - values:
              - "0x7FFFFFFFFFFFFFFF"
              - "0"
          - values:
              - "0x8000000000000000"
              - "0x8000000000000000"
          - values:
              - "-0x7FFFFFFFFFFFFFFF"
              - "0x8000000000000000"
          - values:
              - "-0x8000000000000000"
              - "0x8000000000000000"
          - values:
              - "0xFFFFFFFFFFFFFFFF"
              - "0x8000000000000000"
          - values:
              - "-0xFFFFFFFFFFFFFFFF"
              - "0"

      - file-name: "vals"
        isa:
          instructions:
            - sig: and2.64 v:in:i64
              acc: inout:i64
              prefix: bit
              format: [pref_op_v_8]
        code-template: |
          #
              ldai.64 %s
              movi.64 v0, %s
              and2.64 v0
              movi.64 v0, %s
              cmp.64 v0
        description: Check 'and2.64' with various values.
        cases:
          - values:
              - "0xF5A45D7ACCBEC81"
              - "0x147F4564FF6F1ED5"
              - "0x45A4544AC4B0C81"
          - values:
              - "0xDF39DF86B11764D0"
              - "0x75B89CAD1D10139A"
              - "0x55389C8411100090"
          - values:
              - "0x3675DE31C3B8C2EB"
              - "0x9742C7DD1AF22B02"
              - "0x1640C61102B00202"
          - values:
              - "0x933C8AD6FCBE6C91"
              - "0xC89958DE38723023"
              - "0x801808D638322001"
          - values:
              - "0xE229E2ED8D27FA8D"
              - "0xF9E7F03098B8F407"
              - "0xE021E0208820F005"
          - values:
              - "0x79A8933846E38688"
              - "0x8B070E6E6081D938"
              - "0x900022840818008"
          - values:
              - "0xF824D81EBB55FB0"
              - "0xDC15FC1619348164"
              - "0xC004C0009340120"
          - values:
              - "0xC4C29D2DDBAAB1FD"
              - "0xFD34C8AFD9D06B2D"
              - "0xC400882DD980212D"
          - values:
              - "0x4D324906B5990E35"
              - "0xE4CC0CDACEFBEB79"
              - "0x4400080284990A31"
          - values:
              - "0x7F56BCCEBBE25550"
              - "0x9BCD499BC691652F"
              - "0x1B44088A82804500"

      - file-name: "regs"
        isa:
          instructions:
            - sig: and2.64 v:in:i64
              acc: inout:i64
              prefix: bit
              format: [pref_op_v_8]
        runner-options: ['compile-only']
        code-template: |
          #
              and2.64 %s
        check-type: none
        description: Check 'and2.64' with various register numbers.
        cases:
          - values:
              - "v255"
          - values:
              - "v256"
            runner-options: ['compile-failure']

      - file-name: "type"
        bugid: ["964", "966"]
        tags: ["verifier"]
        isa:
          verification:
            - acc_type
            - v1_type
        runner-options: ['verifier-failure', 'verifier-config']
        header-template: []
        code-template: |
          .record T {}
          .function i32 main() {
              %s
              *s
              and2.64 v0
        check-type: exit-positive
        description: Check 'and2.64' with incorrect accumulator and/or register types.
        cases:
          - values:
            - ldai 0
          - values:
            - ldai.64 0
            id: acc_ok
          - values:
            - fldai 0
            bugid: ['7315']
          - values:
            - fldai.64 0
            bugid: ['7315']
          - values:
            - lda.null
          - values:
            - |
              #
                  movi v1, 0
                  newarr v1, v1, i32[]
                  lda.obj v1
          - values:
            - lda.str "0"
          - values:
            - lda.type T
          - values:
            - |
              #
                  newobj v1, T
                  lda.obj v1
        template-cases:
          - values:
            - movi v0, 0
          - values:
            - movi.64 v0, 0
            exclude: [acc_ok]
          - values:
            - fmovi v0, 0
            bugid: ['7315']
          - values:
            - fmovi.64 v0, 0
            bugid: ['7315']
          - values:
            - mov.null v0
          - values:
            - |
              #
                  movi v0, 0
                  newarr v0, v0, i32[]
          - values:
            - |
              #
                  lda.str "0"
                  sta.obj v0
          - values:
            - |
              #
                  lda.type T
                  sta.obj v0
          - values:
            - newobj v0, T

      - file-name: uninitialized_regs
        bugid: ['2260']
        isa:
          instructions:
            - sig: and2.64 v:in:i64
              acc: inout:i64
              prefix: bit
              format: [pref_op_v_8]
        description: Check 'and2.64' with uninitialized registers.
        tags: ['verifier']
        runner-options: ['verifier-failure', 'verifier-config']
        code-template: |
          #
              %s
              *s
              and2.64 *s
        check-type: exit-positive
        template-cases:
          - values:
              - ''
          - values:
              - ldai.64 0
            exclude: [init]

        cases:
          - values:
              - ''
              - v0
          - values:
              - movi.64 v1, 0
              - v1
            id: init
          - values:
              - ''
              - v8
          - values:
              - ''
              - v15
          - values:
              - movi.64 v15, 0
              - v15
            id: init

