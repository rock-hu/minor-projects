# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

definitions:
  - name: polymorphic-hdr
    template: |
      #
      .language PandaAssembly
      .record panda.Class <external>
      .record panda.Object <external>
      .record panda.Integer <external>
      .record panda.Long <external>
      .record panda.Short <external>
      .record panda.String <external>
      .record panda.invoke.MethodHandles <external>
      .record panda.invoke.MethodHandles$Lookup <external>
      .record panda.invoke.MethodHandle <external>
      .record panda.invoke.MethodType <external>
      .record panda.NullPointerException <external>
      .record panda.reflect.Field <external>
      .function panda.Object panda.reflect.Field.get(panda.reflect.Field a0, panda.Object a1) <external>
      .function panda.reflect.Field panda.Class.getField(panda.Class a0, panda.String a1) <external>
      .function panda.Class panda.Class.forName(panda.String a0) <external>
      .function panda.invoke.MethodHandles$Lookup panda.invoke.MethodHandles.lookup() <external, static>
      .function panda.invoke.MethodHandle panda.invoke.MethodHandles$Lookup.findStatic(panda.invoke.MethodHandles$Lookup a0, panda.Class a1, panda.String a2, panda.invoke.MethodType a3) <external>
      .function panda.invoke.MethodHandle panda.invoke.MethodHandles$Lookup.findVirtual(panda.invoke.MethodHandles$Lookup a0, panda.Class a1, panda.String a2, panda.invoke.MethodType a3) <external>

      .record W <panda.access = public> {}
      .record R <panda.access = public, panda.extends = W> {}
      .record Q <panda.access = public, panda.extends = R> {}
      # returns int.class for panda.Integer, can be replaced with panda.Integer.TYPE
      .function panda.Class R.getPrimitiveType(panda.String a0) <static, panda.access=public> {
          call.short panda.Class.forName, a0
          sta.obj v1
          lda.str "TYPE"
          call.virt.acc.short panda.Class.getField, v1, 1
          mov.null v0
          call.virt.acc.short panda.reflect.Field.get, v0, 0
          return.obj
      }
      .function i32 main() {
          call.short R.test
          return
      }

tests:
  - file-name: 'calle.polymorphic.short'
    isa:
      title: Polymorphic calls
      description: >
        TODO

    commands:
      - file-name: 'syntax'
        isa:
          instructions:
            - sig: calle.polymorphic.short method_id, v1:in:top, v2:in:top
              prefix: PandaAssembly
              acc: out:top
              format: [pref_op_v1_4_v2_4_id_16]
        description: Check calle.polymorphic.short syntax.
        runner-options: [use-pa, compile-failure, ]
        tags: ['irtoc_ignore']
        header-template: [polymorphic-hdr]
        code-template: |
          .function i32 panda.invoke.MethodHandle.invokeExact(panda.invoke.MethodHandle a0, R a1) <external>
          .function i32 R.test() <static, panda.access = public> {
              calle.polymorphic.short %s
        check-type: exit-positive
        cases:
          - values:
            - 'panda.invoke.MethodHandle.invokeExact, v16, v2'
          - values:
            - 'panda.invoke.MethodHandle.invokeExact, v1, v16'
          - values:
            - 'panda.invoke.MethodHandle.invokeExact, v15, v14'
            runner-options: [use-pa, compile-only, ]

      - file-name: 'uninitialized_regs'
        isa:
          instructions:
            - sig: calle.polymorphic.short method_id, v1:in:top, v2:in:top
              prefix: PandaAssembly
              acc: out:top
              format: [pref_op_v1_4_v2_4_id_16]
        description: Check that verifier reports an error on unitialized registers.
        runner-options: [use-pa, verifier-failure, verifier-config, ]
        tags: ['verifier', 'irtoc_ignore']
        header-template: [polymorphic-hdr]
        code-template: |
          .function i32 panda.invoke.MethodHandle.invokeExact(panda.invoke.MethodHandle a0, R a1) <external>
          .function i32 R.test() <static, panda.access = public> {
              %s
              calle.polymorphic.short panda.invoke.MethodHandle.invokeExact, v1, v2
        check-type: exit-positive
        cases:
          - values:
            - ''
            bugid: ['7636']
            ignore: true
          - values:
            - newobj v1, R
            bugid: ['7636']
            ignore: true
          - values:
            - newobj v2, R
            bugid: ['7636']
            ignore: true
          - values:
            - |
              #
                  newobj v1, R
                  newobj v2, R
            runner-options: [use-pa, verifier-only, verifier-config, ]

      - file-name: 'npe'
        isa:
          exceptions: [x_null]
        description: Check that NullPointerException is thrown if v1 is null.
        runner-options: [use-pa, ]
        tags: ['irtoc_ignore']
        bugid: ['7637']
        ignore: true
        header-template: [polymorphic-hdr]
        code-template: |
          .function i32 panda.invoke.MethodHandle.invokeExact(panda.invoke.MethodHandle a0, R a1) <external>
          .function i32 R.test() <static, panda.access = public> {
              mov.null v4
              newobj v5, R
            try_begin:
              calle.polymorphic.short panda.invoke.MethodHandle.invokeExact, v4, v5
              ldai 4
              return
            try_end:
            catch_begin:
              ldai 0
              return
            catch_end:
            .catch panda.NullPointerException, try_begin, try_end, catch_begin, catch_end
          }
        check-type: empty

      - file-name: 'call_1s'
        isa:
          instructions:
            - sig: calle.polymorphic.short method_id, v1:in:top, v2:in:top
              prefix: PandaAssembly
              acc: out:top
              format: [pref_op_v1_4_v2_4_id_16]
        description: Check that polymorphic call is performed for static function with one argument.
        runner-options: [use-pa, ]
        tags: ['irtoc_ignore']
        bugid: ['7634']
        header-template: [polymorphic-hdr]
        code-template: |
          .function panda.invoke.MethodType panda.invoke.MethodType.methodType(panda.Class a0, panda.Class a1) <external, static>
          %s
          .function i32 R.inc32(i32 a0) {
              inci a0, 1
              lda a0
              return
          }
          .function i32 R.inc64(i64 a0) {
              ldai.64 2
              add2.64 a0
              i64toi32
              return
          }
          .function i32 R.inc16(i16 a0) {
              inci a0, 3
              lda a0
              return
          }
          .function i32 R.test() <static, panda.access = public> {
              call.short panda.invoke.MethodHandles.lookup
              sta.obj v0   # MethodHandles.Lookup object

              lda.str "panda.Integer"
              sta.obj v1
              call.short R.getPrimitiveType, v1
              sta.obj v1
              lda.str "%s"
              sta.obj v2
              call.short R.getPrimitiveType, v2
              sta.obj v2
              call.short panda.invoke.MethodType.methodType, v1, v2
              sta.obj v1   # MethodType object for (i32)i32

              lda.type R
              sta.obj v2
              lda.str "%s"
              sta.obj v3
              call.virt panda.invoke.MethodHandles$Lookup.findStatic, v0, v2, v3, v1
              sta.obj v4    # MethodHandle object

              %s
              calle.polymorphic.short panda.invoke.MethodHandle.invokeExact, v4, v6
              movi v1, 42
              jeq v1, ok
              ldai 1
              return
          ok:
              ldai 0
              return
          }
        check-type: empty
        cases:
          - values:
              - .function i32 panda.invoke.MethodHandle.invokeExact(panda.invoke.MethodHandle a0, i32 a1) <external>
              - panda.Integer
              - inc32
              - movi v6, 41
          - values:
              - .function i32 panda.invoke.MethodHandle.invokeExact(panda.invoke.MethodHandle a0, i64 a1) <external>
              - panda.Long
              - inc64
              - movi.64 v6, 40
          - values:
              - .function i32 panda.invoke.MethodHandle.invokeExact(panda.invoke.MethodHandle a0, i16 a1) <external>
              - panda.Short
              - inc16
              - movi v6, 39

      - file-name: 'call_0v'
        isa:
          instructions:
            - sig: calle.polymorphic.short method_id, v1:in:top, v2:in:top
              prefix: PandaAssembly
              acc: out:top
              format: [pref_op_v1_4_v2_4_id_16]
        description: Check that polymorphic call is performed for virtual function with no arguments.
        runner-options: [use-pa, ]
        tags: ['irtoc_ignore']
        bugid: ['7634']
        header-template: [polymorphic-hdr]
        code-template: |
          .function panda.invoke.MethodType panda.invoke.MethodType.methodType(panda.Class a0) <external, static>
          %s
          .function i32 R.inc32(R a0) {
              ldai 0x7fffffff
              return
          }
          .function i32 R.test() <static, panda.access = public> {
              call.short panda.invoke.MethodHandles.lookup
              sta.obj v0   # MethodHandles.Lookup object

              lda.str "%s"
              sta.obj v1
              call.short R.getPrimitiveType, v1
              sta.obj v1
              call.short panda.invoke.MethodType.methodType, v1
              sta.obj v1   # MethodType object for ()i32

              lda.type R
              sta.obj v2
              lda.str "%s"
              sta.obj v3
              call.virt panda.invoke.MethodHandles$Lookup.findVirtual, v0, v2, v3, v1
              sta.obj v4    # MethodHandle object

              newobj v5, R
              calle.polymorphic.short panda.invoke.MethodHandle.invokeExact, v4, v5
              movi v1, %s
              jeq v1, ok
              ldai 1
              return
          ok:
              ldai 0
              return
          }
        check-type: empty
        cases:
          - values:
              - .function i32 panda.invoke.MethodHandle.invokeExact(panda.invoke.MethodHandle a0, R a1) <external>
              - panda.Integer
              - inc32
              - 0x7fffffff

      - file-name: 'call_obj'
        isa:
          exceptions: [x_call]
        description: Check that polymorphic call throws right exception on invalid arguments.
        runner-options: [use-pa, ]
        tags: ['irtoc_ignore']
        bugid: ['7634']
        header-template: [polymorphic-hdr]
        code-template: |
          .function panda.invoke.MethodType panda.invoke.MethodType.methodType(panda.Class a0, panda.Class a1) <external, static>
          .function R panda.invoke.MethodHandle.invokeExact(panda.invoke.MethodHandle a0, %s a1) <external>
          .record panda.Exception <external>
          .record E <panda.extends = panda.Exception, panda.access = public> {}
          .record panda.invoke.WrongMethodTypeException <external>
          .function R R.throwE(R a0) <static> {
              newobj v0, E
              throw v0
              lda.obj a0
              return.obj
          }
          .function i32 R.test() <static, panda.access = public> {
              call.short panda.invoke.MethodHandles.lookup
              sta.obj v0   # MethodHandles.Lookup object

              lda.type R
              sta.obj v1
              call.short panda.invoke.MethodType.methodType, v1, v1
              sta.obj v1   # MethodType object for (R)R

              lda.type R
              sta.obj v2
              lda.str "throwE"
              sta.obj v3
              call.virt panda.invoke.MethodHandles$Lookup.findStatic, v0, v2, v3, v1
              sta.obj v4    # MethodHandle object

              newobj v6, %s
          try_begin:
              calle.polymorphic.short panda.invoke.MethodHandle.invokeExact, v4, v6
              ldai 1
              return
          try_end:
          catch_begin:
              ldai 0
              return
          catch_end:
          %s
          }
        check-type: empty
        cases:
          - values:
            - E
            - E
            - .catch panda.invoke.WrongMethodTypeException, try_begin, try_end, catch_begin, catch_end
          - values:
            - W
            - W
            - .catch panda.invoke.WrongMethodTypeException, try_begin, try_end, catch_begin, catch_end
          - values:
            - R
            - R
            - .catch E, try_begin, try_end, catch_begin, catch_end
          - values:
            - Q
            - Q
            - .catch panda.invoke.WrongMethodTypeException, try_begin, try_end, catch_begin, catch_end
