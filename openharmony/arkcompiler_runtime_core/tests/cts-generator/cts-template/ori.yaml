# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
definitions: []
tests:
  - file-name: ori
    isa:
      title: Two address binary operation with immediate on accumulator
      description: >
        Perform specified binary operation on accumulator and immediate and store result into accumulator.
        Immediate is sign extended to operand size.
      exceptions:
        - x_none
    commands:
      - file-name: op_imm_32_zero
        isa:
          instructions:
            - sig: ori imm:i32
              acc: inout:i32
              format: [op_imm_32]
        code-template: |
          #
              ldai 0
              ori %s
              movi v0, %s
              jne v0, set_failure
              ldai 0
              return
          set_failure:
              ldai 1
              return
        check-type: none
        description: Check `ori` with zero and various values.
        cases:
          - values: ["0", "0x0"]
          - values: ["1", "0x1"]
          - values: ["-1", "0xFFFFFFFF"]
          - values: ["0x7FFFFFFF", "0x7FFFFFFF"]
          - values: ["-0x7FFFFFFF", "0x80000001"]
          - values: ["0x80000000", "0x80000000"]
          - values: ["-0x80000000", "0x80000000"]
          - values: ["0xFFFFFFFF", "0xFFFFFFFF"]
          - values: ["-0xFFFFFFFF", "0x1"]


      - file-name: op_imm_32_pone
        isa:
          instructions:
            - sig: ori imm:i32
              acc: inout:i32
              format: [op_imm_32]
        code-template: |
          #
              ldai 1
              ori %s
              movi v0, %s
              jne v0, set_failure
              ldai 0
              return
          set_failure:
              ldai 1
              return
        check-type: none
        description: Check `ori` with +1 and various values.
        cases:
          - values: ["0", "0x1"]
          - values: ["1", "0x1"]
          - values: ["-1", "0xFFFFFFFF"]
          - values: ["0x7FFFFFFF", "0x7FFFFFFF"]
          - values: ["-0x7FFFFFFF", "0x80000001"]
          - values: ["0x80000000", "0x80000001"]
          - values: ["-0x80000000", "0x80000001"]
          - values: ["0xFFFFFFFF", "0xFFFFFFFF"]
          - values: ["-0xFFFFFFFF", "0x1"]


      - file-name: op_imm_32_none
        isa:
          instructions:
            - sig: ori imm:i32
              acc: inout:i32
              format: [op_imm_32]
        code-template: |
          #
              ldai -1
              ori %s
              movi v0, -1
              jne v0, set_failure
              ldai 0
              return
          set_failure:
              ldai 1
              return
        check-type: none
        description: Check `ori` with -1 and various values.
        cases:
          - values: ["0"]
          - values: ["1"]
          - values: ["-1"]
          - values: ["0x7FFFFFFF"]
          - values: ["-0x7FFFFFFF"]
          - values: ["0x80000000"]
          - values: ["-0x80000000"]
          - values: ["0xFFFFFFFF"]
          - values: ["-0xFFFFFFFF"]


      - file-name: op_imm_32_pmax
        isa:
          instructions:
            - sig: ori imm:i32
              acc: inout:i32
              format: [op_imm_32]
        code-template: |
          #
              ldai 0x7FFFFFFF
              ori %s
              movi v0, %s
              jne v0, set_failure
              ldai 0
              return
          set_failure:
              ldai 1
              return
        check-type: none
        description: Check `ori` with +max and various values.
        cases:
          - values: ["0", "0x7FFFFFFF"]
          - values: ["1", "0x7FFFFFFF"]
          - values: ["-1", "0xFFFFFFFF"]
          - values: ["0x7FFFFFFF", "0x7FFFFFFF"]
          - values: ["-0x7FFFFFFF", "0xFFFFFFFF"]
          - values: ["0x80000000", "0xFFFFFFFF"]
          - values: ["-0x80000000", "0xFFFFFFFF"]
          - values: ["0xFFFFFFFF", "0xFFFFFFFF"]
          - values: ["-0xFFFFFFFF", "0x7FFFFFFF"]


      - file-name: op_imm_32_nmax
        isa:
          instructions:
            - sig: ori imm:i32
              acc: inout:i32
              format: [op_imm_32]
        code-template: |
          #
              ldai -0x80000000
              ori %s
              movi v0, %s
              jne v0, set_failure
              ldai 0
              return
          set_failure:
              ldai 1
              return
        check-type: none
        description: Check `ori` with -max and various values.
        cases:
          - values: ["0", "0x80000000"]
          - values: ["1", "0x80000001"]
          - values: ["-1", "0xFFFFFFFF"]
          - values: ["0x7FFFFFFF", "0xFFFFFFFF"]
          - values: ["-0x7FFFFFFF", "0x80000001"]
          - values: ["0x80000000", "0x80000000"]
          - values: ["-0x80000000", "0x80000000"]
          - values: ["0xFFFFFFFF", "0xFFFFFFFF"]
          - values: ["-0xFFFFFFFF", "0x80000001"]


      - file-name: vals
        isa:
          instructions:
            - sig: ori imm:i32
              acc: inout:i32
              format: [op_imm_32]
        code-template: |
          #
              ldai %s
              ori %s
              movi v0, %s
              jne v0, set_failure
              ldai 0
              return
          set_failure:
              ldai 1
              return
        check-type: none
        description: Check `ori` with various values.
        tags: ['tsan']
        cases:
          - values: ["0xE7426488", "0xA3A2CB1F", "0xE7E2EF9F"]
          - values: ["0xF235ACDF", "0xDD44A81B", "0xFF75ACDF"]
          - values: ["0xFF796099", "0x7006C56B", "0xFF7FE5FB"]
          - values: ["0x738C405A", "0x82B24107", "0xF3BE415F"]
          - values: ["0xE512952D", "0xAB113E7D", "0xEF13BF7D"]
          - values: ["0x4A671C86", "0x6E7FA591", "0x6E7FBD97"]
          - values: ["0xB6FF321D", "0x887DDE6B", "0xBEFFFE7F"]
          - values: ["0x7087DE68", "0xCA657C6B", "0xFAE7FE6B"]
          - values: ["0xDAE0024B", "0x710D16E", "0xDFF0D36F"]
          - values: ["0xA7D559B3", "0x9216E6E5", "0xB7D7FFF7"]


      - file-name: type
        isa:
          verification:
            - acc_type
        tags: ['verifier']
        runner-options: ['verifier-failure', 'verifier-config']
        header-template: []
        code-template: |
          #
          .record panda.Object <external>
          .function i32 main() {
              %s
              ori 0
        check-type: exit-positive
        description: Check 'ori' with incorrect acc type.
        cases:
          - values: [ldai.64 0]
          - values: [fldai 0]
            bugid: ['7315']
          - values: [fldai.64 0]
          - values: [lda.null]
          - values: [lda.type panda.Object]
          - values: ['lda.type i32[]']
          - values: [lda.str ""]
          - values:
            - |
              #
                  newobj v0, panda.Object
                  lda.obj v0
          - values:
            - |
              #
                  movi v0, 10
                  newarr v0, v0, i32[]
                  lda.obj v0


      - file-name: uninitialized_acc
        isa:
          instructions:
            - sig: ori imm:i32
              acc: inout:i32
              format: [op_imm_32]
        description: Check 'ori' with uninitialized accumulator.
        tags: ['verifier']
        runner-options: ['verifier-failure', 'verifier-config']
        code-template: |
            #
                ori 0
        check-type: exit-positive
