# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

definitions:
  - name: PandaAssembly
    template: |
      .language PandaAssembly

tests:
  - file-name: "return.void"
    isa:
      title: Return from a void method
      description: >
        Return from the current method, i.e. restore the frame of method invoker and return control to the invoker.
        Caller should treat accumulator value as undefined and cannot use it until accumulator definition in the caller
        frame.
      verification:
        - none
      exceptions:
        - x_none
    commands:
      - file-name: "call_s_p"
        bugid: ['5271']
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        header-template: []
        code-template: |
          .function void func(%s) {
              return.void
          }

          .function i32 main() {
              %s
              call.short func%s
        check-type: exit-positive
        description: Check 'return.void' returns control flow to caller in Pandasm context with static call.
        cases:
          - values:
              - ''
              - ''
              - ''
          - values:
              - 'i32 a0'
              - 'movi v0, 0'
              - ', v0'
          - values:
              - 'i32 a0, f64 a1'
              - |
                #
                    movi v0, 0
                    fmovi.64 v1, 1.2
              - ', v0, v1'

      - file-name: "call_s_j"
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        header-template: [PandaAssembly]
        runner-options: [use-pa]
        code-template: |
          .function void func(%s) {
              return.void
          }

          .function i32 main() {
              %s
              call.short func%s
        check-type: exit-positive
        description: Check 'return.void' returns control flow to caller in PandaAssembly context with static call.
        cases:
          - values:
              - ''
              - ''
              - ''
          - values:
              - 'i32 a0'
              - 'movi v0, 0'
              - ', v0'
          - values:
              - 'i32 a0, f64 a1'
              - |
                #
                    movi v0, 0
                    fmovi.64 v1, 1.2
              - ', v0, v1'

      - file-name: "call_v_p"
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        header-template: []
        code-template: |
          .record R {}
          .function void R.func(R a0%s) {
              return.void
          }

          .function i32 main() {
              %s
              newobj v10, R
              call.virt R.func, v10%s
        check-type: exit-positive
        description: Check 'return.void' returns control flow to caller in Pandasm context with virtual call.
        cases:
          - values:
              - ''
              - ''
              - ''
          - values:
              - ', i32 a1'
              - 'movi v0, 0'
              - ', v0'
          - values:
              - ', i32 a1, f64 a2'
              - |
                #
                    movi v0, 0
                    fmovi.64 v1, 1.2
              - ', v0, v1'

      - file-name: "call_v_j"
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        header-template: [PandaAssembly]
        runner-options: [use-pa]
        code-template: |
          .record R {}
          .function void R.func(R a0%s) {
              return.void
          }

          .function i32 main() {
              %s
              newobj v10, R
              call.virt R.func, v10%s
        check-type: exit-positive
        description: Check 'return.void' returns control flow to caller in PandaAssembly context with virtual call.
        cases:
          - values:
              - ''
              - ''
              - ''
          - values:
              - ', i32 a1'
              - 'movi v0, 0'
              - ', v0'
          - values:
              - ', i32 a1, f64 a2'
              - |
                #
                    movi v0, 0
                    fmovi.64 v1, 1.2
              - ', v0, v1'

      - file-name: "type"
        tags: [verifier]
        bugid: ['1324']
        runner-options: ['verifier-failure', 'verifier-config']
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        header-template: []
        code-template: |
          .record panda.Object <external>
          .function %s func() {
              *s
              return.void
          }

          .function i32 main() {
              call.short func
        check-type: exit-positive
        description: Check that 'return.void' is used with correct function return type.
        template-cases:
          - values: [u1]
          - values: [i8]
          - values: [u8]
          - values: [i16]
          - values: [u16]
          - values: [i32]
          - values: [u32]
          - values: [i64]
          - values: [u64]
          - values: [f32]
          - values: [f64]
          - values: [panda.Object]
        cases:
          - values: ['']
          - values: [ldai 0]
          - values: [ldai.64 0]
          - values: [fldai 0]
          - values: [fldai.64 0]
          - values: [lda.null]
          - values: [lda.str "some string"]
          - values:
              - initobj Obj.ctor
            case-header-template: [obj_ctor]
          - values:
              - lda.type Obj
            case-header-template: [obj_ctor]

      - file-name: "wrong_return"
        tags: [verifier]
        runner-options: ['verifier-failure', 'verifier-config']
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        header-template: []
        code-template: |
          .function void func() {
              %s
          }

          .function i32 main() {
              call.short func
        check-type: exit-positive
        description: Check the verifier behavior when expected 'return.void' is not given.
        cases:
          - values:
            - |
              #
                  lda.null
          - values:
            - |
              #
                  ldai 0
                  return
          - values:
            - |
              #
                  fldai.64 1.0
                  return.64
          - values:
            - |
              #
                  lda.str "test"
                  return.obj

      - file-name: "regs_restore"
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        header-template: []
        check-type: none
        code-template: |
          .function void func(%s) {
              %s
              return.void
          }

          .function i32 main() {
              %s
              call.short func%s
              %s
        description: Check that after 'return.void' register are restored in caller.
        cases:
          - values:
              - ''
              - ''
              - 'movi v0, 0x12345678'
              - ''
              - |
                #
                    ldai 0x12345678
                    jne v0, exit_failure
                    ldai 0
                    return
                exit_failure: ldai 1
                    return
            description: "Register is not used in function."
          - values:
              - 'i32 a0'
              - 'movi v0, 0x87654321'
              - 'movi v0, 0x12345678'
              - ', v0'
              - |
                #
                    ldai 0x12345678
                    jne v0, exit_failure
                    ldai 0
                    return
                exit_failure: ldai 1
                    return
            description: "Register is used in function."

          - values:
              - 'i32 a0'
              - ''
              - 'movi v0, 0x12345678'
              - ', v0'
              - |
                #
                    ldai 0x12345678
                    jne v0, exit_failure
                    ldai 0
                    return
                exit_failure: ldai 1
                    return
            description: "Register is not used in function."

          - values:
              - 'f64 a0, i64 a1'
              - |
                #
                    fmovi.64 v0, 0
                    movi.64 v1, 0
              - |
                #
                    fmovi.64 v0, 3.1415926535
                    movi.64 v1, 0x123456789ABCDEF0
              - ', v0, v1'
              - |
                #
                    fldai.64 3.1415926535
                    fcmpg.64 v0
                    jeqz check2
                    ldai 1
                    return
                check2:
                    ldai.64 0x123456789ABCDEF0
                    cmp.64 v1
                    jnez exit_failure
                    ldai 0
                    return
                exit_failure:
                    ldai 1
                    return
            description: "Registers are used in function."

      - file-name: "undef_acc_s_p"
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        tags: [verifier]
        bugid: ['1324']
        runner-options: ['verifier-failure', 'verifier-config']
        description: Check accumulator value if undefined after 'return.void' in Pandasm context with static call.
        header-template: []
        code-template: |
          .function void func() {
              return.void
          }

          .function i32 main() {
              ldai 0
              call.short func
              sta v0
        check-type: exit-positive

      - file-name: "undef_acc_s_j"
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        tags: [verifier]
        bugid: ['1324']
        runner-options: ['verifier-failure', 'verifier-config', 'use-pa']
        description: Check accumulator value if undefined after 'return.void' in PandaAssembly context with static call.
        header-template: [PandaAssembly]
        code-template: |
          .function void func() {
              return.void
          }

          .function i32 main() {
              ldai 0
              call.short func
              sta v0
        check-type: exit-positive

      - file-name: "undef_acc_v_p"
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        tags: [verifier]
        bugid: ['1324']
        runner-options: ['verifier-failure', 'verifier-config']
        description: Check accumulator value if undefined after 'return.void' in Pandasm context with virtual call.
        header-template: []
        code-template: |
          .record R {}
          .function void R.func(R a0) {
              return.void
          }

          .function i32 main() {
              ldai 0
              newobj v10, R
              call.virt.short R.func, v10
              sta v0
        check-type: exit-positive

      - file-name: "undef_acc_v_j"
        isa:
          instructions:
            - sig: return.void
              acc: none
              format: [op_none]
        tags: [verifier]
        bugid: ['1324']
        runner-options: ['verifier-failure', 'verifier-config', 'use-pa']
        description: Check accumulator value if undefined after 'return.void' in PandaAssembly context with virtual call.
        header-template: [PandaAssembly]
        code-template: |
          .record R {}
          .function void R.func(R a0) {
              return.void
          }

          .function i32 main() {
              ldai 0
              newobj v10, R
              call.virt.short R.func, v10
              sta v0
        check-type: exit-positive
