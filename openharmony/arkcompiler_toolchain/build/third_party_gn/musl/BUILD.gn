# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("$build_root/third_party_gn/musl/musl_template.gni")

musl_libs("soft_libs") {
}

group("musl_headers") {
  deps = [
    ":FreeBSD_copy",
    ":copy_uapi_file",
    ":create_alltypes_h_file",
    ":create_syscall_h_file",
    ":create_version_h_file",
    ":musl_copy_inc_arpa_file",
    ":musl_copy_inc_hook_file",
    ":musl_copy_inc_net_file",
    ":musl_copy_inc_netinet_file",
    ":musl_copy_inc_netpacket_file",
  ]
}

action("create_porting_src") {
  script = "//third_party/musl/scripts/porting.sh"

  sources_dir = [ "//third_party/musl" ]

  outdir = [ "${target_out_dir}/${musl_ported_dir}" ]

  src_files = musl_src_arch_file
  src_files += musl_src_file
  src_files += musl_src_ldso
  src_files += musl_inc_bits_files
  src_files += musl_inc_arpa_files
  src_files += musl_inc_net_files
  src_files += musl_inc_netinet_files
  src_files += musl_inc_netpacket_files
  src_files += musl_inc_scsi_files
  src_files += musl_inc_sys_files
  src_files += musl_inc_fortify_files
  src_files += musl_inc_root_files
  src_files += musl_inc_info_files
  src_files += musl_inc_trace_files

  src_files += [
    "crt/Scrt1.c",
    "crt/crt1.c",
    "crt/rcrt1.c",
    "tools/mkalltypes.sed",
    "arch/${musl_arch}/bits/alltypes.h.in",
    "arch/${musl_arch}/bits/syscall.h.in",
    "include/alltypes.h.in",
    "VERSION",
    "tools/version.sh",
    "tools/install.sh",
    "scripts/install.py",
    "scripts/create_alltypes.sh",
    "scripts/create_vesion.sh",
    "scripts/create_syscall.sh",
  ]
  src_files += [
    "crt/${musl_arch}/crti.s",
    "crt/${musl_arch}/crtn.s",
  ]

  args = [ "-i" ] + rebase_path(sources_dir)
  args += [ "-o" ] + rebase_path(outdir)
  args += [ "-p" ] + [ "${musl_target_os}" ]
  foreach(i, src_files) {
    foreach(s, musl_src_files_ext) {
      if (i == s) {
        src_files -= [ "${s}" ]
      }
    }
  }

  outputs = []
  foreach(s, src_files) {
    outputs += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }

  foreach(s, musl_src_files_ext) {
    outputs += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }

  inputs = []
  foreach(i, src_files) {
    foreach(s, musl_src_linux_files) {
      if (i == s) {
        src_files -= [ "${s}" ]
      }
    }
  }
  foreach(s, src_files) {
    inputs += [ "${musl_dir}/${s}" ]
  }

  foreach(s, musl_src_files_ext) {
    inputs += [ "${musl_dir}/${s}" ]
  }
}

action("create_alltypes_h_file") {
  script = "${target_out_dir}/${musl_ported_dir}/scripts/create_alltypes.sh"

  sources = [ "${target_out_dir}/${musl_ported_dir}/tools/mkalltypes.sed" ]

  sources += [
    "${target_out_dir}/${musl_ported_dir}/arch/${musl_arch}/bits/alltypes.h.in",
    "${target_out_dir}/${musl_ported_dir}/include/alltypes.h.in",
  ]

  outputs = [ "${target_out_dir}/${musl_inc_out_dir}/bits/alltypes.h" ]

  args = [ "-o" ] + rebase_path(outputs, root_build_dir) +
         rebase_path(sources, root_build_dir)

  deps = [ ":create_porting_src" ]
}

action("create_version_h_file") {
  script = "${target_out_dir}/${musl_ported_dir}/scripts/create_vesion.sh"

  sources = [
    "${target_out_dir}/${musl_ported_dir}/VERSION",
    "${target_out_dir}/${musl_ported_dir}/tools/version.sh",
  ]

  outputs = [ "${target_out_dir}/${musl_inc_out_dir}/version.h" ]

  args =
      rebase_path(sources, root_build_dir) +
      [ rebase_path("${target_out_dir}/${musl_inc_out_dir}", root_build_dir) ]

  deps = [ ":create_porting_src" ]
}

action("create_syscall_h_file") {
  script = "${target_out_dir}/${musl_ported_dir}/scripts/create_syscall.sh"

  sources = [
    "${target_out_dir}/${musl_ported_dir}/arch/${musl_arch}/bits/syscall.h.in",
  ]

  outputs = [ "${target_out_dir}/${musl_inc_out_dir}/bits/syscall.h" ]

  args = rebase_path(sources, root_build_dir) +
         rebase_path(outputs, root_build_dir)

  deps = [ ":create_porting_src" ]
}

uapi_from = "local"
uapi_full_path = rebase_path(musl_uapi_dir)
arguments_uapi = [ "-c" ]

# exclude these files because they need special treatment
if (uapi_from == "make") {
  exclude_files = "^asm\$|^scsi\$"
} else {
  exclude_files = "^asm-arm\$|^asm-arm64\$|^scsi\$"
}

arguments_uapi +=
    [ "ls ${uapi_full_path} | grep -Ev " + "\"" + "${exclude_files}" + "\"" ]
uspi_files = exec_script("/bin/sh", arguments_uapi, "list lines")

# Generate a copy target for each file
foreach(file, uspi_files) {
  copy("copy_uapi_${file}") {
    sources = [ "${musl_uapi_dir}/${file}" ]
    outputs = [ "${target_out_dir}/${musl_inc_out_dir}/${file}" ]
  }
}

group("copy_uapi_scsi") {
  deps = []
  sources = []
  outputs = []
  uapi_scsi_dir = rebase_path("${musl_uapi_dir}/scsi")
  arguments_scsi = [ "-c" ]
  arguments_scsi += [ "ls ${uapi_scsi_dir}" ]
  uapi_scsi_files = exec_script("/bin/sh", arguments_scsi, "list lines")

  # Generate a copy target for each file in scsi dir to avoid being influenced by musl_copy_inc_scsi output
  foreach(file, uapi_scsi_files) {
    copy("copy_uapi_scsi_${file}") {
      sources += [ "${musl_uapi_dir}/scsi/${file}" ]
      outputs += [ "${target_out_dir}/${musl_inc_out_dir}/scsi/${file}" ]
    }
    deps += [ ":copy_uapi_scsi_${file}" ]
  }
}

copy("copy_uapi_asm") {
  if (uapi_from == "local") {
    if ("${musl_arch}" == "arm") {
      file_name = "asm-arm"
    } else {  # aarch64 and x86_64 use same file
      file_name = "asm-arm64"
    }
    sources = [ "${musl_uapi_dir}/${file_name}/asm" ]
  } else {
    sources = [ "${musl_uapi_dir}/asm" ]
  }
  outputs = [ "${target_out_dir}/${musl_inc_out_dir}/asm" ]
}

group("copy_uapi_file") {
  deps = [ ":copy_uapi_scsi" ]

  # We need do different processing for asm according to the source of uapi
  deps += [ ":copy_uapi_asm" ]
  foreach(file, uspi_files) {
    deps += [ ":copy_uapi_${file}" ]
  }
}

copy("musl_copy_inc_hook_file") {
  sources = musl_inc_hook_files
  outputs = [ "${target_out_dir}/${musl_inc_out_dir}/{{source_file_part}}" ]
}

copy("musl_copy_inc_bits") {
  sources = []
  sources_bits = musl_inc_bits_files
  foreach(s, sources_bits) {
    sources += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }
  outputs =
      [ "${target_out_dir}/${musl_inc_out_dir}/bits/{{source_file_part}}" ]
  deps = [ ":create_porting_src" ]
}

copy("musl_copy_inc_fortify") {
  sources = []
  sources_fortify = musl_inc_fortify_files
  foreach(s, sources_fortify) {
    sources += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }
  outputs =
      [ "${target_out_dir}/${musl_inc_out_dir}/fortify/{{source_file_part}}" ]
  deps = [ ":create_porting_src" ]
}

copy("musl_copy_inc_root") {
  sources = []
  sources_inc_root = musl_inc_root_files
  foreach(s, sources_inc_root) {
    sources += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }
  outputs = [ "${target_out_dir}/${musl_inc_out_dir}/{{source_file_part}}" ]
  deps = [ ":create_porting_src" ]
}

copy("musl_copy_inc_sys") {
  sources = []
  sources_inc_sys = musl_inc_sys_files
  foreach(s, sources_inc_sys) {
    sources += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }
  outputs = [ "${target_out_dir}/${musl_inc_out_dir}/sys/{{source_file_part}}" ]
  deps = [ ":create_porting_src" ]
}

copy("musl_copy_inc_netinet_file") {
  sources = []
  sources_netinet_file = musl_inc_netinet_files
  foreach(s, sources_netinet_file) {
    sources += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }
  outputs =
      [ "${target_out_dir}/${musl_inc_out_dir}/netinet/{{source_file_part}}" ]
  deps = [ ":create_porting_src" ]
}

copy("musl_copy_inc_arpa_file") {
  sources = []
  sources_arpa_file = musl_inc_arpa_files
  foreach(s, sources_arpa_file) {
    sources += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }
  outputs =
      [ "${target_out_dir}/${musl_inc_out_dir}/arpa/{{source_file_part}}" ]
  deps = [ ":create_porting_src" ]
}

copy("musl_copy_inc_net_file") {
  sources = []
  sources_net_file = musl_inc_net_files
  foreach(s, sources_net_file) {
    sources += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }
  outputs = [ "${target_out_dir}/${musl_inc_out_dir}/net/{{source_file_part}}" ]
  deps = [ ":create_porting_src" ]
}

copy("musl_copy_inc_netpacket_file") {
  sources = []
  sources_netpacket_file = musl_inc_netpacket_files
  foreach(s, sources_netpacket_file) {
    sources += [ "${target_out_dir}/${musl_ported_dir}/${s}" ]
  }
  outputs =
      [ "${target_out_dir}/${musl_inc_out_dir}/netpacket/{{source_file_part}}" ]
  deps = [ ":create_porting_src" ]
}

group("FreeBSD_copy") {
  deps = [ ":FreeBSD_sys_headers" ]
}

copy("FreeBSD_sys_headers") {
  sources = freebsd_sys_headers
  outputs = [ "${target_out_dir}/${musl_inc_out_dir}/sys/{{source_file_part}}" ]
  deps = [ ":create_porting_src" ]
}
