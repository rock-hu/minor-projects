# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//third_party/FreeBSD/FreeBSD.gni")
import("//third_party/optimized-routines/optimized-routines.gni")
import("$build_root/ark.gni")
import("$build_root/config/clang/clang.gni")
import("$build_root/third_party_gn/musl/musl_src.gni")

_libs_path_prefix = "."
if (is_asan) {
  asan = "-asan"
} else {
  asan = ""
}
musl_linker_so_out_dir =
    "${root_out_dir}/common/common/libc/${_libs_path_prefix}"
musl_linker_so_out_path =
    "${musl_linker_so_out_dir}/ld-musl-${musl_arch}${asan}.so.1"
musl_linker_so_out_dir_for_qemu = "${root_out_dir}/${so_dir_for_qemu}/lib"
musl_linker_so_out_path_for_qemu =
    "${musl_linker_so_out_dir_for_qemu}/ld-musl-${musl_arch}${asan}.so.1"

template("musl_libs") {
  no_default_deps = true

  forward_variables_from(invoker, [ "*" ])
  musl_ported_root = "${target_out_dir}/${musl_ported_dir}"
  _libs_out_dir = "usr/lib/${musl_target_triple}"

  porting_deps = [
    "$build_root/third_party_gn/musl:create_alltypes_h_file",
    "$build_root/third_party_gn/musl:create_porting_src",
    "$build_root/third_party_gn/musl:create_syscall_h_file",
    "$build_root/third_party_gn/musl:create_version_h_file",
  ]

  group(target_name) {
    deps = [
      ":soft_create_linker",
      ":soft_libc_musl_shared",
      ":soft_libc_musl_static",
      ":soft_musl_crt_libs",
    ]
  }

  group("soft_shared_libs") {
    deps = [
      ":musl_headers",
      ":soft_libc_musl_shared",
      ":soft_libcrypt",
      ":soft_libdl",
      ":soft_libm",
      ":soft_libpthread",
      ":soft_libresolv",
      ":soft_librt",
      ":soft_libutil",
      ":soft_libxnet",
      ":soft_musl_crt_libs",
    ]
  }

  group("soft_static_libs") {
    deps = [
      ":musl_headers",
      ":soft_libc_musl_static",
      ":soft_libcrypt",
      ":soft_libdl",
      ":soft_libm",
      ":soft_libpthread",
      ":soft_libresolv",
      ":soft_librt",
      ":soft_libutil",
      ":soft_libxnet",
      ":soft_musl_crt_libs",
    ]
  }

  group("soft_musl_crt_libs") {
    deps = [ ":soft_musl_crt_install_action" ]
  }

  # part of default_compiler_configs from build/config/BUILDCONFIG.gn
  musl_inherited_configs = [
    "$build_root/config/compiler:compiler",
    "$build_root/config/compiler:ark_code",
    "$build_root/config/compiler:default_include_dirs",
    "$build_root/config/compiler:default_optimization",
    "$build_root/config/compiler:runtime_config",
  ]

  config("soft_musl_config") {
    configs = [ "$build_root/config/compiler:compiler_cpu_abi" ]

    include_dirs = [
      "$musl_ported_root/arch/generic",
      "$musl_ported_root/arch/${musl_arch}",
      "$musl_ported_root/src/include",
      "$musl_ported_root/src/internal",
      "$musl_ported_root/include",
      "${target_out_dir}/${musl_inc_out_dir}",
    ]

    cflags_basic = [
      "-Wl,-z,relro,-z,now,-z,noexecstack",
      "-Wall",
      "--target=${musl_target_triple}",
    ]

    if (musl_arch == "arm") {
      cflags_basic += [ "-mtp=cp15" ]
    } else if (musl_arch == "aarch64") {
    }

    cflags_auto = [
      "-Qunused-arguments",
      "-Werror=pointer-arith",
      "-Werror=pointer-sign",
      "-Werror=implicit-int",
      "-fno-omit-frame-pointer",
      "-Werror=implicit-function-declaration",
      "-fdata-sections",
      "-ffunction-sections",
      "-fasynchronous-unwind-tables",
      "-funwind-tables",
      "-pipe",
      "-g",
      "-D_XOPEN_SOURCE=700",
      "-Wno-int-conversion",
    ]

    if (!is_asan) {
      cflags_auto += [
        "-DHOOK_ENABLE",
        "-DOHOS_SOCKET_HOOK_ENABLE",
      ]
    }

    cflags_auto += [ "-DRESERVE_SIGNAL_STACK" ]
    cflags_auto += [ "-DDFX_SIGNAL_LIBC" ]

    cflags_c99fse = [
      "-std=c99",
      "-nostdinc",
      "-Wa,--noexecstack",
    ]

    cflags_all = cflags_basic + cflags_c99fse + cflags_auto

    cflags = cflags_all

    defines = [ "BROKEN_VFP_ASM" ]
    defines += [ "FEATURE_ATEXIT_CB_PROTECT" ]

    if (is_standard_system) {
      defines += [
        "OHOS_DNS_PROXY_BY_NETSYS=1",
        "OHOS_PERMISSION_INTERNET=1",
        "OHOS_DISABLE_IPV6=0",
      ]
    }

    if (!is_standard_system && defined(musl_enable_musl_log)) {
      if (musl_enable_musl_log) {
        defines += [ "ENABLE_MUSL_LOG" ]
      }
    }

    dynamic_list = rebase_path("$musl_ported_root/dynamic.list")

    ldflags = cflags_all
    ldflags += [
      "-Wl,--dynamic-list=${dynamic_list}",
      "-Wl,--exclude-libs=ALL",
      "-Wl,--no-undefined",
      "-Wl,--gc-sections",
      "-Wl,--sort-common",
      "-Wl,--sort-section,alignment",
      "-fuse-ld=lld",
      "--target=${musl_target_triple}",
    ]
    if (current_cpu == "arm" || current_cpu == "arm64") {
      ldflags += [ "-Wl,--hash-style=both" ]
    } else {
      ldflags += [ "-Wl,--hash-style=sysv" ]
    }
    asmflags = cflags
  }

  config("soft_hook") {
    defines = []
    configs = []

    if (is_posix) {
      configs += [ "$build_root/config/posix:runtime_config" ]
    }

    cflags_cc = []

    defines = [
      "__GNU_SOURCE=1",  # Necessary for clone().
      "CHROMIUM_CXX_TWEAK_INLINES",  # Saves binary size.
    ]

    defines += [
      "__MUSL__",
      "_LIBCPP_HAS_MUSL_LIBC",
      "__BUILD_LINUX_WITH_CLANG",
    ]

    if (!is_asan) {
      defines += [
        "HOOK_ENABLE",
        "OHOS_SOCKET_HOOK_ENABLE",
      ]
    }
    ldflags = [ "-nostdlib" ]

    libs = []

    if (is_component_build) {
      defines += [ "COMPONENT_BUILD" ]
    }
  }

  config("soft_jemalloc") {
    configs = []

    include_dirs = [
      "$musl_ported_root/arch/${musl_arch}",
      "$musl_ported_root/arch/generic",
      "$musl_ported_root/src/internal",
      "$musl_ported_root/src/include",
      "$musl_ported_root/include",
      "${target_out_dir}/${musl_inc_out_dir}",
      "${clang_base_path}/lib/clang/${clang_version}/include",
    ]

    cflags = [
      "--target=${musl_target_triple}",
      "-D_GNU_SOURCE",
      "-D_REENTRANT",
      "-Wall",
      "-Wshorten-64-to-32",
      "-Wsign-compare",
      "-Wundef",
      "-Wno-format-zero-length",
      "-pipe",
      "-g3",
      "-fvisibility=hidden",
      "-O3",
      "-funroll-loops",
      "-funwind-tables",

      # The following flags are for avoiding errors when compiling.
      "-Wno-unused-parameter",
      "-Wno-unused-function",
      "-Wno-missing-field-initializers",

      "-U_FORTIFY_SOURCE",

      "-DOHOS_ENABLE_TCACHE",  # For jemalloc 5.X
      "-DJEMALLOC_TCACHE",  # For jemalloc 4.X
      "-DOHOS_LG_TCACHE_MAXCLASS_DEFAULT=16",
      "-DOHOS_NUM_ARENAS=2",  # For jemalloc 5.X
      "-DOHOS_MAX_ARENAS=2",  # For jemalloc 4.X
      "-DOHOS_TCACHE_NSLOTS_SMALL_MAX=8",
      "-DOHOS_TCACHE_NSLOTS_LARGE=16",
    ]

    if (is_debug || musl_secure_level > 1) {
      cflags += [ "-DOHOS_TCACHE_NSLOTS_RANDOM" ]
    }

    if (musl_arch == "arm") {
      cflags += [
        "-march=armv7-a",
        "-DOHOS_LG_CHUNK_DEFAULT=19",  # For jemalloc 4.X
      ]
    } else if (musl_arch == "aarch64") {
      cflags += [
        "-march=armv8",
        "-DOHOS_LG_CHUNK_DEFAULT=19",  # For jemalloc 4.X
      ]
    } else if (musl_arch == "x86_64") {
      cflags += [ "-march=x86-64" ]
    }

    include_dirs += [
      "//third_party",
      "//third_party/musl/src/include/",
      "//third_party/jemalloc/include/",
      "//third_party/jemalloc/include/jemalloc/internal",
      "//third_party/jemalloc/include/jemalloc",
      "//third_party/FreeBSD/contrib/libexecinfo",
    ]
  }

  source_set("soft_musl_crt") {
    sources = [
      "$musl_ported_root/crt/${musl_arch}/crti.s",
      "$musl_ported_root/crt/${musl_arch}/crtn.s",
      "$musl_ported_root/crt/Scrt1.c",
      "$musl_ported_root/crt/crt1.c",
      "$musl_ported_root/crt/crtplus.c",
      "$musl_ported_root/crt/rcrt1.c",
    ]

    defines = [ "CRT" ]

    configs -= musl_inherited_configs
    configs += [ ":soft_musl_config" ]
    cflags = [
      "-fPIC",
      "-fno-stack-protector",
      "-ffreestanding",
    ]

    deps = porting_deps

    asmflags = cflags
  }

  source_set("soft_musl_src") {
    sources_orig = []
    sources = []
    include_dirs = []
    sources_orig = musl_src_arch_file + musl_src_file
    sources_orig -= musl_src_filterout
    sources_orig -= [
      "src/string/mempcpy.c",
      "src/string/memset.c",
      "src/env/__init_tls.c",
      "src/env/__libc_start_main.c",
      "src/env/__stack_chk_fail.c",
      "src/stdlib/qsort.c",
      "src/stdlib/qsort_nr.c",
      "src/string/strncpy.c",
    ]

    freebsd_files = [
      "//third_party/FreeBSD/contrib/gdtoa/strtod.c",
      "//third_party/FreeBSD/contrib/gdtoa/gethex.c",
      "//third_party/FreeBSD/contrib/gdtoa/smisc.c",
      "//third_party/FreeBSD/contrib/gdtoa/misc.c",
      "//third_party/FreeBSD/contrib/gdtoa/strtord.c",
      "//third_party/FreeBSD/contrib/gdtoa/hexnan.c",
      "//third_party/FreeBSD/contrib/gdtoa/gmisc.c",
      "//third_party/FreeBSD/contrib/gdtoa/hd_init.c",
      "//third_party/FreeBSD/contrib/gdtoa/strtodg.c",
      "//third_party/FreeBSD/contrib/gdtoa/ulp.c",
      "//third_party/FreeBSD/contrib/gdtoa/strtof.c",
      "//third_party/FreeBSD/contrib/gdtoa/sum.c",
      "//third_party/FreeBSD/lib/libc/gdtoa/glue.c",
      "//third_party/FreeBSD/lib/libc/stdio/parsefloat.c",
      "//third_party/FreeBSD/contrib/tcp_wrappers/strcasecmp.c",
      "//third_party/FreeBSD/lib/libc/gen/arc4random.c",
      "//third_party/FreeBSD/lib/libc/gen/arc4random_uniform.c",
      "//third_party/FreeBSD/lib/libc/stdlib/qsort.c",
      "//third_party/FreeBSD/lib/libc/stdlib/strtoimax.c",
      "//third_party/FreeBSD/lib/libc/stdlib/strtoul.c",
      "//third_party/FreeBSD/lib/libc/stdlib/strtoumax.c",
      "//third_party/musl/third_party/openbsd/lib/libc/string/strncpy.c",
    ]

    if (musl_arch == "arm") {
      sources_orig -= [
        "src/thread/${musl_arch}/__set_thread_area.c",
        "src/string/arm/memcpy.S",
        "src/string/memchr.c",
        "src/string/strcmp.c",
        "src/string/strlen.c",
        "src/math/sincosf.c",
        "src/math/expf.c",
        "src/math/exp2f.c",
        "src/math/exp2l.c",
        "src/math/exp2.c",
        "src/math/log.c",
        "src/math/logl.c",
        "src/math/log2.c",
        "src/math/log2f.c",
        "src/math/log2l.c",
        "src/math/logf.c",
        "src/math/log_data.c",
        "src/math/logf_data.c",
        "src/math/log2_data.c",
        "src/math/log2f_data.c",
        "src/math/exp2f_data.c",
        "src/math/pow.c",
        "src/math/powf.c",
        "src/math/powl.c",
        "src/math/sinf.c",
        "src/math/cosf.c",
        "src/linux/flock.c",
      ]
    } else if (musl_arch == "aarch64") {
      sources_orig -= [
        "src/thread/${musl_arch}/__set_thread_area.s",
        "src/string/memcpy.c",
        "src/string/memmove.c",
        "src/string/memchr.c",
        "src/string/memcmp.c",
        "src/string/strcpy.c",
        "src/string/strcmp.c",
        "src/string/strlen.c",
        "src/string/stpcpy.c",
        "src/string/strchr.c",
        "src/string/strrchr.c",
        "src/string/strnlen.c",
        "src/string/strncmp.c",
        "src/math/sincosf.c",
        "src/math/sinf.c",
        "src/math/cosf.c",
        "src/math/cos.c",
        "src/math/exp.c",
        "src/math/exp2.c",
        "src/math/exp2f.c",
        "src/math/expf.c",
        "src/math/log.c",
        "src/math/log10.c",
        "src/math/log2.c",
        "src/math/log2f.c",
        "src/math/logb.c",
        "src/math/logf.c",
        "src/math/sin.c",
        "src/math/sincos.c",
        "src/math/pow.c",
        "src/math/powf.c",
        "src/linux/flock.c",
      ]
    } else if (musl_arch == "x86_64") {
      sources_orig -= [
        "src/thread/${musl_arch}/__set_thread_area.s",
        "src/linux/flock.c",
      ]
    }

    defines = []
    defines += [ "FEATURE_ICU_LOCALE" ]

    # There are two ways to implement cxa_thread_atexit_impl:
    # - CXA_THREAD_USE_TSD(default): use pthread_key_xxx to implement cxa_thread_atexit_impl.
    # - CXA_THREAD_USE_TLS: put dtors in pthread to implement cxa_thread_atexit_impl.
    defines += [ "CXA_THREAD_USE_TSD" ]

    if (musl_arch == "arm") {
      defines += [ "MUSL_ARM_ARCH" ]
    }
    if (musl_arch == "aarch64") {
      defines += [ "MUSL_AARCH64_ARCH" ]
    }
    if (musl_arch == "x86_64") {
      defines += [ "MUSL_X86_64_ARCH" ]
    }
    if (musl_secure_level > 0) {
      defines += [ "MALLOC_FREELIST_HARDENED" ]
    }
    if (musl_secure_level > 1) {
      defines += [ "MALLOC_FREELIST_QUARANTINE" ]
    }
    if (musl_secure_level > 2) {
      defines += [ "MALLOC_RED_ZONE" ]
    }
    if (is_debug || musl_secure_level >= 3) {
      defines += [ "MALLOC_SECURE_ALL" ]
    }

    if (musl_iterate_and_stats_api) {
      defines += [ "MUSL_ITERATE_AND_STATS_API" ]
    }

    foreach(s, sources_orig) {
      sources += [ "$musl_ported_root/${s}" ]
    }
    if (musl_arch == "arm") {
      sources += [
        "$OPTRTDIR/math/cosf.c",
        "$OPTRTDIR/math/exp2.c",
        "$OPTRTDIR/math/exp2f.c",
        "$OPTRTDIR/math/exp2f_data.c",
        "$OPTRTDIR/math/expf.c",
        "$OPTRTDIR/math/log.c",
        "$OPTRTDIR/math/log2.c",
        "$OPTRTDIR/math/log2_data.c",
        "$OPTRTDIR/math/log2f.c",
        "$OPTRTDIR/math/log2f_data.c",
        "$OPTRTDIR/math/log_data.c",
        "$OPTRTDIR/math/logf.c",
        "$OPTRTDIR/math/logf_data.c",
        "$OPTRTDIR/math/pow.c",
        "$OPTRTDIR/math/powf.c",
        "$OPTRTDIR/math/sincosf.c",
        "$OPTRTDIR/math/sincosf_data.c",
        "$OPTRTDIR/math/sinf.c",
        "$OPTRTDIR/string/arm/memchr.S",
        "$OPTRTDIR/string/arm/memcpy.S",
        "$OPTRTDIR/string/arm/memset.S",
        "$OPTRTDIR/string/arm/strcmp.S",
        "$OPTRTDIR/string/arm/strlen-armv6t2.S",
      ]
      sources += freebsd_files
      asmflags = [
        "-D__memcpy_arm = memcpy",
        "-D__memchr_arm = memchr",
        "-D__memset_arm = memset",
        "-D__strcmp_arm = strcmp",
        "-D__strlen_armv6t2 = strlen",
      ]
    } else if (musl_arch == "aarch64") {
      sources += freebsd_files
      if (defined(ARM_FEATURE_SVE)) {
        sources += [
          "$OPTRTDIR/string/aarch64/memchr-sve.S",
          "$OPTRTDIR/string/aarch64/memcmp-sve.S",
          "$OPTRTDIR/string/aarch64/memcpy.S",
          "$OPTRTDIR/string/aarch64/memset.S",
          "$OPTRTDIR/string/aarch64/stpcpy-sve.S",
          "$OPTRTDIR/string/aarch64/strchr-sve.S",
          "$OPTRTDIR/string/aarch64/strchrnul-sve.S",
          "$OPTRTDIR/string/aarch64/strcmp-sve.S",
          "$OPTRTDIR/string/aarch64/strcpy-sve.S",
          "$OPTRTDIR/string/aarch64/strlen-sve.S",
          "$OPTRTDIR/string/aarch64/strncmp-sve.S",
          "$OPTRTDIR/string/aarch64/strnlen-sve.S",
          "$OPTRTDIR/string/aarch64/strrchr-sve.S",
        ]
        asmflags = [
          "-D__memcpy_aarch64 = memcpy",
          "-D__memset_aarch64 = memset",
          "-D__memcmp_aarch64_sve = memcmp",
          "-D__memchr_aarch64_sve = memchr",
          "-D__strcmp_aarch64_sve = strcmp",
          "-D__strlen_aarch64_sve = strlen",
          "-D__strcpy_aarch64_sve = strcpy",
          "-D__stpcpy_aarch64_sve = stpcpy",
          "-D__strchr_aarch64_sve = strchr",
          "-D__strrchr_aarch64_sve = strrchr",
          "-D__strchrnul_aarch64_sve = strchrnul",
          "-D__strnlen_aarch64_sve = strnlen",
          "-D__strncmp_aarch64_sve = strncmp",
        ]
      } else if (defined(ARM_FEATURE_MTE)) {
        sources += [
          "$OPTRTDIR/string/aarch64/memchr-mte.S",
          "$OPTRTDIR/string/aarch64/memcmp.S",
          "$OPTRTDIR/string/aarch64/memcpy.S",
          "$OPTRTDIR/string/aarch64/memset.S",
          "$OPTRTDIR/string/aarch64/stpcpy-mte.S",
          "$OPTRTDIR/string/aarch64/strchr-mte.S",
          "$OPTRTDIR/string/aarch64/strchrnul-mte.S",
          "$OPTRTDIR/string/aarch64/strcmp-mte.S",
          "$OPTRTDIR/string/aarch64/strcpy-mte.S",
          "$OPTRTDIR/string/aarch64/strlen-mte.S",
          "$OPTRTDIR/string/aarch64/strncmp-mte.S",
          "$OPTRTDIR/string/aarch64/strnlen.S",
          "$OPTRTDIR/string/aarch64/strrchr-mte.S",
        ]
        asmflags = [
          "-D__memcpy_aarch64 = memcpy",
          "-D__memset_aarch64 = memset",
          "-D__memcmp_aarch64 = memcmp",
          "-D__memchr_aarch64_mte = memchr",
          "-D__strcmp_aarch64_mte = strcmp",
          "-D__strlen_aarch64_mte = strlen",
          "-D__strcpy_aarch64_mte = strcpy",
          "-D__stpcpy_aarch64_mte = stpcpy",
          "-D__strchr_aarch64_mte = strchr",
          "-D__strrchr_aarch64_mte = strrchr",
          "-D__strchrnul_aarch64_mte = strchrnul",
          "-D__strnlen_aarch64 = strnlen",
          "-D__strncmp_aarch64_mte = strncmp",
        ]
      } else {
        sources += [
          "$OPTRTDIR/string/aarch64/memchr.S",
          "$OPTRTDIR/string/aarch64/memcmp.S",
          "$OPTRTDIR/string/aarch64/memcpy.S",
          "$OPTRTDIR/string/aarch64/memset.S",
          "$OPTRTDIR/string/aarch64/stpcpy.S",
          "$OPTRTDIR/string/aarch64/strchr.S",
          "$OPTRTDIR/string/aarch64/strchrnul.S",
          "$OPTRTDIR/string/aarch64/strcmp.S",
          "$OPTRTDIR/string/aarch64/strcpy.S",
          "$OPTRTDIR/string/aarch64/strlen.S",
          "$OPTRTDIR/string/aarch64/strncmp.S",
          "$OPTRTDIR/string/aarch64/strnlen.S",
          "$OPTRTDIR/string/aarch64/strrchr.S",
        ]
        asmflags = [
          "-D__memmove_aarch64 = memmove",
          "-D__memcpy_aarch64 = memcpy",
          "-D__memchr_aarch64 = memchr",
          "-D__memset_aarch64 = memset",
          "-D__memcmp_aarch64 = memcmp",
          "-D__strcmp_aarch64 = strcmp",
          "-D__strlen_aarch64 = strlen",
          "-D__strcpy_aarch64 = strcpy",
          "-D__stpcpy_aarch64 = stpcpy",
          "-D__strchr_aarch64 = strchr",
          "-D__strrchr_aarch64 = strrchr",
          "-D__strchrnul_aarch64 = strchrnul",
          "-D__strnlen_aarch64 = strnlen",
          "-D__strncmp_aarch64 = strncmp",
        ]
      }
    }

    cflags = [
      "-O3",
      "-fPIC",
      "-fstack-protector-strong",
    ]

    configs -= musl_inherited_configs
    configs += [ ":soft_musl_config" ]
    if (musl_arch == "aarch64") {
      include_dirs += [ "//third_party/FreeBSD/lib/libc/aarch64" ]
    } else if (musl_arch == "arm") {
      include_dirs += [ "//third_party/FreeBSD/lib/libc/arm" ]
    }
    include_dirs += [ "//third_party/FreeBSD/lib/libc/include" ]
    include_dirs += [ "//third_party/FreeBSD/contrib/libexecinfo" ]
    include_dirs += [ "//third_party/FreeBSD/crypto/openssh/openbsd-compat" ]

    if (!defined(defines)) {
      defines = []
    }
    if (musl_target_os == "linux" && product_path != "" &&
        product_path != rebase_path("//productdefine/common/products")) {
      _product_config = read_file("${product_path}/config.json", "json")
      if (defined(_product_config.device_stack_size)) {
        defines += [ "TARGET_STACK_SIZE=${_product_config.device_stack_size}" ]
      }
      if (defined(_product_config.device_guard_size)) {
        defines += [ "TARGET_GUARD_SIZE=${_product_config.device_guard_size}" ]
      }
    }
    external_deps = []
    external_deps += [ "FreeBSD:libc_static" ]
    deps = porting_deps
  }

  source_set("soft_musl_src_optimize") {
    sources = []
    sources_orig = []

    if (musl_arch == "aarch64") {
      sources_orig += [
        "src/math/cos.c",
        "src/math/exp.c",
        "src/math/exp2.c",
        "src/math/exp2f.c",
        "src/math/expf.c",
        "src/math/log.c",
        "src/math/log10.c",
        "src/math/log2.c",
        "src/math/log2f.c",
        "src/math/logb.c",
        "src/math/logf.c",
        "src/math/sin.c",
        "src/math/sincos.c",
        "src/math/pow.c",
        "src/math/powf.c",
      ]
    }

    foreach(s, sources_orig) {
      sources += [ "$musl_ported_root/${s}" ]
    }

    if (musl_arch == "aarch64") {
      sources += [
        "$OPTRTDIR/math/cosf.c",
        "$OPTRTDIR/math/sincosf.c",
        "$OPTRTDIR/math/sincosf_data.c",
        "$OPTRTDIR/math/sinf.c",
      ]
    }

    configs -= musl_inherited_configs
    configs += [ ":soft_musl_config" ]
    cflags = [
      "-mllvm",
      "-instcombine-max-iterations=0",
      "-O3",
      "-ffp-contract=fast",
      "-fPIC",
      "-fstack-protector-strong",
    ]

    deps = porting_deps
  }

  source_set("soft_musl_src_nossp") {
    sources = []
    sources_orig = [
      "src/env/__init_tls.c",
      "src/env/__libc_start_main.c",
      "src/env/__stack_chk_fail.c",
      "src/string/mempcpy.c",
    ]

    defines = []
    if (musl_iterate_and_stats_api) {
      defines += [ "MUSL_ITERATE_AND_STATS_API" ]
    }

    if (musl_arch == "arm") {
      sources_orig += [ "src/thread/${musl_arch}/__set_thread_area.c" ]
    } else if (musl_arch == "aarch64") {
      sources_orig += [ "src/thread/${musl_arch}/__set_thread_area.s" ]
    } else if (musl_arch == "x86_64") {
      sources_orig += [
        "src/string/memset.c",
        "src/thread/${musl_arch}/__set_thread_area.s",
      ]
    }

    foreach(s, sources_orig) {
      sources += [ "$musl_ported_root/${s}" ]
    }

    configs -= musl_inherited_configs
    configs += [ ":soft_musl_config" ]
    cflags = [
      "-O3",
      "-fno-stack-protector",
      "-ffreestanding",
      "-fPIC",
    ]

    deps = porting_deps
  }

  source_set("soft_musl_ldso") {
    sources = []
    sources_orig = musl_src_ldso

    foreach(s, sources_orig) {
      sources += [ "$musl_ported_root/${s}" ]
    }

    configs -= musl_inherited_configs
    configs += [ ":soft_musl_config" ]
    cflags = [
      "-fno-stack-protector",
      "-ffreestanding",
      "-fPIC",
      "-O3",
    ]
    if (is_asan) {
      defines = [
        "NSLIST_DEFAULT_SIZE=1600",
        "DSOLIST_DEFAULT_SIZE=1600",
        "INHERIT_DEFAULT_SIZE=1600",
      ]
    } else {
      defines = [
        "HANDLE_RANDOMIZATION",
        "LOAD_ORDER_RANDOMIZATION",
      ]
    }

    deps = porting_deps
  }

  source_set("soft_musl_hook") {
    sources = [
      "//third_party/musl/porting/linux/user/src/hook/malloc_common.c",
      "//third_party/musl/porting/linux/user/src/hook/memory_trace.c",
      "//third_party/musl/porting/linux/user/src/hook/musl_preinit.c",
      "//third_party/musl/porting/linux/user/src/hook/musl_preinit_common.c",
      "//third_party/musl/porting/linux/user/src/hook/musl_socket_preinit.c",
      "//third_party/musl/porting/linux/user/src/hook/musl_socket_preinit_common.c",
      "//third_party/musl/porting/linux/user/src/hook/socket_common.c",
    ]

    deps = [
      "$build_root/third_party_gn/musl:create_alltypes_h_file",
      "$build_root/third_party_gn/musl:create_porting_src",
      "$build_root/third_party_gn/musl:create_syscall_h_file",
      "$build_root/third_party_gn/musl:create_version_h_file",
      "$build_root/third_party_gn/musl:musl_copy_inc_bits",
      "$build_root/third_party_gn/musl:musl_copy_inc_fortify",
      "$build_root/third_party_gn/musl:musl_copy_inc_root",
      "$build_root/third_party_gn/musl:musl_copy_inc_sys",
    ]

    configs -= musl_inherited_configs

    configs += [
      "$build_root/config/compiler:compiler",
      ":soft_hook",
    ]
    cflags = [
      "-mllvm",
      "--instcombine-max-iterations=0",
      "-ffp-contract=fast",
      "-O3",
      "-Wno-int-conversion",
    ]
  }

  source_set("soft_musl_jemalloc") {
    sources = [ "./porting/linux/user/src/malloc/jemalloc/jemalloc.c" ]

    deps = [
      "$build_root/third_party_gn/musl:create_alltypes_h_file",
      "$build_root/third_party_gn/musl:create_porting_src",
      "$build_root/third_party_gn/musl:create_syscall_h_file",
      "$build_root/third_party_gn/musl:create_version_h_file",
      "$build_root/third_party_gn/musl:musl_copy_inc_bits",
      "$build_root/third_party_gn/musl:musl_copy_inc_root",
      "$build_root/third_party_gn/musl:musl_copy_inc_sys",
    ]

    configs -= musl_inherited_configs

    configs += [ ":soft_jemalloc" ]
  }

  static_library("soft_libc_musl_static") {
    configs -= musl_inherited_configs

    output_dir = "${target_out_dir}/${_libs_out_dir}"
    deps = [
      ":soft_musl_hook",
      ":soft_musl_ldso",
      ":soft_musl_src",
      ":soft_musl_src_nossp",
      ":soft_musl_src_optimize",
    ]
    external_deps = []
    external_deps = [ "FreeBSD:libc_static" ]
    output_name = "libc"
    complete_static_lib = true
  }

  static_library("soft_libm") {
    complete_static_lib = true
    configs -= musl_inherited_configs
    output_name = "libm"
    output_dir = "${target_out_dir}/${_libs_out_dir}"
  }

  static_library("soft_librt") {
    complete_static_lib = true
    configs -= musl_inherited_configs
    output_name = "librt"
    output_dir = "${target_out_dir}/${_libs_out_dir}"
  }

  static_library("soft_libpthread") {
    complete_static_lib = true
    configs -= musl_inherited_configs
    output_name = "libpthread"
    output_dir = "${target_out_dir}/${_libs_out_dir}"
  }

  static_library("soft_libcrypt") {
    complete_static_lib = true
    configs -= musl_inherited_configs
    output_name = "libcrypt"
    output_dir = "${target_out_dir}/${_libs_out_dir}"
  }

  static_library("soft_libutil") {
    complete_static_lib = true
    configs -= musl_inherited_configs
    output_name = "libutil"
    output_dir = "${target_out_dir}/${_libs_out_dir}"
  }

  static_library("soft_libresolv") {
    complete_static_lib = true
    configs -= musl_inherited_configs
    output_name = "libresolv"
    output_dir = "${target_out_dir}/${_libs_out_dir}"
  }

  static_library("soft_libxnet") {
    complete_static_lib = true
    configs -= musl_inherited_configs
    output_name = "libxnet"
    output_dir = "${target_out_dir}/${_libs_out_dir}"
  }

  static_library("soft_libdl") {
    complete_static_lib = true
    configs -= musl_inherited_configs
    output_name = "libdl"
    output_dir = "${target_out_dir}/${_libs_out_dir}"
  }

  shared_library("soft_libc_musl_shared") {
    deps = []
    output_dir = "${target_out_dir}/${_libs_out_dir}"

    musl_lib_path = rebase_path("$output_dir")

    libclang_rt_path = rebase_path(
            "${runtime_lib_path}/${musl_target_triple}/${_libs_path_prefix}")

    libc_map_path = rebase_path("$musl_ported_root/libc.map.txt")

    if (current_cpu == "mipsel") {
      libs = [ "atomic" ]
      deps += [ ":mipsel_atomic_linker" ]
    }
    ldflags = [
      "-Wl,--version-script=${libc_map_path}",
      "-lpthread",
      "-ldl",
      "-L${musl_lib_path}",
      "-lunwind",
      "-lclang_rt.builtins",
      "-L${libclang_rt_path}",
      "-Wl,-e,_dlstart",
      "-nostdlib",
    ]

    configs -= [ "$build_root/config:default_libs" ]
    configs -= musl_inherited_configs
    configs += [ ":soft_musl_config" ]

    deps += [
      ":soft_libdl",
      ":soft_libpthread",
      ":soft_musl_crt_install_action",
      ":soft_musl_hook",
      ":soft_musl_ldso",
      ":soft_musl_src",
      ":soft_musl_src_nossp",
      ":soft_musl_src_optimize",
    ]

    output_name = "libc"
    output_extension = "so"
  }

  action_foreach("soft_musl_crt_install_action") {
    redir = "${root_out_dir}/obj"
    script = "$musl_ported_root/scripts/install.py"
    sources = [
      "${redir}/$musl_ported_root/crt/${musl_arch}/soft_musl_crt/crti.o",
      "${redir}/$musl_ported_root/crt/${musl_arch}/soft_musl_crt/crtn.o",
      "${redir}/$musl_ported_root/crt/soft_musl_crt/Scrt1.o",
      "${redir}/$musl_ported_root/crt/soft_musl_crt/crt1.o",
      "${redir}/$musl_ported_root/crt/soft_musl_crt/rcrt1.o",
    ]

    outputs = [ "${root_build_dir}/obj/arkcompiler/toolchain/build/third_party_gn/musl/${_libs_out_dir}/{{source_file_part}}" ]

    ldpath = []
    if (is_mac) {
      ldpath += [ "${clang_base_path}/bin/ld64.lld" ]
    } else if (is_win) {
      ldpath += [ "${clang_base_path}/bin/lld-link.exe" ]
    } else {
      ldpath += [ "${clang_base_path}/bin/ld.lld" ]
    }

    args = [
      "--input",
      "{{source}}",
    ]
    args += [ "--output" ] + rebase_path(outputs, root_build_dir)
    args += [ "--ldpath" ] + rebase_path(ldpath, root_build_dir)
    args += [ "--crtplus" ] + rebase_path(
                [ "${redir}/$musl_ported_root/crt/soft_musl_crt/crtplus.o" ],
                root_build_dir)

    deps = [ ":soft_musl_crt" ]
  }

  copy("soft_create_linker") {
    deps = [ ":soft_libc_musl_shared" ]

    # _libc_shared_outputs = get_target_outputs(":soft_libc_musl_shared")
    _libc_shared_so = "${target_out_dir}/${_libs_out_dir}/libc.so"
    sources = [ _libc_shared_so ]
    outputs = [ musl_linker_so_out_path ]
  }

  copy("soft_create_linker_for_qemu") {
    deps = [ ":soft_create_linker" ]

    sources = [ musl_linker_so_out_path ]
    outputs = [ musl_linker_so_out_path_for_qemu ]
  }

  copy("mipsel_atomic_linker") {
    # need install libatomic1-mipsel-cross first
    atomic_shared_so = "/usr/mipsel-linux-gnu/lib/libatomic.so.1.2.0"
    sources = [ atomic_shared_so ]

    atomic_linker_so = "${target_out_dir}/${_libs_out_dir}/libatomic.so"
    outputs = [ atomic_linker_so ]
  }
}
