# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("$build_root/config/sysroot.gni")
import("$build_root/toolchain/gcc_toolchain.gni")

declare_args() {
  aosp_unstripped_runtime_outputs = true
}

template("aosp_clang_toolchain") {
  gcc_toolchain(target_name) {
    aosp_ndk_lib =
        rebase_path(invoker.sysroot + "/" + invoker.lib_dir, root_build_dir)
    libs_section_prefix = "$aosp_ndk_lib/crtbegin_dynamic.o"
    libs_section_postfix = "$aosp_ndk_lib/crtend_android.o"
    solink_libs_section_prefix = "$aosp_ndk_lib/crtbegin_so.o"
    solink_libs_section_postfix = "$aosp_ndk_lib/crtend_so.o"

    _prefix = rebase_path("$clang_base_path/bin", root_build_dir)
    cc = "$_prefix/clang"
    cxx = "$_prefix/clang++"
    ld = cxx
    ar = "$_prefix/llvm-ar"
    if (!is_debug) {
      strip = "${_prefix}/llvm-strip"
      use_unstripped_as_runtime_outputs = aosp_unstripped_runtime_outputs
    }

    # Don't use .cr.so for loadable_modules since they are always loaded via
    # absolute path.
    loadable_module_extension = ".so"

    toolchain_args = {
      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args, "*")
      }
      is_clang = true
    }
  }
}

aosp_clang_toolchain("aosp_clang_arm64") {
  sysroot = "$aosp_ndk_root/$arm64_aosp_sysroot_subdir"
  lib_dir = "usr/lib"

  toolchain_args = {
    current_cpu = "arm64"
    current_os = "android"
  }
}
