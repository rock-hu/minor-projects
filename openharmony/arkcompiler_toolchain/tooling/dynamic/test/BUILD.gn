# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//arkcompiler/toolchain/test/test_helper.gni")
import("$build_root/config/components/ets_frontend/es2abc_config.gni")

module_output_path = "toolchain/toolchain"

config("debug_api_test") {
  visibility = [ ":*" ]

  if (!is_mac) {
    ldflags = [ "-Wl,-rpath=\$ORIGIN/" ]
  }

  configs = [ "//arkcompiler/toolchain:toolchain_test_config" ]

  include_dirs = [
    "$toolchain_root/websocket",
    "../..",
  ]
}

test_js_path = "//arkcompiler/toolchain/tooling/dynamic/test/testcases/js/"

# When new js test file added, pls modify ohos_test.xml in test/resource accordingly.
test_js_files = [
  "arrow_func",
  "async_func",
  "exception",
  "range_error",
  "sample",
  "step",
  "syntax_exception",
  "throw_exception",
  "variable_first",
  "variable_second",
  "export_variable_first",
  "export_variable_second",
  "module_variable",
  "local_export",
  "module_watch",
  "dropframe",
  "local_variable_scope",
  "container",
  "closure_scope",
  "closure_variable",
  "branch",
  "common_func",
  "watch_variable",
  "smart_stepInto",
  "promise",
]

foreach(file, test_js_files) {
  es2abc_gen_abc("gen_${file}_abc") {
    test_js = "${test_js_path}${file}.js"
    test_abc = "$target_out_dir/${file}.abc"

    # Only targets in this file can depend on this.
    extra_visibility = [ ":*" ]
    src_js = rebase_path(test_js)
    dst_file = rebase_path(test_abc)
    extra_args = [ "--debug" ]
    if (file == "module_variable" || file == "export_variable_first" ||
        file == "export_variable_second" || file == "local_export" ||
        file == "module_watch") {
      extra_args += [ "--module" ]
    }
    extra_args += [ "--merge-abc" ]
    in_puts = [ test_js ]
    out_puts = [ test_abc ]
  }
}

ohos_shared_library("debugger_entry") {
  testonly = true
  stack_protector_ret = true
  sources = [ "entry/test_debugger_entry.cpp" ]

  configs = [ ":debug_api_test" ]

  deps = [ ":jsdebugtest" ]

  foreach(file, test_js_files) {
    deps += [ ":gen_${file}_abc" ]
  }
  external_deps = [ 
    "libuv:uv",
    "ets_runtime:libark_jsruntime"
  ]
  if (enable_hilog) {
    external_deps += [ "hilog:libhilog" ]
  }
  external_deps += [ "cJSON:cjson_static" ]
  install_enable = false
  output_extension = "so"
  subsystem_name = "test"
}

ohos_shared_library("jsdebugtest") {
  testonly = true
  stack_protector_ret = true
  sources = [
    "utils/test_entry.cpp",
    "utils/test_extractor.cpp",
    "utils/test_list.cpp",
    "utils/test_util.cpp",
  ]

  configs = [
    ":debug_api_test",
    "//arkcompiler/toolchain/tooling/dynamic:ark_ecma_debugger_config",
  ]

  test_abc_dir = "/data/test/"
  test_label = get_label_info(":${target_name}", "label_with_toolchain")
  test_toolchain = get_label_info(test_label, "toolchain")
  if (test_toolchain == host_toolchain || ark_standalone_build) {
    test_abc_dir = rebase_path(target_out_dir)
  }
  test_js_dir = rebase_path(test_js_path)

  defines = [
    "DEBUGGER_ABC_DIR=\"${test_abc_dir}/\"",
    "DEBUGGER_JS_DIR=\"${test_js_dir}\"",
  ]

  deps = [ "..:libark_ecma_debugger_test" ]
  external_deps = [
    "bounds_checking_function:libsec_shared",
    "ets_runtime:libark_jsruntime",
    "icu:shared_icuuc",
    "libuv:uv",
  ]

  # hiviewdfx libraries
  external_deps += hiviewdfx_ext_deps
  deps += hiviewdfx_deps
  if (enable_hilog) {
    external_deps += [ "hilog:libhilog" ]
  }

  external_deps += [
    "cJSON:cjson_static",
    "ets_runtime:libark_jsruntime",
  ]
  install_enable = false
  output_extension = "so"
  subsystem_name = "test"
}

host_unittest_action("DebuggerEntryTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "debugger_entry_test.cpp",
  ]

  cflags_cc = [ "-Wno-gnu-zero-variadic-macro-arguments" ]

  defines = [ "DEBUGGER_TEST_LIBRARY=\"libdebugger_entry.so\"" ]

  configs = [ ":debug_api_test" ]

  deps = [
    ":debugger_entry_resource",
    ":jsdebugtest",
    "..:libark_ecma_debugger_test",
  ]

  # hiviewdfx libraries
  external_deps = hiviewdfx_ext_deps
  external_deps += [
    "cJSON:cjson_static",
    "ets_runtime:libark_jsruntime",
    "icu:shared_icui18n",
    "icu:shared_icuuc",
    "libuv:uv",
  ]
  deps += hiviewdfx_deps
}

host_unittest_action("DebuggerTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "animation_impl_test.cpp",
    "debugger_commands_test.cpp",
    "debugger_events_test.cpp",
    "debugger_impl_test.cpp",
    "debugger_params_test.cpp",
    "debugger_returns_test.cpp",
    "debugger_script_test.cpp",
    "debugger_service_test.cpp",
    "debugger_types_test.cpp",
    "dispatcher_test.cpp",
    "dom_impl_test.cpp",
    "heapprofiler_impl_test.cpp",
    "js_pt_hooks_test.cpp",
    "overlay_impl_test.cpp",
    "page_impl_test.cpp",
    "profiler_impl_test.cpp",
    "protocol_handler_test.cpp",
    "pt_base64_test.cpp",
    "pt_json_test.cpp",
    "pt_params_test.cpp",
    "pt_returns_test.cpp",
    "pt_types_test.cpp",
    "runtime_impl_test.cpp",
    "target_impl_test.cpp",
    "tracing_impl_test.cpp",
  ]

  configs = [ ":debug_api_test" ]

  deps = [ "..:libark_ecma_debugger_test" ]

  # hiviewdfx libraries
  external_deps = hiviewdfx_ext_deps
  # libuv should be before libark_jsruntime
  # because there are libuv weak symbols in libark_jsruntime
  # and libuv should be loaded before their resolution
  external_deps += [ "libuv:uv" ]
  external_deps += [
    "bounds_checking_function:libsec_shared",
    "cJSON:cjson",
    "ets_runtime:libark_jsruntime",
    "icu:shared_icui18n",
    "icu:shared_icuuc",
    "runtime_core:libarkbase_static",
  ]
  deps += hiviewdfx_deps
}

host_unittest_action("DebuggerCInterpTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "debugger_cinterp_test.cpp",
  ]

  cflags_cc = [ "-Wno-gnu-zero-variadic-macro-arguments" ]

  defines = [ "DEBUGGER_TEST_LIBRARY=\"libdebugger_entry.so\"" ]

  configs = [ ":debug_api_test" ]

  deps = [
    ":debugger_entry_resource",
    ":jsdebugtest",
    "..:libark_ecma_debugger_test",
  ]

  # hiviewdfx libraries
  external_deps = hiviewdfx_ext_deps
  external_deps += [
    "cJSON:cjson_static",
    "ets_runtime:libark_jsruntime",
    "icu:shared_icui18n",
    "icu:shared_icuuc",
    "libuv:uv",
  ]
  deps += hiviewdfx_deps
}

host_unittest_action("DebuggerClientTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "client_utils/test_list.cpp",
    "client_utils/test_util.cpp",
    "debugger_client_test.cpp",
  ]

  test_abc_dir = "/data/test/"
  test_label = get_label_info(":${target_name}", "label_with_toolchain")
  test_toolchain = get_label_info(test_label, "toolchain")
  if (test_toolchain == host_toolchain || ark_standalone_build) {
    test_abc_dir = rebase_path(target_out_dir)
  }
  test_js_dir = rebase_path(test_js_path)

  defines = [
    "DEBUGGER_ABC_DIR=\"${test_abc_dir}/\"",
    "DEBUGGER_JS_DIR=\"${test_js_dir}\"",
  ]

  cflags_cc = [ "-Wno-gnu-zero-variadic-macro-arguments" ]

  configs = [ ":debug_api_test" ]

  deps = [
    ":debugger_client_resource",
    "..:libark_ecma_debugger_test",
    "../client:libark_client_set",
  ]

  # hiviewdfx libraries
  external_deps = hiviewdfx_ext_deps
  external_deps += [
    "bounds_checking_function:libsec_shared",
    "cJSON:cjson_static",
    "ets_runtime:libark_jsruntime",
    "icu:shared_icui18n",
    "icu:shared_icuuc",
    "libuv:uv",
  ]
  deps += hiviewdfx_deps

  external_deps += [ "ets_runtime:libark_jsruntime" ]
}

host_unittest_action("DebuggerCIntClientTest") {
  module_out_path = module_output_path

  sources = [
    # test file
    "client_utils/test_list.cpp",
    "client_utils/test_util.cpp",
    "debugger_cint_client_test.cpp",
  ]

  cflags_cc = [ "-Wno-gnu-zero-variadic-macro-arguments" ]

  test_abc_dir = "/data/test/"
  test_label = get_label_info(":${target_name}", "label_with_toolchain")
  test_toolchain = get_label_info(test_label, "toolchain")
  if (test_toolchain == host_toolchain || ark_standalone_build) {
    test_abc_dir = rebase_path(target_out_dir)
  }
  test_js_dir = rebase_path(test_js_path)

  defines = [
    "DEBUGGER_ABC_DIR=\"${test_abc_dir}/\"",
    "DEBUGGER_JS_DIR=\"${test_js_dir}\"",
  ]

  configs = [ ":debug_api_test" ]

  deps = [
    ":debugger_client_resource",
    "..:libark_ecma_debugger_test",
    "../client:libark_client_set",
  ]

  # hiviewdfx libraries
  external_deps = hiviewdfx_ext_deps
  external_deps += [
    "bounds_checking_function:libsec_shared",
    "cJSON:cjson_static",
    "ets_runtime:libark_jsruntime",
    "icu:shared_icui18n",
    "icu:shared_icuuc",
    "libuv:uv",
  ]
  deps += hiviewdfx_deps

  external_deps += [ "ets_runtime:libark_jsruntime" ]
}

group("debugger_entry_resource") {
  testonly = true

  deps = [ ":debugger_entry" ]
  foreach(file, test_js_files) {
    deps += [ ":gen_${file}_abc" ]
  }
}

group("debugger_client_resource") {
  testonly = true

  deps = [ "../../../inspector:ark_debugger" ]
  foreach(file, test_js_files) {
    deps += [ ":gen_${file}_abc" ]
  }
}

group("unittest") {
  testonly = true

  # deps file
  deps = [
    ":DebuggerCIntClientTest",
    ":DebuggerCInterpTest",
    ":DebuggerClientTest",
    ":DebuggerEntryTest",
    ":DebuggerTest",
  ]
}

group("host_unittest") {
  testonly = true

  # deps file
  deps = [
    ":DebuggerCIntClientTestAction",
    ":DebuggerCInterpTestAction",
    ":DebuggerClientTestAction",
    ":DebuggerEntryTestAction",
    ":DebuggerTestAction",
  ]
}
