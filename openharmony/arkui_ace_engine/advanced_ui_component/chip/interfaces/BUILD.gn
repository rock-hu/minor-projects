# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/ets_frontend/es2abc_config.gni")
import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("//foundation/arkui/ace_engine/build/ace_gen_obj.gni")

es2abc_gen_abc("gen_chip_abc") {
  src_js = rebase_path("chip.js")
  dst_file = rebase_path(target_out_dir + "/chip.abc")
  in_puts = [ "chip.js" ]
  out_puts = [ target_out_dir + "/chip.abc" ]
  extra_args = [ "--module" ]
}

es2abc_gen_abc("gen_chip_v14_abc") {
  src_js = rebase_path("chip_v14.js")
  dst_file = rebase_path(target_out_dir + "/chip_v14.abc")
  in_puts = [ "chip_v14.js" ]
  out_puts = [ target_out_dir + "/chip_v14.abc" ]
  extra_args = [ "--module" ]
}

gen_js_obj("chip_abc") {
  input = get_label_info(":gen_chip_abc", "target_out_dir") + "/chip.abc"
  output = target_out_dir + "/chip_abc.o"
  dep = ":gen_chip_abc"
}

gen_js_obj("chip_v14_abc") {
  input =
      get_label_info(":gen_chip_v14_abc", "target_out_dir") + "/chip_v14.abc"
  output = target_out_dir + "/chip_v14_abc.o"
  dep = ":gen_chip_v14_abc"
}

gen_obj("chip_abc_preview") {
  input = get_label_info(":gen_chip_abc", "target_out_dir") + "/chip.abc"
  output = target_out_dir + "/chip_abc.c"
  snapshot_dep = [ ":gen_chip_abc" ]
}

gen_obj("chip_v14_abc_preview") {
  input =
      get_label_info(":gen_chip_v14_abc", "target_out_dir") + "/chip_v14.abc"
  output = target_out_dir + "/chip_v14_abc.c"
  snapshot_dep = [ ":gen_chip_v14_abc" ]
}

template("chip_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc
    configs = [ "$ace_root/interfaces/napi/kits:ace_napi_config" ]

    sources = [ "chip.cpp" ]
    deps =
        [ "$ace_root/interfaces/napi/kits/utils:napi_utils_static_${platform}" ]
    external_deps = []

    if (platform != "" && is_arkui_x) {
      deps += [ "//plugins/libs/napi:napi_$platform" ]
      include_dirs = [ "//commonlibrary/c_utils/base/include" ]
    } else {
      external_deps += [ "napi:ace_napi" ]
    }

    if (defined(config.libace_target)) {
      deps += [ config.libace_target ]
    }

    if (use_mingw_win || use_mac || use_linux) {
      deps += [
        ":gen_obj_src_chip_abc_preview",
        ":gen_obj_src_chip_v14_abc_preview",
      ]
    } else {
      deps += [
        ":chip_abc",
        ":chip_v14_abc",
      ]
    }

    subsystem_name = ace_engine_subsystem
    part_name = ace_engine_part
  }
}

foreach(item, ace_platforms) {
  chip_static("chip_static_" + item.name) {
    defines = []
    cflags_cc = []
    config = {
    }
    platform = item.name

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
