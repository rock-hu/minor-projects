/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import ConfigurationConstant from '@ohos.app.ability.ConfigurationConstant';
import common from '@ohos.app.ability.common';
class MyIndicatorComponentModifier1 implements AttributeModifier<LoadingProgressAttribute> {
  applyNormalAttribute(instance: LoadingProgressAttribute): void {
    instance
      .foregroundColor(Color.Red)
  }
}
class MyIndicatorComponentModifier2 implements AttributeModifier<LoadingProgressAttribute> {
  applyNormalAttribute(instance: LoadingProgressAttribute): void {
    instance
      .foregroundColor(0xffff0000)
  }
}
class MyIndicatorComponentModifier3 implements AttributeModifier<LoadingProgressAttribute> {
  applyNormalAttribute(instance: LoadingProgressAttribute): void {
    instance
      .foregroundColor('#FFFF7B14')
  }
}
class MyIndicatorComponentModifier4 implements AttributeModifier<LoadingProgressAttribute> {
  applyNormalAttribute(instance: LoadingProgressAttribute): void {
    instance
      .foregroundColor($r('app.color.orange'))
  }
}

@Entry
@Component
struct BadgeExample6 {
  @State modifier1:myIndicatorComponentModifier1 = new MyIndicatorComponentModifier1()
  @State modifier2:myIndicatorComponentModifier2 = new MyIndicatorComponentModifier2()
  @State modifier3:myIndicatorComponentModifier3 = new MyIndicatorComponentModifier3()
  @State modifier4:myIndicatorComponentModifier4 = new MyIndicatorComponentModifier4()

  @State isDark: boolean = false;
  @State context: common.UIAbilityContext = getContext(this) as common.UIAbilityContext

  build() {
    Scroll() {
      Column() {
        Button('Change')
          .onClick(() => {
            if (this.isDark) {
              this.isDark = false;
              this.context.getApplicationContext().setColorMode(ConfigurationConstant.ColorMode.COLOR_MODE_LIGHT);
            } else {
              this.isDark = true;
              this.context.getApplicationContext().setColorMode(ConfigurationConstant.ColorMode.COLOR_MODE_DARK);
            }
          })
        Text('LoadingProgress组件')
          .fontColor('#182431')
          .fontSize(30)
          .fontWeight(500)
          .lineHeight(14)
          .margin(20)
        Text('foregroundColor-加载进度条前景色')
          .fontColor('#182431')
          .fontSize(18)
          .fontWeight(400)
          .lineHeight(14)
        Text('foregroundColor（color）：color.red')
          .fontColor('#182431')
          .fontSize(18)
          .fontWeight(400)
          .lineHeight(14)
          .margin(15)
        LoadingProgress()
          .attributeModifier(this.modifier1).width('20%')
        Text('foregroundColor（number）：0xffff0000')
          .fontColor('#182431')
          .fontSize(18)
          .fontWeight(400)
          .lineHeight(14)
          .margin(15)
        LoadingProgress()
          .attributeModifier(this.modifier2).width('20%')
        Text('foregroundColor（string）：'#FFFF7B14'')
        .fontColor('#182431')
          .fontSize(18)
          .fontWeight(400)
          .lineHeight(14)
          .margin(15)
        LoadingProgress()
          .attributeModifier(this.modifier3).width('20%')
        Text('foregroundColor（Resource）：$r('app.color.orange')')
        .fontColor('#182431')
          .fontSize(18)
          .fontWeight(400)
          .lineHeight(14)
          .margin(15)
        LoadingProgress()
          .attributeModifier(this.modifier4).width('20%')
      }.width('100%')
    }
  }
}