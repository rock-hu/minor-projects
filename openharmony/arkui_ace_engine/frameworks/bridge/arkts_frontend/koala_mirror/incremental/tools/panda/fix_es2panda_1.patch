diff --git a/ets2panda/aot/main.cpp b/ets2panda/aot/main.cpp
index 2c916e6ac..68526dd00 100644
--- a/ets2panda/aot/main.cpp
+++ b/ets2panda/aot/main.cpp
@@ -33,11 +33,12 @@ using mem::MemConfig;
 
 class MemManager {
 public:
-    explicit MemManager()
+    explicit MemManager(const std::size_t compilerMemSize)
     {
-        constexpr auto COMPILER_SIZE = 256_MB;
-
-        MemConfig::Initialize(0, 0, COMPILER_SIZE, 0, 0, 0);
+        constexpr auto DEFAULT_COMPILER_SIZE = 256_MB;
+        MemConfig::Initialize(0, 0,
+            compilerMemSize > DEFAULT_COMPILER_SIZE ? compilerMemSize : DEFAULT_COMPILER_SIZE,
+            0, 0, 0);
         PoolManager::Initialize(PoolType::MMAP);
     }
 
@@ -98,7 +99,11 @@ static int CompileFromConfig(es2panda::Compiler &compiler, util::Options *option
         es2panda::SourceFile input(src, parserInput, options->ParseModule());
         options->SetCompilerOutput(dst);
 
-        options->ListFiles() && std::cout << "> es2panda: compiling from '" << src << "' to '" << dst << "'"
+        const auto index = std::distance(compilationList.begin(),
+                                   std::find_if(compilationList.begin(), compilationList.end(),
+                                                [filename = src](const auto &i) { return i.first == filename; }));
+        options->ListFiles() && std::cout
+        << "> es2panda:" << " [" << index + 1 << "/" << compilationList.size() << "] " << "compiling from '" << src << "' to '" << dst << "'"
                                           << std::endl;
         auto res = CompileFromSource(compiler, input, options);
         if (res != 0) {
@@ -125,14 +130,8 @@ static std::optional<std::vector<util::Plugin>> InitializePlugins(std::vector<st
     return {std::move(res)};
 }
 
-static int Run(int argc, const char **argv)
+static int Run(const std::unique_ptr<util::Options> &options)
 {
-    auto options = std::make_unique<util::Options>();
-    if (!options->Parse(argc, argv)) {
-        std::cerr << options->ErrorMsg() << std::endl;
-        return 1;
-    }
-
     Logger::ComponentMask mask {};
     mask.set(Logger::Component::ES2PANDA);
     Logger::InitializeStdLogging(Logger::LevelFromString(options->LogLevel()), mask);
@@ -162,6 +161,11 @@ static int Run(int argc, const char **argv)
 
 int main(int argc, const char **argv)
 {
-    ark::es2panda::aot::MemManager mm;
-    return ark::es2panda::aot::Run(argc, argv);
+    const auto options = std::make_unique<ark::es2panda::util::Options>();
+    if (!options->Parse(argc, argv)) {
+        std::cerr << options->ErrorMsg() << std::endl;
+        return 1;
+    }
+    ark::es2panda::aot::MemManager mm(options->CompilerMemorySize());
+    return ark::es2panda::aot::Run(options);
 }
diff --git a/ets2panda/ast_verifier/everyChildHasValidParent.cpp b/ets2panda/ast_verifier/everyChildHasValidParent.cpp
index 30443fbc6..6589bc6bc 100644
--- a/ets2panda/ast_verifier/everyChildHasValidParent.cpp
+++ b/ets2panda/ast_verifier/everyChildHasValidParent.cpp
@@ -14,7 +14,10 @@
  */
 
 #include "everyChildHasValidParent.h"
+
 #include "ir/base/methodDefinition.h"
+#include "ir/base/scriptFunction.h"
+#include "ir/typeNode.h"
 
 namespace ark::es2panda::compiler::ast_verifier {
 
@@ -52,6 +55,17 @@ CheckResult EveryChildHasValidParent::operator()(CheckContext &ctx, const ir::As
                 return;
             }
 
+            //  NOTE: Temporary suppress.
+            // Fix checking of tuples in interfaces
+            if (ast->IsScriptFunction()) {
+                if (const auto *sf = ast->AsScriptFunction();
+                    sf->ReturnTypeAnnotation()->Parent() == parent && node->IsETSTuple()) {
+                    return;
+                }
+            }
+
+            return;
+
             ctx.AddCheckMessage("INCORRECT_PARENT_REF", *node, node->Start());
             result = {CheckDecision::INCORRECT, CheckAction::CONTINUE};
         }
diff --git a/ets2panda/util/options.cpp b/ets2panda/util/options.cpp
index a148246ac..3f3e2b469 100644
--- a/ets2panda/util/options.cpp
+++ b/ets2panda/util/options.cpp
@@ -161,6 +161,7 @@ struct AllArgs {
     ark::PandArg<bool> opDumpCheckedAst {"dump-dynamic-ast", false,
                                          "Dump AST with synthetic nodes for dynamic languages"};
     ark::PandArg<bool> opListFiles {"list-files", false, "Print names of files that are part of compilation"};
+    ark::PandArg<std::size_t> opCompilerMemSize {"compiler-memory-size", 0, "Compiler memory size(bytes)"};
 
     // compiler
     ark::PandArg<bool> opDumpAssembly {"dump-assembly", false, "Dump pandasm"};
@@ -295,6 +296,7 @@ struct AllArgs {
         argparser.Add(&opThreadCount);
         argparser.Add(&opSizeStat);
         argparser.Add(&opListFiles);
+        argparser.Add(&opCompilerMemSize);

         argparser.Add(&inputExtension);
         argparser.Add(&outputFile);
@@ -529,7 +531,7 @@ bool Options::Parse(int argc, const char **argv)
     optLevel_ = allArgs.opOptLevel.GetValue();
     threadCount_ = allArgs.opThreadCount.GetValue();
     listFiles_ = allArgs.opListFiles.GetValue();
-
+    compilerMemorySize_ = allArgs.opCompilerMemSize.GetValue();
     return true;
 }
 }  // namespace ark::es2panda::util
diff --git a/ets2panda/util/options.h b/ets2panda/util/options.h
index b7c100436..75e6a2c74 100644
--- a/ets2panda/util/options.h
+++ b/ets2panda/util/options.h
@@ -281,6 +281,11 @@ public:
         return listFiles_;
     }

+    std::size_t CompilerMemorySize() const
+    {
+        return compilerMemorySize_;
+    }
+
 private:
     es2panda::ScriptExtension extension_ {es2panda::ScriptExtension::JS};
     OptionFlags options_ {OptionFlags::DEFAULT};
@@ -294,6 +299,7 @@ private:
     int optLevel_ {0};
     int threadCount_ {0};
     bool listFiles_ {false};
+    std::size_t compilerMemorySize_ {0};
     util::LogLevel logLevel_ {util::LogLevel::ERROR};
 };
 }  // namespace ark::es2panda::util
