# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/frameworks/bridge/arkts_frontend/koala_mirror/gn/npm_util.gni")

koala_root = "../.."
libarkts_root = "."
ui2abc_root = ".."
interop_root = "$koala_root/interop"
# build_root = "//build"
# toolchain_linux = "$build_root/toolchain/linux:clang_x64"

node_modules_dir = "../node_modules"

node_version = "v16.20.2"
host_arch = "${host_os}-${host_cpu}"

# os_define = "KOALA_LINUX"

shared_library("es2panda_lib") {
    sources = [
        "$libarkts_root/native/src/common.cc",
        "$libarkts_root/native/src/bridges.cc",
        "$libarkts_root/native/src/generated/bridges.cc",

        "$interop_root/src/cpp/napi/convertors-napi.cc",
        "$interop_root/src/cpp/callback-resource.cc",
        "$interop_root/src/cpp/interop-logging.cc",
        "$interop_root/src/cpp/common-interop.cc"
    ]

    include_dirs = [
        "$ui2abc_root/build/sdk/linux_host_tools/include/tools/es2panda/public",
        "$ui2abc_root/build/sdk/linux_host_tools/include/tools/es2panda",

        "$libarkts_root/native/src",

        "$koala_root/interop/src/cpp",
        "$koala_root/interop/src/cpp/napi",
        "$koala_root/interop/src/cpp/types",

        "$node_modules_dir/node-api-headers/include",
        "$node_modules_dir/node-addon-api",
        
        # "//arkcompiler/ets_frontend/ets2panda/public/",
        # rebase_path("$root_gen_dir/arkcompiler/ets_frontend/ets2panda/"),
    ]

    defines = [
        #"$os_define",
        "KOALA_INTEROP_MODULE=NativeModule",
        "INTEROP_LIBRARY_NAME=es2panda",
        "KOALA_USE_NODE_VM",
        "KOALA_NAPI"
    ]

    deps = [
        ":regenerate"
    ]

    configs -= [ "//build/config/compiler:compiler" ]

    if (is_mac) {
        cflags_cc = [
          "-std=c++17",
          "-Wall",
          "-Werror",
          "-Wno-unused-variable",
          "-fPIC",
        ]

        ldflags = [
          "-fPIC",
          "-Wl,-undefined,dynamic_lookup",
          "-fuse-ld=lld",
          "-Wl,--icf=all",
          "-Wl,--color-diagnostics",
          "-m64"
        ]
        defines += [ "KOALA_MACOS" ]
        output_extension = "node"
    }

    if (is_linux) {
        cflags_cc = [
          "-std=c++17",
          "-Wall",
          "-Werror",
          "-Wno-unused-command-line-argument",
          "-Wno-unused-variable",
          "-fPIC",
        ]

        ldflags = [
          "-Wl,--allow-shlib-undefined",
          "-Wl,--fatal-warnings",
          "-Wl,--build-id=md5",
          "-fPIC",
          "-Wl,-z,noexecstack",
          "-Wl,-z,now",
          "-Wl,-z,relro",

        # "-Wl,-z,defs", # must no use this option
        "-Wl,--as-needed",
        "-fuse-ld=lld",
        "-Wl,--icf=all",
        "-Wl,--color-diagnostics",
        "-m64",
        ]
        defines += [ "KOALA_LINUX" ]
        output_extension = "node"
    } else if (current_os == "mingw") {
        cflags_cc = [
          "-std=c++17",
          "-Wall",
          "-Werror",
          "-Wno-unused-variable",
          "-Wno-unused-command-line-argument",
          "-fPIC",
          "-Wno-error=deprecated-copy",
          "-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang",
          "-ftrivial-auto-var-init=zero",
          "-fcolor-diagnostics",
          "-fmerge-all-constants",
          "-Xclang",
          "-mllvm",
          "-Xclang",
          "-instcombine-lower-dbg-declare=0",
          "-no-canonical-prefixes",
          "-fuse-ld=lld",
          "-fno-stack-protector",
          "-fno-strict-aliasing",
          "-Wno-builtin-macro-redefined",
          "-fms-extensions",
          "-static",
          "-rtlib=compiler-rt",
          "-stdlib=libc++",
          "-lunwind",
          "-lpthread",
          "-Qunused-arguments",
          "-target",
          "x86_64-pc-windows-gnu",
          "-D__CUSTOM_SECURITY_LIBRARY",
        ]

        ldflags = [
          "-Wl,--fatal-warnings",
        "-fPIC",
        "-Wl,--as-needed",
        "-fuse-ld=lld",
        "-Wl,--icf=all",
        "-m64",
        "-static",
        "-rtlib=compiler-rt",
        "-stdlib=libc++",
        "-std=c++17",
        "-lunwind",
        "-lpthread",
        "-Qunused-arguments",
        "-target",
        "x86_64-pc-windows-gnu",
        ]
        output_extension = "dll"
        defines += [ "KOALA_WINDOWS" ]
        sources += [ "../../interop/src/cpp/napi/win-dynamic-node.cc" ]
    }
}

action("es2panda_copy_lib") {
    script = "gn/command/copy.py"
    outputs = [
        "$target_out_dir/es2panda.node"
    ]
    if (build_ohos_sdk) {
        deps = [
            ":es2panda_lib"
        ]
    } else {
        deps = [
            ":es2panda_lib(${host_toolchain})"
        ]
    }
    args = [
        "--from-path", rebase_path(root_out_dir),
        "--to-path", rebase_path("."),
        "--current-os", current_os,
        "--current-cpu", current_cpu
    ]
}

npm_cmd("regenerate") {
    outputs = [
        "$target_out_dir/regenerate"
    ]
    deps = [
        "$ui2abc_root:ui2abc_install_all",
        "$ui2abc_root:ui2abc_panda_sdk"
    ]
    project_path = rebase_path(".")
    run_tasks = [ "regenerate:ohos" ]
}

npm_cmd("libarkts_install") {
    outputs = [
        "$target_out_dir/libarkts_install"
    ]
    deps = [
        "$ui2abc_root:ui2abc_install"
    ]
    project_path = rebase_path(".")
    install = true
}

npm_cmd("es2panda.js") {
    outputs = [
        "$target_out_dir/es2panda.js"
    ]
    deps = [
        ":es2panda_copy_lib",
        "$ui2abc_root:ui2abc_panda_sdk"
    ]
    project_path = rebase_path(".")
    run_tasks = [ "compile:koala:interop", "compile:js" ]
}

action("gen_libarkts") {
  script = "../gn/command/copy_libs.py"
  args = [
    "--source_path",
    rebase_path(get_path_info(".", "abspath")),
    "--output_path",
    rebase_path("$target_gen_dir"),
    "--root_out_dir",
    rebase_path(root_out_dir),
  ]
  outputs = [ "$target_gen_dir" ]
  deps = [
    "$ui2abc_root:ui2abc"
  ]
}

# Use from OHOS-SDK build (//build/ohos/sdk/ohos_sdk_description_std.json)

ohos_copy("libarkts-sdk") {
  deps = [":gen_libarkts" ]
  sources = [ rebase_path("$target_gen_dir") ]
  outputs = [ target_out_dir + "/$target_name" ]
  module_source_dir = target_out_dir + "/$target_name"
  module_install_name = ""
  subsystem_name = "arkui"
  part_name = "ace_engine"
}

group("es2panda") {
    deps = [
      ":es2panda.js"
    ]
}
