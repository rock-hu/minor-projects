/*
 * Copyright (c) 2024-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// WARNING! THIS FILE IS AUTO-GENERATED, DO NOT MAKE CHANGES, THEY WILL BE LOST ON NEXT GENERATION!

import { SerializerBase, DeserializerBase, CallbackResource, InteropNativeModule, MaterializedBase, Tags, RuntimeType, runtimeType, toPeerPtr, nullptr, KPointer, NativeBuffer, KSerializerBuffer, KUint8ArrayPtr } from "@koalaui/interop"
import { int32, int64, float32, unsafeCast } from "@koalaui/common"
import { CallbackKind } from "./CallbackKind"
import { Serializer } from "./Serializer"
import { TypeChecker } from "#components"
import { CallbackTransformer } from "./CallbackTransformer"
import { AccessibilityCallback, AccessibilityFocusCallback, GestureRecognizerJudgeBeginCallback, HoverCallback, OnDragEventCallback, OnMoveHandler, OnScrollCallback, PopupStateChangeCallback, ReuseIdCallback, ShouldBuiltInRecognizerParallelWithCallback, SizeChangeCallback, TransitionFinishCallback, VisibleAreaChangeCallback, AccessibilityHoverEvent, AccessibilityHoverEventInternal, AccessibilityRoleType, AccessibilitySamePageMode, AdaptiveColor, CommonMethod, BlurStyle, BlendApplyType, BlurStyleActivePolicy, PickerTextStyle, ChainStyle, ContentClipMode, DismissReason, DragBehavior, DragEvent, DragEventInternal, DragResult, Rectangle, DataSyncOptions, DraggingSizeChangeEffect, DragPreviewMode, DrawModifier, DrawModifierInternal, EffectEdge, EffectType, FinishCallbackType, GestureModifier, GestureModifierInternal, UIGestureEvent, ScrollableCommonMethod, ItemDragInfo, CustomBuilder, NestedScrollOptions, EdgeEffectOptions, HapticFeedbackMode, HoverModeAreaType, ICurve, ICurveInternal, KeyboardAvoidMode, LayoutPolicy, LayoutSafeAreaEdge, LayoutSafeAreaType, ChildrenMainSize, ChildrenMainSizeInternal, RectResult, MenuPolicy, MenuPreviewMode, ModalTransition, OutlineStyle, PixelMapMock, PixelMapMockInternal, PopupStateChangeParam, PreDragStatus, ProgressMask, ProgressMaskInternal, RepeatMode, SelectionOptions, SafeAreaEdge, SafeAreaType, ScrollSizeMode, TextDecorationOptions, TextContentControllerBase, TextContentControllerBaseInternal, ShadowStyle, ShadowType, SheetKeyboardAvoidMode, SheetMode, SheetSize, SheetType, SourceTool, SourceType, BackgroundEffectOptions, BackgroundBlurStyleOptions, TranslateOptions, InputCounterOptions, ShadowOptions, CaretOffset, TextContentControllerOptions, ThemeColorMode, TouchTestInfo, TouchTestStrategy, TransitionEdge, TransitionEffect, TransitionEffectInternal, TransitionEffects, RotateOptions, ScaleOptions, AnimateParam, TransitionHierarchyStrategy, UICommonEvent, UICommonEventInternal, Callback_ClickEvent_Void, ClickEvent, ClickEventInternal, Callback_TouchEvent_Void, TouchEvent, TouchEventInternal, Callback_KeyEvent_Void, KeyEvent, KeyEventInternal, HoverEvent, HoverEventInternal, Callback_MouseEvent_Void, MouseEvent, MouseEventInternal, VisibleAreaEventOptions, SheetOptions, View, ViewInternal, Callback_KeyEvent_Boolean, Callback_Area_Area_Void, Callback_Array_TouchTestInfo_TouchResult, TouchResult, Callback_AxisEvent_Void, AxisEvent, AxisEventInternal, Callback_Boolean_HoverEvent_Void, Callback_CrownEvent_Void, CrownEvent, Callback_DismissContentCoverAction_Void, DismissContentCoverAction, Callback_DismissPopupAction_Void, DismissPopupAction, Callback_DismissSheetAction_Void, DismissSheetAction, Callback_DragEvent_String_Union_CustomBuilder_DragItemInfo, DragItemInfo, Callback_DragEvent_String_Void, Callback_FocusAxisEvent_Void, FocusAxisEvent, FocusAxisEventInternal, Callback_GestureInfo_BaseGestureEvent_GestureJudgeResult, Callback_HoverEvent_Void, Callback_Literal_Boolean_isVisible_Void, Literal_Boolean_isVisible, Callback_PreDragStatus_Void, Callback_SheetDismiss_Void, SheetDismiss, Callback_SheetType_Void, Callback_SpringBackAction_Void, SpringBackAction, Callback_TouchEvent_HitTestMode, BackgroundBrightnessOptions, BackgroundImageOptions, BlurOptions, ClickEffect, DateRange, DragInteractionOptions, DropOptions, ExpectedFrameRateRange, FocusMovement, ForegroundEffectOptions, GeometryTransitionOptions, InvertOptions, LinearGradient_common, Tuple_ResourceColor_Number, LinearGradientBlurOptions, FractionStop, LinearGradientOptions, LocalizedHorizontalAlignParam, LocalizedVerticalAlignParam, Measurable, MeasurableInternal, MeasureResult, SizeResult, MotionBlurAnchor, MotionBlurOptions, MotionPathOptions, OverlayOffset, PixelRoundPolicy, PixelStretchEffectOptions, PreviewConfiguration, RadialGradientOptions, Tuple_Length_Length, StateStyles, SweepGradientOptions, SystemAdaptiveOptions, TipsOptions, TouchObject, AlignRuleOption, HorizontalAlignParam, VerticalAlignParam, BlurStyleOptions, ContentCoverOptions, BindOptions, ContextMenuAnimationOptions, MultiShadowOptions, DragPreviewOptions, EventTarget, FadingEdgeOptions, BaseEvent, BaseEventInternal, ForegroundBlurStyleOptions, HistoricalPoint, LightSource, LocalizedAlignRuleOptions, MenuElement, OverlayOptions, PickerDialogButtonStyle, ReuseOptions, sharedTransitionOptions, SheetTitleOptions, TransitionOptions, BorderImageOption, CustomPopupOptions, Literal_ResourceColor_color, PointLightStyle, PopupMessageOptions, Type_SheetOptions_detents, ContextMenuOptions, BorderRadiusType, MenuOptions, PopupOptions, PopupButton, OnWillScrollCallback, ScrollResult, PopupMaskType, DividerStyle, BlendMode } from "./../common"
import { ButtonTriggerClickCallback, ButtonRole, ButtonStyleMode, ButtonType, ControlSize, ButtonOptions } from "./../button"
import { Callback_Extender_OnFinish, Callback_Extender_OnProgress, DoubleAnimationParam } from "./../animationExtender"
import { Callback_RangeUpdate, Callback_CreateItem, Context_getGroupDir_Callback, RestrictedWorker_onerror_Callback, RestrictedWorker_onexit_Callback, RestrictedWorker_onmessage_Callback, ComponentContent, ComponentContentInternal, UnifiedData, UnifiedDataInternal, SystemBarStyle, PointerStyle, Scene, SceneInternal, Context, ContextInternal, WorkerEventListener, WorkerEventListenerInternal, Event, ErrorEvent, MessageEvents, BaseContext, BaseContextInternal, PostMessageOptions, WorkerOptions, CustomColors, RestrictedWorker, RestrictedWorkerInternal, CustomTheme } from "./../arkui-custom"
import { UIContext } from "@ohos/arkui/UIContext"
import { ContentDidScrollCallback, ContentWillScrollCallback, OnSwiperAnimationEndCallback, OnSwiperAnimationStartCallback, OnSwiperGestureSwipeCallback, SwiperAnimationEvent, SwiperAnimationMode, SwiperAttribute, DotIndicator, DigitIndicator, SwiperDisplayMode, SwiperNestedScrollMode, SwiperContentAnimatedTransition, SwiperContentWillScrollResult, AutoPlayOptions, ArrowStyle, SwiperAutoFill, SwiperContentTransitionProxy, SwiperContentTransitionProxyInternal, SwiperController, SwiperControllerInternal, Callback_SwiperContentTransitionProxy_Void, Indicator } from "./../swiper"
import { CustomNodeBuilder } from "./../customBuilder"
import { EditableTextOnChangeCallback, OnDidChangeCallback, AutoCapitalizationMode, KeyboardAppearance, LayoutManager, LayoutManagerInternal, PositionWithAffinity, TextRange, MenuType, TextDataDetectorConfig, EditMenuOptions, TextEditControllerEx, TextEditControllerExInternal, PreviewText, StyledStringController, StyledStringControllerInternal, StyledStringChangedListener, CaretStyle, TextChangeOptions, InsertValue, DeleteValue, EditableTextChangeValue, FontSettingOptions, TextBaseController, TextBaseControllerInternal, TextDataDetectorType, TextDeleteDirection, TextMenuItemId, TextMenuItemIdInternal, TextMenuShowMode, AsyncCallback_Array_TextMenuItem_Array_TextMenuItem, TextMenuItem, AsyncCallback_TextMenuItem_TextRange_Boolean, Callback_StyledStringChangeValue_Boolean, StyledStringChangeValue, DecorationStyleResult } from "./../textCommon"
import { ErrorCallback } from "./../ohos.base"
import { GetItemMainSizeByIndex, WaterFlowAttribute, WaterFlowLayoutMode, WaterFlowSections, WaterFlowSectionsInternal, SectionOptions, WaterFlowOptions } from "./../waterFlow"
import { ImageCompleteCallback, ImageLoadResult } from "./../imageSpan"
import { ImageErrorCallback, ColorContent, DynamicRangeMode, ImageContent, ImageInterpolation, ImageRenderMode, ImageRotateOrientation, Callback_Type_ImageAttribute_onComplete_callback_event_Void, Type_ImageAttribute_onComplete_callback_event, ImageError, ImageSourceSize, ResizableOptions } from "./../image"
import { InterceptionModeCallback, InterceptionShowCallback, BarStyle, LaunchMode, NavBarPosition, NavigationMenuItem, NavigationOperation, NavigationTitleOptions, NavigationMenuOptions, ToolbarItem, NavigationToolbarOptions, NavigationAttribute, Tuple_Dimension_Dimension, NavigationMode, NavigationTitleMode, Callback_NavigationTitleMode_Void, Callback_Boolean_Void, Callback_NavigationMode_Void, Callback_String_Opt_Object_Void, Type_NavigationAttribute_customNavContentTransition_delegate, NavContentInfo, NavigationAnimatedTransition, NavigationCommonTitle, NavigationCustomTitle, NavPathStack, NavPathStackInternal, NavPathInfo, NavPathInfoInternal, NavigationOptions, Callback_PopInfo_Void, PopInfo, NavigationInterception, ToolbarItemStatus, Callback_NavigationTransitionProxy_Void, NavigationTransitionProxy, NavigationTransitionProxyInternal, NavBar, MoreButtonOptions } from "./../navigation"
import { LocationButtonCallback, LocationButtonOnClickResult, LocationDescription, LocationIconStyle, LocationButtonOptions } from "./../locationButton"
import { MenuCallback, MenuOnAppearCallback, PasteEventCallback, SubmitCallback, RichEditorAttribute, Callback_RichEditorSelection_Void, RichEditorSelection, Callback_RichEditorRange_Void, RichEditorRange, Callback_RichEditorInsertValue_Boolean, RichEditorInsertValue, Callback_RichEditorTextSpanResult_Void, RichEditorTextSpanResult, Callback_TextRange_Void, Callback_RichEditorDeleteValue_Boolean, RichEditorDeleteValue, PasteEvent, Callback_RichEditorChangeValue_Boolean, RichEditorChangeValue, Callback_CutEvent_Void, CutEvent, Callback_CopyEvent_Void, CopyEvent, RichEditorSpanType, RichEditorResponseType, SelectionMenuOptions, KeyboardOptions, PlaceholderStyle, RichEditorBaseController, RichEditorBaseControllerInternal, RichEditorTextStyle, RichEditorController, RichEditorControllerInternal, RichEditorTextSpanOptions, RichEditorImageSpanOptions, RichEditorBuilderSpanOptions, RichEditorSymbolSpanOptions, RichEditorUpdateTextSpanStyleOptions, RichEditorUpdateImageSpanStyleOptions, RichEditorUpdateSymbolSpanStyleOptions, RichEditorParagraphStyleOptions, RichEditorImageSpanResult, RichEditorParagraphResult, RichEditorSpan, RichEditorDeleteDirection, RichEditorOptions, RichEditorStyledStringController, RichEditorStyledStringControllerInternal, RichEditorStyledStringOptions, LeadingMarginPlaceholder, PreviewMenuOptions, RichEditorGesture, RichEditorSpanPosition, RichEditorLayoutStyle, RichEditorParagraphStyle, RichEditorSymbolSpanStyle, RichEditorSpanStyleOptions, RichEditorUrlStyle, RichEditorImageSpanStyle, RichEditorImageSpanStyleResult, RichEditorTextStyleResult } from "./../richEditor"
import { NavDestinationTransitionDelegate, NavDestinationActiveReason, NavDestinationAttribute, Callback_Boolean, Callback_Object_Void, NavDestinationMode, Callback_NavDestinationContext_Void, NavDestinationContext, NavDestinationContextInternal, NavigationSystemTransitionType, NestedScrollInfo, Callback_NavDestinationActiveReason_Void, Orientation, NavDestinationCommonTitle, NavDestinationCustomTitle, NavDestinationTransition, RouteMapConfig } from "./../navDestination"
import { NavExtender_OnUpdateStack } from "./../navigationExtender"
import { OnAdsBlockedCallback, OnContextMenuHideCallback, OnFirstMeaningfulPaintCallback, OnFullScreenEnterCallback, OnIntelligentTrackingPreventionCallback, OnLargestContentfulPaintCallback, OnNativeEmbedVisibilityChangeCallback, OnNavigationEntryCommittedCallback, OnOverrideUrlLoadingCallback, OnRenderProcessNotRespondingCallback, OnRenderProcessRespondingCallback, OnSafeBrowsingCheckResultCallback, OnSslErrorEventCallback, OnViewportFitChangedCallback, WebKeyboardCallback, BlurOnKeyboardHideMode, CacheMode, ClientAuthenticationHandler, ClientAuthenticationHandlerInternal, ConsoleMessage, ConsoleMessageInternal, MessageLevel, ContextMenuEditStateFlags, ContextMenuInputFieldType, ContextMenuMediaType, ContextMenuSourceType, ControllerHandler, ControllerHandlerInternal, DataResubmissionHandler, DataResubmissionHandlerInternal, EventResult, EventResultInternal, FileSelectorMode, FileSelectorParam, FileSelectorParamInternal, FileSelectorResult, FileSelectorResultInternal, FullScreenExitHandler, FullScreenExitHandlerInternal, HitTestType, HttpAuthHandler, HttpAuthHandlerInternal, JsGeolocation, JsGeolocationInternal, JsResult, JsResultInternal, MixedMode, NativeEmbedStatus, NativeMediaPlayerConfig, OnAudioStateChangedEvent, OnConsoleEvent, OnDataResubmittedEvent, OnFirstContentfulPaintEvent, OnOverScrollEvent, OnProgressChangeEvent, OnScaleChangeEvent, OnScrollEvent, OnSearchResultReceiveEvent, OnShowFileSelectorEvent, OverScrollMode, PermissionRequest, PermissionRequestInternal, ProtectedResourceType, RenderExitReason, RenderMode, RenderProcessNotRespondingReason, ScreenCaptureHandler, ScreenCaptureHandlerInternal, ScreenCaptureConfig, SslError, SslErrorHandler, SslErrorHandlerInternal, ThreatType, ViewportFit, WebAttribute, JavaScriptProxy, WebDarkMode, WebMediaOptions, Callback_OnPageEndEvent_Void, OnPageEndEvent, Callback_OnPageBeginEvent_Void, OnPageBeginEvent, Callback_OnProgressChangeEvent_Void, Callback_OnTitleReceiveEvent_Void, OnTitleReceiveEvent, Callback_OnGeolocationShowEvent_Void, OnGeolocationShowEvent, Callback_OnAlertEvent_Boolean, OnAlertEvent, Callback_OnBeforeUnloadEvent_Boolean, OnBeforeUnloadEvent, Callback_OnConfirmEvent_Boolean, OnConfirmEvent, Callback_OnPromptEvent_Boolean, OnPromptEvent, Callback_OnConsoleEvent_Boolean, Callback_OnErrorReceiveEvent_Void, OnErrorReceiveEvent, Callback_OnHttpErrorReceiveEvent_Void, OnHttpErrorReceiveEvent, Callback_OnDownloadStartEvent_Void, OnDownloadStartEvent, Callback_OnRefreshAccessedHistoryEvent_Void, OnRefreshAccessedHistoryEvent, Type_WebAttribute_onUrlLoadIntercept_callback, Literal_Union_String_WebResourceRequest_data, WebResourceRequest, WebResourceRequestInternal, Callback_Literal_Function_handler_Object_error_Void, Literal_Function_handler_Object_error, Callback_OnRenderExitedEvent_Void, OnRenderExitedEvent, Callback_OnShowFileSelectorEvent_Boolean, Callback_Literal_Object_detail_Boolean, Literal_Object_detail, Type_WebAttribute_onFileSelectorShow_callback, Literal_Function_callback__Object_fileSelector, Callback_OnResourceLoadEvent_Void, OnResourceLoadEvent, FullScreenEnterEvent, Callback_OnScaleChangeEvent_Void, Callback_OnHttpAuthRequestEvent_Boolean, OnHttpAuthRequestEvent, Callback_OnInterceptRequestEvent_WebResourceResponse, OnInterceptRequestEvent, WebResourceResponse, WebResourceResponseInternal, Callback_OnPermissionRequestEvent_Void, OnPermissionRequestEvent, Callback_OnScreenCaptureRequestEvent_Void, OnScreenCaptureRequestEvent, Callback_OnContextMenuShowEvent_Boolean, OnContextMenuShowEvent, Callback_OnSearchResultReceiveEvent_Void, Callback_OnScrollEvent_Void, Callback_OnSslErrorEventReceiveEvent_Void, OnSslErrorEventReceiveEvent, SslErrorEvent, Callback_OnClientAuthenticationEvent_Void, OnClientAuthenticationEvent, Callback_OnWindowNewEvent_Void, OnWindowNewEvent, Callback_OnTouchIconUrlReceivedEvent_Void, OnTouchIconUrlReceivedEvent, Callback_OnFaviconReceivedEvent_Void, OnFaviconReceivedEvent, Callback_OnPageVisibleEvent_Void, OnPageVisibleEvent, Callback_OnDataResubmittedEvent_Void, Callback_OnAudioStateChangedEvent_Void, Callback_OnFirstContentfulPaintEvent_Void, FirstMeaningfulPaint, LargestContentfulPaint, Callback_OnLoadInterceptEvent_Boolean, OnLoadInterceptEvent, Callback_OnOverScrollEvent_Void, LoadCommittedDetails, IntelligentTrackingPreventionDetails, ScriptItem, WebLayoutMode, NestedScrollOptionsExt, Callback_NativeEmbedDataInfo_Void, NativeEmbedDataInfo, NativeEmbedVisibilityInfo, Callback_NativeEmbedTouchInfo_Void, NativeEmbedTouchInfo, RenderProcessNotRespondingData, ExpandedMenuItemOptions, WebKeyboardCallbackInfo, AdsBlockedDetails, WebKeyboardAvoidMode, EmbedOptions, WebElementType, WebResponseType, SelectionMenuOptionsExt, WebCaptureMode, WebContextMenuParam, WebContextMenuParamInternal, WebContextMenuResult, WebContextMenuResultInternal, WebController, WebControllerInternal, Literal_String_script_Callback_String_Void_callback_, Literal_String_baseUrl_data_encoding_historyUrl_mimeType, Literal_Union_String_Resource_url_Array_Header_headers, Header, Literal_Object_object__String_name_Array_String_methodList, WebCookie, WebCookieInternal, WebKeyboardController, WebKeyboardControllerInternal, WebNavigationType, WebResourceError, WebResourceErrorInternal, Callback_Literal_String_plainText_Void, Literal_String_plainText, WebKeyboardOptions, WebOptionsSerializer, NativeEmbedInfo } from "./../web"
import { OnAlphabetIndexerPopupSelectCallback, OnAlphabetIndexerRequestPopupDataCallback, OnAlphabetIndexerSelectCallback, AlphabetIndexerAttribute, Callback_Number_Void, IndexerAlign, Callback_Opt_Number_Void, AlphabetIndexerOptions } from "./../alphabetIndexer"
import { OnCheckboxChangeCallback, Callback_Opt_Boolean_Void, CheckboxOptions } from "./../checkbox"
import { OnCheckboxGroupChangeCallback, SelectStatus, CheckboxGroupResult, CheckboxGroupOptions } from "./../checkboxgroup"
import { OnContentScrollCallback, OnPasteCallback, OnSubmitCallback, OnTextSelectionChangeCallback, ContentType, EnterKeyType, InputType, SubmitEvent, SubmitEventInternal, TextInputAttribute, TextInputStyle, PasswordIcon, UnderlineColor, TextInputController, TextInputControllerInternal, TextInputOptions } from "./../textInput"
import { OnFoldStatusChangeCallback, OnHoverStatusChangeCallback, OnFoldStatusChangeInfo, HoverEventParam, FolderStackOptions } from "./../folderStack"
import { OnHoverCallback } from "./../sdk-stubs"
import { OnLinearIndicatorChangeCallback, LinearIndicatorController, LinearIndicatorControllerInternal, LinearIndicatorStartOptions, LinearIndicatorStyle } from "./../linearindicator"
import { OnNativeLoadCallback, XComponentController, XComponentControllerInternal, Literal_Number_surfaceHeight_surfaceWidth, SurfaceRect, SurfaceRotationOptions, NativeXComponentParameters, XComponentOptions } from "./../xcomponent"
import { OnRadioChangeCallback, RadioIndicatorType, RadioOptions, RadioStyle } from "./../radio"
import { OnRatingChangeCallback, RatingOptions, StarStyleOptions } from "./../rating"
import { OnScrollEdgeCallback, OnScrollFrameBeginCallback, ScrollOnScrollCallback, ScrollOnWillScrollCallback, Scroller, ScrollerInternal, ScrollAlign, OffsetResult, OnScrollFrameBeginHandlerResult, ScrollAttribute, ScrollDirection, ScrollSnapOptions, OffsetOptions, ScrollOptions, ScrollEdgeOptions, ScrollPageOptions, Literal_Boolean_next_Axis_direction, ScrollToIndexOptions, ScrollAnimationOptions } from "./../scroll"
import { OnScrollVisibleContentChangeCallback, ChainEdgeEffect, ScrollState, ListAttribute, ListItemAlign, ListDividerOptions, ChainAnimationOptions, StickyStyle, ScrollSnapAlign, Callback_Number_Number_Number_Void, VisibleListContentInfo, Callback_Number_Boolean, Callback_Number_Number_Boolean, ListItemGroupArea, ListScroller, ListScrollerInternal, CloseSwipeActionOptions, ListOptions } from "./../list"
import { OnSelectCallback, ArrowPosition, AvoidanceMode, MenuAlignType, SelectAttribute, Callback_Number_String_Void, MenuOutlineOptions, Callback_Opt_Union_Number_Resource_Void, Callback_Opt_ResourceStr_Void, MenuItemConfiguration, MenuItemConfigurationInternal, SelectOption } from "./../select"
import { OnTabsAnimationEndCallback, OnTabsAnimationStartCallback, OnTabsContentWillChangeCallback, OnTabsGestureSwipeCallback, TabsCustomContentTransitionCallback, AnimationMode, BarMode, BarPosition, LayoutStyle, TabContentTransitionProxy, TabContentTransitionProxyInternal, TabsAnimationEvent, TabsAttribute, BarGridColumnOptions, ScrollableBarModeOptions, TabsCacheMode, TabsController, TabsControllerInternal, TabContentAnimatedTransition, Callback_TabContentTransitionProxy_Void, CommonModifier, TabsOptions } from "./../tabs"
import { OnTextPickerChangeCallback, TextPickerEnterSelectedAreaCallback, TextPickerScrollStopCallback, DividerOptions, TextPickerDialogOptions, Callback_String_Number_Void, Callback_TextPickerResult_Void, TextPickerResult, Callback_Union_Number_Array_Number_Void, Callback_Union_String_Array_String_Void, Type_TextPickerAttribute_onChange_callback, TextCascadePickerRangeContent, TextPickerOptions, TextPickerRangeContent, TextPickerTextStyle } from "./../textPicker"
import { OnTimePickerChangeCallback, TimePickerFormat, TimePickerResult, Callback_TimePickerResult_Void, TimePickerOptions, TimePickerDialogOptions } from "./../timePicker"
import { PageTransitionCallback, RouteType, SlideEffect } from "./../pageTransition"
import { PasteButtonCallback, PasteButtonOnClickResult, PasteDescription, PasteIconStyle, PasteButtonOptions } from "./../pasteButton"
import { PluginErrorCallback, PluginErrorData, PluginComponentTemplate, PluginComponentOptions } from "./../pluginComponent"
import { ReceiveCallback, BaseShape, BaseShapeInternal, CircleShape, CircleShapeInternal, ShapeSize, CommonShape, CommonShapeInternal, WebviewController, WebviewControllerInternal, Summary, EllipseShape, EllipseShapeInternal, ImageModifier, IntentionCode, RectWidthStyle, RectHeightStyle, SymbolGlyphModifier, PathShape, PathShapeInternal, PathShapeOptions, PerfMonitorActionType, PerfMonitorSourceType, RectShape, RectShapeInternal, RectShapeOptions, RoundRectShapeOptions, ResolutionQuality, TextModifier, IndicatorStyle, WebHeader, WindowStatusType, AsyncCallback_image_PixelMap_Void, SnapshotOptions, LabelStyle } from "./../arkui-external"
import { SymbolEffect, SymbolEffectInternal, ReplaceSymbolEffect, ReplaceSymbolEffectInternal, ScaleSymbolEffect, ScaleSymbolEffectInternal } from "../symbolglyph"
import { FontOptions, FontInfo } from "@ohos/font"
import { MeasureOptions } from "@ohos/measure"
import { SaveButtonCallback, SaveButtonOnClickResult, SaveDescription, SaveIconStyle, SaveButtonOptions } from "./../saveButton"
import { SearchSubmitCallback, CancelButtonStyle, SearchAttribute, IconOptions, CancelButtonOptions, CancelButtonSymbolOptions, SearchType, Callback_InsertValue_Boolean, Callback_InsertValue_Void, Callback_DeleteValue_Boolean, Callback_DeleteValue_Void, Callback_EditableTextChangeValue_Boolean, SearchButtonOptions, SearchController, SearchControllerInternal, SearchOptions } from "./../search"
import { SearchValueCallback } from "./../searchops"
import { SelectedCallback } from "./../griditemops"
import { SliderTriggerChangeCallback, SliderAttribute, Callback_Number_SliderChangeMode_Void, SliderChangeMode, SliderBlockStyle, SliderInteraction, SlideRange, SliderBlockType, SliderStyle, SliderOptions } from "./../slider"
import { StepperIndexCallback } from "./../stepperops"
import { StyledStringMarshallCallback, StyledStringUnmarshallCallback, CustomSpan, CustomSpanInternal, CustomSpanMeasureInfo, CustomSpanMetrics, CustomSpanDrawInfo, GestureStyle, GestureStyleInternal, GestureStyleInterface, StyledString, StyledStringInternal, MutableStyledString, MutableStyledStringInternal, ImageAttachment, ImageAttachmentInternal, StyleOptions, StyledStringKey, SpanStyle, UserDataSpan, DecorationStyleInterface, UrlStyle, UrlStyleInternal, BaselineOffsetStyle, BaselineOffsetStyleInternal, LetterSpacingStyle, LetterSpacingStyleInternal, LineHeightStyle, LineHeightStyleInternal, TextShadowStyle, TextShadowStyleInternal, DecorationStyle, DecorationStyleInternal, ImageAttachmentLayoutStyle, ParagraphStyle, ParagraphStyleInternal, ParagraphStyleInterface, TextStyle, TextStyle_styled_stringInternal, TextStyleInterface, BackgroundColorStyle, BackgroundColorStyleInternal, ColorFilterType, ImageAttachmentInterface, AttachmentType, ResourceImageAttachmentOptions, StyledStringValue } from "./../styledString"
import { TextAreaSubmitCallback, TextAreaAttribute, Callback_EnterKeyType_Void, Callback_String_PasteEvent_Void, TextAreaType, Callback_ResourceStr_Void, TextAreaController, TextAreaControllerInternal, TextAreaOptions } from "./../textArea"
import { TextFieldValueCallback } from "./../textfieldops"
import { VoidCallback, ResourceColor, Font, Position, Length, SizeOptions, Offset, ColorFilter, ColorFilterInternal, ResourceStr, Dimension, PX, VP, FP, LPX, Percentage, LengthConstrain, DividerStyleOptions, ConstraintSizeOptions, Area, AccessibilityOptions, Bias, BorderRadiuses, ChainWeightOptions, DirectionalEdgesT, EdgeOutlineStyles, EdgeOutlineWidths, EdgeWidths, OutlineRadiuses, Padding, EdgeColors, LocalizedBorderRadiuses, LocalizedEdgeColors, LocalizedEdges, LocalizedEdgeWidths, LocalizedPadding, LocalizedPosition, MarkStyle, BorderOptions, OutlineOptions, EdgeStyles, Edges } from "./../units"
import { WithThemeInterface, WithThemeAttribute, WithThemeOptions } from "./../withTheme"
import { AccessibilityHoverType, Alignment, Color, AnimationStatus, AppRotation, ArrowPointPosition, Axis, AxisAction, AxisModel, BarState, BorderStyle, CheckBoxShape, ClickEffectLevel, ColoringStrategy, CopyOptions, CrownAction, CrownSensitivity, Curve, DialogButtonStyle, Direction, DividerMode, Edge, EdgeEffect, EllipsisMode, EmbeddedType, FillMode, FlexAlign, FlexDirection, FlexWrap, FocusDrawLevel, FoldStatus, FontStyle, FontWeight, FunctionKey, GradientDirection, HeightBreakpoint, HitTestMode, HorizontalAlign, HoverEffect, IlluminatedType, ImageFit, ImageRepeat, ImageSize, ImageSpanAlignment, InteractionHand, ItemAlign, KeySource, KeyType, LineBreakStrategy, LineCapStyle, LineJoinStyle, MarqueeUpdateStrategy, ModifierKey, MouseAction, MouseButton, NestedScrollMode, ObscuredReasons, OptionWidthMode, PageFlipMode, PixelRoundCalcPolicy, PixelRoundMode, Placement, PlayMode, RelateType, RenderFit, ResponseType, ScrollSource, TextAlign, SharedTransitionEffectType, TextOverflow, TextContentStyle, TextHeightAdaptivePolicy, WordBreak, TextCase, TextSelectableMode, TextDecorationStyle, TextDecorationType, TitleHeight, TouchType, TransitionType, VerticalAlign, Visibility, Week, WidthBreakpoint, XComponentType } from "./../enums"
import { Affinity, LineMetrics, TextBox, RunMetrics, TextDirection } from "./../arkui-graphics-text"
import { Resource } from "global.resource"
import { AnimatedDrawableDescriptor, AnimatedDrawableDescriptorInternal, DrawableDescriptor, DrawableDescriptorInternal, AnimationOptions, LayeredDrawableDescriptor, LayeredDrawableDescriptorInternal, PixelMapDrawableDescriptor, PixelMapDrawableDescriptorInternal } from "./../arkui-drawabledescriptor"
import { PixelMap, PixelMapInternal } from "./../arkui-pixelmap"
import { BadgePosition, BadgeStyle, BadgeParamWithNumber, BadgeParam, BadgeParamWithString } from "./../badge"
import { BarrierDirection, LocalizedBarrierDirection, BarrierStyle, GuideLinePosition, GuideLineStyle, LocalizedBarrierStyle } from "./../relativeContainer"
import { DrawingCanvas, DrawingCanvasInternal, DrawingColorFilter, DrawingColorFilterInternal, DrawingLattice, DrawingLatticeInternal, RectType } from "./../arkui-drawing"
import { BreakpointsReference, GridRowDirection, Callback_String_Void, BreakPoints, GridRowColumnOption, GridRowSizeOption, GutterOption, GridRowOptions } from "./../gridRow"
import { CalendarAlign, CalendarPickerAttribute, Callback_Date_Void, CalendarOptions, CalendarDialogOptions } from "./../calendarPicker"
import { CalendarController, CalendarControllerInternal, Literal_Number_day_month_year, Callback_CalendarRequestedData_Void, CalendarRequestedData, Callback_CalendarSelectedDate_Void, CalendarSelectedDate, CalendarDay, MonthData, CurrentDayStyle, NonCurrentDayStyle, TodayStyle, WeekStyle, WorkStateStyle } from "./../calendar"
import { CanvasGradient, CanvasGradientInternal, CanvasPath, CanvasPathInternal, CanvasPattern, CanvasPatternInternal, OffscreenCanvas, OffscreenCanvasInternal, ImageBitmap, ImageBitmapInternal, RenderingContextSettings, RenderingContextSettingsInternal, OffscreenCanvasRenderingContext2D, OffscreenCanvasRenderingContext2DInternal, Path2D, Path2DInternal, TextMetrics, DrawingRenderingContext, DrawingRenderingContextInternal, ImageData, ImageDataInternal, CanvasRenderer, CanvasRendererInternal, ImageSmoothingQuality, CanvasLineCap, CanvasLineJoin, CanvasDirection, CanvasTextAlign, CanvasTextBaseline, CanvasFillRule, CanvasRenderingContext2D, CanvasRenderingContext2DInternal } from "./../canvas"
import { Matrix2D, Matrix2DInternal } from "./../matrix2d"
import { ColorMode, LayoutDirection } from "./../stateManagement"
import { Component3DAttribute, ModelType, SceneOptions } from "./../component3d"
import { CustomDialogController, CustomDialogControllerInternal, CustomDialogControllerOptions } from "./../customDialogController"
import { DrawContext, Rect, LengthMetricsUnit, LengthUnit, ColorMetrics, ColorMetricsInternal, ShapeClip, RoundRect, Circle, CommandPath, ShapeMask, Size, Vector2, Vector3, Corners, CornerRadius, Edges as EdgesT, Frame, Matrix4, LengthMetrics, LengthMetricsInternal, Position as GraphicsPosition } from "./../../Graphics"
import { DataOperationType } from "./../lazyForEach"
import { DataPanelType, LinearGradient, LinearGradientInternal, ColorStop, DataPanelOptions, DataPanelShadowOptions } from "./../dataPanel"
import { DatePickerMode, Callback_DatePickerResult_Void, DatePickerResult, DatePickerOptions, LunarSwitchStyle, DatePickerDialogOptions } from "./../datePicker"
import { DialogAlignment, DialogButtonDirection, LevelOrder, TextStyle_alert_dialog, AlertDialogButtonBaseOptions, AlertDialogButtonOptions, AlertDialogParamWithButtons, AlertDialogParam, AlertDialogParamWithConfirm, AlertDialogParamWithOptions } from "./../alertDialog"
import { DistributionType, DisturbanceFieldShape, ParticleEmitterShape, ParticleType, ParticleUpdater } from "./../particle"
import { DpiFollowStrategy, UIExtensionProxy, UIExtensionProxyInternal, Callback_UIExtensionProxy_Void, WindowModeFollowStrategy, Callback_Literal_Number_code__want_Void, Literal_Number_code__want, Callback_Map_String_Object_Void, UIExtensionOptions } from "./../uiExtensionComponent"
import { EditMode, ListItemStyle, Sticky, SwipeActionState, SwipeEdgeEffect, Callback_SwipeActionState_Void, ListItemOptions, SwipeActionItem, SwipeActionOptions } from "./../listItem"
import { EffectFillStyle, PulseSymbolEffect, PulseSymbolEffectInternal, SymbolEffectStrategy, SymbolGlyphAttribute, SymbolRenderingStrategy, AppearSymbolEffect, AppearSymbolEffectInternal, BounceSymbolEffect, BounceSymbolEffectInternal, DisappearSymbolEffect, DisappearSymbolEffectInternal, HierarchicalSymbolEffect, HierarchicalSymbolEffectInternal } from "./../symbolglyph"
import { EventTargetInfo, EventTargetInfoInternal, GestureControl, GestureGroupInterface, GestureGroupInterfaceInternal, GestureMode, GestureType, TapGestureInterface, TapGestureInterfaceInternal, LongPressGestureInterface, LongPressGestureInterfaceInternal, PanGestureInterface, PanGestureInterfaceInternal, PinchGestureInterface, PinchGestureInterfaceInternal, SwipeGestureInterface, SwipeGestureInterfaceInternal, RotationGestureInterface, RotationGestureInterfaceInternal, GestureJudgeResult, GestureMask, GesturePriority, GestureRecognizer, GestureRecognizerInternal, GestureRecognizerState, GestureInterface, Literal_Number_duration_fingers_Boolean_repeat, LongPressGestureHandlerOptions, Callback_GestureEvent_Void, GestureEvent, GestureEventInternal, LongPressRecognizer, LongPressRecognizerInternal, PanDirection, Literal_Number_distance_fingers_PanDirection_direction, PanGestureOptions, PanGestureOptionsInternal, PanGestureHandlerOptions, PanRecognizer, PanRecognizerInternal, Literal_Number_distance_fingers, PinchGestureHandlerOptions, PinchRecognizer, PinchRecognizerInternal, Literal_Number_angle_fingers, RotationGestureHandlerOptions, RotationRecognizer, RotationRecognizerInternal, ScrollableTargetInfo, ScrollableTargetInfoInternal, SwipeDirection, Literal_Number_fingers_speed_SwipeDirection_direction, SwipeGestureHandlerOptions, SwipeRecognizer, SwipeRecognizerInternal, TapGestureParameters, TapRecognizer, TapRecognizerInternal, GestureHandler, GestureInfo, BaseGestureEvent, BaseGestureEventInternal, FingerInfo, BaseHandlerOptions, LongPressGestureEvent, LongPressGestureEventInternal, PanGestureEvent, PanGestureEventInternal, PinchGestureEvent, PinchGestureEventInternal, RotationGestureEvent, RotationGestureEventInternal, SwipeGestureEvent, SwipeGestureEventInternal, TapGestureEvent, TapGestureEventInternal } from "./../gesture"
import { Filter, FilterInternal, TileMode, WaterRippleMode, FlyMode, VisualEffect, VisualEffectInternal, BrightnessBlender } from "./../arkui-uieffect"
import { FocusPriority, KeyProcessingMode, FocusBoxStyle } from "./../focus"
import { FormDimension, FormRenderingMode, FormShape, Callback_Any_Void, Callback_FormCallbackInfo_Void, FormCallbackInfo, Callback_Literal_Number_errcode_String_msg_Void, Literal_Number_errcode_String_msg, FormInfo } from "./../formComponent"
import { FrameNode, FrameNodeInternal } from "../../FrameNode"
import { FrictionMotion, FrictionMotionInternal, ScrollMotion, ScrollMotionInternal, SpringProp, SpringPropInternal, SpringMotion, SpringMotionInternal } from "./../animator"
import { FullscreenInfo, PlaybackInfo, PlaybackSpeed, PreparedInfo, SeekMode, VideoController, VideoControllerInternal, Callback_FullscreenInfo_Void, Callback_PlaybackInfo_Void, Callback_PreparedInfo_Void, PosterOptions, VideoOptions } from "./../video"
import { GridAttribute, Callback_Number_Number_ComputedBarAttribute, ComputedBarAttribute, Callback_Number_Number_Void, GridDirection, Callback_ItemDragInfo_Void, Callback_ItemDragInfo_Number_Number_Void, Callback_ItemDragInfo_Number_Void, Callback_ItemDragInfo_Number_Number_Boolean_Void, GridItemAlignment, Callback_Number_ScrollState_Literal_Number_offsetRemain, Literal_Number_offsetRemain, Callback_Number_Tuple_Number_Number, Callback_Number_Tuple_Number_Number_Number_Number, Tuple_Number_Number_Number_Number, GridLayoutOptions } from "./../grid"
import { GridAttribute_onItemDragStart_event_type, ListAttribute_onItemDragStart_event_type, TextTimerAttribute_onTimer_event_type, AnimationRange_Number } from "./../type-replacements"
import { GridItemStyle, GridItemOptions } from "./../gridItem"
import { ImageAnalyzerController, ImageAnalyzerControllerInternal, ImageAnalyzerType, ImageAnalyzerConfig, ImageAIOptions } from "./../imageCommon"
import { IndicatorComponentController, IndicatorComponentControllerInternal } from "./../indicatorcomponent"
import { ItemState } from "./../stepperItem"
import { LayoutMode, SelectedMode, BoardStyle, TabBarSymbol, TabBarIconStyle, TabBarOptions, BottomTabBarStyle, SubTabBarStyle, SubTabBarIndicatorStyle, TabBarLabelStyle } from "./../tabContent"
import { ListItemGroupStyle, ListItemGroupOptions } from "./../listItemGroup"
import { LoadingProgressStyle } from "./../loadingProgress"
import { MarqueeStartPolicy, MarqueeState, TextAttribute, TextOverflowOptions, TextMarqueeOptions, Callback_MarqueeState_Void, TextSpanType, TextResponseType, TextController, TextControllerInternal, TextOptions } from "./../text"
import { Matrix4Transit, Matrix4TransitInternal, TranslateOption, ScaleOption, RotateOption, PolyToPolyOptions } from "./../arkui-matrix4"
import { Tuple_Number_Number, Tuple_Number_Number_Number } from "./../arkui-synthetics"
import { NavigationType } from "./../navigator"
import { NavRouteMode, RouteInfo } from "./../navRouter"
import { Offset_componentutils, RotateResult, ScaleResult, TranslateResult, ComponentInfo, Matrix4Result } from "./../arkui-componentutils"
import { PanelHeight, PanelMode, PanelType, Callback_Number_Number_PanelMode_Void, Callback_Opt_PanelMode_Void } from "./../panel"
import { PatternLockChallengeResult, PatternLockController, PatternLockControllerInternal, Callback_Array_Number_Void, CircleStyleOptions } from "./../patternLock"
import { Point } from "./../point"
import { ProgressStatus, ProgressStyle, ProgressType, ProgressOptions, ProgressStyleOptions, CommonProgressStyleOptions, RingStyleOptions, ScanEffectOptions, LinearStyleOptions, CapsuleStyleOptions } from "./../progress"
import { RefreshStatus, Callback_RefreshStatus_Void, RefreshOptions } from "./../refresh"
import { RootSceneSession } from "./../rootScene"
import { RRect, WindowAnimationTarget } from "./../remoteWindow"
import { ScrollBarDirection, ScrollBarOptions } from "./../scrollBar"
import { SecurityComponentLayoutDirection } from "./../securityComponent"
import { ContentModifier, Callback_WrappedBuilder_Args_Void, CommonConfiguration, WrappedBuilder } from "./../arkui-wrapper-builder"
import { ShapeAttribute, ViewportRect } from "./../shape"
import { SideBarContainerType, SideBarPosition, ButtonIconOptions, ButtonStyle } from "./../sidebar"
import { SizeType, GridContainerOptions } from "./../gridContainer"
import { SubMenuExpandingMode } from "./../menu"
import { TextClockController, TextClockControllerInternal, TextClockOptions } from "./../textClock"
import { TextTimerController, TextTimerControllerInternal, TextTimerOptions } from "./../textTimer"
import { ToggleType, ToggleOptions, SwitchStyle } from "./../toggle"
import { UniformDataType } from "./../arkui-uniformtypedescriptor"
import { WindowSceneAttribute } from "./../windowScene"
import { Callback_Array_String_Void, Callback_Array_TextMenuItem_Void, Callback_Buffer_Void, Callback_ComputedBarAttribute_Void, Callback_CustomBuilder_Void, Callback_GestureJudgeResult_Void, Callback_GestureRecognizer_Void, Callback_HitTestMode_Void, Callback_Literal_Number_offsetRemain_Void, Callback_OffsetResult_Void, Callback_OnScrollFrameBeginHandlerResult_Void, Callback_Opt_Array_NavDestinationTransition_Void, Callback_Opt_Array_String_Void, Callback_Opt_NavigationAnimatedTransition_Void, Callback_Opt_StyledString_Opt_Array_String_Void, Callback_Opt_TabContentAnimatedTransition_Void, Callback_Pointer_Void, Callback_StyledStringMarshallingValue_Void, Callback_TouchResult_Void, Callback_Tuple_Number_Number_Number_Number_Void, Callback_Tuple_Number_Number_Void, Callback_Union_CustomBuilder_DragItemInfo_Void, Callback_WebKeyboardOptions_Void, Callback_WebResourceResponse_Void, Callback_WithThemeAttribute_Void } from "./../generatorSynthetic"
import { Callback_DismissDialogAction_Void, DismissDialogAction, ImmersiveMode, LevelMode, ActionSheetButtonOptions, ActionSheetOffset, SheetInfo, ActionSheetOptions } from "./../actionSheet"
import { Want } from "./../ohos.app.ability"
import { Callback_TerminationInfo_Void, TerminationInfo } from "./../embeddedComponent"
import { BusinessError } from "#external"
import { Profiler } from "./../inspector"
import { ASTCResource } from "./../mediaCachedImage"
import { CircleOptions } from "./../circle"
import { ColumnOptions, ColumnOptionsV2 } from "./../column"
import { ColumnSplitDividerStyle } from "./../columnSplit"
import { DateTimeOptions } from "./../arkui-intl"
import { EllipseOptions } from "./../ellipse"
import { FormLinkOptions } from "./../formLink"
import { GaugeOptions, GaugeIndicatorOptions, GaugeShadowOptions } from "./../gauge"
import { GridColColumnOption, GridColOptions } from "./../gridCol"
import { LineOptions } from "./../line"
import { MarqueeOptions } from "./../marquee"
import { PathOptions } from "./../path"
import { PolygonOptions } from "./../polygon"
import { PolylineOptions } from "./../polyline"
import { DrawCallback, RenderNode, RenderNodeInternal } from "../../RenderNode"
import { RoundedRectOptions, RectOptions, RadiusItem } from "./../rect"
import { RowOptions, RowOptionsV2 } from "./../row"
import { StackOptions } from "./../stack"
import { TransformationMatrix } from "./../arkui-common"
import { FlexSpaceOptions, FlexOptions } from "./../flex"
import { ImageFrameInfo } from "./../imageAnimator"
import { MenuItemGroupOptions } from "./../menuItemGroup"
import { MenuItemOptions } from "./../menuItem"
import { TextBackgroundStyle } from "./../span"
import { DividerStyle as DividerStyle_sidebar } from "./../sidebar"
import { NodeContainer_AboutToResizeCallback } from "./../nodeContainer"
import { drawing } from "@ohos/graphics/drawing"
import promptAction from '@ohos/promptAction'

export class Deserializer extends DeserializerBase {
    constructor(data: KSerializerBuffer | KUint8ArrayPtr, length: int32) {
        super(data, length)
    }
    readAccessibilityCallback(isSync: boolean = false): AccessibilityCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (isHover: boolean, event: AccessibilityHoverEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(isHover);
    _argsSerializer.writeAccessibilityHoverEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(589030517, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(589030517, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readAccessibilityFocusCallback(isSync: boolean = false): AccessibilityFocusCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (isFocus: boolean):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(isFocus);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1715445305, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1715445305, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readAlphabetIndexerAttribute(): AlphabetIndexerAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readAnimatedDrawableDescriptor(): AnimatedDrawableDescriptor {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return AnimatedDrawableDescriptorInternal.fromPtr(ptr)
    }
    readBaseShape(): BaseShape {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return BaseShapeInternal.fromPtr(ptr)
    }
    readCalendarController(): CalendarController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CalendarControllerInternal.fromPtr(ptr)
    }
    readCalendarPickerAttribute(): CalendarPickerAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readCanvasGradient(): CanvasGradient {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CanvasGradientInternal.fromPtr(ptr)
    }
    readCanvasPath(): CanvasPath {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CanvasPathInternal.fromPtr(ptr)
    }
    readCanvasPattern(): CanvasPattern {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CanvasPatternInternal.fromPtr(ptr)
    }
    readCircleShape(): CircleShape {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CircleShapeInternal.fromPtr(ptr)
    }
    readClientAuthenticationHandler(): ClientAuthenticationHandler {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ClientAuthenticationHandlerInternal.fromPtr(ptr)
    }
    readColorContent(): ColorContent {
        let value : ColorContent = ({} as ColorContent)
        return value
    }
    readColorFilter(): ColorFilter {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ColorFilterInternal.fromPtr(ptr)
    }
    readCommonShape(): CommonShape {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CommonShapeInternal.fromPtr(ptr)
    }
    readComponent3DAttribute(): Component3DAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readComponentContent(): ComponentContent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ComponentContentInternal.fromPtr(ptr)
    }
    readConsoleMessage(): ConsoleMessage {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ConsoleMessageInternal.fromPtr(ptr)
    }
    readControllerHandler(): ControllerHandler {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ControllerHandlerInternal.fromPtr(ptr)
    }
    readCustomDialogController(): CustomDialogController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CustomDialogControllerInternal.fromPtr(ptr)
    }
    readCustomSpan(): CustomSpan {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CustomSpanInternal.fromPtr(ptr)
    }
    readDataResubmissionHandler(): DataResubmissionHandler {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return DataResubmissionHandlerInternal.fromPtr(ptr)
    }
    readDragEvent(): DragEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return DragEventInternal.fromPtr(ptr)
    }
    readDrawableDescriptor(): DrawableDescriptor {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return DrawableDescriptorInternal.fromPtr(ptr)
    }
    readDrawingCanvas(): drawing.Canvas {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return new drawing.Canvas()
    }
    readDrawingColorFilter(): DrawingColorFilter {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return DrawingColorFilterInternal.fromPtr(ptr)
    }
    readDrawingLattice(): DrawingLattice {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return DrawingLatticeInternal.fromPtr(ptr)
    }
    readDrawModifier(): DrawModifier {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return DrawModifierInternal.fromPtr(ptr)
    }
    readEllipseShape(): EllipseShape {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return EllipseShapeInternal.fromPtr(ptr)
    }
    readEventResult(): EventResult {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return EventResultInternal.fromPtr(ptr)
    }
    readEventTargetInfo(): EventTargetInfo {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return EventTargetInfoInternal.fromPtr(ptr)
    }
    readFileSelectorParam(): FileSelectorParam {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return FileSelectorParamInternal.fromPtr(ptr)
    }
    readFileSelectorResult(): FileSelectorResult {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return FileSelectorResultInternal.fromPtr(ptr)
    }
    readFilter(): Filter {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return FilterInternal.fromPtr(ptr)
    }
    readFrameNode(): FrameNode {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return FrameNodeInternal.fromPtr(ptr)
    }
    readFrictionMotion(): FrictionMotion {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return FrictionMotionInternal.fromPtr(ptr)
    }
    readFullScreenExitHandler(): FullScreenExitHandler {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return FullScreenExitHandlerInternal.fromPtr(ptr)
    }
    readFullscreenInfo(): FullscreenInfo {
        let valueDeserializer : Deserializer = this
        const fullscreen_result : boolean = valueDeserializer.readBoolean()
        let value : FullscreenInfo = ({fullscreen: fullscreen_result} as FullscreenInfo)
        return value
    }
    readGestureGroupInterface(): GestureGroupInterface {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return GestureGroupInterfaceInternal.fromPtr(ptr)
    }
    readGestureModifier(): GestureModifier {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return GestureModifierInternal.fromPtr(ptr)
    }
    readGestureRecognizer(): GestureRecognizer {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return GestureRecognizerInternal.fromPtr(ptr)
    }
    readGestureStyle(): GestureStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return GestureStyleInternal.fromPtr(ptr)
    }
    readGridAttribute(): GridAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readHttpAuthHandler(): HttpAuthHandler {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return HttpAuthHandlerInternal.fromPtr(ptr)
    }
    readICurve(): ICurve {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ICurveInternal.fromPtr(ptr)
    }
    readImageAnalyzerController(): ImageAnalyzerController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ImageAnalyzerControllerInternal.fromPtr(ptr)
    }
    readImageModifier(): ImageModifier {
        let value : ImageModifier = ({} as ImageModifier)
        return value
    }
    readIndicatorComponentController(): IndicatorComponentController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return IndicatorComponentControllerInternal.fromPtr(ptr)
    }
    readJsGeolocation(): JsGeolocation {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return JsGeolocationInternal.fromPtr(ptr)
    }
    readJsResult(): JsResult {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return JsResultInternal.fromPtr(ptr)
    }
    readLayeredDrawableDescriptor(): LayeredDrawableDescriptor {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LayeredDrawableDescriptorInternal.fromPtr(ptr)
    }
    readLayoutManager(): LayoutManager {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LayoutManagerInternal.fromPtr(ptr)
    }
    readLayoutPolicy(): LayoutPolicy {
        let value : LayoutPolicy = ({} as LayoutPolicy)
        return value
    }
    readLengthConstrain(): LengthConstrain {
        let valueDeserializer : Deserializer = this
        const minLength_result : Length = (valueDeserializer.readLength() as Length)
        const maxLength_result : Length = (valueDeserializer.readLength() as Length)
        let value : LengthConstrain = ({minLength: minLength_result, maxLength: maxLength_result} as LengthConstrain)
        return value
    }
    readLinearGradient(): LinearGradient {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LinearGradientInternal.fromPtr(ptr)
    }
    readLinearIndicatorController(): LinearIndicatorController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LinearIndicatorControllerInternal.fromPtr(ptr)
    }
    readListAttribute(): ListAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readListScroller(): ListScroller {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ListScrollerInternal.fromPtr(ptr)
    }
    readLongPressGestureInterface(): LongPressGestureInterface {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LongPressGestureInterfaceInternal.fromPtr(ptr)
    }
    readLongPressRecognizer(): LongPressRecognizer {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LongPressRecognizerInternal.fromPtr(ptr)
    }
    readMatrix4Transit(): Matrix4Transit {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return Matrix4TransitInternal.fromPtr(ptr)
    }
    readNativeMediaPlayerConfig(): NativeMediaPlayerConfig {
        let valueDeserializer : Deserializer = this
        const enable_result : boolean = valueDeserializer.readBoolean()
        const shouldOverlay_result : boolean = valueDeserializer.readBoolean()
        let value : NativeMediaPlayerConfig = ({enable: enable_result, shouldOverlay: shouldOverlay_result} as NativeMediaPlayerConfig)
        return value
    }
    readNavDestinationAttribute(): NavDestinationAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readNavigationAttribute(): NavigationAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readNavPathStack(): NavPathStack {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return NavPathStackInternal.fromPtr(ptr)
    }
    readNestedScrollOptions(): NestedScrollOptions {
        let valueDeserializer : Deserializer = this
        const scrollForward_result : NestedScrollMode = TypeChecker.NestedScrollMode_FromNumeric(valueDeserializer.readInt32())
        const scrollBackward_result : NestedScrollMode = TypeChecker.NestedScrollMode_FromNumeric(valueDeserializer.readInt32())
        let value : NestedScrollOptions = ({scrollForward: scrollForward_result, scrollBackward: scrollBackward_result} as NestedScrollOptions)
        return value
    }
    readOffscreenCanvas(): OffscreenCanvas {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return OffscreenCanvasInternal.fromPtr(ptr)
    }
    readOffset(): Offset {
        let valueDeserializer : Deserializer = this
        const dx_result : Length = (valueDeserializer.readLength() as Length)
        const dy_result : Length = (valueDeserializer.readLength() as Length)
        let value : Offset = ({dx: dx_result, dy: dy_result} as Offset)
        return value
    }
    readOffset_componentutils(): Offset_componentutils {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        let value : Offset_componentutils = ({x: x_result, y: y_result} as Offset_componentutils)
        return value
    }
    readOffsetResult(): OffsetResult {
        let valueDeserializer : Deserializer = this
        const xOffset_result : number = (valueDeserializer.readNumber() as number)
        const yOffset_result : number = (valueDeserializer.readNumber() as number)
        let value : OffsetResult = ({xOffset: xOffset_result, yOffset: yOffset_result} as OffsetResult)
        return value
    }
    readScrollResult(): ScrollResult {
        let valueDeserializer: Deserializer = this
        const offsetRemain_result: number = (valueDeserializer.readNumber() as number)
        let value: ScrollResult = ({offsetRemain: offsetRemain_result} as ScrollResult)
        return value
    }
    readOnAudioStateChangedEvent(): OnAudioStateChangedEvent {
        let valueDeserializer : Deserializer = this
        const playing_result : boolean = valueDeserializer.readBoolean()
        let value : OnAudioStateChangedEvent = ({playing: playing_result} as OnAudioStateChangedEvent)
        return value
    }
    readOnConsoleEvent(): OnConsoleEvent {
        let valueDeserializer : Deserializer = this
        const message_result : ConsoleMessage = (valueDeserializer.readConsoleMessage() as ConsoleMessage)
        let value : OnConsoleEvent = ({message: message_result} as OnConsoleEvent)
        return value
    }
    readOnDataResubmittedEvent(): OnDataResubmittedEvent {
        let valueDeserializer : Deserializer = this
        const handler_result : DataResubmissionHandler = (valueDeserializer.readDataResubmissionHandler() as DataResubmissionHandler)
        let value : OnDataResubmittedEvent = ({handler: handler_result} as OnDataResubmittedEvent)
        return value
    }
    readOnFirstContentfulPaintEvent(): OnFirstContentfulPaintEvent {
        let valueDeserializer : Deserializer = this
        const navigationStartTick_result : number = (valueDeserializer.readNumber() as number)
        const firstContentfulPaintMs_result : number = (valueDeserializer.readNumber() as number)
        let value : OnFirstContentfulPaintEvent = ({navigationStartTick: navigationStartTick_result, firstContentfulPaintMs: firstContentfulPaintMs_result} as OnFirstContentfulPaintEvent)
        return value
    }
    readOnFoldStatusChangeInfo(): OnFoldStatusChangeInfo {
        let valueDeserializer : Deserializer = this
        const foldStatus_result : FoldStatus = TypeChecker.FoldStatus_FromNumeric(valueDeserializer.readInt32())
        let value : OnFoldStatusChangeInfo = ({foldStatus: foldStatus_result} as OnFoldStatusChangeInfo)
        return value
    }
    readOnOverScrollEvent(): OnOverScrollEvent {
        let valueDeserializer : Deserializer = this
        const xOffset_result : number = (valueDeserializer.readNumber() as number)
        const yOffset_result : number = (valueDeserializer.readNumber() as number)
        let value : OnOverScrollEvent = ({xOffset: xOffset_result, yOffset: yOffset_result} as OnOverScrollEvent)
        return value
    }
    readOnProgressChangeEvent(): OnProgressChangeEvent {
        let valueDeserializer : Deserializer = this
        const newProgress_result : number = (valueDeserializer.readNumber() as number)
        let value : OnProgressChangeEvent = ({newProgress: newProgress_result} as OnProgressChangeEvent)
        return value
    }
    readOnScaleChangeEvent(): OnScaleChangeEvent {
        let valueDeserializer : Deserializer = this
        const oldScale_result : number = (valueDeserializer.readNumber() as number)
        const newScale_result : number = (valueDeserializer.readNumber() as number)
        let value : OnScaleChangeEvent = ({oldScale: oldScale_result, newScale: newScale_result} as OnScaleChangeEvent)
        return value
    }
    readOnScrollEvent(): OnScrollEvent {
        let valueDeserializer : Deserializer = this
        const xOffset_result : number = (valueDeserializer.readNumber() as number)
        const yOffset_result : number = (valueDeserializer.readNumber() as number)
        let value : OnScrollEvent = ({xOffset: xOffset_result, yOffset: yOffset_result} as OnScrollEvent)
        return value
    }
    readOnScrollFrameBeginHandlerResult(): OnScrollFrameBeginHandlerResult {
        let valueDeserializer : Deserializer = this
        const offsetRemain_result : number = (valueDeserializer.readNumber() as number)
        let value : OnScrollFrameBeginHandlerResult = ({offsetRemain: offsetRemain_result} as OnScrollFrameBeginHandlerResult)
        return value
    }
    readOnSearchResultReceiveEvent(): OnSearchResultReceiveEvent {
        let valueDeserializer : Deserializer = this
        const activeMatchOrdinal_result : number = (valueDeserializer.readNumber() as number)
        const numberOfMatches_result : number = (valueDeserializer.readNumber() as number)
        const isDoneCounting_result : boolean = valueDeserializer.readBoolean()
        let value : OnSearchResultReceiveEvent = ({activeMatchOrdinal: activeMatchOrdinal_result, numberOfMatches: numberOfMatches_result, isDoneCounting: isDoneCounting_result} as OnSearchResultReceiveEvent)
        return value
    }
    readOnShowFileSelectorEvent(): OnShowFileSelectorEvent {
        let valueDeserializer : Deserializer = this
        const result_result : FileSelectorResult = (valueDeserializer.readFileSelectorResult() as FileSelectorResult)
        const fileSelector_result : FileSelectorParam = (valueDeserializer.readFileSelectorParam() as FileSelectorParam)
        let value : OnShowFileSelectorEvent = ({result: result_result, fileSelector: fileSelector_result} as OnShowFileSelectorEvent)
        return value
    }
    readPanGestureInterface(): PanGestureInterface {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PanGestureInterfaceInternal.fromPtr(ptr)
    }
    readPanGestureOptions(): PanGestureOptions {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PanGestureOptionsInternal.fromPtr(ptr)
    }
    readPanRecognizer(): PanRecognizer {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PanRecognizerInternal.fromPtr(ptr)
    }
    readPath2D(): Path2D {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return Path2DInternal.fromPtr(ptr)
    }
    readPathShape(): PathShape {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PathShapeInternal.fromPtr(ptr)
    }
    readPatternLockController(): PatternLockController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PatternLockControllerInternal.fromPtr(ptr)
    }
    readPermissionRequest(): PermissionRequest {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PermissionRequestInternal.fromPtr(ptr)
    }
    readPinchGestureInterface(): PinchGestureInterface {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PinchGestureInterfaceInternal.fromPtr(ptr)
    }
    readPinchRecognizer(): PinchRecognizer {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PinchRecognizerInternal.fromPtr(ptr)
    }
    readPixelMap(): PixelMap {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PixelMapInternal.fromPtr(ptr)
    }
    readPixelMapDrawableDescriptor(): PixelMapDrawableDescriptor {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PixelMapDrawableDescriptorInternal.fromPtr(ptr)
    }
    readPixelMapMock(): PixelMapMock {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PixelMapMockInternal.fromPtr(ptr)
    }
    readPlaybackInfo(): PlaybackInfo {
        let valueDeserializer : Deserializer = this
        const time_result : number = (valueDeserializer.readNumber() as number)
        let value : PlaybackInfo = ({time: time_result} as PlaybackInfo)
        return value
    }
    readPoint(): Point {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        let value : Point = ({x: x_result, y: y_result} as Point)
        return value
    }
    readPopupStateChangeParam(): PopupStateChangeParam {
        let valueDeserializer : Deserializer = this
        const isVisible_result : boolean = valueDeserializer.readBoolean()
        let value : PopupStateChangeParam = ({isVisible: isVisible_result} as PopupStateChangeParam)
        return value
    }
    readPositionWithAffinity(): PositionWithAffinity {
        let valueDeserializer : Deserializer = this
        const position_result : number = (valueDeserializer.readNumber() as number)
        const affinity_result : Affinity = TypeChecker.Affinity_FromNumeric(valueDeserializer.readInt32())
        let value : PositionWithAffinity = ({position: position_result, affinity: affinity_result} as PositionWithAffinity)
        return value
    }
    readPreparedInfo(): PreparedInfo {
        let valueDeserializer : Deserializer = this
        const duration_result : number = (valueDeserializer.readNumber() as number)
        let value : PreparedInfo = ({duration: duration_result} as PreparedInfo)
        return value
    }
    readProgressMask(): ProgressMask {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ProgressMaskInternal.fromPtr(ptr)
    }
    readPulseSymbolEffect(): PulseSymbolEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PulseSymbolEffectInternal.fromPtr(ptr)
    }
    readRect(): Rect {
        let valueDeserializer : Deserializer = this
        const left_result : number = (valueDeserializer.readNumber() as number)
        const top_result : number = (valueDeserializer.readNumber() as number)
        const right_result : number = (valueDeserializer.readNumber() as number)
        const bottom_result : number = (valueDeserializer.readNumber() as number)
        let value : Rect = ({left: left_result, top: top_result, right: right_result, bottom: bottom_result} as Rect)
        return value
    }
    readRectResult(): RectResult {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        const width_result : number = (valueDeserializer.readNumber() as number)
        const height_result : number = (valueDeserializer.readNumber() as number)
        let value : RectResult = ({x: x_result, y: y_result, width: width_result, height: height_result} as RectResult)
        return value
    }
    readRectShape(): RectShape {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RectShapeInternal.fromPtr(ptr)
    }
    readRichEditorAttribute(): RichEditorAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readRichEditorBaseController(): RichEditorBaseController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RichEditorBaseControllerInternal.fromPtr(ptr)
    }
    readRichEditorController(): RichEditorController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RichEditorControllerInternal.fromPtr(ptr)
    }
    readRichEditorOptions(): RichEditorOptions {
        let valueDeserializer : Deserializer = this
        const controller_result : RichEditorController = (valueDeserializer.readRichEditorController() as RichEditorController)
        let value : RichEditorOptions = ({controller: controller_result} as RichEditorOptions)
        return value
    }
    readRichEditorStyledStringController(): RichEditorStyledStringController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RichEditorStyledStringControllerInternal.fromPtr(ptr)
    }
    readRichEditorStyledStringOptions(): RichEditorStyledStringOptions {
        let valueDeserializer : Deserializer = this
        const controller_result : RichEditorStyledStringController = (valueDeserializer.readRichEditorStyledStringController() as RichEditorStyledStringController)
        let value : RichEditorStyledStringOptions = ({controller: controller_result} as RichEditorStyledStringOptions)
        return value
    }
    readRootSceneSession(): RootSceneSession {
        let value : RootSceneSession = ({} as RootSceneSession)
        return value
    }
    readRotateResult(): RotateResult {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        const z_result : number = (valueDeserializer.readNumber() as number)
        const centerX_result : number = (valueDeserializer.readNumber() as number)
        const centerY_result : number = (valueDeserializer.readNumber() as number)
        const angle_result : number = (valueDeserializer.readNumber() as number)
        let value : RotateResult = ({x: x_result, y: y_result, z: z_result, centerX: centerX_result, centerY: centerY_result, angle: angle_result} as RotateResult)
        return value
    }
    readRotationGestureInterface(): RotationGestureInterface {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RotationGestureInterfaceInternal.fromPtr(ptr)
    }
    readRotationRecognizer(): RotationRecognizer {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RotationRecognizerInternal.fromPtr(ptr)
    }
    readRRect(): RRect {
        let valueDeserializer : Deserializer = this
        const left_result : number = (valueDeserializer.readNumber() as number)
        const top_result : number = (valueDeserializer.readNumber() as number)
        const width_result : number = (valueDeserializer.readNumber() as number)
        const height_result : number = (valueDeserializer.readNumber() as number)
        const radius_result : number = (valueDeserializer.readNumber() as number)
        let value : RRect = ({left: left_result, top: top_result, width: width_result, height: height_result, radius: radius_result} as RRect)
        return value
    }
    readRunMetrics(): RunMetrics {
        let value : RunMetrics = ({} as RunMetrics)
        return value
    }
    readScaleResult(): ScaleResult {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        const z_result : number = (valueDeserializer.readNumber() as number)
        const centerX_result : number = (valueDeserializer.readNumber() as number)
        const centerY_result : number = (valueDeserializer.readNumber() as number)
        let value : ScaleResult = ({x: x_result, y: y_result, z: z_result, centerX: centerX_result, centerY: centerY_result} as ScaleResult)
        return value
    }
    readScene(): Scene {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SceneInternal.fromPtr(ptr)
    }
    readScreenCaptureHandler(): ScreenCaptureHandler {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ScreenCaptureHandlerInternal.fromPtr(ptr)
    }
    readScrollableTargetInfo(): ScrollableTargetInfo {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ScrollableTargetInfoInternal.fromPtr(ptr)
    }
    readScrollAttribute(): ScrollAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readScroller(): Scroller {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ScrollerInternal.fromPtr(ptr)
    }
    readScrollMotion(): ScrollMotion {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ScrollMotionInternal.fromPtr(ptr)
    }
    readSearchAttribute(): SearchAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readSearchController(): SearchController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SearchControllerInternal.fromPtr(ptr)
    }
    readSelectAttribute(): SelectAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readShapeAttribute(): ShapeAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readSize(): Size {
        let valueDeserializer : Deserializer = this
        const width_result : number = (valueDeserializer.readNumber() as number)
        const height_result : number = (valueDeserializer.readNumber() as number)
        let value : Size = ({width: width_result, height: height_result} as Size)
        return value
    }
    readSliderAttribute(): SliderAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readSpringMotion(): SpringMotion {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SpringMotionInternal.fromPtr(ptr)
    }
    readSpringProp(): SpringProp {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SpringPropInternal.fromPtr(ptr)
    }
    readSslErrorHandler(): SslErrorHandler {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SslErrorHandlerInternal.fromPtr(ptr)
    }
    readStyledString(): StyledString {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return StyledStringInternal.fromPtr(ptr)
    }
    readStyledStringController(): StyledStringController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return StyledStringControllerInternal.fromPtr(ptr)
    }
    readSubmitEvent(): SubmitEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SubmitEventInternal.fromPtr(ptr)
    }
    readSwipeGestureInterface(): SwipeGestureInterface {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SwipeGestureInterfaceInternal.fromPtr(ptr)
    }
    readSwiperAnimationEvent(): SwiperAnimationEvent {
        let valueDeserializer : Deserializer = this
        const currentOffset_result : number = (valueDeserializer.readNumber() as number)
        const targetOffset_result : number = (valueDeserializer.readNumber() as number)
        const velocity_result : number = (valueDeserializer.readNumber() as number)
        let value : SwiperAnimationEvent = ({currentOffset: currentOffset_result, targetOffset: targetOffset_result, velocity: velocity_result} as SwiperAnimationEvent)
        return value
    }
    readSwiperAttribute(): SwiperAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readSwiperContentTransitionProxy(): SwiperContentTransitionProxy {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SwiperContentTransitionProxyInternal.fromPtr(ptr)
    }
    readSwiperContentWillScrollResult(): SwiperContentWillScrollResult {
        let valueDeserializer : Deserializer = this
        const currentIndex_result : number = (valueDeserializer.readNumber() as number)
        const comingIndex_result : number = (valueDeserializer.readNumber() as number)
        const offset_result : number = (valueDeserializer.readNumber() as number)
        let value : SwiperContentWillScrollResult = ({currentIndex: currentIndex_result, comingIndex: comingIndex_result, offset: offset_result} as SwiperContentWillScrollResult)
        return value
    }
    readSwiperController(): SwiperController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SwiperControllerInternal.fromPtr(ptr)
    }
    readSwipeRecognizer(): SwipeRecognizer {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SwipeRecognizerInternal.fromPtr(ptr)
    }
    readSymbolEffect(): SymbolEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SymbolEffectInternal.fromPtr(ptr)
    }
    readSymbolGlyphAttribute(): SymbolGlyphAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readSymbolGlyphModifier(): SymbolGlyphModifier {
        let value : SymbolGlyphModifier = ({} as SymbolGlyphModifier)
        return value
    }
    readTabContentTransitionProxy(): TabContentTransitionProxy {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TabContentTransitionProxyInternal.fromPtr(ptr)
    }
    readTabsAnimationEvent(): TabsAnimationEvent {
        let valueDeserializer : Deserializer = this
        const currentOffset_result : number = (valueDeserializer.readNumber() as number)
        const targetOffset_result : number = (valueDeserializer.readNumber() as number)
        const velocity_result : number = (valueDeserializer.readNumber() as number)
        let value : TabsAnimationEvent = ({currentOffset: currentOffset_result, targetOffset: targetOffset_result, velocity: velocity_result} as TabsAnimationEvent)
        return value
    }
    readTabsAttribute(): TabsAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readTabsController(): TabsController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TabsControllerInternal.fromPtr(ptr)
    }
    readTapGestureInterface(): TapGestureInterface {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TapGestureInterfaceInternal.fromPtr(ptr)
    }
    readTapRecognizer(): TapRecognizer {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TapRecognizerInternal.fromPtr(ptr)
    }
    readTextAreaAttribute(): TextAreaAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readTextAreaController(): TextAreaController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextAreaControllerInternal.fromPtr(ptr)
    }
    readTextAttribute(): TextAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readTextBaseController(): TextBaseController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextBaseControllerInternal.fromPtr(ptr)
    }
    readTextClockController(): TextClockController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextClockControllerInternal.fromPtr(ptr)
    }
    readTextContentControllerBase(): TextContentControllerBase {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextContentControllerBaseInternal.fromPtr(ptr)
    }
    readTextController(): TextController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextControllerInternal.fromPtr(ptr)
    }
    readTextEditControllerEx(): TextEditControllerEx {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextEditControllerExInternal.fromPtr(ptr)
    }
    readTextInputAttribute(): TextInputAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readTextInputController(): TextInputController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextInputControllerInternal.fromPtr(ptr)
    }
    readTextMenuItemId(): TextMenuItemId {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextMenuItemIdInternal.fromPtr(ptr)
    }
    readTextMetrics(): TextMetrics {
        let valueDeserializer : Deserializer = this
        const actualBoundingBoxAscent_result : number = (valueDeserializer.readNumber() as number)
        const actualBoundingBoxDescent_result : number = (valueDeserializer.readNumber() as number)
        const actualBoundingBoxLeft_result : number = (valueDeserializer.readNumber() as number)
        const actualBoundingBoxRight_result : number = (valueDeserializer.readNumber() as number)
        const alphabeticBaseline_result : number = (valueDeserializer.readNumber() as number)
        const emHeightAscent_result : number = (valueDeserializer.readNumber() as number)
        const emHeightDescent_result : number = (valueDeserializer.readNumber() as number)
        const fontBoundingBoxAscent_result : number = (valueDeserializer.readNumber() as number)
        const fontBoundingBoxDescent_result : number = (valueDeserializer.readNumber() as number)
        const hangingBaseline_result : number = (valueDeserializer.readNumber() as number)
        const ideographicBaseline_result : number = (valueDeserializer.readNumber() as number)
        const width_result : number = (valueDeserializer.readNumber() as number)
        const height_result : number = (valueDeserializer.readNumber() as number)
        let value : TextMetrics = ({actualBoundingBoxAscent: actualBoundingBoxAscent_result, actualBoundingBoxDescent: actualBoundingBoxDescent_result, actualBoundingBoxLeft: actualBoundingBoxLeft_result, actualBoundingBoxRight: actualBoundingBoxRight_result, alphabeticBaseline: alphabeticBaseline_result, emHeightAscent: emHeightAscent_result, emHeightDescent: emHeightDescent_result, fontBoundingBoxAscent: fontBoundingBoxAscent_result, fontBoundingBoxDescent: fontBoundingBoxDescent_result, hangingBaseline: hangingBaseline_result, ideographicBaseline: ideographicBaseline_result, width: width_result, height: height_result} as TextMetrics)
        return value
    }
    readTextModifier(): TextModifier {
        let value : TextModifier = ({} as TextModifier)
        return value
    }
    readTextOptions(): TextOptions {
        let valueDeserializer : Deserializer = this
        const controller_result : TextController = (valueDeserializer.readTextController() as TextController)
        let value : TextOptions = ({controller: controller_result} as TextOptions)
        return value
    }
    readTextOverflowOptions(): TextOverflowOptions {
        let valueDeserializer : Deserializer = this
        const overflow_result : TextOverflow = TypeChecker.TextOverflow_FromNumeric(valueDeserializer.readInt32())
        let value : TextOverflowOptions = ({overflow: overflow_result} as TextOverflowOptions)
        return value
    }
    readTextTimerController(): TextTimerController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextTimerControllerInternal.fromPtr(ptr)
    }
    readTimePickerResult(): TimePickerResult {
        let valueDeserializer : Deserializer = this
        const hour_result : number = (valueDeserializer.readNumber() as number)
        const minute_result : number = (valueDeserializer.readNumber() as number)
        const second_result : number = (valueDeserializer.readNumber() as number)
        let value : TimePickerResult = ({hour: hour_result, minute: minute_result, second: second_result} as TimePickerResult)
        return value
    }
    readTouchTestInfo(): TouchTestInfo {
        let valueDeserializer : Deserializer = this
        const windowX_result : number = (valueDeserializer.readNumber() as number)
        const windowY_result : number = (valueDeserializer.readNumber() as number)
        const parentX_result : number = (valueDeserializer.readNumber() as number)
        const parentY_result : number = (valueDeserializer.readNumber() as number)
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        const rect_result : RectResult = valueDeserializer.readRectResult()
        const id_result : string = (valueDeserializer.readString() as string)
        let value : TouchTestInfo = ({windowX: windowX_result, windowY: windowY_result, parentX: parentX_result, parentY: parentY_result, x: x_result, y: y_result, rect: rect_result, id: id_result} as TouchTestInfo)
        return value
    }
    readTransitionEffect(): TransitionEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TransitionEffectInternal.fromPtr(ptr)
    }
    readTranslateResult(): TranslateResult {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        const z_result : number = (valueDeserializer.readNumber() as number)
        let value : TranslateResult = ({x: x_result, y: y_result, z: z_result} as TranslateResult)
        return value
    }
    readUICommonEvent(): UICommonEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return UICommonEventInternal.fromPtr(ptr)
    }
    readUIContext(): UIContext {
        return new UIContext(100000)
    }
    readUIExtensionProxy(): UIExtensionProxy {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return UIExtensionProxyInternal.fromPtr(ptr)
    }
    readUIGestureEvent(): UIGestureEvent {
        throw new Error("Interface with functions is not supported")
    }
    readUnifiedData(): UnifiedData {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return UnifiedDataInternal.fromPtr(ptr)
    }
    readUrlStyle(): UrlStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return UrlStyleInternal.fromPtr(ptr)
    }
    readUserDataSpan(): UserDataSpan {
        let value : UserDataSpan = ({} as UserDataSpan)
        return value
    }
    readVector2(): Vector2 {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        let value : Vector2 = ({x: x_result, y: y_result} as Vector2)
        return value
    }
    readVector3(): Vector3 {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        const z_result : number = (valueDeserializer.readNumber() as number)
        let value : Vector3 = ({x: x_result, y: y_result, z: z_result} as Vector3)
        return value
    }
    readVideoController(): VideoController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return VideoControllerInternal.fromPtr(ptr)
    }
    readView(): View {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ViewInternal.fromPtr(ptr)
    }
    readVisualEffect(): VisualEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return VisualEffectInternal.fromPtr(ptr)
    }
    readWaterFlowAttribute(): WaterFlowAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readWaterFlowSections(): WaterFlowSections {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WaterFlowSectionsInternal.fromPtr(ptr)
    }
    readWebAttribute(): WebAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readWebContextMenuParam(): WebContextMenuParam {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WebContextMenuParamInternal.fromPtr(ptr)
    }
    readWebContextMenuResult(): WebContextMenuResult {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WebContextMenuResultInternal.fromPtr(ptr)
    }
    readWebController(): WebController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WebControllerInternal.fromPtr(ptr)
    }
    readWebCookie(): WebCookie {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WebCookieInternal.fromPtr(ptr)
    }
    readWebHeader(): WebHeader {
        let valueDeserializer : Deserializer = this
        const headerKey_result : string = (valueDeserializer.readString() as string)
        const headerValue_result : string = (valueDeserializer.readString() as string)
        let value : WebHeader = ({headerKey: headerKey_result, headerValue: headerValue_result} as WebHeader)
        return value
    }
    readWebKeyboardController(): WebKeyboardController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WebKeyboardControllerInternal.fromPtr(ptr)
    }
    readWebResourceError(): WebResourceError {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WebResourceErrorInternal.fromPtr(ptr)
    }
    readWebResourceRequest(): WebResourceRequest {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WebResourceRequestInternal.fromPtr(ptr)
    }
    readWebResourceResponse(): WebResourceResponse {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WebResourceResponseInternal.fromPtr(ptr)
    }
    readWebviewController(): WebviewController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WebviewControllerInternal.fromPtr(ptr)
    }
    readWindowAnimationTarget(): WindowAnimationTarget {
        let valueDeserializer : Deserializer = this
        const bundleName_result : string = (valueDeserializer.readString() as string)
        const abilityName_result : string = (valueDeserializer.readString() as string)
        const windowBounds_result : RRect = valueDeserializer.readRRect()
        const missionId_result : number = (valueDeserializer.readNumber() as number)
        let value : WindowAnimationTarget = ({bundleName: bundleName_result, abilityName: abilityName_result, windowBounds: windowBounds_result, missionId: missionId_result} as WindowAnimationTarget)
        return value
    }
    readWindowSceneAttribute(): WindowSceneAttribute {
        throw new Error("Interface with functions is not supported")
    }
    readWithThemeAttribute(): WithThemeAttribute {
        let value : WithThemeAttribute = ({} as WithThemeAttribute)
        return value
    }
    readWorkerEventListener(): WorkerEventListener {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return WorkerEventListenerInternal.fromPtr(ptr)
    }
    readXComponentController(): XComponentController {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return XComponentControllerInternal.fromPtr(ptr)
    }
    readAsyncCallback_Array_TextMenuItem_Array_TextMenuItem(isSync: boolean = false): ((menuItems: Array<TextMenuItem>) => Array<TextMenuItem>) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (menuItems: Array<TextMenuItem>):Array<TextMenuItem> => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(menuItems.length as int32);
    for (let i = 0; i < menuItems.length; i++) {
        const menuItems_element : TextMenuItem = menuItems[i];
        _argsSerializer.writeTextMenuItem(menuItems_element);
    }
    let _continuationValue : Array<TextMenuItem> | undefined;
    const _continuationCallback : ((value: Array<TextMenuItem>) => void) = (value: Array<TextMenuItem>):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(300202685, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(300202685, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as Array<TextMenuItem>); }
    }
    readAsyncCallback_image_PixelMap_Void(isSync: boolean = false): ((result: PixelMap) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (result: PixelMap):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writePixelMap(result);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1289587365, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1289587365, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readAsyncCallback_TextMenuItem_TextRange_Boolean(isSync: boolean = false): ((menuItem: TextMenuItem,range: TextRange) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (menuItem: TextMenuItem, range: TextRange):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTextMenuItem(menuItem);
    _argsSerializer.writeTextRange(range);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1581515233, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1581515233, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readButtonTriggerClickCallback(isSync: boolean = false): ButtonTriggerClickCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (xPos: number, yPos: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(xPos);
    _argsSerializer.writeNumber(yPos);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1964292933, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1964292933, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Any_Void(isSync: boolean = false): ((info: object) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (info: object):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.holdAndWriteObject(info);
    (isSync) ? (InteropNativeModule._CallCallbackSync(197193081, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(197193081, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Area_Area_Void(isSync: boolean = false): ((oldValue: Area,newValue: Area) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (oldValue: Area, newValue: Area):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeArea(oldValue);
    _argsSerializer.writeArea(newValue);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2024393616, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2024393616, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Array_Number_Void(isSync: boolean = false): ((input: Array<number>) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (input: Array<number>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(input.length as int32);
    for (let i = 0; i < input.length; i++) {
        const input_element : number = input[i];
        _argsSerializer.writeNumber(input_element);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(582384234, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(582384234, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Array_String_Void(isSync: boolean = false): ((value: Array<string>) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: Array<string>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(value.length as int32);
    for (let i = 0; i < value.length; i++) {
        const value_element : string = value[i];
        _argsSerializer.writeString(value_element);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-440782244, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-440782244, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Array_TextMenuItem_Void(isSync: boolean = false): ((value: Array<TextMenuItem>) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: Array<TextMenuItem>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(value.length as int32);
    for (let i = 0; i < value.length; i++) {
        const value_element : TextMenuItem = value[i];
        _argsSerializer.writeTextMenuItem(value_element);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(528588498, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(528588498, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Array_TouchTestInfo_TouchResult(isSync: boolean = false): ((value: Array<TouchTestInfo>) => TouchResult) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: Array<TouchTestInfo>):TouchResult => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(value.length as int32);
    for (let i = 0; i < value.length; i++) {
        const value_element : TouchTestInfo = value[i];
        _argsSerializer.writeTouchTestInfo(value_element);
    }
    let _continuationValue : TouchResult | undefined;
    const _continuationCallback : ((value: TouchResult) => void) = (value: TouchResult):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-547276916, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-547276916, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as TouchResult); }
    }
    readCallback_AxisEvent_Void(isSync: boolean = false): ((parameter: AxisEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: AxisEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeAxisEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(109087936, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(109087936, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Boolean(isSync: boolean = false): (() => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return ():boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1541107680, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1541107680, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_Boolean_HoverEvent_Void(isSync: boolean = false): ((isHover: boolean,event: HoverEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (isHover: boolean, event: HoverEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(isHover);
    _argsSerializer.writeHoverEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-916602978, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-916602978, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Boolean_Void(isSync: boolean = false): ((isVisible: boolean) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (isVisible: boolean):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(isVisible);
    (isSync) ? (InteropNativeModule._CallCallbackSync(313269291, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(313269291, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Buffer_Void(isSync: boolean = false): ((value: NativeBuffer) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: NativeBuffer):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBuffer(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(908731311, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(908731311, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_CalendarRequestedData_Void(isSync: boolean = false): ((event: CalendarRequestedData) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: CalendarRequestedData):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeCalendarRequestedData(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1074619005, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1074619005, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_CalendarSelectedDate_Void(isSync: boolean = false): ((event: CalendarSelectedDate) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: CalendarSelectedDate):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeCalendarSelectedDate(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-289198976, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-289198976, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_ClickEvent_Void(isSync: boolean = false): ((event: ClickEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ClickEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeClickEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1097178637, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1097178637, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_ComputedBarAttribute_Void(isSync: boolean = false): ((value: ComputedBarAttribute) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: ComputedBarAttribute):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeComputedBarAttribute(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1270343661, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1270343661, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_CopyEvent_Void(isSync: boolean = false): ((parameter: CopyEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: CopyEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeCopyEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-120437466, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-120437466, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    public readCallback_CreateItem(isSync: boolean = false): Callback_CreateItem {
        const _resource: CallbackResource = this.readCallbackResource()
        const _call: KPointer = this.readPointer()
        const _callSync: KPointer = this.readPointer()
        return (index: int32): KPointer => { 
    const _argsSerializer: Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(index);
    let _continuationValue: KPointer | undefined|undefined ;
    const _continuationCallback: ((value: KPointer) => void) = (value: KPointer): void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2019730059, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2019730059, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as KPointer); }
    }
    readCallback_CrownEvent_Void(isSync: boolean = false): ((parameter: CrownEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: CrownEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeCrownEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-827253372, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-827253372, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_CustomBuilder_Void(isSync: boolean = false): ((value: CustomBuilder) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: CustomBuilder):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-721106019, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-721106019, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_CutEvent_Void(isSync: boolean = false): ((parameter: CutEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: CutEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeCutEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1875695871, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1875695871, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Date_Void(isSync: boolean = false): ((parameter: Date) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: Date):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt64((parameter.getTime() as int64));
    (isSync) ? (InteropNativeModule._CallCallbackSync(1405382363, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1405382363, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_DatePickerResult_Void(isSync: boolean = false): ((value: DatePickerResult) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: DatePickerResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDatePickerResult(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1280920532, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1280920532, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_DeleteValue_Boolean(isSync: boolean = false): ((parameter: DeleteValue) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: DeleteValue):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDeleteValue(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1357792883, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1357792883, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_DeleteValue_Void(isSync: boolean = false): ((parameter: DeleteValue) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: DeleteValue):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDeleteValue(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-126251459, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-126251459, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_DismissContentCoverAction_Void(isSync: boolean = false): ((parameter: DismissContentCoverAction) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: DismissContentCoverAction):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDismissContentCoverAction(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1283506641, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1283506641, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_DismissDialogAction_Void(isSync: boolean = false): ((parameter: DismissDialogAction) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: DismissDialogAction):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDismissDialogAction(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2095828093, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2095828093, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_DismissPopupAction_Void(isSync: boolean = false): ((parameter: DismissPopupAction) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: DismissPopupAction):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDismissPopupAction(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2004166751, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2004166751, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_DismissSheetAction_Void(isSync: boolean = false): ((parameter: DismissSheetAction) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: DismissSheetAction):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDismissSheetAction(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(889549796, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(889549796, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_DragEvent_String_Union_CustomBuilder_DragItemInfo(isSync: boolean = false): ((event: DragEvent,extraParams?: string) => CustomBuilder | DragItemInfo) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: DragEvent, extraParams?: string | undefined):CustomBuilder | DragItemInfo => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDragEvent(event);
    let extraParams_type : int32 = RuntimeType.UNDEFINED;
    extraParams_type = runtimeType(extraParams);
    _argsSerializer.writeInt8(extraParams_type as int32);
    if ((RuntimeType.UNDEFINED) != (extraParams_type)) {
        const extraParams_value  = extraParams!;
        _argsSerializer.writeString(extraParams_value);
    }
    let _continuationValue : CustomBuilder | DragItemInfo | undefined;
    const _continuationCallback : ((value: CustomBuilder | DragItemInfo) => void) = (value: CustomBuilder | DragItemInfo):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(480978023, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(480978023, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as CustomBuilder | DragItemInfo); }
    }
    readCallback_DragEvent_String_Void(isSync: boolean = false): ((event: DragEvent,extraParams?: string) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: DragEvent, extraParams?: string | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDragEvent(event);
    let extraParams_type : int32 = RuntimeType.UNDEFINED;
    extraParams_type = runtimeType(extraParams);
    _argsSerializer.writeInt8(extraParams_type as int32);
    if ((RuntimeType.UNDEFINED) != (extraParams_type)) {
        const extraParams_value  = extraParams!;
        _argsSerializer.writeString(extraParams_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-17167687, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-17167687, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_EditableTextChangeValue_Boolean(isSync: boolean = false): ((parameter: EditableTextChangeValue) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: EditableTextChangeValue):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeEditableTextChangeValue(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-602545319, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-602545319, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_EnterKeyType_Void(isSync: boolean = false): ((enterKey: EnterKeyType) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (enterKey: EnterKeyType):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.EnterKeyType_ToNumeric(enterKey));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1802605016, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1802605016, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Extender_OnFinish(isSync: boolean = false): Callback_Extender_OnFinish {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return ():void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-733525640, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-733525640, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Extender_OnProgress(isSync: boolean = false): Callback_Extender_OnProgress {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: float32):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeFloat32(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1264236374, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1264236374, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_FocusAxisEvent_Void(isSync: boolean = false): ((parameter: FocusAxisEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: FocusAxisEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeFocusAxisEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(394781580, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(394781580, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_FormCallbackInfo_Void(isSync: boolean = false): ((parameter: FormCallbackInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: FormCallbackInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeFormCallbackInfo(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(758395742, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(758395742, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_FullscreenInfo_Void(isSync: boolean = false): ((parameter: FullscreenInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: FullscreenInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeFullscreenInfo(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(583294398, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(583294398, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_GestureEvent_Void(isSync: boolean = false): ((event: GestureEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: GestureEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeGestureEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1143194492, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1143194492, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_GestureInfo_BaseGestureEvent_GestureJudgeResult(isSync: boolean = false): ((gestureInfo: GestureInfo,event: BaseGestureEvent) => GestureJudgeResult) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (gestureInfo: GestureInfo, event: BaseGestureEvent):GestureJudgeResult => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeGestureInfo(gestureInfo);
    _argsSerializer.writeBaseGestureEvent(event);
    let _continuationValue : GestureJudgeResult | undefined;
    const _continuationCallback : ((value: GestureJudgeResult) => void) = (value: GestureJudgeResult):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1319043556, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1319043556, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as GestureJudgeResult); }
    }
    readCallback_GestureJudgeResult_Void(isSync: boolean = false): ((value: GestureJudgeResult) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: GestureJudgeResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.GestureJudgeResult_ToNumeric(value));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-684588584, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-684588584, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_GestureRecognizer_Void(isSync: boolean = false): ((value: GestureRecognizer) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: GestureRecognizer):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeGestureRecognizer(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(776202910, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(776202910, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_HitTestMode_Void(isSync: boolean = false): ((value: HitTestMode) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: HitTestMode):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.HitTestMode_ToNumeric(value));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1755111025, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1755111025, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_HoverEvent_Void(isSync: boolean = false): ((parameter: HoverEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: HoverEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeHoverEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1576788379, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1576788379, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_InsertValue_Boolean(isSync: boolean = false): ((parameter: InsertValue) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: InsertValue):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInsertValue(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-383025085, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-383025085, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_InsertValue_Void(isSync: boolean = false): ((parameter: InsertValue) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: InsertValue):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInsertValue(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1121207885, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1121207885, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_ItemDragInfo_Number_Number_Boolean_Void(isSync: boolean = false): ((event: ItemDragInfo,itemIndex: number,insertIndex: number,isSuccess: boolean) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ItemDragInfo, itemIndex: number, insertIndex: number, isSuccess: boolean):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeItemDragInfo(event);
    _argsSerializer.writeNumber(itemIndex);
    _argsSerializer.writeNumber(insertIndex);
    _argsSerializer.writeBoolean(isSuccess);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1627362945, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1627362945, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_ItemDragInfo_Number_Number_Void(isSync: boolean = false): ((event: ItemDragInfo,itemIndex: number,insertIndex: number) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ItemDragInfo, itemIndex: number, insertIndex: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeItemDragInfo(event);
    _argsSerializer.writeNumber(itemIndex);
    _argsSerializer.writeNumber(insertIndex);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-918805852, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-918805852, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_ItemDragInfo_Number_Void(isSync: boolean = false): ((event: ItemDragInfo,itemIndex: number) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ItemDragInfo, itemIndex: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeItemDragInfo(event);
    _argsSerializer.writeNumber(itemIndex);
    (isSync) ? (InteropNativeModule._CallCallbackSync(296908152, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(296908152, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_ItemDragInfo_Void(isSync: boolean = false): ((event: ItemDragInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ItemDragInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeItemDragInfo(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(137353252, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(137353252, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_KeyEvent_Boolean(isSync: boolean = false): ((parameter: KeyEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: KeyEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeKeyEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2061548092, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2061548092, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_KeyEvent_Void(isSync: boolean = false): ((event: KeyEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: KeyEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeKeyEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(707696468, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(707696468, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Literal_Boolean_isVisible_Void(isSync: boolean = false): ((event: Literal_Boolean_isVisible) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: Literal_Boolean_isVisible):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    const event_isVisible  = event.isVisible;
    _argsSerializer.writeBoolean(event_isVisible);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1561407084, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1561407084, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Literal_Function_handler_Object_error_Void(isSync: boolean = false): ((event?: Literal_Function_handler_Object_error) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event?: Literal_Function_handler_Object_error | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let event_type : int32 = RuntimeType.UNDEFINED;
    event_type = runtimeType(event);
    _argsSerializer.writeInt8(event_type as int32);
    if ((RuntimeType.UNDEFINED) != (event_type)) {
        const event_value  = event!;
        const event_value_handler  = event_value.handler;
        _argsSerializer.writeFunction(event_value_handler);
        const event_value_error  = event_value.error;
        _argsSerializer.holdAndWriteObject(event_value_error);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(361012115, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(361012115, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Literal_Number_code__want_Void(isSync: boolean = false): ((parameter: Literal_Number_code__want) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: Literal_Number_code__want):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    const parameter_code  = parameter.code;
    _argsSerializer.writeNumber(parameter_code);
    const parameter_want  = parameter.want;
    let parameter_want_type : int32 = RuntimeType.UNDEFINED;
    parameter_want_type = runtimeType(parameter_want);
    _argsSerializer.writeInt8(parameter_want_type as int32);
    if ((RuntimeType.UNDEFINED) != (parameter_want_type)) {
        const parameter_want_value  = parameter_want!;
        _argsSerializer.writeWant(parameter_want_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-946200218, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-946200218, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Literal_Number_errcode_String_msg_Void(isSync: boolean = false): ((info: Literal_Number_errcode_String_msg) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (info: Literal_Number_errcode_String_msg):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    const info_errcode  = info.errcode;
    _argsSerializer.writeNumber(info_errcode);
    const info_msg  = info.msg;
    _argsSerializer.writeString(info_msg);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1321277443, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1321277443, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Literal_Number_offsetRemain_Void(isSync: boolean = false): ((value: Literal_Number_offsetRemain) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: Literal_Number_offsetRemain):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    const value_offsetRemain  = value.offsetRemain;
    _argsSerializer.writeNumber(value_offsetRemain);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-251706058, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-251706058, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Literal_Object_detail_Boolean(isSync: boolean = false): ((event?: Literal_Object_detail) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event?: Literal_Object_detail | undefined):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let event_type : int32 = RuntimeType.UNDEFINED;
    event_type = runtimeType(event);
    _argsSerializer.writeInt8(event_type as int32);
    if ((RuntimeType.UNDEFINED) != (event_type)) {
        const event_value  = event!;
        const event_value_detail  = event_value.detail;
        _argsSerializer.holdAndWriteObject(event_value_detail);
    }
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(222742448, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(222742448, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_Literal_String_plainText_Void(isSync: boolean = false): ((selectedText: Literal_String_plainText) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (selectedText: Literal_String_plainText):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    const selectedText_plainText  = selectedText.plainText;
    _argsSerializer.writeString(selectedText_plainText);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-122223466, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-122223466, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Map_String_Object_Void(isSync: boolean = false): ((parameter: Map<string, Object>) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: Map<string, Object>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(parameter.size as int32 as int32);
    for (const pair of parameter) {
        const parameter_key = pair[0];
        const parameter_value = pair[1];
        _argsSerializer.writeString(parameter_key);
        _argsSerializer.holdAndWriteObject(parameter_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1146723341, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1146723341, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_MarqueeState_Void(isSync: boolean = false): ((parameter: MarqueeState) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: MarqueeState):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.MarqueeState_ToNumeric(parameter));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-716263454, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-716263454, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_MouseEvent_Void(isSync: boolean = false): ((event: MouseEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: MouseEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeMouseEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1382640094, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1382640094, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_NativeEmbedDataInfo_Void(isSync: boolean = false): ((event: NativeEmbedDataInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: NativeEmbedDataInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNativeEmbedDataInfo(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(477481563, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(477481563, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_NativeEmbedTouchInfo_Void(isSync: boolean = false): ((event: NativeEmbedTouchInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: NativeEmbedTouchInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNativeEmbedTouchInfo(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1090303858, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1090303858, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_NavDestinationActiveReason_Void(isSync: boolean = false): ((parameter: NavDestinationActiveReason) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: NavDestinationActiveReason):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.NavDestinationActiveReason_ToNumeric(parameter));
    (isSync) ? (InteropNativeModule._CallCallbackSync(634825762, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(634825762, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_NavDestinationContext_Void(isSync: boolean = false): ((parameter: NavDestinationContext) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: NavDestinationContext):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNavDestinationContext(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1642725259, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1642725259, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_NavigationMode_Void(isSync: boolean = false): ((mode: NavigationMode) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (mode: NavigationMode):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.NavigationMode_ToNumeric(mode));
    (isSync) ? (InteropNativeModule._CallCallbackSync(960690982, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(960690982, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_NavigationTitleMode_Void(isSync: boolean = false): ((titleMode: NavigationTitleMode) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (titleMode: NavigationTitleMode):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.NavigationTitleMode_ToNumeric(titleMode));
    (isSync) ? (InteropNativeModule._CallCallbackSync(1685437830, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1685437830, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_NavigationTransitionProxy_Void(isSync: boolean = false): ((transitionProxy: NavigationTransitionProxy) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (transitionProxy: NavigationTransitionProxy):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNavigationTransitionProxy(transitionProxy);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1375731066, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1375731066, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Number_Boolean(isSync: boolean = false): ((index: number) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1054099324, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1054099324, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_Number_Number_Boolean(isSync: boolean = false): ((from: number,to: number) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (from: number, to: number):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(from);
    _argsSerializer.writeNumber(to);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1427334496, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1427334496, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_Number_Number_ComputedBarAttribute(isSync: boolean = false): ((index: number,offset: number) => ComputedBarAttribute) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, offset: number):ComputedBarAttribute => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeNumber(offset);
    let _continuationValue : ComputedBarAttribute | undefined;
    const _continuationCallback : ((value: ComputedBarAttribute) => void) = (value: ComputedBarAttribute):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-3987624, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-3987624, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as ComputedBarAttribute); }
    }
    readCallback_Number_Number_Number_Void(isSync: boolean = false): ((start: number,end: number,center: number) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (start: number, end: number, center: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(start);
    _argsSerializer.writeNumber(end);
    _argsSerializer.writeNumber(center);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-352942292, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-352942292, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Number_Number_PanelMode_Void(isSync: boolean = false): ((width: number,height: number,mode: PanelMode) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (width: number, height: number, mode: PanelMode):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(width);
    _argsSerializer.writeNumber(height);
    _argsSerializer.writeInt32(TypeChecker.PanelMode_ToNumeric(mode));
    (isSync) ? (InteropNativeModule._CallCallbackSync(1613628570, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1613628570, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Number_Number_Void(isSync: boolean = false): ((first: number,last: number) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (first: number, last: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(first);
    _argsSerializer.writeNumber(last);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1894574320, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1894574320, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Number_ScrollState_Literal_Number_offsetRemain(isSync: boolean = false): ((offset: number,state: ScrollState) => Literal_Number_offsetRemain) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (offset: number, state: ScrollState):Literal_Number_offsetRemain => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(offset);
    _argsSerializer.writeInt32(TypeChecker.ScrollState_ToNumeric(state));
    let _continuationValue : Literal_Number_offsetRemain | undefined;
    const _continuationCallback : ((value: Literal_Number_offsetRemain) => void) = (value: Literal_Number_offsetRemain):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(2012829508, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(2012829508, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as Literal_Number_offsetRemain); }
    }
    readCallback_Number_SliderChangeMode_Void(isSync: boolean = false): ((value: number,mode: SliderChangeMode) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: number, mode: SliderChangeMode):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(value);
    _argsSerializer.writeInt32(TypeChecker.SliderChangeMode_ToNumeric(mode));
    (isSync) ? (InteropNativeModule._CallCallbackSync(88697971, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(88697971, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Number_String_Void(isSync: boolean = false): ((index: number,value: string) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, value: string):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeString(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(794065478, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(794065478, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Number_Tuple_Number_Number(isSync: boolean = false): ((index: number) => [ number, number ]) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number):[ number, number ] => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    let _continuationValue : [ number, number ] | undefined;
    const _continuationCallback : ((value: [ number, number ]) => void) = (value: [ number, number ]):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1602877440, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1602877440, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as [ number, number ]); }
    }
    readCallback_Number_Tuple_Number_Number_Number_Number(isSync: boolean = false): ((index: number) => [ number, number, number, number ]) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number):[ number, number, number, number ] => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    let _continuationValue : [ number, number, number, number ] | undefined;
    const _continuationCallback : ((value: [ number, number, number, number ]) => void) = (value: [ number, number, number, number ]):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1618565120, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1618565120, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as [ number, number, number, number ]); }
    }
    readCallback_Number_Void(isSync: boolean = false): ((index: number) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    (isSync) ? (InteropNativeModule._CallCallbackSync(36519084, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(36519084, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Object_Void(isSync: boolean = false): ((parameter: Object) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: Object):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.holdAndWriteObject(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1782529222, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1782529222, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OffsetResult_Void(isSync: boolean = false): ((value: OffsetResult) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: OffsetResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOffsetResult(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1295952075, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1295952075, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_ScrollResult_Void(isSync: boolean = false): ((value: ScrollResult) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: ScrollResult):void => { const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeScrollResult(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1385252075, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1385252075, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnAlertEvent_Boolean(isSync: boolean = false): ((parameter: OnAlertEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnAlertEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnAlertEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(806070428, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(806070428, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_OnAudioStateChangedEvent_Void(isSync: boolean = false): ((parameter: OnAudioStateChangedEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnAudioStateChangedEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnAudioStateChangedEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1559789631, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1559789631, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnBeforeUnloadEvent_Boolean(isSync: boolean = false): ((parameter: OnBeforeUnloadEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnBeforeUnloadEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnBeforeUnloadEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-873162122, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-873162122, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_OnClientAuthenticationEvent_Void(isSync: boolean = false): ((parameter: OnClientAuthenticationEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnClientAuthenticationEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnClientAuthenticationEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(608991355, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(608991355, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnConfirmEvent_Boolean(isSync: boolean = false): ((parameter: OnConfirmEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnConfirmEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnConfirmEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(317864672, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(317864672, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_OnConsoleEvent_Boolean(isSync: boolean = false): ((parameter: OnConsoleEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnConsoleEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnConsoleEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(893367077, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(893367077, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_OnContextMenuShowEvent_Boolean(isSync: boolean = false): ((parameter: OnContextMenuShowEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnContextMenuShowEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnContextMenuShowEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(332449533, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(332449533, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_OnDataResubmittedEvent_Void(isSync: boolean = false): ((parameter: OnDataResubmittedEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnDataResubmittedEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnDataResubmittedEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(118631204, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(118631204, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnDownloadStartEvent_Void(isSync: boolean = false): ((parameter: OnDownloadStartEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnDownloadStartEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnDownloadStartEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1834611702, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1834611702, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnErrorReceiveEvent_Void(isSync: boolean = false): ((parameter: OnErrorReceiveEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnErrorReceiveEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnErrorReceiveEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1792851375, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1792851375, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnFaviconReceivedEvent_Void(isSync: boolean = false): ((parameter: OnFaviconReceivedEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnFaviconReceivedEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnFaviconReceivedEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-243916553, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-243916553, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnFirstContentfulPaintEvent_Void(isSync: boolean = false): ((parameter: OnFirstContentfulPaintEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnFirstContentfulPaintEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnFirstContentfulPaintEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1852060212, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1852060212, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnGeolocationShowEvent_Void(isSync: boolean = false): ((parameter: OnGeolocationShowEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnGeolocationShowEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnGeolocationShowEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-941896815, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-941896815, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnHttpAuthRequestEvent_Boolean(isSync: boolean = false): ((parameter: OnHttpAuthRequestEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnHttpAuthRequestEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnHttpAuthRequestEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(780282803, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(780282803, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_OnHttpErrorReceiveEvent_Void(isSync: boolean = false): ((parameter: OnHttpErrorReceiveEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnHttpErrorReceiveEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnHttpErrorReceiveEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2066745559, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2066745559, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnInterceptRequestEvent_WebResourceResponse(isSync: boolean = false): ((parameter: OnInterceptRequestEvent) => WebResourceResponse) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnInterceptRequestEvent):WebResourceResponse => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnInterceptRequestEvent(parameter);
    let _continuationValue : WebResourceResponse | undefined;
    const _continuationCallback : ((value: WebResourceResponse) => void) = (value: WebResourceResponse):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1442698200, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1442698200, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as WebResourceResponse); }
    }
    readCallback_OnLoadInterceptEvent_Boolean(isSync: boolean = false): ((parameter: OnLoadInterceptEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnLoadInterceptEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnLoadInterceptEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1231444306, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1231444306, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_OnOverScrollEvent_Void(isSync: boolean = false): ((parameter: OnOverScrollEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnOverScrollEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnOverScrollEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-860386431, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-860386431, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnPageBeginEvent_Void(isSync: boolean = false): ((parameter: OnPageBeginEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnPageBeginEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnPageBeginEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2040193994, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2040193994, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnPageEndEvent_Void(isSync: boolean = false): ((parameter: OnPageEndEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnPageEndEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnPageEndEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-130135362, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-130135362, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnPageVisibleEvent_Void(isSync: boolean = false): ((parameter: OnPageVisibleEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnPageVisibleEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnPageVisibleEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1805946367, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1805946367, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnPermissionRequestEvent_Void(isSync: boolean = false): ((parameter: OnPermissionRequestEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnPermissionRequestEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnPermissionRequestEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(529980696, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(529980696, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnProgressChangeEvent_Void(isSync: boolean = false): ((parameter: OnProgressChangeEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnProgressChangeEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnProgressChangeEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1018740377, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1018740377, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnPromptEvent_Boolean(isSync: boolean = false): ((parameter: OnPromptEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnPromptEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnPromptEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1826742986, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1826742986, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_OnRefreshAccessedHistoryEvent_Void(isSync: boolean = false): ((parameter: OnRefreshAccessedHistoryEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnRefreshAccessedHistoryEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnRefreshAccessedHistoryEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1978364344, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1978364344, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnRenderExitedEvent_Void(isSync: boolean = false): ((parameter: OnRenderExitedEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnRenderExitedEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnRenderExitedEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1413785559, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1413785559, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnResourceLoadEvent_Void(isSync: boolean = false): ((parameter: OnResourceLoadEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnResourceLoadEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnResourceLoadEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(793995118, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(793995118, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnScaleChangeEvent_Void(isSync: boolean = false): ((parameter: OnScaleChangeEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnScaleChangeEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnScaleChangeEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1782102148, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1782102148, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnScreenCaptureRequestEvent_Void(isSync: boolean = false): ((parameter: OnScreenCaptureRequestEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnScreenCaptureRequestEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnScreenCaptureRequestEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1972321573, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1972321573, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnScrollEvent_Void(isSync: boolean = false): ((parameter: OnScrollEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnScrollEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnScrollEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-172908881, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-172908881, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnScrollFrameBeginHandlerResult_Void(isSync: boolean = false): ((value: OnScrollFrameBeginHandlerResult) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: OnScrollFrameBeginHandlerResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnScrollFrameBeginHandlerResult(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1637092936, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1637092936, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnSearchResultReceiveEvent_Void(isSync: boolean = false): ((parameter: OnSearchResultReceiveEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnSearchResultReceiveEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnSearchResultReceiveEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1495570, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1495570, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnShowFileSelectorEvent_Boolean(isSync: boolean = false): ((parameter: OnShowFileSelectorEvent) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnShowFileSelectorEvent):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnShowFileSelectorEvent(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-636069598, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-636069598, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_OnSslErrorEventReceiveEvent_Void(isSync: boolean = false): ((parameter: OnSslErrorEventReceiveEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnSslErrorEventReceiveEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnSslErrorEventReceiveEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1624791665, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1624791665, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnTitleReceiveEvent_Void(isSync: boolean = false): ((parameter: OnTitleReceiveEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnTitleReceiveEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnTitleReceiveEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-318085495, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-318085495, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnTouchIconUrlReceivedEvent_Void(isSync: boolean = false): ((parameter: OnTouchIconUrlReceivedEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnTouchIconUrlReceivedEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnTouchIconUrlReceivedEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1657893064, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1657893064, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_OnWindowNewEvent_Void(isSync: boolean = false): ((parameter: OnWindowNewEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: OnWindowNewEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnWindowNewEvent(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2052382574, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2052382574, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_Array_NavDestinationTransition_Void(isSync: boolean = false): ((value: Array<NavDestinationTransition> | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value?: Array<NavDestinationTransition> | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    _argsSerializer.writeInt8(value_type as int32);
    if ((RuntimeType.UNDEFINED) != (value_type)) {
        const value_value  = value!;
        _argsSerializer.writeInt32(value_value.length as int32);
        for (let i = 0; i < value_value.length; i++) {
            const value_value_element : NavDestinationTransition = value_value[i];
            _argsSerializer.writeNavDestinationTransition(value_value_element);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(406871767, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(406871767, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_Array_String_Void(isSync: boolean = false): ((error?: Array<string> | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (error?: Array<string> | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let error_type : int32 = RuntimeType.UNDEFINED;
    error_type = runtimeType(error);
    _argsSerializer.writeInt8(error_type as int32);
    if ((RuntimeType.UNDEFINED) != (error_type)) {
        const error_value  = error!;
        _argsSerializer.writeInt32(error_value.length as int32);
        for (let i = 0; i < error_value.length; i++) {
            const error_value_element : string = error_value[i];
            _argsSerializer.writeString(error_value_element);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-543655128, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-543655128, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_Boolean_Void(isSync: boolean = false): ((select: boolean | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (select?: boolean | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let select_type : int32 = RuntimeType.UNDEFINED;
    select_type = runtimeType(select);
    _argsSerializer.writeInt8(select_type as int32);
    if ((RuntimeType.UNDEFINED) != (select_type)) {
        const select_value  = select!;
        _argsSerializer.writeBoolean(select_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1777674145, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1777674145, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_NavigationAnimatedTransition_Void(isSync: boolean = false): ((value: NavigationAnimatedTransition | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value?: NavigationAnimatedTransition | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    _argsSerializer.writeInt8(value_type as int32);
    if ((RuntimeType.UNDEFINED) != (value_type)) {
        const value_value  = value!;
        _argsSerializer.writeNavigationAnimatedTransition(value_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2035339519, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2035339519, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_Number_Void(isSync: boolean = false): ((selected: number | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (selected?: number | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let selected_type : int32 = RuntimeType.UNDEFINED;
    selected_type = runtimeType(selected);
    _argsSerializer.writeInt8(selected_type as int32);
    if ((RuntimeType.UNDEFINED) != (selected_type)) {
        const selected_value  = selected!;
        _argsSerializer.writeNumber(selected_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-233776232, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-233776232, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_PanelMode_Void(isSync: boolean = false): ((mode: PanelMode | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (mode?: PanelMode | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let mode_type : int32 = RuntimeType.UNDEFINED;
    mode_type = runtimeType(mode);
    _argsSerializer.writeInt8(mode_type as int32);
    if ((RuntimeType.UNDEFINED) != (mode_type)) {
        const mode_value  = (mode as PanelMode);
        _argsSerializer.writeInt32(TypeChecker.PanelMode_ToNumeric(mode_value));
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-489468818, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-489468818, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_ResourceStr_Void(isSync: boolean = false): ((value: ResourceStr | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value?: ResourceStr | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    _argsSerializer.writeInt8(value_type as int32);
    if ((RuntimeType.UNDEFINED) != (value_type)) {
        const value_value  = value!;
        let value_value_type : int32 = RuntimeType.UNDEFINED;
        value_value_type = runtimeType(value_value);
        if (RuntimeType.STRING == value_value_type) {
            _argsSerializer.writeInt8(0 as int32);
            const value_value_0  = value_value as string;
            _argsSerializer.writeString(value_value_0);
        }
        else if (RuntimeType.OBJECT == value_value_type) {
            _argsSerializer.writeInt8(1 as int32);
            const value_value_1  = value_value as Resource;
            _argsSerializer.writeResource(value_value_1);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(1613641828, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1613641828, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_StyledString_Opt_Array_String_Void(isSync: boolean = false): ((value?: StyledString | undefined,error?: Array<string> | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value?: StyledString | undefined, error?: Array<string> | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    _argsSerializer.writeInt8(value_type as int32);
    if ((RuntimeType.UNDEFINED) != (value_type)) {
        const value_value  = value!;
        _argsSerializer.writeStyledString(value_value);
    }
    let error_type : int32 = RuntimeType.UNDEFINED;
    error_type = runtimeType(error);
    _argsSerializer.writeInt8(error_type as int32);
    if ((RuntimeType.UNDEFINED) != (error_type)) {
        const error_value  = error!;
        _argsSerializer.writeInt32(error_value.length as int32);
        for (let i = 0; i < error_value.length; i++) {
            const error_value_element : string = error_value[i];
            _argsSerializer.writeString(error_value_element);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-756319131, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-756319131, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_TabContentAnimatedTransition_Void(isSync: boolean = false): ((value: TabContentAnimatedTransition | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value?: TabContentAnimatedTransition | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    _argsSerializer.writeInt8(value_type as int32);
    if ((RuntimeType.UNDEFINED) != (value_type)) {
        const value_value  = value!;
        _argsSerializer.writeTabContentAnimatedTransition(value_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-143931627, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-143931627, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Opt_Union_Number_Resource_Void(isSync: boolean = false): ((selected: number | Resource | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (selected?: number | Resource | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let selected_type : int32 = RuntimeType.UNDEFINED;
    selected_type = runtimeType(selected);
    _argsSerializer.writeInt8(selected_type as int32);
    if ((RuntimeType.UNDEFINED) != (selected_type)) {
        const selected_value  = selected!;
        let selected_value_type : int32 = RuntimeType.UNDEFINED;
        selected_value_type = runtimeType(selected_value);
        if (RuntimeType.NUMBER == selected_value_type) {
            _argsSerializer.writeInt8(0 as int32);
            const selected_value_0  = selected_value as number;
            _argsSerializer.writeNumber(selected_value_0);
        }
        else if (RuntimeType.OBJECT == selected_value_type) {
            _argsSerializer.writeInt8(1 as int32);
            const selected_value_1  = selected_value as Resource;
            _argsSerializer.writeResource(selected_value_1);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(1906972865, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1906972865, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_PlaybackInfo_Void(isSync: boolean = false): ((parameter: PlaybackInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: PlaybackInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writePlaybackInfo(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2058966418, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2058966418, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Pointer_Void(isSync: boolean = false): ((value: KPointer) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: KPointer):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writePointer(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(721562324, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(721562324, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_PopInfo_Void(isSync: boolean = false): ((parameter: PopInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: PopInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writePopInfo(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(624053870, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(624053870, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_PreDragStatus_Void(isSync: boolean = false): ((parameter: PreDragStatus) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: PreDragStatus):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.PreDragStatus_ToNumeric(parameter));
    (isSync) ? (InteropNativeModule._CallCallbackSync(463894668, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(463894668, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_PreparedInfo_Void(isSync: boolean = false): ((parameter: PreparedInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: PreparedInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writePreparedInfo(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1300890372, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1300890372, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    public readCallback_RangeUpdate(isSync: boolean = false): Callback_RangeUpdate {
        const _resource: CallbackResource = this.readCallbackResource()
        const _call: KPointer = this.readPointer()
        const _callSync: KPointer = this.readPointer()
        return (start: int32, end: int32): void => { 
    const _argsSerializer: Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(start);
    _argsSerializer.writeInt32(end);
    (isSync) ? (InteropNativeModule._CallCallbackSync(797834474, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(797834474, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_RefreshStatus_Void(isSync: boolean = false): ((state: RefreshStatus) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (state: RefreshStatus):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.RefreshStatus_ToNumeric(state));
    (isSync) ? (InteropNativeModule._CallCallbackSync(934309126, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(934309126, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_ResourceStr_Void(isSync: boolean = false): ((text: ResourceStr) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (text: ResourceStr):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let text_type : int32 = RuntimeType.UNDEFINED;
    text_type = runtimeType(text);
    if (RuntimeType.STRING == text_type) {
        _argsSerializer.writeInt8(0 as int32);
        const text_0  = text as string;
        _argsSerializer.writeString(text_0);
    }
    else if (RuntimeType.OBJECT == text_type) {
        _argsSerializer.writeInt8(1 as int32);
        const text_1  = text as Resource;
        _argsSerializer.writeResource(text_1);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(188373904, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(188373904, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_RichEditorChangeValue_Boolean(isSync: boolean = false): ((parameter: RichEditorChangeValue) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: RichEditorChangeValue):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeRichEditorChangeValue(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1465860515, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1465860515, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_RichEditorDeleteValue_Boolean(isSync: boolean = false): ((parameter: RichEditorDeleteValue) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: RichEditorDeleteValue):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeRichEditorDeleteValue(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(667698748, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(667698748, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_RichEditorInsertValue_Boolean(isSync: boolean = false): ((parameter: RichEditorInsertValue) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: RichEditorInsertValue):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeRichEditorInsertValue(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-319221262, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-319221262, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_RichEditorRange_Void(isSync: boolean = false): ((parameter: RichEditorRange) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: RichEditorRange):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeRichEditorRange(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-62253375, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-62253375, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_RichEditorSelection_Void(isSync: boolean = false): ((parameter: RichEditorSelection) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: RichEditorSelection):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeRichEditorSelection(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-963852514, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-963852514, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_RichEditorTextSpanResult_Void(isSync: boolean = false): ((parameter: RichEditorTextSpanResult) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: RichEditorTextSpanResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeRichEditorTextSpanResult(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1980824326, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1980824326, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_SheetDismiss_Void(isSync: boolean = false): ((sheetDismiss: SheetDismiss) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (sheetDismiss: SheetDismiss):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeSheetDismiss(sheetDismiss);
    (isSync) ? (InteropNativeModule._CallCallbackSync(22609082, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(22609082, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_SheetType_Void(isSync: boolean = false): ((parameter: SheetType) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: SheetType):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.SheetType_ToNumeric(parameter));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-224451112, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-224451112, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_SpringBackAction_Void(isSync: boolean = false): ((parameter: SpringBackAction) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: SpringBackAction):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeSpringBackAction(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1536231691, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1536231691, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_String_Number_Void(isSync: boolean = false): ((value: string,index: number) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: string, index: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(value);
    _argsSerializer.writeNumber(index);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-879490874, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-879490874, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_String_Opt_Object_Void(isSync: boolean = false): ((name: string,param: Object | undefined) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (name: string, param?: Object | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(name);
    let param_type : int32 = RuntimeType.UNDEFINED;
    param_type = runtimeType(param);
    _argsSerializer.writeInt8(param_type as int32);
    if ((RuntimeType.UNDEFINED) != (param_type)) {
        const param_value  = param!;
        _argsSerializer.holdAndWriteObject(param_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-716524508, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-716524508, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_String_PasteEvent_Void(isSync: boolean = false): ((value: string,event: PasteEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: string, event: PasteEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(value);
    _argsSerializer.writePasteEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-683652998, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-683652998, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_String_Void(isSync: boolean = false): ((breakpoints: string) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (breakpoints: string):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(breakpoints);
    (isSync) ? (InteropNativeModule._CallCallbackSync(814634522, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(814634522, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_StyledStringChangeValue_Boolean(isSync: boolean = false): ((parameter: StyledStringChangeValue) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: StyledStringChangeValue):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeStyledStringChangeValue(parameter);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(2116745428, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(2116745428, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readCallback_StyledStringMarshallingValue_Void(isSync: boolean = false): ((value: UserDataSpan) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: UserDataSpan):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeUserDataSpan(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1198150682, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1198150682, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_SwipeActionState_Void(isSync: boolean = false): ((state: SwipeActionState) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (state: SwipeActionState):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.SwipeActionState_ToNumeric(state));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-301561698, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-301561698, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_SwiperContentTransitionProxy_Void(isSync: boolean = false): ((parameter: SwiperContentTransitionProxy) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: SwiperContentTransitionProxy):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeSwiperContentTransitionProxy(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-416053361, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-416053361, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_TabContentTransitionProxy_Void(isSync: boolean = false): ((parameter: TabContentTransitionProxy) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: TabContentTransitionProxy):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTabContentTransitionProxy(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1223938478, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1223938478, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_TerminationInfo_Void(isSync: boolean = false): ((parameter: TerminationInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: TerminationInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTerminationInfo(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(691098197, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(691098197, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_TextPickerResult_Void(isSync: boolean = false): ((value: TextPickerResult) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: TextPickerResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTextPickerResult(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1290504509, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1290504509, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_TextRange_Void(isSync: boolean = false): ((parameter: TextRange) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: TextRange):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTextRange(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(811915501, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(811915501, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_TimePickerResult_Void(isSync: boolean = false): ((value: TimePickerResult) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: TimePickerResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTimePickerResult(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1557859605, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1557859605, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_TouchEvent_HitTestMode(isSync: boolean = false): ((parameter: TouchEvent) => HitTestMode) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: TouchEvent):HitTestMode => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTouchEvent(parameter);
    let _continuationValue : HitTestMode | undefined;
    const _continuationCallback : ((value: HitTestMode) => void) = (value: HitTestMode):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-274419246, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-274419246, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as HitTestMode); }
    }
    readCallback_TouchEvent_Void(isSync: boolean = false): ((event: TouchEvent) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: TouchEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTouchEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1676021850, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1676021850, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_TouchResult_Void(isSync: boolean = false): ((value: TouchResult) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: TouchResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTouchResult(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1943507619, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1943507619, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Tuple_Number_Number_Number_Number_Void(isSync: boolean = false): ((value: [ number, number, number, number ]) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: [ number, number, number, number ]):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    const value_0  = value[0];
    _argsSerializer.writeNumber(value_0);
    const value_1  = value[1];
    _argsSerializer.writeNumber(value_1);
    const value_2  = value[2];
    _argsSerializer.writeNumber(value_2);
    const value_3  = value[3];
    _argsSerializer.writeNumber(value_3);
    (isSync) ? (InteropNativeModule._CallCallbackSync(148489367, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(148489367, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Tuple_Number_Number_Void(isSync: boolean = false): ((value: [ number, number ]) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: [ number, number ]):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    const value_0  = value[0];
    _argsSerializer.writeNumber(value_0);
    const value_1  = value[1];
    _argsSerializer.writeNumber(value_1);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-607365481, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-607365481, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Type_ImageAttribute_onComplete_callback_event_Void(isSync: boolean = false): ((event?: Type_ImageAttribute_onComplete_callback_event) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event?: Type_ImageAttribute_onComplete_callback_event | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let event_type : int32 = RuntimeType.UNDEFINED;
    event_type = runtimeType(event);
    _argsSerializer.writeInt8(event_type as int32);
    if ((RuntimeType.UNDEFINED) != (event_type)) {
        const event_value  = event!;
        const event_value_width  = event_value.width;
        _argsSerializer.writeNumber(event_value_width);
        const event_value_height  = event_value.height;
        _argsSerializer.writeNumber(event_value_height);
        const event_value_componentWidth  = event_value.componentWidth;
        _argsSerializer.writeNumber(event_value_componentWidth);
        const event_value_componentHeight  = event_value.componentHeight;
        _argsSerializer.writeNumber(event_value_componentHeight);
        const event_value_loadingStatus  = event_value.loadingStatus;
        _argsSerializer.writeNumber(event_value_loadingStatus);
        const event_value_contentWidth  = event_value.contentWidth;
        _argsSerializer.writeNumber(event_value_contentWidth);
        const event_value_contentHeight  = event_value.contentHeight;
        _argsSerializer.writeNumber(event_value_contentHeight);
        const event_value_contentOffsetX  = event_value.contentOffsetX;
        _argsSerializer.writeNumber(event_value_contentOffsetX);
        const event_value_contentOffsetY  = event_value.contentOffsetY;
        _argsSerializer.writeNumber(event_value_contentOffsetY);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1352745727, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1352745727, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_UIExtensionProxy_Void(isSync: boolean = false): ((parameter: UIExtensionProxy) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parameter: UIExtensionProxy):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeUIExtensionProxy(parameter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1063506522, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1063506522, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Union_CustomBuilder_DragItemInfo_Void(isSync: boolean = false): ((value: CustomBuilder | DragItemInfo) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: CustomBuilder | DragItemInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    if (RuntimeType.FUNCTION == value_type) {
        _argsSerializer.writeInt8(0 as int32);
        const value_0  = value as CustomBuilder;
        _argsSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_0));
    }
    else if (RuntimeType.OBJECT == value_type) {
        _argsSerializer.writeInt8(1 as int32);
        const value_1  = value as DragItemInfo;
        _argsSerializer.writeDragItemInfo(value_1);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-620935067, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-620935067, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Union_Number_Array_Number_Void(isSync: boolean = false): ((selected: number | Array<number>) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (selected: number | Array<number>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let selected_type : int32 = RuntimeType.UNDEFINED;
    selected_type = runtimeType(selected);
    if (RuntimeType.NUMBER == selected_type) {
        _argsSerializer.writeInt8(0 as int32);
        const selected_0  = selected as number;
        _argsSerializer.writeNumber(selected_0);
    }
    else if (RuntimeType.OBJECT == selected_type) {
        _argsSerializer.writeInt8(1 as int32);
        const selected_1  = selected as Array<number>;
        _argsSerializer.writeInt32(selected_1.length as int32);
        for (let i = 0; i < selected_1.length; i++) {
            const selected_1_element : number = selected_1[i];
            _argsSerializer.writeNumber(selected_1_element);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1111620998, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1111620998, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Union_String_Array_String_Void(isSync: boolean = false): ((value: string | Array<string>) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: string | Array<string>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    if (RuntimeType.STRING == value_type) {
        _argsSerializer.writeInt8(0 as int32);
        const value_0  = value as string;
        _argsSerializer.writeString(value_0);
    }
    else if (RuntimeType.OBJECT == value_type) {
        _argsSerializer.writeInt8(1 as int32);
        const value_1  = value as Array<string>;
        _argsSerializer.writeInt32(value_1.length as int32);
        for (let i = 0; i < value_1.length; i++) {
            const value_1_element : string = value_1[i];
            _argsSerializer.writeString(value_1_element);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-720435526, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-720435526, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_Void(isSync: boolean = false): (() => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return ():void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1867723152, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1867723152, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_WebKeyboardOptions_Void(isSync: boolean = false): ((value: WebKeyboardOptions) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: WebKeyboardOptions):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeWebKeyboardOptions(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1376223390, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1376223390, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_WebResourceResponse_Void(isSync: boolean = false): ((value: WebResourceResponse) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: WebResourceResponse):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeWebResourceResponse(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(831645046, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(831645046, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_WithThemeAttribute_Void(isSync: boolean = false): ((value: WithThemeAttribute) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: WithThemeAttribute):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeWithThemeAttribute(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1436479104, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1436479104, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCallback_WrappedBuilder_Args_Void(isSync: boolean = false): ((args: CommonConfiguration) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (args: CommonConfiguration):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeCommonConfiguration(args);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-824029805, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-824029805, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readContentDidScrollCallback(isSync: boolean = false): ContentDidScrollCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (selectedIndex: number, index: number, position: number, mainAxisLength: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(selectedIndex);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeNumber(position);
    _argsSerializer.writeNumber(mainAxisLength);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1532328438, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1532328438, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readContentWillScrollCallback(isSync: boolean = false): ContentWillScrollCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (result: SwiperContentWillScrollResult):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeSwiperContentWillScrollResult(result);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2146044511, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2146044511, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readContext_getGroupDir_Callback(isSync: boolean = false): Context_getGroupDir_Callback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (result: string):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(result);
    (isSync) ? (InteropNativeModule._CallCallbackSync(260483890, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(260483890, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readCustomNodeBuilder(isSync: boolean = false): CustomNodeBuilder {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (parentNode: KPointer):KPointer => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writePointer(parentNode);
    let _continuationValue : KPointer | undefined;
    const _continuationCallback : ((value: KPointer) => void) = (value: KPointer):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1766817632, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1766817632, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as KPointer); }
    }
    readDrawCallback(isSync: boolean = false): DrawCallback {
        const _resource: CallbackResource = this.readCallbackResource()
        const _call: KPointer = this.readPointer()
        const _callSync: KPointer = this.readPointer()
        return (context: DrawContext): void => {
            const _argsSerializer: Serializer = Serializer.hold();
            _argsSerializer.writeInt32(_resource.resourceId);
            _argsSerializer.writePointer(_call);
            _argsSerializer.writePointer(_callSync);
            _argsSerializer.writeDrawContext(context);
            (isSync) ? (InteropNativeModule._CallCallbackSync(-177744805, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-177744805, _argsSerializer.asBuffer(), _argsSerializer.length()));
            _argsSerializer.release();
            return;
        }
    }
    readEditableTextOnChangeCallback(isSync: boolean = false): EditableTextOnChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: string, previewText?: PreviewText | undefined, options?: TextChangeOptions | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(value);
    let previewText_type : int32 = RuntimeType.UNDEFINED;
    previewText_type = runtimeType(previewText);
    _argsSerializer.writeInt8(previewText_type as int32);
    if ((RuntimeType.UNDEFINED) != (previewText_type)) {
        const previewText_value  = previewText!;
        _argsSerializer.writePreviewText(previewText_value);
    }
    let options_type : int32 = RuntimeType.UNDEFINED;
    options_type = runtimeType(options);
    _argsSerializer.writeInt8(options_type as int32);
    if ((RuntimeType.UNDEFINED) != (options_type)) {
        const options_value  = options!;
        _argsSerializer.writeTextChangeOptions(options_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1729563209, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1729563209, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readErrorCallback(isSync: boolean = false): ErrorCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (err: BusinessError):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBusinessError(err);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1936519453, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1936519453, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readGestureRecognizerJudgeBeginCallback(isSync: boolean = false): GestureRecognizerJudgeBeginCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: BaseGestureEvent, current: GestureRecognizer, recognizers: Array<GestureRecognizer>):GestureJudgeResult => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBaseGestureEvent(event);
    _argsSerializer.writeGestureRecognizer(current);
    _argsSerializer.writeInt32(recognizers.length as int32);
    for (let i = 0; i < recognizers.length; i++) {
        const recognizers_element : GestureRecognizer = recognizers[i];
        _argsSerializer.writeGestureRecognizer(recognizers_element);
    }
    let _continuationValue : GestureJudgeResult | undefined;
    const _continuationCallback : ((value: GestureJudgeResult) => void) = (value: GestureJudgeResult):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2119548940, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2119548940, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as GestureJudgeResult); }
    }
    readGetItemMainSizeByIndex(isSync: boolean = false): GetItemMainSizeByIndex {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number):number => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    let _continuationValue : number | undefined;
    const _continuationCallback : ((index: number) => void) = (value: number):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2076995110, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2076995110, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as number); }
    }
    readGridAttribute_onItemDragStart_event_type(isSync: boolean = false): ((event: ItemDragInfo,itemIndex: number) => CustomBuilder) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ItemDragInfo, itemIndex: number) => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeItemDragInfo(event);
    _argsSerializer.writeNumber(itemIndex);
    let _continuationValue : CustomBuilder | undefined;
    const _continuationCallback : ((value: CustomBuilder) => void) = (value: CustomBuilder):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1938653177, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1938653177, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as CustomBuilder); }
    }
    readHoverCallback(isSync: boolean = false): HoverCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (isHover: boolean, event: HoverEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(isHover);
    _argsSerializer.writeHoverEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(68560477, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(68560477, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readImageCompleteCallback(isSync: boolean = false): ImageCompleteCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (result: ImageLoadResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeImageLoadResult(result);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1180567691, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1180567691, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readImageErrorCallback(isSync: boolean = false): ImageErrorCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (error: ImageError):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeImageError(error);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1906248580, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1906248580, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readInterceptionModeCallback(isSync: boolean = false): InterceptionModeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (mode: NavigationMode):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.NavigationMode_ToNumeric(mode));
    (isSync) ? (InteropNativeModule._CallCallbackSync(1502213270, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1502213270, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readInterceptionShowCallback(isSync: boolean = false): InterceptionShowCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (from: NavDestinationContext | NavBar, to: NavDestinationContext | NavBar, operation: NavigationOperation, isAnimated: boolean):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let from_type : int32 = RuntimeType.UNDEFINED;
    from_type = runtimeType(from);
    if (RuntimeType.OBJECT == from_type) {
        _argsSerializer.writeInt8(0 as int32);
        const from_0  = from as NavDestinationContext;
        _argsSerializer.writeNavDestinationContext(from_0);
    }
    else if (RuntimeType.STRING == from_type) {
        _argsSerializer.writeInt8(1 as int32);
        const from_1  = from as NavBar;
        _argsSerializer.writeString(from_1);
    }
    let to_type : int32 = RuntimeType.UNDEFINED;
    to_type = runtimeType(to);
    if (RuntimeType.OBJECT == to_type) {
        _argsSerializer.writeInt8(0 as int32);
        const to_0  = to as NavDestinationContext;
        _argsSerializer.writeNavDestinationContext(to_0);
    }
    else if (RuntimeType.STRING == to_type) {
        _argsSerializer.writeInt8(1 as int32);
        const to_1  = to as NavBar;
        _argsSerializer.writeString(to_1);
    }
    _argsSerializer.writeInt32(TypeChecker.NavigationOperation_ToNumeric(operation));
    _argsSerializer.writeBoolean(isAnimated);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1852781814, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1852781814, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readListAttribute_onItemDragStart_event_type(isSync: boolean = false): ((event: ItemDragInfo,itemIndex: number) => CustomBuilder) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ItemDragInfo, itemIndex: number) => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeItemDragInfo(event);
    _argsSerializer.writeNumber(itemIndex);
    let _continuationValue : CustomBuilder | undefined;
    const _continuationCallback : ((value: CustomBuilder) => void) = (value: CustomBuilder):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-464108861, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-464108861, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as CustomBuilder); }
    }
    readLocationButtonCallback(isSync: boolean = false): LocationButtonCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ClickEvent, result: LocationButtonOnClickResult, error?: BusinessError<void> | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeClickEvent(event);
    _argsSerializer.writeInt32(TypeChecker.LocationButtonOnClickResult_ToNumeric(result));
    let error_type : int32 = RuntimeType.UNDEFINED;
    error_type = runtimeType(error);
    _argsSerializer.writeInt8(error_type as int32);
    if ((RuntimeType.UNDEFINED) != (error_type)) {
        const error_value  = error!;
        _argsSerializer.writeBusinessError(error_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-957598032, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-957598032, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readMenuCallback(isSync: boolean = false): MenuCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (start: number, end: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(start);
    _argsSerializer.writeNumber(end);
    (isSync) ? (InteropNativeModule._CallCallbackSync(810927048, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(810927048, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readMenuOnAppearCallback(isSync: boolean = false): MenuOnAppearCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (start: number, end: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(start);
    _argsSerializer.writeNumber(end);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-614475458, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-614475458, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readNavDestinationTransitionDelegate(isSync: boolean = false): NavDestinationTransitionDelegate {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (operation: NavigationOperation, isEnter: boolean):Array<NavDestinationTransition> | undefined => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.NavigationOperation_ToNumeric(operation));
    _argsSerializer.writeBoolean(isEnter);
    let _continuationValue : Array<NavDestinationTransition> | undefined;
    const _continuationCallback : ((value: Array<NavDestinationTransition> | undefined) => void) = (value?: Array<NavDestinationTransition> | undefined):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1066063065, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1066063065, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as Array<NavDestinationTransition> | undefined); }
    }
    readNavExtender_OnUpdateStack(isSync: boolean = false): NavExtender_OnUpdateStack {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return ():void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-588228933, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-588228933, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readNodeContainer_AboutToResizeCallback(isSync: boolean = false): NodeContainer_AboutToResizeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (size: Size):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeSize(size);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1817630617, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1817630617, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnAdsBlockedCallback(isSync: boolean = false): OnAdsBlockedCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (details: AdsBlockedDetails):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeAdsBlockedDetails(details);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1572284740, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1572284740, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnAlphabetIndexerPopupSelectCallback(isSync: boolean = false): OnAlphabetIndexerPopupSelectCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    (isSync) ? (InteropNativeModule._CallCallbackSync(726938390, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(726938390, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnAlphabetIndexerRequestPopupDataCallback(isSync: boolean = false): OnAlphabetIndexerRequestPopupDataCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number):Array<string> => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    let _continuationValue : Array<string> | undefined;
    const _continuationCallback : ((value: Array<string>) => void) = (value: Array<string>):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1956514817, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1956514817, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as Array<string>); }
    }
    readOnAlphabetIndexerSelectCallback(isSync: boolean = false): OnAlphabetIndexerSelectCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1189721220, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1189721220, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnCheckboxChangeCallback(isSync: boolean = false): OnCheckboxChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: boolean):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1198592337, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1198592337, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnCheckboxGroupChangeCallback(isSync: boolean = false): OnCheckboxGroupChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: CheckboxGroupResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeCheckboxGroupResult(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1053064240, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1053064240, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnContentScrollCallback(isSync: boolean = false): OnContentScrollCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (totalOffsetX: number, totalOffsetY: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(totalOffsetX);
    _argsSerializer.writeNumber(totalOffsetY);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-419979106, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-419979106, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnContextMenuHideCallback(isSync: boolean = false): OnContextMenuHideCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return ():void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1788572278, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1788572278, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnDidChangeCallback(isSync: boolean = false): OnDidChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (rangeBefore: TextRange, rangeAfter: TextRange):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTextRange(rangeBefore);
    _argsSerializer.writeTextRange(rangeAfter);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1648184341, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1648184341, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnDragEventCallback(isSync: boolean = false): OnDragEventCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: DragEvent, extraParams?: string | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeDragEvent(event);
    let extraParams_type : int32 = RuntimeType.UNDEFINED;
    extraParams_type = runtimeType(extraParams);
    _argsSerializer.writeInt8(extraParams_type as int32);
    if ((RuntimeType.UNDEFINED) != (extraParams_type)) {
        const extraParams_value  = extraParams!;
        _argsSerializer.writeString(extraParams_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(1451593190, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1451593190, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnFirstMeaningfulPaintCallback(isSync: boolean = false): OnFirstMeaningfulPaintCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (firstMeaningfulPaint: FirstMeaningfulPaint):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeFirstMeaningfulPaint(firstMeaningfulPaint);
    (isSync) ? (InteropNativeModule._CallCallbackSync(767275770, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(767275770, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnFoldStatusChangeCallback(isSync: boolean = false): OnFoldStatusChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: OnFoldStatusChangeInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeOnFoldStatusChangeInfo(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(2050387049, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(2050387049, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnFullScreenEnterCallback(isSync: boolean = false): OnFullScreenEnterCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: FullScreenEnterEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeFullScreenEnterEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(81230317, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(81230317, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnHoverCallback(isSync: boolean = false): OnHoverCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return ():void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2025767812, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2025767812, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnHoverStatusChangeCallback(isSync: boolean = false): OnHoverStatusChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (param: HoverEventParam):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeHoverEventParam(param);
    (isSync) ? (InteropNativeModule._CallCallbackSync(9040430, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(9040430, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnIntelligentTrackingPreventionCallback(isSync: boolean = false): OnIntelligentTrackingPreventionCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (details: IntelligentTrackingPreventionDetails):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeIntelligentTrackingPreventionDetails(details);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1377876844, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1377876844, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnLargestContentfulPaintCallback(isSync: boolean = false): OnLargestContentfulPaintCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (largestContentfulPaint: LargestContentfulPaint):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeLargestContentfulPaint(largestContentfulPaint);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1390640532, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1390640532, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnLinearIndicatorChangeCallback(isSync: boolean = false): OnLinearIndicatorChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, progress: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeNumber(progress);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-968773856, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-968773856, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnMoveHandler(isSync: boolean = false): OnMoveHandler {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (from: number, to: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(from);
    _argsSerializer.writeNumber(to);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1200281222, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1200281222, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnNativeEmbedVisibilityChangeCallback(isSync: boolean = false): OnNativeEmbedVisibilityChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (nativeEmbedVisibilityInfo: NativeEmbedVisibilityInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNativeEmbedVisibilityInfo(nativeEmbedVisibilityInfo);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1641338704, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1641338704, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnNativeLoadCallback(isSync: boolean = false): OnNativeLoadCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event?: Object | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let event_type : int32 = RuntimeType.UNDEFINED;
    event_type = runtimeType(event);
    _argsSerializer.writeInt8(event_type as int32);
    if ((RuntimeType.UNDEFINED) != (event_type)) {
        const event_value  = event!;
        _argsSerializer.holdAndWriteObject(event_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-823037763, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-823037763, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnNavigationEntryCommittedCallback(isSync: boolean = false): OnNavigationEntryCommittedCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (loadCommittedDetails: LoadCommittedDetails):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeLoadCommittedDetails(loadCommittedDetails);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-398722176, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-398722176, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnOverrideUrlLoadingCallback(isSync: boolean = false): OnOverrideUrlLoadingCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (webResourceRequest: WebResourceRequest):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeWebResourceRequest(webResourceRequest);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(865258467, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(865258467, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readOnPasteCallback(isSync: boolean = false): OnPasteCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (content: string, event: PasteEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(content);
    _argsSerializer.writePasteEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1738363337, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1738363337, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnRadioChangeCallback(isSync: boolean = false): OnRadioChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (isChecked: boolean):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(isChecked);
    (isSync) ? (InteropNativeModule._CallCallbackSync(511412333, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(511412333, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnRatingChangeCallback(isSync: boolean = false): OnRatingChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (rating: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(rating);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-551895045, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-551895045, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnRenderProcessNotRespondingCallback(isSync: boolean = false): OnRenderProcessNotRespondingCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (data: RenderProcessNotRespondingData):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeRenderProcessNotRespondingData(data);
    (isSync) ? (InteropNativeModule._CallCallbackSync(47282303, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(47282303, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnRenderProcessRespondingCallback(isSync: boolean = false): OnRenderProcessRespondingCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return ():void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1334389194, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1334389194, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnSafeBrowsingCheckResultCallback(isSync: boolean = false): OnSafeBrowsingCheckResultCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (threatType: ThreatType):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.ThreatType_ToNumeric(threatType));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1099824577, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1099824577, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnScrollCallback(isSync: boolean = false): OnScrollCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (scrollOffset: number, scrollState: ScrollState):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(scrollOffset);
    _argsSerializer.writeInt32(TypeChecker.ScrollState_ToNumeric(scrollState));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-160015401, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-160015401, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnScrollEdgeCallback(isSync: boolean = false): OnScrollEdgeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (side: Edge):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.Edge_ToNumeric(side));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1259214476, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1259214476, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnScrollFrameBeginCallback(isSync: boolean = false): OnScrollFrameBeginCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (offset: number, state: ScrollState):OnScrollFrameBeginHandlerResult => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(offset);
    _argsSerializer.writeInt32(TypeChecker.ScrollState_ToNumeric(state));
    let _continuationValue : OnScrollFrameBeginHandlerResult | undefined;
    const _continuationCallback : ((value: OnScrollFrameBeginHandlerResult) => void) = (value: OnScrollFrameBeginHandlerResult):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2133791987, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2133791987, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as OnScrollFrameBeginHandlerResult); }
    }
    readOnScrollVisibleContentChangeCallback(isSync: boolean = false): OnScrollVisibleContentChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (start: VisibleListContentInfo, end: VisibleListContentInfo):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeVisibleListContentInfo(start);
    _argsSerializer.writeVisibleListContentInfo(end);
    (isSync) ? (InteropNativeModule._CallCallbackSync(625641334, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(625641334, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnSelectCallback(isSync: boolean = false): OnSelectCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, selectStr: string):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeString(selectStr);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1486869198, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1486869198, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnSslErrorEventCallback(isSync: boolean = false): OnSslErrorEventCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (sslErrorEvent: SslErrorEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeSslErrorEvent(sslErrorEvent);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-399603614, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-399603614, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnSubmitCallback(isSync: boolean = false): OnSubmitCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (enterKey: EnterKeyType, event: SubmitEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.EnterKeyType_ToNumeric(enterKey));
    _argsSerializer.writeSubmitEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1961646162, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1961646162, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnSwiperAnimationEndCallback(isSync: boolean = false): OnSwiperAnimationEndCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, extraInfo: SwiperAnimationEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeSwiperAnimationEvent(extraInfo);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-143686583, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-143686583, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnSwiperAnimationStartCallback(isSync: boolean = false): OnSwiperAnimationStartCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, targetIndex: number, extraInfo: SwiperAnimationEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeNumber(targetIndex);
    _argsSerializer.writeSwiperAnimationEvent(extraInfo);
    (isSync) ? (InteropNativeModule._CallCallbackSync(876602502, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(876602502, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnSwiperGestureSwipeCallback(isSync: boolean = false): OnSwiperGestureSwipeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, extraInfo: SwiperAnimationEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeSwiperAnimationEvent(extraInfo);
    (isSync) ? (InteropNativeModule._CallCallbackSync(606029871, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(606029871, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnTabsAnimationEndCallback(isSync: boolean = false): OnTabsAnimationEndCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, extraInfo: TabsAnimationEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeTabsAnimationEvent(extraInfo);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1942856551, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1942856551, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnTabsAnimationStartCallback(isSync: boolean = false): OnTabsAnimationStartCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, targetIndex: number, extraInfo: TabsAnimationEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeNumber(targetIndex);
    _argsSerializer.writeTabsAnimationEvent(extraInfo);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-147408344, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-147408344, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnTabsContentWillChangeCallback(isSync: boolean = false): OnTabsContentWillChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (currentIndex: number, comingIndex: number):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(currentIndex);
    _argsSerializer.writeNumber(comingIndex);
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-349727249, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-349727249, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readOnTabsGestureSwipeCallback(isSync: boolean = false): OnTabsGestureSwipeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (index: number, extraInfo: TabsAnimationEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(index);
    _argsSerializer.writeTabsAnimationEvent(extraInfo);
    (isSync) ? (InteropNativeModule._CallCallbackSync(253696833, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(253696833, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnTextPickerChangeCallback(isSync: boolean = false): OnTextPickerChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (selectItem: string | Array<string>, index: number | Array<number>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let selectItem_type : int32 = RuntimeType.UNDEFINED;
    selectItem_type = runtimeType(selectItem);
    if (RuntimeType.STRING == selectItem_type) {
        _argsSerializer.writeInt8(0 as int32);
        const selectItem_0  = selectItem as string;
        _argsSerializer.writeString(selectItem_0);
    }
    else if (RuntimeType.OBJECT == selectItem_type) {
        _argsSerializer.writeInt8(1 as int32);
        const selectItem_1  = selectItem as Array<string>;
        _argsSerializer.writeInt32(selectItem_1.length as int32);
        for (let i = 0; i < selectItem_1.length; i++) {
            const selectItem_1_element : string = selectItem_1[i];
            _argsSerializer.writeString(selectItem_1_element);
        }
    }
    let index_type : int32 = RuntimeType.UNDEFINED;
    index_type = runtimeType(index);
    if (RuntimeType.NUMBER == index_type) {
        _argsSerializer.writeInt8(0 as int32);
        const index_0  = index as number;
        _argsSerializer.writeNumber(index_0);
    }
    else if (RuntimeType.OBJECT == index_type) {
        _argsSerializer.writeInt8(1 as int32);
        const index_1  = index as Array<number>;
        _argsSerializer.writeInt32(index_1.length as int32);
        for (let i = 0; i < index_1.length; i++) {
            const index_1_element : number = index_1[i];
            _argsSerializer.writeNumber(index_1_element);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1902343417, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1902343417, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnTextSelectionChangeCallback(isSync: boolean = false): OnTextSelectionChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (selectionStart: number, selectionEnd: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(selectionStart);
    _argsSerializer.writeNumber(selectionEnd);
    (isSync) ? (InteropNativeModule._CallCallbackSync(695228737, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(695228737, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnTimePickerChangeCallback(isSync: boolean = false): OnTimePickerChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (result: TimePickerResult):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeTimePickerResult(result);
    (isSync) ? (InteropNativeModule._CallCallbackSync(994429103, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(994429103, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnViewportFitChangedCallback(isSync: boolean = false): OnViewportFitChangedCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (viewportFit: ViewportFit):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.ViewportFit_ToNumeric(viewportFit));
    (isSync) ? (InteropNativeModule._CallCallbackSync(1847083191, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1847083191, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readPageTransitionCallback(isSync: boolean = false): PageTransitionCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (type: RouteType, progress: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.RouteType_ToNumeric(type));
    _argsSerializer.writeNumber(progress);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1627123591, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1627123591, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readPasteButtonCallback(isSync: boolean = false): PasteButtonCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ClickEvent, result: PasteButtonOnClickResult, error?: BusinessError<void> | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeClickEvent(event);
    _argsSerializer.writeInt32(TypeChecker.PasteButtonOnClickResult_ToNumeric(result));
    let error_type : int32 = RuntimeType.UNDEFINED;
    error_type = runtimeType(error);
    _argsSerializer.writeInt8(error_type as int32);
    if ((RuntimeType.UNDEFINED) != (error_type)) {
        const error_value  = error!;
        _argsSerializer.writeBusinessError(error_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(1501373374, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1501373374, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readPasteEventCallback(isSync: boolean = false): PasteEventCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event?: PasteEvent | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let event_type : int32 = RuntimeType.UNDEFINED;
    event_type = runtimeType(event);
    _argsSerializer.writeInt8(event_type as int32);
    if ((RuntimeType.UNDEFINED) != (event_type)) {
        const event_value  = event!;
        _argsSerializer.writePasteEvent(event_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(919057028, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(919057028, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readPluginErrorCallback(isSync: boolean = false): PluginErrorCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (info: PluginErrorData):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writePluginErrorData(info);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1992671958, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1992671958, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readPopupStateChangeCallback(isSync: boolean = false): PopupStateChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: PopupStateChangeParam):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writePopupStateChangeParam(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1444325632, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1444325632, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readProfiler_Callback_String_Void(isSync: boolean = false): ((info: string) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (info: string):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(info);
    (isSync) ? (InteropNativeModule._CallCallbackSync(814634522, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(814634522, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readReceiveCallback(isSync: boolean = false): ReceiveCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (data: Map<string, Object>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(data.size as int32 as int32);
    for (const pair of data) {
        const data_key = pair[0];
        const data_value = pair[1];
        _argsSerializer.writeString(data_key);
        _argsSerializer.holdAndWriteObject(data_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(2053798608, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(2053798608, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readRestrictedWorker_onerror_Callback(isSync: boolean = false): RestrictedWorker_onerror_Callback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (ev: ErrorEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeErrorEvent(ev);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1213708823, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1213708823, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readRestrictedWorker_onexit_Callback(isSync: boolean = false): RestrictedWorker_onexit_Callback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (code: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(code);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2095497263, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2095497263, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readRestrictedWorker_onmessage_Callback(isSync: boolean = false): RestrictedWorker_onmessage_Callback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: MessageEvents):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeMessageEvents(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1614214490, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1614214490, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readReuseIdCallback(isSync: boolean = false): ReuseIdCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return ():string => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let _continuationValue : string | undefined;
    const _continuationCallback : ((breakpoints: string) => void) = (value: string):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1110529154, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1110529154, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as string); }
    }
    readSaveButtonCallback(isSync: boolean = false): SaveButtonCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event: ClickEvent, result: SaveButtonOnClickResult, error?: BusinessError<void> | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeClickEvent(event);
    _argsSerializer.writeInt32(TypeChecker.SaveButtonOnClickResult_ToNumeric(result));
    let error_type : int32 = RuntimeType.UNDEFINED;
    error_type = runtimeType(error);
    _argsSerializer.writeInt8(error_type as int32);
    if ((RuntimeType.UNDEFINED) != (error_type)) {
        const error_value  = error!;
        _argsSerializer.writeBusinessError(error_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1634474996, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1634474996, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readScrollOnScrollCallback(isSync: boolean = false): ScrollOnScrollCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (xOffset: number, yOffset: number, scrollState: ScrollState):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(xOffset);
    _argsSerializer.writeNumber(yOffset);
    _argsSerializer.writeInt32(TypeChecker.ScrollState_ToNumeric(scrollState));
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1265626662, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1265626662, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readScrollOnWillScrollCallback(isSync: boolean = false): ScrollOnWillScrollCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (xOffset: number, yOffset: number, scrollState: ScrollState, scrollSource: ScrollSource):OffsetResult => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(xOffset);
    _argsSerializer.writeNumber(yOffset);
    _argsSerializer.writeInt32(TypeChecker.ScrollState_ToNumeric(scrollState));
    _argsSerializer.writeInt32(TypeChecker.ScrollSource_ToNumeric(scrollSource));
    let _continuationValue : OffsetResult | undefined;
    const _continuationCallback : ((value: OffsetResult) => void) = (value: OffsetResult):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-721521596, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-721521596, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as OffsetResult); }
    }
    readSearchSubmitCallback(isSync: boolean = false): SearchSubmitCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (searchContent: string, event?: SubmitEvent | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(searchContent);
    let event_type : int32 = RuntimeType.UNDEFINED;
    event_type = runtimeType(event);
    _argsSerializer.writeInt8(event_type as int32);
    if ((RuntimeType.UNDEFINED) != (event_type)) {
        const event_value  = event!;
        _argsSerializer.writeSubmitEvent(event_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(1717691617, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1717691617, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readSelectedCallback(isSync: boolean = false): SelectedCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (selected: boolean):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(selected);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1480175598, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1480175598, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readOnWillScrollCallback(isSync: boolean = false): OnWillScrollCallback {
        const _resource: CallbackResource = this.readCallbackResource()
        const _call: KPointer = this.readPointer()
        const _callSync: KPointer = this.readPointer()
        return (scrollOffset: number, scrollState: ScrollState, scrollSource: ScrollSource): ScrollResult => {
    const _argsSerializer: Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(scrollOffset);
    _argsSerializer.writeInt32((scrollState.valueOf() as int32));
    _argsSerializer.writeInt32((scrollSource.valueOf() as int32));
    let _continuationValue: ScrollResult | undefined|undefined ;
    const _continuationCallback: ((value: ScrollResult) => void) = (value: ScrollResult): void => { _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-150015401, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-150015401, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as ScrollResult); }
    }
    readSearchValueCallback(isSync: boolean = false): SearchValueCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: string):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeString(value);
    (isSync) ? (InteropNativeModule._CallCallbackSync(2049289694, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(2049289694, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readShouldBuiltInRecognizerParallelWithCallback(isSync: boolean = false): ShouldBuiltInRecognizerParallelWithCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (current: GestureRecognizer, others: Array<GestureRecognizer>):GestureRecognizer => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeGestureRecognizer(current);
    _argsSerializer.writeInt32(others.length as int32);
    for (let i = 0; i < others.length; i++) {
        const others_element : GestureRecognizer = others[i];
        _argsSerializer.writeGestureRecognizer(others_element);
    }
    let _continuationValue : GestureRecognizer | undefined;
    const _continuationCallback : ((value: GestureRecognizer) => void) = (value: GestureRecognizer):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-250780276, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-250780276, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as GestureRecognizer); }
    }
    readSizeChangeCallback(isSync: boolean = false): SizeChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (oldValue: SizeOptions, newValue: SizeOptions):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeSizeOptions(oldValue);
    _argsSerializer.writeSizeOptions(newValue);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1716637992, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1716637992, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readSliderTriggerChangeCallback(isSync: boolean = false): SliderTriggerChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: number, mode: SliderChangeMode):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(value);
    _argsSerializer.writeInt32(TypeChecker.SliderChangeMode_ToNumeric(mode));
    (isSync) ? (InteropNativeModule._CallCallbackSync(711649376, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(711649376, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readStepperIndexCallback(isSync: boolean = false): StepperIndexCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (stepperIndex: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(stepperIndex);
    (isSync) ? (InteropNativeModule._CallCallbackSync(2068688176, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(2068688176, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readStyledStringMarshallCallback(isSync: boolean = false): StyledStringMarshallCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (marshallableVal: UserDataSpan):NativeBuffer => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeUserDataSpan(marshallableVal);
    let _continuationValue : NativeBuffer | undefined;
    const _continuationCallback : ((value: NativeBuffer) => void) = (value: NativeBuffer):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1095217433, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1095217433, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as NativeBuffer); }
    }
    readStyledStringUnmarshallCallback(isSync: boolean = false): StyledStringUnmarshallCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (buf: NativeBuffer):UserDataSpan => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBuffer(buf);
    let _continuationValue : UserDataSpan | undefined;
    const _continuationCallback : ((value: UserDataSpan) => void) = (value: UserDataSpan):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1359717794, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1359717794, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as UserDataSpan); }
    }
    readSubmitCallback(isSync: boolean = false): SubmitCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (enterKey: EnterKeyType, event: SubmitEvent):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.EnterKeyType_ToNumeric(enterKey));
    _argsSerializer.writeSubmitEvent(event);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-712186065, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-712186065, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readTabsCustomContentTransitionCallback(isSync: boolean = false): TabsCustomContentTransitionCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (from: number, to: number):TabContentAnimatedTransition | undefined => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNumber(from);
    _argsSerializer.writeNumber(to);
    let _continuationValue : TabContentAnimatedTransition | undefined;
    const _continuationCallback : ((value: TabContentAnimatedTransition | undefined) => void) = (value?: TabContentAnimatedTransition | undefined):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(221706282, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(221706282, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as TabContentAnimatedTransition | undefined); }
    }
    readTextAreaSubmitCallback(isSync: boolean = false): TextAreaSubmitCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (enterKeyType: EnterKeyType, event?: SubmitEvent | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt32(TypeChecker.EnterKeyType_ToNumeric(enterKeyType));
    let event_type : int32 = RuntimeType.UNDEFINED;
    event_type = runtimeType(event);
    _argsSerializer.writeInt8(event_type as int32);
    if ((RuntimeType.UNDEFINED) != (event_type)) {
        const event_value  = event!;
        _argsSerializer.writeSubmitEvent(event_value);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-401980571, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-401980571, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readTextFieldValueCallback(isSync: boolean = false): TextFieldValueCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: ResourceStr):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    if (RuntimeType.STRING == value_type) {
        _argsSerializer.writeInt8(0 as int32);
        const value_0  = value as string;
        _argsSerializer.writeString(value_0);
    }
    else if (RuntimeType.OBJECT == value_type) {
        _argsSerializer.writeInt8(1 as int32);
        const value_1  = value as Resource;
        _argsSerializer.writeResource(value_1);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(18061455, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(18061455, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readTextPickerEnterSelectedAreaCallback(isSync: boolean = false): TextPickerEnterSelectedAreaCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: string | Array<string>, index: number | Array<number>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    if (RuntimeType.STRING == value_type) {
        _argsSerializer.writeInt8(0 as int32);
        const value_0  = value as string;
        _argsSerializer.writeString(value_0);
    }
    else if (RuntimeType.OBJECT == value_type) {
        _argsSerializer.writeInt8(1 as int32);
        const value_1  = value as Array<string>;
        _argsSerializer.writeInt32(value_1.length as int32);
        for (let i = 0; i < value_1.length; i++) {
            const value_1_element : string = value_1[i];
            _argsSerializer.writeString(value_1_element);
        }
    }
    let index_type : int32 = RuntimeType.UNDEFINED;
    index_type = runtimeType(index);
    if (RuntimeType.NUMBER == index_type) {
        _argsSerializer.writeInt8(0 as int32);
        const index_0  = index as number;
        _argsSerializer.writeNumber(index_0);
    }
    else if (RuntimeType.OBJECT == index_type) {
        _argsSerializer.writeInt8(1 as int32);
        const index_1  = index as Array<number>;
        _argsSerializer.writeInt32(index_1.length as int32);
        for (let i = 0; i < index_1.length; i++) {
            const index_1_element : number = index_1[i];
            _argsSerializer.writeNumber(index_1_element);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-202014218, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-202014218, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readTextPickerScrollStopCallback(isSync: boolean = false): TextPickerScrollStopCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: string | Array<string>, index: number | Array<number>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    if (RuntimeType.STRING == value_type) {
        _argsSerializer.writeInt8(0 as int32);
        const value_0  = value as string;
        _argsSerializer.writeString(value_0);
    }
    else if (RuntimeType.OBJECT == value_type) {
        _argsSerializer.writeInt8(1 as int32);
        const value_1  = value as Array<string>;
        _argsSerializer.writeInt32(value_1.length as int32);
        for (let i = 0; i < value_1.length; i++) {
            const value_1_element : string = value_1[i];
            _argsSerializer.writeString(value_1_element);
        }
    }
    let index_type : int32 = RuntimeType.UNDEFINED;
    index_type = runtimeType(index);
    if (RuntimeType.NUMBER == index_type) {
        _argsSerializer.writeInt8(0 as int32);
        const index_0  = index as number;
        _argsSerializer.writeNumber(index_0);
    }
    else if (RuntimeType.OBJECT == index_type) {
        _argsSerializer.writeInt8(1 as int32);
        const index_1  = index as Array<number>;
        _argsSerializer.writeInt32(index_1.length as int32);
        for (let i = 0; i < index_1.length; i++) {
            const index_1_element : number = index_1[i];
            _argsSerializer.writeNumber(index_1_element);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1928298699, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1928298699, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readTextTimerAttribute_onTimer_event_type(isSync: boolean = false): ((utc: int64,elapsedTime: int64) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (utc: int64, elapsedTime: int64):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeInt64(utc);
    _argsSerializer.writeInt64(elapsedTime);
    (isSync) ? (InteropNativeModule._CallCallbackSync(2057659801, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(2057659801, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readTransitionFinishCallback(isSync: boolean = false): TransitionFinishCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (transitionIn: boolean):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(transitionIn);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1878458553, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1878458553, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readType_NavigationAttribute_customNavContentTransition_delegate(isSync: boolean = false): ((from: NavContentInfo,to: NavContentInfo,operation: NavigationOperation) => NavigationAnimatedTransition | undefined) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (from: NavContentInfo, to: NavContentInfo, operation: NavigationOperation):NavigationAnimatedTransition | undefined => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeNavContentInfo(from);
    _argsSerializer.writeNavContentInfo(to);
    _argsSerializer.writeInt32(TypeChecker.NavigationOperation_ToNumeric(operation));
    let _continuationValue : NavigationAnimatedTransition | undefined;
    const _continuationCallback : ((value: NavigationAnimatedTransition | undefined) => void) = (value?: NavigationAnimatedTransition | undefined):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(1044833488, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1044833488, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as NavigationAnimatedTransition | undefined); }
    }
    readType_TextPickerAttribute_onChange_callback(isSync: boolean = false): ((value: string | Array<string>,index: number | Array<number>) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (value: string | Array<string>, index: number | Array<number>):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let value_type : int32 = RuntimeType.UNDEFINED;
    value_type = runtimeType(value);
    if (RuntimeType.STRING == value_type) {
        _argsSerializer.writeInt8(0 as int32);
        const value_0  = value as string;
        _argsSerializer.writeString(value_0);
    }
    else if (RuntimeType.OBJECT == value_type) {
        _argsSerializer.writeInt8(1 as int32);
        const value_1  = value as Array<string>;
        _argsSerializer.writeInt32(value_1.length as int32);
        for (let i = 0; i < value_1.length; i++) {
            const value_1_element : string = value_1[i];
            _argsSerializer.writeString(value_1_element);
        }
    }
    let index_type : int32 = RuntimeType.UNDEFINED;
    index_type = runtimeType(index);
    if (RuntimeType.NUMBER == index_type) {
        _argsSerializer.writeInt8(0 as int32);
        const index_0  = index as number;
        _argsSerializer.writeNumber(index_0);
    }
    else if (RuntimeType.OBJECT == index_type) {
        _argsSerializer.writeInt8(1 as int32);
        const index_1  = index as Array<number>;
        _argsSerializer.writeInt32(index_1.length as int32);
        for (let i = 0; i < index_1.length; i++) {
            const index_1_element : number = index_1[i];
            _argsSerializer.writeNumber(index_1_element);
        }
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1078223620, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1078223620, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readType_WebAttribute_onFileSelectorShow_callback(isSync: boolean = false): ((event?: Literal_Function_callback__Object_fileSelector) => void) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event?: Literal_Function_callback__Object_fileSelector | undefined):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let event_type : int32 = RuntimeType.UNDEFINED;
    event_type = runtimeType(event);
    _argsSerializer.writeInt8(event_type as int32);
    if ((RuntimeType.UNDEFINED) != (event_type)) {
        const event_value  = event!;
        const event_value_callback_  = event_value.callback_;
        _argsSerializer.writeFunction(event_value_callback_);
        const event_value_fileSelector  = event_value.fileSelector;
        _argsSerializer.holdAndWriteObject(event_value_fileSelector);
    }
    (isSync) ? (InteropNativeModule._CallCallbackSync(1962174977, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(1962174977, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readType_WebAttribute_onUrlLoadIntercept_callback(isSync: boolean = false): ((event?: Literal_Union_String_WebResourceRequest_data) => boolean) {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (event?: Literal_Union_String_WebResourceRequest_data | undefined):boolean => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    let event_type : int32 = RuntimeType.UNDEFINED;
    event_type = runtimeType(event);
    _argsSerializer.writeInt8(event_type as int32);
    if ((RuntimeType.UNDEFINED) != (event_type)) {
        const event_value  = event!;
        const event_value_data  = event_value.data;
        let event_value_data_type : int32 = RuntimeType.UNDEFINED;
        event_value_data_type = runtimeType(event_value_data);
        if (RuntimeType.STRING == event_value_data_type) {
            _argsSerializer.writeInt8(0 as int32);
            const event_value_data_0  = event_value_data as string;
            _argsSerializer.writeString(event_value_data_0);
        }
        else if (RuntimeType.OBJECT == event_value_data_type) {
            _argsSerializer.writeInt8(1 as int32);
            const event_value_data_1  = event_value_data as WebResourceRequest;
            _argsSerializer.writeWebResourceRequest(event_value_data_1);
        }
    }
    let _continuationValue : boolean | undefined;
    const _continuationCallback : ((isVisible: boolean) => void) = (value: boolean):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-985284966, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-985284966, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as boolean); }
    }
    readVisibleAreaChangeCallback(isSync: boolean = false): VisibleAreaChangeCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (isExpanding: boolean, currentRatio: number):void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeBoolean(isExpanding);
    _argsSerializer.writeNumber(currentRatio);
    (isSync) ? (InteropNativeModule._CallCallbackSync(541663396, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(541663396, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readVoidCallback(isSync: boolean = false): VoidCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return ():void => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-2038961969, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-2038961969, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return; }
    }
    readWebKeyboardCallback(isSync: boolean = false): WebKeyboardCallback {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (keyboardCallbackInfo: WebKeyboardCallbackInfo):WebKeyboardOptions => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeWebKeyboardCallbackInfo(keyboardCallbackInfo);
    let _continuationValue : WebKeyboardOptions | undefined;
    const _continuationCallback : ((value: WebKeyboardOptions) => void) = (value: WebKeyboardOptions):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(-1829763354, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(-1829763354, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as WebKeyboardOptions); }
    }
    readWithThemeInterface(isSync: boolean = false): WithThemeInterface {
        const _resource : CallbackResource = this.readCallbackResource()
        const _call : KPointer = this.readPointer()
        const _callSync : KPointer = this.readPointer()
        return (options: WithThemeOptions):WithThemeAttribute => { 
    const _argsSerializer : Serializer = Serializer.hold();
    _argsSerializer.writeInt32(_resource.resourceId);
    _argsSerializer.writePointer(_call);
    _argsSerializer.writePointer(_callSync);
    _argsSerializer.writeWithThemeOptions(options);
    let _continuationValue : WithThemeAttribute | undefined;
    const _continuationCallback : ((value: WithThemeAttribute) => void) = (value: WithThemeAttribute):void => {     _continuationValue = value; }
    _argsSerializer.holdAndWriteCallback(_continuationCallback);
    (isSync) ? (InteropNativeModule._CallCallbackSync(219587748, _argsSerializer.asBuffer(), _argsSerializer.length())) : (InteropNativeModule._CallCallback(219587748, _argsSerializer.asBuffer(), _argsSerializer.length()));
    _argsSerializer.release();
    return (_continuationValue as WithThemeAttribute); }
    }
    readAccessibilityOptions(): AccessibilityOptions {
        let valueDeserializer : Deserializer = this
        const accessibilityPreferred_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let accessibilityPreferred_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (accessibilityPreferred_buf_runtimeType))
        {
            accessibilityPreferred_buf = valueDeserializer.readBoolean()
        }
        const accessibilityPreferred_result : boolean | undefined = accessibilityPreferred_buf
        let value : AccessibilityOptions = ({accessibilityPreferred: accessibilityPreferred_result} as AccessibilityOptions)
        return value
    }
    readAdsBlockedDetails(): AdsBlockedDetails {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        const adsBlocked_buf_length : int32 = valueDeserializer.readInt32()
        let adsBlocked_buf : Array<string> = new Array<string>(adsBlocked_buf_length)
        for (let adsBlocked_buf_i = 0; adsBlocked_buf_i < adsBlocked_buf_length; adsBlocked_buf_i++) {
            adsBlocked_buf[adsBlocked_buf_i] = (valueDeserializer.readString() as string)
        }
        const adsBlocked_result : Array<string> = adsBlocked_buf
        let value : AdsBlockedDetails = ({url: url_result, adsBlocked: adsBlocked_result} as AdsBlockedDetails)
        return value
    }
    readAlphabetIndexerOptions(): AlphabetIndexerOptions {
        let valueDeserializer : Deserializer = this
        const arrayValue_buf_length : int32 = valueDeserializer.readInt32()
        let arrayValue_buf : Array<string> = new Array<string>(arrayValue_buf_length)
        for (let arrayValue_buf_i = 0; arrayValue_buf_i < arrayValue_buf_length; arrayValue_buf_i++) {
            arrayValue_buf[arrayValue_buf_i] = (valueDeserializer.readString() as string)
        }
        const arrayValue_result : Array<string> = arrayValue_buf
        const selected_result : number = (valueDeserializer.readNumber() as number)
        let value : AlphabetIndexerOptions = ({arrayValue: arrayValue_result, selected: selected_result} as AlphabetIndexerOptions)
        return value
    }
    readAnimationOptions(): AnimationOptions {
        let valueDeserializer : Deserializer = this
        const duration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let duration_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (duration_buf_runtimeType))
        {
            duration_buf = (valueDeserializer.readNumber() as number)
        }
        const duration_result : number | undefined = duration_buf
        const iterations_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iterations_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (iterations_buf_runtimeType))
        {
            iterations_buf = (valueDeserializer.readNumber() as number)
        }
        const iterations_result : number | undefined = iterations_buf
        let value : AnimationOptions = ({duration: duration_result, iterations: iterations_result} as AnimationOptions)
        return value
    }
    readAppearSymbolEffect(): AppearSymbolEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return AppearSymbolEffectInternal.fromPtr(ptr)
    }
    readASTCResource(): ASTCResource {
        let valueDeserializer : Deserializer = this
        const sources_buf_length : int32 = valueDeserializer.readInt32()
        let sources_buf : Array<string> = new Array<string>(sources_buf_length)
        for (let sources_buf_i = 0; sources_buf_i < sources_buf_length; sources_buf_i++) {
            sources_buf[sources_buf_i] = (valueDeserializer.readString() as string)
        }
        const sources_result : Array<string> = sources_buf
        const column_result : number = (valueDeserializer.readNumber() as number)
        let value : ASTCResource = ({sources: sources_result, column: column_result} as ASTCResource)
        return value
    }
    readAutoPlayOptions(): AutoPlayOptions {
        let valueDeserializer : Deserializer = this
        const stopWhenTouched_result : boolean = valueDeserializer.readBoolean()
        let value : AutoPlayOptions = ({stopWhenTouched: stopWhenTouched_result} as AutoPlayOptions)
        return value
    }
    readBackgroundBrightnessOptions(): BackgroundBrightnessOptions {
        let valueDeserializer : Deserializer = this
        const rate_result : number = (valueDeserializer.readNumber() as number)
        const lightUpDegree_result : number = (valueDeserializer.readNumber() as number)
        let value : BackgroundBrightnessOptions = ({rate: rate_result, lightUpDegree: lightUpDegree_result} as BackgroundBrightnessOptions)
        return value
    }
    readBackgroundImageOptions(): BackgroundImageOptions {
        let valueDeserializer : Deserializer = this
        const syncLoad_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let syncLoad_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (syncLoad_buf_runtimeType))
        {
            syncLoad_buf = valueDeserializer.readBoolean()
        }
        const syncLoad_result : boolean | undefined = syncLoad_buf
        const repeat_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let repeat_buf : ImageRepeat | undefined
        if ((RuntimeType.UNDEFINED) != (repeat_buf_runtimeType))
        {
            repeat_buf = TypeChecker.ImageRepeat_FromNumeric(valueDeserializer.readInt32())
        }
        const repeat_result : ImageRepeat | undefined = repeat_buf
        let value : BackgroundImageOptions = ({syncLoad: syncLoad_result, repeat: repeat_result} as BackgroundImageOptions)
        return value
    }
    readBarGridColumnOptions(): BarGridColumnOptions {
        let valueDeserializer : Deserializer = this
        const sm_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let sm_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (sm_buf_runtimeType))
        {
            sm_buf = (valueDeserializer.readNumber() as number)
        }
        const sm_result : number | undefined = sm_buf
        const md_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let md_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (md_buf_runtimeType))
        {
            md_buf = (valueDeserializer.readNumber() as number)
        }
        const md_result : number | undefined = md_buf
        const lg_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lg_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (lg_buf_runtimeType))
        {
            lg_buf = (valueDeserializer.readNumber() as number)
        }
        const lg_result : number | undefined = lg_buf
        const margin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let margin_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (margin_buf_runtimeType))
        {
            margin_buf = (valueDeserializer.readLength() as Dimension)
        }
        const margin_result : Dimension | undefined = margin_buf
        const gutter_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gutter_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (gutter_buf_runtimeType))
        {
            gutter_buf = (valueDeserializer.readLength() as Dimension)
        }
        const gutter_result : Dimension | undefined = gutter_buf
        let value : BarGridColumnOptions = ({sm: sm_result, md: md_result, lg: lg_result, margin: margin_result, gutter: gutter_result} as BarGridColumnOptions)
        return value
    }
    readBarrierStyle(): BarrierStyle {
        let valueDeserializer : Deserializer = this
        const id_result : string = (valueDeserializer.readString() as string)
        const direction_result : BarrierDirection = TypeChecker.BarrierDirection_FromNumeric(valueDeserializer.readInt32())
        const referencedId_buf_length : int32 = valueDeserializer.readInt32()
        let referencedId_buf : Array<string> = new Array<string>(referencedId_buf_length)
        for (let referencedId_buf_i = 0; referencedId_buf_i < referencedId_buf_length; referencedId_buf_i++) {
            referencedId_buf[referencedId_buf_i] = (valueDeserializer.readString() as string)
        }
        const referencedId_result : Array<string> = referencedId_buf
        let value : BarrierStyle = ({id: id_result, direction: direction_result, referencedId: referencedId_result} as BarrierStyle)
        return value
    }
    readBaseContext(): BaseContext {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return BaseContextInternal.fromPtr(ptr)
    }
    readBaselineOffsetStyle(): BaselineOffsetStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return BaselineOffsetStyleInternal.fromPtr(ptr)
    }
    readBias(): Bias {
        let valueDeserializer : Deserializer = this
        const horizontal_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let horizontal_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (horizontal_buf_runtimeType))
        {
            horizontal_buf = (valueDeserializer.readNumber() as number)
        }
        const horizontal_result : number | undefined = horizontal_buf
        const vertical_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let vertical_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (vertical_buf_runtimeType))
        {
            vertical_buf = (valueDeserializer.readNumber() as number)
        }
        const vertical_result : number | undefined = vertical_buf
        let value : Bias = ({horizontal: horizontal_result, vertical: vertical_result} as Bias)
        return value
    }
    readBlurOptions(): BlurOptions {
        let valueDeserializer : Deserializer = this
        const grayscale_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const grayscale_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const grayscale_result : [ number, number ] = ([grayscale_buf_value0, grayscale_buf_value1] as [ number, number ])
        let value : BlurOptions = ({grayscale: grayscale_result} as BlurOptions)
        return value
    }
    readBoardStyle(): BoardStyle {
        let valueDeserializer : Deserializer = this
        const borderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderRadius_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (borderRadius_buf_runtimeType))
        {
            borderRadius_buf = (valueDeserializer.readLength() as Length)
        }
        const borderRadius_result : Length | undefined = borderRadius_buf
        let value : BoardStyle = ({borderRadius: borderRadius_result} as BoardStyle)
        return value
    }
    readBorderRadiuses(): BorderRadiuses {
        let valueDeserializer : Deserializer = this
        const topLeft_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let topLeft_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (topLeft_buf_runtimeType))
        {
            topLeft_buf = (valueDeserializer.readLength() as Length)
        }
        const topLeft_result : Length | undefined = topLeft_buf
        const topRight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let topRight_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (topRight_buf_runtimeType))
        {
            topRight_buf = (valueDeserializer.readLength() as Length)
        }
        const topRight_result : Length | undefined = topRight_buf
        const bottomLeft_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottomLeft_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (bottomLeft_buf_runtimeType))
        {
            bottomLeft_buf = (valueDeserializer.readLength() as Length)
        }
        const bottomLeft_result : Length | undefined = bottomLeft_buf
        const bottomRight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottomRight_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (bottomRight_buf_runtimeType))
        {
            bottomRight_buf = (valueDeserializer.readLength() as Length)
        }
        const bottomRight_result : Length | undefined = bottomRight_buf
        let value : BorderRadiuses = ({topLeft: topLeft_result, topRight: topRight_result, bottomLeft: bottomLeft_result, bottomRight: bottomRight_result} as BorderRadiuses)
        return value
    }
    readBorderRadiuses_graphics(): Corners<number> {
        let valueDeserializer : Deserializer = this
        const topLeft_result : number = (valueDeserializer.readNumber() as number)
        const topRight_result : number = (valueDeserializer.readNumber() as number)
        const bottomLeft_result : number = (valueDeserializer.readNumber() as number)
        const bottomRight_result : number = (valueDeserializer.readNumber() as number)
        let value : Corners<number> = ({topLeft: topLeft_result, topRight: topRight_result, bottomLeft: bottomLeft_result, bottomRight: bottomRight_result} as Corners<number>)
        return value
    }
    readBounceSymbolEffect(): BounceSymbolEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return BounceSymbolEffectInternal.fromPtr(ptr)
    }
    readBreakPoints(): BreakPoints {
        let valueDeserializer : Deserializer = this
        const value_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let value_buf : Array<string> | undefined
        if ((RuntimeType.UNDEFINED) != (value_buf_runtimeType))
        {
            const value_buf__length : int32 = valueDeserializer.readInt32()
            let value_buf_ : Array<string> = new Array<string>(value_buf__length)
            for (let value_buf__i = 0; value_buf__i < value_buf__length; value_buf__i++) {
                value_buf_[value_buf__i] = (valueDeserializer.readString() as string)
            }
            value_buf = value_buf_
        }
        const value_result : Array<string> | undefined = value_buf
        const reference_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let reference_buf : BreakpointsReference | undefined
        if ((RuntimeType.UNDEFINED) != (reference_buf_runtimeType))
        {
            reference_buf = TypeChecker.BreakpointsReference_FromNumeric(valueDeserializer.readInt32())
        }
        const reference_result : BreakpointsReference | undefined = reference_buf
        let value : BreakPoints = ({value: value_result, reference: reference_result} as BreakPoints)
        return value
    }
    readBrightnessBlender(): BrightnessBlender {
        let valueDeserializer : Deserializer = this
        const cubicRate_result : number = (valueDeserializer.readNumber() as number)
        const quadraticRate_result : number = (valueDeserializer.readNumber() as number)
        const linearRate_result : number = (valueDeserializer.readNumber() as number)
        const degree_result : number = (valueDeserializer.readNumber() as number)
        const saturation_result : number = (valueDeserializer.readNumber() as number)
        const positiveCoefficient_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const positiveCoefficient_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const positiveCoefficient_buf_value2 : number = (valueDeserializer.readNumber() as number)
        const positiveCoefficient_result : [ number, number, number ] = ([positiveCoefficient_buf_value0, positiveCoefficient_buf_value1, positiveCoefficient_buf_value2] as [ number, number, number ])
        const negativeCoefficient_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const negativeCoefficient_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const negativeCoefficient_buf_value2 : number = (valueDeserializer.readNumber() as number)
        const negativeCoefficient_result : [ number, number, number ] = ([negativeCoefficient_buf_value0, negativeCoefficient_buf_value1, negativeCoefficient_buf_value2] as [ number, number, number ])
        const fraction_result : number = (valueDeserializer.readNumber() as number)
        let value : BrightnessBlender = ({cubicRate: cubicRate_result, quadraticRate: quadraticRate_result, linearRate: linearRate_result, degree: degree_result, saturation: saturation_result, positiveCoefficient: positiveCoefficient_result, negativeCoefficient: negativeCoefficient_result, fraction: fraction_result} as BrightnessBlender)
        return value
    }
    readBusinessError(): BusinessError {
        let valueDeserializer : Deserializer = this
        const name_result : string = (valueDeserializer.readString() as string)
        const message_result : string = (valueDeserializer.readString() as string)
        const stack_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let stack_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (stack_buf_runtimeType))
        {
            stack_buf = (valueDeserializer.readString() as string)
        }
        const stack_result : string | undefined = stack_buf
        const code_result : number = (valueDeserializer.readNumber() as number)
        let value : BusinessError = ({name: name_result, message: message_result, stack: stack_result, code: code_result} as BusinessError)
        return value
    }
    readButtonOptions(): ButtonOptions {
        let valueDeserializer : Deserializer = this
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : ButtonType | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = TypeChecker.ButtonType_FromNumeric(valueDeserializer.readInt32())
        }
        const type_result : ButtonType | undefined = type_buf
        const stateEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let stateEffect_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (stateEffect_buf_runtimeType))
        {
            stateEffect_buf = valueDeserializer.readBoolean()
        }
        const stateEffect_result : boolean | undefined = stateEffect_buf
        const buttonStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let buttonStyle_buf : ButtonStyleMode | undefined
        if ((RuntimeType.UNDEFINED) != (buttonStyle_buf_runtimeType))
        {
            buttonStyle_buf = TypeChecker.ButtonStyleMode_FromNumeric(valueDeserializer.readInt32())
        }
        const buttonStyle_result : ButtonStyleMode | undefined = buttonStyle_buf
        const controlSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let controlSize_buf : ControlSize | undefined
        if ((RuntimeType.UNDEFINED) != (controlSize_buf_runtimeType))
        {
            controlSize_buf = TypeChecker.ControlSize_FromNumeric(valueDeserializer.readInt32())
        }
        const controlSize_result : ControlSize | undefined = controlSize_buf
        const role_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let role_buf : ButtonRole | undefined
        if ((RuntimeType.UNDEFINED) != (role_buf_runtimeType))
        {
            role_buf = TypeChecker.ButtonRole_FromNumeric(valueDeserializer.readInt32())
        }
        const role_result : ButtonRole | undefined = role_buf
        let value : ButtonOptions = ({type: type_result, stateEffect: stateEffect_result, buttonStyle: buttonStyle_result, controlSize: controlSize_result, role: role_result} as ButtonOptions)
        return value
    }
    readCalendarDay(): CalendarDay {
        let valueDeserializer : Deserializer = this
        const index_result : number = (valueDeserializer.readNumber() as number)
        const lunarMonth_result : string = (valueDeserializer.readString() as string)
        const lunarDay_result : string = (valueDeserializer.readString() as string)
        const dayMark_result : string = (valueDeserializer.readString() as string)
        const dayMarkValue_result : string = (valueDeserializer.readString() as string)
        const year_result : number = (valueDeserializer.readNumber() as number)
        const month_result : number = (valueDeserializer.readNumber() as number)
        const day_result : number = (valueDeserializer.readNumber() as number)
        const isFirstOfLunar_result : boolean = valueDeserializer.readBoolean()
        const hasSchedule_result : boolean = valueDeserializer.readBoolean()
        const markLunarDay_result : boolean = valueDeserializer.readBoolean()
        let value : CalendarDay = ({index: index_result, lunarMonth: lunarMonth_result, lunarDay: lunarDay_result, dayMark: dayMark_result, dayMarkValue: dayMarkValue_result, year: year_result, month: month_result, day: day_result, isFirstOfLunar: isFirstOfLunar_result, hasSchedule: hasSchedule_result, markLunarDay: markLunarDay_result} as CalendarDay)
        return value
    }
    readCalendarRequestedData(): CalendarRequestedData {
        let valueDeserializer : Deserializer = this
        const year_result : number = (valueDeserializer.readNumber() as number)
        const month_result : number = (valueDeserializer.readNumber() as number)
        const currentYear_result : number = (valueDeserializer.readNumber() as number)
        const currentMonth_result : number = (valueDeserializer.readNumber() as number)
        const monthState_result : number = (valueDeserializer.readNumber() as number)
        let value : CalendarRequestedData = ({year: year_result, month: month_result, currentYear: currentYear_result, currentMonth: currentMonth_result, monthState: monthState_result} as CalendarRequestedData)
        return value
    }
    readCalendarSelectedDate(): CalendarSelectedDate {
        let valueDeserializer : Deserializer = this
        const year_result : number = (valueDeserializer.readNumber() as number)
        const month_result : number = (valueDeserializer.readNumber() as number)
        const day_result : number = (valueDeserializer.readNumber() as number)
        let value : CalendarSelectedDate = ({year: year_result, month: month_result, day: day_result} as CalendarSelectedDate)
        return value
    }
    readCancelButtonSymbolOptions(): CancelButtonSymbolOptions {
        let valueDeserializer : Deserializer = this
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : CancelButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.CancelButtonStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : CancelButtonStyle | undefined = style_buf
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : SymbolGlyphModifier | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            icon_buf = valueDeserializer.readSymbolGlyphModifier()
        }
        const icon_result : SymbolGlyphModifier | undefined = icon_buf
        let value : CancelButtonSymbolOptions = ({style: style_result, icon: icon_result} as CancelButtonSymbolOptions)
        return value
    }
    readCaretOffset(): CaretOffset {
        let valueDeserializer : Deserializer = this
        const index_result : number = (valueDeserializer.readNumber() as number)
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        let value : CaretOffset = ({index: index_result, x: x_result, y: y_result} as CaretOffset)
        return value
    }
    readChainAnimationOptions(): ChainAnimationOptions {
        let valueDeserializer : Deserializer = this
        const minSpace_result : Length = (valueDeserializer.readLength() as Length)
        const maxSpace_result : Length = (valueDeserializer.readLength() as Length)
        const conductivity_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let conductivity_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (conductivity_buf_runtimeType))
        {
            conductivity_buf = (valueDeserializer.readNumber() as number)
        }
        const conductivity_result : number | undefined = conductivity_buf
        const intensity_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let intensity_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (intensity_buf_runtimeType))
        {
            intensity_buf = (valueDeserializer.readNumber() as number)
        }
        const intensity_result : number | undefined = intensity_buf
        const edgeEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let edgeEffect_buf : ChainEdgeEffect | undefined
        if ((RuntimeType.UNDEFINED) != (edgeEffect_buf_runtimeType))
        {
            edgeEffect_buf = TypeChecker.ChainEdgeEffect_FromNumeric(valueDeserializer.readInt32())
        }
        const edgeEffect_result : ChainEdgeEffect | undefined = edgeEffect_buf
        const stiffness_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let stiffness_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (stiffness_buf_runtimeType))
        {
            stiffness_buf = (valueDeserializer.readNumber() as number)
        }
        const stiffness_result : number | undefined = stiffness_buf
        const damping_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let damping_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (damping_buf_runtimeType))
        {
            damping_buf = (valueDeserializer.readNumber() as number)
        }
        const damping_result : number | undefined = damping_buf
        let value : ChainAnimationOptions = ({minSpace: minSpace_result, maxSpace: maxSpace_result, conductivity: conductivity_result, intensity: intensity_result, edgeEffect: edgeEffect_result, stiffness: stiffness_result, damping: damping_result} as ChainAnimationOptions)
        return value
    }
    readChainWeightOptions(): ChainWeightOptions {
        let valueDeserializer : Deserializer = this
        const horizontal_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let horizontal_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (horizontal_buf_runtimeType))
        {
            horizontal_buf = (valueDeserializer.readNumber() as number)
        }
        const horizontal_result : number | undefined = horizontal_buf
        const vertical_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let vertical_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (vertical_buf_runtimeType))
        {
            vertical_buf = (valueDeserializer.readNumber() as number)
        }
        const vertical_result : number | undefined = vertical_buf
        let value : ChainWeightOptions = ({horizontal: horizontal_result, vertical: vertical_result} as ChainWeightOptions)
        return value
    }
    readCheckboxGroupOptions(): CheckboxGroupOptions {
        let valueDeserializer : Deserializer = this
        const group_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let group_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (group_buf_runtimeType))
        {
            group_buf = (valueDeserializer.readString() as string)
        }
        const group_result : string | undefined = group_buf
        let value : CheckboxGroupOptions = ({group: group_result} as CheckboxGroupOptions)
        return value
    }
    readCheckboxGroupResult(): CheckboxGroupResult {
        let valueDeserializer : Deserializer = this
        const name_buf_length : int32 = valueDeserializer.readInt32()
        let name_buf : Array<string> = new Array<string>(name_buf_length)
        for (let name_buf_i = 0; name_buf_i < name_buf_length; name_buf_i++) {
            name_buf[name_buf_i] = (valueDeserializer.readString() as string)
        }
        const name_result : Array<string> = name_buf
        const status_result : SelectStatus = TypeChecker.SelectStatus_FromNumeric(valueDeserializer.readInt32())
        let value : CheckboxGroupResult = ({name: name_result, status: status_result} as CheckboxGroupResult)
        return value
    }
    readCheckboxOptions(): CheckboxOptions {
        let valueDeserializer : Deserializer = this
        const name_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let name_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (name_buf_runtimeType))
        {
            name_buf = (valueDeserializer.readString() as string)
        }
        const name_result : string | undefined = name_buf
        const group_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let group_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (group_buf_runtimeType))
        {
            group_buf = (valueDeserializer.readString() as string)
        }
        const group_result : string | undefined = group_buf
        const indicatorBuilder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let indicatorBuilder_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (indicatorBuilder_buf_runtimeType))
        {
            indicatorBuilder_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const indicatorBuilder_result : CustomBuilder | undefined = indicatorBuilder_buf
        let value : CheckboxOptions = ({name: name_result, group: group_result, indicatorBuilder: indicatorBuilder_result} as CheckboxOptions)
        return value
    }
    readChildrenMainSize(): ChildrenMainSize {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ChildrenMainSizeInternal.fromPtr(ptr)
    }
    readCircle(): Circle {
        let valueDeserializer : Deserializer = this
        const centerX_result : number = (valueDeserializer.readNumber() as number)
        const centerY_result : number = (valueDeserializer.readNumber() as number)
        const radius_result : number = (valueDeserializer.readNumber() as number)
        let value : Circle = ({centerX: centerX_result, centerY: centerY_result, radius: radius_result} as Circle)
        return value
    }
    readCircleOptions(): CircleOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : string | number | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as string | number)
        }
        const width_result : string | number | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : string | number | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as string | number)
        }
        const height_result : string | number | undefined = height_buf
        let value : CircleOptions = ({width: width_result, height: height_result} as CircleOptions)
        return value
    }
    readClickEffect(): ClickEffect {
        let valueDeserializer : Deserializer = this
        const level_result : ClickEffectLevel = TypeChecker.ClickEffectLevel_FromNumeric(valueDeserializer.readInt32())
        const scale_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scale_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (scale_buf_runtimeType))
        {
            scale_buf = (valueDeserializer.readNumber() as number)
        }
        const scale_result : number | undefined = scale_buf
        let value : ClickEffect = ({level: level_result, scale: scale_result} as ClickEffect)
        return value
    }
    readCloseSwipeActionOptions(): CloseSwipeActionOptions {
        let valueDeserializer : Deserializer = this
        const onFinish_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onFinish_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onFinish_buf_runtimeType))
        {
            onFinish_buf = valueDeserializer.readCallback_Void()
        }
        const onFinish_result : (() => void) | undefined = onFinish_buf
        let value : CloseSwipeActionOptions = ({onFinish: onFinish_result} as CloseSwipeActionOptions)
        return value
    }
    readColorMetrics(): ColorMetrics {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ColorMetricsInternal.fromPtr(ptr)
    }
    readColumnOptions(): ColumnOptions {
        let valueDeserializer : Deserializer = this
        const space_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let space_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (space_buf_runtimeType))
        {
            const space_buf__selector : int32 = valueDeserializer.readInt8()
            let space_buf_ : string | number | undefined
            if (space_buf__selector == 0) {
                space_buf_ = (valueDeserializer.readString() as string)
            }
            else if (space_buf__selector == 1) {
                space_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for space_buf_ has to be chosen through deserialisation.")
            }
            space_buf = (space_buf_ as string | number)
        }
        const space_result : string | number | undefined = space_buf
        let value : ColumnOptions = ({space: space_result} as ColumnOptions)
        return value
    }
    readColumnOptionsV2(): ColumnOptionsV2 {
        let valueDeserializer : Deserializer = this
        const stub_result : string = (valueDeserializer.readString() as string)
        let value : ColumnOptionsV2 = ({stub: stub_result} as ColumnOptionsV2)
        return value
    }
    readColumnSplitDividerStyle(): ColumnSplitDividerStyle {
        let valueDeserializer : Deserializer = this
        const startMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let startMargin_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (startMargin_buf_runtimeType))
        {
            startMargin_buf = (valueDeserializer.readLength() as Dimension)
        }
        const startMargin_result : Dimension | undefined = startMargin_buf
        const endMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let endMargin_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (endMargin_buf_runtimeType))
        {
            endMargin_buf = (valueDeserializer.readLength() as Dimension)
        }
        const endMargin_result : Dimension | undefined = endMargin_buf
        let value : ColumnSplitDividerStyle = ({startMargin: startMargin_result, endMargin: endMargin_result} as ColumnSplitDividerStyle)
        return value
    }
    readCommandPath(): CommandPath {
        let valueDeserializer : Deserializer = this
        const commands_result : string = (valueDeserializer.readString() as string)
        let value : CommandPath = ({commands: commands_result} as CommandPath)
        return value
    }
    readCommonConfiguration(): CommonConfiguration {
        let valueDeserializer : Deserializer = this
        const enabled_result : boolean = valueDeserializer.readBoolean()
        const contentModifier_result : ContentModifier = (valueDeserializer.readObject() as ContentModifier)
        let value : CommonConfiguration = ({enabled: enabled_result, contentModifier: contentModifier_result} as CommonConfiguration)
        return value
    }
    readCommonModifier(): CommonModifier {
        let valueDeserializer : Deserializer = this
        const _CommonModifierStub_result : string = (valueDeserializer.readString() as string)
        let value : CommonModifier = ({_CommonModifierStub: _CommonModifierStub_result} as CommonModifier)
        return value
    }
    readComputedBarAttribute(): ComputedBarAttribute {
        let valueDeserializer : Deserializer = this
        const totalOffset_result : number = (valueDeserializer.readNumber() as number)
        const totalLength_result : number = (valueDeserializer.readNumber() as number)
        let value : ComputedBarAttribute = ({totalOffset: totalOffset_result, totalLength: totalLength_result} as ComputedBarAttribute)
        return value
    }
    readConstraintSizeOptions(): ConstraintSizeOptions {
        let valueDeserializer : Deserializer = this
        const minWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let minWidth_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (minWidth_buf_runtimeType))
        {
            minWidth_buf = (valueDeserializer.readLength() as Length)
        }
        const minWidth_result : Length | undefined = minWidth_buf
        const maxWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxWidth_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (maxWidth_buf_runtimeType))
        {
            maxWidth_buf = (valueDeserializer.readLength() as Length)
        }
        const maxWidth_result : Length | undefined = maxWidth_buf
        const minHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let minHeight_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (minHeight_buf_runtimeType))
        {
            minHeight_buf = (valueDeserializer.readLength() as Length)
        }
        const minHeight_result : Length | undefined = minHeight_buf
        const maxHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxHeight_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (maxHeight_buf_runtimeType))
        {
            maxHeight_buf = (valueDeserializer.readLength() as Length)
        }
        const maxHeight_result : Length | undefined = maxHeight_buf
        let value : ConstraintSizeOptions = ({minWidth: minWidth_result, maxWidth: maxWidth_result, minHeight: minHeight_result, maxHeight: maxHeight_result} as ConstraintSizeOptions)
        return value
    }
    readContext(): Context {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ContextInternal.fromPtr(ptr)
    }
    readCopyEvent(): CopyEvent {
        let valueDeserializer : Deserializer = this
        const preventDefault_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let preventDefault_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (preventDefault_buf_runtimeType))
        {
            preventDefault_buf = valueDeserializer.readCallback_Void()
        }
        const preventDefault_result : (() => void) | undefined = preventDefault_buf
        let value : CopyEvent = ({preventDefault: preventDefault_result} as CopyEvent)
        return value
    }
    readCornerRadius(): CornerRadius {
        let valueDeserializer : Deserializer = this
        const topLeft_result : Vector2 = valueDeserializer.readVector2()
        const topRight_result : Vector2 = valueDeserializer.readVector2()
        const bottomLeft_result : Vector2 = valueDeserializer.readVector2()
        const bottomRight_result : Vector2 = valueDeserializer.readVector2()
        let value : CornerRadius = ({topLeft: topLeft_result, topRight: topRight_result, bottomLeft: bottomLeft_result, bottomRight: bottomRight_result} as CornerRadius)
        return value
    }
    readCrownEvent(): CrownEvent {
        let valueDeserializer : Deserializer = this
        const timestamp_result : int64 = valueDeserializer.readInt64()
        const angularVelocity_result : number = (valueDeserializer.readNumber() as number)
        const degree_result : number = (valueDeserializer.readNumber() as number)
        const action_result : CrownAction = TypeChecker.CrownAction_FromNumeric(valueDeserializer.readInt32())
        const stopPropagation_result : (() => void) = valueDeserializer.readCallback_Void()
        let value : CrownEvent = ({timestamp: timestamp_result, angularVelocity: angularVelocity_result, degree: degree_result, action: action_result, stopPropagation: stopPropagation_result} as CrownEvent)
        return value
    }
    readCustomSpanDrawInfo(): CustomSpanDrawInfo {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const lineTop_result : number = (valueDeserializer.readNumber() as number)
        const lineBottom_result : number = (valueDeserializer.readNumber() as number)
        const baseline_result : number = (valueDeserializer.readNumber() as number)
        let value : CustomSpanDrawInfo = ({x: x_result, lineTop: lineTop_result, lineBottom: lineBottom_result, baseline: baseline_result} as CustomSpanDrawInfo)
        return value
    }
    readCustomSpanMeasureInfo(): CustomSpanMeasureInfo {
        let valueDeserializer : Deserializer = this
        const fontSize_result : number = (valueDeserializer.readNumber() as number)
        let value : CustomSpanMeasureInfo = ({fontSize: fontSize_result} as CustomSpanMeasureInfo)
        return value
    }
    readCustomSpanMetrics(): CustomSpanMetrics {
        let valueDeserializer : Deserializer = this
        const width_result : number = (valueDeserializer.readNumber() as number)
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readNumber() as number)
        }
        const height_result : number | undefined = height_buf
        let value : CustomSpanMetrics = ({width: width_result, height: height_result} as CustomSpanMetrics)
        return value
    }
    readCutEvent(): CutEvent {
        let valueDeserializer : Deserializer = this
        const preventDefault_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let preventDefault_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (preventDefault_buf_runtimeType))
        {
            preventDefault_buf = valueDeserializer.readCallback_Void()
        }
        const preventDefault_result : (() => void) | undefined = preventDefault_buf
        let value : CutEvent = ({preventDefault: preventDefault_result} as CutEvent)
        return value
    }
    readDataPanelOptions(): DataPanelOptions {
        let valueDeserializer : Deserializer = this
        const values_buf_length : int32 = valueDeserializer.readInt32()
        let values_buf : Array<number> = new Array<number>(values_buf_length)
        for (let values_buf_i = 0; values_buf_i < values_buf_length; values_buf_i++) {
            values_buf[values_buf_i] = (valueDeserializer.readNumber() as number)
        }
        const values_result : Array<number> = values_buf
        const max_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let max_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (max_buf_runtimeType))
        {
            max_buf = (valueDeserializer.readNumber() as number)
        }
        const max_result : number | undefined = max_buf
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : DataPanelType | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = TypeChecker.DataPanelType_FromNumeric(valueDeserializer.readInt32())
        }
        const type_result : DataPanelType | undefined = type_buf
        let value : DataPanelOptions = ({values: values_result, max: max_result, type: type_result} as DataPanelOptions)
        return value
    }
    readDataSyncOptions(): DataSyncOptions {
        let valueDeserializer : Deserializer = this
        const _DataSyncOptionsStub_result : string = (valueDeserializer.readString() as string)
        let value : DataSyncOptions = ({_DataSyncOptionsStub: _DataSyncOptionsStub_result} as DataSyncOptions)
        return value
    }
    readDatePickerOptions(): DatePickerOptions {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = new Date(valueDeserializer.readInt64())
        }
        const start_result : Date | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = new Date(valueDeserializer.readInt64())
        }
        const end_result : Date | undefined = end_buf
        const selected_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selected_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (selected_buf_runtimeType))
        {
            selected_buf = new Date(valueDeserializer.readInt64())
        }
        const selected_result : Date | undefined = selected_buf
        const mode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let mode_buf : DatePickerMode | undefined
        if ((RuntimeType.UNDEFINED) != (mode_buf_runtimeType))
        {
            mode_buf = TypeChecker.DatePickerMode_FromNumeric(valueDeserializer.readInt32())
        }
        const mode_result : DatePickerMode | undefined = mode_buf
        let value : DatePickerOptions = ({start: start_result, end: end_result, selected: selected_result, mode: mode_result} as DatePickerOptions)
        return value
    }
    readDatePickerResult(): DatePickerResult {
        let valueDeserializer : Deserializer = this
        const year_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let year_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (year_buf_runtimeType))
        {
            year_buf = (valueDeserializer.readNumber() as number)
        }
        const year_result : number | undefined = year_buf
        const month_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let month_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (month_buf_runtimeType))
        {
            month_buf = (valueDeserializer.readNumber() as number)
        }
        const month_result : number | undefined = month_buf
        const day_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let day_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (day_buf_runtimeType))
        {
            day_buf = (valueDeserializer.readNumber() as number)
        }
        const day_result : number | undefined = day_buf
        let value : DatePickerResult = ({year: year_result, month: month_result, day: day_result} as DatePickerResult)
        return value
    }
    readDateRange(): DateRange {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = new Date(valueDeserializer.readInt64())
        }
        const start_result : Date | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = new Date(valueDeserializer.readInt64())
        }
        const end_result : Date | undefined = end_buf
        let value : DateRange = ({start: start_result, end: end_result} as DateRange)
        return value
    }
    readDateTimeOptions(): DateTimeOptions {
        let valueDeserializer : Deserializer = this
        const locale_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let locale_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (locale_buf_runtimeType))
        {
            locale_buf = (valueDeserializer.readString() as string)
        }
        const locale_result : string | undefined = locale_buf
        const dateStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dateStyle_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (dateStyle_buf_runtimeType))
        {
            dateStyle_buf = (valueDeserializer.readString() as string)
        }
        const dateStyle_result : string | undefined = dateStyle_buf
        const timeStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let timeStyle_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (timeStyle_buf_runtimeType))
        {
            timeStyle_buf = (valueDeserializer.readString() as string)
        }
        const timeStyle_result : string | undefined = timeStyle_buf
        const hourCycle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hourCycle_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (hourCycle_buf_runtimeType))
        {
            hourCycle_buf = (valueDeserializer.readString() as string)
        }
        const hourCycle_result : string | undefined = hourCycle_buf
        const timeZone_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let timeZone_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (timeZone_buf_runtimeType))
        {
            timeZone_buf = (valueDeserializer.readString() as string)
        }
        const timeZone_result : string | undefined = timeZone_buf
        const numberingSystem_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let numberingSystem_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (numberingSystem_buf_runtimeType))
        {
            numberingSystem_buf = (valueDeserializer.readString() as string)
        }
        const numberingSystem_result : string | undefined = numberingSystem_buf
        const hour12_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hour12_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (hour12_buf_runtimeType))
        {
            hour12_buf = valueDeserializer.readBoolean()
        }
        const hour12_result : boolean | undefined = hour12_buf
        const weekday_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let weekday_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (weekday_buf_runtimeType))
        {
            weekday_buf = (valueDeserializer.readString() as string)
        }
        const weekday_result : string | undefined = weekday_buf
        const era_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let era_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (era_buf_runtimeType))
        {
            era_buf = (valueDeserializer.readString() as string)
        }
        const era_result : string | undefined = era_buf
        const year_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let year_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (year_buf_runtimeType))
        {
            year_buf = (valueDeserializer.readString() as string)
        }
        const year_result : string | undefined = year_buf
        const month_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let month_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (month_buf_runtimeType))
        {
            month_buf = (valueDeserializer.readString() as string)
        }
        const month_result : string | undefined = month_buf
        const day_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let day_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (day_buf_runtimeType))
        {
            day_buf = (valueDeserializer.readString() as string)
        }
        const day_result : string | undefined = day_buf
        const hour_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hour_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (hour_buf_runtimeType))
        {
            hour_buf = (valueDeserializer.readString() as string)
        }
        const hour_result : string | undefined = hour_buf
        const minute_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let minute_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (minute_buf_runtimeType))
        {
            minute_buf = (valueDeserializer.readString() as string)
        }
        const minute_result : string | undefined = minute_buf
        const second_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let second_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (second_buf_runtimeType))
        {
            second_buf = (valueDeserializer.readString() as string)
        }
        const second_result : string | undefined = second_buf
        const timeZoneName_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let timeZoneName_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (timeZoneName_buf_runtimeType))
        {
            timeZoneName_buf = (valueDeserializer.readString() as string)
        }
        const timeZoneName_result : string | undefined = timeZoneName_buf
        const dayPeriod_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dayPeriod_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (dayPeriod_buf_runtimeType))
        {
            dayPeriod_buf = (valueDeserializer.readString() as string)
        }
        const dayPeriod_result : string | undefined = dayPeriod_buf
        const localeMatcher_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let localeMatcher_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (localeMatcher_buf_runtimeType))
        {
            localeMatcher_buf = (valueDeserializer.readString() as string)
        }
        const localeMatcher_result : string | undefined = localeMatcher_buf
        const formatMatcher_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let formatMatcher_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (formatMatcher_buf_runtimeType))
        {
            formatMatcher_buf = (valueDeserializer.readString() as string)
        }
        const formatMatcher_result : string | undefined = formatMatcher_buf
        let value : DateTimeOptions = ({locale: locale_result, dateStyle: dateStyle_result, timeStyle: timeStyle_result, hourCycle: hourCycle_result, timeZone: timeZone_result, numberingSystem: numberingSystem_result, hour12: hour12_result, weekday: weekday_result, era: era_result, year: year_result, month: month_result, day: day_result, hour: hour_result, minute: minute_result, second: second_result, timeZoneName: timeZoneName_result, dayPeriod: dayPeriod_result, localeMatcher: localeMatcher_result, formatMatcher: formatMatcher_result} as DateTimeOptions)
        return value
    }
    readDeleteValue(): DeleteValue {
        let valueDeserializer : Deserializer = this
        const deleteOffset_result : number = (valueDeserializer.readNumber() as number)
        const direction_result : TextDeleteDirection = TypeChecker.TextDeleteDirection_FromNumeric(valueDeserializer.readInt32())
        const deleteValue_result : string = (valueDeserializer.readString() as string)
        let value : DeleteValue = ({deleteOffset: deleteOffset_result, direction: direction_result, deleteValue: deleteValue_result} as DeleteValue)
        return value
    }
    readDirectionalEdgesT(): DirectionalEdgesT {
        let valueDeserializer : Deserializer = this
        const start_result : number = (valueDeserializer.readNumber() as number)
        const end_result : number = (valueDeserializer.readNumber() as number)
        const top_result : number = (valueDeserializer.readNumber() as number)
        const bottom_result : number = (valueDeserializer.readNumber() as number)
        let value : DirectionalEdgesT = ({start: start_result, end: end_result, top: top_result, bottom: bottom_result} as DirectionalEdgesT)
        return value
    }
    readDisappearSymbolEffect(): DisappearSymbolEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return DisappearSymbolEffectInternal.fromPtr(ptr)
    }
    readDismissContentCoverAction(): DismissContentCoverAction {
        let valueDeserializer : Deserializer = this
        const dismiss_result : (() => void) = valueDeserializer.readCallback_Void()
        const reason_result : DismissReason = TypeChecker.DismissReason_FromNumeric(valueDeserializer.readInt32())
        let value : DismissContentCoverAction = ({dismiss: dismiss_result, reason: reason_result} as DismissContentCoverAction)
        return value
    }
    readDismissDialogAction(): DismissDialogAction {
        let valueDeserializer : Deserializer = this
        const dismiss_result : (() => void) = valueDeserializer.readCallback_Void()
        const reason_result : DismissReason = TypeChecker.DismissReason_FromNumeric(valueDeserializer.readInt32())
        let value : DismissDialogAction = ({dismiss: dismiss_result, reason: reason_result} as DismissDialogAction)
        return value
    }
    readDismissPopupAction(): DismissPopupAction {
        let valueDeserializer : Deserializer = this
        const dismiss_result : (() => void) = valueDeserializer.readCallback_Void()
        const reason_result : DismissReason = TypeChecker.DismissReason_FromNumeric(valueDeserializer.readInt32())
        let value : DismissPopupAction = ({dismiss: CallbackTransformer.transformFromCallbackVoid(dismiss_result), reason: reason_result} as DismissPopupAction)
        return value
    }
    readDismissSheetAction(): DismissSheetAction {
        let valueDeserializer : Deserializer = this
        const dismiss_result : (() => void) = valueDeserializer.readCallback_Void()
        const reason_result : DismissReason = TypeChecker.DismissReason_FromNumeric(valueDeserializer.readInt32())
        let value : DismissSheetAction = ({dismiss: dismiss_result, reason: reason_result} as DismissSheetAction)
        return value
    }
    readDoubleAnimationParam(): DoubleAnimationParam {
        let valueDeserializer : Deserializer = this
        const propertyName_result : string = (valueDeserializer.readString() as string)
        const startValue_result : float32 = valueDeserializer.readFloat32()
        const endValue_result : float32 = valueDeserializer.readFloat32()
        const duration_result : int32 = valueDeserializer.readInt32()
        const delay_result : int32 = valueDeserializer.readInt32()
        const curve_buf_selector : int32 = valueDeserializer.readInt8()
        let curve_buf : Curve | string | ICurve | undefined
        if (curve_buf_selector == 0) {
            curve_buf = TypeChecker.Curve_FromNumeric(valueDeserializer.readInt32())
        }
        else if (curve_buf_selector == 1) {
            curve_buf = (valueDeserializer.readString() as string)
        }
        else if (curve_buf_selector == 2) {
            curve_buf = (valueDeserializer.readICurve() as ICurve)
        }
        else {
            throw new Error("One of the branches for curve_buf has to be chosen through deserialisation.")
        }
        const curve_result : Curve | string | ICurve = (curve_buf as Curve | string | ICurve)
        const onProgress_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onProgress_buf : Callback_Extender_OnProgress | undefined
        if ((RuntimeType.UNDEFINED) != (onProgress_buf_runtimeType))
        {
            onProgress_buf = valueDeserializer.readCallback_Extender_OnProgress()
        }
        const onProgress_result : Callback_Extender_OnProgress | undefined = onProgress_buf
        const onFinish_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onFinish_buf : Callback_Extender_OnFinish | undefined
        if ((RuntimeType.UNDEFINED) != (onFinish_buf_runtimeType))
        {
            onFinish_buf = valueDeserializer.readCallback_Extender_OnFinish()
        }
        const onFinish_result : Callback_Extender_OnFinish | undefined = onFinish_buf
        let value : DoubleAnimationParam = ({propertyName: propertyName_result, startValue: startValue_result, endValue: endValue_result, duration: duration_result, delay: delay_result, curve: curve_result, onProgress: onProgress_result, onFinish: onFinish_result} as DoubleAnimationParam)
        return value
    }
    readDragInteractionOptions(): DragInteractionOptions {
        let valueDeserializer : Deserializer = this
        const isMultiSelectionEnabled_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isMultiSelectionEnabled_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isMultiSelectionEnabled_buf_runtimeType))
        {
            isMultiSelectionEnabled_buf = valueDeserializer.readBoolean()
        }
        const isMultiSelectionEnabled_result : boolean | undefined = isMultiSelectionEnabled_buf
        const defaultAnimationBeforeLifting_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let defaultAnimationBeforeLifting_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (defaultAnimationBeforeLifting_buf_runtimeType))
        {
            defaultAnimationBeforeLifting_buf = valueDeserializer.readBoolean()
        }
        const defaultAnimationBeforeLifting_result : boolean | undefined = defaultAnimationBeforeLifting_buf
        const enableEdgeAutoScroll_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableEdgeAutoScroll_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableEdgeAutoScroll_buf_runtimeType))
        {
            enableEdgeAutoScroll_buf = valueDeserializer.readBoolean()
        }
        const enableEdgeAutoScroll_result : boolean | undefined = enableEdgeAutoScroll_buf
        const enableHapticFeedback_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHapticFeedback_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHapticFeedback_buf_runtimeType))
        {
            enableHapticFeedback_buf = valueDeserializer.readBoolean()
        }
        const enableHapticFeedback_result : boolean | undefined = enableHapticFeedback_buf
        const isLiftingDisabled_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isLiftingDisabled_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isLiftingDisabled_buf_runtimeType))
        {
            isLiftingDisabled_buf = valueDeserializer.readBoolean()
        }
        const isLiftingDisabled_result : boolean | undefined = isLiftingDisabled_buf
        let value : DragInteractionOptions = ({isMultiSelectionEnabled: isMultiSelectionEnabled_result, defaultAnimationBeforeLifting: defaultAnimationBeforeLifting_result, enableEdgeAutoScroll: enableEdgeAutoScroll_result, enableHapticFeedback: enableHapticFeedback_result, isLiftingDisabled: isLiftingDisabled_result} as DragInteractionOptions)
        return value
    }
    readDragItemInfo(): DragItemInfo {
        let valueDeserializer : Deserializer = this
        const pixelMap_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let pixelMap_buf : PixelMap | undefined
        if ((RuntimeType.UNDEFINED) != (pixelMap_buf_runtimeType))
        {
            pixelMap_buf = (valueDeserializer.readPixelMap() as PixelMap)
        }
        const pixelMap_result : PixelMap | undefined = pixelMap_buf
        const builder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let builder_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (builder_buf_runtimeType))
        {
            builder_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const builder_result : CustomBuilder | undefined = builder_buf
        const extraInfo_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let extraInfo_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (extraInfo_buf_runtimeType))
        {
            extraInfo_buf = (valueDeserializer.readString() as string)
        }
        const extraInfo_result : string | undefined = extraInfo_buf
        let value : DragItemInfo = ({pixelMap: pixelMap_result, builder: builder_result, extraInfo: extraInfo_result} as DragItemInfo)
        return value
    }
    readDrawContext(): DrawContext {
        let valueDeserializer : Deserializer = this
        const size_result : Size = valueDeserializer.readSize()
        const sizeInPixel_result : Size = valueDeserializer.readSize()
        const canvas_result : drawing.Canvas = (valueDeserializer.readDrawingCanvas() as drawing.Canvas)
        let value : DrawContext = ({size_: size_result, sizeInPixel_: sizeInPixel_result, canvas_: canvas_result} as DrawContext)
        return value
    }
    readDrawingRenderingContext(): DrawingRenderingContext {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return DrawingRenderingContextInternal.fromPtr(ptr)
    }
    readDropOptions(): DropOptions {
        let valueDeserializer : Deserializer = this
        const disableDataPrefetch_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disableDataPrefetch_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (disableDataPrefetch_buf_runtimeType))
        {
            disableDataPrefetch_buf = valueDeserializer.readBoolean()
        }
        const disableDataPrefetch_result : boolean | undefined = disableDataPrefetch_buf
        let value : DropOptions = ({disableDataPrefetch: disableDataPrefetch_result} as DropOptions)
        return value
    }
    readEdgeEffectOptions(): EdgeEffectOptions {
        let valueDeserializer : Deserializer = this
        const alwaysEnabled_result : boolean = valueDeserializer.readBoolean()
        const effectEdge_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let effectEdge_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (effectEdge_buf_runtimeType))
        {
            effectEdge_buf = (valueDeserializer.readNumber() as number)
        }
        const effectEdge_result : number | undefined = effectEdge_buf
        let value : EdgeEffectOptions = ({alwaysEnabled: alwaysEnabled_result, effectEdge: effectEdge_result} as EdgeEffectOptions)
        return value
    }
    readEdgeOutlineStyles(): EdgeOutlineStyles {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : OutlineStyle | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = TypeChecker.OutlineStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const top_result : OutlineStyle | undefined = top_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : OutlineStyle | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = TypeChecker.OutlineStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const right_result : OutlineStyle | undefined = right_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : OutlineStyle | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = TypeChecker.OutlineStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const bottom_result : OutlineStyle | undefined = bottom_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : OutlineStyle | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = TypeChecker.OutlineStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const left_result : OutlineStyle | undefined = left_buf
        let value : EdgeOutlineStyles = ({top: top_result, right: right_result, bottom: bottom_result, left: left_result} as EdgeOutlineStyles)
        return value
    }
    readEdgeOutlineWidths(): EdgeOutlineWidths {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLength() as Dimension)
        }
        const top_result : Dimension | undefined = top_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = (valueDeserializer.readLength() as Dimension)
        }
        const right_result : Dimension | undefined = right_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readLength() as Dimension)
        }
        const bottom_result : Dimension | undefined = bottom_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = (valueDeserializer.readLength() as Dimension)
        }
        const left_result : Dimension | undefined = left_buf
        let value : EdgeOutlineWidths = ({top: top_result, right: right_result, bottom: bottom_result, left: left_result} as EdgeOutlineWidths)
        return value
    }
    readEdges(): Edges {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLength() as Dimension)
        }
        const top_result : Dimension | undefined = top_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = (valueDeserializer.readLength() as Dimension)
        }
        const left_result : Dimension | undefined = left_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readLength() as Dimension)
        }
        const bottom_result : Dimension | undefined = bottom_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = (valueDeserializer.readLength() as Dimension)
        }
        const right_result : Dimension | undefined = right_buf
        let value : Edges = ({top: top_result, left: left_result, bottom: bottom_result, right: right_result} as Edges)
        return value
    }
    readEdgesNumber(): EdgesT<number> {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readNumber() as number)
        }
        const top_result : number | undefined = top_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = (valueDeserializer.readNumber() as number)
        }
        const left_result : number | undefined = left_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readNumber() as number)
        }
        const bottom_result : number | undefined = bottom_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = (valueDeserializer.readNumber() as number)
        }
        const right_result : number | undefined = right_buf
        let value : EdgesT<number> = ({top: top_result, left: left_result, bottom: bottom_result, right: right_result} as EdgesT<number>)
        return value
    }
    readEdgeStyles(): EdgeStyles {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : BorderStyle | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const top_result : BorderStyle | undefined = top_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : BorderStyle | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const right_result : BorderStyle | undefined = right_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : BorderStyle | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const bottom_result : BorderStyle | undefined = bottom_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : BorderStyle | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const left_result : BorderStyle | undefined = left_buf
        let value : EdgeStyles = ({top: top_result, right: right_result, bottom: bottom_result, left: left_result} as EdgeStyles)
        return value
    }
    readEdgeWidths(): EdgeWidths {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLength() as Length)
        }
        const top_result : Length | undefined = top_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = (valueDeserializer.readLength() as Length)
        }
        const right_result : Length | undefined = right_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readLength() as Length)
        }
        const bottom_result : Length | undefined = bottom_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = (valueDeserializer.readLength() as Length)
        }
        const left_result : Length | undefined = left_buf
        let value : EdgeWidths = ({top: top_result, right: right_result, bottom: bottom_result, left: left_result} as EdgeWidths)
        return value
    }
    readEditMenuOptions(): EditMenuOptions {
        let valueDeserializer : Deserializer = this
        const onCreateMenu_result : ((menuItems: Array<TextMenuItem>) => Array<TextMenuItem>) = valueDeserializer.readAsyncCallback_Array_TextMenuItem_Array_TextMenuItem()
        const onMenuItemClick_result : ((menuItem: TextMenuItem,range: TextRange) => boolean) = valueDeserializer.readAsyncCallback_TextMenuItem_TextRange_Boolean()
        let value : EditMenuOptions = ({onCreateMenu: onCreateMenu_result, onMenuItemClick: onMenuItemClick_result} as EditMenuOptions)
        return value
    }
    readEllipseOptions(): EllipseOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : string | number | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as string | number)
        }
        const width_result : string | number | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : string | number | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as string | number)
        }
        const height_result : string | number | undefined = height_buf
        let value : EllipseOptions = ({width: width_result, height: height_result} as EllipseOptions)
        return value
    }
    readEmbedOptions(): EmbedOptions {
        let valueDeserializer : Deserializer = this
        const supportDefaultIntrinsicSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let supportDefaultIntrinsicSize_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (supportDefaultIntrinsicSize_buf_runtimeType))
        {
            supportDefaultIntrinsicSize_buf = valueDeserializer.readBoolean()
        }
        const supportDefaultIntrinsicSize_result : boolean | undefined = supportDefaultIntrinsicSize_buf
        let value : EmbedOptions = ({supportDefaultIntrinsicSize: supportDefaultIntrinsicSize_result} as EmbedOptions)
        return value
    }
    readErrorEvent(): ErrorEvent {
        let valueDeserializer : Deserializer = this
        const type_result : string = (valueDeserializer.readString() as string)
        const timeStamp_result : int64 = valueDeserializer.readInt64()
        const message_result : string = (valueDeserializer.readString() as string)
        const filename_result : string = (valueDeserializer.readString() as string)
        const lineno_result : number = (valueDeserializer.readNumber() as number)
        const colno_result : number = (valueDeserializer.readNumber() as number)
        const error_result : Object = (valueDeserializer.readObject() as Object)
        let value : ErrorEvent = ({type: type_result, timeStamp: timeStamp_result, message: message_result, filename: filename_result, lineno: lineno_result, colno: colno_result, error: error_result} as ErrorEvent)
        return value
    }
    readEvent(): Event {
        let valueDeserializer : Deserializer = this
        const type_result : string = (valueDeserializer.readString() as string)
        const timeStamp_result : int64 = valueDeserializer.readInt64()
        let value : Event = ({type: type_result, timeStamp: timeStamp_result} as Event)
        return value
    }
    readExpectedFrameRateRange(): ExpectedFrameRateRange {
        let valueDeserializer : Deserializer = this
        const min_result : number = (valueDeserializer.readNumber() as number)
        const max_result : number = (valueDeserializer.readNumber() as number)
        const expected_result : number = (valueDeserializer.readNumber() as number)
        let value : ExpectedFrameRateRange = ({min: min_result, max: max_result, expected: expected_result} as ExpectedFrameRateRange)
        return value
    }
    readFingerInfo(): FingerInfo {
        let valueDeserializer : Deserializer = this
        const id_result : number = (valueDeserializer.readNumber() as number)
        const globalX_result : number = (valueDeserializer.readNumber() as number)
        const globalY_result : number = (valueDeserializer.readNumber() as number)
        const localX_result : number = (valueDeserializer.readNumber() as number)
        const localY_result : number = (valueDeserializer.readNumber() as number)
        const displayX_result : number = (valueDeserializer.readNumber() as number)
        const displayY_result : number = (valueDeserializer.readNumber() as number)
        const hand_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hand_buf : InteractionHand | undefined
        if ((RuntimeType.UNDEFINED) != (hand_buf_runtimeType))
        {
            hand_buf = TypeChecker.InteractionHand_FromNumeric(valueDeserializer.readInt32())
        }
        const hand_result : InteractionHand | undefined = hand_buf
        let value : FingerInfo = ({id: id_result, globalX: globalX_result, globalY: globalY_result, localX: localX_result, localY: localY_result, displayX: displayX_result, displayY: displayY_result, hand: hand_result} as FingerInfo)
        return value
    }
    readFirstMeaningfulPaint(): FirstMeaningfulPaint {
        let valueDeserializer : Deserializer = this
        const navigationStartTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let navigationStartTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (navigationStartTime_buf_runtimeType))
        {
            navigationStartTime_buf = (valueDeserializer.readNumber() as number)
        }
        const navigationStartTime_result : number | undefined = navigationStartTime_buf
        const firstMeaningfulPaintTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let firstMeaningfulPaintTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (firstMeaningfulPaintTime_buf_runtimeType))
        {
            firstMeaningfulPaintTime_buf = (valueDeserializer.readNumber() as number)
        }
        const firstMeaningfulPaintTime_result : number | undefined = firstMeaningfulPaintTime_buf
        let value : FirstMeaningfulPaint = ({navigationStartTime: navigationStartTime_result, firstMeaningfulPaintTime: firstMeaningfulPaintTime_result} as FirstMeaningfulPaint)
        return value
    }
    readFocusMovement(): FocusMovement {
        let valueDeserializer : Deserializer = this
        const forward_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let forward_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (forward_buf_runtimeType))
        {
            forward_buf = (valueDeserializer.readString() as string)
        }
        const forward_result : string | undefined = forward_buf
        const backward_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backward_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (backward_buf_runtimeType))
        {
            backward_buf = (valueDeserializer.readString() as string)
        }
        const backward_result : string | undefined = backward_buf
        const up_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let up_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (up_buf_runtimeType))
        {
            up_buf = (valueDeserializer.readString() as string)
        }
        const up_result : string | undefined = up_buf
        const down_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let down_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (down_buf_runtimeType))
        {
            down_buf = (valueDeserializer.readString() as string)
        }
        const down_result : string | undefined = down_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = (valueDeserializer.readString() as string)
        }
        const left_result : string | undefined = left_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = (valueDeserializer.readString() as string)
        }
        const right_result : string | undefined = right_buf
        let value : FocusMovement = ({forward: forward_result, backward: backward_result, up: up_result, down: down_result, left: left_result, right: right_result} as FocusMovement)
        return value
    }
    readFolderStackOptions(): FolderStackOptions {
        let valueDeserializer : Deserializer = this
        const upperItems_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let upperItems_buf : Array<string> | undefined
        if ((RuntimeType.UNDEFINED) != (upperItems_buf_runtimeType))
        {
            const upperItems_buf__length : int32 = valueDeserializer.readInt32()
            let upperItems_buf_ : Array<string> = new Array<string>(upperItems_buf__length)
            for (let upperItems_buf__i = 0; upperItems_buf__i < upperItems_buf__length; upperItems_buf__i++) {
                upperItems_buf_[upperItems_buf__i] = (valueDeserializer.readString() as string)
            }
            upperItems_buf = upperItems_buf_
        }
        const upperItems_result : Array<string> | undefined = upperItems_buf
        let value : FolderStackOptions = ({upperItems: upperItems_result} as FolderStackOptions)
        return value
    }
    readFontInfo(): FontInfo {
        let valueDeserializer : Deserializer = this
        const path_result : string = (valueDeserializer.readString() as string)
        const postScriptName_result : string = (valueDeserializer.readString() as string)
        const fullName_result : string = (valueDeserializer.readString() as string)
        const family_result : string = (valueDeserializer.readString() as string)
        const subfamily_result : string = (valueDeserializer.readString() as string)
        const weight_result : number = (valueDeserializer.readNumber() as number)
        const width_result : number = (valueDeserializer.readNumber() as number)
        const italic_result : boolean = valueDeserializer.readBoolean()
        const monoSpace_result : boolean = valueDeserializer.readBoolean()
        const symbolic_result : boolean = valueDeserializer.readBoolean()
        let value : FontInfo = ({path: path_result, postScriptName: postScriptName_result, fullName: fullName_result, family: family_result, subfamily: subfamily_result, weight: weight_result, width: width_result, italic: italic_result, monoSpace: monoSpace_result, symbolic: symbolic_result} as FontInfo)
        return value
    }
    readFontSettingOptions(): FontSettingOptions {
        let valueDeserializer : Deserializer = this
        const enableVariableFontWeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableVariableFontWeight_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableVariableFontWeight_buf_runtimeType))
        {
            enableVariableFontWeight_buf = valueDeserializer.readBoolean()
        }
        const enableVariableFontWeight_result : boolean | undefined = enableVariableFontWeight_buf
        let value : FontSettingOptions = ({enableVariableFontWeight: enableVariableFontWeight_result} as FontSettingOptions)
        return value
    }
    readForegroundEffectOptions(): ForegroundEffectOptions {
        let valueDeserializer : Deserializer = this
        const radius_result : number = (valueDeserializer.readNumber() as number)
        let value : ForegroundEffectOptions = ({radius: radius_result} as ForegroundEffectOptions)
        return value
    }
    readFormCallbackInfo(): FormCallbackInfo {
        let valueDeserializer : Deserializer = this
        const id_result : int64 = valueDeserializer.readInt64()
        const idString_result : string = (valueDeserializer.readString() as string)
        let value : FormCallbackInfo = ({id: id_result, idString: idString_result} as FormCallbackInfo)
        return value
    }
    readFormLinkOptions(): FormLinkOptions {
        let valueDeserializer : Deserializer = this
        const action_result : string = (valueDeserializer.readString() as string)
        const moduleName_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let moduleName_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (moduleName_buf_runtimeType))
        {
            moduleName_buf = (valueDeserializer.readString() as string)
        }
        const moduleName_result : string | undefined = moduleName_buf
        const bundleName_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bundleName_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (bundleName_buf_runtimeType))
        {
            bundleName_buf = (valueDeserializer.readString() as string)
        }
        const bundleName_result : string | undefined = bundleName_buf
        const abilityName_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let abilityName_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (abilityName_buf_runtimeType))
        {
            abilityName_buf = (valueDeserializer.readString() as string)
        }
        const abilityName_result : string | undefined = abilityName_buf
        const uri_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let uri_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (uri_buf_runtimeType))
        {
            uri_buf = (valueDeserializer.readString() as string)
        }
        const uri_result : string | undefined = uri_buf
        const params_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let params_buf : Object | undefined
        if ((RuntimeType.UNDEFINED) != (params_buf_runtimeType))
        {
            params_buf = (valueDeserializer.readObject() as Object)
        }
        const params_result : Object | undefined = params_buf
        let value : FormLinkOptions = ({action: action_result, moduleName: moduleName_result, bundleName: bundleName_result, abilityName: abilityName_result, uri: uri_result, params: params_result} as FormLinkOptions)
        return value
    }
    readFrame(): Frame {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        const width_result : number = (valueDeserializer.readNumber() as number)
        const height_result : number = (valueDeserializer.readNumber() as number)
        let value : Frame = ({x: x_result, y: y_result, width: width_result, height: height_result} as Frame)
        return value
    }
    readFullScreenEnterEvent(): FullScreenEnterEvent {
        let valueDeserializer : Deserializer = this
        const handler_result : FullScreenExitHandler = (valueDeserializer.readFullScreenExitHandler() as FullScreenExitHandler)
        const videoWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let videoWidth_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (videoWidth_buf_runtimeType))
        {
            videoWidth_buf = (valueDeserializer.readNumber() as number)
        }
        const videoWidth_result : number | undefined = videoWidth_buf
        const videoHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let videoHeight_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (videoHeight_buf_runtimeType))
        {
            videoHeight_buf = (valueDeserializer.readNumber() as number)
        }
        const videoHeight_result : number | undefined = videoHeight_buf
        let value : FullScreenEnterEvent = ({handler: handler_result, videoWidth: videoWidth_result, videoHeight: videoHeight_result} as FullScreenEnterEvent)
        return value
    }
    readGaugeOptions(): GaugeOptions {
        let valueDeserializer : Deserializer = this
        const value_result : number = (valueDeserializer.readNumber() as number)
        const min_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let min_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (min_buf_runtimeType))
        {
            min_buf = (valueDeserializer.readNumber() as number)
        }
        const min_result : number | undefined = min_buf
        const max_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let max_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (max_buf_runtimeType))
        {
            max_buf = (valueDeserializer.readNumber() as number)
        }
        const max_result : number | undefined = max_buf
        let value : GaugeOptions = ({value: value_result, min: min_result, max: max_result} as GaugeOptions)
        return value
    }
    readGeometryTransitionOptions(): GeometryTransitionOptions {
        let valueDeserializer : Deserializer = this
        const follow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let follow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (follow_buf_runtimeType))
        {
            follow_buf = valueDeserializer.readBoolean()
        }
        const follow_result : boolean | undefined = follow_buf
        const hierarchyStrategy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hierarchyStrategy_buf : TransitionHierarchyStrategy | undefined
        if ((RuntimeType.UNDEFINED) != (hierarchyStrategy_buf_runtimeType))
        {
            hierarchyStrategy_buf = TypeChecker.TransitionHierarchyStrategy_FromNumeric(valueDeserializer.readInt32())
        }
        const hierarchyStrategy_result : TransitionHierarchyStrategy | undefined = hierarchyStrategy_buf
        let value : GeometryTransitionOptions = ({follow: follow_result, hierarchyStrategy: hierarchyStrategy_result} as GeometryTransitionOptions)
        return value
    }
    readGestureInfo(): GestureInfo {
        let valueDeserializer : Deserializer = this
        const tag_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let tag_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (tag_buf_runtimeType))
        {
            tag_buf = (valueDeserializer.readString() as string)
        }
        const tag_result : string | undefined = tag_buf
        const type_result : GestureControl.GestureType = TypeChecker.GestureControl_GestureType_FromNumeric(valueDeserializer.readInt32())
        const isSystemGesture_result : boolean = valueDeserializer.readBoolean()
        let value : GestureInfo = ({tag: tag_result, type: type_result, isSystemGesture: isSystemGesture_result} as GestureInfo)
        return value
    }
    readGestureStyleInterface(): GestureStyleInterface {
        let valueDeserializer : Deserializer = this
        const onClick_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onClick_buf : ((event: ClickEvent) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onClick_buf_runtimeType))
        {
            onClick_buf = valueDeserializer.readCallback_ClickEvent_Void()
        }
        const onClick_result : ((event: ClickEvent) => void) | undefined = onClick_buf
        const onLongPress_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onLongPress_buf : ((event: GestureEvent) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onLongPress_buf_runtimeType))
        {
            onLongPress_buf = valueDeserializer.readCallback_GestureEvent_Void()
        }
        const onLongPress_result : ((event: GestureEvent) => void) | undefined = onLongPress_buf
        let value : GestureStyleInterface = ({onClick: onClick_result, onLongPress: onLongPress_result} as GestureStyleInterface)
        return value
    }
    readGridColColumnOption(): GridColColumnOption {
        let valueDeserializer : Deserializer = this
        const xs_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xs_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (xs_buf_runtimeType))
        {
            xs_buf = (valueDeserializer.readNumber() as number)
        }
        const xs_result : number | undefined = xs_buf
        const sm_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let sm_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (sm_buf_runtimeType))
        {
            sm_buf = (valueDeserializer.readNumber() as number)
        }
        const sm_result : number | undefined = sm_buf
        const md_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let md_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (md_buf_runtimeType))
        {
            md_buf = (valueDeserializer.readNumber() as number)
        }
        const md_result : number | undefined = md_buf
        const lg_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lg_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (lg_buf_runtimeType))
        {
            lg_buf = (valueDeserializer.readNumber() as number)
        }
        const lg_result : number | undefined = lg_buf
        const xl_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xl_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (xl_buf_runtimeType))
        {
            xl_buf = (valueDeserializer.readNumber() as number)
        }
        const xl_result : number | undefined = xl_buf
        const xxl_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xxl_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (xxl_buf_runtimeType))
        {
            xxl_buf = (valueDeserializer.readNumber() as number)
        }
        const xxl_result : number | undefined = xxl_buf
        let value : GridColColumnOption = ({xs: xs_result, sm: sm_result, md: md_result, lg: lg_result, xl: xl_result, xxl: xxl_result} as GridColColumnOption)
        return value
    }
    readGridContainerOptions(): GridContainerOptions {
        let valueDeserializer : Deserializer = this
        const columns_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let columns_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (columns_buf_runtimeType))
        {
            const columns_buf__selector : int32 = valueDeserializer.readInt8()
            let columns_buf_ : number | string | undefined
            if (columns_buf__selector == 0) {
                columns_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (columns_buf__selector == 1) {
                columns_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for columns_buf_ has to be chosen through deserialisation.")
            }
            columns_buf = (columns_buf_ as number | string)
        }
        const columns_result : number | string | undefined = columns_buf
        const sizeType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let sizeType_buf : SizeType | undefined
        if ((RuntimeType.UNDEFINED) != (sizeType_buf_runtimeType))
        {
            sizeType_buf = TypeChecker.SizeType_FromNumeric(valueDeserializer.readInt32())
        }
        const sizeType_result : SizeType | undefined = sizeType_buf
        const gutter_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gutter_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (gutter_buf_runtimeType))
        {
            const gutter_buf__selector : int32 = valueDeserializer.readInt8()
            let gutter_buf_ : number | string | undefined
            if (gutter_buf__selector == 0) {
                gutter_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (gutter_buf__selector == 1) {
                gutter_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for gutter_buf_ has to be chosen through deserialisation.")
            }
            gutter_buf = (gutter_buf_ as number | string)
        }
        const gutter_result : number | string | undefined = gutter_buf
        const margin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let margin_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (margin_buf_runtimeType))
        {
            const margin_buf__selector : int32 = valueDeserializer.readInt8()
            let margin_buf_ : number | string | undefined
            if (margin_buf__selector == 0) {
                margin_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (margin_buf__selector == 1) {
                margin_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for margin_buf_ has to be chosen through deserialisation.")
            }
            margin_buf = (margin_buf_ as number | string)
        }
        const margin_result : number | string | undefined = margin_buf
        let value : GridContainerOptions = ({columns: columns_result, sizeType: sizeType_result, gutter: gutter_result, margin: margin_result} as GridContainerOptions)
        return value
    }
    readGridItemOptions(): GridItemOptions {
        let valueDeserializer : Deserializer = this
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : GridItemStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.GridItemStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : GridItemStyle | undefined = style_buf
        let value : GridItemOptions = ({style: style_result} as GridItemOptions)
        return value
    }
    readGridLayoutOptions(): GridLayoutOptions {
        let valueDeserializer : Deserializer = this
        const regularSize_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const regularSize_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const regularSize_result : [ number, number ] = ([regularSize_buf_value0, regularSize_buf_value1] as [ number, number ])
        const irregularIndexes_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let irregularIndexes_buf : Array<number> | undefined
        if ((RuntimeType.UNDEFINED) != (irregularIndexes_buf_runtimeType))
        {
            const irregularIndexes_buf__length : int32 = valueDeserializer.readInt32()
            let irregularIndexes_buf_ : Array<number> = new Array<number>(irregularIndexes_buf__length)
            for (let irregularIndexes_buf__i = 0; irregularIndexes_buf__i < irregularIndexes_buf__length; irregularIndexes_buf__i++) {
                irregularIndexes_buf_[irregularIndexes_buf__i] = (valueDeserializer.readNumber() as number)
            }
            irregularIndexes_buf = irregularIndexes_buf_
        }
        const irregularIndexes_result : Array<number> | undefined = irregularIndexes_buf
        const onGetIrregularSizeByIndex_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onGetIrregularSizeByIndex_buf : ((index: number) => [ number, number ]) | undefined
        if ((RuntimeType.UNDEFINED) != (onGetIrregularSizeByIndex_buf_runtimeType))
        {
            onGetIrregularSizeByIndex_buf = valueDeserializer.readCallback_Number_Tuple_Number_Number()
        }
        const onGetIrregularSizeByIndex_result : ((index: number) => [ number, number ]) | undefined = onGetIrregularSizeByIndex_buf
        const onGetRectByIndex_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onGetRectByIndex_buf : ((index: number) => [ number, number, number, number ]) | undefined
        if ((RuntimeType.UNDEFINED) != (onGetRectByIndex_buf_runtimeType))
        {
            onGetRectByIndex_buf = valueDeserializer.readCallback_Number_Tuple_Number_Number_Number_Number()
        }
        const onGetRectByIndex_result : ((index: number) => [ number, number, number, number ]) | undefined = onGetRectByIndex_buf
        let value : GridLayoutOptions = ({regularSize: regularSize_result, irregularIndexes: irregularIndexes_result, onGetIrregularSizeByIndex: onGetIrregularSizeByIndex_result, onGetRectByIndex: onGetRectByIndex_result} as GridLayoutOptions)
        return value
    }
    readGridRowColumnOption(): GridRowColumnOption {
        let valueDeserializer : Deserializer = this
        const xs_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xs_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (xs_buf_runtimeType))
        {
            xs_buf = (valueDeserializer.readNumber() as number)
        }
        const xs_result : number | undefined = xs_buf
        const sm_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let sm_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (sm_buf_runtimeType))
        {
            sm_buf = (valueDeserializer.readNumber() as number)
        }
        const sm_result : number | undefined = sm_buf
        const md_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let md_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (md_buf_runtimeType))
        {
            md_buf = (valueDeserializer.readNumber() as number)
        }
        const md_result : number | undefined = md_buf
        const lg_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lg_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (lg_buf_runtimeType))
        {
            lg_buf = (valueDeserializer.readNumber() as number)
        }
        const lg_result : number | undefined = lg_buf
        const xl_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xl_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (xl_buf_runtimeType))
        {
            xl_buf = (valueDeserializer.readNumber() as number)
        }
        const xl_result : number | undefined = xl_buf
        const xxl_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xxl_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (xxl_buf_runtimeType))
        {
            xxl_buf = (valueDeserializer.readNumber() as number)
        }
        const xxl_result : number | undefined = xxl_buf
        let value : GridRowColumnOption = ({xs: xs_result, sm: sm_result, md: md_result, lg: lg_result, xl: xl_result, xxl: xxl_result} as GridRowColumnOption)
        return value
    }
    readGridRowSizeOption(): GridRowSizeOption {
        let valueDeserializer : Deserializer = this
        const xs_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xs_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (xs_buf_runtimeType))
        {
            xs_buf = (valueDeserializer.readLength() as Length)
        }
        const xs_result : Length | undefined = xs_buf
        const sm_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let sm_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (sm_buf_runtimeType))
        {
            sm_buf = (valueDeserializer.readLength() as Length)
        }
        const sm_result : Length | undefined = sm_buf
        const md_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let md_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (md_buf_runtimeType))
        {
            md_buf = (valueDeserializer.readLength() as Length)
        }
        const md_result : Length | undefined = md_buf
        const lg_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lg_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (lg_buf_runtimeType))
        {
            lg_buf = (valueDeserializer.readLength() as Length)
        }
        const lg_result : Length | undefined = lg_buf
        const xl_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xl_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (xl_buf_runtimeType))
        {
            xl_buf = (valueDeserializer.readLength() as Length)
        }
        const xl_result : Length | undefined = xl_buf
        const xxl_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xxl_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (xxl_buf_runtimeType))
        {
            xxl_buf = (valueDeserializer.readLength() as Length)
        }
        const xxl_result : Length | undefined = xxl_buf
        let value : GridRowSizeOption = ({xs: xs_result, sm: sm_result, md: md_result, lg: lg_result, xl: xl_result, xxl: xxl_result} as GridRowSizeOption)
        return value
    }
    readGuideLinePosition(): GuideLinePosition {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readLength() as Dimension)
        }
        const start_result : Dimension | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readLength() as Dimension)
        }
        const end_result : Dimension | undefined = end_buf
        let value : GuideLinePosition = ({start: start_result, end: end_result} as GuideLinePosition)
        return value
    }
    readGuideLineStyle(): GuideLineStyle {
        let valueDeserializer : Deserializer = this
        const id_result : string = (valueDeserializer.readString() as string)
        const direction_result : Axis = TypeChecker.Axis_FromNumeric(valueDeserializer.readInt32())
        const position_result : GuideLinePosition = valueDeserializer.readGuideLinePosition()
        let value : GuideLineStyle = ({id: id_result, direction: direction_result, position: position_result} as GuideLineStyle)
        return value
    }
    readHeader(): Header {
        let valueDeserializer : Deserializer = this
        const headerKey_result : string = (valueDeserializer.readString() as string)
        const headerValue_result : string = (valueDeserializer.readString() as string)
        let value : Header = ({headerKey: headerKey_result, headerValue: headerValue_result} as Header)
        return value
    }
    readHierarchicalSymbolEffect(): HierarchicalSymbolEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return HierarchicalSymbolEffectInternal.fromPtr(ptr)
    }
    readHoverEventParam(): HoverEventParam {
        let valueDeserializer : Deserializer = this
        const foldStatus_result : FoldStatus = TypeChecker.FoldStatus_FromNumeric(valueDeserializer.readInt32())
        const isHoverMode_result : boolean = valueDeserializer.readBoolean()
        const appRotation_result : AppRotation = TypeChecker.AppRotation_FromNumeric(valueDeserializer.readInt32())
        const windowStatusType_result : WindowStatusType = TypeChecker.WindowStatusType_FromNumeric(valueDeserializer.readInt32())
        let value : HoverEventParam = ({foldStatus: foldStatus_result, isHoverMode: isHoverMode_result, appRotation: appRotation_result, windowStatusType: windowStatusType_result} as HoverEventParam)
        return value
    }
    readImageAIOptions(): ImageAIOptions {
        let valueDeserializer : Deserializer = this
        const types_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let types_buf : Array<ImageAnalyzerType> | undefined
        if ((RuntimeType.UNDEFINED) != (types_buf_runtimeType))
        {
            const types_buf__length : int32 = valueDeserializer.readInt32()
            let types_buf_ : Array<ImageAnalyzerType> = new Array<ImageAnalyzerType>(types_buf__length)
            for (let types_buf__i = 0; types_buf__i < types_buf__length; types_buf__i++) {
                types_buf_[types_buf__i] = TypeChecker.ImageAnalyzerType_FromNumeric(valueDeserializer.readInt32())
            }
            types_buf = types_buf_
        }
        const types_result : Array<ImageAnalyzerType> | undefined = types_buf
        const aiController_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let aiController_buf : ImageAnalyzerController | undefined
        if ((RuntimeType.UNDEFINED) != (aiController_buf_runtimeType))
        {
            aiController_buf = (valueDeserializer.readImageAnalyzerController() as ImageAnalyzerController)
        }
        const aiController_result : ImageAnalyzerController | undefined = aiController_buf
        let value : ImageAIOptions = ({types: types_result, aiController: aiController_result} as ImageAIOptions)
        return value
    }
    readImageAnalyzerConfig(): ImageAnalyzerConfig {
        let valueDeserializer : Deserializer = this
        const types_buf_length : int32 = valueDeserializer.readInt32()
        let types_buf : Array<ImageAnalyzerType> = new Array<ImageAnalyzerType>(types_buf_length)
        for (let types_buf_i = 0; types_buf_i < types_buf_length; types_buf_i++) {
            types_buf[types_buf_i] = TypeChecker.ImageAnalyzerType_FromNumeric(valueDeserializer.readInt32())
        }
        const types_result : Array<ImageAnalyzerType> = types_buf
        let value : ImageAnalyzerConfig = ({types: types_result} as ImageAnalyzerConfig)
        return value
    }
    readImageBitmap(): ImageBitmap {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ImageBitmapInternal.fromPtr(ptr)
    }
    readImageData(): ImageData {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ImageDataInternal.fromPtr(ptr)
    }
    readImageError(): ImageError {
        let valueDeserializer : Deserializer = this
        const componentWidth_result : number = (valueDeserializer.readNumber() as number)
        const componentHeight_result : number = (valueDeserializer.readNumber() as number)
        const message_result : string = (valueDeserializer.readString() as string)
        let value : ImageError = ({componentWidth: componentWidth_result, componentHeight: componentHeight_result, message: message_result} as ImageError)
        return value
    }
    readImageLoadResult(): ImageLoadResult {
        let valueDeserializer : Deserializer = this
        const width_result : number = (valueDeserializer.readNumber() as number)
        const height_result : number = (valueDeserializer.readNumber() as number)
        const componentWidth_result : number = (valueDeserializer.readNumber() as number)
        const componentHeight_result : number = (valueDeserializer.readNumber() as number)
        const loadingStatus_result : number = (valueDeserializer.readNumber() as number)
        const contentWidth_result : number = (valueDeserializer.readNumber() as number)
        const contentHeight_result : number = (valueDeserializer.readNumber() as number)
        const contentOffsetX_result : number = (valueDeserializer.readNumber() as number)
        const contentOffsetY_result : number = (valueDeserializer.readNumber() as number)
        let value : ImageLoadResult = ({width: width_result, height: height_result, componentWidth: componentWidth_result, componentHeight: componentHeight_result, loadingStatus: loadingStatus_result, contentWidth: contentWidth_result, contentHeight: contentHeight_result, contentOffsetX: contentOffsetX_result, contentOffsetY: contentOffsetY_result} as ImageLoadResult)
        return value
    }
    readImageSourceSize(): ImageSourceSize {
        let valueDeserializer : Deserializer = this
        const width_result : number = (valueDeserializer.readNumber() as number)
        const height_result : number = (valueDeserializer.readNumber() as number)
        let value : ImageSourceSize = ({width: width_result, height: height_result} as ImageSourceSize)
        return value
    }
    readImmersiveMode(): ImmersiveMode {
        let valueDeserializer : Deserializer = this
        const _ImmersiveModeStub_result : string = (valueDeserializer.readString() as string)
        let value : ImmersiveMode = ({_ImmersiveModeStub: _ImmersiveModeStub_result} as ImmersiveMode)
        return value
    }
    readInputCounterOptions(): InputCounterOptions {
        let valueDeserializer : Deserializer = this
        const thresholdPercentage_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let thresholdPercentage_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (thresholdPercentage_buf_runtimeType))
        {
            thresholdPercentage_buf = (valueDeserializer.readNumber() as number)
        }
        const thresholdPercentage_result : number | undefined = thresholdPercentage_buf
        const highlightBorder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let highlightBorder_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (highlightBorder_buf_runtimeType))
        {
            highlightBorder_buf = valueDeserializer.readBoolean()
        }
        const highlightBorder_result : boolean | undefined = highlightBorder_buf
        let value : InputCounterOptions = ({thresholdPercentage: thresholdPercentage_result, highlightBorder: highlightBorder_result} as InputCounterOptions)
        return value
    }
    readInsertValue(): InsertValue {
        let valueDeserializer : Deserializer = this
        const insertOffset_result : number = (valueDeserializer.readNumber() as number)
        const insertValue_result : string = (valueDeserializer.readString() as string)
        let value : InsertValue = ({insertOffset: insertOffset_result, insertValue: insertValue_result} as InsertValue)
        return value
    }
    readIntelligentTrackingPreventionDetails(): IntelligentTrackingPreventionDetails {
        let valueDeserializer : Deserializer = this
        const host_result : string = (valueDeserializer.readString() as string)
        const trackerHost_result : string = (valueDeserializer.readString() as string)
        let value : IntelligentTrackingPreventionDetails = ({host: host_result, trackerHost: trackerHost_result} as IntelligentTrackingPreventionDetails)
        return value
    }
    readInvertOptions(): InvertOptions {
        let valueDeserializer : Deserializer = this
        const low_result : number = (valueDeserializer.readNumber() as number)
        const high_result : number = (valueDeserializer.readNumber() as number)
        const threshold_result : number = (valueDeserializer.readNumber() as number)
        const thresholdRange_result : number = (valueDeserializer.readNumber() as number)
        let value : InvertOptions = ({low: low_result, high: high_result, threshold: threshold_result, thresholdRange: thresholdRange_result} as InvertOptions)
        return value
    }
    readItemDragInfo(): ItemDragInfo {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        let value : ItemDragInfo = ({x: x_result, y: y_result} as ItemDragInfo)
        return value
    }
    readKeyboardOptions(): KeyboardOptions {
        let valueDeserializer : Deserializer = this
        const supportAvoidance_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let supportAvoidance_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (supportAvoidance_buf_runtimeType))
        {
            supportAvoidance_buf = valueDeserializer.readBoolean()
        }
        const supportAvoidance_result : boolean | undefined = supportAvoidance_buf
        let value : KeyboardOptions = ({supportAvoidance: supportAvoidance_result} as KeyboardOptions)
        return value
    }
    readKeyEvent(): KeyEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return KeyEventInternal.fromPtr(ptr)
    }
    readLargestContentfulPaint(): LargestContentfulPaint {
        let valueDeserializer : Deserializer = this
        const navigationStartTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let navigationStartTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (navigationStartTime_buf_runtimeType))
        {
            navigationStartTime_buf = (valueDeserializer.readNumber() as number)
        }
        const navigationStartTime_result : number | undefined = navigationStartTime_buf
        const largestImagePaintTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let largestImagePaintTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (largestImagePaintTime_buf_runtimeType))
        {
            largestImagePaintTime_buf = (valueDeserializer.readNumber() as number)
        }
        const largestImagePaintTime_result : number | undefined = largestImagePaintTime_buf
        const largestTextPaintTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let largestTextPaintTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (largestTextPaintTime_buf_runtimeType))
        {
            largestTextPaintTime_buf = (valueDeserializer.readNumber() as number)
        }
        const largestTextPaintTime_result : number | undefined = largestTextPaintTime_buf
        const imageBPP_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let imageBPP_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (imageBPP_buf_runtimeType))
        {
            imageBPP_buf = (valueDeserializer.readNumber() as number)
        }
        const imageBPP_result : number | undefined = imageBPP_buf
        const largestImageLoadStartTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let largestImageLoadStartTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (largestImageLoadStartTime_buf_runtimeType))
        {
            largestImageLoadStartTime_buf = (valueDeserializer.readNumber() as number)
        }
        const largestImageLoadStartTime_result : number | undefined = largestImageLoadStartTime_buf
        const largestImageLoadEndTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let largestImageLoadEndTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (largestImageLoadEndTime_buf_runtimeType))
        {
            largestImageLoadEndTime_buf = (valueDeserializer.readNumber() as number)
        }
        const largestImageLoadEndTime_result : number | undefined = largestImageLoadEndTime_buf
        let value : LargestContentfulPaint = ({navigationStartTime: navigationStartTime_result, largestImagePaintTime: largestImagePaintTime_result, largestTextPaintTime: largestTextPaintTime_result, imageBPP: imageBPP_result, largestImageLoadStartTime: largestImageLoadStartTime_result, largestImageLoadEndTime: largestImageLoadEndTime_result} as LargestContentfulPaint)
        return value
    }
    readLeadingMarginPlaceholder(): LeadingMarginPlaceholder {
        let valueDeserializer : Deserializer = this
        const pixelMap_result : PixelMap = (valueDeserializer.readPixelMap() as PixelMap)
        const size_buf_value0 : Dimension = (valueDeserializer.readLength() as Dimension)
        const size_buf_value1 : Dimension = (valueDeserializer.readLength() as Dimension)
        const size_result : [ Dimension, Dimension ] = ([size_buf_value0, size_buf_value1] as [ Dimension, Dimension ])
        let value : LeadingMarginPlaceholder = ({pixelMap: pixelMap_result, size: size_result} as LeadingMarginPlaceholder)
        return value
    }
    readLengthMetrics(): LengthMetrics {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LengthMetricsInternal.fromPtr(ptr)
    }
    readLetterSpacingStyle(): LetterSpacingStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LetterSpacingStyleInternal.fromPtr(ptr)
    }
    readLevelMode(): LevelMode {
        let valueDeserializer : Deserializer = this
        const _LevelModeStub_result : string = (valueDeserializer.readString() as string)
        let value : LevelMode = ({_LevelModeStub: _LevelModeStub_result} as LevelMode)
        return value
    }
    readLevelOrder(): LevelOrder {
        let valueDeserializer : Deserializer = this
        const _LevelOrderStub_result : string = (valueDeserializer.readString() as string)
        let value : LevelOrder = ({_LevelOrderStub: _LevelOrderStub_result} as LevelOrder)
        return value
    }
    readLinearGradient_common(): LinearGradient_common {
        let valueDeserializer : Deserializer = this
        const angle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let angle_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (angle_buf_runtimeType))
        {
            const angle_buf__selector : int32 = valueDeserializer.readInt8()
            let angle_buf_ : number | string | undefined
            if (angle_buf__selector == 0) {
                angle_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (angle_buf__selector == 1) {
                angle_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for angle_buf_ has to be chosen through deserialisation.")
            }
            angle_buf = (angle_buf_ as number | string)
        }
        const angle_result : number | string | undefined = angle_buf
        const direction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let direction_buf : GradientDirection | undefined
        if ((RuntimeType.UNDEFINED) != (direction_buf_runtimeType))
        {
            direction_buf = TypeChecker.GradientDirection_FromNumeric(valueDeserializer.readInt32())
        }
        const direction_result : GradientDirection | undefined = direction_buf
        const colors_buf_length : int32 = valueDeserializer.readInt32()
        let colors_buf : Array<[ ResourceColor, number ]> = new Array<[ ResourceColor, number ]>(colors_buf_length)
        for (let colors_buf_i = 0; colors_buf_i < colors_buf_length; colors_buf_i++) {
            const colors_buf_buf_value0_buf_selector : int32 = valueDeserializer.readInt8()
            let colors_buf_buf_value0_buf : Color | number | string | Resource | undefined
            if (colors_buf_buf_value0_buf_selector == 0) {
                colors_buf_buf_value0_buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (colors_buf_buf_value0_buf_selector == 1) {
                colors_buf_buf_value0_buf = (valueDeserializer.readNumber() as number)
            }
            else if (colors_buf_buf_value0_buf_selector == 2) {
                colors_buf_buf_value0_buf = (valueDeserializer.readString() as string)
            }
            else if (colors_buf_buf_value0_buf_selector == 3) {
                colors_buf_buf_value0_buf = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for colors_buf_buf_value0_buf has to be chosen through deserialisation.")
            }
            const colors_buf_buf_value0 : ResourceColor = (colors_buf_buf_value0_buf as Color | number | string | Resource)
            const colors_buf_buf_value1 : number = (valueDeserializer.readNumber() as number)
            colors_buf[colors_buf_i] = ([colors_buf_buf_value0, colors_buf_buf_value1] as [ ResourceColor, number ])
        }
        const colors_result : Array<[ ResourceColor, number ]> = colors_buf
        const repeating_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let repeating_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (repeating_buf_runtimeType))
        {
            repeating_buf = valueDeserializer.readBoolean()
        }
        const repeating_result : boolean | undefined = repeating_buf
        let value : LinearGradient_common = ({angle: angle_result, direction: direction_result, colors: colors_result, repeating: repeating_result} as LinearGradient_common)
        return value
    }
    readLinearGradientBlurOptions(): LinearGradientBlurOptions {
        let valueDeserializer : Deserializer = this
        const fractionStops_buf_length : int32 = valueDeserializer.readInt32()
        let fractionStops_buf : Array<FractionStop> = new Array<FractionStop>(fractionStops_buf_length)
        for (let fractionStops_buf_i = 0; fractionStops_buf_i < fractionStops_buf_length; fractionStops_buf_i++) {
            const fractionStops_buf_buf_value0 : number = (valueDeserializer.readNumber() as number)
            const fractionStops_buf_buf_value1 : number = (valueDeserializer.readNumber() as number)
            fractionStops_buf[fractionStops_buf_i] = ([fractionStops_buf_buf_value0, fractionStops_buf_buf_value1] as FractionStop)
        }
        const fractionStops_result : Array<FractionStop> = fractionStops_buf
        const direction_result : GradientDirection = TypeChecker.GradientDirection_FromNumeric(valueDeserializer.readInt32())
        let value : LinearGradientBlurOptions = ({fractionStops: fractionStops_result, direction: direction_result} as LinearGradientBlurOptions)
        return value
    }
    readLinearGradientOptions(): LinearGradientOptions {
        let valueDeserializer : Deserializer = this
        const angle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let angle_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (angle_buf_runtimeType))
        {
            const angle_buf__selector : int32 = valueDeserializer.readInt8()
            let angle_buf_ : number | string | undefined
            if (angle_buf__selector == 0) {
                angle_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (angle_buf__selector == 1) {
                angle_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for angle_buf_ has to be chosen through deserialisation.")
            }
            angle_buf = (angle_buf_ as number | string)
        }
        const angle_result : number | string | undefined = angle_buf
        const direction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let direction_buf : GradientDirection | undefined
        if ((RuntimeType.UNDEFINED) != (direction_buf_runtimeType))
        {
            direction_buf = TypeChecker.GradientDirection_FromNumeric(valueDeserializer.readInt32())
        }
        const direction_result : GradientDirection | undefined = direction_buf
        const colors_buf_length : int32 = valueDeserializer.readInt32()
        let colors_buf : Array<[ ResourceColor, number ]> = new Array<[ ResourceColor, number ]>(colors_buf_length)
        for (let colors_buf_i = 0; colors_buf_i < colors_buf_length; colors_buf_i++) {
            const colors_buf_buf_value0_buf_selector : int32 = valueDeserializer.readInt8()
            let colors_buf_buf_value0_buf : Color | number | string | Resource | undefined
            if (colors_buf_buf_value0_buf_selector == 0) {
                colors_buf_buf_value0_buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (colors_buf_buf_value0_buf_selector == 1) {
                colors_buf_buf_value0_buf = (valueDeserializer.readNumber() as number)
            }
            else if (colors_buf_buf_value0_buf_selector == 2) {
                colors_buf_buf_value0_buf = (valueDeserializer.readString() as string)
            }
            else if (colors_buf_buf_value0_buf_selector == 3) {
                colors_buf_buf_value0_buf = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for colors_buf_buf_value0_buf has to be chosen through deserialisation.")
            }
            const colors_buf_buf_value0 : ResourceColor = (colors_buf_buf_value0_buf as Color | number | string | Resource)
            const colors_buf_buf_value1 : number = (valueDeserializer.readNumber() as number)
            colors_buf[colors_buf_i] = ([colors_buf_buf_value0, colors_buf_buf_value1] as [ ResourceColor, number ])
        }
        const colors_result : Array<[ ResourceColor, number ]> = colors_buf
        const repeating_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let repeating_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (repeating_buf_runtimeType))
        {
            repeating_buf = valueDeserializer.readBoolean()
        }
        const repeating_result : boolean | undefined = repeating_buf
        let value : LinearGradientOptions = ({angle: angle_result, direction: direction_result, colors: colors_result, repeating: repeating_result} as LinearGradientOptions)
        return value
    }
    readLinearIndicatorStartOptions(): LinearIndicatorStartOptions {
        let valueDeserializer : Deserializer = this
        const interval_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let interval_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (interval_buf_runtimeType))
        {
            interval_buf = (valueDeserializer.readNumber() as number)
        }
        const interval_result : number | undefined = interval_buf
        const duration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let duration_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (duration_buf_runtimeType))
        {
            duration_buf = (valueDeserializer.readNumber() as number)
        }
        const duration_result : number | undefined = duration_buf
        let value : LinearIndicatorStartOptions = ({interval: interval_result, duration: duration_result} as LinearIndicatorStartOptions)
        return value
    }
    readLineHeightStyle(): LineHeightStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LineHeightStyleInternal.fromPtr(ptr)
    }
    readLineMetrics(): LineMetrics {
        let valueDeserializer : Deserializer = this
        const startIndex_result : number = (valueDeserializer.readNumber() as number)
        const endIndex_result : number = (valueDeserializer.readNumber() as number)
        const ascent_result : number = (valueDeserializer.readNumber() as number)
        const descent_result : number = (valueDeserializer.readNumber() as number)
        const height_result : number = (valueDeserializer.readNumber() as number)
        const width_result : number = (valueDeserializer.readNumber() as number)
        const left_result : number = (valueDeserializer.readNumber() as number)
        const baseline_result : number = (valueDeserializer.readNumber() as number)
        const lineNumber_result : number = (valueDeserializer.readNumber() as number)
        const topHeight_result : number = (valueDeserializer.readNumber() as number)
        const runMetrics_buf_size : int32 = valueDeserializer.readInt32()
        let runMetrics_buf : Map<number, RunMetrics> = new Map<number, RunMetrics>()
        // TODO: TS map resize
        for (let runMetrics_buf_i = 0; runMetrics_buf_i < runMetrics_buf_size; runMetrics_buf_i++) {
            const runMetrics_buf_key : number = (valueDeserializer.readNumber() as number)
            const runMetrics_buf_value : RunMetrics = valueDeserializer.readRunMetrics()
            runMetrics_buf.set(runMetrics_buf_key, runMetrics_buf_value)
        }
        const runMetrics_result : Map<number, RunMetrics> = runMetrics_buf
        let value : LineMetrics = ({startIndex: startIndex_result, endIndex: endIndex_result, ascent: ascent_result, descent: descent_result, height: height_result, width: width_result, left: left_result, baseline: baseline_result, lineNumber: lineNumber_result, topHeight: topHeight_result, runMetrics: runMetrics_result} as LineMetrics)
        return value
    }
    readLineOptions(): LineOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : string | number | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as string | number)
        }
        const width_result : string | number | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : string | number | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as string | number)
        }
        const height_result : string | number | undefined = height_buf
        let value : LineOptions = ({width: width_result, height: height_result} as LineOptions)
        return value
    }
    readListItemGroupOptions(): ListItemGroupOptions {
        let valueDeserializer : Deserializer = this
        const header_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let header_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (header_buf_runtimeType))
        {
            header_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const header_result : CustomBuilder | undefined = header_buf
        const headerComponent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let headerComponent_buf : ComponentContent | undefined
        if ((RuntimeType.UNDEFINED) != (headerComponent_buf_runtimeType))
        {
            headerComponent_buf = (valueDeserializer.readComponentContent() as ComponentContent)
        }
        const headerComponent_result : ComponentContent | undefined = headerComponent_buf
        const footer_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let footer_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (footer_buf_runtimeType))
        {
            footer_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const footer_result : CustomBuilder | undefined = footer_buf
        const footerComponent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let footerComponent_buf : ComponentContent | undefined
        if ((RuntimeType.UNDEFINED) != (footerComponent_buf_runtimeType))
        {
            footerComponent_buf = (valueDeserializer.readComponentContent() as ComponentContent)
        }
        const footerComponent_result : ComponentContent | undefined = footerComponent_buf
        const space_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let space_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (space_buf_runtimeType))
        {
            const space_buf__selector : int32 = valueDeserializer.readInt8()
            let space_buf_ : number | string | undefined
            if (space_buf__selector == 0) {
                space_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (space_buf__selector == 1) {
                space_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for space_buf_ has to be chosen through deserialisation.")
            }
            space_buf = (space_buf_ as number | string)
        }
        const space_result : number | string | undefined = space_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : ListItemGroupStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.ListItemGroupStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : ListItemGroupStyle | undefined = style_buf
        let value : ListItemGroupOptions = ({header: header_result, headerComponent: headerComponent_result, footer: footer_result, footerComponent: footerComponent_result, space: space_result, style: style_result} as ListItemGroupOptions)
        return value
    }
    readListItemOptions(): ListItemOptions {
        let valueDeserializer : Deserializer = this
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : ListItemStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.ListItemStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : ListItemStyle | undefined = style_buf
        let value : ListItemOptions = ({style: style_result} as ListItemOptions)
        return value
    }
    readListOptions(): ListOptions {
        let valueDeserializer : Deserializer = this
        const initialIndex_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let initialIndex_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (initialIndex_buf_runtimeType))
        {
            initialIndex_buf = (valueDeserializer.readNumber() as number)
        }
        const initialIndex_result : number | undefined = initialIndex_buf
        const space_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let space_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (space_buf_runtimeType))
        {
            const space_buf__selector : int32 = valueDeserializer.readInt8()
            let space_buf_ : number | string | undefined
            if (space_buf__selector == 0) {
                space_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (space_buf__selector == 1) {
                space_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for space_buf_ has to be chosen through deserialisation.")
            }
            space_buf = (space_buf_ as number | string)
        }
        const space_result : number | string | undefined = space_buf
        const scroller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scroller_buf : Scroller | undefined
        if ((RuntimeType.UNDEFINED) != (scroller_buf_runtimeType))
        {
            scroller_buf = (valueDeserializer.readScroller() as Scroller)
        }
        const scroller_result : Scroller | undefined = scroller_buf
        let value : ListOptions = ({initialIndex: initialIndex_result, space: space_result, scroller: scroller_result} as ListOptions)
        return value
    }
    readLoadCommittedDetails(): LoadCommittedDetails {
        let valueDeserializer : Deserializer = this
        const isMainFrame_result : boolean = valueDeserializer.readBoolean()
        const isSameDocument_result : boolean = valueDeserializer.readBoolean()
        const didReplaceEntry_result : boolean = valueDeserializer.readBoolean()
        const navigationType_result : WebNavigationType = TypeChecker.WebNavigationType_FromNumeric(valueDeserializer.readInt32())
        const url_result : string = (valueDeserializer.readString() as string)
        let value : LoadCommittedDetails = ({isMainFrame: isMainFrame_result, isSameDocument: isSameDocument_result, didReplaceEntry: didReplaceEntry_result, navigationType: navigationType_result, url: url_result} as LoadCommittedDetails)
        return value
    }
    readLocalizedBarrierStyle(): LocalizedBarrierStyle {
        let valueDeserializer : Deserializer = this
        const id_result : string = (valueDeserializer.readString() as string)
        const localizedDirection_result : LocalizedBarrierDirection = TypeChecker.LocalizedBarrierDirection_FromNumeric(valueDeserializer.readInt32())
        const referencedId_buf_length : int32 = valueDeserializer.readInt32()
        let referencedId_buf : Array<string> = new Array<string>(referencedId_buf_length)
        for (let referencedId_buf_i = 0; referencedId_buf_i < referencedId_buf_length; referencedId_buf_i++) {
            referencedId_buf[referencedId_buf_i] = (valueDeserializer.readString() as string)
        }
        const referencedId_result : Array<string> = referencedId_buf
        let value : LocalizedBarrierStyle = ({id: id_result, localizedDirection: localizedDirection_result, referencedId: referencedId_result} as LocalizedBarrierStyle)
        return value
    }
    readLocalizedHorizontalAlignParam(): LocalizedHorizontalAlignParam {
        let valueDeserializer : Deserializer = this
        const anchor_result : string = (valueDeserializer.readString() as string)
        const align_result : HorizontalAlign = TypeChecker.HorizontalAlign_FromNumeric(valueDeserializer.readInt32())
        let value : LocalizedHorizontalAlignParam = ({anchor: anchor_result, align: align_result} as LocalizedHorizontalAlignParam)
        return value
    }
    readLocalizedVerticalAlignParam(): LocalizedVerticalAlignParam {
        let valueDeserializer : Deserializer = this
        const anchor_result : string = (valueDeserializer.readString() as string)
        const align_result : VerticalAlign = TypeChecker.VerticalAlign_FromNumeric(valueDeserializer.readInt32())
        let value : LocalizedVerticalAlignParam = ({anchor: anchor_result, align: align_result} as LocalizedVerticalAlignParam)
        return value
    }
    readLocationButtonOptions(): LocationButtonOptions {
        let valueDeserializer : Deserializer = this
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : LocationIconStyle | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            icon_buf = TypeChecker.LocationIconStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const icon_result : LocationIconStyle | undefined = icon_buf
        const text_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let text_buf : LocationDescription | undefined
        if ((RuntimeType.UNDEFINED) != (text_buf_runtimeType))
        {
            text_buf = TypeChecker.LocationDescription_FromNumeric(valueDeserializer.readInt32())
        }
        const text_result : LocationDescription | undefined = text_buf
        const buttonType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let buttonType_buf : ButtonType | undefined
        if ((RuntimeType.UNDEFINED) != (buttonType_buf_runtimeType))
        {
            buttonType_buf = TypeChecker.ButtonType_FromNumeric(valueDeserializer.readInt32())
        }
        const buttonType_result : ButtonType | undefined = buttonType_buf
        let value : LocationButtonOptions = ({icon: icon_result, text: text_result, buttonType: buttonType_result} as LocationButtonOptions)
        return value
    }
    readLongPressGestureHandlerOptions(): LongPressGestureHandlerOptions {
        let valueDeserializer : Deserializer = this
        const isFingerCountLimited_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isFingerCountLimited_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isFingerCountLimited_buf_runtimeType))
        {
            isFingerCountLimited_buf = valueDeserializer.readBoolean()
        }
        const isFingerCountLimited_result : boolean | undefined = isFingerCountLimited_buf
        const fingers_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fingers_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (fingers_buf_runtimeType))
        {
            fingers_buf = (valueDeserializer.readNumber() as number)
        }
        const fingers_result : number | undefined = fingers_buf
        const repeat_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let repeat_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (repeat_buf_runtimeType))
        {
            repeat_buf = valueDeserializer.readBoolean()
        }
        const repeat_result : boolean | undefined = repeat_buf
        const duration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let duration_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (duration_buf_runtimeType))
        {
            duration_buf = (valueDeserializer.readNumber() as number)
        }
        const duration_result : number | undefined = duration_buf
        let value : LongPressGestureHandlerOptions = ({isFingerCountLimited: isFingerCountLimited_result, fingers: fingers_result, repeat: repeat_result, duration: duration_result} as LongPressGestureHandlerOptions)
        return value
    }
    readMarqueeOptions(): MarqueeOptions {
        let valueDeserializer : Deserializer = this
        const start_result : boolean = valueDeserializer.readBoolean()
        const step_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let step_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (step_buf_runtimeType))
        {
            step_buf = (valueDeserializer.readNumber() as number)
        }
        const step_result : number | undefined = step_buf
        const loop_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let loop_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (loop_buf_runtimeType))
        {
            loop_buf = (valueDeserializer.readNumber() as number)
        }
        const loop_result : number | undefined = loop_buf
        const fromStart_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fromStart_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (fromStart_buf_runtimeType))
        {
            fromStart_buf = valueDeserializer.readBoolean()
        }
        const fromStart_result : boolean | undefined = fromStart_buf
        const src_result : string = (valueDeserializer.readString() as string)
        let value : MarqueeOptions = ({start: start_result, step: step_result, loop: loop_result, fromStart: fromStart_result, src: src_result} as MarqueeOptions)
        return value
    }
    readMatrix2D(): Matrix2D {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return Matrix2DInternal.fromPtr(ptr)
    }
    readMeasurable(): Measurable {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return MeasurableInternal.fromPtr(ptr)
    }
    readMeasureResult(): MeasureResult {
        let valueDeserializer : Deserializer = this
        const width_result : number = (valueDeserializer.readNumber() as number)
        const height_result : number = (valueDeserializer.readNumber() as number)
        let value : MeasureResult = ({width: width_result, height: height_result} as MeasureResult)
        return value
    }
    readMessageEvents(): MessageEvents {
        let valueDeserializer : Deserializer = this
        const type_result : string = (valueDeserializer.readString() as string)
        const timeStamp_result : int64 = valueDeserializer.readInt64()
        const data_result : object = (valueDeserializer.readObject() as object)
        let value : MessageEvents = ({type: type_result, timeStamp: timeStamp_result, data: data_result} as MessageEvents)
        return value
    }
    readMonthData(): MonthData {
        let valueDeserializer : Deserializer = this
        const year_result : number = (valueDeserializer.readNumber() as number)
        const month_result : number = (valueDeserializer.readNumber() as number)
        const data_buf_length : int32 = valueDeserializer.readInt32()
        let data_buf : Array<CalendarDay> = new Array<CalendarDay>(data_buf_length)
        for (let data_buf_i = 0; data_buf_i < data_buf_length; data_buf_i++) {
            data_buf[data_buf_i] = valueDeserializer.readCalendarDay()
        }
        const data_result : Array<CalendarDay> = data_buf
        let value : MonthData = ({year: year_result, month: month_result, data: data_result} as MonthData)
        return value
    }
    readMotionBlurAnchor(): MotionBlurAnchor {
        let valueDeserializer : Deserializer = this
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        let value : MotionBlurAnchor = ({x: x_result, y: y_result} as MotionBlurAnchor)
        return value
    }
    readMotionBlurOptions(): MotionBlurOptions {
        let valueDeserializer : Deserializer = this
        const radius_result : number = (valueDeserializer.readNumber() as number)
        const anchor_result : MotionBlurAnchor = valueDeserializer.readMotionBlurAnchor()
        let value : MotionBlurOptions = ({radius: radius_result, anchor: anchor_result} as MotionBlurOptions)
        return value
    }
    readMotionPathOptions(): MotionPathOptions {
        let valueDeserializer : Deserializer = this
        const path_result : string = (valueDeserializer.readString() as string)
        const from_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let from_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (from_buf_runtimeType))
        {
            from_buf = (valueDeserializer.readNumber() as number)
        }
        const from_result : number | undefined = from_buf
        const to_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let to_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (to_buf_runtimeType))
        {
            to_buf = (valueDeserializer.readNumber() as number)
        }
        const to_result : number | undefined = to_buf
        const rotatable_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let rotatable_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (rotatable_buf_runtimeType))
        {
            rotatable_buf = valueDeserializer.readBoolean()
        }
        const rotatable_result : boolean | undefined = rotatable_buf
        let value : MotionPathOptions = ({path: path_result, from: from_result, to: to_result, rotatable: rotatable_result} as MotionPathOptions)
        return value
    }
    readMutableStyledString(): MutableStyledString {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return MutableStyledStringInternal.fromPtr(ptr)
    }
    readNativeEmbedVisibilityInfo(): NativeEmbedVisibilityInfo {
        let valueDeserializer : Deserializer = this
        const visibility_result : boolean = valueDeserializer.readBoolean()
        const embedId_result : string = (valueDeserializer.readString() as string)
        let value : NativeEmbedVisibilityInfo = ({visibility: visibility_result, embedId: embedId_result} as NativeEmbedVisibilityInfo)
        return value
    }
    readNavContentInfo(): NavContentInfo {
        let valueDeserializer : Deserializer = this
        const name_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let name_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (name_buf_runtimeType))
        {
            name_buf = (valueDeserializer.readString() as string)
        }
        const name_result : string | undefined = name_buf
        const index_result : number = (valueDeserializer.readNumber() as number)
        const mode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let mode_buf : NavDestinationMode | undefined
        if ((RuntimeType.UNDEFINED) != (mode_buf_runtimeType))
        {
            mode_buf = TypeChecker.NavDestinationMode_FromNumeric(valueDeserializer.readInt32())
        }
        const mode_result : NavDestinationMode | undefined = mode_buf
        const param_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let param_buf : Object | undefined
        if ((RuntimeType.UNDEFINED) != (param_buf_runtimeType))
        {
            param_buf = (valueDeserializer.readObject() as Object)
        }
        const param_result : Object | undefined = param_buf
        const navDestinationId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let navDestinationId_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (navDestinationId_buf_runtimeType))
        {
            navDestinationId_buf = (valueDeserializer.readString() as string)
        }
        const navDestinationId_result : string | undefined = navDestinationId_buf
        let value : NavContentInfo = ({name: name_result, index: index_result, mode: mode_result, param: param_result, navDestinationId: navDestinationId_result} as NavContentInfo)
        return value
    }
    readNavDestinationCustomTitle(): NavDestinationCustomTitle {
        let valueDeserializer : Deserializer = this
        const builder_result : CustomBuilder = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        const height_buf_selector : int32 = valueDeserializer.readInt8()
        let height_buf : TitleHeight | Length | undefined
        if (height_buf_selector == 0) {
            height_buf = TypeChecker.TitleHeight_FromNumeric(valueDeserializer.readInt32())
        }
        else if (height_buf_selector == 1) {
            height_buf = (valueDeserializer.readLength() as Length)
        }
        else {
            throw new Error("One of the branches for height_buf has to be chosen through deserialisation.")
        }
        const height_result : TitleHeight | Length = (height_buf as TitleHeight | Length)
        let value : NavDestinationCustomTitle = ({builder: builder_result, height: height_result} as NavDestinationCustomTitle)
        return value
    }
    readNavDestinationTransition(): NavDestinationTransition {
        let valueDeserializer : Deserializer = this
        const onTransitionEnd_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onTransitionEnd_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onTransitionEnd_buf_runtimeType))
        {
            onTransitionEnd_buf = valueDeserializer.readCallback_Void()
        }
        const onTransitionEnd_result : (() => void) | undefined = onTransitionEnd_buf
        const duration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let duration_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (duration_buf_runtimeType))
        {
            duration_buf = (valueDeserializer.readNumber() as number)
        }
        const duration_result : number | undefined = duration_buf
        const curve_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let curve_buf : Curve | undefined
        if ((RuntimeType.UNDEFINED) != (curve_buf_runtimeType))
        {
            curve_buf = TypeChecker.Curve_FromNumeric(valueDeserializer.readInt32())
        }
        const curve_result : Curve | undefined = curve_buf
        const delay_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let delay_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (delay_buf_runtimeType))
        {
            delay_buf = (valueDeserializer.readNumber() as number)
        }
        const delay_result : number | undefined = delay_buf
        const event_result : (() => void) = valueDeserializer.readCallback_Void()
        let value : NavDestinationTransition = ({onTransitionEnd: onTransitionEnd_result, duration: duration_result, curve: curve_result, delay: delay_result, event: event_result} as NavDestinationTransition)
        return value
    }
    readNavigationAnimatedTransition(): NavigationAnimatedTransition {
        let valueDeserializer : Deserializer = this
        const onTransitionEnd_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onTransitionEnd_buf : ((isVisible: boolean) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onTransitionEnd_buf_runtimeType))
        {
            onTransitionEnd_buf = valueDeserializer.readCallback_Boolean_Void()
        }
        const onTransitionEnd_result : ((isVisible: boolean) => void) | undefined = onTransitionEnd_buf
        const timeout_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let timeout_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (timeout_buf_runtimeType))
        {
            timeout_buf = (valueDeserializer.readNumber() as number)
        }
        const timeout_result : number | undefined = timeout_buf
        const isInteractive_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isInteractive_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isInteractive_buf_runtimeType))
        {
            isInteractive_buf = valueDeserializer.readBoolean()
        }
        const isInteractive_result : boolean | undefined = isInteractive_buf
        const transition_result : ((transitionProxy: NavigationTransitionProxy) => void) = valueDeserializer.readCallback_NavigationTransitionProxy_Void()
        let value : NavigationAnimatedTransition = ({onTransitionEnd: onTransitionEnd_result, timeout: timeout_result, isInteractive: isInteractive_result, transition: transition_result} as NavigationAnimatedTransition)
        return value
    }
    readNavigationCustomTitle(): NavigationCustomTitle {
        let valueDeserializer : Deserializer = this
        const builder_result : CustomBuilder = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        const height_buf_selector : int32 = valueDeserializer.readInt8()
        let height_buf : TitleHeight | Length | undefined
        if (height_buf_selector == 0) {
            height_buf = TypeChecker.TitleHeight_FromNumeric(valueDeserializer.readInt32())
        }
        else if (height_buf_selector == 1) {
            height_buf = (valueDeserializer.readLength() as Length)
        }
        else {
            throw new Error("One of the branches for height_buf has to be chosen through deserialisation.")
        }
        const height_result : TitleHeight | Length = (height_buf as TitleHeight | Length)
        let value : NavigationCustomTitle = ({builder: builder_result, height: height_result} as NavigationCustomTitle)
        return value
    }
    readNavigationInterception(): NavigationInterception {
        let valueDeserializer : Deserializer = this
        const willShow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let willShow_buf : InterceptionShowCallback | undefined
        if ((RuntimeType.UNDEFINED) != (willShow_buf_runtimeType))
        {
            willShow_buf = valueDeserializer.readInterceptionShowCallback()
        }
        const willShow_result : InterceptionShowCallback | undefined = willShow_buf
        const didShow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let didShow_buf : InterceptionShowCallback | undefined
        if ((RuntimeType.UNDEFINED) != (didShow_buf_runtimeType))
        {
            didShow_buf = valueDeserializer.readInterceptionShowCallback()
        }
        const didShow_result : InterceptionShowCallback | undefined = didShow_buf
        const modeChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let modeChange_buf : InterceptionModeCallback | undefined
        if ((RuntimeType.UNDEFINED) != (modeChange_buf_runtimeType))
        {
            modeChange_buf = valueDeserializer.readInterceptionModeCallback()
        }
        const modeChange_result : InterceptionModeCallback | undefined = modeChange_buf
        let value : NavigationInterception = ({willShow: willShow_result, didShow: didShow_result, modeChange: modeChange_result} as NavigationInterception)
        return value
    }
    readNavigationOptions(): NavigationOptions {
        let valueDeserializer : Deserializer = this
        const launchMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let launchMode_buf : LaunchMode | undefined
        if ((RuntimeType.UNDEFINED) != (launchMode_buf_runtimeType))
        {
            launchMode_buf = TypeChecker.LaunchMode_FromNumeric(valueDeserializer.readInt32())
        }
        const launchMode_result : LaunchMode | undefined = launchMode_buf
        const animated_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let animated_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (animated_buf_runtimeType))
        {
            animated_buf = valueDeserializer.readBoolean()
        }
        const animated_result : boolean | undefined = animated_buf
        let value : NavigationOptions = ({launchMode: launchMode_result, animated: animated_result} as NavigationOptions)
        return value
    }
    readNavigationTransitionProxy(): NavigationTransitionProxy {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return NavigationTransitionProxyInternal.fromPtr(ptr)
    }
    readNavPathInfo(): NavPathInfo {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return NavPathInfoInternal.fromPtr(ptr)
    }
    readNestedScrollInfo(): NestedScrollInfo {
        let valueDeserializer : Deserializer = this
        const parent_result : Scroller = (valueDeserializer.readScroller() as Scroller)
        const child_result : Scroller = (valueDeserializer.readScroller() as Scroller)
        let value : NestedScrollInfo = ({parent: parent_result, child: child_result} as NestedScrollInfo)
        return value
    }
    readNestedScrollOptionsExt(): NestedScrollOptionsExt {
        let valueDeserializer : Deserializer = this
        const scrollUp_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scrollUp_buf : NestedScrollMode | undefined
        if ((RuntimeType.UNDEFINED) != (scrollUp_buf_runtimeType))
        {
            scrollUp_buf = TypeChecker.NestedScrollMode_FromNumeric(valueDeserializer.readInt32())
        }
        const scrollUp_result : NestedScrollMode | undefined = scrollUp_buf
        const scrollDown_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scrollDown_buf : NestedScrollMode | undefined
        if ((RuntimeType.UNDEFINED) != (scrollDown_buf_runtimeType))
        {
            scrollDown_buf = TypeChecker.NestedScrollMode_FromNumeric(valueDeserializer.readInt32())
        }
        const scrollDown_result : NestedScrollMode | undefined = scrollDown_buf
        const scrollRight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scrollRight_buf : NestedScrollMode | undefined
        if ((RuntimeType.UNDEFINED) != (scrollRight_buf_runtimeType))
        {
            scrollRight_buf = TypeChecker.NestedScrollMode_FromNumeric(valueDeserializer.readInt32())
        }
        const scrollRight_result : NestedScrollMode | undefined = scrollRight_buf
        const scrollLeft_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scrollLeft_buf : NestedScrollMode | undefined
        if ((RuntimeType.UNDEFINED) != (scrollLeft_buf_runtimeType))
        {
            scrollLeft_buf = TypeChecker.NestedScrollMode_FromNumeric(valueDeserializer.readInt32())
        }
        const scrollLeft_result : NestedScrollMode | undefined = scrollLeft_buf
        let value : NestedScrollOptionsExt = ({scrollUp: scrollUp_result, scrollDown: scrollDown_result, scrollRight: scrollRight_result, scrollLeft: scrollLeft_result} as NestedScrollOptionsExt)
        return value
    }
    readOffsetOptions(): OffsetOptions {
        let valueDeserializer : Deserializer = this
        const xOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let xOffset_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (xOffset_buf_runtimeType))
        {
            xOffset_buf = (valueDeserializer.readLength() as Dimension)
        }
        const xOffset_result : Dimension | undefined = xOffset_buf
        const yOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let yOffset_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (yOffset_buf_runtimeType))
        {
            yOffset_buf = (valueDeserializer.readLength() as Dimension)
        }
        const yOffset_result : Dimension | undefined = yOffset_buf
        let value : OffsetOptions = ({xOffset: xOffset_result, yOffset: yOffset_result} as OffsetOptions)
        return value
    }
    readOnAlertEvent(): OnAlertEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        const message_result : string = (valueDeserializer.readString() as string)
        const result_result : JsResult = (valueDeserializer.readJsResult() as JsResult)
        let value : OnAlertEvent = ({url: url_result, message: message_result, result: result_result} as OnAlertEvent)
        return value
    }
    readOnBeforeUnloadEvent(): OnBeforeUnloadEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        const message_result : string = (valueDeserializer.readString() as string)
        const result_result : JsResult = (valueDeserializer.readJsResult() as JsResult)
        let value : OnBeforeUnloadEvent = ({url: url_result, message: message_result, result: result_result} as OnBeforeUnloadEvent)
        return value
    }
    readOnClientAuthenticationEvent(): OnClientAuthenticationEvent {
        let valueDeserializer : Deserializer = this
        const handler_result : ClientAuthenticationHandler = (valueDeserializer.readClientAuthenticationHandler() as ClientAuthenticationHandler)
        const host_result : string = (valueDeserializer.readString() as string)
        const port_result : number = (valueDeserializer.readNumber() as number)
        const keyTypes_buf_length : int32 = valueDeserializer.readInt32()
        let keyTypes_buf : Array<string> = new Array<string>(keyTypes_buf_length)
        for (let keyTypes_buf_i = 0; keyTypes_buf_i < keyTypes_buf_length; keyTypes_buf_i++) {
            keyTypes_buf[keyTypes_buf_i] = (valueDeserializer.readString() as string)
        }
        const keyTypes_result : Array<string> = keyTypes_buf
        const issuers_buf_length : int32 = valueDeserializer.readInt32()
        let issuers_buf : Array<string> = new Array<string>(issuers_buf_length)
        for (let issuers_buf_i = 0; issuers_buf_i < issuers_buf_length; issuers_buf_i++) {
            issuers_buf[issuers_buf_i] = (valueDeserializer.readString() as string)
        }
        const issuers_result : Array<string> = issuers_buf
        let value : OnClientAuthenticationEvent = ({handler: handler_result, host: host_result, port: port_result, keyTypes: keyTypes_result, issuers: issuers_result} as OnClientAuthenticationEvent)
        return value
    }
    readOnConfirmEvent(): OnConfirmEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        const message_result : string = (valueDeserializer.readString() as string)
        const result_result : JsResult = (valueDeserializer.readJsResult() as JsResult)
        let value : OnConfirmEvent = ({url: url_result, message: message_result, result: result_result} as OnConfirmEvent)
        return value
    }
    readOnContextMenuShowEvent(): OnContextMenuShowEvent {
        let valueDeserializer : Deserializer = this
        const param_result : WebContextMenuParam = (valueDeserializer.readWebContextMenuParam() as WebContextMenuParam)
        const result_result : WebContextMenuResult = (valueDeserializer.readWebContextMenuResult() as WebContextMenuResult)
        let value : OnContextMenuShowEvent = ({param: param_result, result: result_result} as OnContextMenuShowEvent)
        return value
    }
    readOnDownloadStartEvent(): OnDownloadStartEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        const userAgent_result : string = (valueDeserializer.readString() as string)
        const contentDisposition_result : string = (valueDeserializer.readString() as string)
        const mimetype_result : string = (valueDeserializer.readString() as string)
        const contentLength_result : number = (valueDeserializer.readNumber() as number)
        let value : OnDownloadStartEvent = ({url: url_result, userAgent: userAgent_result, contentDisposition: contentDisposition_result, mimetype: mimetype_result, contentLength: contentLength_result} as OnDownloadStartEvent)
        return value
    }
    readOnErrorReceiveEvent(): OnErrorReceiveEvent {
        let valueDeserializer : Deserializer = this
        const request_result : WebResourceRequest = (valueDeserializer.readWebResourceRequest() as WebResourceRequest)
        const error_result : WebResourceError = (valueDeserializer.readWebResourceError() as WebResourceError)
        let value : OnErrorReceiveEvent = ({request: request_result, error: error_result} as OnErrorReceiveEvent)
        return value
    }
    readOnFaviconReceivedEvent(): OnFaviconReceivedEvent {
        let valueDeserializer : Deserializer = this
        const favicon_result : PixelMap = (valueDeserializer.readPixelMap() as PixelMap)
        let value : OnFaviconReceivedEvent = ({favicon: favicon_result} as OnFaviconReceivedEvent)
        return value
    }
    readOnGeolocationShowEvent(): OnGeolocationShowEvent {
        let valueDeserializer : Deserializer = this
        const origin_result : string = (valueDeserializer.readString() as string)
        const geolocation_result : JsGeolocation = (valueDeserializer.readJsGeolocation() as JsGeolocation)
        let value : OnGeolocationShowEvent = ({origin: origin_result, geolocation: geolocation_result} as OnGeolocationShowEvent)
        return value
    }
    readOnHttpAuthRequestEvent(): OnHttpAuthRequestEvent {
        let valueDeserializer : Deserializer = this
        const handler_result : HttpAuthHandler = (valueDeserializer.readHttpAuthHandler() as HttpAuthHandler)
        const host_result : string = (valueDeserializer.readString() as string)
        const realm_result : string = (valueDeserializer.readString() as string)
        let value : OnHttpAuthRequestEvent = ({handler: handler_result, host: host_result, realm: realm_result} as OnHttpAuthRequestEvent)
        return value
    }
    readOnHttpErrorReceiveEvent(): OnHttpErrorReceiveEvent {
        let valueDeserializer : Deserializer = this
        const request_result : WebResourceRequest = (valueDeserializer.readWebResourceRequest() as WebResourceRequest)
        const response_result : WebResourceResponse = (valueDeserializer.readWebResourceResponse() as WebResourceResponse)
        let value : OnHttpErrorReceiveEvent = ({request: request_result, response: response_result} as OnHttpErrorReceiveEvent)
        return value
    }
    readOnInterceptRequestEvent(): OnInterceptRequestEvent {
        let valueDeserializer : Deserializer = this
        const request_result : WebResourceRequest = (valueDeserializer.readWebResourceRequest() as WebResourceRequest)
        let value : OnInterceptRequestEvent = ({request: request_result} as OnInterceptRequestEvent)
        return value
    }
    readOnLoadInterceptEvent(): OnLoadInterceptEvent {
        let valueDeserializer : Deserializer = this
        const data_result : WebResourceRequest = (valueDeserializer.readWebResourceRequest() as WebResourceRequest)
        let value : OnLoadInterceptEvent = ({data: data_result} as OnLoadInterceptEvent)
        return value
    }
    readOnPageBeginEvent(): OnPageBeginEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        let value : OnPageBeginEvent = ({url: url_result} as OnPageBeginEvent)
        return value
    }
    readOnPageEndEvent(): OnPageEndEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        let value : OnPageEndEvent = ({url: url_result} as OnPageEndEvent)
        return value
    }
    readOnPageVisibleEvent(): OnPageVisibleEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        let value : OnPageVisibleEvent = ({url: url_result} as OnPageVisibleEvent)
        return value
    }
    readOnPermissionRequestEvent(): OnPermissionRequestEvent {
        let valueDeserializer : Deserializer = this
        const request_result : PermissionRequest = (valueDeserializer.readPermissionRequest() as PermissionRequest)
        let value : OnPermissionRequestEvent = ({request: request_result} as OnPermissionRequestEvent)
        return value
    }
    readOnPromptEvent(): OnPromptEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        const message_result : string = (valueDeserializer.readString() as string)
        const value_result : string = (valueDeserializer.readString() as string)
        const result_result : JsResult = (valueDeserializer.readJsResult() as JsResult)
        let value : OnPromptEvent = ({url: url_result, message: message_result, value: value_result, result: result_result} as OnPromptEvent)
        return value
    }
    readOnRefreshAccessedHistoryEvent(): OnRefreshAccessedHistoryEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        const isRefreshed_result : boolean = valueDeserializer.readBoolean()
        let value : OnRefreshAccessedHistoryEvent = ({url: url_result, isRefreshed: isRefreshed_result} as OnRefreshAccessedHistoryEvent)
        return value
    }
    readOnRenderExitedEvent(): OnRenderExitedEvent {
        let valueDeserializer : Deserializer = this
        const renderExitReason_result : RenderExitReason = TypeChecker.RenderExitReason_FromNumeric(valueDeserializer.readInt32())
        let value : OnRenderExitedEvent = ({renderExitReason: renderExitReason_result} as OnRenderExitedEvent)
        return value
    }
    readOnResourceLoadEvent(): OnResourceLoadEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        let value : OnResourceLoadEvent = ({url: url_result} as OnResourceLoadEvent)
        return value
    }
    readOnScreenCaptureRequestEvent(): OnScreenCaptureRequestEvent {
        let valueDeserializer : Deserializer = this
        const handler_result : ScreenCaptureHandler = (valueDeserializer.readScreenCaptureHandler() as ScreenCaptureHandler)
        let value : OnScreenCaptureRequestEvent = ({handler: handler_result} as OnScreenCaptureRequestEvent)
        return value
    }
    readOnSslErrorEventReceiveEvent(): OnSslErrorEventReceiveEvent {
        let valueDeserializer : Deserializer = this
        const handler_result : SslErrorHandler = (valueDeserializer.readSslErrorHandler() as SslErrorHandler)
        const error_result : SslError = TypeChecker.SslError_FromNumeric(valueDeserializer.readInt32())
        const certChainData_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let certChainData_buf : Array<NativeBuffer> | undefined
        if ((RuntimeType.UNDEFINED) != (certChainData_buf_runtimeType))
        {
            const certChainData_buf__length : int32 = valueDeserializer.readInt32()
            let certChainData_buf_ : Array<NativeBuffer> = new Array<NativeBuffer>(certChainData_buf__length)
            for (let certChainData_buf__i = 0; certChainData_buf__i < certChainData_buf__length; certChainData_buf__i++) {
                certChainData_buf_[certChainData_buf__i] = (valueDeserializer.readBuffer() as NativeBuffer)
            }
            certChainData_buf = certChainData_buf_
        }
        const certChainData_result : Array<NativeBuffer> | undefined = certChainData_buf
        let value : OnSslErrorEventReceiveEvent = ({handler: handler_result, error: error_result, certChainData: certChainData_result} as OnSslErrorEventReceiveEvent)
        return value
    }
    readOnTitleReceiveEvent(): OnTitleReceiveEvent {
        let valueDeserializer : Deserializer = this
        const title_result : string = (valueDeserializer.readString() as string)
        let value : OnTitleReceiveEvent = ({title: title_result} as OnTitleReceiveEvent)
        return value
    }
    readOnTouchIconUrlReceivedEvent(): OnTouchIconUrlReceivedEvent {
        let valueDeserializer : Deserializer = this
        const url_result : string = (valueDeserializer.readString() as string)
        const precomposed_result : boolean = valueDeserializer.readBoolean()
        let value : OnTouchIconUrlReceivedEvent = ({url: url_result, precomposed: precomposed_result} as OnTouchIconUrlReceivedEvent)
        return value
    }
    readOnWindowNewEvent(): OnWindowNewEvent {
        let valueDeserializer : Deserializer = this
        const isAlert_result : boolean = valueDeserializer.readBoolean()
        const isUserTrigger_result : boolean = valueDeserializer.readBoolean()
        const targetUrl_result : string = (valueDeserializer.readString() as string)
        const handler_result : ControllerHandler = (valueDeserializer.readControllerHandler() as ControllerHandler)
        let value : OnWindowNewEvent = ({isAlert: isAlert_result, isUserTrigger: isUserTrigger_result, targetUrl: targetUrl_result, handler: handler_result} as OnWindowNewEvent)
        return value
    }
    readOrientation(): Orientation {
        let valueDeserializer : Deserializer = this
        const _OrientationStub_result : string = (valueDeserializer.readString() as string)
        let value : Orientation = ({_OrientationStub: _OrientationStub_result} as Orientation)
        return value
    }
    readOutlineRadiuses(): OutlineRadiuses {
        let valueDeserializer : Deserializer = this
        const topLeft_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let topLeft_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (topLeft_buf_runtimeType))
        {
            topLeft_buf = (valueDeserializer.readLength() as Dimension)
        }
        const topLeft_result : Dimension | undefined = topLeft_buf
        const topRight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let topRight_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (topRight_buf_runtimeType))
        {
            topRight_buf = (valueDeserializer.readLength() as Dimension)
        }
        const topRight_result : Dimension | undefined = topRight_buf
        const bottomLeft_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottomLeft_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (bottomLeft_buf_runtimeType))
        {
            bottomLeft_buf = (valueDeserializer.readLength() as Dimension)
        }
        const bottomLeft_result : Dimension | undefined = bottomLeft_buf
        const bottomRight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottomRight_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (bottomRight_buf_runtimeType))
        {
            bottomRight_buf = (valueDeserializer.readLength() as Dimension)
        }
        const bottomRight_result : Dimension | undefined = bottomRight_buf
        let value : OutlineRadiuses = ({topLeft: topLeft_result, topRight: topRight_result, bottomLeft: bottomLeft_result, bottomRight: bottomRight_result} as OutlineRadiuses)
        return value
    }
    readOverlayOffset(): OverlayOffset {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            x_buf = (valueDeserializer.readNumber() as number)
        }
        const x_result : number | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            y_buf = (valueDeserializer.readNumber() as number)
        }
        const y_result : number | undefined = y_buf
        let value : OverlayOffset = ({x: x_result, y: y_result} as OverlayOffset)
        return value
    }
    readPadding(): Padding {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLength() as Length)
        }
        const top_result : Length | undefined = top_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = (valueDeserializer.readLength() as Length)
        }
        const right_result : Length | undefined = right_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readLength() as Length)
        }
        const bottom_result : Length | undefined = bottom_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = (valueDeserializer.readLength() as Length)
        }
        const left_result : Length | undefined = left_buf
        let value : Padding = ({top: top_result, right: right_result, bottom: bottom_result, left: left_result} as Padding)
        return value
    }
    readPanGestureHandlerOptions(): PanGestureHandlerOptions {
        let valueDeserializer : Deserializer = this
        const isFingerCountLimited_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isFingerCountLimited_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isFingerCountLimited_buf_runtimeType))
        {
            isFingerCountLimited_buf = valueDeserializer.readBoolean()
        }
        const isFingerCountLimited_result : boolean | undefined = isFingerCountLimited_buf
        const fingers_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fingers_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (fingers_buf_runtimeType))
        {
            fingers_buf = (valueDeserializer.readNumber() as number)
        }
        const fingers_result : number | undefined = fingers_buf
        const direction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let direction_buf : PanDirection | undefined
        if ((RuntimeType.UNDEFINED) != (direction_buf_runtimeType))
        {
            direction_buf = TypeChecker.PanDirection_FromNumeric(valueDeserializer.readInt32())
        }
        const direction_result : PanDirection | undefined = direction_buf
        const distance_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let distance_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (distance_buf_runtimeType))
        {
            distance_buf = (valueDeserializer.readNumber() as number)
        }
        const distance_result : number | undefined = distance_buf
        let value : PanGestureHandlerOptions = ({isFingerCountLimited: isFingerCountLimited_result, fingers: fingers_result, direction: direction_result, distance: distance_result} as PanGestureHandlerOptions)
        return value
    }
    readPasteButtonOptions(): PasteButtonOptions {
        let valueDeserializer : Deserializer = this
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : PasteIconStyle | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            icon_buf = TypeChecker.PasteIconStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const icon_result : PasteIconStyle | undefined = icon_buf
        const text_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let text_buf : PasteDescription | undefined
        if ((RuntimeType.UNDEFINED) != (text_buf_runtimeType))
        {
            text_buf = TypeChecker.PasteDescription_FromNumeric(valueDeserializer.readInt32())
        }
        const text_result : PasteDescription | undefined = text_buf
        const buttonType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let buttonType_buf : ButtonType | undefined
        if ((RuntimeType.UNDEFINED) != (buttonType_buf_runtimeType))
        {
            buttonType_buf = TypeChecker.ButtonType_FromNumeric(valueDeserializer.readInt32())
        }
        const buttonType_result : ButtonType | undefined = buttonType_buf
        let value : PasteButtonOptions = ({icon: icon_result, text: text_result, buttonType: buttonType_result} as PasteButtonOptions)
        return value
    }
    readPasteEvent(): PasteEvent {
        let valueDeserializer : Deserializer = this
        const preventDefault_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let preventDefault_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (preventDefault_buf_runtimeType))
        {
            preventDefault_buf = valueDeserializer.readCallback_Void()
        }
        const preventDefault_result : (() => void) | undefined = preventDefault_buf
        let value : PasteEvent = ({preventDefault: preventDefault_result} as PasteEvent)
        return value
    }
    readPathOptions(): PathOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : number | string | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as number | string)
        }
        const width_result : number | string | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : number | string | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as number | string)
        }
        const height_result : number | string | undefined = height_buf
        const commands_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let commands_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (commands_buf_runtimeType))
        {
            commands_buf = (valueDeserializer.readString() as string)
        }
        const commands_result : string | undefined = commands_buf
        let value : PathOptions = ({width: width_result, height: height_result, commands: commands_result} as PathOptions)
        return value
    }
    readPathShapeOptions(): PathShapeOptions {
        let valueDeserializer : Deserializer = this
        const commands_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let commands_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (commands_buf_runtimeType))
        {
            commands_buf = (valueDeserializer.readString() as string)
        }
        const commands_result : string | undefined = commands_buf
        let value : PathShapeOptions = ({commands: commands_result} as PathShapeOptions)
        return value
    }
    readPinchGestureHandlerOptions(): PinchGestureHandlerOptions {
        let valueDeserializer : Deserializer = this
        const isFingerCountLimited_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isFingerCountLimited_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isFingerCountLimited_buf_runtimeType))
        {
            isFingerCountLimited_buf = valueDeserializer.readBoolean()
        }
        const isFingerCountLimited_result : boolean | undefined = isFingerCountLimited_buf
        const fingers_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fingers_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (fingers_buf_runtimeType))
        {
            fingers_buf = (valueDeserializer.readNumber() as number)
        }
        const fingers_result : number | undefined = fingers_buf
        const distance_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let distance_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (distance_buf_runtimeType))
        {
            distance_buf = (valueDeserializer.readNumber() as number)
        }
        const distance_result : number | undefined = distance_buf
        let value : PinchGestureHandlerOptions = ({isFingerCountLimited: isFingerCountLimited_result, fingers: fingers_result, distance: distance_result} as PinchGestureHandlerOptions)
        return value
    }
    readPixelRoundPolicy(): PixelRoundPolicy {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : PixelRoundCalcPolicy | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = TypeChecker.PixelRoundCalcPolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const start_result : PixelRoundCalcPolicy | undefined = start_buf
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : PixelRoundCalcPolicy | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = TypeChecker.PixelRoundCalcPolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const top_result : PixelRoundCalcPolicy | undefined = top_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : PixelRoundCalcPolicy | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = TypeChecker.PixelRoundCalcPolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const end_result : PixelRoundCalcPolicy | undefined = end_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : PixelRoundCalcPolicy | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = TypeChecker.PixelRoundCalcPolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const bottom_result : PixelRoundCalcPolicy | undefined = bottom_buf
        let value : PixelRoundPolicy = ({start: start_result, top: top_result, end: end_result, bottom: bottom_result} as PixelRoundPolicy)
        return value
    }
    readPixelStretchEffectOptions(): PixelStretchEffectOptions {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLength() as Length)
        }
        const top_result : Length | undefined = top_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readLength() as Length)
        }
        const bottom_result : Length | undefined = bottom_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = (valueDeserializer.readLength() as Length)
        }
        const left_result : Length | undefined = left_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = (valueDeserializer.readLength() as Length)
        }
        const right_result : Length | undefined = right_buf
        let value : PixelStretchEffectOptions = ({top: top_result, bottom: bottom_result, left: left_result, right: right_result} as PixelStretchEffectOptions)
        return value
    }
    readPluginComponentTemplate(): PluginComponentTemplate {
        let valueDeserializer : Deserializer = this
        const source_result : string = (valueDeserializer.readString() as string)
        const bundleName_result : string = (valueDeserializer.readString() as string)
        let value : PluginComponentTemplate = ({source: source_result, bundleName: bundleName_result} as PluginComponentTemplate)
        return value
    }
    readPluginErrorData(): PluginErrorData {
        let valueDeserializer : Deserializer = this
        const errcode_result : number = (valueDeserializer.readNumber() as number)
        const msg_result : string = (valueDeserializer.readString() as string)
        let value : PluginErrorData = ({errcode: errcode_result, msg: msg_result} as PluginErrorData)
        return value
    }
    readPolygonOptions(): PolygonOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : string | number | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as string | number)
        }
        const width_result : string | number | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : string | number | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as string | number)
        }
        const height_result : string | number | undefined = height_buf
        let value : PolygonOptions = ({width: width_result, height: height_result} as PolygonOptions)
        return value
    }
    readPolylineOptions(): PolylineOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : string | number | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as string | number)
        }
        const width_result : string | number | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : string | number | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as string | number)
        }
        const height_result : string | number | undefined = height_buf
        let value : PolylineOptions = ({width: width_result, height: height_result} as PolylineOptions)
        return value
    }
    readPolyToPolyOptions(): PolyToPolyOptions {
        let valueDeserializer : Deserializer = this
        const src_buf_length : int32 = valueDeserializer.readInt32()
        let src_buf : Array<Point> = new Array<Point>(src_buf_length)
        for (let src_buf_i = 0; src_buf_i < src_buf_length; src_buf_i++) {
            src_buf[src_buf_i] = valueDeserializer.readPoint()
        }
        const src_result : Array<Point> = src_buf
        const srcIndex_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let srcIndex_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (srcIndex_buf_runtimeType))
        {
            srcIndex_buf = (valueDeserializer.readNumber() as number)
        }
        const srcIndex_result : number | undefined = srcIndex_buf
        const dst_buf_length : int32 = valueDeserializer.readInt32()
        let dst_buf : Array<Point> = new Array<Point>(dst_buf_length)
        for (let dst_buf_i = 0; dst_buf_i < dst_buf_length; dst_buf_i++) {
            dst_buf[dst_buf_i] = valueDeserializer.readPoint()
        }
        const dst_result : Array<Point> = dst_buf
        const dstIndex_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dstIndex_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (dstIndex_buf_runtimeType))
        {
            dstIndex_buf = (valueDeserializer.readNumber() as number)
        }
        const dstIndex_result : number | undefined = dstIndex_buf
        const pointCount_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let pointCount_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (pointCount_buf_runtimeType))
        {
            pointCount_buf = (valueDeserializer.readNumber() as number)
        }
        const pointCount_result : number | undefined = pointCount_buf
        let value : PolyToPolyOptions = ({src: src_result, srcIndex: srcIndex_result, dst: dst_result, dstIndex: dstIndex_result, pointCount: pointCount_result} as PolyToPolyOptions)
        return value
    }
    readPopInfo(): PopInfo {
        let valueDeserializer : Deserializer = this
        const info_result : NavPathInfo = (valueDeserializer.readNavPathInfo() as NavPathInfo)
        const result_result : Object = (valueDeserializer.readObject() as Object)
        let value : PopInfo = ({info: info_result, result: result_result} as PopInfo)
        return value
    }
    readPosition(): Position {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            x_buf = (valueDeserializer.readLength() as Length)
        }
        const x_result : Length | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            y_buf = (valueDeserializer.readLength() as Length)
        }
        const y_result : Length | undefined = y_buf
        let value : Position = ({x: x_result, y: y_result} as Position)
        return value
    }
    readGraphicsPosition(): GraphicsPosition {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            x_buf = (valueDeserializer.readLength() as Length)
        }
        const x_result : Length | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            y_buf = (valueDeserializer.readLength() as Length)
        }
        const y_result : Length | undefined = y_buf
        let value: GraphicsPosition = ({ x: x_result as number, y: y_result as number } as GraphicsPosition)
        return value
    }
    readPosterOptions(): PosterOptions {
        let valueDeserializer : Deserializer = this
        const showFirstFrame_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showFirstFrame_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showFirstFrame_buf_runtimeType))
        {
            showFirstFrame_buf = valueDeserializer.readBoolean()
        }
        const showFirstFrame_result : boolean | undefined = showFirstFrame_buf
        let value : PosterOptions = ({showFirstFrame: showFirstFrame_result} as PosterOptions)
        return value
    }
    readPostMessageOptions(): PostMessageOptions {
        let valueDeserializer : Deserializer = this
        const transfer_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transfer_buf : Array<Object> | undefined
        if ((RuntimeType.UNDEFINED) != (transfer_buf_runtimeType))
        {
            const transfer_buf__length : int32 = valueDeserializer.readInt32()
            let transfer_buf_ : Array<Object> = new Array<Object>(transfer_buf__length)
            for (let transfer_buf__i = 0; transfer_buf__i < transfer_buf__length; transfer_buf__i++) {
                transfer_buf_[transfer_buf__i] = (valueDeserializer.readObject() as Object)
            }
            transfer_buf = transfer_buf_
        }
        const transfer_result : Array<Object> | undefined = transfer_buf
        let value : PostMessageOptions = ({transfer: transfer_result} as PostMessageOptions)
        return value
    }
    readPreviewConfiguration(): PreviewConfiguration {
        let valueDeserializer : Deserializer = this
        const onlyForLifting_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onlyForLifting_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (onlyForLifting_buf_runtimeType))
        {
            onlyForLifting_buf = valueDeserializer.readBoolean()
        }
        const onlyForLifting_result : boolean | undefined = onlyForLifting_buf
        const delayCreating_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let delayCreating_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (delayCreating_buf_runtimeType))
        {
            delayCreating_buf = valueDeserializer.readBoolean()
        }
        const delayCreating_result : boolean | undefined = delayCreating_buf
        let value : PreviewConfiguration = ({onlyForLifting: onlyForLifting_result, delayCreating: delayCreating_result} as PreviewConfiguration)
        return value
    }
    readPreviewMenuOptions(): PreviewMenuOptions {
        let valueDeserializer : Deserializer = this
        const hapticFeedbackMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hapticFeedbackMode_buf : HapticFeedbackMode | undefined
        if ((RuntimeType.UNDEFINED) != (hapticFeedbackMode_buf_runtimeType))
        {
            hapticFeedbackMode_buf = TypeChecker.HapticFeedbackMode_FromNumeric(valueDeserializer.readInt32())
        }
        const hapticFeedbackMode_result : HapticFeedbackMode | undefined = hapticFeedbackMode_buf
        let value : PreviewMenuOptions = ({hapticFeedbackMode: hapticFeedbackMode_result} as PreviewMenuOptions)
        return value
    }
    readPreviewText(): PreviewText {
        let valueDeserializer : Deserializer = this
        const offset_result : number = (valueDeserializer.readNumber() as number)
        const value_result : string = (valueDeserializer.readString() as string)
        let value : PreviewText = ({offset: offset_result, value: value_result} as PreviewText)
        return value
    }
    readProgressOptions(): ProgressOptions {
        let valueDeserializer : Deserializer = this
        const value_result : number = (valueDeserializer.readNumber() as number)
        const total_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let total_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (total_buf_runtimeType))
        {
            total_buf = (valueDeserializer.readNumber() as number)
        }
        const total_result : number | undefined = total_buf
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : ProgressType | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = TypeChecker.ProgressType_FromNumeric(valueDeserializer.readInt32())
        }
        const type_result : ProgressType | undefined = type_buf
        let value : ProgressOptions = ({value: value_result, total: total_result, type: type_result} as ProgressOptions)
        return value
    }
    readProgressStyleOptions(): ProgressStyleOptions {
        let valueDeserializer : Deserializer = this
        const enableSmoothEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableSmoothEffect_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableSmoothEffect_buf_runtimeType))
        {
            enableSmoothEffect_buf = valueDeserializer.readBoolean()
        }
        const enableSmoothEffect_result : boolean | undefined = enableSmoothEffect_buf
        const strokeWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeWidth_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (strokeWidth_buf_runtimeType))
        {
            strokeWidth_buf = (valueDeserializer.readLength() as Length)
        }
        const strokeWidth_result : Length | undefined = strokeWidth_buf
        const scaleCount_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scaleCount_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (scaleCount_buf_runtimeType))
        {
            scaleCount_buf = (valueDeserializer.readNumber() as number)
        }
        const scaleCount_result : number | undefined = scaleCount_buf
        const scaleWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scaleWidth_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (scaleWidth_buf_runtimeType))
        {
            scaleWidth_buf = (valueDeserializer.readLength() as Length)
        }
        const scaleWidth_result : Length | undefined = scaleWidth_buf
        let value : ProgressStyleOptions = ({enableSmoothEffect: enableSmoothEffect_result, strokeWidth: strokeWidth_result, scaleCount: scaleCount_result, scaleWidth: scaleWidth_result} as ProgressStyleOptions)
        return value
    }
    readRadialGradientOptions(): RadialGradientOptions {
        let valueDeserializer : Deserializer = this
        const center_buf_value0 : Length = (valueDeserializer.readLength() as Length)
        const center_buf_value1 : Length = (valueDeserializer.readLength() as Length)
        const center_result : [ Length, Length ] = ([center_buf_value0, center_buf_value1] as [ Length, Length ])
        const radius_result : Length = (valueDeserializer.readLength() as Length)
        const colors_buf_length : int32 = valueDeserializer.readInt32()
        let colors_buf : Array<[ ResourceColor, number ]> = new Array<[ ResourceColor, number ]>(colors_buf_length)
        for (let colors_buf_i = 0; colors_buf_i < colors_buf_length; colors_buf_i++) {
            const colors_buf_buf_value0_buf_selector : int32 = valueDeserializer.readInt8()
            let colors_buf_buf_value0_buf : Color | number | string | Resource | undefined
            if (colors_buf_buf_value0_buf_selector == 0) {
                colors_buf_buf_value0_buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (colors_buf_buf_value0_buf_selector == 1) {
                colors_buf_buf_value0_buf = (valueDeserializer.readNumber() as number)
            }
            else if (colors_buf_buf_value0_buf_selector == 2) {
                colors_buf_buf_value0_buf = (valueDeserializer.readString() as string)
            }
            else if (colors_buf_buf_value0_buf_selector == 3) {
                colors_buf_buf_value0_buf = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for colors_buf_buf_value0_buf has to be chosen through deserialisation.")
            }
            const colors_buf_buf_value0 : ResourceColor = (colors_buf_buf_value0_buf as Color | number | string | Resource)
            const colors_buf_buf_value1 : number = (valueDeserializer.readNumber() as number)
            colors_buf[colors_buf_i] = ([colors_buf_buf_value0, colors_buf_buf_value1] as [ ResourceColor, number ])
        }
        const colors_result : Array<[ ResourceColor, number ]> = colors_buf
        const repeating_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let repeating_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (repeating_buf_runtimeType))
        {
            repeating_buf = valueDeserializer.readBoolean()
        }
        const repeating_result : boolean | undefined = repeating_buf
        let value : RadialGradientOptions = ({center: center_result, radius: radius_result, colors: colors_result, repeating: repeating_result} as RadialGradientOptions)
        return value
    }
    readRadioOptions(): RadioOptions {
        let valueDeserializer : Deserializer = this
        const group_result : string = (valueDeserializer.readString() as string)
        const value_result : string = (valueDeserializer.readString() as string)
        const indicatorType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let indicatorType_buf : RadioIndicatorType | undefined
        if ((RuntimeType.UNDEFINED) != (indicatorType_buf_runtimeType))
        {
            indicatorType_buf = TypeChecker.RadioIndicatorType_FromNumeric(valueDeserializer.readInt32())
        }
        const indicatorType_result : RadioIndicatorType | undefined = indicatorType_buf
        const indicatorBuilder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let indicatorBuilder_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (indicatorBuilder_buf_runtimeType))
        {
            indicatorBuilder_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const indicatorBuilder_result : CustomBuilder | undefined = indicatorBuilder_buf
        let value : RadioOptions = ({group: group_result, value: value_result, indicatorType: indicatorType_result, indicatorBuilder: indicatorBuilder_result} as RadioOptions)
        return value
    }
    readRatingOptions(): RatingOptions {
        let valueDeserializer : Deserializer = this
        const rating_result : number = (valueDeserializer.readNumber() as number)
        const indicator_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let indicator_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (indicator_buf_runtimeType))
        {
            indicator_buf = valueDeserializer.readBoolean()
        }
        const indicator_result : boolean | undefined = indicator_buf
        let value : RatingOptions = ({rating: rating_result, indicator: indicator_result} as RatingOptions)
        return value
    }
    readRectangle(): Rectangle {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            x_buf = (valueDeserializer.readLength() as Length)
        }
        const x_result : Length | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            y_buf = (valueDeserializer.readLength() as Length)
        }
        const y_result : Length | undefined = y_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Length)
        }
        const width_result : Length | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readLength() as Length)
        }
        const height_result : Length | undefined = height_buf
        let value : Rectangle = ({x: x_result, y: y_result, width: width_result, height: height_result} as Rectangle)
        return value
    }
    readRenderingContextSettings(): RenderingContextSettings {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RenderingContextSettingsInternal.fromPtr(ptr)
    }
    readRenderNode(): RenderNode {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RenderNodeInternal.fromPtr(ptr)
    }
    readRenderProcessNotRespondingData(): RenderProcessNotRespondingData {
        let valueDeserializer : Deserializer = this
        const jsStack_result : string = (valueDeserializer.readString() as string)
        const pid_result : number = (valueDeserializer.readNumber() as number)
        const reason_result : RenderProcessNotRespondingReason = TypeChecker.RenderProcessNotRespondingReason_FromNumeric(valueDeserializer.readInt32())
        let value : RenderProcessNotRespondingData = ({jsStack: jsStack_result, pid: pid_result, reason: reason_result} as RenderProcessNotRespondingData)
        return value
    }
    readReplaceSymbolEffect(): ReplaceSymbolEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ReplaceSymbolEffectInternal.fromPtr(ptr)
    }
    readResource(): Resource {
        let valueDeserializer : Deserializer = this
        const bundleName_result : string = (valueDeserializer.readString() as string)
        const moduleName_result : string = (valueDeserializer.readString() as string)
        const id_result : number = (valueDeserializer.readNumber() as number)
        const params_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let params_buf : Array<Object | undefined> | undefined
        if ((RuntimeType.UNDEFINED) != (params_buf_runtimeType))
        {
            const params_buf__length : int32 = valueDeserializer.readInt32()
            let params_buf_ : Array<Object | undefined> = new Array<Object | undefined>(params_buf__length)
            for (let params_buf__i = 0; params_buf__i < params_buf__length; params_buf__i++) {
                params_buf_[params_buf__i] = (valueDeserializer.readString() as string)
            }
            params_buf = params_buf_
        }
        const params_result : Array<Object | undefined> | undefined = params_buf
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = (valueDeserializer.readNumber() as number)
        }
        const type_result : number | undefined = type_buf
        let value : Resource = ({bundleName: bundleName_result, moduleName: moduleName_result, id: id_result, params: params_result, type: type_result} as Resource)
        return value
    }
    readRichEditorDeleteValue(): RichEditorDeleteValue {
        let valueDeserializer : Deserializer = this
        const offset_result : number = (valueDeserializer.readNumber() as number)
        const direction_result : RichEditorDeleteDirection = TypeChecker.RichEditorDeleteDirection_FromNumeric(valueDeserializer.readInt32())
        const length_result : number = (valueDeserializer.readNumber() as number)
        const richEditorDeleteSpans_buf_length : int32 = valueDeserializer.readInt32()
        let richEditorDeleteSpans_buf : Array<RichEditorTextSpanResult | RichEditorImageSpanResult> = new Array<RichEditorTextSpanResult | RichEditorImageSpanResult>(richEditorDeleteSpans_buf_length)
        for (let richEditorDeleteSpans_buf_i = 0; richEditorDeleteSpans_buf_i < richEditorDeleteSpans_buf_length; richEditorDeleteSpans_buf_i++) {
            const richEditorDeleteSpans_buf_buf_selector : int32 = valueDeserializer.readInt8()
            let richEditorDeleteSpans_buf_buf : RichEditorTextSpanResult | RichEditorImageSpanResult | undefined
            if (richEditorDeleteSpans_buf_buf_selector == 0) {
                richEditorDeleteSpans_buf_buf = valueDeserializer.readRichEditorTextSpanResult()
            }
            else if (richEditorDeleteSpans_buf_buf_selector == 1) {
                richEditorDeleteSpans_buf_buf = valueDeserializer.readRichEditorImageSpanResult()
            }
            else {
                throw new Error("One of the branches for richEditorDeleteSpans_buf_buf has to be chosen through deserialisation.")
            }
            richEditorDeleteSpans_buf[richEditorDeleteSpans_buf_i] = (richEditorDeleteSpans_buf_buf as RichEditorTextSpanResult | RichEditorImageSpanResult)
        }
        const richEditorDeleteSpans_result : Array<RichEditorTextSpanResult | RichEditorImageSpanResult> = richEditorDeleteSpans_buf
        let value : RichEditorDeleteValue = ({offset: offset_result, direction: direction_result, length: length_result, richEditorDeleteSpans: richEditorDeleteSpans_result} as RichEditorDeleteValue)
        return value
    }
    readRichEditorGesture(): RichEditorGesture {
        let valueDeserializer : Deserializer = this
        const onClick_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onClick_buf : ((event: ClickEvent) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onClick_buf_runtimeType))
        {
            onClick_buf = valueDeserializer.readCallback_ClickEvent_Void()
        }
        const onClick_result : ((event: ClickEvent) => void) | undefined = onClick_buf
        const onLongPress_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onLongPress_buf : ((event: GestureEvent) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onLongPress_buf_runtimeType))
        {
            onLongPress_buf = valueDeserializer.readCallback_GestureEvent_Void()
        }
        const onLongPress_result : ((event: GestureEvent) => void) | undefined = onLongPress_buf
        const onDoubleClick_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDoubleClick_buf : ((event: GestureEvent) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDoubleClick_buf_runtimeType))
        {
            onDoubleClick_buf = valueDeserializer.readCallback_GestureEvent_Void()
        }
        const onDoubleClick_result : ((event: GestureEvent) => void) | undefined = onDoubleClick_buf
        let value : RichEditorGesture = ({onClick: onClick_result, onLongPress: onLongPress_result, onDoubleClick: onDoubleClick_result} as RichEditorGesture)
        return value
    }
    readRichEditorInsertValue(): RichEditorInsertValue {
        let valueDeserializer : Deserializer = this
        const insertOffset_result : number = (valueDeserializer.readNumber() as number)
        const insertValue_result : string = (valueDeserializer.readString() as string)
        const previewText_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewText_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (previewText_buf_runtimeType))
        {
            previewText_buf = (valueDeserializer.readString() as string)
        }
        const previewText_result : string | undefined = previewText_buf
        let value : RichEditorInsertValue = ({insertOffset: insertOffset_result, insertValue: insertValue_result, previewText: previewText_result} as RichEditorInsertValue)
        return value
    }
    readRichEditorRange(): RichEditorRange {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readNumber() as number)
        }
        const start_result : number | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readNumber() as number)
        }
        const end_result : number | undefined = end_buf
        let value : RichEditorRange = ({start: start_result, end: end_result} as RichEditorRange)
        return value
    }
    readRichEditorSelection(): RichEditorSelection {
        let valueDeserializer : Deserializer = this
        const selection_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const selection_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const selection_result : [ number, number ] = ([selection_buf_value0, selection_buf_value1] as [ number, number ])
        const spans_buf_length : int32 = valueDeserializer.readInt32()
        let spans_buf : Array<RichEditorTextSpanResult | RichEditorImageSpanResult> = new Array<RichEditorTextSpanResult | RichEditorImageSpanResult>(spans_buf_length)
        for (let spans_buf_i = 0; spans_buf_i < spans_buf_length; spans_buf_i++) {
            const spans_buf_buf_selector : int32 = valueDeserializer.readInt8()
            let spans_buf_buf : RichEditorTextSpanResult | RichEditorImageSpanResult | undefined
            if (spans_buf_buf_selector == 0) {
                spans_buf_buf = valueDeserializer.readRichEditorTextSpanResult()
            }
            else if (spans_buf_buf_selector == 1) {
                spans_buf_buf = valueDeserializer.readRichEditorImageSpanResult()
            }
            else {
                throw new Error("One of the branches for spans_buf_buf has to be chosen through deserialisation.")
            }
            spans_buf[spans_buf_i] = (spans_buf_buf as RichEditorTextSpanResult | RichEditorImageSpanResult)
        }
        const spans_result : Array<RichEditorTextSpanResult | RichEditorImageSpanResult> = spans_buf
        let value : RichEditorSelection = ({selection: selection_result, spans: spans_result} as RichEditorSelection)
        return value
    }
    readRichEditorSpanPosition(): RichEditorSpanPosition {
        let valueDeserializer : Deserializer = this
        const spanIndex_result : number = (valueDeserializer.readNumber() as number)
        const spanRange_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const spanRange_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const spanRange_result : [ number, number ] = ([spanRange_buf_value0, spanRange_buf_value1] as [ number, number ])
        let value : RichEditorSpanPosition = ({spanIndex: spanIndex_result, spanRange: spanRange_result} as RichEditorSpanPosition)
        return value
    }
    readRingStyleOptions(): RingStyleOptions {
        let valueDeserializer : Deserializer = this
        const enableScanEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableScanEffect_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableScanEffect_buf_runtimeType))
        {
            enableScanEffect_buf = valueDeserializer.readBoolean()
        }
        const enableScanEffect_result : boolean | undefined = enableScanEffect_buf
        const strokeWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeWidth_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (strokeWidth_buf_runtimeType))
        {
            strokeWidth_buf = (valueDeserializer.readLength() as Length)
        }
        const strokeWidth_result : Length | undefined = strokeWidth_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            shadow_buf = valueDeserializer.readBoolean()
        }
        const shadow_result : boolean | undefined = shadow_buf
        const status_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let status_buf : ProgressStatus | undefined
        if ((RuntimeType.UNDEFINED) != (status_buf_runtimeType))
        {
            status_buf = TypeChecker.ProgressStatus_FromNumeric(valueDeserializer.readInt32())
        }
        const status_result : ProgressStatus | undefined = status_buf
        let value : RingStyleOptions = ({enableScanEffect: enableScanEffect_result, strokeWidth: strokeWidth_result, shadow: shadow_result, status: status_result} as RingStyleOptions)
        return value
    }
    readRotateOption(): RotateOption {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            x_buf = (valueDeserializer.readNumber() as number)
        }
        const x_result : number | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            y_buf = (valueDeserializer.readNumber() as number)
        }
        const y_result : number | undefined = y_buf
        const z_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let z_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (z_buf_runtimeType))
        {
            z_buf = (valueDeserializer.readNumber() as number)
        }
        const z_result : number | undefined = z_buf
        const centerX_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let centerX_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (centerX_buf_runtimeType))
        {
            centerX_buf = (valueDeserializer.readNumber() as number)
        }
        const centerX_result : number | undefined = centerX_buf
        const centerY_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let centerY_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (centerY_buf_runtimeType))
        {
            centerY_buf = (valueDeserializer.readNumber() as number)
        }
        const centerY_result : number | undefined = centerY_buf
        const angle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let angle_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (angle_buf_runtimeType))
        {
            angle_buf = (valueDeserializer.readNumber() as number)
        }
        const angle_result : number | undefined = angle_buf
        let value : RotateOption = ({x: x_result, y: y_result, z: z_result, centerX: centerX_result, centerY: centerY_result, angle: angle_result} as RotateOption)
        return value
    }
    readRotateOptions(): RotateOptions {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            x_buf = (valueDeserializer.readNumber() as number)
        }
        const x_result : number | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            y_buf = (valueDeserializer.readNumber() as number)
        }
        const y_result : number | undefined = y_buf
        const z_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let z_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (z_buf_runtimeType))
        {
            z_buf = (valueDeserializer.readNumber() as number)
        }
        const z_result : number | undefined = z_buf
        const centerX_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let centerX_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (centerX_buf_runtimeType))
        {
            const centerX_buf__selector : int32 = valueDeserializer.readInt8()
            let centerX_buf_ : number | string | undefined
            if (centerX_buf__selector == 0) {
                centerX_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (centerX_buf__selector == 1) {
                centerX_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for centerX_buf_ has to be chosen through deserialisation.")
            }
            centerX_buf = (centerX_buf_ as number | string)
        }
        const centerX_result : number | string | undefined = centerX_buf
        const centerY_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let centerY_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (centerY_buf_runtimeType))
        {
            const centerY_buf__selector : int32 = valueDeserializer.readInt8()
            let centerY_buf_ : number | string | undefined
            if (centerY_buf__selector == 0) {
                centerY_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (centerY_buf__selector == 1) {
                centerY_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for centerY_buf_ has to be chosen through deserialisation.")
            }
            centerY_buf = (centerY_buf_ as number | string)
        }
        const centerY_result : number | string | undefined = centerY_buf
        const centerZ_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let centerZ_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (centerZ_buf_runtimeType))
        {
            centerZ_buf = (valueDeserializer.readNumber() as number)
        }
        const centerZ_result : number | undefined = centerZ_buf
        const perspective_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let perspective_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (perspective_buf_runtimeType))
        {
            perspective_buf = (valueDeserializer.readNumber() as number)
        }
        const perspective_result : number | undefined = perspective_buf
        const angle_buf_selector : int32 = valueDeserializer.readInt8()
        let angle_buf : number | string | undefined
        if (angle_buf_selector == 0) {
            angle_buf = (valueDeserializer.readNumber() as number)
        }
        else if (angle_buf_selector == 1) {
            angle_buf = (valueDeserializer.readString() as string)
        }
        else {
            throw new Error("One of the branches for angle_buf has to be chosen through deserialisation.")
        }
        const angle_result : number | string = (angle_buf as number | string)
        let value : RotateOptions = ({x: x_result, y: y_result, z: z_result, centerX: centerX_result, centerY: centerY_result, centerZ: centerZ_result, perspective: perspective_result, angle: angle_result} as RotateOptions)
        return value
    }
    readRotationGestureHandlerOptions(): RotationGestureHandlerOptions {
        let valueDeserializer : Deserializer = this
        const isFingerCountLimited_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isFingerCountLimited_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isFingerCountLimited_buf_runtimeType))
        {
            isFingerCountLimited_buf = valueDeserializer.readBoolean()
        }
        const isFingerCountLimited_result : boolean | undefined = isFingerCountLimited_buf
        const fingers_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fingers_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (fingers_buf_runtimeType))
        {
            fingers_buf = (valueDeserializer.readNumber() as number)
        }
        const fingers_result : number | undefined = fingers_buf
        const angle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let angle_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (angle_buf_runtimeType))
        {
            angle_buf = (valueDeserializer.readNumber() as number)
        }
        const angle_result : number | undefined = angle_buf
        let value : RotationGestureHandlerOptions = ({isFingerCountLimited: isFingerCountLimited_result, fingers: fingers_result, angle: angle_result} as RotationGestureHandlerOptions)
        return value
    }
    readRoundedRectOptions(): RoundedRectOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : number | string | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as number | string)
        }
        const width_result : number | string | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : number | string | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as number | string)
        }
        const height_result : number | string | undefined = height_buf
        const radiusWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radiusWidth_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (radiusWidth_buf_runtimeType))
        {
            const radiusWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let radiusWidth_buf_ : number | string | undefined
            if (radiusWidth_buf__selector == 0) {
                radiusWidth_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (radiusWidth_buf__selector == 1) {
                radiusWidth_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for radiusWidth_buf_ has to be chosen through deserialisation.")
            }
            radiusWidth_buf = (radiusWidth_buf_ as number | string)
        }
        const radiusWidth_result : number | string | undefined = radiusWidth_buf
        const radiusHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radiusHeight_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (radiusHeight_buf_runtimeType))
        {
            const radiusHeight_buf__selector : int32 = valueDeserializer.readInt8()
            let radiusHeight_buf_ : number | string | undefined
            if (radiusHeight_buf__selector == 0) {
                radiusHeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (radiusHeight_buf__selector == 1) {
                radiusHeight_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for radiusHeight_buf_ has to be chosen through deserialisation.")
            }
            radiusHeight_buf = (radiusHeight_buf_ as number | string)
        }
        const radiusHeight_result : number | string | undefined = radiusHeight_buf
        let value : RoundedRectOptions = ({width: width_result, height: height_result, radiusWidth: radiusWidth_result, radiusHeight: radiusHeight_result} as RoundedRectOptions)
        return value
    }
    readRoundRect(): RoundRect {
        let valueDeserializer : Deserializer = this
        const rect_result : Rect = valueDeserializer.readRect()
        const corners_result : CornerRadius = valueDeserializer.readCornerRadius()
        let value : RoundRect = ({rect: rect_result, corners: corners_result} as RoundRect)
        return value
    }
    readRoundRectShapeOptions(): RoundRectShapeOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : number | string | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as number | string)
        }
        const width_result : number | string | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : number | string | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as number | string)
        }
        const height_result : number | string | undefined = height_buf
        const radiusWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radiusWidth_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (radiusWidth_buf_runtimeType))
        {
            const radiusWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let radiusWidth_buf_ : number | string | undefined
            if (radiusWidth_buf__selector == 0) {
                radiusWidth_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (radiusWidth_buf__selector == 1) {
                radiusWidth_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for radiusWidth_buf_ has to be chosen through deserialisation.")
            }
            radiusWidth_buf = (radiusWidth_buf_ as number | string)
        }
        const radiusWidth_result : number | string | undefined = radiusWidth_buf
        const radiusHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radiusHeight_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (radiusHeight_buf_runtimeType))
        {
            const radiusHeight_buf__selector : int32 = valueDeserializer.readInt8()
            let radiusHeight_buf_ : number | string | undefined
            if (radiusHeight_buf__selector == 0) {
                radiusHeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (radiusHeight_buf__selector == 1) {
                radiusHeight_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for radiusHeight_buf_ has to be chosen through deserialisation.")
            }
            radiusHeight_buf = (radiusHeight_buf_ as number | string)
        }
        const radiusHeight_result : number | string | undefined = radiusHeight_buf
        let value : RoundRectShapeOptions = ({width: width_result, height: height_result, radiusWidth: radiusWidth_result, radiusHeight: radiusHeight_result} as RoundRectShapeOptions)
        return value
    }
    readRouteInfo(): RouteInfo {
        let valueDeserializer : Deserializer = this
        const name_result : string = (valueDeserializer.readString() as string)
        const param_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let param_buf : object | undefined
        if ((RuntimeType.UNDEFINED) != (param_buf_runtimeType))
        {
            param_buf = (valueDeserializer.readObject() as object)
        }
        const param_result : object | undefined = param_buf
        let value : RouteInfo = ({name: name_result, param: param_result} as RouteInfo)
        return value
    }
    readRouteMapConfig(): RouteMapConfig {
        let valueDeserializer : Deserializer = this
        const name_result : string = (valueDeserializer.readString() as string)
        const pageSourceFile_result : string = (valueDeserializer.readString() as string)
        const data_result : Object = (valueDeserializer.readObject() as Object)
        let value : RouteMapConfig = ({name: name_result, pageSourceFile: pageSourceFile_result, data: data_result} as RouteMapConfig)
        return value
    }
    readRowOptions(): RowOptions {
        let valueDeserializer : Deserializer = this
        const space_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let space_buf : string | number | undefined
        if ((RuntimeType.UNDEFINED) != (space_buf_runtimeType))
        {
            const space_buf__selector : int32 = valueDeserializer.readInt8()
            let space_buf_ : string | number | undefined
            if (space_buf__selector == 0) {
                space_buf_ = (valueDeserializer.readString() as string)
            }
            else if (space_buf__selector == 1) {
                space_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for space_buf_ has to be chosen through deserialisation.")
            }
            space_buf = (space_buf_ as string | number)
        }
        const space_result : string | number | undefined = space_buf
        let value : RowOptions = ({space: space_result} as RowOptions)
        return value
    }
    readRowOptionsV2(): RowOptionsV2 {
        let valueDeserializer : Deserializer = this
        const stub_result : string = (valueDeserializer.readString() as string)
        let value : RowOptionsV2 = ({stub: stub_result} as RowOptionsV2)
        return value
    }
    readSaveButtonOptions(): SaveButtonOptions {
        let valueDeserializer : Deserializer = this
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : SaveIconStyle | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            icon_buf = TypeChecker.SaveIconStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const icon_result : SaveIconStyle | undefined = icon_buf
        const text_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let text_buf : SaveDescription | undefined
        if ((RuntimeType.UNDEFINED) != (text_buf_runtimeType))
        {
            text_buf = TypeChecker.SaveDescription_FromNumeric(valueDeserializer.readInt32())
        }
        const text_result : SaveDescription | undefined = text_buf
        const buttonType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let buttonType_buf : ButtonType | undefined
        if ((RuntimeType.UNDEFINED) != (buttonType_buf_runtimeType))
        {
            buttonType_buf = TypeChecker.ButtonType_FromNumeric(valueDeserializer.readInt32())
        }
        const buttonType_result : ButtonType | undefined = buttonType_buf
        let value : SaveButtonOptions = ({icon: icon_result, text: text_result, buttonType: buttonType_result} as SaveButtonOptions)
        return value
    }
    readScaleOption(): ScaleOption {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            x_buf = (valueDeserializer.readNumber() as number)
        }
        const x_result : number | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            y_buf = (valueDeserializer.readNumber() as number)
        }
        const y_result : number | undefined = y_buf
        const z_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let z_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (z_buf_runtimeType))
        {
            z_buf = (valueDeserializer.readNumber() as number)
        }
        const z_result : number | undefined = z_buf
        const centerX_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let centerX_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (centerX_buf_runtimeType))
        {
            centerX_buf = (valueDeserializer.readNumber() as number)
        }
        const centerX_result : number | undefined = centerX_buf
        const centerY_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let centerY_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (centerY_buf_runtimeType))
        {
            centerY_buf = (valueDeserializer.readNumber() as number)
        }
        const centerY_result : number | undefined = centerY_buf
        let value : ScaleOption = ({x: x_result, y: y_result, z: z_result, centerX: centerX_result, centerY: centerY_result} as ScaleOption)
        return value
    }
    readScaleOptions(): ScaleOptions {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            x_buf = (valueDeserializer.readNumber() as number)
        }
        const x_result : number | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            y_buf = (valueDeserializer.readNumber() as number)
        }
        const y_result : number | undefined = y_buf
        const z_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let z_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (z_buf_runtimeType))
        {
            z_buf = (valueDeserializer.readNumber() as number)
        }
        const z_result : number | undefined = z_buf
        const centerX_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let centerX_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (centerX_buf_runtimeType))
        {
            const centerX_buf__selector : int32 = valueDeserializer.readInt8()
            let centerX_buf_ : number | string | undefined
            if (centerX_buf__selector == 0) {
                centerX_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (centerX_buf__selector == 1) {
                centerX_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for centerX_buf_ has to be chosen through deserialisation.")
            }
            centerX_buf = (centerX_buf_ as number | string)
        }
        const centerX_result : number | string | undefined = centerX_buf
        const centerY_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let centerY_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (centerY_buf_runtimeType))
        {
            const centerY_buf__selector : int32 = valueDeserializer.readInt8()
            let centerY_buf_ : number | string | undefined
            if (centerY_buf__selector == 0) {
                centerY_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (centerY_buf__selector == 1) {
                centerY_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for centerY_buf_ has to be chosen through deserialisation.")
            }
            centerY_buf = (centerY_buf_ as number | string)
        }
        const centerY_result : number | string | undefined = centerY_buf
        let value : ScaleOptions = ({x: x_result, y: y_result, z: z_result, centerX: centerX_result, centerY: centerY_result} as ScaleOptions)
        return value
    }
    readScaleSymbolEffect(): ScaleSymbolEffect {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ScaleSymbolEffectInternal.fromPtr(ptr)
    }
    readScreenCaptureConfig(): ScreenCaptureConfig {
        let valueDeserializer : Deserializer = this
        const captureMode_result : WebCaptureMode = TypeChecker.WebCaptureMode_FromNumeric(valueDeserializer.readInt32())
        let value : ScreenCaptureConfig = ({captureMode: captureMode_result} as ScreenCaptureConfig)
        return value
    }
    readScriptItem(): ScriptItem {
        let valueDeserializer : Deserializer = this
        const script_result : string = (valueDeserializer.readString() as string)
        const scriptRules_buf_length : int32 = valueDeserializer.readInt32()
        let scriptRules_buf : Array<string> = new Array<string>(scriptRules_buf_length)
        for (let scriptRules_buf_i = 0; scriptRules_buf_i < scriptRules_buf_length; scriptRules_buf_i++) {
            scriptRules_buf[scriptRules_buf_i] = (valueDeserializer.readString() as string)
        }
        const scriptRules_result : Array<string> = scriptRules_buf
        let value : ScriptItem = ({script: script_result, scriptRules: scriptRules_result} as ScriptItem)
        return value
    }
    readScrollableBarModeOptions(): ScrollableBarModeOptions {
        let valueDeserializer : Deserializer = this
        const margin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let margin_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (margin_buf_runtimeType))
        {
            margin_buf = (valueDeserializer.readLength() as Dimension)
        }
        const margin_result : Dimension | undefined = margin_buf
        const nonScrollableLayoutStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let nonScrollableLayoutStyle_buf : LayoutStyle | undefined
        if ((RuntimeType.UNDEFINED) != (nonScrollableLayoutStyle_buf_runtimeType))
        {
            nonScrollableLayoutStyle_buf = TypeChecker.LayoutStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const nonScrollableLayoutStyle_result : LayoutStyle | undefined = nonScrollableLayoutStyle_buf
        let value : ScrollableBarModeOptions = ({margin: margin_result, nonScrollableLayoutStyle: nonScrollableLayoutStyle_result} as ScrollableBarModeOptions)
        return value
    }
    readScrollAnimationOptions(): ScrollAnimationOptions {
        let valueDeserializer : Deserializer = this
        const duration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let duration_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (duration_buf_runtimeType))
        {
            duration_buf = (valueDeserializer.readNumber() as number)
        }
        const duration_result : number | undefined = duration_buf
        const curve_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let curve_buf : Curve | ICurve | undefined
        if ((RuntimeType.UNDEFINED) != (curve_buf_runtimeType))
        {
            const curve_buf__selector : int32 = valueDeserializer.readInt8()
            let curve_buf_ : Curve | ICurve | undefined
            if (curve_buf__selector == 0) {
                curve_buf_ = TypeChecker.Curve_FromNumeric(valueDeserializer.readInt32())
            }
            else if (curve_buf__selector == 1) {
                curve_buf_ = (valueDeserializer.readICurve() as ICurve)
            }
            else {
                throw new Error("One of the branches for curve_buf_ has to be chosen through deserialisation.")
            }
            curve_buf = (curve_buf_ as Curve | ICurve)
        }
        const curve_result : Curve | ICurve | undefined = curve_buf
        const canOverScroll_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let canOverScroll_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (canOverScroll_buf_runtimeType))
        {
            canOverScroll_buf = valueDeserializer.readBoolean()
        }
        const canOverScroll_result : boolean | undefined = canOverScroll_buf
        let value : ScrollAnimationOptions = ({duration: duration_result, curve: curve_result, canOverScroll: canOverScroll_result} as ScrollAnimationOptions)
        return value
    }
    readScrollBarOptions(): ScrollBarOptions {
        let valueDeserializer : Deserializer = this
        const scroller_result : Scroller = (valueDeserializer.readScroller() as Scroller)
        const direction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let direction_buf : ScrollBarDirection | undefined
        if ((RuntimeType.UNDEFINED) != (direction_buf_runtimeType))
        {
            direction_buf = TypeChecker.ScrollBarDirection_FromNumeric(valueDeserializer.readInt32())
        }
        const direction_result : ScrollBarDirection | undefined = direction_buf
        const state_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let state_buf : BarState | undefined
        if ((RuntimeType.UNDEFINED) != (state_buf_runtimeType))
        {
            state_buf = TypeChecker.BarState_FromNumeric(valueDeserializer.readInt32())
        }
        const state_result : BarState | undefined = state_buf
        let value : ScrollBarOptions = ({scroller: scroller_result, direction: direction_result, state: state_result} as ScrollBarOptions)
        return value
    }
    readScrollEdgeOptions(): ScrollEdgeOptions {
        let valueDeserializer : Deserializer = this
        const velocity_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let velocity_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (velocity_buf_runtimeType))
        {
            velocity_buf = (valueDeserializer.readNumber() as number)
        }
        const velocity_result : number | undefined = velocity_buf
        let value : ScrollEdgeOptions = ({velocity: velocity_result} as ScrollEdgeOptions)
        return value
    }
    readScrollPageOptions(): ScrollPageOptions {
        let valueDeserializer : Deserializer = this
        const next_result : boolean = valueDeserializer.readBoolean()
        const animation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let animation_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (animation_buf_runtimeType))
        {
            animation_buf = valueDeserializer.readBoolean()
        }
        const animation_result : boolean | undefined = animation_buf
        let value : ScrollPageOptions = ({next: next_result, animation: animation_result} as ScrollPageOptions)
        return value
    }
    readSelectionOptions(): SelectionOptions {
        let valueDeserializer : Deserializer = this
        const menuPolicy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let menuPolicy_buf : MenuPolicy | undefined
        if ((RuntimeType.UNDEFINED) != (menuPolicy_buf_runtimeType))
        {
            menuPolicy_buf = TypeChecker.MenuPolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const menuPolicy_result : MenuPolicy | undefined = menuPolicy_buf
        let value : SelectionOptions = ({menuPolicy: menuPolicy_result} as SelectionOptions)
        return value
    }
    readShapeSize(): ShapeSize {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : number | string | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as number | string)
        }
        const width_result : number | string | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : number | string | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as number | string)
        }
        const height_result : number | string | undefined = height_buf
        let value : ShapeSize = ({width: width_result, height: height_result} as ShapeSize)
        return value
    }
    readSheetDismiss(): SheetDismiss {
        let valueDeserializer : Deserializer = this
        const dismiss_result : (() => void) = valueDeserializer.readCallback_Void()
        let value : SheetDismiss = ({dismiss: dismiss_result} as SheetDismiss)
        return value
    }
    readSizeOptions(): SizeOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Length)
        }
        const width_result : Length | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readLength() as Length)
        }
        const height_result : Length | undefined = height_buf
        let value : SizeOptions = ({width: width_result, height: height_result} as SizeOptions)
        return value
    }
    readSlideRange(): SlideRange {
        let valueDeserializer : Deserializer = this
        const from_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let from_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (from_buf_runtimeType))
        {
            from_buf = (valueDeserializer.readNumber() as number)
        }
        const from_result : number | undefined = from_buf
        const to_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let to_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (to_buf_runtimeType))
        {
            to_buf = (valueDeserializer.readNumber() as number)
        }
        const to_result : number | undefined = to_buf
        let value : SlideRange = ({from: from_result, to: to_result} as SlideRange)
        return value
    }
    readSliderOptions(): SliderOptions {
        let valueDeserializer : Deserializer = this
        const value_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let value_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (value_buf_runtimeType))
        {
            value_buf = (valueDeserializer.readNumber() as number)
        }
        const value_result : number | undefined = value_buf
        const min_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let min_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (min_buf_runtimeType))
        {
            min_buf = (valueDeserializer.readNumber() as number)
        }
        const min_result : number | undefined = min_buf
        const max_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let max_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (max_buf_runtimeType))
        {
            max_buf = (valueDeserializer.readNumber() as number)
        }
        const max_result : number | undefined = max_buf
        const step_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let step_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (step_buf_runtimeType))
        {
            step_buf = (valueDeserializer.readNumber() as number)
        }
        const step_result : number | undefined = step_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : SliderStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.SliderStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : SliderStyle | undefined = style_buf
        const direction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let direction_buf : Axis | undefined
        if ((RuntimeType.UNDEFINED) != (direction_buf_runtimeType))
        {
            direction_buf = TypeChecker.Axis_FromNumeric(valueDeserializer.readInt32())
        }
        const direction_result : Axis | undefined = direction_buf
        const reverse_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let reverse_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (reverse_buf_runtimeType))
        {
            reverse_buf = valueDeserializer.readBoolean()
        }
        const reverse_result : boolean | undefined = reverse_buf
        let value : SliderOptions = ({value: value_result, min: min_result, max: max_result, step: step_result, style: style_result, direction: direction_result, reverse: reverse_result} as SliderOptions)
        return value
    }
    readSnapshotOptions(): SnapshotOptions {
        let valueDeserializer : Deserializer = this
        const scale_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scale_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (scale_buf_runtimeType))
        {
            scale_buf = (valueDeserializer.readNumber() as number)
        }
        const scale_result : number | undefined = scale_buf
        const waitUntilRenderFinished_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let waitUntilRenderFinished_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (waitUntilRenderFinished_buf_runtimeType))
        {
            waitUntilRenderFinished_buf = valueDeserializer.readBoolean()
        }
        const waitUntilRenderFinished_result : boolean | undefined = waitUntilRenderFinished_buf
        let value : SnapshotOptions = ({scale: scale_result, waitUntilRenderFinished: waitUntilRenderFinished_result} as SnapshotOptions)
        return value
    }
    readSpringBackAction(): SpringBackAction {
        let valueDeserializer : Deserializer = this
        const springBack_result : (() => void) = valueDeserializer.readCallback_Void()
        let value : SpringBackAction = ({springBack: springBack_result} as SpringBackAction)
        return value
    }
    readSslErrorEvent(): SslErrorEvent {
        let valueDeserializer : Deserializer = this
        const handler_result : SslErrorHandler = (valueDeserializer.readSslErrorHandler() as SslErrorHandler)
        const error_result : SslError = TypeChecker.SslError_FromNumeric(valueDeserializer.readInt32())
        const url_result : string = (valueDeserializer.readString() as string)
        const originalUrl_result : string = (valueDeserializer.readString() as string)
        const referrer_result : string = (valueDeserializer.readString() as string)
        const isFatalError_result : boolean = valueDeserializer.readBoolean()
        const isMainFrame_result : boolean = valueDeserializer.readBoolean()
        let value : SslErrorEvent = ({handler: handler_result, error: error_result, url: url_result, originalUrl: originalUrl_result, referrer: referrer_result, isFatalError: isFatalError_result, isMainFrame: isMainFrame_result} as SslErrorEvent)
        return value
    }
    readStackOptions(): StackOptions {
        let valueDeserializer : Deserializer = this
        const alignContent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignContent_buf : Alignment | undefined
        if ((RuntimeType.UNDEFINED) != (alignContent_buf_runtimeType))
        {
            alignContent_buf = TypeChecker.Alignment_FromNumeric(valueDeserializer.readInt32())
        }
        const alignContent_result : Alignment | undefined = alignContent_buf
        let value : StackOptions = ({alignContent: alignContent_result} as StackOptions)
        return value
    }
    readStarStyleOptions(): StarStyleOptions {
        let valueDeserializer : Deserializer = this
        const backgroundUri_result : string = (valueDeserializer.readString() as string)
        const foregroundUri_result : string = (valueDeserializer.readString() as string)
        const secondaryUri_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let secondaryUri_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (secondaryUri_buf_runtimeType))
        {
            secondaryUri_buf = (valueDeserializer.readString() as string)
        }
        const secondaryUri_result : string | undefined = secondaryUri_buf
        let value : StarStyleOptions = ({backgroundUri: backgroundUri_result, foregroundUri: foregroundUri_result, secondaryUri: secondaryUri_result} as StarStyleOptions)
        return value
    }
    
    readStyledStringChangedListener(): StyledStringChangedListener {
        let valueDeserializer : Deserializer = this
        const onWillChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillChange_buf : ((parameter: StyledStringChangeValue) => boolean) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillChange_buf_runtimeType))
        {
            onWillChange_buf = valueDeserializer.readCallback_StyledStringChangeValue_Boolean()
        }
        const onWillChange_result : ((parameter: StyledStringChangeValue) => boolean) | undefined = onWillChange_buf
        const onDidChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidChange_buf : OnDidChangeCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onDidChange_buf_runtimeType))
        {
            onDidChange_buf = valueDeserializer.readOnDidChangeCallback()
        }
        const onDidChange_result : OnDidChangeCallback | undefined = onDidChange_buf
        let value : StyledStringChangedListener = ({onWillChange: onWillChange_result, onDidChange: onDidChange_result} as StyledStringChangedListener)
        return value
    }
    readSummary(): Summary {
        let valueDeserializer : Deserializer = this
        const summary_buf_size : int32 = valueDeserializer.readInt32()
        let summary_buf : Map<string, int64> = new Map<string, int64>()
        // TODO: TS map resize
        for (let summary_buf_i = 0; summary_buf_i < summary_buf_size; summary_buf_i++) {
            const summary_buf_key : string = (valueDeserializer.readString() as string)
            const summary_buf_value : int64 = valueDeserializer.readInt64()
            summary_buf.set(summary_buf_key, summary_buf_value)
        }
        const summary_result : Map<string, int64> = summary_buf
        const totalSize_result : int64 = valueDeserializer.readInt64()
        let value : Summary = ({summary: summary_result, totalSize: totalSize_result} as Summary)
        return value
    }
    readSurfaceRect(): SurfaceRect {
        let valueDeserializer : Deserializer = this
        const offsetX_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offsetX_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (offsetX_buf_runtimeType))
        {
            offsetX_buf = (valueDeserializer.readNumber() as number)
        }
        const offsetX_result : number | undefined = offsetX_buf
        const offsetY_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offsetY_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (offsetY_buf_runtimeType))
        {
            offsetY_buf = (valueDeserializer.readNumber() as number)
        }
        const offsetY_result : number | undefined = offsetY_buf
        const surfaceWidth_result : number = (valueDeserializer.readNumber() as number)
        const surfaceHeight_result : number = (valueDeserializer.readNumber() as number)
        let value : SurfaceRect = ({offsetX: offsetX_result, offsetY: offsetY_result, surfaceWidth: surfaceWidth_result, surfaceHeight: surfaceHeight_result} as SurfaceRect)
        return value
    }
    readSurfaceRotationOptions(): SurfaceRotationOptions {
        let valueDeserializer : Deserializer = this
        const lock_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lock_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (lock_buf_runtimeType))
        {
            lock_buf = valueDeserializer.readBoolean()
        }
        const lock_result : boolean | undefined = lock_buf
        let value : SurfaceRotationOptions = ({lock: lock_result} as SurfaceRotationOptions)
        return value
    }
    readSweepGradientOptions(): SweepGradientOptions {
        let valueDeserializer : Deserializer = this
        const center_buf_value0 : Length = (valueDeserializer.readLength() as Length)
        const center_buf_value1 : Length = (valueDeserializer.readLength() as Length)
        const center_result : [ Length, Length ] = ([center_buf_value0, center_buf_value1] as [ Length, Length ])
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            const start_buf__selector : int32 = valueDeserializer.readInt8()
            let start_buf_ : number | string | undefined
            if (start_buf__selector == 0) {
                start_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (start_buf__selector == 1) {
                start_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for start_buf_ has to be chosen through deserialisation.")
            }
            start_buf = (start_buf_ as number | string)
        }
        const start_result : number | string | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            const end_buf__selector : int32 = valueDeserializer.readInt8()
            let end_buf_ : number | string | undefined
            if (end_buf__selector == 0) {
                end_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (end_buf__selector == 1) {
                end_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for end_buf_ has to be chosen through deserialisation.")
            }
            end_buf = (end_buf_ as number | string)
        }
        const end_result : number | string | undefined = end_buf
        const rotation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let rotation_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (rotation_buf_runtimeType))
        {
            const rotation_buf__selector : int32 = valueDeserializer.readInt8()
            let rotation_buf_ : number | string | undefined
            if (rotation_buf__selector == 0) {
                rotation_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (rotation_buf__selector == 1) {
                rotation_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for rotation_buf_ has to be chosen through deserialisation.")
            }
            rotation_buf = (rotation_buf_ as number | string)
        }
        const rotation_result : number | string | undefined = rotation_buf
        const colors_buf_length : int32 = valueDeserializer.readInt32()
        let colors_buf : Array<[ ResourceColor, number ]> = new Array<[ ResourceColor, number ]>(colors_buf_length)
        for (let colors_buf_i = 0; colors_buf_i < colors_buf_length; colors_buf_i++) {
            const colors_buf_buf_value0_buf_selector : int32 = valueDeserializer.readInt8()
            let colors_buf_buf_value0_buf : Color | number | string | Resource | undefined
            if (colors_buf_buf_value0_buf_selector == 0) {
                colors_buf_buf_value0_buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (colors_buf_buf_value0_buf_selector == 1) {
                colors_buf_buf_value0_buf = (valueDeserializer.readNumber() as number)
            }
            else if (colors_buf_buf_value0_buf_selector == 2) {
                colors_buf_buf_value0_buf = (valueDeserializer.readString() as string)
            }
            else if (colors_buf_buf_value0_buf_selector == 3) {
                colors_buf_buf_value0_buf = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for colors_buf_buf_value0_buf has to be chosen through deserialisation.")
            }
            const colors_buf_buf_value0 : ResourceColor = (colors_buf_buf_value0_buf as Color | number | string | Resource)
            const colors_buf_buf_value1 : number = (valueDeserializer.readNumber() as number)
            colors_buf[colors_buf_i] = ([colors_buf_buf_value0, colors_buf_buf_value1] as [ ResourceColor, number ])
        }
        const colors_result : Array<[ ResourceColor, number ]> = colors_buf
        const repeating_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let repeating_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (repeating_buf_runtimeType))
        {
            repeating_buf = valueDeserializer.readBoolean()
        }
        const repeating_result : boolean | undefined = repeating_buf
        let value : SweepGradientOptions = ({center: center_result, start: start_result, end: end_result, rotation: rotation_result, colors: colors_result, repeating: repeating_result} as SweepGradientOptions)
        return value
    }
    readSwipeActionItem(): SwipeActionItem {
        let valueDeserializer : Deserializer = this
        const builder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let builder_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (builder_buf_runtimeType))
        {
            builder_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const builder_result : CustomBuilder | undefined = builder_buf
        const builderComponent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let builderComponent_buf : ComponentContent | undefined
        if ((RuntimeType.UNDEFINED) != (builderComponent_buf_runtimeType))
        {
            builderComponent_buf = (valueDeserializer.readComponentContent() as ComponentContent)
        }
        const builderComponent_result : ComponentContent | undefined = builderComponent_buf
        const actionAreaDistance_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let actionAreaDistance_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (actionAreaDistance_buf_runtimeType))
        {
            actionAreaDistance_buf = (valueDeserializer.readLength() as Length)
        }
        const actionAreaDistance_result : Length | undefined = actionAreaDistance_buf
        const onAction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAction_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAction_buf_runtimeType))
        {
            onAction_buf = valueDeserializer.readCallback_Void()
        }
        const onAction_result : (() => void) | undefined = onAction_buf
        const onEnterActionArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onEnterActionArea_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onEnterActionArea_buf_runtimeType))
        {
            onEnterActionArea_buf = valueDeserializer.readCallback_Void()
        }
        const onEnterActionArea_result : (() => void) | undefined = onEnterActionArea_buf
        const onExitActionArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onExitActionArea_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onExitActionArea_buf_runtimeType))
        {
            onExitActionArea_buf = valueDeserializer.readCallback_Void()
        }
        const onExitActionArea_result : (() => void) | undefined = onExitActionArea_buf
        const onStateChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onStateChange_buf : ((state: SwipeActionState) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onStateChange_buf_runtimeType))
        {
            onStateChange_buf = valueDeserializer.readCallback_SwipeActionState_Void()
        }
        const onStateChange_result : ((state: SwipeActionState) => void) | undefined = onStateChange_buf
        let value : SwipeActionItem = ({builder: builder_result, builderComponent: builderComponent_result, actionAreaDistance: actionAreaDistance_result, onAction: onAction_result, onEnterActionArea: onEnterActionArea_result, onExitActionArea: onExitActionArea_result, onStateChange: onStateChange_result} as SwipeActionItem)
        return value
    }
    readSwipeGestureHandlerOptions(): SwipeGestureHandlerOptions {
        let valueDeserializer : Deserializer = this
        const isFingerCountLimited_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isFingerCountLimited_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isFingerCountLimited_buf_runtimeType))
        {
            isFingerCountLimited_buf = valueDeserializer.readBoolean()
        }
        const isFingerCountLimited_result : boolean | undefined = isFingerCountLimited_buf
        const fingers_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fingers_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (fingers_buf_runtimeType))
        {
            fingers_buf = (valueDeserializer.readNumber() as number)
        }
        const fingers_result : number | undefined = fingers_buf
        const direction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let direction_buf : SwipeDirection | undefined
        if ((RuntimeType.UNDEFINED) != (direction_buf_runtimeType))
        {
            direction_buf = TypeChecker.SwipeDirection_FromNumeric(valueDeserializer.readInt32())
        }
        const direction_result : SwipeDirection | undefined = direction_buf
        const speed_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let speed_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (speed_buf_runtimeType))
        {
            speed_buf = (valueDeserializer.readNumber() as number)
        }
        const speed_result : number | undefined = speed_buf
        let value : SwipeGestureHandlerOptions = ({isFingerCountLimited: isFingerCountLimited_result, fingers: fingers_result, direction: direction_result, speed: speed_result} as SwipeGestureHandlerOptions)
        return value
    }
    readSwiperAutoFill(): SwiperAutoFill {
        let valueDeserializer : Deserializer = this
        const minSize_buf_selector : int32 = valueDeserializer.readInt8()
        let minSize_buf : string | number | undefined
        if (minSize_buf_selector == 0) {
            minSize_buf = (valueDeserializer.readString() as string)
        }
        else if (minSize_buf_selector == 1) {
            minSize_buf = (valueDeserializer.readNumber() as number)
        }
        else {
            throw new Error("One of the branches for minSize_buf has to be chosen through deserialisation.")
        }
        const minSize_result : VP = (minSize_buf as string | number)
        let value : SwiperAutoFill = ({minSize: minSize_result} as SwiperAutoFill)
        return value
    }
    readSwiperContentAnimatedTransition(): SwiperContentAnimatedTransition {
        let valueDeserializer : Deserializer = this
        const timeout_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let timeout_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (timeout_buf_runtimeType))
        {
            timeout_buf = (valueDeserializer.readNumber() as number)
        }
        const timeout_result : number | undefined = timeout_buf
        const transition_result : ((parameter: SwiperContentTransitionProxy) => void) = valueDeserializer.readCallback_SwiperContentTransitionProxy_Void()
        let value : SwiperContentAnimatedTransition = ({timeout: timeout_result, transition: transition_result} as SwiperContentAnimatedTransition)
        return value
    }
    readSystemAdaptiveOptions(): SystemAdaptiveOptions {
        let valueDeserializer : Deserializer = this
        const disableSystemAdaptation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disableSystemAdaptation_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (disableSystemAdaptation_buf_runtimeType))
        {
            disableSystemAdaptation_buf = valueDeserializer.readBoolean()
        }
        const disableSystemAdaptation_result : boolean | undefined = disableSystemAdaptation_buf
        let value : SystemAdaptiveOptions = ({disableSystemAdaptation: disableSystemAdaptation_result} as SystemAdaptiveOptions)
        return value
    }
    readSystemBarStyle(): SystemBarStyle {
        let valueDeserializer : Deserializer = this
        const statusBarContentColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let statusBarContentColor_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (statusBarContentColor_buf_runtimeType))
        {
            statusBarContentColor_buf = (valueDeserializer.readString() as string)
        }
        const statusBarContentColor_result : string | undefined = statusBarContentColor_buf
        let value : SystemBarStyle = ({statusBarContentColor: statusBarContentColor_result} as SystemBarStyle)
        return value
    }
    readTabBarSymbol(): TabBarSymbol {
        let valueDeserializer : Deserializer = this
        const normal_result : SymbolGlyphModifier = valueDeserializer.readSymbolGlyphModifier()
        const selected_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selected_buf : SymbolGlyphModifier | undefined
        if ((RuntimeType.UNDEFINED) != (selected_buf_runtimeType))
        {
            selected_buf = valueDeserializer.readSymbolGlyphModifier()
        }
        const selected_result : SymbolGlyphModifier | undefined = selected_buf
        let value : TabBarSymbol = ({normal: normal_result, selected: selected_result} as TabBarSymbol)
        return value
    }
    readTabContentAnimatedTransition(): TabContentAnimatedTransition {
        let valueDeserializer : Deserializer = this
        const timeout_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let timeout_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (timeout_buf_runtimeType))
        {
            timeout_buf = (valueDeserializer.readNumber() as number)
        }
        const timeout_result : number | undefined = timeout_buf
        const transition_result : ((parameter: TabContentTransitionProxy) => void) = valueDeserializer.readCallback_TabContentTransitionProxy_Void()
        let value : TabContentAnimatedTransition = ({timeout: timeout_result, transition: transition_result} as TabContentAnimatedTransition)
        return value
    }
    readTapGestureParameters(): TapGestureParameters {
        let valueDeserializer : Deserializer = this
        const isFingerCountLimited_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isFingerCountLimited_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isFingerCountLimited_buf_runtimeType))
        {
            isFingerCountLimited_buf = valueDeserializer.readBoolean()
        }
        const isFingerCountLimited_result : boolean | undefined = isFingerCountLimited_buf
        const count_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let count_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (count_buf_runtimeType))
        {
            count_buf = (valueDeserializer.readNumber() as number)
        }
        const count_result : number | undefined = count_buf
        const fingers_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fingers_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (fingers_buf_runtimeType))
        {
            fingers_buf = (valueDeserializer.readNumber() as number)
        }
        const fingers_result : number | undefined = fingers_buf
        const distanceThreshold_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let distanceThreshold_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (distanceThreshold_buf_runtimeType))
        {
            distanceThreshold_buf = (valueDeserializer.readNumber() as number)
        }
        const distanceThreshold_result : number | undefined = distanceThreshold_buf
        let value : TapGestureParameters = ({isFingerCountLimited: isFingerCountLimited_result, count: count_result, fingers: fingers_result, distanceThreshold: distanceThreshold_result} as TapGestureParameters)
        return value
    }
    readTextBox(): TextBox {
        let valueDeserializer : Deserializer = this
        const rect_result : Rect = valueDeserializer.readRect()
        const direction_result : TextDirection = TypeChecker.TextDirection_FromNumeric(valueDeserializer.readInt32())
        let value : TextBox = ({rect: rect_result, direction: direction_result} as TextBox)
        return value
    }
    readTextClockOptions(): TextClockOptions {
        let valueDeserializer : Deserializer = this
        const timeZoneOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let timeZoneOffset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (timeZoneOffset_buf_runtimeType))
        {
            timeZoneOffset_buf = (valueDeserializer.readNumber() as number)
        }
        const timeZoneOffset_result : number | undefined = timeZoneOffset_buf
        const controller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let controller_buf : TextClockController | undefined
        if ((RuntimeType.UNDEFINED) != (controller_buf_runtimeType))
        {
            controller_buf = (valueDeserializer.readTextClockController() as TextClockController)
        }
        const controller_result : TextClockController | undefined = controller_buf
        let value : TextClockOptions = ({timeZoneOffset: timeZoneOffset_result, controller: controller_result} as TextClockOptions)
        return value
    }
    readTextContentControllerOptions(): TextContentControllerOptions {
        let valueDeserializer : Deserializer = this
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = (valueDeserializer.readNumber() as number)
        }
        const offset_result : number | undefined = offset_buf
        let value : TextContentControllerOptions = ({offset: offset_result} as TextContentControllerOptions)
        return value
    }
    readTextMarqueeOptions(): TextMarqueeOptions {
        let valueDeserializer : Deserializer = this
        const start_result : boolean = valueDeserializer.readBoolean()
        const step_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let step_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (step_buf_runtimeType))
        {
            step_buf = (valueDeserializer.readNumber() as number)
        }
        const step_result : number | undefined = step_buf
        const loop_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let loop_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (loop_buf_runtimeType))
        {
            loop_buf = (valueDeserializer.readNumber() as number)
        }
        const loop_result : number | undefined = loop_buf
        const fromStart_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fromStart_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (fromStart_buf_runtimeType))
        {
            fromStart_buf = valueDeserializer.readBoolean()
        }
        const fromStart_result : boolean | undefined = fromStart_buf
        const delay_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let delay_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (delay_buf_runtimeType))
        {
            delay_buf = (valueDeserializer.readNumber() as number)
        }
        const delay_result : number | undefined = delay_buf
        const fadeout_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fadeout_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (fadeout_buf_runtimeType))
        {
            fadeout_buf = valueDeserializer.readBoolean()
        }
        const fadeout_result : boolean | undefined = fadeout_buf
        const marqueeStartPolicy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let marqueeStartPolicy_buf : MarqueeStartPolicy | undefined
        if ((RuntimeType.UNDEFINED) != (marqueeStartPolicy_buf_runtimeType))
        {
            marqueeStartPolicy_buf = TypeChecker.MarqueeStartPolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const marqueeStartPolicy_result : MarqueeStartPolicy | undefined = marqueeStartPolicy_buf
        let value : TextMarqueeOptions = ({start: start_result, step: step_result, loop: loop_result, fromStart: fromStart_result, delay: delay_result, fadeout: fadeout_result, marqueeStartPolicy: marqueeStartPolicy_result} as TextMarqueeOptions)
        return value
    }
    readTextRange(): TextRange {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readNumber() as number)
        }
        const start_result : number | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readNumber() as number)
        }
        const end_result : number | undefined = end_buf
        let value : TextRange = ({start: start_result, end: end_result} as TextRange)
        return value
    }
    readTextShadowStyle(): TextShadowStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextShadowStyleInternal.fromPtr(ptr)
    }
    readTextStyle_alert_dialog(): TextStyle_alert_dialog {
        let valueDeserializer : Deserializer = this
        const wordBreak_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let wordBreak_buf : WordBreak | undefined
        if ((RuntimeType.UNDEFINED) != (wordBreak_buf_runtimeType))
        {
            wordBreak_buf = TypeChecker.WordBreak_FromNumeric(valueDeserializer.readInt32())
        }
        const wordBreak_result : WordBreak | undefined = wordBreak_buf
        let value : TextStyle_alert_dialog = ({wordBreak: wordBreak_result} as TextStyle_alert_dialog)
        return value
    }
    readTextTimerOptions(): TextTimerOptions {
        let valueDeserializer : Deserializer = this
        const isCountDown_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isCountDown_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isCountDown_buf_runtimeType))
        {
            isCountDown_buf = valueDeserializer.readBoolean()
        }
        const isCountDown_result : boolean | undefined = isCountDown_buf
        const count_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let count_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (count_buf_runtimeType))
        {
            count_buf = (valueDeserializer.readNumber() as number)
        }
        const count_result : number | undefined = count_buf
        const controller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let controller_buf : TextTimerController | undefined
        if ((RuntimeType.UNDEFINED) != (controller_buf_runtimeType))
        {
            controller_buf = (valueDeserializer.readTextTimerController() as TextTimerController)
        }
        const controller_result : TextTimerController | undefined = controller_buf
        let value : TextTimerOptions = ({isCountDown: isCountDown_result, count: count_result, controller: controller_result} as TextTimerOptions)
        return value
    }
    readTimePickerOptions(): TimePickerOptions {
        let valueDeserializer : Deserializer = this
        const selected_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selected_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (selected_buf_runtimeType))
        {
            selected_buf = new Date(valueDeserializer.readInt64())
        }
        const selected_result : Date | undefined = selected_buf
        const format_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let format_buf : TimePickerFormat | undefined
        if ((RuntimeType.UNDEFINED) != (format_buf_runtimeType))
        {
            format_buf = TypeChecker.TimePickerFormat_FromNumeric(valueDeserializer.readInt32())
        }
        const format_result : TimePickerFormat | undefined = format_buf
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = new Date(valueDeserializer.readInt64())
        }
        const start_result : Date | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = new Date(valueDeserializer.readInt64())
        }
        const end_result : Date | undefined = end_buf
        let value : TimePickerOptions = ({selected: selected_result, format: format_result, start: start_result, end: end_result} as TimePickerOptions)
        return value
    }
    readTipsOptions(): TipsOptions {
        let valueDeserializer : Deserializer = this
        const appearingTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let appearingTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (appearingTime_buf_runtimeType))
        {
            appearingTime_buf = (valueDeserializer.readNumber() as number)
        }
        const appearingTime_result : number | undefined = appearingTime_buf
        const disappearingTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disappearingTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (disappearingTime_buf_runtimeType))
        {
            disappearingTime_buf = (valueDeserializer.readNumber() as number)
        }
        const disappearingTime_result : number | undefined = disappearingTime_buf
        const appearingTimeWithContinuousOperation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let appearingTimeWithContinuousOperation_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (appearingTimeWithContinuousOperation_buf_runtimeType))
        {
            appearingTimeWithContinuousOperation_buf = (valueDeserializer.readNumber() as number)
        }
        const appearingTimeWithContinuousOperation_result : number | undefined = appearingTimeWithContinuousOperation_buf
        const disappearingTimeWithContinuousOperation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disappearingTimeWithContinuousOperation_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (disappearingTimeWithContinuousOperation_buf_runtimeType))
        {
            disappearingTimeWithContinuousOperation_buf = (valueDeserializer.readNumber() as number)
        }
        const disappearingTimeWithContinuousOperation_result : number | undefined = disappearingTimeWithContinuousOperation_buf
        const enableArrow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableArrow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableArrow_buf_runtimeType))
        {
            enableArrow_buf = valueDeserializer.readBoolean()
        }
        const enableArrow_result : boolean | undefined = enableArrow_buf
        const arrowPointPosition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowPointPosition_buf : ArrowPointPosition | undefined
        if ((RuntimeType.UNDEFINED) != (arrowPointPosition_buf_runtimeType))
        {
            arrowPointPosition_buf = TypeChecker.ArrowPointPosition_FromNumeric(valueDeserializer.readInt32())
        }
        const arrowPointPosition_result : ArrowPointPosition | undefined = arrowPointPosition_buf
        const arrowWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowWidth_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (arrowWidth_buf_runtimeType))
        {
            arrowWidth_buf = (valueDeserializer.readLength() as Dimension)
        }
        const arrowWidth_result : Dimension | undefined = arrowWidth_buf
        const arrowHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowHeight_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (arrowHeight_buf_runtimeType))
        {
            arrowHeight_buf = (valueDeserializer.readLength() as Dimension)
        }
        const arrowHeight_result : Dimension | undefined = arrowHeight_buf
        let value : TipsOptions = ({appearingTime: appearingTime_result, disappearingTime: disappearingTime_result, appearingTimeWithContinuousOperation: appearingTimeWithContinuousOperation_result, disappearingTimeWithContinuousOperation: disappearingTimeWithContinuousOperation_result, enableArrow: enableArrow_result, arrowPointPosition: arrowPointPosition_result, arrowWidth: arrowWidth_result, arrowHeight: arrowHeight_result} as TipsOptions)
        return value
    }
    readToggleOptions(): ToggleOptions {
        let valueDeserializer : Deserializer = this
        const type_result : ToggleType = TypeChecker.ToggleType_FromNumeric(valueDeserializer.readInt32())
        const isOn_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isOn_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isOn_buf_runtimeType))
        {
            isOn_buf = valueDeserializer.readBoolean()
        }
        const isOn_result : boolean | undefined = isOn_buf
        let value : ToggleOptions = ({type: type_result, isOn: isOn_result} as ToggleOptions)
        return value
    }
    readTouchObject(): TouchObject {
        let valueDeserializer : Deserializer = this
        const type_result : TouchType = TypeChecker.TouchType_FromNumeric(valueDeserializer.readInt32())
        const id_result : number = (valueDeserializer.readNumber() as number)
        const displayX_result : number = (valueDeserializer.readNumber() as number)
        const displayY_result : number = (valueDeserializer.readNumber() as number)
        const windowX_result : number = (valueDeserializer.readNumber() as number)
        const windowY_result : number = (valueDeserializer.readNumber() as number)
        const screenX_result : number = (valueDeserializer.readNumber() as number)
        const screenY_result : number = (valueDeserializer.readNumber() as number)
        const x_result : number = (valueDeserializer.readNumber() as number)
        const y_result : number = (valueDeserializer.readNumber() as number)
        const hand_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hand_buf : InteractionHand | undefined
        if ((RuntimeType.UNDEFINED) != (hand_buf_runtimeType))
        {
            hand_buf = TypeChecker.InteractionHand_FromNumeric(valueDeserializer.readInt32())
        }
        const hand_result : InteractionHand | undefined = hand_buf
        const pressedTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let pressedTime_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (pressedTime_buf_runtimeType))
        {
            pressedTime_buf = (valueDeserializer.readNumber() as number)
        }
        const pressedTime_result : number | undefined = pressedTime_buf
        const pressure_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let pressure_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (pressure_buf_runtimeType))
        {
            pressure_buf = (valueDeserializer.readNumber() as number)
        }
        const pressure_result : number | undefined = pressure_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readNumber() as number)
        }
        const width_result : number | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readNumber() as number)
        }
        const height_result : number | undefined = height_buf
        let value : TouchObject = ({type: type_result, id: id_result, displayX: displayX_result, displayY: displayY_result, windowX: windowX_result, windowY: windowY_result, screenX: screenX_result, screenY: screenY_result, x: x_result, y: y_result, hand: hand_result, pressedTime: pressedTime_result, pressure: pressure_result, width: width_result, height: height_result} as TouchObject)
        return value
    }
    readTouchResult(): TouchResult {
        let valueDeserializer : Deserializer = this
        const strategy_result : TouchTestStrategy = TypeChecker.TouchTestStrategy_FromNumeric(valueDeserializer.readInt32())
        const id_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let id_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (id_buf_runtimeType))
        {
            id_buf = (valueDeserializer.readString() as string)
        }
        const id_result : string | undefined = id_buf
        let value : TouchResult = ({strategy: strategy_result, id: id_result} as TouchResult)
        return value
    }
    readTransformationMatrix(): TransformationMatrix {
        let valueDeserializer : Deserializer = this
        const matrix4x4_buf_length : int32 = valueDeserializer.readInt32()
        let matrix4x4_buf : Array<number> = new Array<number>(matrix4x4_buf_length)
        for (let matrix4x4_buf_i = 0; matrix4x4_buf_i < matrix4x4_buf_length; matrix4x4_buf_i++) {
            matrix4x4_buf[matrix4x4_buf_i] = (valueDeserializer.readNumber() as number)
        }
        const matrix4x4_result : Array<number> = matrix4x4_buf
        let value : TransformationMatrix = ({matrix4x4: matrix4x4_result} as TransformationMatrix)
        return value
    }
    readTranslateOption(): TranslateOption {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            x_buf = (valueDeserializer.readNumber() as number)
        }
        const x_result : number | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            y_buf = (valueDeserializer.readNumber() as number)
        }
        const y_result : number | undefined = y_buf
        const z_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let z_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (z_buf_runtimeType))
        {
            z_buf = (valueDeserializer.readNumber() as number)
        }
        const z_result : number | undefined = z_buf
        let value : TranslateOption = ({x: x_result, y: y_result, z: z_result} as TranslateOption)
        return value
    }
    readTranslateOptions(): TranslateOptions {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            const x_buf__selector : int32 = valueDeserializer.readInt8()
            let x_buf_ : number | string | undefined
            if (x_buf__selector == 0) {
                x_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (x_buf__selector == 1) {
                x_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for x_buf_ has to be chosen through deserialisation.")
            }
            x_buf = (x_buf_ as number | string)
        }
        const x_result : number | string | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            const y_buf__selector : int32 = valueDeserializer.readInt8()
            let y_buf_ : number | string | undefined
            if (y_buf__selector == 0) {
                y_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (y_buf__selector == 1) {
                y_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for y_buf_ has to be chosen through deserialisation.")
            }
            y_buf = (y_buf_ as number | string)
        }
        const y_result : number | string | undefined = y_buf
        const z_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let z_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (z_buf_runtimeType))
        {
            const z_buf__selector : int32 = valueDeserializer.readInt8()
            let z_buf_ : number | string | undefined
            if (z_buf__selector == 0) {
                z_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (z_buf__selector == 1) {
                z_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for z_buf_ has to be chosen through deserialisation.")
            }
            z_buf = (z_buf_ as number | string)
        }
        const z_result : number | string | undefined = z_buf
        let value : TranslateOptions = ({x: x_result, y: y_result, z: z_result} as TranslateOptions)
        return value
    }
    readUIExtensionOptions(): UIExtensionOptions {
        let valueDeserializer : Deserializer = this
        const isTransferringCaller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isTransferringCaller_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isTransferringCaller_buf_runtimeType))
        {
            isTransferringCaller_buf = valueDeserializer.readBoolean()
        }
        const isTransferringCaller_result : boolean | undefined = isTransferringCaller_buf
        const placeholder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placeholder_buf : ComponentContent | undefined
        if ((RuntimeType.UNDEFINED) != (placeholder_buf_runtimeType))
        {
            placeholder_buf = (valueDeserializer.readComponentContent() as ComponentContent)
        }
        const placeholder_result : ComponentContent | undefined = placeholder_buf
        const areaChangePlaceholder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let areaChangePlaceholder_buf : Map<string, ComponentContent> | undefined
        if ((RuntimeType.UNDEFINED) != (areaChangePlaceholder_buf_runtimeType))
        {
            const areaChangePlaceholder_buf__size : int32 = valueDeserializer.readInt32()
            let areaChangePlaceholder_buf_ : Map<string, ComponentContent> = new Map<string, ComponentContent>()
            // TODO: TS map resize
            for (let areaChangePlaceholder_buf__i = 0; areaChangePlaceholder_buf__i < areaChangePlaceholder_buf__size; areaChangePlaceholder_buf__i++) {
                const areaChangePlaceholder_buf__key : string = (valueDeserializer.readString() as string)
                const areaChangePlaceholder_buf__value : ComponentContent = (valueDeserializer.readComponentContent() as ComponentContent)
                areaChangePlaceholder_buf_.set(areaChangePlaceholder_buf__key, areaChangePlaceholder_buf__value)
            }
            areaChangePlaceholder_buf = areaChangePlaceholder_buf_
        }
        const areaChangePlaceholder_result : Map<string, ComponentContent> | undefined = areaChangePlaceholder_buf
        const dpiFollowStrategy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dpiFollowStrategy_buf : DpiFollowStrategy | undefined
        if ((RuntimeType.UNDEFINED) != (dpiFollowStrategy_buf_runtimeType))
        {
            dpiFollowStrategy_buf = TypeChecker.DpiFollowStrategy_FromNumeric(valueDeserializer.readInt32())
        }
        const dpiFollowStrategy_result : DpiFollowStrategy | undefined = dpiFollowStrategy_buf
        const windowModeFollowStrategy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let windowModeFollowStrategy_buf : WindowModeFollowStrategy | undefined
        if ((RuntimeType.UNDEFINED) != (windowModeFollowStrategy_buf_runtimeType))
        {
            windowModeFollowStrategy_buf = TypeChecker.WindowModeFollowStrategy_FromNumeric(valueDeserializer.readInt32())
        }
        const windowModeFollowStrategy_result : WindowModeFollowStrategy | undefined = windowModeFollowStrategy_buf
        let value : UIExtensionOptions = ({isTransferringCaller: isTransferringCaller_result, placeholder: placeholder_result, areaChangePlaceholder: areaChangePlaceholder_result, dpiFollowStrategy: dpiFollowStrategy_result, windowModeFollowStrategy: windowModeFollowStrategy_result} as UIExtensionOptions)
        return value
    }
    readViewportRect(): ViewportRect {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            const x_buf__selector : int32 = valueDeserializer.readInt8()
            let x_buf_ : number | string | undefined
            if (x_buf__selector == 0) {
                x_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (x_buf__selector == 1) {
                x_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for x_buf_ has to be chosen through deserialisation.")
            }
            x_buf = (x_buf_ as number | string)
        }
        const x_result : number | string | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            const y_buf__selector : int32 = valueDeserializer.readInt8()
            let y_buf_ : number | string | undefined
            if (y_buf__selector == 0) {
                y_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (y_buf__selector == 1) {
                y_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for y_buf_ has to be chosen through deserialisation.")
            }
            y_buf = (y_buf_ as number | string)
        }
        const y_result : number | string | undefined = y_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : number | string | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as number | string)
        }
        const width_result : number | string | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : number | string | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as number | string)
        }
        const height_result : number | string | undefined = height_buf
        let value : ViewportRect = ({x: x_result, y: y_result, width: width_result, height: height_result} as ViewportRect)
        return value
    }
    readVisibleAreaEventOptions(): VisibleAreaEventOptions {
        let valueDeserializer : Deserializer = this
        const ratios_buf_length : int32 = valueDeserializer.readInt32()
        let ratios_buf : Array<number> = new Array<number>(ratios_buf_length)
        for (let ratios_buf_i = 0; ratios_buf_i < ratios_buf_length; ratios_buf_i++) {
            ratios_buf[ratios_buf_i] = (valueDeserializer.readNumber() as number)
        }
        const ratios_result : Array<number> = ratios_buf
        const expectedUpdateInterval_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let expectedUpdateInterval_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (expectedUpdateInterval_buf_runtimeType))
        {
            expectedUpdateInterval_buf = (valueDeserializer.readNumber() as number)
        }
        const expectedUpdateInterval_result : number | undefined = expectedUpdateInterval_buf
        let value : VisibleAreaEventOptions = ({ratios: ratios_result, expectedUpdateInterval: expectedUpdateInterval_result} as VisibleAreaEventOptions)
        return value
    }
    readVisibleListContentInfo(): VisibleListContentInfo {
        let valueDeserializer : Deserializer = this
        const index_result : number = (valueDeserializer.readNumber() as number)
        const itemGroupArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let itemGroupArea_buf : ListItemGroupArea | undefined
        if ((RuntimeType.UNDEFINED) != (itemGroupArea_buf_runtimeType))
        {
            itemGroupArea_buf = TypeChecker.ListItemGroupArea_FromNumeric(valueDeserializer.readInt32())
        }
        const itemGroupArea_result : ListItemGroupArea | undefined = itemGroupArea_buf
        const itemIndexInGroup_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let itemIndexInGroup_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (itemIndexInGroup_buf_runtimeType))
        {
            itemIndexInGroup_buf = (valueDeserializer.readNumber() as number)
        }
        const itemIndexInGroup_result : number | undefined = itemIndexInGroup_buf
        let value : VisibleListContentInfo = ({index: index_result, itemGroupArea: itemGroupArea_result, itemIndexInGroup: itemIndexInGroup_result} as VisibleListContentInfo)
        return value
    }
    readWant(): Want {
        let valueDeserializer : Deserializer = this
        const bundleName_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bundleName_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (bundleName_buf_runtimeType))
        {
            bundleName_buf = (valueDeserializer.readString() as string)
        }
        const bundleName_result : string | undefined = bundleName_buf
        const abilityName_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let abilityName_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (abilityName_buf_runtimeType))
        {
            abilityName_buf = (valueDeserializer.readString() as string)
        }
        const abilityName_result : string | undefined = abilityName_buf
        const deviceId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let deviceId_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (deviceId_buf_runtimeType))
        {
            deviceId_buf = (valueDeserializer.readString() as string)
        }
        const deviceId_result : string | undefined = deviceId_buf
        const uri_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let uri_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (uri_buf_runtimeType))
        {
            uri_buf = (valueDeserializer.readString() as string)
        }
        const uri_result : string | undefined = uri_buf
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = (valueDeserializer.readString() as string)
        }
        const type_result : string | undefined = type_buf
        const flags_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let flags_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (flags_buf_runtimeType))
        {
            flags_buf = (valueDeserializer.readNumber() as number)
        }
        const flags_result : number | undefined = flags_buf
        const action_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let action_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (action_buf_runtimeType))
        {
            action_buf = (valueDeserializer.readString() as string)
        }
        const action_result : string | undefined = action_buf
        const parameters_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let parameters_buf : Map<string, Object> | undefined
        if ((RuntimeType.UNDEFINED) != (parameters_buf_runtimeType))
        {
            const parameters_buf__size : int32 = valueDeserializer.readInt32()
            let parameters_buf_ : Map<string, Object> = new Map<string, Object>()
            // TODO: TS map resize
            for (let parameters_buf__i = 0; parameters_buf__i < parameters_buf__size; parameters_buf__i++) {
                const parameters_buf__key : string = (valueDeserializer.readString() as string)
                const parameters_buf__value : Object = (valueDeserializer.readObject() as Object)
                parameters_buf_.set(parameters_buf__key, parameters_buf__value)
            }
            parameters_buf = parameters_buf_
        }
        const parameters_result : Map<string, Object> | undefined = parameters_buf
        const entities_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let entities_buf : Array<string> | undefined
        if ((RuntimeType.UNDEFINED) != (entities_buf_runtimeType))
        {
            const entities_buf__length : int32 = valueDeserializer.readInt32()
            let entities_buf_ : Array<string> = new Array<string>(entities_buf__length)
            for (let entities_buf__i = 0; entities_buf__i < entities_buf__length; entities_buf__i++) {
                entities_buf_[entities_buf__i] = (valueDeserializer.readString() as string)
            }
            entities_buf = entities_buf_
        }
        const entities_result : Array<string> | undefined = entities_buf
        const moduleName_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let moduleName_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (moduleName_buf_runtimeType))
        {
            moduleName_buf = (valueDeserializer.readString() as string)
        }
        const moduleName_result : string | undefined = moduleName_buf
        let value : Want = ({bundleName: bundleName_result, abilityName: abilityName_result, deviceId: deviceId_result, uri: uri_result, type: type_result, flags: flags_result, action: action_result, parameters: parameters_result, entities: entities_result, moduleName: moduleName_result} as Want)
        return value
    }
    readWaterFlowOptions(): WaterFlowOptions {
        let valueDeserializer : Deserializer = this
        const footer_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let footer_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (footer_buf_runtimeType))
        {
            footer_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const footer_result : CustomBuilder | undefined = footer_buf
        const footerContent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let footerContent_buf : ComponentContent | undefined
        if ((RuntimeType.UNDEFINED) != (footerContent_buf_runtimeType))
        {
            footerContent_buf = (valueDeserializer.readComponentContent() as ComponentContent)
        }
        const footerContent_result : ComponentContent | undefined = footerContent_buf
        const scroller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scroller_buf : Scroller | undefined
        if ((RuntimeType.UNDEFINED) != (scroller_buf_runtimeType))
        {
            scroller_buf = (valueDeserializer.readScroller() as Scroller)
        }
        const scroller_result : Scroller | undefined = scroller_buf
        const sections_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let sections_buf : WaterFlowSections | undefined
        if ((RuntimeType.UNDEFINED) != (sections_buf_runtimeType))
        {
            sections_buf = (valueDeserializer.readWaterFlowSections() as WaterFlowSections)
        }
        const sections_result : WaterFlowSections | undefined = sections_buf
        const layoutMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let layoutMode_buf : WaterFlowLayoutMode | undefined
        if ((RuntimeType.UNDEFINED) != (layoutMode_buf_runtimeType))
        {
            layoutMode_buf = TypeChecker.WaterFlowLayoutMode_FromNumeric(valueDeserializer.readInt32())
        }
        const layoutMode_result : WaterFlowLayoutMode | undefined = layoutMode_buf
        let value : WaterFlowOptions = ({footer: footer_result, footerContent: footerContent_result, scroller: scroller_result, sections: sections_result, layoutMode: layoutMode_result} as WaterFlowOptions)
        return value
    }
    readWebKeyboardCallbackInfo(): WebKeyboardCallbackInfo {
        let valueDeserializer : Deserializer = this
        const controller_result : WebKeyboardController = (valueDeserializer.readWebKeyboardController() as WebKeyboardController)
        const attributes_buf_size : int32 = valueDeserializer.readInt32()
        let attributes_buf : Map<string, string> = new Map<string, string>()
        // TODO: TS map resize
        for (let attributes_buf_i = 0; attributes_buf_i < attributes_buf_size; attributes_buf_i++) {
            const attributes_buf_key : string = (valueDeserializer.readString() as string)
            const attributes_buf_value : string = (valueDeserializer.readString() as string)
            attributes_buf.set(attributes_buf_key, attributes_buf_value)
        }
        const attributes_result : Map<string, string> = attributes_buf
        let value : WebKeyboardCallbackInfo = ({controller: controller_result, attributes: attributes_result} as WebKeyboardCallbackInfo)
        return value
    }
    readWebKeyboardOptions(): WebKeyboardOptions {
        let valueDeserializer : Deserializer = this
        const useSystemKeyboard_result : boolean = valueDeserializer.readBoolean()
        const enterKeyType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enterKeyType_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (enterKeyType_buf_runtimeType))
        {
            enterKeyType_buf = (valueDeserializer.readNumber() as number)
        }
        const enterKeyType_result : number | undefined = enterKeyType_buf
        const customKeyboard_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let customKeyboard_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (customKeyboard_buf_runtimeType))
        {
            customKeyboard_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const customKeyboard_result : CustomBuilder | undefined = customKeyboard_buf
        let value : WebKeyboardOptions = ({useSystemKeyboard: useSystemKeyboard_result, enterKeyType: enterKeyType_result, customKeyboard: customKeyboard_result} as WebKeyboardOptions)
        return value
    }
    readWebMediaOptions(): WebMediaOptions {
        let valueDeserializer : Deserializer = this
        const resumeInterval_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let resumeInterval_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (resumeInterval_buf_runtimeType))
        {
            resumeInterval_buf = (valueDeserializer.readNumber() as number)
        }
        const resumeInterval_result : number | undefined = resumeInterval_buf
        const audioExclusive_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let audioExclusive_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (audioExclusive_buf_runtimeType))
        {
            audioExclusive_buf = valueDeserializer.readBoolean()
        }
        const audioExclusive_result : boolean | undefined = audioExclusive_buf
        let value : WebMediaOptions = ({resumeInterval: resumeInterval_result, audioExclusive: audioExclusive_result} as WebMediaOptions)
        return value
    }
    readWebOptions(): WebOptionsSerializer {
        let valueDeserializer : Deserializer = this
        const src_buf_selector : int32 = valueDeserializer.readInt8()
        let src_buf : string | Resource | undefined
        if (src_buf_selector == 0) {
            src_buf = (valueDeserializer.readString() as string)
        }
        else if (src_buf_selector == 1) {
            src_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for src_buf has to be chosen through deserialisation.")
        }
        const src_result : string | Resource = (src_buf as string | Resource)
        const renderMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let renderMode_buf : RenderMode | undefined
        if ((RuntimeType.UNDEFINED) != (renderMode_buf_runtimeType))
        {
            renderMode_buf = TypeChecker.RenderMode_FromNumeric(valueDeserializer.readInt32())
        }
        const renderMode_result : RenderMode | undefined = renderMode_buf
        const incognitoMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let incognitoMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (incognitoMode_buf_runtimeType))
        {
            incognitoMode_buf = valueDeserializer.readBoolean()
        }
        const incognitoMode_result : boolean | undefined = incognitoMode_buf
        const sharedRenderProcessToken_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let sharedRenderProcessToken_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (sharedRenderProcessToken_buf_runtimeType))
        {
            sharedRenderProcessToken_buf = (valueDeserializer.readString() as string)
        }
        const sharedRenderProcessToken_result : string | undefined = sharedRenderProcessToken_buf
        let value : WebOptionsSerializer = ({src: src_result, renderMode: renderMode_result, incognitoMode: incognitoMode_result, sharedRenderProcessToken: sharedRenderProcessToken_result} as WebOptionsSerializer)
        return value
    }
    readWorkerOptions(): WorkerOptions {
        let valueDeserializer : Deserializer = this
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = (valueDeserializer.readString() as string)
        }
        const type_result : string | undefined = type_buf
        const name_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let name_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (name_buf_runtimeType))
        {
            name_buf = (valueDeserializer.readString() as string)
        }
        const name_result : string | undefined = name_buf
        const shared_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shared_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (shared_buf_runtimeType))
        {
            shared_buf = valueDeserializer.readBoolean()
        }
        const shared_result : boolean | undefined = shared_buf
        let value : WorkerOptions = ({type: type_result, name: name_result, shared: shared_result} as WorkerOptions)
        return value
    }
    readWrappedBuilder(): WrappedBuilder {
        let valueDeserializer : Deserializer = this
        const builder_result : ((args: CommonConfiguration) => void) = valueDeserializer.readCallback_WrappedBuilder_Args_Void()
        let value : WrappedBuilder = ({builder: builder_result} as WrappedBuilder)
        return value
    }
    readActionSheetButtonOptions(): ActionSheetButtonOptions {
        let valueDeserializer : Deserializer = this
        const enabled_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enabled_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enabled_buf_runtimeType))
        {
            enabled_buf = valueDeserializer.readBoolean()
        }
        const enabled_result : boolean | undefined = enabled_buf
        const defaultFocus_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let defaultFocus_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (defaultFocus_buf_runtimeType))
        {
            defaultFocus_buf = valueDeserializer.readBoolean()
        }
        const defaultFocus_result : boolean | undefined = defaultFocus_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : DialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.DialogButtonStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : DialogButtonStyle | undefined = style_buf
        const value_buf_selector : int32 = valueDeserializer.readInt8()
        let value_buf : string | Resource | undefined
        if (value_buf_selector == 0) {
            value_buf = (valueDeserializer.readString() as string)
        }
        else if (value_buf_selector == 1) {
            value_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for value_buf has to be chosen through deserialisation.")
        }
        const value_result : string | Resource = (value_buf as string | Resource)
        const action_result : VoidCallback = valueDeserializer.readVoidCallback()
        let value : ActionSheetButtonOptions = ({enabled: enabled_result, defaultFocus: defaultFocus_result, style: style_result, value: value_result, action: action_result} as ActionSheetButtonOptions)
        return value
    }
    readActionSheetOffset(): ActionSheetOffset {
        let valueDeserializer : Deserializer = this
        const dx_buf_selector : int32 = valueDeserializer.readInt8()
        let dx_buf : number | string | Resource | undefined
        if (dx_buf_selector == 0) {
            dx_buf = (valueDeserializer.readNumber() as number)
        }
        else if (dx_buf_selector == 1) {
            dx_buf = (valueDeserializer.readString() as string)
        }
        else if (dx_buf_selector == 2) {
            dx_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for dx_buf has to be chosen through deserialisation.")
        }
        const dx_result : number | string | Resource = (dx_buf as number | string | Resource)
        const dy_buf_selector : int32 = valueDeserializer.readInt8()
        let dy_buf : number | string | Resource | undefined
        if (dy_buf_selector == 0) {
            dy_buf = (valueDeserializer.readNumber() as number)
        }
        else if (dy_buf_selector == 1) {
            dy_buf = (valueDeserializer.readString() as string)
        }
        else if (dy_buf_selector == 2) {
            dy_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for dy_buf has to be chosen through deserialisation.")
        }
        const dy_result : number | string | Resource = (dy_buf as number | string | Resource)
        let value : ActionSheetOffset = ({dx: dx_result, dy: dy_result} as ActionSheetOffset)
        return value
    }
    readAlertDialogButtonBaseOptions(): AlertDialogButtonBaseOptions {
        let valueDeserializer : Deserializer = this
        const enabled_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enabled_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enabled_buf_runtimeType))
        {
            enabled_buf = valueDeserializer.readBoolean()
        }
        const enabled_result : boolean | undefined = enabled_buf
        const defaultFocus_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let defaultFocus_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (defaultFocus_buf_runtimeType))
        {
            defaultFocus_buf = valueDeserializer.readBoolean()
        }
        const defaultFocus_result : boolean | undefined = defaultFocus_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : DialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.DialogButtonStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : DialogButtonStyle | undefined = style_buf
        const value_buf_selector : int32 = valueDeserializer.readInt8()
        let value_buf : string | Resource | undefined
        if (value_buf_selector == 0) {
            value_buf = (valueDeserializer.readString() as string)
        }
        else if (value_buf_selector == 1) {
            value_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for value_buf has to be chosen through deserialisation.")
        }
        const value_result : ResourceStr = (value_buf as string | Resource)
        const fontColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontColor_buf_runtimeType))
        {
            const fontColor_buf__selector : int32 = valueDeserializer.readInt8()
            let fontColor_buf_ : Color | number | string | Resource | undefined
            if (fontColor_buf__selector == 0) {
                fontColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontColor_buf__selector == 1) {
                fontColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontColor_buf__selector == 2) {
                fontColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontColor_buf__selector == 3) {
                fontColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontColor_buf_ has to be chosen through deserialisation.")
            }
            fontColor_buf = (fontColor_buf_ as Color | number | string | Resource)
        }
        const fontColor_result : ResourceColor | undefined = fontColor_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const action_result : VoidCallback = valueDeserializer.readVoidCallback()
        let value : AlertDialogButtonBaseOptions = ({enabled: enabled_result, defaultFocus: defaultFocus_result, style: style_result, value: value_result, fontColor: fontColor_result, backgroundColor: backgroundColor_result, action: action_result} as AlertDialogButtonBaseOptions)
        return value
    }
    readAlertDialogButtonOptions(): AlertDialogButtonOptions {
        let valueDeserializer : Deserializer = this
        const enabled_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enabled_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enabled_buf_runtimeType))
        {
            enabled_buf = valueDeserializer.readBoolean()
        }
        const enabled_result : boolean | undefined = enabled_buf
        const defaultFocus_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let defaultFocus_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (defaultFocus_buf_runtimeType))
        {
            defaultFocus_buf = valueDeserializer.readBoolean()
        }
        const defaultFocus_result : boolean | undefined = defaultFocus_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : DialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.DialogButtonStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : DialogButtonStyle | undefined = style_buf
        const value_buf_selector : int32 = valueDeserializer.readInt8()
        let value_buf : string | Resource | undefined
        if (value_buf_selector == 0) {
            value_buf = (valueDeserializer.readString() as string)
        }
        else if (value_buf_selector == 1) {
            value_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for value_buf has to be chosen through deserialisation.")
        }
        const value_result : ResourceStr = (value_buf as string | Resource)
        const fontColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontColor_buf_runtimeType))
        {
            const fontColor_buf__selector : int32 = valueDeserializer.readInt8()
            let fontColor_buf_ : Color | number | string | Resource | undefined
            if (fontColor_buf__selector == 0) {
                fontColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontColor_buf__selector == 1) {
                fontColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontColor_buf__selector == 2) {
                fontColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontColor_buf__selector == 3) {
                fontColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontColor_buf_ has to be chosen through deserialisation.")
            }
            fontColor_buf = (fontColor_buf_ as Color | number | string | Resource)
        }
        const fontColor_result : ResourceColor | undefined = fontColor_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const action_result : VoidCallback = valueDeserializer.readVoidCallback()
        const primary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let primary_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (primary_buf_runtimeType))
        {
            primary_buf = valueDeserializer.readBoolean()
        }
        const primary_result : boolean | undefined = primary_buf
        let value : AlertDialogButtonOptions = ({enabled: enabled_result, defaultFocus: defaultFocus_result, style: style_result, value: value_result, fontColor: fontColor_result, backgroundColor: backgroundColor_result, action: action_result, primary: primary_result} as AlertDialogButtonOptions)
        return value
    }
    readAlignRuleOption(): AlignRuleOption {
        let valueDeserializer : Deserializer = this
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : HorizontalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            const left_buf__anchor : string = (valueDeserializer.readString() as string)
            const left_buf__align : HorizontalAlign = TypeChecker.HorizontalAlign_FromNumeric(valueDeserializer.readInt32())
            left_buf = ({anchor: left_buf__anchor, align: left_buf__align} as HorizontalAlignParam)
        }
        const left_result : HorizontalAlignParam | undefined = left_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : HorizontalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            const right_buf__anchor : string = (valueDeserializer.readString() as string)
            const right_buf__align : HorizontalAlign = TypeChecker.HorizontalAlign_FromNumeric(valueDeserializer.readInt32())
            right_buf = ({anchor: right_buf__anchor, align: right_buf__align} as HorizontalAlignParam)
        }
        const right_result : HorizontalAlignParam | undefined = right_buf
        const middle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let middle_buf : HorizontalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (middle_buf_runtimeType))
        {
            const middle_buf__anchor : string = (valueDeserializer.readString() as string)
            const middle_buf__align : HorizontalAlign = TypeChecker.HorizontalAlign_FromNumeric(valueDeserializer.readInt32())
            middle_buf = ({anchor: middle_buf__anchor, align: middle_buf__align} as HorizontalAlignParam)
        }
        const middle_result : HorizontalAlignParam | undefined = middle_buf
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : VerticalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            const top_buf__anchor : string = (valueDeserializer.readString() as string)
            const top_buf__align : VerticalAlign = TypeChecker.VerticalAlign_FromNumeric(valueDeserializer.readInt32())
            top_buf = ({anchor: top_buf__anchor, align: top_buf__align} as VerticalAlignParam)
        }
        const top_result : VerticalAlignParam | undefined = top_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : VerticalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            const bottom_buf__anchor : string = (valueDeserializer.readString() as string)
            const bottom_buf__align : VerticalAlign = TypeChecker.VerticalAlign_FromNumeric(valueDeserializer.readInt32())
            bottom_buf = ({anchor: bottom_buf__anchor, align: bottom_buf__align} as VerticalAlignParam)
        }
        const bottom_result : VerticalAlignParam | undefined = bottom_buf
        const center_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let center_buf : VerticalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (center_buf_runtimeType))
        {
            const center_buf__anchor : string = (valueDeserializer.readString() as string)
            const center_buf__align : VerticalAlign = TypeChecker.VerticalAlign_FromNumeric(valueDeserializer.readInt32())
            center_buf = ({anchor: center_buf__anchor, align: center_buf__align} as VerticalAlignParam)
        }
        const center_result : VerticalAlignParam | undefined = center_buf
        const bias_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bias_buf : Bias | undefined
        if ((RuntimeType.UNDEFINED) != (bias_buf_runtimeType))
        {
            bias_buf = valueDeserializer.readBias()
        }
        const bias_result : Bias | undefined = bias_buf
        let value : AlignRuleOption = ({left: left_result, right: right_result, middle: middle_result, top: top_result, bottom: bottom_result, center: center_result, bias: bias_result} as AlignRuleOption)
        return value
    }
    readAnimateParam(): AnimateParam {
        let valueDeserializer : Deserializer = this
        const duration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let duration_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (duration_buf_runtimeType))
        {
            duration_buf = (valueDeserializer.readNumber() as number)
        }
        const duration_result : number | undefined = duration_buf
        const tempo_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let tempo_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (tempo_buf_runtimeType))
        {
            tempo_buf = (valueDeserializer.readNumber() as number)
        }
        const tempo_result : number | undefined = tempo_buf
        const curve_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let curve_buf : Curve | string | ICurve | undefined
        if ((RuntimeType.UNDEFINED) != (curve_buf_runtimeType))
        {
            const curve_buf__selector : int32 = valueDeserializer.readInt8()
            let curve_buf_ : Curve | string | ICurve | undefined
            if (curve_buf__selector == 0) {
                curve_buf_ = TypeChecker.Curve_FromNumeric(valueDeserializer.readInt32())
            }
            else if (curve_buf__selector == 1) {
                curve_buf_ = (valueDeserializer.readString() as string)
            }
            else if (curve_buf__selector == 2) {
                curve_buf_ = (valueDeserializer.readICurve() as ICurve)
            }
            else {
                throw new Error("One of the branches for curve_buf_ has to be chosen through deserialisation.")
            }
            curve_buf = (curve_buf_ as Curve | string | ICurve)
        }
        const curve_result : Curve | string | ICurve | undefined = curve_buf
        const delay_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let delay_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (delay_buf_runtimeType))
        {
            delay_buf = (valueDeserializer.readNumber() as number)
        }
        const delay_result : number | undefined = delay_buf
        const iterations_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iterations_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (iterations_buf_runtimeType))
        {
            iterations_buf = (valueDeserializer.readNumber() as number)
        }
        const iterations_result : number | undefined = iterations_buf
        const playMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let playMode_buf : PlayMode | undefined
        if ((RuntimeType.UNDEFINED) != (playMode_buf_runtimeType))
        {
            playMode_buf = TypeChecker.PlayMode_FromNumeric(valueDeserializer.readInt32())
        }
        const playMode_result : PlayMode | undefined = playMode_buf
        const onFinish_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onFinish_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onFinish_buf_runtimeType))
        {
            onFinish_buf = valueDeserializer.readCallback_Void()
        }
        const onFinish_result : (() => void) | undefined = onFinish_buf
        const finishCallbackType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let finishCallbackType_buf : FinishCallbackType | undefined
        if ((RuntimeType.UNDEFINED) != (finishCallbackType_buf_runtimeType))
        {
            finishCallbackType_buf = TypeChecker.FinishCallbackType_FromNumeric(valueDeserializer.readInt32())
        }
        const finishCallbackType_result : FinishCallbackType | undefined = finishCallbackType_buf
        const expectedFrameRateRange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let expectedFrameRateRange_buf : ExpectedFrameRateRange | undefined
        if ((RuntimeType.UNDEFINED) != (expectedFrameRateRange_buf_runtimeType))
        {
            expectedFrameRateRange_buf = valueDeserializer.readExpectedFrameRateRange()
        }
        const expectedFrameRateRange_result : ExpectedFrameRateRange | undefined = expectedFrameRateRange_buf
        let value : AnimateParam = ({duration: duration_result, tempo: tempo_result, curve: curve_result, delay: delay_result, iterations: iterations_result, playMode: playMode_result, onFinish: onFinish_result, finishCallbackType: finishCallbackType_result, expectedFrameRateRange: expectedFrameRateRange_result} as AnimateParam)
        return value
    }
    readArea(): Area {
        let valueDeserializer : Deserializer = this
        const width_result : Length = (valueDeserializer.readLength() as Length)
        const height_result : Length = (valueDeserializer.readLength() as Length)
        const position_result : Position = valueDeserializer.readPosition()
        const globalPosition_result : Position = valueDeserializer.readPosition()
        let value : Area = ({width: width_result, height: height_result, position: position_result, globalPosition: globalPosition_result} as Area)
        return value
    }
    readArrowStyle(): ArrowStyle {
        let valueDeserializer : Deserializer = this
        const showBackground_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showBackground_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showBackground_buf_runtimeType))
        {
            showBackground_buf = valueDeserializer.readBoolean()
        }
        const showBackground_result : boolean | undefined = showBackground_buf
        const isSidebarMiddle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isSidebarMiddle_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isSidebarMiddle_buf_runtimeType))
        {
            isSidebarMiddle_buf = valueDeserializer.readBoolean()
        }
        const isSidebarMiddle_result : boolean | undefined = isSidebarMiddle_buf
        const backgroundSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundSize_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundSize_buf_runtimeType))
        {
            backgroundSize_buf = (valueDeserializer.readLength() as Length)
        }
        const backgroundSize_result : Length | undefined = backgroundSize_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const arrowSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowSize_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (arrowSize_buf_runtimeType))
        {
            arrowSize_buf = (valueDeserializer.readLength() as Length)
        }
        const arrowSize_result : Length | undefined = arrowSize_buf
        const arrowColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (arrowColor_buf_runtimeType))
        {
            const arrowColor_buf__selector : int32 = valueDeserializer.readInt8()
            let arrowColor_buf_ : Color | number | string | Resource | undefined
            if (arrowColor_buf__selector == 0) {
                arrowColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (arrowColor_buf__selector == 1) {
                arrowColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (arrowColor_buf__selector == 2) {
                arrowColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (arrowColor_buf__selector == 3) {
                arrowColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for arrowColor_buf_ has to be chosen through deserialisation.")
            }
            arrowColor_buf = (arrowColor_buf_ as Color | number | string | Resource)
        }
        const arrowColor_result : ResourceColor | undefined = arrowColor_buf
        let value : ArrowStyle = ({showBackground: showBackground_result, isSidebarMiddle: isSidebarMiddle_result, backgroundSize: backgroundSize_result, backgroundColor: backgroundColor_result, arrowSize: arrowSize_result, arrowColor: arrowColor_result} as ArrowStyle)
        return value
    }
    readBackgroundBlurStyleOptions(): BackgroundBlurStyleOptions {
        let valueDeserializer : Deserializer = this
        const colorMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let colorMode_buf : ThemeColorMode | undefined
        if ((RuntimeType.UNDEFINED) != (colorMode_buf_runtimeType))
        {
            colorMode_buf = TypeChecker.ThemeColorMode_FromNumeric(valueDeserializer.readInt32())
        }
        const colorMode_result : ThemeColorMode | undefined = colorMode_buf
        const adaptiveColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let adaptiveColor_buf : AdaptiveColor | undefined
        if ((RuntimeType.UNDEFINED) != (adaptiveColor_buf_runtimeType))
        {
            adaptiveColor_buf = TypeChecker.AdaptiveColor_FromNumeric(valueDeserializer.readInt32())
        }
        const adaptiveColor_result : AdaptiveColor | undefined = adaptiveColor_buf
        const scale_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scale_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (scale_buf_runtimeType))
        {
            scale_buf = (valueDeserializer.readNumber() as number)
        }
        const scale_result : number | undefined = scale_buf
        const blurOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let blurOptions_buf : BlurOptions | undefined
        if ((RuntimeType.UNDEFINED) != (blurOptions_buf_runtimeType))
        {
            blurOptions_buf = valueDeserializer.readBlurOptions()
        }
        const blurOptions_result : BlurOptions | undefined = blurOptions_buf
        const policy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let policy_buf : BlurStyleActivePolicy | undefined
        if ((RuntimeType.UNDEFINED) != (policy_buf_runtimeType))
        {
            policy_buf = TypeChecker.BlurStyleActivePolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const policy_result : BlurStyleActivePolicy | undefined = policy_buf
        const inactiveColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let inactiveColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (inactiveColor_buf_runtimeType))
        {
            const inactiveColor_buf__selector : int32 = valueDeserializer.readInt8()
            let inactiveColor_buf_ : Color | number | string | Resource | undefined
            if (inactiveColor_buf__selector == 0) {
                inactiveColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (inactiveColor_buf__selector == 1) {
                inactiveColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (inactiveColor_buf__selector == 2) {
                inactiveColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (inactiveColor_buf__selector == 3) {
                inactiveColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for inactiveColor_buf_ has to be chosen through deserialisation.")
            }
            inactiveColor_buf = (inactiveColor_buf_ as Color | number | string | Resource)
        }
        const inactiveColor_result : ResourceColor | undefined = inactiveColor_buf
        let value : BackgroundBlurStyleOptions = ({colorMode: colorMode_result, adaptiveColor: adaptiveColor_result, scale: scale_result, blurOptions: blurOptions_result, policy: policy_result, inactiveColor: inactiveColor_result} as BackgroundBlurStyleOptions)
        return value
    }
    readBackgroundEffectOptions(): BackgroundEffectOptions {
        let valueDeserializer : Deserializer = this
        const radius_result : number = (valueDeserializer.readNumber() as number)
        const saturation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let saturation_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (saturation_buf_runtimeType))
        {
            saturation_buf = (valueDeserializer.readNumber() as number)
        }
        const saturation_result : number | undefined = saturation_buf
        const brightness_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let brightness_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (brightness_buf_runtimeType))
        {
            brightness_buf = (valueDeserializer.readNumber() as number)
        }
        const brightness_result : number | undefined = brightness_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const adaptiveColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let adaptiveColor_buf : AdaptiveColor | undefined
        if ((RuntimeType.UNDEFINED) != (adaptiveColor_buf_runtimeType))
        {
            adaptiveColor_buf = TypeChecker.AdaptiveColor_FromNumeric(valueDeserializer.readInt32())
        }
        const adaptiveColor_result : AdaptiveColor | undefined = adaptiveColor_buf
        const blurOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let blurOptions_buf : BlurOptions | undefined
        if ((RuntimeType.UNDEFINED) != (blurOptions_buf_runtimeType))
        {
            blurOptions_buf = valueDeserializer.readBlurOptions()
        }
        const blurOptions_result : BlurOptions | undefined = blurOptions_buf
        const policy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let policy_buf : BlurStyleActivePolicy | undefined
        if ((RuntimeType.UNDEFINED) != (policy_buf_runtimeType))
        {
            policy_buf = TypeChecker.BlurStyleActivePolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const policy_result : BlurStyleActivePolicy | undefined = policy_buf
        const inactiveColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let inactiveColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (inactiveColor_buf_runtimeType))
        {
            const inactiveColor_buf__selector : int32 = valueDeserializer.readInt8()
            let inactiveColor_buf_ : Color | number | string | Resource | undefined
            if (inactiveColor_buf__selector == 0) {
                inactiveColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (inactiveColor_buf__selector == 1) {
                inactiveColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (inactiveColor_buf__selector == 2) {
                inactiveColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (inactiveColor_buf__selector == 3) {
                inactiveColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for inactiveColor_buf_ has to be chosen through deserialisation.")
            }
            inactiveColor_buf = (inactiveColor_buf_ as Color | number | string | Resource)
        }
        const inactiveColor_result : ResourceColor | undefined = inactiveColor_buf
        let value : BackgroundEffectOptions = ({radius: radius_result, saturation: saturation_result, brightness: brightness_result, color: color_result, adaptiveColor: adaptiveColor_result, blurOptions: blurOptions_result, policy: policy_result, inactiveColor: inactiveColor_result} as BackgroundEffectOptions)
        return value
    }
    readBadgeStyle(): BadgeStyle {
        let valueDeserializer : Deserializer = this
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const fontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontSize_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (fontSize_buf_runtimeType))
        {
            const fontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let fontSize_buf_ : number | string | undefined
            if (fontSize_buf__selector == 0) {
                fontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontSize_buf__selector == 1) {
                fontSize_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for fontSize_buf_ has to be chosen through deserialisation.")
            }
            fontSize_buf = (fontSize_buf_ as number | string)
        }
        const fontSize_result : number | string | undefined = fontSize_buf
        const badgeSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let badgeSize_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (badgeSize_buf_runtimeType))
        {
            const badgeSize_buf__selector : int32 = valueDeserializer.readInt8()
            let badgeSize_buf_ : number | string | undefined
            if (badgeSize_buf__selector == 0) {
                badgeSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (badgeSize_buf__selector == 1) {
                badgeSize_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for badgeSize_buf_ has to be chosen through deserialisation.")
            }
            badgeSize_buf = (badgeSize_buf_ as number | string)
        }
        const badgeSize_result : number | string | undefined = badgeSize_buf
        const badgeColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let badgeColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (badgeColor_buf_runtimeType))
        {
            const badgeColor_buf__selector : int32 = valueDeserializer.readInt8()
            let badgeColor_buf_ : Color | number | string | Resource | undefined
            if (badgeColor_buf__selector == 0) {
                badgeColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (badgeColor_buf__selector == 1) {
                badgeColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (badgeColor_buf__selector == 2) {
                badgeColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (badgeColor_buf__selector == 3) {
                badgeColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for badgeColor_buf_ has to be chosen through deserialisation.")
            }
            badgeColor_buf = (badgeColor_buf_ as Color | number | string | Resource)
        }
        const badgeColor_result : ResourceColor | undefined = badgeColor_buf
        const borderColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (borderColor_buf_runtimeType))
        {
            const borderColor_buf__selector : int32 = valueDeserializer.readInt8()
            let borderColor_buf_ : Color | number | string | Resource | undefined
            if (borderColor_buf__selector == 0) {
                borderColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (borderColor_buf__selector == 1) {
                borderColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (borderColor_buf__selector == 2) {
                borderColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (borderColor_buf__selector == 3) {
                borderColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for borderColor_buf_ has to be chosen through deserialisation.")
            }
            borderColor_buf = (borderColor_buf_ as Color | number | string | Resource)
        }
        const borderColor_result : ResourceColor | undefined = borderColor_buf
        const borderWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderWidth_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (borderWidth_buf_runtimeType))
        {
            borderWidth_buf = (valueDeserializer.readLength() as Length)
        }
        const borderWidth_result : Length | undefined = borderWidth_buf
        const fontWeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontWeight_buf : number | FontWeight | string | undefined
        if ((RuntimeType.UNDEFINED) != (fontWeight_buf_runtimeType))
        {
            const fontWeight_buf__selector : int32 = valueDeserializer.readInt8()
            let fontWeight_buf_ : number | FontWeight | string | undefined
            if (fontWeight_buf__selector == 0) {
                fontWeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontWeight_buf__selector == 1) {
                fontWeight_buf_ = TypeChecker.FontWeight_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontWeight_buf__selector == 2) {
                fontWeight_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for fontWeight_buf_ has to be chosen through deserialisation.")
            }
            fontWeight_buf = (fontWeight_buf_ as number | FontWeight | string)
        }
        const fontWeight_result : number | FontWeight | string | undefined = fontWeight_buf
        let value : BadgeStyle = ({color: color_result, fontSize: fontSize_result, badgeSize: badgeSize_result, badgeColor: badgeColor_result, borderColor: borderColor_result, borderWidth: borderWidth_result, fontWeight: fontWeight_result} as BadgeStyle)
        return value
    }
    readButtonIconOptions(): ButtonIconOptions {
        let valueDeserializer : Deserializer = this
        const shown_buf_selector : int32 = valueDeserializer.readInt8()
        let shown_buf : string | PixelMap | Resource | undefined
        if (shown_buf_selector == 0) {
            shown_buf = (valueDeserializer.readString() as string)
        }
        else if (shown_buf_selector == 1) {
            shown_buf = (valueDeserializer.readPixelMap() as PixelMap)
        }
        else if (shown_buf_selector == 2) {
            shown_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for shown_buf has to be chosen through deserialisation.")
        }
        const shown_result : string | PixelMap | Resource = (shown_buf as string | PixelMap | Resource)
        const hidden_buf_selector : int32 = valueDeserializer.readInt8()
        let hidden_buf : string | PixelMap | Resource | undefined
        if (hidden_buf_selector == 0) {
            hidden_buf = (valueDeserializer.readString() as string)
        }
        else if (hidden_buf_selector == 1) {
            hidden_buf = (valueDeserializer.readPixelMap() as PixelMap)
        }
        else if (hidden_buf_selector == 2) {
            hidden_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for hidden_buf has to be chosen through deserialisation.")
        }
        const hidden_result : string | PixelMap | Resource = (hidden_buf as string | PixelMap | Resource)
        const switching_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let switching_buf : string | PixelMap | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (switching_buf_runtimeType))
        {
            const switching_buf__selector : int32 = valueDeserializer.readInt8()
            let switching_buf_ : string | PixelMap | Resource | undefined
            if (switching_buf__selector == 0) {
                switching_buf_ = (valueDeserializer.readString() as string)
            }
            else if (switching_buf__selector == 1) {
                switching_buf_ = (valueDeserializer.readPixelMap() as PixelMap)
            }
            else if (switching_buf__selector == 2) {
                switching_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for switching_buf_ has to be chosen through deserialisation.")
            }
            switching_buf = (switching_buf_ as string | PixelMap | Resource)
        }
        const switching_result : string | PixelMap | Resource | undefined = switching_buf
        let value : ButtonIconOptions = ({shown: shown_result, hidden: hidden_result, switching: switching_result} as ButtonIconOptions)
        return value
    }
    readCalendarOptions(): CalendarOptions {
        let valueDeserializer : Deserializer = this
        const hintRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hintRadius_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (hintRadius_buf_runtimeType))
        {
            const hintRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let hintRadius_buf_ : number | Resource | undefined
            if (hintRadius_buf__selector == 0) {
                hintRadius_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (hintRadius_buf__selector == 1) {
                hintRadius_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for hintRadius_buf_ has to be chosen through deserialisation.")
            }
            hintRadius_buf = (hintRadius_buf_ as number | Resource)
        }
        const hintRadius_result : number | Resource | undefined = hintRadius_buf
        const selected_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selected_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (selected_buf_runtimeType))
        {
            selected_buf = new Date(valueDeserializer.readInt64())
        }
        const selected_result : Date | undefined = selected_buf
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = new Date(valueDeserializer.readInt64())
        }
        const start_result : Date | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = new Date(valueDeserializer.readInt64())
        }
        const end_result : Date | undefined = end_buf
        const disabledDateRange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disabledDateRange_buf : Array<DateRange> | undefined
        if ((RuntimeType.UNDEFINED) != (disabledDateRange_buf_runtimeType))
        {
            const disabledDateRange_buf__length : int32 = valueDeserializer.readInt32()
            let disabledDateRange_buf_ : Array<DateRange> = new Array<DateRange>(disabledDateRange_buf__length)
            for (let disabledDateRange_buf__i = 0; disabledDateRange_buf__i < disabledDateRange_buf__length; disabledDateRange_buf__i++) {
                disabledDateRange_buf_[disabledDateRange_buf__i] = valueDeserializer.readDateRange()
            }
            disabledDateRange_buf = disabledDateRange_buf_
        }
        const disabledDateRange_result : Array<DateRange> | undefined = disabledDateRange_buf
        let value : CalendarOptions = ({hintRadius: hintRadius_result, selected: selected_result, start: start_result, end: end_result, disabledDateRange: disabledDateRange_result} as CalendarOptions)
        return value
    }
    readCanvasRenderer(): CanvasRenderer {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CanvasRendererInternal.fromPtr(ptr)
    }
    readCanvasRenderingContext2D(): CanvasRenderingContext2D {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return CanvasRenderingContext2DInternal.fromPtr(ptr)
    }
    readCaretStyle(): CaretStyle {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Length)
        }
        const width_result : Length | undefined = width_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        let value : CaretStyle = ({width: width_result, color: color_result} as CaretStyle)
        return value
    }
    readCircleStyleOptions(): CircleStyleOptions {
        let valueDeserializer : Deserializer = this
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            radius_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const radius_result : LengthMetrics | undefined = radius_buf
        const enableWaveEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableWaveEffect_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableWaveEffect_buf_runtimeType))
        {
            enableWaveEffect_buf = valueDeserializer.readBoolean()
        }
        const enableWaveEffect_result : boolean | undefined = enableWaveEffect_buf
        const enableForeground_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableForeground_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableForeground_buf_runtimeType))
        {
            enableForeground_buf = valueDeserializer.readBoolean()
        }
        const enableForeground_result : boolean | undefined = enableForeground_buf
        let value : CircleStyleOptions = ({color: color_result, radius: radius_result, enableWaveEffect: enableWaveEffect_result, enableForeground: enableForeground_result} as CircleStyleOptions)
        return value
    }
    readColorStop(): ColorStop {
        let valueDeserializer : Deserializer = this
        const color_buf_selector : int32 = valueDeserializer.readInt8()
        let color_buf : Color | number | string | Resource | undefined
        if (color_buf_selector == 0) {
            color_buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
        }
        else if (color_buf_selector == 1) {
            color_buf = (valueDeserializer.readNumber() as number)
        }
        else if (color_buf_selector == 2) {
            color_buf = (valueDeserializer.readString() as string)
        }
        else if (color_buf_selector == 3) {
            color_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for color_buf has to be chosen through deserialisation.")
        }
        const color_result : ResourceColor = (color_buf as Color | number | string | Resource)
        const offset_result : Length = (valueDeserializer.readLength() as Length)
        let value : ColorStop = ({color: color_result, offset: offset_result} as ColorStop)
        return value
    }
    readComponentInfo(): ComponentInfo {
        let valueDeserializer : Deserializer = this
        const size_result : Size = valueDeserializer.readSize()
        const localOffset_result : Offset_componentutils = valueDeserializer.readOffset_componentutils()
        const windowOffset_result : Offset_componentutils = valueDeserializer.readOffset_componentutils()
        const screenOffset_result : Offset_componentutils = valueDeserializer.readOffset_componentutils()
        const translate_result : TranslateResult = valueDeserializer.readTranslateResult()
        const scale_result : ScaleResult = valueDeserializer.readScaleResult()
        const rotate_result : RotateResult = valueDeserializer.readRotateResult()
        const transform_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value2 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value3 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value4 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value5 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value6 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value7 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value8 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value9 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value10 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value11 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value12 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value13 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value14 : number = (valueDeserializer.readNumber() as number)
        const transform_buf_value15 : number = (valueDeserializer.readNumber() as number)
        const transform_result : Matrix4Result = ([transform_buf_value0, transform_buf_value1, transform_buf_value2, transform_buf_value3, transform_buf_value4, transform_buf_value5, transform_buf_value6, transform_buf_value7, transform_buf_value8, transform_buf_value9, transform_buf_value10, transform_buf_value11, transform_buf_value12, transform_buf_value13, transform_buf_value14, transform_buf_value15] as Matrix4Result)
        let value : ComponentInfo = ({size: size_result, localOffset: localOffset_result, windowOffset: windowOffset_result, screenOffset: screenOffset_result, translate: translate_result, scale: scale_result, rotate: rotate_result, transform: transform_result} as ComponentInfo)
        return value
    }
    readContentCoverOptions(): ContentCoverOptions {
        let valueDeserializer : Deserializer = this
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const onAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAppear_buf_runtimeType))
        {
            onAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onAppear_result : (() => void) | undefined = onAppear_buf
        const onDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDisappear_buf_runtimeType))
        {
            onDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDisappear_result : (() => void) | undefined = onDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillAppear_result : (() => void) | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillDisappear_result : (() => void) | undefined = onWillDisappear_buf
        const modalTransition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let modalTransition_buf : ModalTransition | undefined
        if ((RuntimeType.UNDEFINED) != (modalTransition_buf_runtimeType))
        {
            modalTransition_buf = TypeChecker.ModalTransition_FromNumeric(valueDeserializer.readInt32())
        }
        const modalTransition_result : ModalTransition | undefined = modalTransition_buf
        const onWillDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDismiss_buf : ((parameter: DismissContentCoverAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDismiss_buf_runtimeType))
        {
            onWillDismiss_buf = valueDeserializer.readCallback_DismissContentCoverAction_Void()
        }
        const onWillDismiss_result : ((parameter: DismissContentCoverAction) => void) | undefined = onWillDismiss_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        let value : ContentCoverOptions = ({backgroundColor: backgroundColor_result, onAppear: onAppear_result, onDisappear: onDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, modalTransition: modalTransition_result, onWillDismiss: onWillDismiss_result, transition: transition_result} as ContentCoverOptions)
        return value
    }
    readContextMenuAnimationOptions(): ContextMenuAnimationOptions {
        let valueDeserializer : Deserializer = this
        const scale_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scale_buf : [ number, number ] | undefined
        if ((RuntimeType.UNDEFINED) != (scale_buf_runtimeType))
        {
            const scale_buf__value0 : number = (valueDeserializer.readNumber() as number)
            const scale_buf__value1 : number = (valueDeserializer.readNumber() as number)
            scale_buf = ([scale_buf__value0, scale_buf__value1] as [ number, number ])
        }
        const scale_result : [ number, number ] | undefined = scale_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        const hoverScale_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverScale_buf : [ number, number ] | undefined
        if ((RuntimeType.UNDEFINED) != (hoverScale_buf_runtimeType))
        {
            const hoverScale_buf__value0 : number = (valueDeserializer.readNumber() as number)
            const hoverScale_buf__value1 : number = (valueDeserializer.readNumber() as number)
            hoverScale_buf = ([hoverScale_buf__value0, hoverScale_buf__value1] as [ number, number ])
        }
        const hoverScale_result : [ number, number ] | undefined = hoverScale_buf
        let value : ContextMenuAnimationOptions = ({scale: scale_result, transition: transition_result, hoverScale: hoverScale_result} as ContextMenuAnimationOptions)
        return value
    }
    readCurrentDayStyle(): CurrentDayStyle {
        let valueDeserializer : Deserializer = this
        const dayColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dayColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (dayColor_buf_runtimeType))
        {
            const dayColor_buf__selector : int32 = valueDeserializer.readInt8()
            let dayColor_buf_ : Color | number | string | Resource | undefined
            if (dayColor_buf__selector == 0) {
                dayColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (dayColor_buf__selector == 1) {
                dayColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (dayColor_buf__selector == 2) {
                dayColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (dayColor_buf__selector == 3) {
                dayColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for dayColor_buf_ has to be chosen through deserialisation.")
            }
            dayColor_buf = (dayColor_buf_ as Color | number | string | Resource)
        }
        const dayColor_result : ResourceColor | undefined = dayColor_buf
        const lunarColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lunarColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (lunarColor_buf_runtimeType))
        {
            const lunarColor_buf__selector : int32 = valueDeserializer.readInt8()
            let lunarColor_buf_ : Color | number | string | Resource | undefined
            if (lunarColor_buf__selector == 0) {
                lunarColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (lunarColor_buf__selector == 1) {
                lunarColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (lunarColor_buf__selector == 2) {
                lunarColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (lunarColor_buf__selector == 3) {
                lunarColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for lunarColor_buf_ has to be chosen through deserialisation.")
            }
            lunarColor_buf = (lunarColor_buf_ as Color | number | string | Resource)
        }
        const lunarColor_result : ResourceColor | undefined = lunarColor_buf
        const markLunarColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let markLunarColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (markLunarColor_buf_runtimeType))
        {
            const markLunarColor_buf__selector : int32 = valueDeserializer.readInt8()
            let markLunarColor_buf_ : Color | number | string | Resource | undefined
            if (markLunarColor_buf__selector == 0) {
                markLunarColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (markLunarColor_buf__selector == 1) {
                markLunarColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (markLunarColor_buf__selector == 2) {
                markLunarColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (markLunarColor_buf__selector == 3) {
                markLunarColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for markLunarColor_buf_ has to be chosen through deserialisation.")
            }
            markLunarColor_buf = (markLunarColor_buf_ as Color | number | string | Resource)
        }
        const markLunarColor_result : ResourceColor | undefined = markLunarColor_buf
        const dayFontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dayFontSize_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (dayFontSize_buf_runtimeType))
        {
            dayFontSize_buf = (valueDeserializer.readNumber() as number)
        }
        const dayFontSize_result : number | undefined = dayFontSize_buf
        const lunarDayFontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lunarDayFontSize_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (lunarDayFontSize_buf_runtimeType))
        {
            lunarDayFontSize_buf = (valueDeserializer.readNumber() as number)
        }
        const lunarDayFontSize_result : number | undefined = lunarDayFontSize_buf
        const dayHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dayHeight_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (dayHeight_buf_runtimeType))
        {
            dayHeight_buf = (valueDeserializer.readNumber() as number)
        }
        const dayHeight_result : number | undefined = dayHeight_buf
        const dayWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dayWidth_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (dayWidth_buf_runtimeType))
        {
            dayWidth_buf = (valueDeserializer.readNumber() as number)
        }
        const dayWidth_result : number | undefined = dayWidth_buf
        const gregorianCalendarHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gregorianCalendarHeight_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (gregorianCalendarHeight_buf_runtimeType))
        {
            gregorianCalendarHeight_buf = (valueDeserializer.readNumber() as number)
        }
        const gregorianCalendarHeight_result : number | undefined = gregorianCalendarHeight_buf
        const dayYAxisOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dayYAxisOffset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (dayYAxisOffset_buf_runtimeType))
        {
            dayYAxisOffset_buf = (valueDeserializer.readNumber() as number)
        }
        const dayYAxisOffset_result : number | undefined = dayYAxisOffset_buf
        const lunarDayYAxisOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lunarDayYAxisOffset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (lunarDayYAxisOffset_buf_runtimeType))
        {
            lunarDayYAxisOffset_buf = (valueDeserializer.readNumber() as number)
        }
        const lunarDayYAxisOffset_result : number | undefined = lunarDayYAxisOffset_buf
        const underscoreXAxisOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let underscoreXAxisOffset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (underscoreXAxisOffset_buf_runtimeType))
        {
            underscoreXAxisOffset_buf = (valueDeserializer.readNumber() as number)
        }
        const underscoreXAxisOffset_result : number | undefined = underscoreXAxisOffset_buf
        const underscoreYAxisOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let underscoreYAxisOffset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (underscoreYAxisOffset_buf_runtimeType))
        {
            underscoreYAxisOffset_buf = (valueDeserializer.readNumber() as number)
        }
        const underscoreYAxisOffset_result : number | undefined = underscoreYAxisOffset_buf
        const scheduleMarkerXAxisOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scheduleMarkerXAxisOffset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (scheduleMarkerXAxisOffset_buf_runtimeType))
        {
            scheduleMarkerXAxisOffset_buf = (valueDeserializer.readNumber() as number)
        }
        const scheduleMarkerXAxisOffset_result : number | undefined = scheduleMarkerXAxisOffset_buf
        const scheduleMarkerYAxisOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scheduleMarkerYAxisOffset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (scheduleMarkerYAxisOffset_buf_runtimeType))
        {
            scheduleMarkerYAxisOffset_buf = (valueDeserializer.readNumber() as number)
        }
        const scheduleMarkerYAxisOffset_result : number | undefined = scheduleMarkerYAxisOffset_buf
        const colSpace_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let colSpace_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (colSpace_buf_runtimeType))
        {
            colSpace_buf = (valueDeserializer.readNumber() as number)
        }
        const colSpace_result : number | undefined = colSpace_buf
        const dailyFiveRowSpace_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dailyFiveRowSpace_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (dailyFiveRowSpace_buf_runtimeType))
        {
            dailyFiveRowSpace_buf = (valueDeserializer.readNumber() as number)
        }
        const dailyFiveRowSpace_result : number | undefined = dailyFiveRowSpace_buf
        const dailySixRowSpace_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dailySixRowSpace_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (dailySixRowSpace_buf_runtimeType))
        {
            dailySixRowSpace_buf = (valueDeserializer.readNumber() as number)
        }
        const dailySixRowSpace_result : number | undefined = dailySixRowSpace_buf
        const lunarHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lunarHeight_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (lunarHeight_buf_runtimeType))
        {
            lunarHeight_buf = (valueDeserializer.readNumber() as number)
        }
        const lunarHeight_result : number | undefined = lunarHeight_buf
        const underscoreWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let underscoreWidth_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (underscoreWidth_buf_runtimeType))
        {
            underscoreWidth_buf = (valueDeserializer.readNumber() as number)
        }
        const underscoreWidth_result : number | undefined = underscoreWidth_buf
        const underscoreLength_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let underscoreLength_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (underscoreLength_buf_runtimeType))
        {
            underscoreLength_buf = (valueDeserializer.readNumber() as number)
        }
        const underscoreLength_result : number | undefined = underscoreLength_buf
        const scheduleMarkerRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scheduleMarkerRadius_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (scheduleMarkerRadius_buf_runtimeType))
        {
            scheduleMarkerRadius_buf = (valueDeserializer.readNumber() as number)
        }
        const scheduleMarkerRadius_result : number | undefined = scheduleMarkerRadius_buf
        const boundaryRowOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let boundaryRowOffset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (boundaryRowOffset_buf_runtimeType))
        {
            boundaryRowOffset_buf = (valueDeserializer.readNumber() as number)
        }
        const boundaryRowOffset_result : number | undefined = boundaryRowOffset_buf
        const boundaryColOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let boundaryColOffset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (boundaryColOffset_buf_runtimeType))
        {
            boundaryColOffset_buf = (valueDeserializer.readNumber() as number)
        }
        const boundaryColOffset_result : number | undefined = boundaryColOffset_buf
        let value : CurrentDayStyle = ({dayColor: dayColor_result, lunarColor: lunarColor_result, markLunarColor: markLunarColor_result, dayFontSize: dayFontSize_result, lunarDayFontSize: lunarDayFontSize_result, dayHeight: dayHeight_result, dayWidth: dayWidth_result, gregorianCalendarHeight: gregorianCalendarHeight_result, dayYAxisOffset: dayYAxisOffset_result, lunarDayYAxisOffset: lunarDayYAxisOffset_result, underscoreXAxisOffset: underscoreXAxisOffset_result, underscoreYAxisOffset: underscoreYAxisOffset_result, scheduleMarkerXAxisOffset: scheduleMarkerXAxisOffset_result, scheduleMarkerYAxisOffset: scheduleMarkerYAxisOffset_result, colSpace: colSpace_result, dailyFiveRowSpace: dailyFiveRowSpace_result, dailySixRowSpace: dailySixRowSpace_result, lunarHeight: lunarHeight_result, underscoreWidth: underscoreWidth_result, underscoreLength: underscoreLength_result, scheduleMarkerRadius: scheduleMarkerRadius_result, boundaryRowOffset: boundaryRowOffset_result, boundaryColOffset: boundaryColOffset_result} as CurrentDayStyle)
        return value
    }
    readCustomColors(): CustomColors {
        let valueDeserializer : Deserializer = this
        const brand_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let brand_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (brand_buf_runtimeType))
        {
            const brand_buf__selector : int32 = valueDeserializer.readInt8()
            let brand_buf_ : Color | number | string | Resource | undefined
            if (brand_buf__selector == 0) {
                brand_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (brand_buf__selector == 1) {
                brand_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (brand_buf__selector == 2) {
                brand_buf_ = (valueDeserializer.readString() as string)
            }
            else if (brand_buf__selector == 3) {
                brand_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for brand_buf_ has to be chosen through deserialisation.")
            }
            brand_buf = (brand_buf_ as Color | number | string | Resource)
        }
        const brand_result : ResourceColor | undefined = brand_buf
        const warning_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let warning_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (warning_buf_runtimeType))
        {
            const warning_buf__selector : int32 = valueDeserializer.readInt8()
            let warning_buf_ : Color | number | string | Resource | undefined
            if (warning_buf__selector == 0) {
                warning_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (warning_buf__selector == 1) {
                warning_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (warning_buf__selector == 2) {
                warning_buf_ = (valueDeserializer.readString() as string)
            }
            else if (warning_buf__selector == 3) {
                warning_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for warning_buf_ has to be chosen through deserialisation.")
            }
            warning_buf = (warning_buf_ as Color | number | string | Resource)
        }
        const warning_result : ResourceColor | undefined = warning_buf
        const alert_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alert_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (alert_buf_runtimeType))
        {
            const alert_buf__selector : int32 = valueDeserializer.readInt8()
            let alert_buf_ : Color | number | string | Resource | undefined
            if (alert_buf__selector == 0) {
                alert_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (alert_buf__selector == 1) {
                alert_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (alert_buf__selector == 2) {
                alert_buf_ = (valueDeserializer.readString() as string)
            }
            else if (alert_buf__selector == 3) {
                alert_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for alert_buf_ has to be chosen through deserialisation.")
            }
            alert_buf = (alert_buf_ as Color | number | string | Resource)
        }
        const alert_result : ResourceColor | undefined = alert_buf
        const confirm_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let confirm_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (confirm_buf_runtimeType))
        {
            const confirm_buf__selector : int32 = valueDeserializer.readInt8()
            let confirm_buf_ : Color | number | string | Resource | undefined
            if (confirm_buf__selector == 0) {
                confirm_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (confirm_buf__selector == 1) {
                confirm_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (confirm_buf__selector == 2) {
                confirm_buf_ = (valueDeserializer.readString() as string)
            }
            else if (confirm_buf__selector == 3) {
                confirm_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for confirm_buf_ has to be chosen through deserialisation.")
            }
            confirm_buf = (confirm_buf_ as Color | number | string | Resource)
        }
        const confirm_result : ResourceColor | undefined = confirm_buf
        const fontPrimary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontPrimary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontPrimary_buf_runtimeType))
        {
            const fontPrimary_buf__selector : int32 = valueDeserializer.readInt8()
            let fontPrimary_buf_ : Color | number | string | Resource | undefined
            if (fontPrimary_buf__selector == 0) {
                fontPrimary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontPrimary_buf__selector == 1) {
                fontPrimary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontPrimary_buf__selector == 2) {
                fontPrimary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontPrimary_buf__selector == 3) {
                fontPrimary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontPrimary_buf_ has to be chosen through deserialisation.")
            }
            fontPrimary_buf = (fontPrimary_buf_ as Color | number | string | Resource)
        }
        const fontPrimary_result : ResourceColor | undefined = fontPrimary_buf
        const fontSecondary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontSecondary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontSecondary_buf_runtimeType))
        {
            const fontSecondary_buf__selector : int32 = valueDeserializer.readInt8()
            let fontSecondary_buf_ : Color | number | string | Resource | undefined
            if (fontSecondary_buf__selector == 0) {
                fontSecondary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontSecondary_buf__selector == 1) {
                fontSecondary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontSecondary_buf__selector == 2) {
                fontSecondary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontSecondary_buf__selector == 3) {
                fontSecondary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontSecondary_buf_ has to be chosen through deserialisation.")
            }
            fontSecondary_buf = (fontSecondary_buf_ as Color | number | string | Resource)
        }
        const fontSecondary_result : ResourceColor | undefined = fontSecondary_buf
        const fontTertiary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontTertiary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontTertiary_buf_runtimeType))
        {
            const fontTertiary_buf__selector : int32 = valueDeserializer.readInt8()
            let fontTertiary_buf_ : Color | number | string | Resource | undefined
            if (fontTertiary_buf__selector == 0) {
                fontTertiary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontTertiary_buf__selector == 1) {
                fontTertiary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontTertiary_buf__selector == 2) {
                fontTertiary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontTertiary_buf__selector == 3) {
                fontTertiary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontTertiary_buf_ has to be chosen through deserialisation.")
            }
            fontTertiary_buf = (fontTertiary_buf_ as Color | number | string | Resource)
        }
        const fontTertiary_result : ResourceColor | undefined = fontTertiary_buf
        const fontFourth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontFourth_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontFourth_buf_runtimeType))
        {
            const fontFourth_buf__selector : int32 = valueDeserializer.readInt8()
            let fontFourth_buf_ : Color | number | string | Resource | undefined
            if (fontFourth_buf__selector == 0) {
                fontFourth_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontFourth_buf__selector == 1) {
                fontFourth_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontFourth_buf__selector == 2) {
                fontFourth_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontFourth_buf__selector == 3) {
                fontFourth_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontFourth_buf_ has to be chosen through deserialisation.")
            }
            fontFourth_buf = (fontFourth_buf_ as Color | number | string | Resource)
        }
        const fontFourth_result : ResourceColor | undefined = fontFourth_buf
        const fontEmphasize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontEmphasize_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontEmphasize_buf_runtimeType))
        {
            const fontEmphasize_buf__selector : int32 = valueDeserializer.readInt8()
            let fontEmphasize_buf_ : Color | number | string | Resource | undefined
            if (fontEmphasize_buf__selector == 0) {
                fontEmphasize_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontEmphasize_buf__selector == 1) {
                fontEmphasize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontEmphasize_buf__selector == 2) {
                fontEmphasize_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontEmphasize_buf__selector == 3) {
                fontEmphasize_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontEmphasize_buf_ has to be chosen through deserialisation.")
            }
            fontEmphasize_buf = (fontEmphasize_buf_ as Color | number | string | Resource)
        }
        const fontEmphasize_result : ResourceColor | undefined = fontEmphasize_buf
        const fontOnPrimary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontOnPrimary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontOnPrimary_buf_runtimeType))
        {
            const fontOnPrimary_buf__selector : int32 = valueDeserializer.readInt8()
            let fontOnPrimary_buf_ : Color | number | string | Resource | undefined
            if (fontOnPrimary_buf__selector == 0) {
                fontOnPrimary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontOnPrimary_buf__selector == 1) {
                fontOnPrimary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontOnPrimary_buf__selector == 2) {
                fontOnPrimary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontOnPrimary_buf__selector == 3) {
                fontOnPrimary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontOnPrimary_buf_ has to be chosen through deserialisation.")
            }
            fontOnPrimary_buf = (fontOnPrimary_buf_ as Color | number | string | Resource)
        }
        const fontOnPrimary_result : ResourceColor | undefined = fontOnPrimary_buf
        const fontOnSecondary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontOnSecondary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontOnSecondary_buf_runtimeType))
        {
            const fontOnSecondary_buf__selector : int32 = valueDeserializer.readInt8()
            let fontOnSecondary_buf_ : Color | number | string | Resource | undefined
            if (fontOnSecondary_buf__selector == 0) {
                fontOnSecondary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontOnSecondary_buf__selector == 1) {
                fontOnSecondary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontOnSecondary_buf__selector == 2) {
                fontOnSecondary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontOnSecondary_buf__selector == 3) {
                fontOnSecondary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontOnSecondary_buf_ has to be chosen through deserialisation.")
            }
            fontOnSecondary_buf = (fontOnSecondary_buf_ as Color | number | string | Resource)
        }
        const fontOnSecondary_result : ResourceColor | undefined = fontOnSecondary_buf
        const fontOnTertiary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontOnTertiary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontOnTertiary_buf_runtimeType))
        {
            const fontOnTertiary_buf__selector : int32 = valueDeserializer.readInt8()
            let fontOnTertiary_buf_ : Color | number | string | Resource | undefined
            if (fontOnTertiary_buf__selector == 0) {
                fontOnTertiary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontOnTertiary_buf__selector == 1) {
                fontOnTertiary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontOnTertiary_buf__selector == 2) {
                fontOnTertiary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontOnTertiary_buf__selector == 3) {
                fontOnTertiary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontOnTertiary_buf_ has to be chosen through deserialisation.")
            }
            fontOnTertiary_buf = (fontOnTertiary_buf_ as Color | number | string | Resource)
        }
        const fontOnTertiary_result : ResourceColor | undefined = fontOnTertiary_buf
        const fontOnFourth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontOnFourth_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontOnFourth_buf_runtimeType))
        {
            const fontOnFourth_buf__selector : int32 = valueDeserializer.readInt8()
            let fontOnFourth_buf_ : Color | number | string | Resource | undefined
            if (fontOnFourth_buf__selector == 0) {
                fontOnFourth_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontOnFourth_buf__selector == 1) {
                fontOnFourth_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontOnFourth_buf__selector == 2) {
                fontOnFourth_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontOnFourth_buf__selector == 3) {
                fontOnFourth_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontOnFourth_buf_ has to be chosen through deserialisation.")
            }
            fontOnFourth_buf = (fontOnFourth_buf_ as Color | number | string | Resource)
        }
        const fontOnFourth_result : ResourceColor | undefined = fontOnFourth_buf
        const iconPrimary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconPrimary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconPrimary_buf_runtimeType))
        {
            const iconPrimary_buf__selector : int32 = valueDeserializer.readInt8()
            let iconPrimary_buf_ : Color | number | string | Resource | undefined
            if (iconPrimary_buf__selector == 0) {
                iconPrimary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconPrimary_buf__selector == 1) {
                iconPrimary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconPrimary_buf__selector == 2) {
                iconPrimary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconPrimary_buf__selector == 3) {
                iconPrimary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconPrimary_buf_ has to be chosen through deserialisation.")
            }
            iconPrimary_buf = (iconPrimary_buf_ as Color | number | string | Resource)
        }
        const iconPrimary_result : ResourceColor | undefined = iconPrimary_buf
        const iconSecondary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconSecondary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconSecondary_buf_runtimeType))
        {
            const iconSecondary_buf__selector : int32 = valueDeserializer.readInt8()
            let iconSecondary_buf_ : Color | number | string | Resource | undefined
            if (iconSecondary_buf__selector == 0) {
                iconSecondary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconSecondary_buf__selector == 1) {
                iconSecondary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconSecondary_buf__selector == 2) {
                iconSecondary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconSecondary_buf__selector == 3) {
                iconSecondary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconSecondary_buf_ has to be chosen through deserialisation.")
            }
            iconSecondary_buf = (iconSecondary_buf_ as Color | number | string | Resource)
        }
        const iconSecondary_result : ResourceColor | undefined = iconSecondary_buf
        const iconTertiary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconTertiary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconTertiary_buf_runtimeType))
        {
            const iconTertiary_buf__selector : int32 = valueDeserializer.readInt8()
            let iconTertiary_buf_ : Color | number | string | Resource | undefined
            if (iconTertiary_buf__selector == 0) {
                iconTertiary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconTertiary_buf__selector == 1) {
                iconTertiary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconTertiary_buf__selector == 2) {
                iconTertiary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconTertiary_buf__selector == 3) {
                iconTertiary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconTertiary_buf_ has to be chosen through deserialisation.")
            }
            iconTertiary_buf = (iconTertiary_buf_ as Color | number | string | Resource)
        }
        const iconTertiary_result : ResourceColor | undefined = iconTertiary_buf
        const iconFourth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconFourth_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconFourth_buf_runtimeType))
        {
            const iconFourth_buf__selector : int32 = valueDeserializer.readInt8()
            let iconFourth_buf_ : Color | number | string | Resource | undefined
            if (iconFourth_buf__selector == 0) {
                iconFourth_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconFourth_buf__selector == 1) {
                iconFourth_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconFourth_buf__selector == 2) {
                iconFourth_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconFourth_buf__selector == 3) {
                iconFourth_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconFourth_buf_ has to be chosen through deserialisation.")
            }
            iconFourth_buf = (iconFourth_buf_ as Color | number | string | Resource)
        }
        const iconFourth_result : ResourceColor | undefined = iconFourth_buf
        const iconEmphasize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconEmphasize_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconEmphasize_buf_runtimeType))
        {
            const iconEmphasize_buf__selector : int32 = valueDeserializer.readInt8()
            let iconEmphasize_buf_ : Color | number | string | Resource | undefined
            if (iconEmphasize_buf__selector == 0) {
                iconEmphasize_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconEmphasize_buf__selector == 1) {
                iconEmphasize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconEmphasize_buf__selector == 2) {
                iconEmphasize_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconEmphasize_buf__selector == 3) {
                iconEmphasize_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconEmphasize_buf_ has to be chosen through deserialisation.")
            }
            iconEmphasize_buf = (iconEmphasize_buf_ as Color | number | string | Resource)
        }
        const iconEmphasize_result : ResourceColor | undefined = iconEmphasize_buf
        const iconSubEmphasize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconSubEmphasize_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconSubEmphasize_buf_runtimeType))
        {
            const iconSubEmphasize_buf__selector : int32 = valueDeserializer.readInt8()
            let iconSubEmphasize_buf_ : Color | number | string | Resource | undefined
            if (iconSubEmphasize_buf__selector == 0) {
                iconSubEmphasize_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconSubEmphasize_buf__selector == 1) {
                iconSubEmphasize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconSubEmphasize_buf__selector == 2) {
                iconSubEmphasize_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconSubEmphasize_buf__selector == 3) {
                iconSubEmphasize_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconSubEmphasize_buf_ has to be chosen through deserialisation.")
            }
            iconSubEmphasize_buf = (iconSubEmphasize_buf_ as Color | number | string | Resource)
        }
        const iconSubEmphasize_result : ResourceColor | undefined = iconSubEmphasize_buf
        const iconOnPrimary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconOnPrimary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconOnPrimary_buf_runtimeType))
        {
            const iconOnPrimary_buf__selector : int32 = valueDeserializer.readInt8()
            let iconOnPrimary_buf_ : Color | number | string | Resource | undefined
            if (iconOnPrimary_buf__selector == 0) {
                iconOnPrimary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconOnPrimary_buf__selector == 1) {
                iconOnPrimary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconOnPrimary_buf__selector == 2) {
                iconOnPrimary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconOnPrimary_buf__selector == 3) {
                iconOnPrimary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconOnPrimary_buf_ has to be chosen through deserialisation.")
            }
            iconOnPrimary_buf = (iconOnPrimary_buf_ as Color | number | string | Resource)
        }
        const iconOnPrimary_result : ResourceColor | undefined = iconOnPrimary_buf
        const iconOnSecondary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconOnSecondary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconOnSecondary_buf_runtimeType))
        {
            const iconOnSecondary_buf__selector : int32 = valueDeserializer.readInt8()
            let iconOnSecondary_buf_ : Color | number | string | Resource | undefined
            if (iconOnSecondary_buf__selector == 0) {
                iconOnSecondary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconOnSecondary_buf__selector == 1) {
                iconOnSecondary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconOnSecondary_buf__selector == 2) {
                iconOnSecondary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconOnSecondary_buf__selector == 3) {
                iconOnSecondary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconOnSecondary_buf_ has to be chosen through deserialisation.")
            }
            iconOnSecondary_buf = (iconOnSecondary_buf_ as Color | number | string | Resource)
        }
        const iconOnSecondary_result : ResourceColor | undefined = iconOnSecondary_buf
        const iconOnTertiary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconOnTertiary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconOnTertiary_buf_runtimeType))
        {
            const iconOnTertiary_buf__selector : int32 = valueDeserializer.readInt8()
            let iconOnTertiary_buf_ : Color | number | string | Resource | undefined
            if (iconOnTertiary_buf__selector == 0) {
                iconOnTertiary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconOnTertiary_buf__selector == 1) {
                iconOnTertiary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconOnTertiary_buf__selector == 2) {
                iconOnTertiary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconOnTertiary_buf__selector == 3) {
                iconOnTertiary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconOnTertiary_buf_ has to be chosen through deserialisation.")
            }
            iconOnTertiary_buf = (iconOnTertiary_buf_ as Color | number | string | Resource)
        }
        const iconOnTertiary_result : ResourceColor | undefined = iconOnTertiary_buf
        const iconOnFourth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let iconOnFourth_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (iconOnFourth_buf_runtimeType))
        {
            const iconOnFourth_buf__selector : int32 = valueDeserializer.readInt8()
            let iconOnFourth_buf_ : Color | number | string | Resource | undefined
            if (iconOnFourth_buf__selector == 0) {
                iconOnFourth_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (iconOnFourth_buf__selector == 1) {
                iconOnFourth_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (iconOnFourth_buf__selector == 2) {
                iconOnFourth_buf_ = (valueDeserializer.readString() as string)
            }
            else if (iconOnFourth_buf__selector == 3) {
                iconOnFourth_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for iconOnFourth_buf_ has to be chosen through deserialisation.")
            }
            iconOnFourth_buf = (iconOnFourth_buf_ as Color | number | string | Resource)
        }
        const iconOnFourth_result : ResourceColor | undefined = iconOnFourth_buf
        const backgroundPrimary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundPrimary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundPrimary_buf_runtimeType))
        {
            const backgroundPrimary_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundPrimary_buf_ : Color | number | string | Resource | undefined
            if (backgroundPrimary_buf__selector == 0) {
                backgroundPrimary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundPrimary_buf__selector == 1) {
                backgroundPrimary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundPrimary_buf__selector == 2) {
                backgroundPrimary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundPrimary_buf__selector == 3) {
                backgroundPrimary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundPrimary_buf_ has to be chosen through deserialisation.")
            }
            backgroundPrimary_buf = (backgroundPrimary_buf_ as Color | number | string | Resource)
        }
        const backgroundPrimary_result : ResourceColor | undefined = backgroundPrimary_buf
        const backgroundSecondary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundSecondary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundSecondary_buf_runtimeType))
        {
            const backgroundSecondary_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundSecondary_buf_ : Color | number | string | Resource | undefined
            if (backgroundSecondary_buf__selector == 0) {
                backgroundSecondary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundSecondary_buf__selector == 1) {
                backgroundSecondary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundSecondary_buf__selector == 2) {
                backgroundSecondary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundSecondary_buf__selector == 3) {
                backgroundSecondary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundSecondary_buf_ has to be chosen through deserialisation.")
            }
            backgroundSecondary_buf = (backgroundSecondary_buf_ as Color | number | string | Resource)
        }
        const backgroundSecondary_result : ResourceColor | undefined = backgroundSecondary_buf
        const backgroundTertiary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundTertiary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundTertiary_buf_runtimeType))
        {
            const backgroundTertiary_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundTertiary_buf_ : Color | number | string | Resource | undefined
            if (backgroundTertiary_buf__selector == 0) {
                backgroundTertiary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundTertiary_buf__selector == 1) {
                backgroundTertiary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundTertiary_buf__selector == 2) {
                backgroundTertiary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundTertiary_buf__selector == 3) {
                backgroundTertiary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundTertiary_buf_ has to be chosen through deserialisation.")
            }
            backgroundTertiary_buf = (backgroundTertiary_buf_ as Color | number | string | Resource)
        }
        const backgroundTertiary_result : ResourceColor | undefined = backgroundTertiary_buf
        const backgroundFourth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundFourth_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundFourth_buf_runtimeType))
        {
            const backgroundFourth_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundFourth_buf_ : Color | number | string | Resource | undefined
            if (backgroundFourth_buf__selector == 0) {
                backgroundFourth_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundFourth_buf__selector == 1) {
                backgroundFourth_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundFourth_buf__selector == 2) {
                backgroundFourth_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundFourth_buf__selector == 3) {
                backgroundFourth_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundFourth_buf_ has to be chosen through deserialisation.")
            }
            backgroundFourth_buf = (backgroundFourth_buf_ as Color | number | string | Resource)
        }
        const backgroundFourth_result : ResourceColor | undefined = backgroundFourth_buf
        const backgroundEmphasize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEmphasize_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEmphasize_buf_runtimeType))
        {
            const backgroundEmphasize_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundEmphasize_buf_ : Color | number | string | Resource | undefined
            if (backgroundEmphasize_buf__selector == 0) {
                backgroundEmphasize_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundEmphasize_buf__selector == 1) {
                backgroundEmphasize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundEmphasize_buf__selector == 2) {
                backgroundEmphasize_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundEmphasize_buf__selector == 3) {
                backgroundEmphasize_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundEmphasize_buf_ has to be chosen through deserialisation.")
            }
            backgroundEmphasize_buf = (backgroundEmphasize_buf_ as Color | number | string | Resource)
        }
        const backgroundEmphasize_result : ResourceColor | undefined = backgroundEmphasize_buf
        const compForegroundPrimary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compForegroundPrimary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compForegroundPrimary_buf_runtimeType))
        {
            const compForegroundPrimary_buf__selector : int32 = valueDeserializer.readInt8()
            let compForegroundPrimary_buf_ : Color | number | string | Resource | undefined
            if (compForegroundPrimary_buf__selector == 0) {
                compForegroundPrimary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compForegroundPrimary_buf__selector == 1) {
                compForegroundPrimary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compForegroundPrimary_buf__selector == 2) {
                compForegroundPrimary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compForegroundPrimary_buf__selector == 3) {
                compForegroundPrimary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compForegroundPrimary_buf_ has to be chosen through deserialisation.")
            }
            compForegroundPrimary_buf = (compForegroundPrimary_buf_ as Color | number | string | Resource)
        }
        const compForegroundPrimary_result : ResourceColor | undefined = compForegroundPrimary_buf
        const compBackgroundPrimary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compBackgroundPrimary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compBackgroundPrimary_buf_runtimeType))
        {
            const compBackgroundPrimary_buf__selector : int32 = valueDeserializer.readInt8()
            let compBackgroundPrimary_buf_ : Color | number | string | Resource | undefined
            if (compBackgroundPrimary_buf__selector == 0) {
                compBackgroundPrimary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compBackgroundPrimary_buf__selector == 1) {
                compBackgroundPrimary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compBackgroundPrimary_buf__selector == 2) {
                compBackgroundPrimary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compBackgroundPrimary_buf__selector == 3) {
                compBackgroundPrimary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compBackgroundPrimary_buf_ has to be chosen through deserialisation.")
            }
            compBackgroundPrimary_buf = (compBackgroundPrimary_buf_ as Color | number | string | Resource)
        }
        const compBackgroundPrimary_result : ResourceColor | undefined = compBackgroundPrimary_buf
        const compBackgroundPrimaryTran_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compBackgroundPrimaryTran_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compBackgroundPrimaryTran_buf_runtimeType))
        {
            const compBackgroundPrimaryTran_buf__selector : int32 = valueDeserializer.readInt8()
            let compBackgroundPrimaryTran_buf_ : Color | number | string | Resource | undefined
            if (compBackgroundPrimaryTran_buf__selector == 0) {
                compBackgroundPrimaryTran_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compBackgroundPrimaryTran_buf__selector == 1) {
                compBackgroundPrimaryTran_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compBackgroundPrimaryTran_buf__selector == 2) {
                compBackgroundPrimaryTran_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compBackgroundPrimaryTran_buf__selector == 3) {
                compBackgroundPrimaryTran_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compBackgroundPrimaryTran_buf_ has to be chosen through deserialisation.")
            }
            compBackgroundPrimaryTran_buf = (compBackgroundPrimaryTran_buf_ as Color | number | string | Resource)
        }
        const compBackgroundPrimaryTran_result : ResourceColor | undefined = compBackgroundPrimaryTran_buf
        const compBackgroundPrimaryContrary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compBackgroundPrimaryContrary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compBackgroundPrimaryContrary_buf_runtimeType))
        {
            const compBackgroundPrimaryContrary_buf__selector : int32 = valueDeserializer.readInt8()
            let compBackgroundPrimaryContrary_buf_ : Color | number | string | Resource | undefined
            if (compBackgroundPrimaryContrary_buf__selector == 0) {
                compBackgroundPrimaryContrary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compBackgroundPrimaryContrary_buf__selector == 1) {
                compBackgroundPrimaryContrary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compBackgroundPrimaryContrary_buf__selector == 2) {
                compBackgroundPrimaryContrary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compBackgroundPrimaryContrary_buf__selector == 3) {
                compBackgroundPrimaryContrary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compBackgroundPrimaryContrary_buf_ has to be chosen through deserialisation.")
            }
            compBackgroundPrimaryContrary_buf = (compBackgroundPrimaryContrary_buf_ as Color | number | string | Resource)
        }
        const compBackgroundPrimaryContrary_result : ResourceColor | undefined = compBackgroundPrimaryContrary_buf
        const compBackgroundGray_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compBackgroundGray_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compBackgroundGray_buf_runtimeType))
        {
            const compBackgroundGray_buf__selector : int32 = valueDeserializer.readInt8()
            let compBackgroundGray_buf_ : Color | number | string | Resource | undefined
            if (compBackgroundGray_buf__selector == 0) {
                compBackgroundGray_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compBackgroundGray_buf__selector == 1) {
                compBackgroundGray_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compBackgroundGray_buf__selector == 2) {
                compBackgroundGray_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compBackgroundGray_buf__selector == 3) {
                compBackgroundGray_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compBackgroundGray_buf_ has to be chosen through deserialisation.")
            }
            compBackgroundGray_buf = (compBackgroundGray_buf_ as Color | number | string | Resource)
        }
        const compBackgroundGray_result : ResourceColor | undefined = compBackgroundGray_buf
        const compBackgroundSecondary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compBackgroundSecondary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compBackgroundSecondary_buf_runtimeType))
        {
            const compBackgroundSecondary_buf__selector : int32 = valueDeserializer.readInt8()
            let compBackgroundSecondary_buf_ : Color | number | string | Resource | undefined
            if (compBackgroundSecondary_buf__selector == 0) {
                compBackgroundSecondary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compBackgroundSecondary_buf__selector == 1) {
                compBackgroundSecondary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compBackgroundSecondary_buf__selector == 2) {
                compBackgroundSecondary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compBackgroundSecondary_buf__selector == 3) {
                compBackgroundSecondary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compBackgroundSecondary_buf_ has to be chosen through deserialisation.")
            }
            compBackgroundSecondary_buf = (compBackgroundSecondary_buf_ as Color | number | string | Resource)
        }
        const compBackgroundSecondary_result : ResourceColor | undefined = compBackgroundSecondary_buf
        const compBackgroundTertiary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compBackgroundTertiary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compBackgroundTertiary_buf_runtimeType))
        {
            const compBackgroundTertiary_buf__selector : int32 = valueDeserializer.readInt8()
            let compBackgroundTertiary_buf_ : Color | number | string | Resource | undefined
            if (compBackgroundTertiary_buf__selector == 0) {
                compBackgroundTertiary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compBackgroundTertiary_buf__selector == 1) {
                compBackgroundTertiary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compBackgroundTertiary_buf__selector == 2) {
                compBackgroundTertiary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compBackgroundTertiary_buf__selector == 3) {
                compBackgroundTertiary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compBackgroundTertiary_buf_ has to be chosen through deserialisation.")
            }
            compBackgroundTertiary_buf = (compBackgroundTertiary_buf_ as Color | number | string | Resource)
        }
        const compBackgroundTertiary_result : ResourceColor | undefined = compBackgroundTertiary_buf
        const compBackgroundEmphasize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compBackgroundEmphasize_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compBackgroundEmphasize_buf_runtimeType))
        {
            const compBackgroundEmphasize_buf__selector : int32 = valueDeserializer.readInt8()
            let compBackgroundEmphasize_buf_ : Color | number | string | Resource | undefined
            if (compBackgroundEmphasize_buf__selector == 0) {
                compBackgroundEmphasize_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compBackgroundEmphasize_buf__selector == 1) {
                compBackgroundEmphasize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compBackgroundEmphasize_buf__selector == 2) {
                compBackgroundEmphasize_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compBackgroundEmphasize_buf__selector == 3) {
                compBackgroundEmphasize_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compBackgroundEmphasize_buf_ has to be chosen through deserialisation.")
            }
            compBackgroundEmphasize_buf = (compBackgroundEmphasize_buf_ as Color | number | string | Resource)
        }
        const compBackgroundEmphasize_result : ResourceColor | undefined = compBackgroundEmphasize_buf
        const compBackgroundNeutral_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compBackgroundNeutral_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compBackgroundNeutral_buf_runtimeType))
        {
            const compBackgroundNeutral_buf__selector : int32 = valueDeserializer.readInt8()
            let compBackgroundNeutral_buf_ : Color | number | string | Resource | undefined
            if (compBackgroundNeutral_buf__selector == 0) {
                compBackgroundNeutral_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compBackgroundNeutral_buf__selector == 1) {
                compBackgroundNeutral_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compBackgroundNeutral_buf__selector == 2) {
                compBackgroundNeutral_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compBackgroundNeutral_buf__selector == 3) {
                compBackgroundNeutral_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compBackgroundNeutral_buf_ has to be chosen through deserialisation.")
            }
            compBackgroundNeutral_buf = (compBackgroundNeutral_buf_ as Color | number | string | Resource)
        }
        const compBackgroundNeutral_result : ResourceColor | undefined = compBackgroundNeutral_buf
        const compEmphasizeSecondary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compEmphasizeSecondary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compEmphasizeSecondary_buf_runtimeType))
        {
            const compEmphasizeSecondary_buf__selector : int32 = valueDeserializer.readInt8()
            let compEmphasizeSecondary_buf_ : Color | number | string | Resource | undefined
            if (compEmphasizeSecondary_buf__selector == 0) {
                compEmphasizeSecondary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compEmphasizeSecondary_buf__selector == 1) {
                compEmphasizeSecondary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compEmphasizeSecondary_buf__selector == 2) {
                compEmphasizeSecondary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compEmphasizeSecondary_buf__selector == 3) {
                compEmphasizeSecondary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compEmphasizeSecondary_buf_ has to be chosen through deserialisation.")
            }
            compEmphasizeSecondary_buf = (compEmphasizeSecondary_buf_ as Color | number | string | Resource)
        }
        const compEmphasizeSecondary_result : ResourceColor | undefined = compEmphasizeSecondary_buf
        const compEmphasizeTertiary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compEmphasizeTertiary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compEmphasizeTertiary_buf_runtimeType))
        {
            const compEmphasizeTertiary_buf__selector : int32 = valueDeserializer.readInt8()
            let compEmphasizeTertiary_buf_ : Color | number | string | Resource | undefined
            if (compEmphasizeTertiary_buf__selector == 0) {
                compEmphasizeTertiary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compEmphasizeTertiary_buf__selector == 1) {
                compEmphasizeTertiary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compEmphasizeTertiary_buf__selector == 2) {
                compEmphasizeTertiary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compEmphasizeTertiary_buf__selector == 3) {
                compEmphasizeTertiary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compEmphasizeTertiary_buf_ has to be chosen through deserialisation.")
            }
            compEmphasizeTertiary_buf = (compEmphasizeTertiary_buf_ as Color | number | string | Resource)
        }
        const compEmphasizeTertiary_result : ResourceColor | undefined = compEmphasizeTertiary_buf
        const compDivider_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compDivider_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compDivider_buf_runtimeType))
        {
            const compDivider_buf__selector : int32 = valueDeserializer.readInt8()
            let compDivider_buf_ : Color | number | string | Resource | undefined
            if (compDivider_buf__selector == 0) {
                compDivider_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compDivider_buf__selector == 1) {
                compDivider_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compDivider_buf__selector == 2) {
                compDivider_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compDivider_buf__selector == 3) {
                compDivider_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compDivider_buf_ has to be chosen through deserialisation.")
            }
            compDivider_buf = (compDivider_buf_ as Color | number | string | Resource)
        }
        const compDivider_result : ResourceColor | undefined = compDivider_buf
        const compCommonContrary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compCommonContrary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compCommonContrary_buf_runtimeType))
        {
            const compCommonContrary_buf__selector : int32 = valueDeserializer.readInt8()
            let compCommonContrary_buf_ : Color | number | string | Resource | undefined
            if (compCommonContrary_buf__selector == 0) {
                compCommonContrary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compCommonContrary_buf__selector == 1) {
                compCommonContrary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compCommonContrary_buf__selector == 2) {
                compCommonContrary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compCommonContrary_buf__selector == 3) {
                compCommonContrary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compCommonContrary_buf_ has to be chosen through deserialisation.")
            }
            compCommonContrary_buf = (compCommonContrary_buf_ as Color | number | string | Resource)
        }
        const compCommonContrary_result : ResourceColor | undefined = compCommonContrary_buf
        const compBackgroundFocus_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compBackgroundFocus_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compBackgroundFocus_buf_runtimeType))
        {
            const compBackgroundFocus_buf__selector : int32 = valueDeserializer.readInt8()
            let compBackgroundFocus_buf_ : Color | number | string | Resource | undefined
            if (compBackgroundFocus_buf__selector == 0) {
                compBackgroundFocus_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compBackgroundFocus_buf__selector == 1) {
                compBackgroundFocus_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compBackgroundFocus_buf__selector == 2) {
                compBackgroundFocus_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compBackgroundFocus_buf__selector == 3) {
                compBackgroundFocus_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compBackgroundFocus_buf_ has to be chosen through deserialisation.")
            }
            compBackgroundFocus_buf = (compBackgroundFocus_buf_ as Color | number | string | Resource)
        }
        const compBackgroundFocus_result : ResourceColor | undefined = compBackgroundFocus_buf
        const compFocusedPrimary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compFocusedPrimary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compFocusedPrimary_buf_runtimeType))
        {
            const compFocusedPrimary_buf__selector : int32 = valueDeserializer.readInt8()
            let compFocusedPrimary_buf_ : Color | number | string | Resource | undefined
            if (compFocusedPrimary_buf__selector == 0) {
                compFocusedPrimary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compFocusedPrimary_buf__selector == 1) {
                compFocusedPrimary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compFocusedPrimary_buf__selector == 2) {
                compFocusedPrimary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compFocusedPrimary_buf__selector == 3) {
                compFocusedPrimary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compFocusedPrimary_buf_ has to be chosen through deserialisation.")
            }
            compFocusedPrimary_buf = (compFocusedPrimary_buf_ as Color | number | string | Resource)
        }
        const compFocusedPrimary_result : ResourceColor | undefined = compFocusedPrimary_buf
        const compFocusedSecondary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compFocusedSecondary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compFocusedSecondary_buf_runtimeType))
        {
            const compFocusedSecondary_buf__selector : int32 = valueDeserializer.readInt8()
            let compFocusedSecondary_buf_ : Color | number | string | Resource | undefined
            if (compFocusedSecondary_buf__selector == 0) {
                compFocusedSecondary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compFocusedSecondary_buf__selector == 1) {
                compFocusedSecondary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compFocusedSecondary_buf__selector == 2) {
                compFocusedSecondary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compFocusedSecondary_buf__selector == 3) {
                compFocusedSecondary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compFocusedSecondary_buf_ has to be chosen through deserialisation.")
            }
            compFocusedSecondary_buf = (compFocusedSecondary_buf_ as Color | number | string | Resource)
        }
        const compFocusedSecondary_result : ResourceColor | undefined = compFocusedSecondary_buf
        const compFocusedTertiary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let compFocusedTertiary_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (compFocusedTertiary_buf_runtimeType))
        {
            const compFocusedTertiary_buf__selector : int32 = valueDeserializer.readInt8()
            let compFocusedTertiary_buf_ : Color | number | string | Resource | undefined
            if (compFocusedTertiary_buf__selector == 0) {
                compFocusedTertiary_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (compFocusedTertiary_buf__selector == 1) {
                compFocusedTertiary_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (compFocusedTertiary_buf__selector == 2) {
                compFocusedTertiary_buf_ = (valueDeserializer.readString() as string)
            }
            else if (compFocusedTertiary_buf__selector == 3) {
                compFocusedTertiary_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for compFocusedTertiary_buf_ has to be chosen through deserialisation.")
            }
            compFocusedTertiary_buf = (compFocusedTertiary_buf_ as Color | number | string | Resource)
        }
        const compFocusedTertiary_result : ResourceColor | undefined = compFocusedTertiary_buf
        const interactiveHover_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let interactiveHover_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (interactiveHover_buf_runtimeType))
        {
            const interactiveHover_buf__selector : int32 = valueDeserializer.readInt8()
            let interactiveHover_buf_ : Color | number | string | Resource | undefined
            if (interactiveHover_buf__selector == 0) {
                interactiveHover_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (interactiveHover_buf__selector == 1) {
                interactiveHover_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (interactiveHover_buf__selector == 2) {
                interactiveHover_buf_ = (valueDeserializer.readString() as string)
            }
            else if (interactiveHover_buf__selector == 3) {
                interactiveHover_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for interactiveHover_buf_ has to be chosen through deserialisation.")
            }
            interactiveHover_buf = (interactiveHover_buf_ as Color | number | string | Resource)
        }
        const interactiveHover_result : ResourceColor | undefined = interactiveHover_buf
        const interactivePressed_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let interactivePressed_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (interactivePressed_buf_runtimeType))
        {
            const interactivePressed_buf__selector : int32 = valueDeserializer.readInt8()
            let interactivePressed_buf_ : Color | number | string | Resource | undefined
            if (interactivePressed_buf__selector == 0) {
                interactivePressed_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (interactivePressed_buf__selector == 1) {
                interactivePressed_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (interactivePressed_buf__selector == 2) {
                interactivePressed_buf_ = (valueDeserializer.readString() as string)
            }
            else if (interactivePressed_buf__selector == 3) {
                interactivePressed_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for interactivePressed_buf_ has to be chosen through deserialisation.")
            }
            interactivePressed_buf = (interactivePressed_buf_ as Color | number | string | Resource)
        }
        const interactivePressed_result : ResourceColor | undefined = interactivePressed_buf
        const interactiveFocus_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let interactiveFocus_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (interactiveFocus_buf_runtimeType))
        {
            const interactiveFocus_buf__selector : int32 = valueDeserializer.readInt8()
            let interactiveFocus_buf_ : Color | number | string | Resource | undefined
            if (interactiveFocus_buf__selector == 0) {
                interactiveFocus_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (interactiveFocus_buf__selector == 1) {
                interactiveFocus_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (interactiveFocus_buf__selector == 2) {
                interactiveFocus_buf_ = (valueDeserializer.readString() as string)
            }
            else if (interactiveFocus_buf__selector == 3) {
                interactiveFocus_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for interactiveFocus_buf_ has to be chosen through deserialisation.")
            }
            interactiveFocus_buf = (interactiveFocus_buf_ as Color | number | string | Resource)
        }
        const interactiveFocus_result : ResourceColor | undefined = interactiveFocus_buf
        const interactiveActive_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let interactiveActive_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (interactiveActive_buf_runtimeType))
        {
            const interactiveActive_buf__selector : int32 = valueDeserializer.readInt8()
            let interactiveActive_buf_ : Color | number | string | Resource | undefined
            if (interactiveActive_buf__selector == 0) {
                interactiveActive_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (interactiveActive_buf__selector == 1) {
                interactiveActive_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (interactiveActive_buf__selector == 2) {
                interactiveActive_buf_ = (valueDeserializer.readString() as string)
            }
            else if (interactiveActive_buf__selector == 3) {
                interactiveActive_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for interactiveActive_buf_ has to be chosen through deserialisation.")
            }
            interactiveActive_buf = (interactiveActive_buf_ as Color | number | string | Resource)
        }
        const interactiveActive_result : ResourceColor | undefined = interactiveActive_buf
        const interactiveSelect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let interactiveSelect_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (interactiveSelect_buf_runtimeType))
        {
            const interactiveSelect_buf__selector : int32 = valueDeserializer.readInt8()
            let interactiveSelect_buf_ : Color | number | string | Resource | undefined
            if (interactiveSelect_buf__selector == 0) {
                interactiveSelect_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (interactiveSelect_buf__selector == 1) {
                interactiveSelect_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (interactiveSelect_buf__selector == 2) {
                interactiveSelect_buf_ = (valueDeserializer.readString() as string)
            }
            else if (interactiveSelect_buf__selector == 3) {
                interactiveSelect_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for interactiveSelect_buf_ has to be chosen through deserialisation.")
            }
            interactiveSelect_buf = (interactiveSelect_buf_ as Color | number | string | Resource)
        }
        const interactiveSelect_result : ResourceColor | undefined = interactiveSelect_buf
        const interactiveClick_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let interactiveClick_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (interactiveClick_buf_runtimeType))
        {
            const interactiveClick_buf__selector : int32 = valueDeserializer.readInt8()
            let interactiveClick_buf_ : Color | number | string | Resource | undefined
            if (interactiveClick_buf__selector == 0) {
                interactiveClick_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (interactiveClick_buf__selector == 1) {
                interactiveClick_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (interactiveClick_buf__selector == 2) {
                interactiveClick_buf_ = (valueDeserializer.readString() as string)
            }
            else if (interactiveClick_buf__selector == 3) {
                interactiveClick_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for interactiveClick_buf_ has to be chosen through deserialisation.")
            }
            interactiveClick_buf = (interactiveClick_buf_ as Color | number | string | Resource)
        }
        const interactiveClick_result : ResourceColor | undefined = interactiveClick_buf
        let value : CustomColors = ({brand: brand_result, warning: warning_result, alert: alert_result, confirm: confirm_result, fontPrimary: fontPrimary_result, fontSecondary: fontSecondary_result, fontTertiary: fontTertiary_result, fontFourth: fontFourth_result, fontEmphasize: fontEmphasize_result, fontOnPrimary: fontOnPrimary_result, fontOnSecondary: fontOnSecondary_result, fontOnTertiary: fontOnTertiary_result, fontOnFourth: fontOnFourth_result, iconPrimary: iconPrimary_result, iconSecondary: iconSecondary_result, iconTertiary: iconTertiary_result, iconFourth: iconFourth_result, iconEmphasize: iconEmphasize_result, iconSubEmphasize: iconSubEmphasize_result, iconOnPrimary: iconOnPrimary_result, iconOnSecondary: iconOnSecondary_result, iconOnTertiary: iconOnTertiary_result, iconOnFourth: iconOnFourth_result, backgroundPrimary: backgroundPrimary_result, backgroundSecondary: backgroundSecondary_result, backgroundTertiary: backgroundTertiary_result, backgroundFourth: backgroundFourth_result, backgroundEmphasize: backgroundEmphasize_result, compForegroundPrimary: compForegroundPrimary_result, compBackgroundPrimary: compBackgroundPrimary_result, compBackgroundPrimaryTran: compBackgroundPrimaryTran_result, compBackgroundPrimaryContrary: compBackgroundPrimaryContrary_result, compBackgroundGray: compBackgroundGray_result, compBackgroundSecondary: compBackgroundSecondary_result, compBackgroundTertiary: compBackgroundTertiary_result, compBackgroundEmphasize: compBackgroundEmphasize_result, compBackgroundNeutral: compBackgroundNeutral_result, compEmphasizeSecondary: compEmphasizeSecondary_result, compEmphasizeTertiary: compEmphasizeTertiary_result, compDivider: compDivider_result, compCommonContrary: compCommonContrary_result, compBackgroundFocus: compBackgroundFocus_result, compFocusedPrimary: compFocusedPrimary_result, compFocusedSecondary: compFocusedSecondary_result, compFocusedTertiary: compFocusedTertiary_result, interactiveHover: interactiveHover_result, interactivePressed: interactivePressed_result, interactiveFocus: interactiveFocus_result, interactiveActive: interactiveActive_result, interactiveSelect: interactiveSelect_result, interactiveClick: interactiveClick_result} as CustomColors)
        return value
    }
    readDataPanelShadowOptions(): DataPanelShadowOptions {
        let valueDeserializer : Deserializer = this
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            const radius_buf__selector : int32 = valueDeserializer.readInt8()
            let radius_buf_ : number | Resource | undefined
            if (radius_buf__selector == 0) {
                radius_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (radius_buf__selector == 1) {
                radius_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for radius_buf_ has to be chosen through deserialisation.")
            }
            radius_buf = (radius_buf_ as number | Resource)
        }
        const radius_result : number | Resource | undefined = radius_buf
        const offsetX_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offsetX_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (offsetX_buf_runtimeType))
        {
            const offsetX_buf__selector : int32 = valueDeserializer.readInt8()
            let offsetX_buf_ : number | Resource | undefined
            if (offsetX_buf__selector == 0) {
                offsetX_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (offsetX_buf__selector == 1) {
                offsetX_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for offsetX_buf_ has to be chosen through deserialisation.")
            }
            offsetX_buf = (offsetX_buf_ as number | Resource)
        }
        const offsetX_result : number | Resource | undefined = offsetX_buf
        const offsetY_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offsetY_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (offsetY_buf_runtimeType))
        {
            const offsetY_buf__selector : int32 = valueDeserializer.readInt8()
            let offsetY_buf_ : number | Resource | undefined
            if (offsetY_buf__selector == 0) {
                offsetY_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (offsetY_buf__selector == 1) {
                offsetY_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for offsetY_buf_ has to be chosen through deserialisation.")
            }
            offsetY_buf = (offsetY_buf_ as number | Resource)
        }
        const offsetY_result : number | Resource | undefined = offsetY_buf
        const colors_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let colors_buf : Array<ResourceColor | LinearGradient> | undefined
        if ((RuntimeType.UNDEFINED) != (colors_buf_runtimeType))
        {
            const colors_buf__length : int32 = valueDeserializer.readInt32()
            let colors_buf_ : Array<ResourceColor | LinearGradient> = new Array<ResourceColor | LinearGradient>(colors_buf__length)
            for (let colors_buf__i = 0; colors_buf__i < colors_buf__length; colors_buf__i++) {
                const colors_buf__buf_selector : int32 = valueDeserializer.readInt8()
                let colors_buf__buf : ResourceColor | LinearGradient | undefined
                if (colors_buf__buf_selector == 0) {
                    const colors_buf__buf_u_selector : int32 = valueDeserializer.readInt8()
                    let colors_buf__buf_u : Color | number | string | Resource | undefined
                    if (colors_buf__buf_u_selector == 0) {
                        colors_buf__buf_u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                    }
                    else if (colors_buf__buf_u_selector == 1) {
                        colors_buf__buf_u = (valueDeserializer.readNumber() as number)
                    }
                    else if (colors_buf__buf_u_selector == 2) {
                        colors_buf__buf_u = (valueDeserializer.readString() as string)
                    }
                    else if (colors_buf__buf_u_selector == 3) {
                        colors_buf__buf_u = valueDeserializer.readResource()
                    }
                    else {
                        throw new Error("One of the branches for colors_buf__buf_u has to be chosen through deserialisation.")
                    }
                    colors_buf__buf = (colors_buf__buf_u as Color | number | string | Resource)
                }
                else if (colors_buf__buf_selector == 1) {
                    colors_buf__buf = (valueDeserializer.readLinearGradient() as LinearGradient)
                }
                else {
                    throw new Error("One of the branches for colors_buf__buf has to be chosen through deserialisation.")
                }
                colors_buf_[colors_buf__i] = (colors_buf__buf as ResourceColor | LinearGradient)
            }
            colors_buf = colors_buf_
        }
        const colors_result : Array<ResourceColor | LinearGradient> | undefined = colors_buf
        let value : DataPanelShadowOptions = ({radius: radius_result, offsetX: offsetX_result, offsetY: offsetY_result, colors: colors_result} as DataPanelShadowOptions)
        return value
    }
    readDecorationStyle(): DecorationStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return DecorationStyleInternal.fromPtr(ptr)
    }
    readDecorationStyleInterface(): DecorationStyleInterface {
        let valueDeserializer : Deserializer = this
        const type_result : TextDecorationType = TypeChecker.TextDecorationType_FromNumeric(valueDeserializer.readInt32())
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : TextDecorationStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.TextDecorationStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : TextDecorationStyle | undefined = style_buf
        let value : DecorationStyleInterface = ({type: type_result, color: color_result, style: style_result} as DecorationStyleInterface)
        return value
    }
    readDecorationStyleResult(): DecorationStyleResult {
        let valueDeserializer : Deserializer = this
        const type_result : TextDecorationType = TypeChecker.TextDecorationType_FromNumeric(valueDeserializer.readInt32())
        const color_buf_selector : int32 = valueDeserializer.readInt8()
        let color_buf : Color | number | string | Resource | undefined
        if (color_buf_selector == 0) {
            color_buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
        }
        else if (color_buf_selector == 1) {
            color_buf = (valueDeserializer.readNumber() as number)
        }
        else if (color_buf_selector == 2) {
            color_buf = (valueDeserializer.readString() as string)
        }
        else if (color_buf_selector == 3) {
            color_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for color_buf has to be chosen through deserialisation.")
        }
        const color_result : ResourceColor = (color_buf as Color | number | string | Resource)
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : TextDecorationStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.TextDecorationStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : TextDecorationStyle | undefined = style_buf
        let value : DecorationStyleResult = ({type: type_result, color: color_result, style: style_result} as DecorationStyleResult)
        return value
    }
    readDividerOptions(): DividerOptions {
        let valueDeserializer : Deserializer = this
        const strokeWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeWidth_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (strokeWidth_buf_runtimeType))
        {
            strokeWidth_buf = (valueDeserializer.readLength() as Dimension)
        }
        const strokeWidth_result : Dimension | undefined = strokeWidth_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const startMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let startMargin_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (startMargin_buf_runtimeType))
        {
            startMargin_buf = (valueDeserializer.readLength() as Dimension)
        }
        const startMargin_result : Dimension | undefined = startMargin_buf
        const endMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let endMargin_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (endMargin_buf_runtimeType))
        {
            endMargin_buf = (valueDeserializer.readLength() as Dimension)
        }
        const endMargin_result : Dimension | undefined = endMargin_buf
        let value : DividerOptions = ({strokeWidth: strokeWidth_result, color: color_result, startMargin: startMargin_result, endMargin: endMargin_result} as DividerOptions)
        return value
    }
    readDividerStyle(): DividerStyle {
        let valueDeserializer : Deserializer = this
        const strokeWidth_result : Length = (valueDeserializer.readLength() as Length)
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const startMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let startMargin_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (startMargin_buf_runtimeType))
        {
            startMargin_buf = (valueDeserializer.readLength() as Length)
        }
        const startMargin_result : Length | undefined = startMargin_buf
        const endMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let endMargin_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (endMargin_buf_runtimeType))
        {
            endMargin_buf = (valueDeserializer.readLength() as Length)
        }
        const endMargin_result : Length | undefined = endMargin_buf
        let value : DividerStyle = ({strokeWidth: strokeWidth_result, color: color_result, startMargin: startMargin_result, endMargin: endMargin_result} as DividerStyle)
        return value
    }
    readDividerStyleSidebar(): DividerStyle_sidebar {
        let valueDeserializer : Deserializer = this
        const strokeWidth_result : Length = (valueDeserializer.readLength() as Length)
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const startMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let startMargin_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (startMargin_buf_runtimeType))
        {
            startMargin_buf = (valueDeserializer.readLength() as Length)
        }
        const startMargin_result : Length | undefined = startMargin_buf
        const endMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let endMargin_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (endMargin_buf_runtimeType))
        {
            endMargin_buf = (valueDeserializer.readLength() as Length)
        }
        const endMargin_result : Length | undefined = endMargin_buf
        let value : DividerStyle_sidebar = ({strokeWidth: strokeWidth_result, color: color_result, startMargin: startMargin_result, endMargin: endMargin_result} as DividerStyle_sidebar)
        return value
    }
    readDividerStyleOptions(): DividerStyleOptions {
        let valueDeserializer : Deserializer = this
        const strokeWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeWidth_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (strokeWidth_buf_runtimeType))
        {
            strokeWidth_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const strokeWidth_result : LengthMetrics | undefined = strokeWidth_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const startMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let startMargin_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (startMargin_buf_runtimeType))
        {
            startMargin_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const startMargin_result : LengthMetrics | undefined = startMargin_buf
        const endMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let endMargin_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (endMargin_buf_runtimeType))
        {
            endMargin_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const endMargin_result : LengthMetrics | undefined = endMargin_buf
        const mode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let mode_buf : DividerMode | undefined
        if ((RuntimeType.UNDEFINED) != (mode_buf_runtimeType))
        {
            mode_buf = TypeChecker.DividerMode_FromNumeric(valueDeserializer.readInt32())
        }
        const mode_result : DividerMode | undefined = mode_buf
        let value : DividerStyleOptions = ({strokeWidth: strokeWidth_result, color: color_result, startMargin: startMargin_result, endMargin: endMargin_result, mode: mode_result} as DividerStyleOptions)
        return value
    }
    readDotIndicator(): DotIndicator {
        throw new Error("Can not deserialize builder class")
    }
    readDragPreviewOptions(): DragPreviewOptions {
        let valueDeserializer : Deserializer = this
        const mode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let mode_buf : DragPreviewMode | Array<DragPreviewMode> | undefined
        if ((RuntimeType.UNDEFINED) != (mode_buf_runtimeType))
        {
            const mode_buf__selector : int32 = valueDeserializer.readInt8()
            let mode_buf_ : DragPreviewMode | Array<DragPreviewMode> | undefined
            if (mode_buf__selector == 0) {
                mode_buf_ = TypeChecker.DragPreviewMode_FromNumeric(valueDeserializer.readInt32())
            }
            else if (mode_buf__selector == 1) {
                const mode_buf__u_length : int32 = valueDeserializer.readInt32()
                let mode_buf__u : Array<DragPreviewMode> = new Array<DragPreviewMode>(mode_buf__u_length)
                for (let mode_buf__u_i = 0; mode_buf__u_i < mode_buf__u_length; mode_buf__u_i++) {
                    mode_buf__u[mode_buf__u_i] = TypeChecker.DragPreviewMode_FromNumeric(valueDeserializer.readInt32())
                }
                mode_buf_ = mode_buf__u
            }
            else {
                throw new Error("One of the branches for mode_buf_ has to be chosen through deserialisation.")
            }
            mode_buf = (mode_buf_ as DragPreviewMode | Array<DragPreviewMode>)
        }
        const mode_result : DragPreviewMode | Array<DragPreviewMode> | undefined = mode_buf
        const modifier_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let modifier_buf : ImageModifier | undefined
        if ((RuntimeType.UNDEFINED) != (modifier_buf_runtimeType))
        {
            modifier_buf = valueDeserializer.readImageModifier()
        }
        const modifier_result : ImageModifier | undefined = modifier_buf
        const numberBadge_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let numberBadge_buf : boolean | number | undefined
        if ((RuntimeType.UNDEFINED) != (numberBadge_buf_runtimeType))
        {
            const numberBadge_buf__selector : int32 = valueDeserializer.readInt8()
            let numberBadge_buf_ : boolean | number | undefined
            if (numberBadge_buf__selector == 0) {
                numberBadge_buf_ = valueDeserializer.readBoolean()
            }
            else if (numberBadge_buf__selector == 1) {
                numberBadge_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for numberBadge_buf_ has to be chosen through deserialisation.")
            }
            numberBadge_buf = (numberBadge_buf_ as boolean | number)
        }
        const numberBadge_result : boolean | number | undefined = numberBadge_buf
        const sizeChangeEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let sizeChangeEffect_buf : DraggingSizeChangeEffect | undefined
        if ((RuntimeType.UNDEFINED) != (sizeChangeEffect_buf_runtimeType))
        {
            sizeChangeEffect_buf = TypeChecker.DraggingSizeChangeEffect_FromNumeric(valueDeserializer.readInt32())
        }
        const sizeChangeEffect_result : DraggingSizeChangeEffect | undefined = sizeChangeEffect_buf
        let value : DragPreviewOptions = ({mode: mode_result, modifier: modifier_result, numberBadge: numberBadge_result, sizeChangeEffect: sizeChangeEffect_result} as DragPreviewOptions)
        return value
    }
    readEdgeColors(): EdgeColors {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            const top_buf__selector : int32 = valueDeserializer.readInt8()
            let top_buf_ : Color | number | string | Resource | undefined
            if (top_buf__selector == 0) {
                top_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (top_buf__selector == 1) {
                top_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (top_buf__selector == 2) {
                top_buf_ = (valueDeserializer.readString() as string)
            }
            else if (top_buf__selector == 3) {
                top_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for top_buf_ has to be chosen through deserialisation.")
            }
            top_buf = (top_buf_ as Color | number | string | Resource)
        }
        const top_result : ResourceColor | undefined = top_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            const right_buf__selector : int32 = valueDeserializer.readInt8()
            let right_buf_ : Color | number | string | Resource | undefined
            if (right_buf__selector == 0) {
                right_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (right_buf__selector == 1) {
                right_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (right_buf__selector == 2) {
                right_buf_ = (valueDeserializer.readString() as string)
            }
            else if (right_buf__selector == 3) {
                right_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for right_buf_ has to be chosen through deserialisation.")
            }
            right_buf = (right_buf_ as Color | number | string | Resource)
        }
        const right_result : ResourceColor | undefined = right_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            const bottom_buf__selector : int32 = valueDeserializer.readInt8()
            let bottom_buf_ : Color | number | string | Resource | undefined
            if (bottom_buf__selector == 0) {
                bottom_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (bottom_buf__selector == 1) {
                bottom_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (bottom_buf__selector == 2) {
                bottom_buf_ = (valueDeserializer.readString() as string)
            }
            else if (bottom_buf__selector == 3) {
                bottom_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for bottom_buf_ has to be chosen through deserialisation.")
            }
            bottom_buf = (bottom_buf_ as Color | number | string | Resource)
        }
        const bottom_result : ResourceColor | undefined = bottom_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            const left_buf__selector : int32 = valueDeserializer.readInt8()
            let left_buf_ : Color | number | string | Resource | undefined
            if (left_buf__selector == 0) {
                left_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (left_buf__selector == 1) {
                left_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (left_buf__selector == 2) {
                left_buf_ = (valueDeserializer.readString() as string)
            }
            else if (left_buf__selector == 3) {
                left_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for left_buf_ has to be chosen through deserialisation.")
            }
            left_buf = (left_buf_ as Color | number | string | Resource)
        }
        const left_result : ResourceColor | undefined = left_buf
        let value : EdgeColors = ({top: top_result, right: right_result, bottom: bottom_result, left: left_result} as EdgeColors)
        return value
    }
    readEventTarget(): EventTarget {
        let valueDeserializer : Deserializer = this
        const area_result : Area = valueDeserializer.readArea()
        const id_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let id_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (id_buf_runtimeType))
        {
            id_buf = (valueDeserializer.readString() as string)
        }
        const id_result : string | undefined = id_buf
        let value : EventTarget = ({area: area_result, id: id_result} as EventTarget)
        return value
    }
    readExpandedMenuItemOptions(): ExpandedMenuItemOptions {
        let valueDeserializer : Deserializer = this
        const content_buf_selector : int32 = valueDeserializer.readInt8()
        let content_buf : string | Resource | undefined
        if (content_buf_selector == 0) {
            content_buf = (valueDeserializer.readString() as string)
        }
        else if (content_buf_selector == 1) {
            content_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for content_buf has to be chosen through deserialisation.")
        }
        const content_result : ResourceStr = (content_buf as string | Resource)
        const startIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let startIcon_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (startIcon_buf_runtimeType))
        {
            const startIcon_buf__selector : int32 = valueDeserializer.readInt8()
            let startIcon_buf_ : string | Resource | undefined
            if (startIcon_buf__selector == 0) {
                startIcon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (startIcon_buf__selector == 1) {
                startIcon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for startIcon_buf_ has to be chosen through deserialisation.")
            }
            startIcon_buf = (startIcon_buf_ as string | Resource)
        }
        const startIcon_result : ResourceStr | undefined = startIcon_buf
        const action_result : ((selectedText: Literal_String_plainText) => void) = valueDeserializer.readCallback_Literal_String_plainText_Void()
        let value : ExpandedMenuItemOptions = ({content: content_result, startIcon: startIcon_result, action: action_result} as ExpandedMenuItemOptions)
        return value
    }
    readFadingEdgeOptions(): FadingEdgeOptions {
        let valueDeserializer : Deserializer = this
        const fadingEdgeLength_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fadingEdgeLength_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (fadingEdgeLength_buf_runtimeType))
        {
            fadingEdgeLength_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const fadingEdgeLength_result : LengthMetrics | undefined = fadingEdgeLength_buf
        let value : FadingEdgeOptions = ({fadingEdgeLength: fadingEdgeLength_result} as FadingEdgeOptions)
        return value
    }
    readFlexSpaceOptions(): FlexSpaceOptions {
        let valueDeserializer : Deserializer = this
        const main_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let main_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (main_buf_runtimeType))
        {
            main_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const main_result : LengthMetrics | undefined = main_buf
        const cross_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cross_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (cross_buf_runtimeType))
        {
            cross_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const cross_result : LengthMetrics | undefined = cross_buf
        let value : FlexSpaceOptions = ({main: main_result, cross: cross_result} as FlexSpaceOptions)
        return value
    }
    readFocusAxisEvent(): FocusAxisEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return FocusAxisEventInternal.fromPtr(ptr)
    }
    readFocusBoxStyle(): FocusBoxStyle {
        let valueDeserializer : Deserializer = this
        const margin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let margin_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (margin_buf_runtimeType))
        {
            margin_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const margin_result : LengthMetrics | undefined = margin_buf
        const strokeColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeColor_buf : ColorMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (strokeColor_buf_runtimeType))
        {
            strokeColor_buf = (valueDeserializer.readColorMetrics() as ColorMetrics)
        }
        const strokeColor_result : ColorMetrics | undefined = strokeColor_buf
        const strokeWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeWidth_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (strokeWidth_buf_runtimeType))
        {
            strokeWidth_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const strokeWidth_result : LengthMetrics | undefined = strokeWidth_buf
        let value : FocusBoxStyle = ({margin: margin_result, strokeColor: strokeColor_result, strokeWidth: strokeWidth_result} as FocusBoxStyle)
        return value
    }
    readFont(): Font {
        let valueDeserializer : Deserializer = this
        const size_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let size_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (size_buf_runtimeType))
        {
            size_buf = (valueDeserializer.readLength() as Length)
        }
        const size_result : Length | undefined = size_buf
        const weight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let weight_buf : FontWeight | number | string | undefined
        if ((RuntimeType.UNDEFINED) != (weight_buf_runtimeType))
        {
            const weight_buf__selector : int32 = valueDeserializer.readInt8()
            let weight_buf_ : FontWeight | number | string | undefined
            if (weight_buf__selector == 0) {
                weight_buf_ = TypeChecker.FontWeight_FromNumeric(valueDeserializer.readInt32())
            }
            else if (weight_buf__selector == 1) {
                weight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (weight_buf__selector == 2) {
                weight_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for weight_buf_ has to be chosen through deserialisation.")
            }
            weight_buf = (weight_buf_ as FontWeight | number | string)
        }
        const weight_result : FontWeight | number | string | undefined = weight_buf
        const family_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let family_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (family_buf_runtimeType))
        {
            const family_buf__selector : int32 = valueDeserializer.readInt8()
            let family_buf_ : string | Resource | undefined
            if (family_buf__selector == 0) {
                family_buf_ = (valueDeserializer.readString() as string)
            }
            else if (family_buf__selector == 1) {
                family_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for family_buf_ has to be chosen through deserialisation.")
            }
            family_buf = (family_buf_ as string | Resource)
        }
        const family_result : string | Resource | undefined = family_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : FontStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.FontStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : FontStyle | undefined = style_buf
        let value : Font = ({size: size_result, weight: weight_result, family: family_result, style: style_result} as Font)
        return value
    }
    readFontOptions(): FontOptions {
        let valueDeserializer : Deserializer = this
        const familyName_buf_selector : int32 = valueDeserializer.readInt8()
        let familyName_buf : string | Resource | undefined
        if (familyName_buf_selector == 0) {
            familyName_buf = (valueDeserializer.readString() as string)
        }
        else if (familyName_buf_selector == 1) {
            familyName_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for familyName_buf has to be chosen through deserialisation.")
        }
        const familyName_result : string | Resource = (familyName_buf as string | Resource)
        const familySrc_buf_selector : int32 = valueDeserializer.readInt8()
        let familySrc_buf : string | Resource | undefined
        if (familySrc_buf_selector == 0) {
            familySrc_buf = (valueDeserializer.readString() as string)
        }
        else if (familySrc_buf_selector == 1) {
            familySrc_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for familySrc_buf has to be chosen through deserialisation.")
        }
        const familySrc_result : string | Resource = (familySrc_buf as string | Resource)
        let value : FontOptions = ({familyName: familyName_result, familySrc: familySrc_result} as FontOptions)
        return value
    }
    readForegroundBlurStyleOptions(): ForegroundBlurStyleOptions {
        let valueDeserializer : Deserializer = this
        const colorMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let colorMode_buf : ThemeColorMode | undefined
        if ((RuntimeType.UNDEFINED) != (colorMode_buf_runtimeType))
        {
            colorMode_buf = TypeChecker.ThemeColorMode_FromNumeric(valueDeserializer.readInt32())
        }
        const colorMode_result : ThemeColorMode | undefined = colorMode_buf
        const adaptiveColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let adaptiveColor_buf : AdaptiveColor | undefined
        if ((RuntimeType.UNDEFINED) != (adaptiveColor_buf_runtimeType))
        {
            adaptiveColor_buf = TypeChecker.AdaptiveColor_FromNumeric(valueDeserializer.readInt32())
        }
        const adaptiveColor_result : AdaptiveColor | undefined = adaptiveColor_buf
        const scale_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scale_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (scale_buf_runtimeType))
        {
            scale_buf = (valueDeserializer.readNumber() as number)
        }
        const scale_result : number | undefined = scale_buf
        const blurOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let blurOptions_buf : BlurOptions | undefined
        if ((RuntimeType.UNDEFINED) != (blurOptions_buf_runtimeType))
        {
            blurOptions_buf = valueDeserializer.readBlurOptions()
        }
        const blurOptions_result : BlurOptions | undefined = blurOptions_buf
        let value : ForegroundBlurStyleOptions = ({colorMode: colorMode_result, adaptiveColor: adaptiveColor_result, scale: scale_result, blurOptions: blurOptions_result} as ForegroundBlurStyleOptions)
        return value
    }
    readFormInfo(): FormInfo {
        let valueDeserializer : Deserializer = this
        const id_buf_selector : int32 = valueDeserializer.readInt8()
        let id_buf : int64 | string | undefined
        if (id_buf_selector == 0) {
            id_buf = valueDeserializer.readInt64()
        }
        else if (id_buf_selector == 1) {
            id_buf = (valueDeserializer.readString() as string)
        }
        else {
            throw new Error("One of the branches for id_buf has to be chosen through deserialisation.")
        }
        const id_result : int64 | string = (id_buf as int64 | string)
        const name_result : string = (valueDeserializer.readString() as string)
        const bundle_result : string = (valueDeserializer.readString() as string)
        const ability_result : string = (valueDeserializer.readString() as string)
        const module_result : string = (valueDeserializer.readString() as string)
        const dimension_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dimension_buf : FormDimension | undefined
        if ((RuntimeType.UNDEFINED) != (dimension_buf_runtimeType))
        {
            dimension_buf = TypeChecker.FormDimension_FromNumeric(valueDeserializer.readInt32())
        }
        const dimension_result : FormDimension | undefined = dimension_buf
        const temporary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let temporary_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (temporary_buf_runtimeType))
        {
            temporary_buf = valueDeserializer.readBoolean()
        }
        const temporary_result : boolean | undefined = temporary_buf
        const want_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let want_buf : Want | undefined
        if ((RuntimeType.UNDEFINED) != (want_buf_runtimeType))
        {
            want_buf = valueDeserializer.readWant()
        }
        const want_result : Want | undefined = want_buf
        const renderingMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let renderingMode_buf : FormRenderingMode | undefined
        if ((RuntimeType.UNDEFINED) != (renderingMode_buf_runtimeType))
        {
            renderingMode_buf = TypeChecker.FormRenderingMode_FromNumeric(valueDeserializer.readInt32())
        }
        const renderingMode_result : FormRenderingMode | undefined = renderingMode_buf
        const shape_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shape_buf : FormShape | undefined
        if ((RuntimeType.UNDEFINED) != (shape_buf_runtimeType))
        {
            shape_buf = TypeChecker.FormShape_FromNumeric(valueDeserializer.readInt32())
        }
        const shape_result : FormShape | undefined = shape_buf
        let value : FormInfo = ({id: id_result, name: name_result, bundle: bundle_result, ability: ability_result, module: module_result, dimension: dimension_result, temporary: temporary_result, want: want_result, renderingMode: renderingMode_result, shape: shape_result} as FormInfo)
        return value
    }
    readGaugeIndicatorOptions(): GaugeIndicatorOptions {
        let valueDeserializer : Deserializer = this
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            const icon_buf__selector : int32 = valueDeserializer.readInt8()
            let icon_buf_ : string | Resource | undefined
            if (icon_buf__selector == 0) {
                icon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (icon_buf__selector == 1) {
                icon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for icon_buf_ has to be chosen through deserialisation.")
            }
            icon_buf = (icon_buf_ as string | Resource)
        }
        const icon_result : ResourceStr | undefined = icon_buf
        const space_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let space_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (space_buf_runtimeType))
        {
            space_buf = (valueDeserializer.readLength() as Dimension)
        }
        const space_result : Dimension | undefined = space_buf
        let value : GaugeIndicatorOptions = ({icon: icon_result, space: space_result} as GaugeIndicatorOptions)
        return value
    }
    readGaugeShadowOptions(): GaugeShadowOptions {
        let valueDeserializer : Deserializer = this
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            const radius_buf__selector : int32 = valueDeserializer.readInt8()
            let radius_buf_ : number | Resource | undefined
            if (radius_buf__selector == 0) {
                radius_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (radius_buf__selector == 1) {
                radius_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for radius_buf_ has to be chosen through deserialisation.")
            }
            radius_buf = (radius_buf_ as number | Resource)
        }
        const radius_result : number | Resource | undefined = radius_buf
        const offsetX_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offsetX_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (offsetX_buf_runtimeType))
        {
            const offsetX_buf__selector : int32 = valueDeserializer.readInt8()
            let offsetX_buf_ : number | Resource | undefined
            if (offsetX_buf__selector == 0) {
                offsetX_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (offsetX_buf__selector == 1) {
                offsetX_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for offsetX_buf_ has to be chosen through deserialisation.")
            }
            offsetX_buf = (offsetX_buf_ as number | Resource)
        }
        const offsetX_result : number | Resource | undefined = offsetX_buf
        const offsetY_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offsetY_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (offsetY_buf_runtimeType))
        {
            const offsetY_buf__selector : int32 = valueDeserializer.readInt8()
            let offsetY_buf_ : number | Resource | undefined
            if (offsetY_buf__selector == 0) {
                offsetY_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (offsetY_buf__selector == 1) {
                offsetY_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for offsetY_buf_ has to be chosen through deserialisation.")
            }
            offsetY_buf = (offsetY_buf_ as number | Resource)
        }
        const offsetY_result : number | Resource | undefined = offsetY_buf
        let value : GaugeShadowOptions = ({radius: radius_result, offsetX: offsetX_result, offsetY: offsetY_result} as GaugeShadowOptions)
        return value
    }
    readGestureEvent(): GestureEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return GestureEventInternal.fromPtr(ptr)
    }
    readGridColOptions(): GridColOptions {
        let valueDeserializer : Deserializer = this
        const span_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let span_buf : number | GridColColumnOption | undefined
        if ((RuntimeType.UNDEFINED) != (span_buf_runtimeType))
        {
            const span_buf__selector : int32 = valueDeserializer.readInt8()
            let span_buf_ : number | GridColColumnOption | undefined
            if (span_buf__selector == 0) {
                span_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (span_buf__selector == 1) {
                span_buf_ = valueDeserializer.readGridColColumnOption()
            }
            else {
                throw new Error("One of the branches for span_buf_ has to be chosen through deserialisation.")
            }
            span_buf = (span_buf_ as number | GridColColumnOption)
        }
        const span_result : number | GridColColumnOption | undefined = span_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : number | GridColColumnOption | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            const offset_buf__selector : int32 = valueDeserializer.readInt8()
            let offset_buf_ : number | GridColColumnOption | undefined
            if (offset_buf__selector == 0) {
                offset_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (offset_buf__selector == 1) {
                offset_buf_ = valueDeserializer.readGridColColumnOption()
            }
            else {
                throw new Error("One of the branches for offset_buf_ has to be chosen through deserialisation.")
            }
            offset_buf = (offset_buf_ as number | GridColColumnOption)
        }
        const offset_result : number | GridColColumnOption | undefined = offset_buf
        const order_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let order_buf : number | GridColColumnOption | undefined
        if ((RuntimeType.UNDEFINED) != (order_buf_runtimeType))
        {
            const order_buf__selector : int32 = valueDeserializer.readInt8()
            let order_buf_ : number | GridColColumnOption | undefined
            if (order_buf__selector == 0) {
                order_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (order_buf__selector == 1) {
                order_buf_ = valueDeserializer.readGridColColumnOption()
            }
            else {
                throw new Error("One of the branches for order_buf_ has to be chosen through deserialisation.")
            }
            order_buf = (order_buf_ as number | GridColColumnOption)
        }
        const order_result : number | GridColColumnOption | undefined = order_buf
        let value : GridColOptions = ({span: span_result, offset: offset_result, order: order_result} as GridColOptions)
        return value
    }
    readGutterOption(): GutterOption {
        let valueDeserializer : Deserializer = this
        const x_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let x_buf : Length | GridRowSizeOption | undefined
        if ((RuntimeType.UNDEFINED) != (x_buf_runtimeType))
        {
            const x_buf__selector : int32 = valueDeserializer.readInt8()
            let x_buf_ : Length | GridRowSizeOption | undefined
            if (x_buf__selector == 0) {
                x_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (x_buf__selector == 1) {
                x_buf_ = valueDeserializer.readGridRowSizeOption()
            }
            else {
                throw new Error("One of the branches for x_buf_ has to be chosen through deserialisation.")
            }
            x_buf = (x_buf_ as Length | GridRowSizeOption)
        }
        const x_result : Length | GridRowSizeOption | undefined = x_buf
        const y_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let y_buf : Length | GridRowSizeOption | undefined
        if ((RuntimeType.UNDEFINED) != (y_buf_runtimeType))
        {
            const y_buf__selector : int32 = valueDeserializer.readInt8()
            let y_buf_ : Length | GridRowSizeOption | undefined
            if (y_buf__selector == 0) {
                y_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (y_buf__selector == 1) {
                y_buf_ = valueDeserializer.readGridRowSizeOption()
            }
            else {
                throw new Error("One of the branches for y_buf_ has to be chosen through deserialisation.")
            }
            y_buf = (y_buf_ as Length | GridRowSizeOption)
        }
        const y_result : Length | GridRowSizeOption | undefined = y_buf
        let value : GutterOption = ({x: x_result, y: y_result} as GutterOption)
        return value
    }
    readHistoricalPoint(): HistoricalPoint {
        let valueDeserializer : Deserializer = this
        const touchObject_result : TouchObject = valueDeserializer.readTouchObject()
        const size_result : number = (valueDeserializer.readNumber() as number)
        const force_result : number = (valueDeserializer.readNumber() as number)
        const timestamp_result : int64 = valueDeserializer.readInt64()
        let value : HistoricalPoint = ({touchObject: touchObject_result, size: size_result, force: force_result, timestamp: timestamp_result} as HistoricalPoint)
        return value
    }
    readHoverEvent(): HoverEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return HoverEventInternal.fromPtr(ptr)
    }
    readIconOptions(): IconOptions {
        let valueDeserializer : Deserializer = this
        const size_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let size_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (size_buf_runtimeType))
        {
            size_buf = (valueDeserializer.readLength() as Length)
        }
        const size_result : Length | undefined = size_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const src_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let src_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (src_buf_runtimeType))
        {
            const src_buf__selector : int32 = valueDeserializer.readInt8()
            let src_buf_ : string | Resource | undefined
            if (src_buf__selector == 0) {
                src_buf_ = (valueDeserializer.readString() as string)
            }
            else if (src_buf__selector == 1) {
                src_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for src_buf_ has to be chosen through deserialisation.")
            }
            src_buf = (src_buf_ as string | Resource)
        }
        const src_result : ResourceStr | undefined = src_buf
        let value : IconOptions = ({size: size_result, color: color_result, src: src_result} as IconOptions)
        return value
    }
    readImageAttachmentLayoutStyle(): ImageAttachmentLayoutStyle {
        let valueDeserializer : Deserializer = this
        const margin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let margin_buf : LengthMetrics | Padding | undefined
        if ((RuntimeType.UNDEFINED) != (margin_buf_runtimeType))
        {
            const margin_buf__selector : int32 = valueDeserializer.readInt8()
            let margin_buf_ : LengthMetrics | Padding | undefined
            if (margin_buf__selector == 0) {
                margin_buf_ = (valueDeserializer.readLengthMetrics() as LengthMetrics)
            }
            else if (margin_buf__selector == 1) {
                margin_buf_ = valueDeserializer.readPadding()
            }
            else {
                throw new Error("One of the branches for margin_buf_ has to be chosen through deserialisation.")
            }
            margin_buf = (margin_buf_ as LengthMetrics | Padding)
        }
        const margin_result : LengthMetrics | Padding | undefined = margin_buf
        const padding_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let padding_buf : LengthMetrics | Padding | undefined
        if ((RuntimeType.UNDEFINED) != (padding_buf_runtimeType))
        {
            const padding_buf__selector : int32 = valueDeserializer.readInt8()
            let padding_buf_ : LengthMetrics | Padding | undefined
            if (padding_buf__selector == 0) {
                padding_buf_ = (valueDeserializer.readLengthMetrics() as LengthMetrics)
            }
            else if (padding_buf__selector == 1) {
                const padding_buf__u_top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
                let padding_buf__u_top_buf : Length | undefined
                if ((RuntimeType.UNDEFINED) != (padding_buf__u_top_buf_runtimeType))
                {
                    padding_buf__u_top_buf = (valueDeserializer.readLength() as Length)
                }
                const padding_buf__u_top : undefined | Length = padding_buf__u_top_buf
                const padding_buf__u_right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
                let padding_buf__u_right_buf : Length | undefined
                if ((RuntimeType.UNDEFINED) != (padding_buf__u_right_buf_runtimeType))
                {
                    padding_buf__u_right_buf = (valueDeserializer.readLength() as Length)
                }
                const padding_buf__u_right : undefined | Length = padding_buf__u_right_buf
                const padding_buf__u_bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
                let padding_buf__u_bottom_buf : Length | undefined
                if ((RuntimeType.UNDEFINED) != (padding_buf__u_bottom_buf_runtimeType))
                {
                    padding_buf__u_bottom_buf = (valueDeserializer.readLength() as Length)
                }
                const padding_buf__u_bottom : undefined | Length = padding_buf__u_bottom_buf
                const padding_buf__u_left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
                let padding_buf__u_left_buf : Length | undefined
                if ((RuntimeType.UNDEFINED) != (padding_buf__u_left_buf_runtimeType))
                {
                    padding_buf__u_left_buf = (valueDeserializer.readLength() as Length)
                }
                const padding_buf__u_left : undefined | Length = padding_buf__u_left_buf
                padding_buf_ = ({top: padding_buf__u_top, right: padding_buf__u_right, bottom: padding_buf__u_bottom, left: padding_buf__u_left} as Padding)
            }
            else {
                throw new Error("One of the branches for padding_buf_ has to be chosen through deserialisation.")
            }
            padding_buf = (padding_buf_ as LengthMetrics | Padding)
        }
        const padding_result : LengthMetrics | Padding | undefined = padding_buf
        const borderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderRadius_buf : LengthMetrics | BorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (borderRadius_buf_runtimeType))
        {
            const borderRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let borderRadius_buf_ : LengthMetrics | BorderRadiuses | undefined
            if (borderRadius_buf__selector == 0) {
                borderRadius_buf_ = (valueDeserializer.readLengthMetrics() as LengthMetrics)
            }
            else if (borderRadius_buf__selector == 1) {
                borderRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for borderRadius_buf_ has to be chosen through deserialisation.")
            }
            borderRadius_buf = (borderRadius_buf_ as LengthMetrics | BorderRadiuses)
        }
        const borderRadius_result : LengthMetrics | BorderRadiuses | undefined = borderRadius_buf
        let value : ImageAttachmentLayoutStyle = ({margin: margin_result, padding: padding_result, borderRadius: borderRadius_result} as ImageAttachmentLayoutStyle)
        return value
    }
    readImageFrameInfo(): ImageFrameInfo {
        let valueDeserializer : Deserializer = this
        const src_buf_selector : int32 = valueDeserializer.readInt8()
        let src_buf : string | Resource | PixelMap | undefined
        if (src_buf_selector == 0) {
            src_buf = (valueDeserializer.readString() as string)
        }
        else if (src_buf_selector == 1) {
            src_buf = valueDeserializer.readResource()
        }
        else if (src_buf_selector == 2) {
            src_buf = (valueDeserializer.readPixelMap() as PixelMap)
        }
        else {
            throw new Error("One of the branches for src_buf has to be chosen through deserialisation.")
        }
        const src_result : string | Resource | PixelMap = (src_buf as string | Resource | PixelMap)
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : number | string | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as number | string)
        }
        const width_result : number | string | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : number | string | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as number | string)
        }
        const height_result : number | string | undefined = height_buf
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            const top_buf__selector : int32 = valueDeserializer.readInt8()
            let top_buf_ : number | string | undefined
            if (top_buf__selector == 0) {
                top_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (top_buf__selector == 1) {
                top_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for top_buf_ has to be chosen through deserialisation.")
            }
            top_buf = (top_buf_ as number | string)
        }
        const top_result : number | string | undefined = top_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            const left_buf__selector : int32 = valueDeserializer.readInt8()
            let left_buf_ : number | string | undefined
            if (left_buf__selector == 0) {
                left_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (left_buf__selector == 1) {
                left_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for left_buf_ has to be chosen through deserialisation.")
            }
            left_buf = (left_buf_ as number | string)
        }
        const left_result : number | string | undefined = left_buf
        const duration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let duration_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (duration_buf_runtimeType))
        {
            duration_buf = (valueDeserializer.readNumber() as number)
        }
        const duration_result : number | undefined = duration_buf
        let value : ImageFrameInfo = ({src: src_result, width: width_result, height: height_result, top: top_result, left: left_result, duration: duration_result} as ImageFrameInfo)
        return value
    }
    readIndicatorStyle(): IndicatorStyle {
        let valueDeserializer : Deserializer = this
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readLength() as Length)
        }
        const height_result : Length | undefined = height_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Length)
        }
        const width_result : Length | undefined = width_buf
        const borderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderRadius_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (borderRadius_buf_runtimeType))
        {
            borderRadius_buf = (valueDeserializer.readLength() as Length)
        }
        const borderRadius_result : Length | undefined = borderRadius_buf
        const marginTop_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let marginTop_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (marginTop_buf_runtimeType))
        {
            marginTop_buf = (valueDeserializer.readLength() as Length)
        }
        const marginTop_result : Length | undefined = marginTop_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const selectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (selectedColor_buf_runtimeType))
        {
            const selectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let selectedColor_buf_ : Color | number | string | Resource | undefined
            if (selectedColor_buf__selector == 0) {
                selectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (selectedColor_buf__selector == 1) {
                selectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (selectedColor_buf__selector == 2) {
                selectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (selectedColor_buf__selector == 3) {
                selectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for selectedColor_buf_ has to be chosen through deserialisation.")
            }
            selectedColor_buf = (selectedColor_buf_ as Color | number | string | Resource)
        }
        const selectedColor_result : ResourceColor | undefined = selectedColor_buf
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = (valueDeserializer.readLength() as Length)
        }
        const left_result : Length | undefined = left_buf
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLength() as Length)
        }
        const top_result : Length | undefined = top_buf
        const right_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let right_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (right_buf_runtimeType))
        {
            right_buf = (valueDeserializer.readLength() as Length)
        }
        const right_result : Length | undefined = right_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readLength() as Length)
        }
        const bottom_result : Length | undefined = bottom_buf
        const size_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let size_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (size_buf_runtimeType))
        {
            size_buf = (valueDeserializer.readLength() as Length)
        }
        const size_result : Length | undefined = size_buf
        const mask_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let mask_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (mask_buf_runtimeType))
        {
            mask_buf = valueDeserializer.readBoolean()
        }
        const mask_result : boolean | undefined = mask_buf
        let value : IndicatorStyle = ({height: height_result, width: width_result, borderRadius: borderRadius_result, marginTop: marginTop_result, color: color_result, selectedColor: selectedColor_result, left: left_result, top: top_result, right: right_result, bottom: bottom_result, size: size_result, mask: mask_result} as IndicatorStyle)
        return value
    }
    readSubTabBarIndicatorStyle(): SubTabBarIndicatorStyle {
        let valueDeserializer : Deserializer = this
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readLength() as Length)
        }
        const height_result : Length | undefined = height_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Length)
        }
        const width_result : Length | undefined = width_buf
        const borderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderRadius_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (borderRadius_buf_runtimeType))
        {
            borderRadius_buf = (valueDeserializer.readLength() as Length)
        }
        const borderRadius_result : Length | undefined = borderRadius_buf
        const marginTop_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let marginTop_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (marginTop_buf_runtimeType))
        {
            marginTop_buf = (valueDeserializer.readLength() as Length)
        }
        const marginTop_result : Length | undefined = marginTop_buf
        let value : SubTabBarIndicatorStyle = ({color: color_result, height: height_result, width: width_result, borderRadius: borderRadius_result, marginTop: marginTop_result} as SubTabBarIndicatorStyle)
        return value
    }
    readJavaScriptProxy(): JavaScriptProxy {
        let valueDeserializer : Deserializer = this
        const object__result : Object = (valueDeserializer.readObject() as Object)
        const name_result : string = (valueDeserializer.readString() as string)
        const methodList_buf_length : int32 = valueDeserializer.readInt32()
        let methodList_buf : Array<string> = new Array<string>(methodList_buf_length)
        for (let methodList_buf_i = 0; methodList_buf_i < methodList_buf_length; methodList_buf_i++) {
            methodList_buf[methodList_buf_i] = (valueDeserializer.readString() as string)
        }
        const methodList_result : Array<string> = methodList_buf
        const controller_buf_selector : int32 = valueDeserializer.readInt8()
        let controller_buf : WebController | WebviewController | undefined
        if (controller_buf_selector == 0) {
            controller_buf = (valueDeserializer.readWebController() as WebController)
        }
        else if (controller_buf_selector == 1) {
            controller_buf = (valueDeserializer.readWebviewController() as WebviewController)
        }
        else {
            throw new Error("One of the branches for controller_buf has to be chosen through deserialisation.")
        }
        const controller_result : WebController | WebviewController = (controller_buf as WebController | WebviewController)
        const asyncMethodList_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let asyncMethodList_buf : Array<string> | undefined
        if ((RuntimeType.UNDEFINED) != (asyncMethodList_buf_runtimeType))
        {
            const asyncMethodList_buf__length : int32 = valueDeserializer.readInt32()
            let asyncMethodList_buf_ : Array<string> = new Array<string>(asyncMethodList_buf__length)
            for (let asyncMethodList_buf__i = 0; asyncMethodList_buf__i < asyncMethodList_buf__length; asyncMethodList_buf__i++) {
                asyncMethodList_buf_[asyncMethodList_buf__i] = (valueDeserializer.readString() as string)
            }
            asyncMethodList_buf = asyncMethodList_buf_
        }
        const asyncMethodList_result : Array<string> | undefined = asyncMethodList_buf
        const permission_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let permission_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (permission_buf_runtimeType))
        {
            permission_buf = (valueDeserializer.readString() as string)
        }
        const permission_result : string | undefined = permission_buf
        let value : JavaScriptProxy = ({object_: object__result, name: name_result, methodList: methodList_result, controller: controller_result, asyncMethodList: asyncMethodList_result, permission: permission_result} as JavaScriptProxy)
        return value
    }
    readLightSource(): LightSource {
        let valueDeserializer : Deserializer = this
        const positionX_result : Dimension = (valueDeserializer.readLength() as Dimension)
        const positionY_result : Dimension = (valueDeserializer.readLength() as Dimension)
        const positionZ_result : Dimension = (valueDeserializer.readLength() as Dimension)
        const intensity_result : number = (valueDeserializer.readNumber() as number)
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        let value : LightSource = ({positionX: positionX_result, positionY: positionY_result, positionZ: positionZ_result, intensity: intensity_result, color: color_result} as LightSource)
        return value
    }
    readLinearIndicatorStyle(): LinearIndicatorStyle {
        let valueDeserializer : Deserializer = this
        const space_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let space_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (space_buf_runtimeType))
        {
            space_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const space_result : LengthMetrics | undefined = space_buf
        const strokeWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeWidth_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (strokeWidth_buf_runtimeType))
        {
            strokeWidth_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const strokeWidth_result : LengthMetrics | undefined = strokeWidth_buf
        const strokeRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeRadius_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (strokeRadius_buf_runtimeType))
        {
            strokeRadius_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const strokeRadius_result : LengthMetrics | undefined = strokeRadius_buf
        const trackBackgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let trackBackgroundColor_buf : ColorMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (trackBackgroundColor_buf_runtimeType))
        {
            trackBackgroundColor_buf = (valueDeserializer.readColorMetrics() as ColorMetrics)
        }
        const trackBackgroundColor_result : ColorMetrics | undefined = trackBackgroundColor_buf
        const trackColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let trackColor_buf : ColorMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (trackColor_buf_runtimeType))
        {
            trackColor_buf = (valueDeserializer.readColorMetrics() as ColorMetrics)
        }
        const trackColor_result : ColorMetrics | undefined = trackColor_buf
        let value : LinearIndicatorStyle = ({space: space_result, strokeWidth: strokeWidth_result, strokeRadius: strokeRadius_result, trackBackgroundColor: trackBackgroundColor_result, trackColor: trackColor_result} as LinearIndicatorStyle)
        return value
    }
    readLinearStyleOptions(): LinearStyleOptions {
        let valueDeserializer : Deserializer = this
        const enableScanEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableScanEffect_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableScanEffect_buf_runtimeType))
        {
            enableScanEffect_buf = valueDeserializer.readBoolean()
        }
        const enableScanEffect_result : boolean | undefined = enableScanEffect_buf
        const strokeWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeWidth_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (strokeWidth_buf_runtimeType))
        {
            strokeWidth_buf = (valueDeserializer.readLength() as Length)
        }
        const strokeWidth_result : Length | undefined = strokeWidth_buf
        const strokeRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeRadius_buf : string | number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (strokeRadius_buf_runtimeType))
        {
            const strokeRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let strokeRadius_buf_ : string | number | Resource | undefined
            if (strokeRadius_buf__selector == 0) {
                strokeRadius_buf_ = (valueDeserializer.readString() as string)
            }
            else if (strokeRadius_buf__selector == 1) {
                strokeRadius_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (strokeRadius_buf__selector == 2) {
                strokeRadius_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for strokeRadius_buf_ has to be chosen through deserialisation.")
            }
            strokeRadius_buf = (strokeRadius_buf_ as string | number | Resource)
        }
        const strokeRadius_result : PX | VP | LPX | Resource | undefined = strokeRadius_buf
        let value : LinearStyleOptions = ({enableScanEffect: enableScanEffect_result, strokeWidth: strokeWidth_result, strokeRadius: strokeRadius_result} as LinearStyleOptions)
        return value
    }
    readListDividerOptions(): ListDividerOptions {
        let valueDeserializer : Deserializer = this
        const strokeWidth_result : Length = (valueDeserializer.readLength() as Length)
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const startMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let startMargin_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (startMargin_buf_runtimeType))
        {
            startMargin_buf = (valueDeserializer.readLength() as Length)
        }
        const startMargin_result : Length | undefined = startMargin_buf
        const endMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let endMargin_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (endMargin_buf_runtimeType))
        {
            endMargin_buf = (valueDeserializer.readLength() as Length)
        }
        const endMargin_result : Length | undefined = endMargin_buf
        let value : ListDividerOptions = ({strokeWidth: strokeWidth_result, color: color_result, startMargin: startMargin_result, endMargin: endMargin_result} as ListDividerOptions)
        return value
    }
    readLocalizedAlignRuleOptions(): LocalizedAlignRuleOptions {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : LocalizedHorizontalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = valueDeserializer.readLocalizedHorizontalAlignParam()
        }
        const start_result : LocalizedHorizontalAlignParam | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : LocalizedHorizontalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = valueDeserializer.readLocalizedHorizontalAlignParam()
        }
        const end_result : LocalizedHorizontalAlignParam | undefined = end_buf
        const middle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let middle_buf : LocalizedHorizontalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (middle_buf_runtimeType))
        {
            middle_buf = valueDeserializer.readLocalizedHorizontalAlignParam()
        }
        const middle_result : LocalizedHorizontalAlignParam | undefined = middle_buf
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : LocalizedVerticalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = valueDeserializer.readLocalizedVerticalAlignParam()
        }
        const top_result : LocalizedVerticalAlignParam | undefined = top_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : LocalizedVerticalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = valueDeserializer.readLocalizedVerticalAlignParam()
        }
        const bottom_result : LocalizedVerticalAlignParam | undefined = bottom_buf
        const center_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let center_buf : LocalizedVerticalAlignParam | undefined
        if ((RuntimeType.UNDEFINED) != (center_buf_runtimeType))
        {
            center_buf = valueDeserializer.readLocalizedVerticalAlignParam()
        }
        const center_result : LocalizedVerticalAlignParam | undefined = center_buf
        const bias_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bias_buf : Bias | undefined
        if ((RuntimeType.UNDEFINED) != (bias_buf_runtimeType))
        {
            bias_buf = valueDeserializer.readBias()
        }
        const bias_result : Bias | undefined = bias_buf
        let value : LocalizedAlignRuleOptions = ({start: start_result, end: end_result, middle: middle_result, top: top_result, bottom: bottom_result, center: center_result, bias: bias_result} as LocalizedAlignRuleOptions)
        return value
    }
    readLocalizedBorderRadiuses(): LocalizedBorderRadiuses {
        let valueDeserializer : Deserializer = this
        const topStart_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let topStart_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (topStart_buf_runtimeType))
        {
            topStart_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const topStart_result : LengthMetrics | undefined = topStart_buf
        const topEnd_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let topEnd_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (topEnd_buf_runtimeType))
        {
            topEnd_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const topEnd_result : LengthMetrics | undefined = topEnd_buf
        const bottomStart_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottomStart_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (bottomStart_buf_runtimeType))
        {
            bottomStart_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const bottomStart_result : LengthMetrics | undefined = bottomStart_buf
        const bottomEnd_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottomEnd_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (bottomEnd_buf_runtimeType))
        {
            bottomEnd_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const bottomEnd_result : LengthMetrics | undefined = bottomEnd_buf
        let value : LocalizedBorderRadiuses = ({topStart: topStart_result, topEnd: topEnd_result, bottomStart: bottomStart_result, bottomEnd: bottomEnd_result} as LocalizedBorderRadiuses)
        return value
    }
    readLocalizedEdgeColors(): LocalizedEdgeColors {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            const top_buf__selector : int32 = valueDeserializer.readInt8()
            let top_buf_ : Color | number | string | Resource | undefined
            if (top_buf__selector == 0) {
                top_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (top_buf__selector == 1) {
                top_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (top_buf__selector == 2) {
                top_buf_ = (valueDeserializer.readString() as string)
            }
            else if (top_buf__selector == 3) {
                top_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for top_buf_ has to be chosen through deserialisation.")
            }
            top_buf = (top_buf_ as Color | number | string | Resource)
        }
        const top_result : ResourceColor | undefined = top_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            const end_buf__selector : int32 = valueDeserializer.readInt8()
            let end_buf_ : Color | number | string | Resource | undefined
            if (end_buf__selector == 0) {
                end_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (end_buf__selector == 1) {
                end_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (end_buf__selector == 2) {
                end_buf_ = (valueDeserializer.readString() as string)
            }
            else if (end_buf__selector == 3) {
                end_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for end_buf_ has to be chosen through deserialisation.")
            }
            end_buf = (end_buf_ as Color | number | string | Resource)
        }
        const end_result : ResourceColor | undefined = end_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            const bottom_buf__selector : int32 = valueDeserializer.readInt8()
            let bottom_buf_ : Color | number | string | Resource | undefined
            if (bottom_buf__selector == 0) {
                bottom_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (bottom_buf__selector == 1) {
                bottom_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (bottom_buf__selector == 2) {
                bottom_buf_ = (valueDeserializer.readString() as string)
            }
            else if (bottom_buf__selector == 3) {
                bottom_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for bottom_buf_ has to be chosen through deserialisation.")
            }
            bottom_buf = (bottom_buf_ as Color | number | string | Resource)
        }
        const bottom_result : ResourceColor | undefined = bottom_buf
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            const start_buf__selector : int32 = valueDeserializer.readInt8()
            let start_buf_ : Color | number | string | Resource | undefined
            if (start_buf__selector == 0) {
                start_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (start_buf__selector == 1) {
                start_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (start_buf__selector == 2) {
                start_buf_ = (valueDeserializer.readString() as string)
            }
            else if (start_buf__selector == 3) {
                start_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for start_buf_ has to be chosen through deserialisation.")
            }
            start_buf = (start_buf_ as Color | number | string | Resource)
        }
        const start_result : ResourceColor | undefined = start_buf
        let value : LocalizedEdgeColors = ({top: top_result, end: end_result, bottom: bottom_result, start: start_result} as LocalizedEdgeColors)
        return value
    }
    readLocalizedEdges(): LocalizedEdges {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const top_result : LengthMetrics | undefined = top_buf
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const start_result : LengthMetrics | undefined = start_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const bottom_result : LengthMetrics | undefined = bottom_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const end_result : LengthMetrics | undefined = end_buf
        let value : LocalizedEdges = ({top: top_result, start: start_result, bottom: bottom_result, end: end_result} as LocalizedEdges)
        return value
    }
    readLocalizedEdgeWidths(): LocalizedEdgeWidths {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const top_result : LengthMetrics | undefined = top_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const end_result : LengthMetrics | undefined = end_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const bottom_result : LengthMetrics | undefined = bottom_buf
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const start_result : LengthMetrics | undefined = start_buf
        let value : LocalizedEdgeWidths = ({top: top_result, end: end_result, bottom: bottom_result, start: start_result} as LocalizedEdgeWidths)
        return value
    }
    readLocalizedPadding(): LocalizedPadding {
        let valueDeserializer : Deserializer = this
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const top_result : LengthMetrics | undefined = top_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const end_result : LengthMetrics | undefined = end_buf
        const bottom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bottom_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (bottom_buf_runtimeType))
        {
            bottom_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const bottom_result : LengthMetrics | undefined = bottom_buf
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const start_result : LengthMetrics | undefined = start_buf
        let value : LocalizedPadding = ({top: top_result, end: end_result, bottom: bottom_result, start: start_result} as LocalizedPadding)
        return value
    }
    readLocalizedPosition(): LocalizedPosition {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const start_result : LengthMetrics | undefined = start_buf
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const top_result : LengthMetrics | undefined = top_buf
        let value : LocalizedPosition = ({start: start_result, top: top_result} as LocalizedPosition)
        return value
    }
    readLongPressGestureEvent(): LongPressGestureEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return LongPressGestureEventInternal.fromPtr(ptr)
    }
    readLunarSwitchStyle(): LunarSwitchStyle {
        let valueDeserializer : Deserializer = this
        const selectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (selectedColor_buf_runtimeType))
        {
            const selectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let selectedColor_buf_ : Color | number | string | Resource | undefined
            if (selectedColor_buf__selector == 0) {
                selectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (selectedColor_buf__selector == 1) {
                selectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (selectedColor_buf__selector == 2) {
                selectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (selectedColor_buf__selector == 3) {
                selectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for selectedColor_buf_ has to be chosen through deserialisation.")
            }
            selectedColor_buf = (selectedColor_buf_ as Color | number | string | Resource)
        }
        const selectedColor_result : ResourceColor | undefined = selectedColor_buf
        const unselectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let unselectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (unselectedColor_buf_runtimeType))
        {
            const unselectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let unselectedColor_buf_ : Color | number | string | Resource | undefined
            if (unselectedColor_buf__selector == 0) {
                unselectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (unselectedColor_buf__selector == 1) {
                unselectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (unselectedColor_buf__selector == 2) {
                unselectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (unselectedColor_buf__selector == 3) {
                unselectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for unselectedColor_buf_ has to be chosen through deserialisation.")
            }
            unselectedColor_buf = (unselectedColor_buf_ as Color | number | string | Resource)
        }
        const unselectedColor_result : ResourceColor | undefined = unselectedColor_buf
        const strokeColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (strokeColor_buf_runtimeType))
        {
            const strokeColor_buf__selector : int32 = valueDeserializer.readInt8()
            let strokeColor_buf_ : Color | number | string | Resource | undefined
            if (strokeColor_buf__selector == 0) {
                strokeColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (strokeColor_buf__selector == 1) {
                strokeColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (strokeColor_buf__selector == 2) {
                strokeColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (strokeColor_buf__selector == 3) {
                strokeColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for strokeColor_buf_ has to be chosen through deserialisation.")
            }
            strokeColor_buf = (strokeColor_buf_ as Color | number | string | Resource)
        }
        const strokeColor_result : ResourceColor | undefined = strokeColor_buf
        let value : LunarSwitchStyle = ({selectedColor: selectedColor_result, unselectedColor: unselectedColor_result, strokeColor: strokeColor_result} as LunarSwitchStyle)
        return value
    }
    readMarkStyle(): MarkStyle {
        let valueDeserializer : Deserializer = this
        const strokeColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (strokeColor_buf_runtimeType))
        {
            const strokeColor_buf__selector : int32 = valueDeserializer.readInt8()
            let strokeColor_buf_ : Color | number | string | Resource | undefined
            if (strokeColor_buf__selector == 0) {
                strokeColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (strokeColor_buf__selector == 1) {
                strokeColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (strokeColor_buf__selector == 2) {
                strokeColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (strokeColor_buf__selector == 3) {
                strokeColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for strokeColor_buf_ has to be chosen through deserialisation.")
            }
            strokeColor_buf = (strokeColor_buf_ as Color | number | string | Resource)
        }
        const strokeColor_result : ResourceColor | undefined = strokeColor_buf
        const size_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let size_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (size_buf_runtimeType))
        {
            size_buf = (valueDeserializer.readLength() as Length)
        }
        const size_result : Length | undefined = size_buf
        const strokeWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let strokeWidth_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (strokeWidth_buf_runtimeType))
        {
            strokeWidth_buf = (valueDeserializer.readLength() as Length)
        }
        const strokeWidth_result : Length | undefined = strokeWidth_buf
        let value : MarkStyle = ({strokeColor: strokeColor_result, size: size_result, strokeWidth: strokeWidth_result} as MarkStyle)
        return value
    }
    readMeasureOptions(): MeasureOptions {
        let valueDeserializer : Deserializer = this
        const textContent_buf_selector : int32 = valueDeserializer.readInt8()
        let textContent_buf : string | Resource | undefined
        if (textContent_buf_selector == 0) {
            textContent_buf = (valueDeserializer.readString() as string)
        }
        else if (textContent_buf_selector == 1) {
            textContent_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for textContent_buf has to be chosen through deserialisation.")
        }
        const textContent_result : string | Resource = (textContent_buf as string | Resource)
        const constraintWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let constraintWidth_buf : number | string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (constraintWidth_buf_runtimeType))
        {
            const constraintWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let constraintWidth_buf_ : number | string | Resource | undefined
            if (constraintWidth_buf__selector == 0) {
                constraintWidth_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (constraintWidth_buf__selector == 1) {
                constraintWidth_buf_ = (valueDeserializer.readString() as string)
            }
            else if (constraintWidth_buf__selector == 2) {
                constraintWidth_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for constraintWidth_buf_ has to be chosen through deserialisation.")
            }
            constraintWidth_buf = (constraintWidth_buf_ as number | string | Resource)
        }
        const constraintWidth_result : number | string | Resource | undefined = constraintWidth_buf
        const fontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontSize_buf : number | string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (fontSize_buf_runtimeType))
        {
            const fontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let fontSize_buf_ : number | string | Resource | undefined
            if (fontSize_buf__selector == 0) {
                fontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontSize_buf__selector == 1) {
                fontSize_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontSize_buf__selector == 2) {
                fontSize_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontSize_buf_ has to be chosen through deserialisation.")
            }
            fontSize_buf = (fontSize_buf_ as number | string | Resource)
        }
        const fontSize_result : number | string | Resource | undefined = fontSize_buf
        const fontStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontStyle_buf : number | FontStyle | undefined
        if ((RuntimeType.UNDEFINED) != (fontStyle_buf_runtimeType))
        {
            const fontStyle_buf__selector : int32 = valueDeserializer.readInt8()
            let fontStyle_buf_ : number | FontStyle | undefined
            if (fontStyle_buf__selector == 0) {
                fontStyle_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontStyle_buf__selector == 1) {
                fontStyle_buf_ = TypeChecker.FontStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for fontStyle_buf_ has to be chosen through deserialisation.")
            }
            fontStyle_buf = (fontStyle_buf_ as number | FontStyle)
        }
        const fontStyle_result : number | FontStyle | undefined = fontStyle_buf
        const fontWeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontWeight_buf : number | string | FontWeight | undefined
        if ((RuntimeType.UNDEFINED) != (fontWeight_buf_runtimeType))
        {
            const fontWeight_buf__selector : int32 = valueDeserializer.readInt8()
            let fontWeight_buf_ : number | string | FontWeight | undefined
            if (fontWeight_buf__selector == 0) {
                fontWeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontWeight_buf__selector == 1) {
                fontWeight_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontWeight_buf__selector == 2) {
                fontWeight_buf_ = TypeChecker.FontWeight_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for fontWeight_buf_ has to be chosen through deserialisation.")
            }
            fontWeight_buf = (fontWeight_buf_ as number | string | FontWeight)
        }
        const fontWeight_result : number | string | FontWeight | undefined = fontWeight_buf
        const fontFamily_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontFamily_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (fontFamily_buf_runtimeType))
        {
            const fontFamily_buf__selector : int32 = valueDeserializer.readInt8()
            let fontFamily_buf_ : string | Resource | undefined
            if (fontFamily_buf__selector == 0) {
                fontFamily_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontFamily_buf__selector == 1) {
                fontFamily_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontFamily_buf_ has to be chosen through deserialisation.")
            }
            fontFamily_buf = (fontFamily_buf_ as string | Resource)
        }
        const fontFamily_result : string | Resource | undefined = fontFamily_buf
        const letterSpacing_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let letterSpacing_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (letterSpacing_buf_runtimeType))
        {
            const letterSpacing_buf__selector : int32 = valueDeserializer.readInt8()
            let letterSpacing_buf_ : number | string | undefined
            if (letterSpacing_buf__selector == 0) {
                letterSpacing_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (letterSpacing_buf__selector == 1) {
                letterSpacing_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for letterSpacing_buf_ has to be chosen through deserialisation.")
            }
            letterSpacing_buf = (letterSpacing_buf_ as number | string)
        }
        const letterSpacing_result : number | string | undefined = letterSpacing_buf
        const textAlign_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textAlign_buf : number | TextAlign | undefined
        if ((RuntimeType.UNDEFINED) != (textAlign_buf_runtimeType))
        {
            const textAlign_buf__selector : int32 = valueDeserializer.readInt8()
            let textAlign_buf_ : number | TextAlign | undefined
            if (textAlign_buf__selector == 0) {
                textAlign_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (textAlign_buf__selector == 1) {
                textAlign_buf_ = TypeChecker.TextAlign_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for textAlign_buf_ has to be chosen through deserialisation.")
            }
            textAlign_buf = (textAlign_buf_ as number | TextAlign)
        }
        const textAlign_result : number | TextAlign | undefined = textAlign_buf
        const overflow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let overflow_buf : number | TextOverflow | undefined
        if ((RuntimeType.UNDEFINED) != (overflow_buf_runtimeType))
        {
            const overflow_buf__selector : int32 = valueDeserializer.readInt8()
            let overflow_buf_ : number | TextOverflow | undefined
            if (overflow_buf__selector == 0) {
                overflow_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (overflow_buf__selector == 1) {
                overflow_buf_ = TypeChecker.TextOverflow_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for overflow_buf_ has to be chosen through deserialisation.")
            }
            overflow_buf = (overflow_buf_ as number | TextOverflow)
        }
        const overflow_result : number | TextOverflow | undefined = overflow_buf
        const maxLines_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxLines_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (maxLines_buf_runtimeType))
        {
            maxLines_buf = (valueDeserializer.readNumber() as number)
        }
        const maxLines_result : number | undefined = maxLines_buf
        const lineHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lineHeight_buf : number | string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (lineHeight_buf_runtimeType))
        {
            const lineHeight_buf__selector : int32 = valueDeserializer.readInt8()
            let lineHeight_buf_ : number | string | Resource | undefined
            if (lineHeight_buf__selector == 0) {
                lineHeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (lineHeight_buf__selector == 1) {
                lineHeight_buf_ = (valueDeserializer.readString() as string)
            }
            else if (lineHeight_buf__selector == 2) {
                lineHeight_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for lineHeight_buf_ has to be chosen through deserialisation.")
            }
            lineHeight_buf = (lineHeight_buf_ as number | string | Resource)
        }
        const lineHeight_result : number | string | Resource | undefined = lineHeight_buf
        const baselineOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let baselineOffset_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (baselineOffset_buf_runtimeType))
        {
            const baselineOffset_buf__selector : int32 = valueDeserializer.readInt8()
            let baselineOffset_buf_ : number | string | undefined
            if (baselineOffset_buf__selector == 0) {
                baselineOffset_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (baselineOffset_buf__selector == 1) {
                baselineOffset_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for baselineOffset_buf_ has to be chosen through deserialisation.")
            }
            baselineOffset_buf = (baselineOffset_buf_ as number | string)
        }
        const baselineOffset_result : number | string | undefined = baselineOffset_buf
        const textCase_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textCase_buf : number | TextCase | undefined
        if ((RuntimeType.UNDEFINED) != (textCase_buf_runtimeType))
        {
            const textCase_buf__selector : int32 = valueDeserializer.readInt8()
            let textCase_buf_ : number | TextCase | undefined
            if (textCase_buf__selector == 0) {
                textCase_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (textCase_buf__selector == 1) {
                textCase_buf_ = TypeChecker.TextCase_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for textCase_buf_ has to be chosen through deserialisation.")
            }
            textCase_buf = (textCase_buf_ as number | TextCase)
        }
        const textCase_result : number | TextCase | undefined = textCase_buf
        const textIndent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textIndent_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (textIndent_buf_runtimeType))
        {
            const textIndent_buf__selector : int32 = valueDeserializer.readInt8()
            let textIndent_buf_ : number | string | undefined
            if (textIndent_buf__selector == 0) {
                textIndent_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (textIndent_buf__selector == 1) {
                textIndent_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for textIndent_buf_ has to be chosen through deserialisation.")
            }
            textIndent_buf = (textIndent_buf_ as number | string)
        }
        const textIndent_result : number | string | undefined = textIndent_buf
        const wordBreak_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let wordBreak_buf : WordBreak | undefined
        if ((RuntimeType.UNDEFINED) != (wordBreak_buf_runtimeType))
        {
            wordBreak_buf = TypeChecker.WordBreak_FromNumeric(valueDeserializer.readInt32())
        }
        const wordBreak_result : WordBreak | undefined = wordBreak_buf
        let value : MeasureOptions = ({textContent: textContent_result, constraintWidth: constraintWidth_result, fontSize: fontSize_result, fontStyle: fontStyle_result, fontWeight: fontWeight_result, fontFamily: fontFamily_result, letterSpacing: letterSpacing_result, textAlign: textAlign_result, overflow: overflow_result, maxLines: maxLines_result, lineHeight: lineHeight_result, baselineOffset: baselineOffset_result, textCase: textCase_result, textIndent: textIndent_result, wordBreak: wordBreak_result} as MeasureOptions)
        return value
    }
    readMenuElement(): MenuElement {
        let valueDeserializer : Deserializer = this
        const value_buf_selector : int32 = valueDeserializer.readInt8()
        let value_buf : string | Resource | undefined
        if (value_buf_selector == 0) {
            value_buf = (valueDeserializer.readString() as string)
        }
        else if (value_buf_selector == 1) {
            value_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for value_buf has to be chosen through deserialisation.")
        }
        const value_result : ResourceStr = (value_buf as string | Resource)
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            const icon_buf__selector : int32 = valueDeserializer.readInt8()
            let icon_buf_ : string | Resource | undefined
            if (icon_buf__selector == 0) {
                icon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (icon_buf__selector == 1) {
                icon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for icon_buf_ has to be chosen through deserialisation.")
            }
            icon_buf = (icon_buf_ as string | Resource)
        }
        const icon_result : ResourceStr | undefined = icon_buf
        const symbolIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let symbolIcon_buf : SymbolGlyphModifier | undefined
        if ((RuntimeType.UNDEFINED) != (symbolIcon_buf_runtimeType))
        {
            symbolIcon_buf = valueDeserializer.readSymbolGlyphModifier()
        }
        const symbolIcon_result : SymbolGlyphModifier | undefined = symbolIcon_buf
        const enabled_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enabled_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enabled_buf_runtimeType))
        {
            enabled_buf = valueDeserializer.readBoolean()
        }
        const enabled_result : boolean | undefined = enabled_buf
        const action_result : (() => void) = valueDeserializer.readCallback_Void()
        let value : MenuElement = ({value: value_result, icon: icon_result, symbolIcon: symbolIcon_result, enabled: enabled_result, action: action_result} as MenuElement)
        return value
    }
    readMenuItemConfiguration(): MenuItemConfiguration {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return MenuItemConfigurationInternal.fromPtr(ptr)
    }
    readMenuItemGroupOptions(): MenuItemGroupOptions {
        let valueDeserializer : Deserializer = this
        const header_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let header_buf : ResourceStr | CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (header_buf_runtimeType))
        {
            const header_buf__selector : int32 = valueDeserializer.readInt8()
            let header_buf_ : ResourceStr | CustomBuilder | undefined
            if (header_buf__selector == 0) {
                const header_buf__u_selector : int32 = valueDeserializer.readInt8()
                let header_buf__u : string | Resource | undefined
                if (header_buf__u_selector == 0) {
                    header_buf__u = (valueDeserializer.readString() as string)
                }
                else if (header_buf__u_selector == 1) {
                    header_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for header_buf__u has to be chosen through deserialisation.")
                }
                header_buf_ = (header_buf__u as string | Resource)
            }
            else if (header_buf__selector == 1) {
                header_buf_ = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
            }
            else {
                throw new Error("One of the branches for header_buf_ has to be chosen through deserialisation.")
            }
            header_buf = (header_buf_ as ResourceStr | CustomBuilder)
        }
        const header_result : ResourceStr | CustomBuilder | undefined = header_buf
        const footer_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let footer_buf : ResourceStr | CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (footer_buf_runtimeType))
        {
            const footer_buf__selector : int32 = valueDeserializer.readInt8()
            let footer_buf_ : ResourceStr | CustomBuilder | undefined
            if (footer_buf__selector == 0) {
                const footer_buf__u_selector : int32 = valueDeserializer.readInt8()
                let footer_buf__u : string | Resource | undefined
                if (footer_buf__u_selector == 0) {
                    footer_buf__u = (valueDeserializer.readString() as string)
                }
                else if (footer_buf__u_selector == 1) {
                    footer_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for footer_buf__u has to be chosen through deserialisation.")
                }
                footer_buf_ = (footer_buf__u as string | Resource)
            }
            else if (footer_buf__selector == 1) {
                footer_buf_ = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
            }
            else {
                throw new Error("One of the branches for footer_buf_ has to be chosen through deserialisation.")
            }
            footer_buf = (footer_buf_ as ResourceStr | CustomBuilder)
        }
        const footer_result : ResourceStr | CustomBuilder | undefined = footer_buf
        let value : MenuItemGroupOptions = ({header: header_result, footer: footer_result} as MenuItemGroupOptions)
        return value
    }
    readMenuItemOptions(): MenuItemOptions {
        let valueDeserializer : Deserializer = this
        const startIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let startIcon_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (startIcon_buf_runtimeType))
        {
            const startIcon_buf__selector : int32 = valueDeserializer.readInt8()
            let startIcon_buf_ : string | Resource | undefined
            if (startIcon_buf__selector == 0) {
                startIcon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (startIcon_buf__selector == 1) {
                startIcon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for startIcon_buf_ has to be chosen through deserialisation.")
            }
            startIcon_buf = (startIcon_buf_ as string | Resource)
        }
        const startIcon_result : ResourceStr | undefined = startIcon_buf
        const symbolStartIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let symbolStartIcon_buf : SymbolGlyphModifier | undefined
        if ((RuntimeType.UNDEFINED) != (symbolStartIcon_buf_runtimeType))
        {
            symbolStartIcon_buf = valueDeserializer.readSymbolGlyphModifier()
        }
        const symbolStartIcon_result : SymbolGlyphModifier | undefined = symbolStartIcon_buf
        const content_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let content_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (content_buf_runtimeType))
        {
            const content_buf__selector : int32 = valueDeserializer.readInt8()
            let content_buf_ : string | Resource | undefined
            if (content_buf__selector == 0) {
                content_buf_ = (valueDeserializer.readString() as string)
            }
            else if (content_buf__selector == 1) {
                content_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for content_buf_ has to be chosen through deserialisation.")
            }
            content_buf = (content_buf_ as string | Resource)
        }
        const content_result : ResourceStr | undefined = content_buf
        const endIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let endIcon_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (endIcon_buf_runtimeType))
        {
            const endIcon_buf__selector : int32 = valueDeserializer.readInt8()
            let endIcon_buf_ : string | Resource | undefined
            if (endIcon_buf__selector == 0) {
                endIcon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (endIcon_buf__selector == 1) {
                endIcon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for endIcon_buf_ has to be chosen through deserialisation.")
            }
            endIcon_buf = (endIcon_buf_ as string | Resource)
        }
        const endIcon_result : ResourceStr | undefined = endIcon_buf
        const symbolEndIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let symbolEndIcon_buf : SymbolGlyphModifier | undefined
        if ((RuntimeType.UNDEFINED) != (symbolEndIcon_buf_runtimeType))
        {
            symbolEndIcon_buf = valueDeserializer.readSymbolGlyphModifier()
        }
        const symbolEndIcon_result : SymbolGlyphModifier | undefined = symbolEndIcon_buf
        const labelInfo_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let labelInfo_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (labelInfo_buf_runtimeType))
        {
            const labelInfo_buf__selector : int32 = valueDeserializer.readInt8()
            let labelInfo_buf_ : string | Resource | undefined
            if (labelInfo_buf__selector == 0) {
                labelInfo_buf_ = (valueDeserializer.readString() as string)
            }
            else if (labelInfo_buf__selector == 1) {
                labelInfo_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for labelInfo_buf_ has to be chosen through deserialisation.")
            }
            labelInfo_buf = (labelInfo_buf_ as string | Resource)
        }
        const labelInfo_result : ResourceStr | undefined = labelInfo_buf
        const builder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let builder_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (builder_buf_runtimeType))
        {
            builder_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const builder_result : CustomBuilder | undefined = builder_buf
        let value : MenuItemOptions = ({startIcon: startIcon_result, symbolStartIcon: symbolStartIcon_result, content: content_result, endIcon: endIcon_result, symbolEndIcon: symbolEndIcon_result, labelInfo: labelInfo_result, builder: builder_result} as MenuItemOptions)
        return value
    }
    readMouseEvent(): MouseEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return MouseEventInternal.fromPtr(ptr)
    }
    readNativeEmbedInfo(): NativeEmbedInfo {
        let valueDeserializer : Deserializer = this
        const id_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let id_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (id_buf_runtimeType))
        {
            id_buf = (valueDeserializer.readString() as string)
        }
        const id_result : string | undefined = id_buf
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = (valueDeserializer.readString() as string)
        }
        const type_result : string | undefined = type_buf
        const src_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let src_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (src_buf_runtimeType))
        {
            src_buf = (valueDeserializer.readString() as string)
        }
        const src_result : string | undefined = src_buf
        const position_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let position_buf : Position | undefined
        if ((RuntimeType.UNDEFINED) != (position_buf_runtimeType))
        {
            position_buf = valueDeserializer.readPosition()
        }
        const position_result : Position | undefined = position_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readNumber() as number)
        }
        const width_result : number | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readNumber() as number)
        }
        const height_result : number | undefined = height_buf
        const url_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let url_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (url_buf_runtimeType))
        {
            url_buf = (valueDeserializer.readString() as string)
        }
        const url_result : string | undefined = url_buf
        const tag_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let tag_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (tag_buf_runtimeType))
        {
            tag_buf = (valueDeserializer.readString() as string)
        }
        const tag_result : string | undefined = tag_buf
        const params_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let params_buf : Map<string, string> | undefined
        if ((RuntimeType.UNDEFINED) != (params_buf_runtimeType))
        {
            const params_buf__size : int32 = valueDeserializer.readInt32()
            let params_buf_ : Map<string, string> = new Map<string, string>()
            // TODO: TS map resize
            for (let params_buf__i = 0; params_buf__i < params_buf__size; params_buf__i++) {
                const params_buf__key : string = (valueDeserializer.readString() as string)
                const params_buf__value : string = (valueDeserializer.readString() as string)
                params_buf_.set(params_buf__key, params_buf__value)
            }
            params_buf = params_buf_
        }
        const params_result : Map<string, string> | undefined = params_buf
        let value : NativeEmbedInfo = ({id: id_result, type: type_result, src: src_result, position: position_result, width: width_result, height: height_result, url: url_result, tag: tag_result, params: params_result} as NativeEmbedInfo)
        return value
    }
    readNativeXComponentParameters(): NativeXComponentParameters {
        let valueDeserializer : Deserializer = this
        const type_result : XComponentType = TypeChecker.XComponentType_FromNumeric(valueDeserializer.readInt32())
        const imageAIOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let imageAIOptions_buf : ImageAIOptions | undefined
        if ((RuntimeType.UNDEFINED) != (imageAIOptions_buf_runtimeType))
        {
            imageAIOptions_buf = valueDeserializer.readImageAIOptions()
        }
        const imageAIOptions_result : ImageAIOptions | undefined = imageAIOptions_buf
        let value : NativeXComponentParameters = ({type: type_result, imageAIOptions: imageAIOptions_result} as NativeXComponentParameters)
        return value
    }
    readNavDestinationCommonTitle(): NavDestinationCommonTitle {
        let valueDeserializer : Deserializer = this
        const main_buf_selector : int32 = valueDeserializer.readInt8()
        let main_buf : string | Resource | undefined
        if (main_buf_selector == 0) {
            main_buf = (valueDeserializer.readString() as string)
        }
        else if (main_buf_selector == 1) {
            main_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for main_buf has to be chosen through deserialisation.")
        }
        const main_result : string | Resource = (main_buf as string | Resource)
        const sub_buf_selector : int32 = valueDeserializer.readInt8()
        let sub_buf : string | Resource | undefined
        if (sub_buf_selector == 0) {
            sub_buf = (valueDeserializer.readString() as string)
        }
        else if (sub_buf_selector == 1) {
            sub_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for sub_buf has to be chosen through deserialisation.")
        }
        const sub_result : string | Resource = (sub_buf as string | Resource)
        let value : NavDestinationCommonTitle = ({main: main_result, sub: sub_result} as NavDestinationCommonTitle)
        return value
    }
    readNavDestinationContext(): NavDestinationContext {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return NavDestinationContextInternal.fromPtr(ptr)
    }
    readNavigationCommonTitle(): NavigationCommonTitle {
        let valueDeserializer : Deserializer = this
        const main_buf_selector : int32 = valueDeserializer.readInt8()
        let main_buf : string | Resource | undefined
        if (main_buf_selector == 0) {
            main_buf = (valueDeserializer.readString() as string)
        }
        else if (main_buf_selector == 1) {
            main_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for main_buf has to be chosen through deserialisation.")
        }
        const main_result : string | Resource = (main_buf as string | Resource)
        const sub_buf_selector : int32 = valueDeserializer.readInt8()
        let sub_buf : string | Resource | undefined
        if (sub_buf_selector == 0) {
            sub_buf = (valueDeserializer.readString() as string)
        }
        else if (sub_buf_selector == 1) {
            sub_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for sub_buf has to be chosen through deserialisation.")
        }
        const sub_result : string | Resource = (sub_buf as string | Resource)
        let value : NavigationCommonTitle = ({main: main_result, sub: sub_result} as NavigationCommonTitle)
        return value
    }
    readNavigationMenuItem(): NavigationMenuItem {
        let valueDeserializer : Deserializer = this
        const value_buf_selector : int32 = valueDeserializer.readInt8()
        let value_buf : string | Resource | undefined
        if (value_buf_selector == 0) {
            value_buf = (valueDeserializer.readString() as string)
        }
        else if (value_buf_selector == 1) {
            value_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for value_buf has to be chosen through deserialisation.")
        }
        const value_result : string | Resource = (value_buf as string | Resource)
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            const icon_buf__selector : int32 = valueDeserializer.readInt8()
            let icon_buf_ : string | Resource | undefined
            if (icon_buf__selector == 0) {
                icon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (icon_buf__selector == 1) {
                icon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for icon_buf_ has to be chosen through deserialisation.")
            }
            icon_buf = (icon_buf_ as string | Resource)
        }
        const icon_result : string | Resource | undefined = icon_buf
        const symbolIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let symbolIcon_buf : SymbolGlyphModifier | undefined
        if ((RuntimeType.UNDEFINED) != (symbolIcon_buf_runtimeType))
        {
            symbolIcon_buf = valueDeserializer.readSymbolGlyphModifier()
        }
        const symbolIcon_result : SymbolGlyphModifier | undefined = undefined
        const isEnabled_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isEnabled_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isEnabled_buf_runtimeType))
        {
            isEnabled_buf = valueDeserializer.readBoolean()
        }
        const isEnabled_result : boolean | undefined = isEnabled_buf
        const action_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let action_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (action_buf_runtimeType))
        {
            action_buf = valueDeserializer.readCallback_Void()
        }
        const action_result : (() => void) | undefined = action_buf
        let value : NavigationMenuItem = ({value: value_result, icon: icon_result, symbolIcon: symbolIcon_result, isEnabled: isEnabled_result, action: action_result} as NavigationMenuItem)
        return value
    }
    readNonCurrentDayStyle(): NonCurrentDayStyle {
        let valueDeserializer : Deserializer = this
        const nonCurrentMonthDayColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let nonCurrentMonthDayColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (nonCurrentMonthDayColor_buf_runtimeType))
        {
            const nonCurrentMonthDayColor_buf__selector : int32 = valueDeserializer.readInt8()
            let nonCurrentMonthDayColor_buf_ : Color | number | string | Resource | undefined
            if (nonCurrentMonthDayColor_buf__selector == 0) {
                nonCurrentMonthDayColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (nonCurrentMonthDayColor_buf__selector == 1) {
                nonCurrentMonthDayColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (nonCurrentMonthDayColor_buf__selector == 2) {
                nonCurrentMonthDayColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (nonCurrentMonthDayColor_buf__selector == 3) {
                nonCurrentMonthDayColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for nonCurrentMonthDayColor_buf_ has to be chosen through deserialisation.")
            }
            nonCurrentMonthDayColor_buf = (nonCurrentMonthDayColor_buf_ as Color | number | string | Resource)
        }
        const nonCurrentMonthDayColor_result : ResourceColor | undefined = nonCurrentMonthDayColor_buf
        const nonCurrentMonthLunarColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let nonCurrentMonthLunarColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (nonCurrentMonthLunarColor_buf_runtimeType))
        {
            const nonCurrentMonthLunarColor_buf__selector : int32 = valueDeserializer.readInt8()
            let nonCurrentMonthLunarColor_buf_ : Color | number | string | Resource | undefined
            if (nonCurrentMonthLunarColor_buf__selector == 0) {
                nonCurrentMonthLunarColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (nonCurrentMonthLunarColor_buf__selector == 1) {
                nonCurrentMonthLunarColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (nonCurrentMonthLunarColor_buf__selector == 2) {
                nonCurrentMonthLunarColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (nonCurrentMonthLunarColor_buf__selector == 3) {
                nonCurrentMonthLunarColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for nonCurrentMonthLunarColor_buf_ has to be chosen through deserialisation.")
            }
            nonCurrentMonthLunarColor_buf = (nonCurrentMonthLunarColor_buf_ as Color | number | string | Resource)
        }
        const nonCurrentMonthLunarColor_result : ResourceColor | undefined = nonCurrentMonthLunarColor_buf
        const nonCurrentMonthWorkDayMarkColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let nonCurrentMonthWorkDayMarkColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (nonCurrentMonthWorkDayMarkColor_buf_runtimeType))
        {
            const nonCurrentMonthWorkDayMarkColor_buf__selector : int32 = valueDeserializer.readInt8()
            let nonCurrentMonthWorkDayMarkColor_buf_ : Color | number | string | Resource | undefined
            if (nonCurrentMonthWorkDayMarkColor_buf__selector == 0) {
                nonCurrentMonthWorkDayMarkColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (nonCurrentMonthWorkDayMarkColor_buf__selector == 1) {
                nonCurrentMonthWorkDayMarkColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (nonCurrentMonthWorkDayMarkColor_buf__selector == 2) {
                nonCurrentMonthWorkDayMarkColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (nonCurrentMonthWorkDayMarkColor_buf__selector == 3) {
                nonCurrentMonthWorkDayMarkColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for nonCurrentMonthWorkDayMarkColor_buf_ has to be chosen through deserialisation.")
            }
            nonCurrentMonthWorkDayMarkColor_buf = (nonCurrentMonthWorkDayMarkColor_buf_ as Color | number | string | Resource)
        }
        const nonCurrentMonthWorkDayMarkColor_result : ResourceColor | undefined = nonCurrentMonthWorkDayMarkColor_buf
        const nonCurrentMonthOffDayMarkColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let nonCurrentMonthOffDayMarkColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (nonCurrentMonthOffDayMarkColor_buf_runtimeType))
        {
            const nonCurrentMonthOffDayMarkColor_buf__selector : int32 = valueDeserializer.readInt8()
            let nonCurrentMonthOffDayMarkColor_buf_ : Color | number | string | Resource | undefined
            if (nonCurrentMonthOffDayMarkColor_buf__selector == 0) {
                nonCurrentMonthOffDayMarkColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (nonCurrentMonthOffDayMarkColor_buf__selector == 1) {
                nonCurrentMonthOffDayMarkColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (nonCurrentMonthOffDayMarkColor_buf__selector == 2) {
                nonCurrentMonthOffDayMarkColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (nonCurrentMonthOffDayMarkColor_buf__selector == 3) {
                nonCurrentMonthOffDayMarkColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for nonCurrentMonthOffDayMarkColor_buf_ has to be chosen through deserialisation.")
            }
            nonCurrentMonthOffDayMarkColor_buf = (nonCurrentMonthOffDayMarkColor_buf_ as Color | number | string | Resource)
        }
        const nonCurrentMonthOffDayMarkColor_result : ResourceColor | undefined = nonCurrentMonthOffDayMarkColor_buf
        let value : NonCurrentDayStyle = ({nonCurrentMonthDayColor: nonCurrentMonthDayColor_result, nonCurrentMonthLunarColor: nonCurrentMonthLunarColor_result, nonCurrentMonthWorkDayMarkColor: nonCurrentMonthWorkDayMarkColor_result, nonCurrentMonthOffDayMarkColor: nonCurrentMonthOffDayMarkColor_result} as NonCurrentDayStyle)
        return value
    }
    readOffscreenCanvasRenderingContext2D(): OffscreenCanvasRenderingContext2D {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return OffscreenCanvasRenderingContext2DInternal.fromPtr(ptr)
    }
    readOverlayOptions(): OverlayOptions {
        let valueDeserializer : Deserializer = this
        const align_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let align_buf : Alignment | undefined
        if ((RuntimeType.UNDEFINED) != (align_buf_runtimeType))
        {
            align_buf = TypeChecker.Alignment_FromNumeric(valueDeserializer.readInt32())
        }
        const align_result : Alignment | undefined = align_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : OverlayOffset | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readOverlayOffset()
        }
        const offset_result : OverlayOffset | undefined = offset_buf
        let value : OverlayOptions = ({align: align_result, offset: offset_result} as OverlayOptions)
        return value
    }
    readPanGestureEvent(): PanGestureEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PanGestureEventInternal.fromPtr(ptr)
    }
    readParagraphStyle(): ParagraphStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ParagraphStyleInternal.fromPtr(ptr)
    }
    readParagraphStyleInterface(): ParagraphStyleInterface {
        let valueDeserializer : Deserializer = this
        const textAlign_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textAlign_buf : TextAlign | undefined
        if ((RuntimeType.UNDEFINED) != (textAlign_buf_runtimeType))
        {
            textAlign_buf = TypeChecker.TextAlign_FromNumeric(valueDeserializer.readInt32())
        }
        const textAlign_result : TextAlign | undefined = textAlign_buf
        const textIndent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textIndent_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (textIndent_buf_runtimeType))
        {
            textIndent_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const textIndent_result : LengthMetrics | undefined = textIndent_buf
        const maxLines_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxLines_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (maxLines_buf_runtimeType))
        {
            maxLines_buf = (valueDeserializer.readNumber() as number)
        }
        const maxLines_result : number | undefined = maxLines_buf
        const overflow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let overflow_buf : TextOverflow | undefined
        if ((RuntimeType.UNDEFINED) != (overflow_buf_runtimeType))
        {
            overflow_buf = TypeChecker.TextOverflow_FromNumeric(valueDeserializer.readInt32())
        }
        const overflow_result : TextOverflow | undefined = overflow_buf
        const wordBreak_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let wordBreak_buf : WordBreak | undefined
        if ((RuntimeType.UNDEFINED) != (wordBreak_buf_runtimeType))
        {
            wordBreak_buf = TypeChecker.WordBreak_FromNumeric(valueDeserializer.readInt32())
        }
        const wordBreak_result : WordBreak | undefined = wordBreak_buf
        const leadingMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let leadingMargin_buf : LengthMetrics | LeadingMarginPlaceholder | undefined
        if ((RuntimeType.UNDEFINED) != (leadingMargin_buf_runtimeType))
        {
            const leadingMargin_buf__selector : int32 = valueDeserializer.readInt8()
            let leadingMargin_buf_ : LengthMetrics | LeadingMarginPlaceholder | undefined
            if (leadingMargin_buf__selector == 0) {
                leadingMargin_buf_ = (valueDeserializer.readLengthMetrics() as LengthMetrics)
            }
            else if (leadingMargin_buf__selector == 1) {
                leadingMargin_buf_ = valueDeserializer.readLeadingMarginPlaceholder()
            }
            else {
                throw new Error("One of the branches for leadingMargin_buf_ has to be chosen through deserialisation.")
            }
            leadingMargin_buf = (leadingMargin_buf_ as LengthMetrics | LeadingMarginPlaceholder)
        }
        const leadingMargin_result : LengthMetrics | LeadingMarginPlaceholder | undefined = leadingMargin_buf
        const paragraphSpacing_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let paragraphSpacing_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (paragraphSpacing_buf_runtimeType))
        {
            paragraphSpacing_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const paragraphSpacing_result : LengthMetrics | undefined = paragraphSpacing_buf
        let value : ParagraphStyleInterface = ({textAlign: textAlign_result, textIndent: textIndent_result, maxLines: maxLines_result, overflow: overflow_result, wordBreak: wordBreak_result, leadingMargin: leadingMargin_result, paragraphSpacing: paragraphSpacing_result} as ParagraphStyleInterface)
        return value
    }
    readPasswordIcon(): PasswordIcon {
        let valueDeserializer : Deserializer = this
        const onIconSrc_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onIconSrc_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (onIconSrc_buf_runtimeType))
        {
            const onIconSrc_buf__selector : int32 = valueDeserializer.readInt8()
            let onIconSrc_buf_ : string | Resource | undefined
            if (onIconSrc_buf__selector == 0) {
                onIconSrc_buf_ = (valueDeserializer.readString() as string)
            }
            else if (onIconSrc_buf__selector == 1) {
                onIconSrc_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for onIconSrc_buf_ has to be chosen through deserialisation.")
            }
            onIconSrc_buf = (onIconSrc_buf_ as string | Resource)
        }
        const onIconSrc_result : string | Resource | undefined = onIconSrc_buf
        const offIconSrc_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offIconSrc_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (offIconSrc_buf_runtimeType))
        {
            const offIconSrc_buf__selector : int32 = valueDeserializer.readInt8()
            let offIconSrc_buf_ : string | Resource | undefined
            if (offIconSrc_buf__selector == 0) {
                offIconSrc_buf_ = (valueDeserializer.readString() as string)
            }
            else if (offIconSrc_buf__selector == 1) {
                offIconSrc_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for offIconSrc_buf_ has to be chosen through deserialisation.")
            }
            offIconSrc_buf = (offIconSrc_buf_ as string | Resource)
        }
        const offIconSrc_result : string | Resource | undefined = offIconSrc_buf
        let value : PasswordIcon = ({onIconSrc: onIconSrc_result, offIconSrc: offIconSrc_result} as PasswordIcon)
        return value
    }
    readPickerDialogButtonStyle(): PickerDialogButtonStyle {
        let valueDeserializer : Deserializer = this
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : ButtonType | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = TypeChecker.ButtonType_FromNumeric(valueDeserializer.readInt32())
        }
        const type_result : ButtonType | undefined = type_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : ButtonStyleMode | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.ButtonStyleMode_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : ButtonStyleMode | undefined = style_buf
        const role_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let role_buf : ButtonRole | undefined
        if ((RuntimeType.UNDEFINED) != (role_buf_runtimeType))
        {
            role_buf = TypeChecker.ButtonRole_FromNumeric(valueDeserializer.readInt32())
        }
        const role_result : ButtonRole | undefined = role_buf
        const fontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontSize_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (fontSize_buf_runtimeType))
        {
            fontSize_buf = (valueDeserializer.readLength() as Length)
        }
        const fontSize_result : Length | undefined = fontSize_buf
        const fontColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontColor_buf_runtimeType))
        {
            const fontColor_buf__selector : int32 = valueDeserializer.readInt8()
            let fontColor_buf_ : Color | number | string | Resource | undefined
            if (fontColor_buf__selector == 0) {
                fontColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontColor_buf__selector == 1) {
                fontColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontColor_buf__selector == 2) {
                fontColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontColor_buf__selector == 3) {
                fontColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontColor_buf_ has to be chosen through deserialisation.")
            }
            fontColor_buf = (fontColor_buf_ as Color | number | string | Resource)
        }
        const fontColor_result : ResourceColor | undefined = fontColor_buf
        const fontWeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontWeight_buf : FontWeight | number | string | undefined
        if ((RuntimeType.UNDEFINED) != (fontWeight_buf_runtimeType))
        {
            const fontWeight_buf__selector : int32 = valueDeserializer.readInt8()
            let fontWeight_buf_ : FontWeight | number | string | undefined
            if (fontWeight_buf__selector == 0) {
                fontWeight_buf_ = TypeChecker.FontWeight_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontWeight_buf__selector == 1) {
                fontWeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontWeight_buf__selector == 2) {
                fontWeight_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for fontWeight_buf_ has to be chosen through deserialisation.")
            }
            fontWeight_buf = (fontWeight_buf_ as FontWeight | number | string)
        }
        const fontWeight_result : FontWeight | number | string | undefined = fontWeight_buf
        const fontStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontStyle_buf : FontStyle | undefined
        if ((RuntimeType.UNDEFINED) != (fontStyle_buf_runtimeType))
        {
            fontStyle_buf = TypeChecker.FontStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const fontStyle_result : FontStyle | undefined = fontStyle_buf
        const fontFamily_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontFamily_buf : Resource | string | undefined
        if ((RuntimeType.UNDEFINED) != (fontFamily_buf_runtimeType))
        {
            const fontFamily_buf__selector : int32 = valueDeserializer.readInt8()
            let fontFamily_buf_ : Resource | string | undefined
            if (fontFamily_buf__selector == 0) {
                fontFamily_buf_ = valueDeserializer.readResource()
            }
            else if (fontFamily_buf__selector == 1) {
                fontFamily_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for fontFamily_buf_ has to be chosen through deserialisation.")
            }
            fontFamily_buf = (fontFamily_buf_ as Resource | string)
        }
        const fontFamily_result : Resource | string | undefined = fontFamily_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const borderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderRadius_buf : Length | BorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (borderRadius_buf_runtimeType))
        {
            const borderRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let borderRadius_buf_ : Length | BorderRadiuses | undefined
            if (borderRadius_buf__selector == 0) {
                borderRadius_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (borderRadius_buf__selector == 1) {
                borderRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for borderRadius_buf_ has to be chosen through deserialisation.")
            }
            borderRadius_buf = (borderRadius_buf_ as Length | BorderRadiuses)
        }
        const borderRadius_result : Length | BorderRadiuses | undefined = borderRadius_buf
        const primary_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let primary_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (primary_buf_runtimeType))
        {
            primary_buf = valueDeserializer.readBoolean()
        }
        const primary_result : boolean | undefined = primary_buf
        let value : PickerDialogButtonStyle = ({type: type_result, style: style_result, role: role_result, fontSize: fontSize_result, fontColor: fontColor_result, fontWeight: fontWeight_result, fontStyle: fontStyle_result, fontFamily: fontFamily_result, backgroundColor: backgroundColor_result, borderRadius: borderRadius_result, primary: primary_result} as PickerDialogButtonStyle)
        return value
    }
    readPinchGestureEvent(): PinchGestureEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return PinchGestureEventInternal.fromPtr(ptr)
    }
    readPluginComponentOptions(): PluginComponentOptions {
        let valueDeserializer : Deserializer = this
        const template_result : PluginComponentTemplate = valueDeserializer.readPluginComponentTemplate()
        const data_result : string = (valueDeserializer.readString() as string)
        let value : PluginComponentOptions = ({template: template_result, data: data_result} as PluginComponentOptions)
        return value
    }
    readRadioStyle(): RadioStyle {
        let valueDeserializer : Deserializer = this
        const checkedBackgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let checkedBackgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (checkedBackgroundColor_buf_runtimeType))
        {
            const checkedBackgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let checkedBackgroundColor_buf_ : Color | number | string | Resource | undefined
            if (checkedBackgroundColor_buf__selector == 0) {
                checkedBackgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (checkedBackgroundColor_buf__selector == 1) {
                checkedBackgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (checkedBackgroundColor_buf__selector == 2) {
                checkedBackgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (checkedBackgroundColor_buf__selector == 3) {
                checkedBackgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for checkedBackgroundColor_buf_ has to be chosen through deserialisation.")
            }
            checkedBackgroundColor_buf = (checkedBackgroundColor_buf_ as Color | number | string | Resource)
        }
        const checkedBackgroundColor_result : ResourceColor | undefined = checkedBackgroundColor_buf
        const uncheckedBorderColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let uncheckedBorderColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (uncheckedBorderColor_buf_runtimeType))
        {
            const uncheckedBorderColor_buf__selector : int32 = valueDeserializer.readInt8()
            let uncheckedBorderColor_buf_ : Color | number | string | Resource | undefined
            if (uncheckedBorderColor_buf__selector == 0) {
                uncheckedBorderColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (uncheckedBorderColor_buf__selector == 1) {
                uncheckedBorderColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (uncheckedBorderColor_buf__selector == 2) {
                uncheckedBorderColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (uncheckedBorderColor_buf__selector == 3) {
                uncheckedBorderColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for uncheckedBorderColor_buf_ has to be chosen through deserialisation.")
            }
            uncheckedBorderColor_buf = (uncheckedBorderColor_buf_ as Color | number | string | Resource)
        }
        const uncheckedBorderColor_result : ResourceColor | undefined = uncheckedBorderColor_buf
        const indicatorColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let indicatorColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (indicatorColor_buf_runtimeType))
        {
            const indicatorColor_buf__selector : int32 = valueDeserializer.readInt8()
            let indicatorColor_buf_ : Color | number | string | Resource | undefined
            if (indicatorColor_buf__selector == 0) {
                indicatorColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (indicatorColor_buf__selector == 1) {
                indicatorColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (indicatorColor_buf__selector == 2) {
                indicatorColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (indicatorColor_buf__selector == 3) {
                indicatorColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for indicatorColor_buf_ has to be chosen through deserialisation.")
            }
            indicatorColor_buf = (indicatorColor_buf_ as Color | number | string | Resource)
        }
        const indicatorColor_result : ResourceColor | undefined = indicatorColor_buf
        let value : RadioStyle = ({checkedBackgroundColor: checkedBackgroundColor_result, uncheckedBorderColor: uncheckedBorderColor_result, indicatorColor: indicatorColor_result} as RadioStyle)
        return value
    }
    readRectOptions(): RectOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : number | string | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as number | string)
        }
        const width_result : number | string | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : number | string | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as number | string)
        }
        const height_result : number | string | undefined = height_buf
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : Length | Array<RadiusItem> | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            const radius_buf__selector : int32 = valueDeserializer.readInt8()
            let radius_buf_ : Length | Array<RadiusItem> | undefined
            if (radius_buf__selector == 0) {
                radius_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (radius_buf__selector == 1) {
                const radius_buf__u_length : int32 = valueDeserializer.readInt32()
                let radius_buf__u : Array<RadiusItem> = new Array<RadiusItem>(radius_buf__u_length)
                for (let radius_buf__u_i = 0; radius_buf__u_i < radius_buf__u_length; radius_buf__u_i++) {
                    const radius_buf__u_buf_value0 : Length = (valueDeserializer.readLength() as Length)
                    const radius_buf__u_buf_value1 : Length = (valueDeserializer.readLength() as Length)
                    radius_buf__u[radius_buf__u_i] = ([radius_buf__u_buf_value0, radius_buf__u_buf_value1] as RadiusItem)
                }
                radius_buf_ = radius_buf__u
            }
            else {
                throw new Error("One of the branches for radius_buf_ has to be chosen through deserialisation.")
            }
            radius_buf = (radius_buf_ as Length | Array<RadiusItem>)
        }
        const radius_result : Length | Array<RadiusItem> | undefined = radius_buf
        let value : RectOptions = ({width: width_result, height: height_result, radius: radius_result} as RectOptions)
        return value
    }
    readRectShapeOptions(): RectShapeOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : number | string | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as number | string)
        }
        const width_result : number | string | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : number | string | undefined
            if (height_buf__selector == 0) {
                height_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as number | string)
        }
        const height_result : number | string | undefined = height_buf
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : number | string | Array<number | string> | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            const radius_buf__selector : int32 = valueDeserializer.readInt8()
            let radius_buf_ : number | string | Array<number | string> | undefined
            if (radius_buf__selector == 0) {
                radius_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (radius_buf__selector == 1) {
                radius_buf_ = (valueDeserializer.readString() as string)
            }
            else if (radius_buf__selector == 2) {
                const radius_buf__u_length : int32 = valueDeserializer.readInt32()
                let radius_buf__u : Array<number | string> = new Array<number | string>(radius_buf__u_length)
                for (let radius_buf__u_i = 0; radius_buf__u_i < radius_buf__u_length; radius_buf__u_i++) {
                    const radius_buf__u_buf_selector : int32 = valueDeserializer.readInt8()
                    let radius_buf__u_buf : number | string | undefined
                    if (radius_buf__u_buf_selector == 0) {
                        radius_buf__u_buf = (valueDeserializer.readNumber() as number)
                    }
                    else if (radius_buf__u_buf_selector == 1) {
                        radius_buf__u_buf = (valueDeserializer.readString() as string)
                    }
                    else {
                        throw new Error("One of the branches for radius_buf__u_buf has to be chosen through deserialisation.")
                    }
                    radius_buf__u[radius_buf__u_i] = (radius_buf__u_buf as number | string)
                }
                radius_buf_ = radius_buf__u
            }
            else {
                throw new Error("One of the branches for radius_buf_ has to be chosen through deserialisation.")
            }
            radius_buf = (radius_buf_ as number | string | Array<number | string>)
        }
        const radius_result : number | string | Array<number | string> | undefined = radius_buf
        let value : RectShapeOptions = ({width: width_result, height: height_result, radius: radius_result} as RectShapeOptions)
        return value
    }
    readRefreshOptions(): RefreshOptions {
        let valueDeserializer : Deserializer = this
        const refreshing_result : boolean = valueDeserializer.readBoolean()
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            const offset_buf__selector : int32 = valueDeserializer.readInt8()
            let offset_buf_ : number | string | undefined
            if (offset_buf__selector == 0) {
                offset_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (offset_buf__selector == 1) {
                offset_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for offset_buf_ has to be chosen through deserialisation.")
            }
            offset_buf = (offset_buf_ as number | string)
        }
        const offset_result : number | string | undefined = offset_buf
        const friction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let friction_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (friction_buf_runtimeType))
        {
            const friction_buf__selector : int32 = valueDeserializer.readInt8()
            let friction_buf_ : number | string | undefined
            if (friction_buf__selector == 0) {
                friction_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (friction_buf__selector == 1) {
                friction_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for friction_buf_ has to be chosen through deserialisation.")
            }
            friction_buf = (friction_buf_ as number | string)
        }
        const friction_result : number | string | undefined = friction_buf
        const promptText_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let promptText_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (promptText_buf_runtimeType))
        {
            const promptText_buf__selector : int32 = valueDeserializer.readInt8()
            let promptText_buf_ : string | Resource | undefined
            if (promptText_buf__selector == 0) {
                promptText_buf_ = (valueDeserializer.readString() as string)
            }
            else if (promptText_buf__selector == 1) {
                promptText_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for promptText_buf_ has to be chosen through deserialisation.")
            }
            promptText_buf = (promptText_buf_ as string | Resource)
        }
        const promptText_result : ResourceStr | undefined = promptText_buf
        const builder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let builder_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (builder_buf_runtimeType))
        {
            builder_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const builder_result : CustomBuilder | undefined = builder_buf
        const refreshingContent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let refreshingContent_buf : ComponentContent | undefined
        if ((RuntimeType.UNDEFINED) != (refreshingContent_buf_runtimeType))
        {
            refreshingContent_buf = (valueDeserializer.readComponentContent() as ComponentContent)
        }
        const refreshingContent_result : ComponentContent | undefined = refreshingContent_buf
        let value : RefreshOptions = ({refreshing: refreshing_result, offset: offset_result, friction: friction_result, promptText: promptText_result, builder: builder_result, refreshingContent: refreshingContent_result} as RefreshOptions)
        return value
    }
    readResizableOptions(): ResizableOptions {
        let valueDeserializer : Deserializer = this
        const slice_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let slice_buf : EdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (slice_buf_runtimeType))
        {
            slice_buf = valueDeserializer.readEdgeWidths()
        }
        const slice_result : EdgeWidths | undefined = slice_buf
        const lattice_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lattice_buf : DrawingLattice | undefined
        if ((RuntimeType.UNDEFINED) != (lattice_buf_runtimeType))
        {
            lattice_buf = (valueDeserializer.readDrawingLattice() as DrawingLattice)
        }
        const lattice_result : DrawingLattice | undefined = lattice_buf
        let value : ResizableOptions = ({slice: slice_result, lattice: lattice_result} as ResizableOptions)
        return value
    }
    readRestrictedWorker(): RestrictedWorker {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RestrictedWorkerInternal.fromPtr(ptr)
    }
    readReuseOptions(): ReuseOptions {
        let valueDeserializer : Deserializer = this
        const reuseId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let reuseId_buf : ReuseIdCallback | undefined
        if ((RuntimeType.UNDEFINED) != (reuseId_buf_runtimeType))
        {
            reuseId_buf = valueDeserializer.readReuseIdCallback()
        }
        const reuseId_result : ReuseIdCallback | undefined = reuseId_buf
        let value : ReuseOptions = ({reuseId: reuseId_result} as ReuseOptions)
        return value
    }
    readRichEditorBuilderSpanOptions(): RichEditorBuilderSpanOptions {
        let valueDeserializer : Deserializer = this
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = (valueDeserializer.readNumber() as number)
        }
        const offset_result : number | undefined = offset_buf
        const dragBackgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dragBackgroundColor_buf : ColorMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (dragBackgroundColor_buf_runtimeType))
        {
            dragBackgroundColor_buf = (valueDeserializer.readColorMetrics() as ColorMetrics)
        }
        const dragBackgroundColor_result : ColorMetrics | undefined = dragBackgroundColor_buf
        const isDragShadowNeeded_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isDragShadowNeeded_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isDragShadowNeeded_buf_runtimeType))
        {
            isDragShadowNeeded_buf = valueDeserializer.readBoolean()
        }
        const isDragShadowNeeded_result : boolean | undefined = isDragShadowNeeded_buf
        let value : RichEditorBuilderSpanOptions = ({offset: offset_result, dragBackgroundColor: dragBackgroundColor_result, isDragShadowNeeded: isDragShadowNeeded_result} as RichEditorBuilderSpanOptions)
        return value
    }
    readRichEditorChangeValue(): RichEditorChangeValue {
        let valueDeserializer : Deserializer = this
        const rangeBefore_result : TextRange = valueDeserializer.readTextRange()
        const replacedSpans_buf_length : int32 = valueDeserializer.readInt32()
        let replacedSpans_buf : Array<RichEditorTextSpanResult> = new Array<RichEditorTextSpanResult>(replacedSpans_buf_length)
        for (let replacedSpans_buf_i = 0; replacedSpans_buf_i < replacedSpans_buf_length; replacedSpans_buf_i++) {
            replacedSpans_buf[replacedSpans_buf_i] = valueDeserializer.readRichEditorTextSpanResult()
        }
        const replacedSpans_result : Array<RichEditorTextSpanResult> = replacedSpans_buf
        const replacedImageSpans_buf_length : int32 = valueDeserializer.readInt32()
        let replacedImageSpans_buf : Array<RichEditorImageSpanResult> = new Array<RichEditorImageSpanResult>(replacedImageSpans_buf_length)
        for (let replacedImageSpans_buf_i = 0; replacedImageSpans_buf_i < replacedImageSpans_buf_length; replacedImageSpans_buf_i++) {
            replacedImageSpans_buf[replacedImageSpans_buf_i] = valueDeserializer.readRichEditorImageSpanResult()
        }
        const replacedImageSpans_result : Array<RichEditorImageSpanResult> = replacedImageSpans_buf
        const replacedSymbolSpans_buf_length : int32 = valueDeserializer.readInt32()
        let replacedSymbolSpans_buf : Array<RichEditorTextSpanResult> = new Array<RichEditorTextSpanResult>(replacedSymbolSpans_buf_length)
        for (let replacedSymbolSpans_buf_i = 0; replacedSymbolSpans_buf_i < replacedSymbolSpans_buf_length; replacedSymbolSpans_buf_i++) {
            replacedSymbolSpans_buf[replacedSymbolSpans_buf_i] = valueDeserializer.readRichEditorTextSpanResult()
        }
        const replacedSymbolSpans_result : Array<RichEditorTextSpanResult> = replacedSymbolSpans_buf
        let value : RichEditorChangeValue = ({rangeBefore: rangeBefore_result, replacedSpans: replacedSpans_result, replacedImageSpans: replacedImageSpans_result, replacedSymbolSpans: replacedSymbolSpans_result} as RichEditorChangeValue)
        return value
    }
    readRichEditorLayoutStyle(): RichEditorLayoutStyle {
        let valueDeserializer : Deserializer = this
        const margin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let margin_buf : Dimension | Padding | undefined
        if ((RuntimeType.UNDEFINED) != (margin_buf_runtimeType))
        {
            const margin_buf__selector : int32 = valueDeserializer.readInt8()
            let margin_buf_ : Dimension | Padding | undefined
            if (margin_buf__selector == 0) {
                margin_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (margin_buf__selector == 1) {
                margin_buf_ = valueDeserializer.readPadding()
            }
            else {
                throw new Error("One of the branches for margin_buf_ has to be chosen through deserialisation.")
            }
            margin_buf = (margin_buf_ as Dimension | Padding)
        }
        const margin_result : Dimension | Padding | undefined = margin_buf
        const borderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderRadius_buf : Dimension | BorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (borderRadius_buf_runtimeType))
        {
            const borderRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let borderRadius_buf_ : Dimension | BorderRadiuses | undefined
            if (borderRadius_buf__selector == 0) {
                borderRadius_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (borderRadius_buf__selector == 1) {
                borderRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for borderRadius_buf_ has to be chosen through deserialisation.")
            }
            borderRadius_buf = (borderRadius_buf_ as Dimension | BorderRadiuses)
        }
        const borderRadius_result : Dimension | BorderRadiuses | undefined = borderRadius_buf
        let value : RichEditorLayoutStyle = ({margin: margin_result, borderRadius: borderRadius_result} as RichEditorLayoutStyle)
        return value
    }
    readRichEditorParagraphStyle(): RichEditorParagraphStyle {
        let valueDeserializer : Deserializer = this
        const textAlign_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textAlign_buf : TextAlign | undefined
        if ((RuntimeType.UNDEFINED) != (textAlign_buf_runtimeType))
        {
            textAlign_buf = TypeChecker.TextAlign_FromNumeric(valueDeserializer.readInt32())
        }
        const textAlign_result : TextAlign | undefined = textAlign_buf
        const leadingMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let leadingMargin_buf : Dimension | LeadingMarginPlaceholder | undefined
        if ((RuntimeType.UNDEFINED) != (leadingMargin_buf_runtimeType))
        {
            const leadingMargin_buf__selector : int32 = valueDeserializer.readInt8()
            let leadingMargin_buf_ : Dimension | LeadingMarginPlaceholder | undefined
            if (leadingMargin_buf__selector == 0) {
                leadingMargin_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (leadingMargin_buf__selector == 1) {
                leadingMargin_buf_ = valueDeserializer.readLeadingMarginPlaceholder()
            }
            else {
                throw new Error("One of the branches for leadingMargin_buf_ has to be chosen through deserialisation.")
            }
            leadingMargin_buf = (leadingMargin_buf_ as Dimension | LeadingMarginPlaceholder)
        }
        const leadingMargin_result : Dimension | LeadingMarginPlaceholder | undefined = leadingMargin_buf
        const wordBreak_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let wordBreak_buf : WordBreak | undefined
        if ((RuntimeType.UNDEFINED) != (wordBreak_buf_runtimeType))
        {
            wordBreak_buf = TypeChecker.WordBreak_FromNumeric(valueDeserializer.readInt32())
        }
        const wordBreak_result : WordBreak | undefined = wordBreak_buf
        const lineBreakStrategy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lineBreakStrategy_buf : LineBreakStrategy | undefined
        if ((RuntimeType.UNDEFINED) != (lineBreakStrategy_buf_runtimeType))
        {
            lineBreakStrategy_buf = TypeChecker.LineBreakStrategy_FromNumeric(valueDeserializer.readInt32())
        }
        const lineBreakStrategy_result : LineBreakStrategy | undefined = lineBreakStrategy_buf
        const paragraphSpacing_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let paragraphSpacing_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (paragraphSpacing_buf_runtimeType))
        {
            paragraphSpacing_buf = (valueDeserializer.readNumber() as number)
        }
        const paragraphSpacing_result : number | undefined = paragraphSpacing_buf
        let value : RichEditorParagraphStyle = ({textAlign: textAlign_result, leadingMargin: leadingMargin_result, wordBreak: wordBreak_result, lineBreakStrategy: lineBreakStrategy_result, paragraphSpacing: paragraphSpacing_result} as RichEditorParagraphStyle)
        return value
    }
    readRichEditorParagraphStyleOptions(): RichEditorParagraphStyleOptions {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readNumber() as number)
        }
        const start_result : number | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readNumber() as number)
        }
        const end_result : number | undefined = end_buf
        const style_result : RichEditorParagraphStyle = valueDeserializer.readRichEditorParagraphStyle()
        let value : RichEditorParagraphStyleOptions = ({start: start_result, end: end_result, style: style_result} as RichEditorParagraphStyleOptions)
        return value
    }
    readRichEditorSymbolSpanStyle(): RichEditorSymbolSpanStyle {
        let valueDeserializer : Deserializer = this
        const fontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontSize_buf : number | string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (fontSize_buf_runtimeType))
        {
            const fontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let fontSize_buf_ : number | string | Resource | undefined
            if (fontSize_buf__selector == 0) {
                fontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontSize_buf__selector == 1) {
                fontSize_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontSize_buf__selector == 2) {
                fontSize_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontSize_buf_ has to be chosen through deserialisation.")
            }
            fontSize_buf = (fontSize_buf_ as number | string | Resource)
        }
        const fontSize_result : number | string | Resource | undefined = fontSize_buf
        const fontColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontColor_buf : Array<ResourceColor> | undefined
        if ((RuntimeType.UNDEFINED) != (fontColor_buf_runtimeType))
        {
            const fontColor_buf__length : int32 = valueDeserializer.readInt32()
            let fontColor_buf_ : Array<ResourceColor> = new Array<ResourceColor>(fontColor_buf__length)
            for (let fontColor_buf__i = 0; fontColor_buf__i < fontColor_buf__length; fontColor_buf__i++) {
                const fontColor_buf__buf_selector : int32 = valueDeserializer.readInt8()
                let fontColor_buf__buf : Color | number | string | Resource | undefined
                if (fontColor_buf__buf_selector == 0) {
                    fontColor_buf__buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (fontColor_buf__buf_selector == 1) {
                    fontColor_buf__buf = (valueDeserializer.readNumber() as number)
                }
                else if (fontColor_buf__buf_selector == 2) {
                    fontColor_buf__buf = (valueDeserializer.readString() as string)
                }
                else if (fontColor_buf__buf_selector == 3) {
                    fontColor_buf__buf = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for fontColor_buf__buf has to be chosen through deserialisation.")
                }
                fontColor_buf_[fontColor_buf__i] = (fontColor_buf__buf as Color | number | string | Resource)
            }
            fontColor_buf = fontColor_buf_
        }
        const fontColor_result : Array<ResourceColor> | undefined = fontColor_buf
        const fontWeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontWeight_buf : number | FontWeight | string | undefined
        if ((RuntimeType.UNDEFINED) != (fontWeight_buf_runtimeType))
        {
            const fontWeight_buf__selector : int32 = valueDeserializer.readInt8()
            let fontWeight_buf_ : number | FontWeight | string | undefined
            if (fontWeight_buf__selector == 0) {
                fontWeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontWeight_buf__selector == 1) {
                fontWeight_buf_ = TypeChecker.FontWeight_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontWeight_buf__selector == 2) {
                fontWeight_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for fontWeight_buf_ has to be chosen through deserialisation.")
            }
            fontWeight_buf = (fontWeight_buf_ as number | FontWeight | string)
        }
        const fontWeight_result : number | FontWeight | string | undefined = fontWeight_buf
        const effectStrategy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let effectStrategy_buf : SymbolEffectStrategy | undefined
        if ((RuntimeType.UNDEFINED) != (effectStrategy_buf_runtimeType))
        {
            effectStrategy_buf = TypeChecker.SymbolEffectStrategy_FromNumeric(valueDeserializer.readInt32())
        }
        const effectStrategy_result : SymbolEffectStrategy | undefined = effectStrategy_buf
        const renderingStrategy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let renderingStrategy_buf : SymbolRenderingStrategy | undefined
        if ((RuntimeType.UNDEFINED) != (renderingStrategy_buf_runtimeType))
        {
            renderingStrategy_buf = TypeChecker.SymbolRenderingStrategy_FromNumeric(valueDeserializer.readInt32())
        }
        const renderingStrategy_result : SymbolRenderingStrategy | undefined = renderingStrategy_buf
        let value : RichEditorSymbolSpanStyle = ({fontSize: fontSize_result, fontColor: fontColor_result, fontWeight: fontWeight_result, effectStrategy: effectStrategy_result, renderingStrategy: renderingStrategy_result} as RichEditorSymbolSpanStyle)
        return value
    }
    readRichEditorUpdateSymbolSpanStyleOptions(): RichEditorUpdateSymbolSpanStyleOptions {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readNumber() as number)
        }
        const start_result : number | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readNumber() as number)
        }
        const end_result : number | undefined = end_buf
        const symbolStyle_result : RichEditorSymbolSpanStyle = valueDeserializer.readRichEditorSymbolSpanStyle()
        let value : RichEditorUpdateSymbolSpanStyleOptions = ({start: start_result, end: end_result, symbolStyle: symbolStyle_result} as RichEditorUpdateSymbolSpanStyleOptions)
        return value
    }
    readRichEditorUrlStyle(): RichEditorUrlStyle {
        let valueDeserializer : Deserializer = this
        const url_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let url_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (url_buf_runtimeType))
        {
            const url_buf__selector : int32 = valueDeserializer.readInt8()
            let url_buf_ : string | Resource | undefined
            if (url_buf__selector == 0) {
                url_buf_ = (valueDeserializer.readString() as string)
            }
            else if (url_buf__selector == 1) {
                url_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for url_buf_ has to be chosen through deserialisation.")
            }
            url_buf = (url_buf_ as string | Resource)
        }
        const url_result : ResourceStr | undefined = url_buf
        let value : RichEditorUrlStyle = ({url: url_result} as RichEditorUrlStyle)
        return value
    }
    readRotationGestureEvent(): RotationGestureEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return RotationGestureEventInternal.fromPtr(ptr)
    }
    readSceneOptions(): SceneOptions {
        let valueDeserializer : Deserializer = this
        const scene_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scene_buf : ResourceStr | Scene | undefined
        if ((RuntimeType.UNDEFINED) != (scene_buf_runtimeType))
        {
            const scene_buf__selector : int32 = valueDeserializer.readInt8()
            let scene_buf_ : ResourceStr | Scene | undefined
            if (scene_buf__selector == 0) {
                const scene_buf__u_selector : int32 = valueDeserializer.readInt8()
                let scene_buf__u : string | Resource | undefined
                if (scene_buf__u_selector == 0) {
                    scene_buf__u = (valueDeserializer.readString() as string)
                }
                else if (scene_buf__u_selector == 1) {
                    scene_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for scene_buf__u has to be chosen through deserialisation.")
                }
                scene_buf_ = (scene_buf__u as string | Resource)
            }
            else if (scene_buf__selector == 1) {
                scene_buf_ = (valueDeserializer.readScene() as Scene)
            }
            else {
                throw new Error("One of the branches for scene_buf_ has to be chosen through deserialisation.")
            }
            scene_buf = (scene_buf_ as ResourceStr | Scene)
        }
        const scene_result : ResourceStr | Scene | undefined = scene_buf
        const modelType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let modelType_buf : ModelType | undefined
        if ((RuntimeType.UNDEFINED) != (modelType_buf_runtimeType))
        {
            modelType_buf = TypeChecker.ModelType_FromNumeric(valueDeserializer.readInt32())
        }
        const modelType_result : ModelType | undefined = modelType_buf
        let value : SceneOptions = ({scene: scene_result, modelType: modelType_result} as SceneOptions)
        return value
    }
    readScrollOptions(): ScrollOptions {
        let valueDeserializer : Deserializer = this
        const xOffset_buf_selector : int32 = valueDeserializer.readInt8()
        let xOffset_buf : number | string | undefined
        if (xOffset_buf_selector == 0) {
            xOffset_buf = (valueDeserializer.readNumber() as number)
        }
        else if (xOffset_buf_selector == 1) {
            xOffset_buf = (valueDeserializer.readString() as string)
        }
        else {
            throw new Error("One of the branches for xOffset_buf has to be chosen through deserialisation.")
        }
        const xOffset_result : number | string = (xOffset_buf as number | string)
        const yOffset_buf_selector : int32 = valueDeserializer.readInt8()
        let yOffset_buf : number | string | undefined
        if (yOffset_buf_selector == 0) {
            yOffset_buf = (valueDeserializer.readNumber() as number)
        }
        else if (yOffset_buf_selector == 1) {
            yOffset_buf = (valueDeserializer.readString() as string)
        }
        else {
            throw new Error("One of the branches for yOffset_buf has to be chosen through deserialisation.")
        }
        const yOffset_result : number | string = (yOffset_buf as number | string)
        const animation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let animation_buf : ScrollAnimationOptions | boolean | undefined
        if ((RuntimeType.UNDEFINED) != (animation_buf_runtimeType))
        {
            const animation_buf__selector : int32 = valueDeserializer.readInt8()
            let animation_buf_ : ScrollAnimationOptions | boolean | undefined
            if (animation_buf__selector == 0) {
                animation_buf_ = valueDeserializer.readScrollAnimationOptions()
            }
            else if (animation_buf__selector == 1) {
                animation_buf_ = valueDeserializer.readBoolean()
            }
            else {
                throw new Error("One of the branches for animation_buf_ has to be chosen through deserialisation.")
            }
            animation_buf = (animation_buf_ as ScrollAnimationOptions | boolean)
        }
        const animation_result : ScrollAnimationOptions | boolean | undefined = animation_buf
        let value : ScrollOptions = ({xOffset: xOffset_result, yOffset: yOffset_result, animation: animation_result} as ScrollOptions)
        return value
    }
    readScrollSnapOptions(): ScrollSnapOptions {
        let valueDeserializer : Deserializer = this
        const snapAlign_result : ScrollSnapAlign = TypeChecker.ScrollSnapAlign_FromNumeric(valueDeserializer.readInt32())
        const snapPagination_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let snapPagination_buf : Dimension | Array<Dimension> | undefined
        if ((RuntimeType.UNDEFINED) != (snapPagination_buf_runtimeType))
        {
            const snapPagination_buf__selector : int32 = valueDeserializer.readInt8()
            let snapPagination_buf_ : Dimension | Array<Dimension> | undefined
            if (snapPagination_buf__selector == 0) {
                snapPagination_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (snapPagination_buf__selector == 1) {
                const snapPagination_buf__u_length : int32 = valueDeserializer.readInt32()
                let snapPagination_buf__u : Array<Dimension> = new Array<Dimension>(snapPagination_buf__u_length)
                for (let snapPagination_buf__u_i = 0; snapPagination_buf__u_i < snapPagination_buf__u_length; snapPagination_buf__u_i++) {
                    snapPagination_buf__u[snapPagination_buf__u_i] = (valueDeserializer.readLength() as Dimension)
                }
                snapPagination_buf_ = snapPagination_buf__u
            }
            else {
                throw new Error("One of the branches for snapPagination_buf_ has to be chosen through deserialisation.")
            }
            snapPagination_buf = (snapPagination_buf_ as Dimension | Array<Dimension>)
        }
        const snapPagination_result : Dimension | Array<Dimension> | undefined = snapPagination_buf
        const enableSnapToStart_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableSnapToStart_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableSnapToStart_buf_runtimeType))
        {
            enableSnapToStart_buf = valueDeserializer.readBoolean()
        }
        const enableSnapToStart_result : boolean | undefined = enableSnapToStart_buf
        const enableSnapToEnd_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableSnapToEnd_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableSnapToEnd_buf_runtimeType))
        {
            enableSnapToEnd_buf = valueDeserializer.readBoolean()
        }
        const enableSnapToEnd_result : boolean | undefined = enableSnapToEnd_buf
        let value : ScrollSnapOptions = ({snapAlign: snapAlign_result, snapPagination: snapPagination_result, enableSnapToStart: enableSnapToStart_result, enableSnapToEnd: enableSnapToEnd_result} as ScrollSnapOptions)
        return value
    }
    readScrollToIndexOptions(): ScrollToIndexOptions {
        let valueDeserializer : Deserializer = this
        const extraOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let extraOffset_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (extraOffset_buf_runtimeType))
        {
            extraOffset_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const extraOffset_result : LengthMetrics | undefined = extraOffset_buf
        let value : ScrollToIndexOptions = ({extraOffset: extraOffset_result} as ScrollToIndexOptions)
        return value
    }
    readSearchButtonOptions(): SearchButtonOptions {
        let valueDeserializer : Deserializer = this
        const fontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontSize_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (fontSize_buf_runtimeType))
        {
            fontSize_buf = (valueDeserializer.readLength() as Length)
        }
        const fontSize_result : Length | undefined = fontSize_buf
        const fontColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontColor_buf_runtimeType))
        {
            const fontColor_buf__selector : int32 = valueDeserializer.readInt8()
            let fontColor_buf_ : Color | number | string | Resource | undefined
            if (fontColor_buf__selector == 0) {
                fontColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontColor_buf__selector == 1) {
                fontColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontColor_buf__selector == 2) {
                fontColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontColor_buf__selector == 3) {
                fontColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontColor_buf_ has to be chosen through deserialisation.")
            }
            fontColor_buf = (fontColor_buf_ as Color | number | string | Resource)
        }
        const fontColor_result : ResourceColor | undefined = fontColor_buf
        const autoDisable_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let autoDisable_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (autoDisable_buf_runtimeType))
        {
            autoDisable_buf = valueDeserializer.readBoolean()
        }
        const autoDisable_result : boolean | undefined = autoDisable_buf
        let value : SearchButtonOptions = ({fontSize: fontSize_result, fontColor: fontColor_result, autoDisable: autoDisable_result} as SearchButtonOptions)
        return value
    }
    readSearchOptions(): SearchOptions {
        let valueDeserializer : Deserializer = this
        const value_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let value_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (value_buf_runtimeType))
        {
            value_buf = (valueDeserializer.readString() as string)
        }
        const value_result : string | undefined = value_buf
        const placeholder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placeholder_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (placeholder_buf_runtimeType))
        {
            const placeholder_buf__selector : int32 = valueDeserializer.readInt8()
            let placeholder_buf_ : string | Resource | undefined
            if (placeholder_buf__selector == 0) {
                placeholder_buf_ = (valueDeserializer.readString() as string)
            }
            else if (placeholder_buf__selector == 1) {
                placeholder_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for placeholder_buf_ has to be chosen through deserialisation.")
            }
            placeholder_buf = (placeholder_buf_ as string | Resource)
        }
        const placeholder_result : ResourceStr | undefined = placeholder_buf
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            icon_buf = (valueDeserializer.readString() as string)
        }
        const icon_result : string | undefined = icon_buf
        const controller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let controller_buf : SearchController | undefined
        if ((RuntimeType.UNDEFINED) != (controller_buf_runtimeType))
        {
            controller_buf = (valueDeserializer.readSearchController() as SearchController)
        }
        const controller_result : SearchController | undefined = controller_buf
        let value : SearchOptions = ({value: value_result, placeholder: placeholder_result, icon: icon_result, controller: controller_result} as SearchOptions)
        return value
    }
    readSectionOptions(): SectionOptions {
        let valueDeserializer : Deserializer = this
        const itemsCount_result : number = (valueDeserializer.readNumber() as number)
        const crossCount_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let crossCount_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (crossCount_buf_runtimeType))
        {
            crossCount_buf = (valueDeserializer.readNumber() as number)
        }
        const crossCount_result : number | undefined = crossCount_buf
        const onGetItemMainSizeByIndex_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onGetItemMainSizeByIndex_buf : GetItemMainSizeByIndex | undefined
        if ((RuntimeType.UNDEFINED) != (onGetItemMainSizeByIndex_buf_runtimeType))
        {
            onGetItemMainSizeByIndex_buf = valueDeserializer.readGetItemMainSizeByIndex()
        }
        const onGetItemMainSizeByIndex_result : GetItemMainSizeByIndex | undefined = onGetItemMainSizeByIndex_buf
        const columnsGap_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let columnsGap_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (columnsGap_buf_runtimeType))
        {
            columnsGap_buf = (valueDeserializer.readLength() as Dimension)
        }
        const columnsGap_result : Dimension | undefined = columnsGap_buf
        const rowsGap_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let rowsGap_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (rowsGap_buf_runtimeType))
        {
            rowsGap_buf = (valueDeserializer.readLength() as Dimension)
        }
        const rowsGap_result : Dimension | undefined = rowsGap_buf
        const margin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let margin_buf : Padding | Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (margin_buf_runtimeType))
        {
            const margin_buf__selector : int32 = valueDeserializer.readInt8()
            let margin_buf_ : Padding | Dimension | undefined
            if (margin_buf__selector == 0) {
                margin_buf_ = valueDeserializer.readPadding()
            }
            else if (margin_buf__selector == 1) {
                margin_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else {
                throw new Error("One of the branches for margin_buf_ has to be chosen through deserialisation.")
            }
            margin_buf = (margin_buf_ as Padding | Dimension)
        }
        const margin_result : Padding | Dimension | undefined = margin_buf
        let value : SectionOptions = ({itemsCount: itemsCount_result, crossCount: crossCount_result, onGetItemMainSizeByIndex: onGetItemMainSizeByIndex_result, columnsGap: columnsGap_result, rowsGap: rowsGap_result, margin: margin_result} as SectionOptions)
        return value
    }
    readSelectionMenuOptions(): SelectionMenuOptions {
        let valueDeserializer : Deserializer = this
        const onAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAppear_buf : MenuOnAppearCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onAppear_buf_runtimeType))
        {
            onAppear_buf = valueDeserializer.readMenuOnAppearCallback()
        }
        const onAppear_result : MenuOnAppearCallback | undefined = onAppear_buf
        const onDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDisappear_buf_runtimeType))
        {
            onDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDisappear_result : (() => void) | undefined = onDisappear_buf
        const menuType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let menuType_buf : MenuType | undefined
        if ((RuntimeType.UNDEFINED) != (menuType_buf_runtimeType))
        {
            menuType_buf = TypeChecker.MenuType_FromNumeric(valueDeserializer.readInt32())
        }
        const menuType_result : MenuType | undefined = menuType_buf
        const onMenuShow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onMenuShow_buf : MenuCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onMenuShow_buf_runtimeType))
        {
            onMenuShow_buf = valueDeserializer.readMenuCallback()
        }
        const onMenuShow_result : MenuCallback | undefined = onMenuShow_buf
        const onMenuHide_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onMenuHide_buf : MenuCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onMenuHide_buf_runtimeType))
        {
            onMenuHide_buf = valueDeserializer.readMenuCallback()
        }
        const onMenuHide_result : MenuCallback | undefined = onMenuHide_buf
        const previewMenuOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewMenuOptions_buf : PreviewMenuOptions | undefined
        if ((RuntimeType.UNDEFINED) != (previewMenuOptions_buf_runtimeType))
        {
            previewMenuOptions_buf = valueDeserializer.readPreviewMenuOptions()
        }
        const previewMenuOptions_result : PreviewMenuOptions | undefined = previewMenuOptions_buf
        let value : SelectionMenuOptions = ({onAppear: onAppear_result, onDisappear: onDisappear_result, menuType: menuType_result, onMenuShow: onMenuShow_result, onMenuHide: onMenuHide_result, previewMenuOptions: previewMenuOptions_result} as SelectionMenuOptions)
        return value
    }
    readSelectionMenuOptionsExt(): SelectionMenuOptionsExt {
        let valueDeserializer : Deserializer = this
        const onAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAppear_buf_runtimeType))
        {
            onAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onAppear_result : (() => void) | undefined = onAppear_buf
        const onDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDisappear_buf_runtimeType))
        {
            onDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDisappear_result : (() => void) | undefined = onDisappear_buf
        const preview_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let preview_buf : CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (preview_buf_runtimeType))
        {
            preview_buf = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        }
        const preview_result : CustomBuilder | undefined = preview_buf
        const menuType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let menuType_buf : MenuType | undefined
        if ((RuntimeType.UNDEFINED) != (menuType_buf_runtimeType))
        {
            menuType_buf = TypeChecker.MenuType_FromNumeric(valueDeserializer.readInt32())
        }
        const menuType_result : MenuType | undefined = menuType_buf
        const previewMenuOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewMenuOptions_buf : PreviewMenuOptions | undefined
        if ((RuntimeType.UNDEFINED) != (previewMenuOptions_buf_runtimeType))
        {
            previewMenuOptions_buf = valueDeserializer.readPreviewMenuOptions()
        }
        const previewMenuOptions_result : PreviewMenuOptions | undefined = previewMenuOptions_buf
        let value : SelectionMenuOptionsExt = ({onAppear: onAppear_result, onDisappear: onDisappear_result, preview: preview_result, menuType: menuType_result, previewMenuOptions: previewMenuOptions_result} as SelectionMenuOptionsExt)
        return value
    }
    readSelectOption(): SelectOption {
        let valueDeserializer : Deserializer = this
        const value_buf_selector : int32 = valueDeserializer.readInt8()
        let value_buf : string | Resource | undefined
        if (value_buf_selector == 0) {
            value_buf = (valueDeserializer.readString() as string)
        }
        else if (value_buf_selector == 1) {
            value_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for value_buf has to be chosen through deserialisation.")
        }
        const value_result : ResourceStr = (value_buf as string | Resource)
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            const icon_buf__selector : int32 = valueDeserializer.readInt8()
            let icon_buf_ : string | Resource | undefined
            if (icon_buf__selector == 0) {
                icon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (icon_buf__selector == 1) {
                icon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for icon_buf_ has to be chosen through deserialisation.")
            }
            icon_buf = (icon_buf_ as string | Resource)
        }
        const icon_result : ResourceStr | undefined = icon_buf
        const symbolIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let symbolIcon_buf : SymbolGlyphModifier | undefined
        if ((RuntimeType.UNDEFINED) != (symbolIcon_buf_runtimeType))
        {
            symbolIcon_buf = valueDeserializer.readSymbolGlyphModifier()
        }
        const symbolIcon_result : SymbolGlyphModifier | undefined = symbolIcon_buf
        let value : SelectOption = ({value: value_result, icon: icon_result, symbolIcon: symbolIcon_result} as SelectOption)
        return value
    }
    readShadowOptions(): ShadowOptions {
        let valueDeserializer : Deserializer = this
        const radius_buf_selector : int32 = valueDeserializer.readInt8()
        let radius_buf : number | Resource | undefined
        if (radius_buf_selector == 0) {
            radius_buf = (valueDeserializer.readNumber() as number)
        }
        else if (radius_buf_selector == 1) {
            radius_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for radius_buf has to be chosen through deserialisation.")
        }
        const radius_result : number | Resource = (radius_buf as number | Resource)
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : ShadowType | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = TypeChecker.ShadowType_FromNumeric(valueDeserializer.readInt32())
        }
        const type_result : ShadowType | undefined = type_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : Color | string | Resource | ColoringStrategy | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | string | Resource | ColoringStrategy | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = valueDeserializer.readResource()
            }
            else if (color_buf__selector == 3) {
                color_buf_ = TypeChecker.ColoringStrategy_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | string | Resource | ColoringStrategy)
        }
        const color_result : Color | string | Resource | ColoringStrategy | undefined = color_buf
        const offsetX_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offsetX_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (offsetX_buf_runtimeType))
        {
            const offsetX_buf__selector : int32 = valueDeserializer.readInt8()
            let offsetX_buf_ : number | Resource | undefined
            if (offsetX_buf__selector == 0) {
                offsetX_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (offsetX_buf__selector == 1) {
                offsetX_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for offsetX_buf_ has to be chosen through deserialisation.")
            }
            offsetX_buf = (offsetX_buf_ as number | Resource)
        }
        const offsetX_result : number | Resource | undefined = offsetX_buf
        const offsetY_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offsetY_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (offsetY_buf_runtimeType))
        {
            const offsetY_buf__selector : int32 = valueDeserializer.readInt8()
            let offsetY_buf_ : number | Resource | undefined
            if (offsetY_buf__selector == 0) {
                offsetY_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (offsetY_buf__selector == 1) {
                offsetY_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for offsetY_buf_ has to be chosen through deserialisation.")
            }
            offsetY_buf = (offsetY_buf_ as number | Resource)
        }
        const offsetY_result : number | Resource | undefined = offsetY_buf
        const fill_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fill_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (fill_buf_runtimeType))
        {
            fill_buf = valueDeserializer.readBoolean()
        }
        const fill_result : boolean | undefined = fill_buf
        let value : ShadowOptions = ({radius: radius_result, type: type_result, color: color_result, offsetX: offsetX_result, offsetY: offsetY_result, fill: fill_result} as ShadowOptions)
        return value
    }
    readsharedTransitionOptions(): sharedTransitionOptions {
        let valueDeserializer : Deserializer = this
        const duration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let duration_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (duration_buf_runtimeType))
        {
            duration_buf = (valueDeserializer.readNumber() as number)
        }
        const duration_result : number | undefined = duration_buf
        const curve_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let curve_buf : Curve | string | ICurve | undefined
        if ((RuntimeType.UNDEFINED) != (curve_buf_runtimeType))
        {
            const curve_buf__selector : int32 = valueDeserializer.readInt8()
            let curve_buf_ : Curve | string | ICurve | undefined
            if (curve_buf__selector == 0) {
                curve_buf_ = TypeChecker.Curve_FromNumeric(valueDeserializer.readInt32())
            }
            else if (curve_buf__selector == 1) {
                curve_buf_ = (valueDeserializer.readString() as string)
            }
            else if (curve_buf__selector == 2) {
                curve_buf_ = (valueDeserializer.readICurve() as ICurve)
            }
            else {
                throw new Error("One of the branches for curve_buf_ has to be chosen through deserialisation.")
            }
            curve_buf = (curve_buf_ as Curve | string | ICurve)
        }
        const curve_result : Curve | string | ICurve | undefined = curve_buf
        const delay_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let delay_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (delay_buf_runtimeType))
        {
            delay_buf = (valueDeserializer.readNumber() as number)
        }
        const delay_result : number | undefined = delay_buf
        const motionPath_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let motionPath_buf : MotionPathOptions | undefined
        if ((RuntimeType.UNDEFINED) != (motionPath_buf_runtimeType))
        {
            motionPath_buf = valueDeserializer.readMotionPathOptions()
        }
        const motionPath_result : MotionPathOptions | undefined = motionPath_buf
        const zIndex_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let zIndex_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (zIndex_buf_runtimeType))
        {
            zIndex_buf = (valueDeserializer.readNumber() as number)
        }
        const zIndex_result : number | undefined = zIndex_buf
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : SharedTransitionEffectType | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = TypeChecker.SharedTransitionEffectType_FromNumeric(valueDeserializer.readInt32())
        }
        const type_result : SharedTransitionEffectType | undefined = type_buf
        let value : sharedTransitionOptions = ({duration: duration_result, curve: curve_result, delay: delay_result, motionPath: motionPath_result, zIndex: zIndex_result, type: type_result} as sharedTransitionOptions)
        return value
    }
    readSheetInfo(): SheetInfo {
        let valueDeserializer : Deserializer = this
        const title_buf_selector : int32 = valueDeserializer.readInt8()
        let title_buf : string | Resource | undefined
        if (title_buf_selector == 0) {
            title_buf = (valueDeserializer.readString() as string)
        }
        else if (title_buf_selector == 1) {
            title_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for title_buf has to be chosen through deserialisation.")
        }
        const title_result : string | Resource = (title_buf as string | Resource)
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            const icon_buf__selector : int32 = valueDeserializer.readInt8()
            let icon_buf_ : string | Resource | undefined
            if (icon_buf__selector == 0) {
                icon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (icon_buf__selector == 1) {
                icon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for icon_buf_ has to be chosen through deserialisation.")
            }
            icon_buf = (icon_buf_ as string | Resource)
        }
        const icon_result : string | Resource | undefined = icon_buf
        const action_result : VoidCallback = valueDeserializer.readVoidCallback()
        let value : SheetInfo = ({title: title_result, icon: icon_result, action: action_result} as SheetInfo)
        return value
    }
    readSheetTitleOptions(): SheetTitleOptions {
        let valueDeserializer : Deserializer = this
        const title_buf_selector : int32 = valueDeserializer.readInt8()
        let title_buf : string | Resource | undefined
        if (title_buf_selector == 0) {
            title_buf = (valueDeserializer.readString() as string)
        }
        else if (title_buf_selector == 1) {
            title_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for title_buf has to be chosen through deserialisation.")
        }
        const title_result : ResourceStr = (title_buf as string | Resource)
        const subtitle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let subtitle_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (subtitle_buf_runtimeType))
        {
            const subtitle_buf__selector : int32 = valueDeserializer.readInt8()
            let subtitle_buf_ : string | Resource | undefined
            if (subtitle_buf__selector == 0) {
                subtitle_buf_ = (valueDeserializer.readString() as string)
            }
            else if (subtitle_buf__selector == 1) {
                subtitle_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for subtitle_buf_ has to be chosen through deserialisation.")
            }
            subtitle_buf = (subtitle_buf_ as string | Resource)
        }
        const subtitle_result : ResourceStr | undefined = subtitle_buf
        let value : SheetTitleOptions = ({title: title_result, subtitle: subtitle_result} as SheetTitleOptions)
        return value
    }
    readSliderBlockStyle(): SliderBlockStyle {
        let valueDeserializer : Deserializer = this
        const type_result : SliderBlockType = TypeChecker.SliderBlockType_FromNumeric(valueDeserializer.readInt32())
        const image_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let image_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (image_buf_runtimeType))
        {
            const image_buf__selector : int32 = valueDeserializer.readInt8()
            let image_buf_ : string | Resource | undefined
            if (image_buf__selector == 0) {
                image_buf_ = (valueDeserializer.readString() as string)
            }
            else if (image_buf__selector == 1) {
                image_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for image_buf_ has to be chosen through deserialisation.")
            }
            image_buf = (image_buf_ as string | Resource)
        }
        const image_result : ResourceStr | undefined = image_buf
        const shape_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shape_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (shape_buf_runtimeType))
        {
            shape_buf = (valueDeserializer.readString() as string)
        }
        const shape_result : string | undefined = shape_buf
        let value : SliderBlockStyle = ({type: type_result, image: image_result, shape: shape_result} as SliderBlockStyle)
        return value
    }
    readStyledStringChangeValue(): StyledStringChangeValue {
        let valueDeserializer : Deserializer = this
        const range_result : TextRange = valueDeserializer.readTextRange()
        const replacementString_result : StyledString = (valueDeserializer.readStyledString() as StyledString)
        const previewText_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewText_buf : StyledString | undefined
        if ((RuntimeType.UNDEFINED) != (previewText_buf_runtimeType))
        {
            previewText_buf = (valueDeserializer.readStyledString() as StyledString)
        }
        const previewText_result : StyledString | undefined = previewText_buf
        let value : StyledStringChangeValue = ({range: range_result, replacementString: replacementString_result, previewText: previewText_result} as StyledStringChangeValue)
        return value
    }
    readSwipeActionOptions(): SwipeActionOptions {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : CustomBuilder | SwipeActionItem | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            const start_buf__selector : int32 = valueDeserializer.readInt8()
            let start_buf_ : CustomBuilder | SwipeActionItem | undefined
            if (start_buf__selector == 0) {
                start_buf_ = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
            }
            else if (start_buf__selector == 1) {
                start_buf_ = valueDeserializer.readSwipeActionItem()
            }
            else {
                throw new Error("One of the branches for start_buf_ has to be chosen through deserialisation.")
            }
            start_buf = (start_buf_ as CustomBuilder | SwipeActionItem)
        }
        const start_result : CustomBuilder | SwipeActionItem | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : CustomBuilder | SwipeActionItem | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            const end_buf__selector : int32 = valueDeserializer.readInt8()
            let end_buf_ : CustomBuilder | SwipeActionItem | undefined
            if (end_buf__selector == 0) {
                end_buf_ = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
            }
            else if (end_buf__selector == 1) {
                end_buf_ = valueDeserializer.readSwipeActionItem()
            }
            else {
                throw new Error("One of the branches for end_buf_ has to be chosen through deserialisation.")
            }
            end_buf = (end_buf_ as CustomBuilder | SwipeActionItem)
        }
        const end_result : CustomBuilder | SwipeActionItem | undefined = end_buf
        const edgeEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let edgeEffect_buf : SwipeEdgeEffect | undefined
        if ((RuntimeType.UNDEFINED) != (edgeEffect_buf_runtimeType))
        {
            edgeEffect_buf = TypeChecker.SwipeEdgeEffect_FromNumeric(valueDeserializer.readInt32())
        }
        const edgeEffect_result : SwipeEdgeEffect | undefined = edgeEffect_buf
        const onOffsetChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onOffsetChange_buf : ((index: number) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onOffsetChange_buf_runtimeType))
        {
            onOffsetChange_buf = valueDeserializer.readCallback_Number_Void()
        }
        const onOffsetChange_result : ((index: number) => void) | undefined = onOffsetChange_buf
        let value : SwipeActionOptions = ({start: start_result, end: end_result, edgeEffect: edgeEffect_result, onOffsetChange: onOffsetChange_result} as SwipeActionOptions)
        return value
    }
    readSwipeGestureEvent(): SwipeGestureEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return SwipeGestureEventInternal.fromPtr(ptr)
    }
    readSwitchStyle(): SwitchStyle {
        let valueDeserializer : Deserializer = this
        const pointRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let pointRadius_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (pointRadius_buf_runtimeType))
        {
            const pointRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let pointRadius_buf_ : number | Resource | undefined
            if (pointRadius_buf__selector == 0) {
                pointRadius_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (pointRadius_buf__selector == 1) {
                pointRadius_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for pointRadius_buf_ has to be chosen through deserialisation.")
            }
            pointRadius_buf = (pointRadius_buf_ as number | Resource)
        }
        const pointRadius_result : number | Resource | undefined = pointRadius_buf
        const unselectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let unselectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (unselectedColor_buf_runtimeType))
        {
            const unselectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let unselectedColor_buf_ : Color | number | string | Resource | undefined
            if (unselectedColor_buf__selector == 0) {
                unselectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (unselectedColor_buf__selector == 1) {
                unselectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (unselectedColor_buf__selector == 2) {
                unselectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (unselectedColor_buf__selector == 3) {
                unselectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for unselectedColor_buf_ has to be chosen through deserialisation.")
            }
            unselectedColor_buf = (unselectedColor_buf_ as Color | number | string | Resource)
        }
        const unselectedColor_result : ResourceColor | undefined = unselectedColor_buf
        const pointColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let pointColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (pointColor_buf_runtimeType))
        {
            const pointColor_buf__selector : int32 = valueDeserializer.readInt8()
            let pointColor_buf_ : Color | number | string | Resource | undefined
            if (pointColor_buf__selector == 0) {
                pointColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (pointColor_buf__selector == 1) {
                pointColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (pointColor_buf__selector == 2) {
                pointColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (pointColor_buf__selector == 3) {
                pointColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for pointColor_buf_ has to be chosen through deserialisation.")
            }
            pointColor_buf = (pointColor_buf_ as Color | number | string | Resource)
        }
        const pointColor_result : ResourceColor | undefined = pointColor_buf
        const trackBorderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let trackBorderRadius_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (trackBorderRadius_buf_runtimeType))
        {
            const trackBorderRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let trackBorderRadius_buf_ : number | Resource | undefined
            if (trackBorderRadius_buf__selector == 0) {
                trackBorderRadius_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (trackBorderRadius_buf__selector == 1) {
                trackBorderRadius_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for trackBorderRadius_buf_ has to be chosen through deserialisation.")
            }
            trackBorderRadius_buf = (trackBorderRadius_buf_ as number | Resource)
        }
        const trackBorderRadius_result : number | Resource | undefined = trackBorderRadius_buf
        let value : SwitchStyle = ({pointRadius: pointRadius_result, unselectedColor: unselectedColor_result, pointColor: pointColor_result, trackBorderRadius: trackBorderRadius_result} as SwitchStyle)
        return value
    }
    readTabBarIconStyle(): TabBarIconStyle {
        let valueDeserializer : Deserializer = this
        const selectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (selectedColor_buf_runtimeType))
        {
            const selectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let selectedColor_buf_ : Color | number | string | Resource | undefined
            if (selectedColor_buf__selector == 0) {
                selectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (selectedColor_buf__selector == 1) {
                selectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (selectedColor_buf__selector == 2) {
                selectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (selectedColor_buf__selector == 3) {
                selectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for selectedColor_buf_ has to be chosen through deserialisation.")
            }
            selectedColor_buf = (selectedColor_buf_ as Color | number | string | Resource)
        }
        const selectedColor_result : ResourceColor | undefined = selectedColor_buf
        const unselectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let unselectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (unselectedColor_buf_runtimeType))
        {
            const unselectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let unselectedColor_buf_ : Color | number | string | Resource | undefined
            if (unselectedColor_buf__selector == 0) {
                unselectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (unselectedColor_buf__selector == 1) {
                unselectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (unselectedColor_buf__selector == 2) {
                unselectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (unselectedColor_buf__selector == 3) {
                unselectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for unselectedColor_buf_ has to be chosen through deserialisation.")
            }
            unselectedColor_buf = (unselectedColor_buf_ as Color | number | string | Resource)
        }
        const unselectedColor_result : ResourceColor | undefined = unselectedColor_buf
        let value : TabBarIconStyle = ({selectedColor: selectedColor_result, unselectedColor: unselectedColor_result} as TabBarIconStyle)
        return value
    }
    readTabBarOptions(): TabBarOptions {
        let valueDeserializer : Deserializer = this
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            const icon_buf__selector : int32 = valueDeserializer.readInt8()
            let icon_buf_ : string | Resource | undefined
            if (icon_buf__selector == 0) {
                icon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (icon_buf__selector == 1) {
                icon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for icon_buf_ has to be chosen through deserialisation.")
            }
            icon_buf = (icon_buf_ as string | Resource)
        }
        const icon_result : string | Resource | undefined = icon_buf
        const text_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let text_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (text_buf_runtimeType))
        {
            const text_buf__selector : int32 = valueDeserializer.readInt8()
            let text_buf_ : string | Resource | undefined
            if (text_buf__selector == 0) {
                text_buf_ = (valueDeserializer.readString() as string)
            }
            else if (text_buf__selector == 1) {
                text_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for text_buf_ has to be chosen through deserialisation.")
            }
            text_buf = (text_buf_ as string | Resource)
        }
        const text_result : string | Resource | undefined = text_buf
        let value : TabBarOptions = ({icon: icon_result, text: text_result} as TabBarOptions)
        return value
    }
    readTabsOptions(): TabsOptions {
        let valueDeserializer : Deserializer = this
        const barPosition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let barPosition_buf : BarPosition | undefined
        if ((RuntimeType.UNDEFINED) != (barPosition_buf_runtimeType))
        {
            barPosition_buf = TypeChecker.BarPosition_FromNumeric(valueDeserializer.readInt32())
        }
        const barPosition_result : BarPosition | undefined = barPosition_buf
        const index_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let index_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (index_buf_runtimeType))
        {
            index_buf = (valueDeserializer.readNumber() as number)
        }
        const index_result : number | undefined = index_buf
        const controller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let controller_buf : TabsController | undefined
        if ((RuntimeType.UNDEFINED) != (controller_buf_runtimeType))
        {
            controller_buf = (valueDeserializer.readTabsController() as TabsController)
        }
        const controller_result : TabsController | undefined = controller_buf
        const barModifier_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let barModifier_buf : CommonModifier | undefined
        if ((RuntimeType.UNDEFINED) != (barModifier_buf_runtimeType))
        {
            barModifier_buf = valueDeserializer.readCommonModifier()
        }
        const barModifier_result : CommonModifier | undefined = barModifier_buf
        let value : TabsOptions = ({barPosition: barPosition_result, index: index_result, controller: controller_result, barModifier: barModifier_result} as TabsOptions)
        return value
    }
    readTapGestureEvent(): TapGestureEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TapGestureEventInternal.fromPtr(ptr)
    }
    readTerminationInfo(): TerminationInfo {
        let valueDeserializer : Deserializer = this
        const code_result : number = (valueDeserializer.readNumber() as number)
        const want_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let want_buf : Want | undefined
        if ((RuntimeType.UNDEFINED) != (want_buf_runtimeType))
        {
            want_buf = valueDeserializer.readWant()
        }
        const want_result : Want | undefined = want_buf
        let value : TerminationInfo = ({code: code_result, want: want_result} as TerminationInfo)
        return value
    }
    readTextAreaOptions(): TextAreaOptions {
        let valueDeserializer : Deserializer = this
        const placeholder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placeholder_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (placeholder_buf_runtimeType))
        {
            const placeholder_buf__selector : int32 = valueDeserializer.readInt8()
            let placeholder_buf_ : string | Resource | undefined
            if (placeholder_buf__selector == 0) {
                placeholder_buf_ = (valueDeserializer.readString() as string)
            }
            else if (placeholder_buf__selector == 1) {
                placeholder_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for placeholder_buf_ has to be chosen through deserialisation.")
            }
            placeholder_buf = (placeholder_buf_ as string | Resource)
        }
        const placeholder_result : ResourceStr | undefined = placeholder_buf
        const text_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let text_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (text_buf_runtimeType))
        {
            const text_buf__selector : int32 = valueDeserializer.readInt8()
            let text_buf_ : string | Resource | undefined
            if (text_buf__selector == 0) {
                text_buf_ = (valueDeserializer.readString() as string)
            }
            else if (text_buf__selector == 1) {
                text_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for text_buf_ has to be chosen through deserialisation.")
            }
            text_buf = (text_buf_ as string | Resource)
        }
        const text_result : ResourceStr | undefined = text_buf
        const controller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let controller_buf : TextAreaController | undefined
        if ((RuntimeType.UNDEFINED) != (controller_buf_runtimeType))
        {
            controller_buf = (valueDeserializer.readTextAreaController() as TextAreaController)
        }
        const controller_result : TextAreaController | undefined = controller_buf
        let value : TextAreaOptions = ({placeholder: placeholder_result, text: text_result, controller: controller_result} as TextAreaOptions)
        return value
    }
    readTextBackgroundStyle(): TextBackgroundStyle {
        let valueDeserializer : Deserializer = this
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : Dimension | BorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            const radius_buf__selector : int32 = valueDeserializer.readInt8()
            let radius_buf_ : Dimension | BorderRadiuses | undefined
            if (radius_buf__selector == 0) {
                radius_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (radius_buf__selector == 1) {
                radius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for radius_buf_ has to be chosen through deserialisation.")
            }
            radius_buf = (radius_buf_ as Dimension | BorderRadiuses)
        }
        const radius_result : Dimension | BorderRadiuses | undefined = radius_buf
        let value : TextBackgroundStyle = ({color: color_result, radius: radius_result} as TextBackgroundStyle)
        return value
    }
    readTextCascadePickerRangeContent(): TextCascadePickerRangeContent {
        let valueDeserializer : Deserializer = this
        const text_buf_selector : int32 = valueDeserializer.readInt8()
        let text_buf : string | Resource | undefined
        if (text_buf_selector == 0) {
            text_buf = (valueDeserializer.readString() as string)
        }
        else if (text_buf_selector == 1) {
            text_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for text_buf has to be chosen through deserialisation.")
        }
        const text_result : string | Resource = (text_buf as string | Resource)
        const children_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let children_buf : Array<TextCascadePickerRangeContent> | undefined
        if ((RuntimeType.UNDEFINED) != (children_buf_runtimeType))
        {
            const children_buf__length : int32 = valueDeserializer.readInt32()
            let children_buf_ : Array<TextCascadePickerRangeContent> = new Array<TextCascadePickerRangeContent>(children_buf__length)
            for (let children_buf__i = 0; children_buf__i < children_buf__length; children_buf__i++) {
                children_buf_[children_buf__i] = valueDeserializer.readTextCascadePickerRangeContent()
            }
            children_buf = children_buf_
        }
        const children_result : Array<TextCascadePickerRangeContent> | undefined = children_buf
        let value : TextCascadePickerRangeContent = ({text: text_result, children: children_result} as TextCascadePickerRangeContent)
        return value
    }
    readTextChangeOptions(): TextChangeOptions {
        let valueDeserializer : Deserializer = this
        const rangeBefore_result : TextRange = valueDeserializer.readTextRange()
        const rangeAfter_result : TextRange = valueDeserializer.readTextRange()
        const oldContent_result : string = (valueDeserializer.readString() as string)
        const oldPreviewText_result : PreviewText = valueDeserializer.readPreviewText()
        let value : TextChangeOptions = ({rangeBefore: rangeBefore_result, rangeAfter: rangeAfter_result, oldContent: oldContent_result, oldPreviewText: oldPreviewText_result} as TextChangeOptions)
        return value
    }
    readTextDecorationOptions(): TextDecorationOptions {
        let valueDeserializer : Deserializer = this
        const type_result : TextDecorationType = TypeChecker.TextDecorationType_FromNumeric(valueDeserializer.readInt32())
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : TextDecorationStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.TextDecorationStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : TextDecorationStyle | undefined = style_buf
        let value : TextDecorationOptions = ({type: type_result, color: color_result, style: style_result} as TextDecorationOptions)
        return value
    }
    readTextInputOptions(): TextInputOptions {
        let valueDeserializer : Deserializer = this
        const placeholder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placeholder_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (placeholder_buf_runtimeType))
        {
            const placeholder_buf__selector : int32 = valueDeserializer.readInt8()
            let placeholder_buf_ : string | Resource | undefined
            if (placeholder_buf__selector == 0) {
                placeholder_buf_ = (valueDeserializer.readString() as string)
            }
            else if (placeholder_buf__selector == 1) {
                placeholder_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for placeholder_buf_ has to be chosen through deserialisation.")
            }
            placeholder_buf = (placeholder_buf_ as string | Resource)
        }
        const placeholder_result : ResourceStr | undefined = placeholder_buf
        const text_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let text_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (text_buf_runtimeType))
        {
            const text_buf__selector : int32 = valueDeserializer.readInt8()
            let text_buf_ : string | Resource | undefined
            if (text_buf__selector == 0) {
                text_buf_ = (valueDeserializer.readString() as string)
            }
            else if (text_buf__selector == 1) {
                text_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for text_buf_ has to be chosen through deserialisation.")
            }
            text_buf = (text_buf_ as string | Resource)
        }
        const text_result : ResourceStr | undefined = text_buf
        const controller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let controller_buf : TextInputController | undefined
        if ((RuntimeType.UNDEFINED) != (controller_buf_runtimeType))
        {
            controller_buf = (valueDeserializer.readTextInputController() as TextInputController)
        }
        const controller_result : TextInputController | undefined = controller_buf
        let value : TextInputOptions = ({placeholder: placeholder_result, text: text_result, controller: controller_result} as TextInputOptions)
        return value
    }
    readTextMenuItem(): TextMenuItem {
        let valueDeserializer : Deserializer = this
        const content_buf_selector : int32 = valueDeserializer.readInt8()
        let content_buf : string | Resource | undefined
        if (content_buf_selector == 0) {
            content_buf = (valueDeserializer.readString() as string)
        }
        else if (content_buf_selector == 1) {
            content_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for content_buf has to be chosen through deserialisation.")
        }
        const content_result : ResourceStr = (content_buf as string | Resource)
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            const icon_buf__selector : int32 = valueDeserializer.readInt8()
            let icon_buf_ : string | Resource | undefined
            if (icon_buf__selector == 0) {
                icon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (icon_buf__selector == 1) {
                icon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for icon_buf_ has to be chosen through deserialisation.")
            }
            icon_buf = (icon_buf_ as string | Resource)
        }
        const icon_result : ResourceStr | undefined = icon_buf
        const id_result : TextMenuItemId = (valueDeserializer.readTextMenuItemId() as TextMenuItemId)
        const labelInfo_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let labelInfo_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (labelInfo_buf_runtimeType))
        {
            const labelInfo_buf__selector : int32 = valueDeserializer.readInt8()
            let labelInfo_buf_ : string | Resource | undefined
            if (labelInfo_buf__selector == 0) {
                labelInfo_buf_ = (valueDeserializer.readString() as string)
            }
            else if (labelInfo_buf__selector == 1) {
                labelInfo_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for labelInfo_buf_ has to be chosen through deserialisation.")
            }
            labelInfo_buf = (labelInfo_buf_ as string | Resource)
        }
        const labelInfo_result : ResourceStr | undefined = labelInfo_buf
        let value : TextMenuItem = ({content: content_result, icon: icon_result, id: id_result, labelInfo: labelInfo_result} as TextMenuItem)
        return value
    }
    readTextPickerOptions(): TextPickerOptions {
        let valueDeserializer : Deserializer = this
        const range_buf_selector : int32 = valueDeserializer.readInt8()
        let range_buf : Array<string> | Array<Array<string>> | Resource | Array<TextPickerRangeContent> | Array<TextCascadePickerRangeContent> | undefined
        if (range_buf_selector == 0) {
            const range_buf_u_length : int32 = valueDeserializer.readInt32()
            let range_buf_u : Array<string> = new Array<string>(range_buf_u_length)
            for (let range_buf_u_i = 0; range_buf_u_i < range_buf_u_length; range_buf_u_i++) {
                range_buf_u[range_buf_u_i] = (valueDeserializer.readString() as string)
            }
            range_buf = range_buf_u
        }
        else if (range_buf_selector == 1) {
            const range_buf_u_length : int32 = valueDeserializer.readInt32()
            let range_buf_u : Array<Array<string>> = new Array<Array<string>>(range_buf_u_length)
            for (let range_buf_u_i = 0; range_buf_u_i < range_buf_u_length; range_buf_u_i++) {
                const range_buf_u_buf_length : int32 = valueDeserializer.readInt32()
                let range_buf_u_buf : Array<string> = new Array<string>(range_buf_u_buf_length)
                for (let range_buf_u_buf_i = 0; range_buf_u_buf_i < range_buf_u_buf_length; range_buf_u_buf_i++) {
                    range_buf_u_buf[range_buf_u_buf_i] = (valueDeserializer.readString() as string)
                }
                range_buf_u[range_buf_u_i] = range_buf_u_buf
            }
            range_buf = range_buf_u
        }
        else if (range_buf_selector == 2) {
            range_buf = valueDeserializer.readResource()
        }
        else if (range_buf_selector == 3) {
            const range_buf_u_length : int32 = valueDeserializer.readInt32()
            let range_buf_u : Array<TextPickerRangeContent> = new Array<TextPickerRangeContent>(range_buf_u_length)
            for (let range_buf_u_i = 0; range_buf_u_i < range_buf_u_length; range_buf_u_i++) {
                range_buf_u[range_buf_u_i] = valueDeserializer.readTextPickerRangeContent()
            }
            range_buf = range_buf_u
        }
        else if (range_buf_selector == 4) {
            const range_buf_u_length : int32 = valueDeserializer.readInt32()
            let range_buf_u : Array<TextCascadePickerRangeContent> = new Array<TextCascadePickerRangeContent>(range_buf_u_length)
            for (let range_buf_u_i = 0; range_buf_u_i < range_buf_u_length; range_buf_u_i++) {
                range_buf_u[range_buf_u_i] = valueDeserializer.readTextCascadePickerRangeContent()
            }
            range_buf = range_buf_u
        }
        else {
            throw new Error("One of the branches for range_buf has to be chosen through deserialisation.")
        }
        const range_result : Array<string> | Array<Array<string>> | Resource | Array<TextPickerRangeContent> | Array<TextCascadePickerRangeContent> = (range_buf as Array<string> | Array<Array<string>> | Resource | Array<TextPickerRangeContent> | Array<TextCascadePickerRangeContent>)
        const value_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let value_buf : string | Array<string> | undefined
        if ((RuntimeType.UNDEFINED) != (value_buf_runtimeType))
        {
            const value_buf__selector : int32 = valueDeserializer.readInt8()
            let value_buf_ : string | Array<string> | undefined
            if (value_buf__selector == 0) {
                value_buf_ = (valueDeserializer.readString() as string)
            }
            else if (value_buf__selector == 1) {
                const value_buf__u_length : int32 = valueDeserializer.readInt32()
                let value_buf__u : Array<string> = new Array<string>(value_buf__u_length)
                for (let value_buf__u_i = 0; value_buf__u_i < value_buf__u_length; value_buf__u_i++) {
                    value_buf__u[value_buf__u_i] = (valueDeserializer.readString() as string)
                }
                value_buf_ = value_buf__u
            }
            else {
                throw new Error("One of the branches for value_buf_ has to be chosen through deserialisation.")
            }
            value_buf = (value_buf_ as string | Array<string>)
        }
        const value_result : string | Array<string> | undefined = value_buf
        const selected_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selected_buf : number | Array<number> | undefined
        if ((RuntimeType.UNDEFINED) != (selected_buf_runtimeType))
        {
            const selected_buf__selector : int32 = valueDeserializer.readInt8()
            let selected_buf_ : number | Array<number> | undefined
            if (selected_buf__selector == 0) {
                selected_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (selected_buf__selector == 1) {
                const selected_buf__u_length : int32 = valueDeserializer.readInt32()
                let selected_buf__u : Array<number> = new Array<number>(selected_buf__u_length)
                for (let selected_buf__u_i = 0; selected_buf__u_i < selected_buf__u_length; selected_buf__u_i++) {
                    selected_buf__u[selected_buf__u_i] = (valueDeserializer.readNumber() as number)
                }
                selected_buf_ = selected_buf__u
            }
            else {
                throw new Error("One of the branches for selected_buf_ has to be chosen through deserialisation.")
            }
            selected_buf = (selected_buf_ as number | Array<number>)
        }
        const selected_result : number | Array<number> | undefined = selected_buf
        const columnWidths_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let columnWidths_buf : Array<LengthMetrics> | undefined
        if ((RuntimeType.UNDEFINED) != (columnWidths_buf_runtimeType))
        {
            const columnWidths_buf__length : int32 = valueDeserializer.readInt32()
            let columnWidths_buf_ : Array<LengthMetrics> = new Array<LengthMetrics>(columnWidths_buf__length)
            for (let columnWidths_buf__i = 0; columnWidths_buf__i < columnWidths_buf__length; columnWidths_buf__i++) {
                columnWidths_buf_[columnWidths_buf__i] = (valueDeserializer.readLengthMetrics() as LengthMetrics)
            }
            columnWidths_buf = columnWidths_buf_
        }
        const columnWidths_result : Array<LengthMetrics> | undefined = columnWidths_buf
        let value : TextPickerOptions = ({range: range_result, value: value_result, selected: selected_result, columnWidths: columnWidths_result} as TextPickerOptions)
        return value
    }
    readTextPickerRangeContent(): TextPickerRangeContent {
        let valueDeserializer : Deserializer = this
        const icon_buf_selector : int32 = valueDeserializer.readInt8()
        let icon_buf : string | Resource | undefined
        if (icon_buf_selector == 0) {
            icon_buf = (valueDeserializer.readString() as string)
        }
        else if (icon_buf_selector == 1) {
            icon_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for icon_buf has to be chosen through deserialisation.")
        }
        const icon_result : string | Resource = (icon_buf as string | Resource)
        const text_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let text_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (text_buf_runtimeType))
        {
            const text_buf__selector : int32 = valueDeserializer.readInt8()
            let text_buf_ : string | Resource | undefined
            if (text_buf__selector == 0) {
                text_buf_ = (valueDeserializer.readString() as string)
            }
            else if (text_buf__selector == 1) {
                text_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for text_buf_ has to be chosen through deserialisation.")
            }
            text_buf = (text_buf_ as string | Resource)
        }
        const text_result : string | Resource | undefined = text_buf
        let value : TextPickerRangeContent = ({icon: icon_result, text: text_result} as TextPickerRangeContent)
        return value
    }
    readTextPickerResult(): TextPickerResult {
        let valueDeserializer : Deserializer = this
        const value_buf_selector : int32 = valueDeserializer.readInt8()
        let value_buf : string | Array<string> | undefined
        if (value_buf_selector == 0) {
            value_buf = (valueDeserializer.readString() as string)
        }
        else if (value_buf_selector == 1) {
            const value_buf_u_length : int32 = valueDeserializer.readInt32()
            let value_buf_u : Array<string> = new Array<string>(value_buf_u_length)
            for (let value_buf_u_i = 0; value_buf_u_i < value_buf_u_length; value_buf_u_i++) {
                value_buf_u[value_buf_u_i] = (valueDeserializer.readString() as string)
            }
            value_buf = value_buf_u
        }
        else {
            throw new Error("One of the branches for value_buf has to be chosen through deserialisation.")
        }
        const value_result : string | Array<string> = (value_buf as string | Array<string>)
        const index_buf_selector : int32 = valueDeserializer.readInt8()
        let index_buf : number | Array<number> | undefined
        if (index_buf_selector == 0) {
            index_buf = (valueDeserializer.readNumber() as number)
        }
        else if (index_buf_selector == 1) {
            const index_buf_u_length : int32 = valueDeserializer.readInt32()
            let index_buf_u : Array<number> = new Array<number>(index_buf_u_length)
            for (let index_buf_u_i = 0; index_buf_u_i < index_buf_u_length; index_buf_u_i++) {
                index_buf_u[index_buf_u_i] = (valueDeserializer.readNumber() as number)
            }
            index_buf = index_buf_u
        }
        else {
            throw new Error("One of the branches for index_buf has to be chosen through deserialisation.")
        }
        const index_result : number | Array<number> = (index_buf as number | Array<number>)
        let value : TextPickerResult = ({value: value_result, index: index_result} as TextPickerResult)
        return value
    }
    readTextStyle_styled_string(): TextStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TextStyle_styled_stringInternal.fromPtr(ptr)
    }
    readTextStyleInterface(): TextStyleInterface {
        let valueDeserializer : Deserializer = this
        const fontColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontColor_buf_runtimeType))
        {
            const fontColor_buf__selector : int32 = valueDeserializer.readInt8()
            let fontColor_buf_ : Color | number | string | Resource | undefined
            if (fontColor_buf__selector == 0) {
                fontColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontColor_buf__selector == 1) {
                fontColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontColor_buf__selector == 2) {
                fontColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontColor_buf__selector == 3) {
                fontColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontColor_buf_ has to be chosen through deserialisation.")
            }
            fontColor_buf = (fontColor_buf_ as Color | number | string | Resource)
        }
        const fontColor_result : ResourceColor | undefined = fontColor_buf
        const fontFamily_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontFamily_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (fontFamily_buf_runtimeType))
        {
            const fontFamily_buf__selector : int32 = valueDeserializer.readInt8()
            let fontFamily_buf_ : string | Resource | undefined
            if (fontFamily_buf__selector == 0) {
                fontFamily_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontFamily_buf__selector == 1) {
                fontFamily_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontFamily_buf_ has to be chosen through deserialisation.")
            }
            fontFamily_buf = (fontFamily_buf_ as string | Resource)
        }
        const fontFamily_result : ResourceStr | undefined = fontFamily_buf
        const fontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontSize_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (fontSize_buf_runtimeType))
        {
            fontSize_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const fontSize_result : LengthMetrics | undefined = fontSize_buf
        const fontWeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontWeight_buf : number | FontWeight | string | undefined
        if ((RuntimeType.UNDEFINED) != (fontWeight_buf_runtimeType))
        {
            const fontWeight_buf__selector : int32 = valueDeserializer.readInt8()
            let fontWeight_buf_ : number | FontWeight | string | undefined
            if (fontWeight_buf__selector == 0) {
                fontWeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontWeight_buf__selector == 1) {
                fontWeight_buf_ = TypeChecker.FontWeight_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontWeight_buf__selector == 2) {
                fontWeight_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for fontWeight_buf_ has to be chosen through deserialisation.")
            }
            fontWeight_buf = (fontWeight_buf_ as number | FontWeight | string)
        }
        const fontWeight_result : number | FontWeight | string | undefined = fontWeight_buf
        const fontStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontStyle_buf : FontStyle | undefined
        if ((RuntimeType.UNDEFINED) != (fontStyle_buf_runtimeType))
        {
            fontStyle_buf = TypeChecker.FontStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const fontStyle_result : FontStyle | undefined = fontStyle_buf
        let value : TextStyleInterface = ({fontColor: fontColor_result, fontFamily: fontFamily_result, fontSize: fontSize_result, fontWeight: fontWeight_result, fontStyle: fontStyle_result} as TextStyleInterface)
        return value
    }
    readTodayStyle(): TodayStyle {
        let valueDeserializer : Deserializer = this
        const focusedDayColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let focusedDayColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (focusedDayColor_buf_runtimeType))
        {
            const focusedDayColor_buf__selector : int32 = valueDeserializer.readInt8()
            let focusedDayColor_buf_ : Color | number | string | Resource | undefined
            if (focusedDayColor_buf__selector == 0) {
                focusedDayColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (focusedDayColor_buf__selector == 1) {
                focusedDayColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (focusedDayColor_buf__selector == 2) {
                focusedDayColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (focusedDayColor_buf__selector == 3) {
                focusedDayColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for focusedDayColor_buf_ has to be chosen through deserialisation.")
            }
            focusedDayColor_buf = (focusedDayColor_buf_ as Color | number | string | Resource)
        }
        const focusedDayColor_result : ResourceColor | undefined = focusedDayColor_buf
        const focusedLunarColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let focusedLunarColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (focusedLunarColor_buf_runtimeType))
        {
            const focusedLunarColor_buf__selector : int32 = valueDeserializer.readInt8()
            let focusedLunarColor_buf_ : Color | number | string | Resource | undefined
            if (focusedLunarColor_buf__selector == 0) {
                focusedLunarColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (focusedLunarColor_buf__selector == 1) {
                focusedLunarColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (focusedLunarColor_buf__selector == 2) {
                focusedLunarColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (focusedLunarColor_buf__selector == 3) {
                focusedLunarColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for focusedLunarColor_buf_ has to be chosen through deserialisation.")
            }
            focusedLunarColor_buf = (focusedLunarColor_buf_ as Color | number | string | Resource)
        }
        const focusedLunarColor_result : ResourceColor | undefined = focusedLunarColor_buf
        const focusedAreaBackgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let focusedAreaBackgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (focusedAreaBackgroundColor_buf_runtimeType))
        {
            const focusedAreaBackgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let focusedAreaBackgroundColor_buf_ : Color | number | string | Resource | undefined
            if (focusedAreaBackgroundColor_buf__selector == 0) {
                focusedAreaBackgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (focusedAreaBackgroundColor_buf__selector == 1) {
                focusedAreaBackgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (focusedAreaBackgroundColor_buf__selector == 2) {
                focusedAreaBackgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (focusedAreaBackgroundColor_buf__selector == 3) {
                focusedAreaBackgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for focusedAreaBackgroundColor_buf_ has to be chosen through deserialisation.")
            }
            focusedAreaBackgroundColor_buf = (focusedAreaBackgroundColor_buf_ as Color | number | string | Resource)
        }
        const focusedAreaBackgroundColor_result : ResourceColor | undefined = focusedAreaBackgroundColor_buf
        const focusedAreaRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let focusedAreaRadius_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (focusedAreaRadius_buf_runtimeType))
        {
            focusedAreaRadius_buf = (valueDeserializer.readNumber() as number)
        }
        const focusedAreaRadius_result : number | undefined = focusedAreaRadius_buf
        let value : TodayStyle = ({focusedDayColor: focusedDayColor_result, focusedLunarColor: focusedLunarColor_result, focusedAreaBackgroundColor: focusedAreaBackgroundColor_result, focusedAreaRadius: focusedAreaRadius_result} as TodayStyle)
        return value
    }
    readToolbarItem(): ToolbarItem {
        let valueDeserializer : Deserializer = this
        const value_buf_selector : int32 = valueDeserializer.readInt8()
        let value_buf : string | Resource | undefined
        if (value_buf_selector == 0) {
            value_buf = (valueDeserializer.readString() as string)
        }
        else if (value_buf_selector == 1) {
            value_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for value_buf has to be chosen through deserialisation.")
        }
        const value_result : ResourceStr = (value_buf as string | Resource)
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            const icon_buf__selector : int32 = valueDeserializer.readInt8()
            let icon_buf_ : string | Resource | undefined
            if (icon_buf__selector == 0) {
                icon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (icon_buf__selector == 1) {
                icon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for icon_buf_ has to be chosen through deserialisation.")
            }
            icon_buf = (icon_buf_ as string | Resource)
        }
        const icon_result : ResourceStr | undefined = icon_buf
        const symbolIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let symbolIcon_buf : SymbolGlyphModifier | undefined
        if ((RuntimeType.UNDEFINED) != (symbolIcon_buf_runtimeType))
        {
            symbolIcon_buf = valueDeserializer.readSymbolGlyphModifier()
        }
        const symbolIcon_result : SymbolGlyphModifier | undefined = symbolIcon_buf
        const action_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let action_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (action_buf_runtimeType))
        {
            action_buf = valueDeserializer.readCallback_Void()
        }
        const action_result : (() => void) | undefined = action_buf
        const status_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let status_buf : ToolbarItemStatus | undefined
        if ((RuntimeType.UNDEFINED) != (status_buf_runtimeType))
        {
            status_buf = TypeChecker.ToolbarItemStatus_FromNumeric(valueDeserializer.readInt32())
        }
        const status_result : ToolbarItemStatus | undefined = status_buf
        const activeIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let activeIcon_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (activeIcon_buf_runtimeType))
        {
            const activeIcon_buf__selector : int32 = valueDeserializer.readInt8()
            let activeIcon_buf_ : string | Resource | undefined
            if (activeIcon_buf__selector == 0) {
                activeIcon_buf_ = (valueDeserializer.readString() as string)
            }
            else if (activeIcon_buf__selector == 1) {
                activeIcon_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for activeIcon_buf_ has to be chosen through deserialisation.")
            }
            activeIcon_buf = (activeIcon_buf_ as string | Resource)
        }
        const activeIcon_result : ResourceStr | undefined = activeIcon_buf
        const activeSymbolIcon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let activeSymbolIcon_buf : SymbolGlyphModifier | undefined
        if ((RuntimeType.UNDEFINED) != (activeSymbolIcon_buf_runtimeType))
        {
            activeSymbolIcon_buf = valueDeserializer.readSymbolGlyphModifier()
        }
        const activeSymbolIcon_result : SymbolGlyphModifier | undefined = activeSymbolIcon_buf
        let value : ToolbarItem = ({value: value_result, icon: icon_result, symbolIcon: symbolIcon_result, action: action_result, status: status_result, activeIcon: activeIcon_result, activeSymbolIcon: activeSymbolIcon_result} as ToolbarItem)
        return value
    }
    readTouchEvent(): TouchEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return TouchEventInternal.fromPtr(ptr)
    }
    readTransitionOptions(): TransitionOptions {
        let valueDeserializer : Deserializer = this
        const type_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let type_buf : TransitionType | undefined
        if ((RuntimeType.UNDEFINED) != (type_buf_runtimeType))
        {
            type_buf = TypeChecker.TransitionType_FromNumeric(valueDeserializer.readInt32())
        }
        const type_result : TransitionType | undefined = type_buf
        const opacity_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let opacity_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (opacity_buf_runtimeType))
        {
            opacity_buf = (valueDeserializer.readNumber() as number)
        }
        const opacity_result : number | undefined = opacity_buf
        const translate_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let translate_buf : TranslateOptions | undefined
        if ((RuntimeType.UNDEFINED) != (translate_buf_runtimeType))
        {
            translate_buf = valueDeserializer.readTranslateOptions()
        }
        const translate_result : TranslateOptions | undefined = translate_buf
        const scale_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scale_buf : ScaleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (scale_buf_runtimeType))
        {
            scale_buf = valueDeserializer.readScaleOptions()
        }
        const scale_result : ScaleOptions | undefined = scale_buf
        const rotate_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let rotate_buf : RotateOptions | undefined
        if ((RuntimeType.UNDEFINED) != (rotate_buf_runtimeType))
        {
            rotate_buf = valueDeserializer.readRotateOptions()
        }
        const rotate_result : RotateOptions | undefined = rotate_buf
        let value : TransitionOptions = ({type: type_result, opacity: opacity_result, translate: translate_result, scale: scale_result, rotate: rotate_result} as TransitionOptions)
        return value
    }
    readUnderlineColor(): UnderlineColor {
        let valueDeserializer : Deserializer = this
        const typing_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let typing_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (typing_buf_runtimeType))
        {
            const typing_buf__selector : int32 = valueDeserializer.readInt8()
            let typing_buf_ : Color | number | string | Resource | undefined
            if (typing_buf__selector == 0) {
                typing_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (typing_buf__selector == 1) {
                typing_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (typing_buf__selector == 2) {
                typing_buf_ = (valueDeserializer.readString() as string)
            }
            else if (typing_buf__selector == 3) {
                typing_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for typing_buf_ has to be chosen through deserialisation.")
            }
            typing_buf = (typing_buf_ as Color | number | string | Resource)
        }
        const typing_result : ResourceColor | undefined = typing_buf
        const normal_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let normal_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (normal_buf_runtimeType))
        {
            const normal_buf__selector : int32 = valueDeserializer.readInt8()
            let normal_buf_ : Color | number | string | Resource | undefined
            if (normal_buf__selector == 0) {
                normal_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (normal_buf__selector == 1) {
                normal_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (normal_buf__selector == 2) {
                normal_buf_ = (valueDeserializer.readString() as string)
            }
            else if (normal_buf__selector == 3) {
                normal_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for normal_buf_ has to be chosen through deserialisation.")
            }
            normal_buf = (normal_buf_ as Color | number | string | Resource)
        }
        const normal_result : ResourceColor | undefined = normal_buf
        const error_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let error_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (error_buf_runtimeType))
        {
            const error_buf__selector : int32 = valueDeserializer.readInt8()
            let error_buf_ : Color | number | string | Resource | undefined
            if (error_buf__selector == 0) {
                error_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (error_buf__selector == 1) {
                error_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (error_buf__selector == 2) {
                error_buf_ = (valueDeserializer.readString() as string)
            }
            else if (error_buf__selector == 3) {
                error_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for error_buf_ has to be chosen through deserialisation.")
            }
            error_buf = (error_buf_ as Color | number | string | Resource)
        }
        const error_result : ResourceColor | undefined = error_buf
        const disable_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disable_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (disable_buf_runtimeType))
        {
            const disable_buf__selector : int32 = valueDeserializer.readInt8()
            let disable_buf_ : Color | number | string | Resource | undefined
            if (disable_buf__selector == 0) {
                disable_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (disable_buf__selector == 1) {
                disable_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (disable_buf__selector == 2) {
                disable_buf_ = (valueDeserializer.readString() as string)
            }
            else if (disable_buf__selector == 3) {
                disable_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for disable_buf_ has to be chosen through deserialisation.")
            }
            disable_buf = (disable_buf_ as Color | number | string | Resource)
        }
        const disable_result : ResourceColor | undefined = disable_buf
        let value : UnderlineColor = ({typing: typing_result, normal: normal_result, error: error_result, disable: disable_result} as UnderlineColor)
        return value
    }
    readVideoOptions(): VideoOptions {
        let valueDeserializer : Deserializer = this
        const src_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let src_buf : string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (src_buf_runtimeType))
        {
            const src_buf__selector : int32 = valueDeserializer.readInt8()
            let src_buf_ : string | Resource | undefined
            if (src_buf__selector == 0) {
                src_buf_ = (valueDeserializer.readString() as string)
            }
            else if (src_buf__selector == 1) {
                src_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for src_buf_ has to be chosen through deserialisation.")
            }
            src_buf = (src_buf_ as string | Resource)
        }
        const src_result : string | Resource | undefined = src_buf
        const currentProgressRate_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let currentProgressRate_buf : number | string | PlaybackSpeed | undefined
        if ((RuntimeType.UNDEFINED) != (currentProgressRate_buf_runtimeType))
        {
            const currentProgressRate_buf__selector : int32 = valueDeserializer.readInt8()
            let currentProgressRate_buf_ : number | string | PlaybackSpeed | undefined
            if (currentProgressRate_buf__selector == 0) {
                currentProgressRate_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (currentProgressRate_buf__selector == 1) {
                currentProgressRate_buf_ = (valueDeserializer.readString() as string)
            }
            else if (currentProgressRate_buf__selector == 2) {
                currentProgressRate_buf_ = TypeChecker.PlaybackSpeed_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for currentProgressRate_buf_ has to be chosen through deserialisation.")
            }
            currentProgressRate_buf = (currentProgressRate_buf_ as number | string | PlaybackSpeed)
        }
        const currentProgressRate_result : number | string | PlaybackSpeed | undefined = currentProgressRate_buf
        const previewUri_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewUri_buf : string | PixelMap | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (previewUri_buf_runtimeType))
        {
            const previewUri_buf__selector : int32 = valueDeserializer.readInt8()
            let previewUri_buf_ : string | PixelMap | Resource | undefined
            if (previewUri_buf__selector == 0) {
                previewUri_buf_ = (valueDeserializer.readString() as string)
            }
            else if (previewUri_buf__selector == 1) {
                previewUri_buf_ = (valueDeserializer.readPixelMap() as PixelMap)
            }
            else if (previewUri_buf__selector == 2) {
                previewUri_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for previewUri_buf_ has to be chosen through deserialisation.")
            }
            previewUri_buf = (previewUri_buf_ as string | PixelMap | Resource)
        }
        const previewUri_result : string | PixelMap | Resource | undefined = previewUri_buf
        const controller_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let controller_buf : VideoController | undefined
        if ((RuntimeType.UNDEFINED) != (controller_buf_runtimeType))
        {
            controller_buf = (valueDeserializer.readVideoController() as VideoController)
        }
        const controller_result : VideoController | undefined = controller_buf
        const imageAIOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let imageAIOptions_buf : ImageAIOptions | undefined
        if ((RuntimeType.UNDEFINED) != (imageAIOptions_buf_runtimeType))
        {
            imageAIOptions_buf = valueDeserializer.readImageAIOptions()
        }
        const imageAIOptions_result : ImageAIOptions | undefined = imageAIOptions_buf
        const posterOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let posterOptions_buf : PosterOptions | undefined
        if ((RuntimeType.UNDEFINED) != (posterOptions_buf_runtimeType))
        {
            posterOptions_buf = valueDeserializer.readPosterOptions()
        }
        const posterOptions_result : PosterOptions | undefined = posterOptions_buf
        let value : VideoOptions = ({src: src_result, currentProgressRate: currentProgressRate_result, previewUri: previewUri_result, controller: controller_result, imageAIOptions: imageAIOptions_result, posterOptions: posterOptions_result} as VideoOptions)
        return value
    }
    readWeekStyle(): WeekStyle {
        let valueDeserializer : Deserializer = this
        const weekColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let weekColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (weekColor_buf_runtimeType))
        {
            const weekColor_buf__selector : int32 = valueDeserializer.readInt8()
            let weekColor_buf_ : Color | number | string | Resource | undefined
            if (weekColor_buf__selector == 0) {
                weekColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (weekColor_buf__selector == 1) {
                weekColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (weekColor_buf__selector == 2) {
                weekColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (weekColor_buf__selector == 3) {
                weekColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for weekColor_buf_ has to be chosen through deserialisation.")
            }
            weekColor_buf = (weekColor_buf_ as Color | number | string | Resource)
        }
        const weekColor_result : ResourceColor | undefined = weekColor_buf
        const weekendDayColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let weekendDayColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (weekendDayColor_buf_runtimeType))
        {
            const weekendDayColor_buf__selector : int32 = valueDeserializer.readInt8()
            let weekendDayColor_buf_ : Color | number | string | Resource | undefined
            if (weekendDayColor_buf__selector == 0) {
                weekendDayColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (weekendDayColor_buf__selector == 1) {
                weekendDayColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (weekendDayColor_buf__selector == 2) {
                weekendDayColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (weekendDayColor_buf__selector == 3) {
                weekendDayColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for weekendDayColor_buf_ has to be chosen through deserialisation.")
            }
            weekendDayColor_buf = (weekendDayColor_buf_ as Color | number | string | Resource)
        }
        const weekendDayColor_result : ResourceColor | undefined = weekendDayColor_buf
        const weekendLunarColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let weekendLunarColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (weekendLunarColor_buf_runtimeType))
        {
            const weekendLunarColor_buf__selector : int32 = valueDeserializer.readInt8()
            let weekendLunarColor_buf_ : Color | number | string | Resource | undefined
            if (weekendLunarColor_buf__selector == 0) {
                weekendLunarColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (weekendLunarColor_buf__selector == 1) {
                weekendLunarColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (weekendLunarColor_buf__selector == 2) {
                weekendLunarColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (weekendLunarColor_buf__selector == 3) {
                weekendLunarColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for weekendLunarColor_buf_ has to be chosen through deserialisation.")
            }
            weekendLunarColor_buf = (weekendLunarColor_buf_ as Color | number | string | Resource)
        }
        const weekendLunarColor_result : ResourceColor | undefined = weekendLunarColor_buf
        const weekFontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let weekFontSize_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (weekFontSize_buf_runtimeType))
        {
            weekFontSize_buf = (valueDeserializer.readNumber() as number)
        }
        const weekFontSize_result : number | undefined = weekFontSize_buf
        const weekHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let weekHeight_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (weekHeight_buf_runtimeType))
        {
            weekHeight_buf = (valueDeserializer.readNumber() as number)
        }
        const weekHeight_result : number | undefined = weekHeight_buf
        const weekWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let weekWidth_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (weekWidth_buf_runtimeType))
        {
            weekWidth_buf = (valueDeserializer.readNumber() as number)
        }
        const weekWidth_result : number | undefined = weekWidth_buf
        const weekAndDayRowSpace_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let weekAndDayRowSpace_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (weekAndDayRowSpace_buf_runtimeType))
        {
            weekAndDayRowSpace_buf = (valueDeserializer.readNumber() as number)
        }
        const weekAndDayRowSpace_result : number | undefined = weekAndDayRowSpace_buf
        let value : WeekStyle = ({weekColor: weekColor_result, weekendDayColor: weekendDayColor_result, weekendLunarColor: weekendLunarColor_result, weekFontSize: weekFontSize_result, weekHeight: weekHeight_result, weekWidth: weekWidth_result, weekAndDayRowSpace: weekAndDayRowSpace_result} as WeekStyle)
        return value
    }
    readWorkStateStyle(): WorkStateStyle {
        let valueDeserializer : Deserializer = this
        const workDayMarkColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let workDayMarkColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (workDayMarkColor_buf_runtimeType))
        {
            const workDayMarkColor_buf__selector : int32 = valueDeserializer.readInt8()
            let workDayMarkColor_buf_ : Color | number | string | Resource | undefined
            if (workDayMarkColor_buf__selector == 0) {
                workDayMarkColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (workDayMarkColor_buf__selector == 1) {
                workDayMarkColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (workDayMarkColor_buf__selector == 2) {
                workDayMarkColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (workDayMarkColor_buf__selector == 3) {
                workDayMarkColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for workDayMarkColor_buf_ has to be chosen through deserialisation.")
            }
            workDayMarkColor_buf = (workDayMarkColor_buf_ as Color | number | string | Resource)
        }
        const workDayMarkColor_result : ResourceColor | undefined = workDayMarkColor_buf
        const offDayMarkColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offDayMarkColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (offDayMarkColor_buf_runtimeType))
        {
            const offDayMarkColor_buf__selector : int32 = valueDeserializer.readInt8()
            let offDayMarkColor_buf_ : Color | number | string | Resource | undefined
            if (offDayMarkColor_buf__selector == 0) {
                offDayMarkColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (offDayMarkColor_buf__selector == 1) {
                offDayMarkColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (offDayMarkColor_buf__selector == 2) {
                offDayMarkColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (offDayMarkColor_buf__selector == 3) {
                offDayMarkColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for offDayMarkColor_buf_ has to be chosen through deserialisation.")
            }
            offDayMarkColor_buf = (offDayMarkColor_buf_ as Color | number | string | Resource)
        }
        const offDayMarkColor_result : ResourceColor | undefined = offDayMarkColor_buf
        const workDayMarkSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let workDayMarkSize_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (workDayMarkSize_buf_runtimeType))
        {
            workDayMarkSize_buf = (valueDeserializer.readNumber() as number)
        }
        const workDayMarkSize_result : number | undefined = workDayMarkSize_buf
        const offDayMarkSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offDayMarkSize_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (offDayMarkSize_buf_runtimeType))
        {
            offDayMarkSize_buf = (valueDeserializer.readNumber() as number)
        }
        const offDayMarkSize_result : number | undefined = offDayMarkSize_buf
        const workStateWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let workStateWidth_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (workStateWidth_buf_runtimeType))
        {
            workStateWidth_buf = (valueDeserializer.readNumber() as number)
        }
        const workStateWidth_result : number | undefined = workStateWidth_buf
        const workStateHorizontalMovingDistance_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let workStateHorizontalMovingDistance_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (workStateHorizontalMovingDistance_buf_runtimeType))
        {
            workStateHorizontalMovingDistance_buf = (valueDeserializer.readNumber() as number)
        }
        const workStateHorizontalMovingDistance_result : number | undefined = workStateHorizontalMovingDistance_buf
        const workStateVerticalMovingDistance_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let workStateVerticalMovingDistance_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (workStateVerticalMovingDistance_buf_runtimeType))
        {
            workStateVerticalMovingDistance_buf = (valueDeserializer.readNumber() as number)
        }
        const workStateVerticalMovingDistance_result : number | undefined = workStateVerticalMovingDistance_buf
        let value : WorkStateStyle = ({workDayMarkColor: workDayMarkColor_result, offDayMarkColor: offDayMarkColor_result, workDayMarkSize: workDayMarkSize_result, offDayMarkSize: offDayMarkSize_result, workStateWidth: workStateWidth_result, workStateHorizontalMovingDistance: workStateHorizontalMovingDistance_result, workStateVerticalMovingDistance: workStateVerticalMovingDistance_result} as WorkStateStyle)
        return value
    }
    readXComponentOptions(): XComponentOptions {
        let valueDeserializer : Deserializer = this
        const type_result : XComponentType = TypeChecker.XComponentType_FromNumeric(valueDeserializer.readInt32())
        const controller_result : XComponentController = (valueDeserializer.readXComponentController() as XComponentController)
        const imageAIOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let imageAIOptions_buf : ImageAIOptions | undefined
        if ((RuntimeType.UNDEFINED) != (imageAIOptions_buf_runtimeType))
        {
            imageAIOptions_buf = valueDeserializer.readImageAIOptions()
        }
        const imageAIOptions_result : ImageAIOptions | undefined = imageAIOptions_buf
        const screenId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let screenId_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (screenId_buf_runtimeType))
        {
            screenId_buf = (valueDeserializer.readNumber() as number)
        }
        const screenId_result : number | undefined = screenId_buf
        let value : XComponentOptions = ({type: type_result, controller: controller_result, imageAIOptions: imageAIOptions_result, screenId: screenId_result} as XComponentOptions)
        return value
    }
    readAccessibilityHoverEvent(): AccessibilityHoverEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return AccessibilityHoverEventInternal.fromPtr(ptr)
    }
    readActionSheetOptions(): ActionSheetOptions {
        let valueDeserializer : Deserializer = this
        const title_buf_selector : int32 = valueDeserializer.readInt8()
        let title_buf : string | Resource | undefined
        if (title_buf_selector == 0) {
            title_buf = (valueDeserializer.readString() as string)
        }
        else if (title_buf_selector == 1) {
            title_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for title_buf has to be chosen through deserialisation.")
        }
        const title_result : string | Resource = (title_buf as string | Resource)
        const subtitle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let subtitle_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (subtitle_buf_runtimeType))
        {
            const subtitle_buf__selector : int32 = valueDeserializer.readInt8()
            let subtitle_buf_ : string | Resource | undefined
            if (subtitle_buf__selector == 0) {
                subtitle_buf_ = (valueDeserializer.readString() as string)
            }
            else if (subtitle_buf__selector == 1) {
                subtitle_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for subtitle_buf_ has to be chosen through deserialisation.")
            }
            subtitle_buf = (subtitle_buf_ as string | Resource)
        }
        const subtitle_result : ResourceStr | undefined = subtitle_buf
        const message_buf_selector : int32 = valueDeserializer.readInt8()
        let message_buf : string | Resource | undefined
        if (message_buf_selector == 0) {
            message_buf = (valueDeserializer.readString() as string)
        }
        else if (message_buf_selector == 1) {
            message_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for message_buf has to be chosen through deserialisation.")
        }
        const message_result : string | Resource = (message_buf as string | Resource)
        const confirm_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let confirm_buf : ActionSheetButtonOptions | undefined
        if ((RuntimeType.UNDEFINED) != (confirm_buf_runtimeType))
        {
            confirm_buf = valueDeserializer.readActionSheetButtonOptions()
        }
        const confirm_result : ActionSheetButtonOptions | undefined = confirm_buf
        const cancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cancel_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (cancel_buf_runtimeType))
        {
            cancel_buf = valueDeserializer.readVoidCallback()
        }
        const cancel_result : VoidCallback | undefined = cancel_buf
        const sheets_buf_length : int32 = valueDeserializer.readInt32()
        let sheets_buf : Array<SheetInfo> = new Array<SheetInfo>(sheets_buf_length)
        for (let sheets_buf_i = 0; sheets_buf_i < sheets_buf_length; sheets_buf_i++) {
            sheets_buf[sheets_buf_i] = valueDeserializer.readSheetInfo()
        }
        const sheets_result : Array<SheetInfo> = sheets_buf
        const autoCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let autoCancel_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (autoCancel_buf_runtimeType))
        {
            autoCancel_buf = valueDeserializer.readBoolean()
        }
        const autoCancel_result : boolean | undefined = autoCancel_buf
        const alignment_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignment_buf : DialogAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (alignment_buf_runtimeType))
        {
            alignment_buf = TypeChecker.DialogAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const alignment_result : DialogAlignment | undefined = alignment_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : ActionSheetOffset | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readActionSheetOffset()
        }
        const offset_result : ActionSheetOffset | undefined = offset_buf
        const maskRect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskRect_buf : Rectangle | undefined
        if ((RuntimeType.UNDEFINED) != (maskRect_buf_runtimeType))
        {
            maskRect_buf = valueDeserializer.readRectangle()
        }
        const maskRect_result : Rectangle | undefined = maskRect_buf
        const showInSubWindow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showInSubWindow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showInSubWindow_buf_runtimeType))
        {
            showInSubWindow_buf = valueDeserializer.readBoolean()
        }
        const showInSubWindow_result : boolean | undefined = showInSubWindow_buf
        const isModal_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isModal_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isModal_buf_runtimeType))
        {
            isModal_buf = valueDeserializer.readBoolean()
        }
        const isModal_result : boolean | undefined = isModal_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const onWillDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDismiss_buf : ((parameter: DismissDialogAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDismiss_buf_runtimeType))
        {
            onWillDismiss_buf = valueDeserializer.readCallback_DismissDialogAction_Void()
        }
        const onWillDismiss_result : ((parameter: DismissDialogAction) => void) | undefined = onWillDismiss_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        const cornerRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cornerRadius_buf : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (cornerRadius_buf_runtimeType))
        {
            const cornerRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let cornerRadius_buf_ : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined
            if (cornerRadius_buf__selector == 0) {
                cornerRadius_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (cornerRadius_buf__selector == 1) {
                cornerRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (cornerRadius_buf__selector == 2) {
                cornerRadius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for cornerRadius_buf_ has to be chosen through deserialisation.")
            }
            cornerRadius_buf = (cornerRadius_buf_ as Dimension | BorderRadiuses | LocalizedBorderRadiuses)
        }
        const cornerRadius_result : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined = cornerRadius_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Dimension)
        }
        const width_result : Dimension | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readLength() as Dimension)
        }
        const height_result : Dimension | undefined = height_buf
        const borderWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderWidth_buf : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (borderWidth_buf_runtimeType))
        {
            const borderWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let borderWidth_buf_ : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
            if (borderWidth_buf__selector == 0) {
                borderWidth_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (borderWidth_buf__selector == 1) {
                borderWidth_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (borderWidth_buf__selector == 2) {
                borderWidth_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for borderWidth_buf_ has to be chosen through deserialisation.")
            }
            borderWidth_buf = (borderWidth_buf_ as Dimension | EdgeWidths | LocalizedEdgeWidths)
        }
        const borderWidth_result : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined = borderWidth_buf
        const borderColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderColor_buf : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (borderColor_buf_runtimeType))
        {
            const borderColor_buf__selector : int32 = valueDeserializer.readInt8()
            let borderColor_buf_ : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
            if (borderColor_buf__selector == 0) {
                const borderColor_buf__u_selector : int32 = valueDeserializer.readInt8()
                let borderColor_buf__u : Color | number | string | Resource | undefined
                if (borderColor_buf__u_selector == 0) {
                    borderColor_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (borderColor_buf__u_selector == 1) {
                    borderColor_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (borderColor_buf__u_selector == 2) {
                    borderColor_buf__u = (valueDeserializer.readString() as string)
                }
                else if (borderColor_buf__u_selector == 3) {
                    borderColor_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for borderColor_buf__u has to be chosen through deserialisation.")
                }
                borderColor_buf_ = (borderColor_buf__u as Color | number | string | Resource)
            }
            else if (borderColor_buf__selector == 1) {
                borderColor_buf_ = valueDeserializer.readEdgeColors()
            }
            else if (borderColor_buf__selector == 2) {
                borderColor_buf_ = valueDeserializer.readLocalizedEdgeColors()
            }
            else {
                throw new Error("One of the branches for borderColor_buf_ has to be chosen through deserialisation.")
            }
            borderColor_buf = (borderColor_buf_ as ResourceColor | EdgeColors | LocalizedEdgeColors)
        }
        const borderColor_result : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined = borderColor_buf
        const borderStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderStyle_buf : BorderStyle | EdgeStyles | undefined
        if ((RuntimeType.UNDEFINED) != (borderStyle_buf_runtimeType))
        {
            const borderStyle_buf__selector : int32 = valueDeserializer.readInt8()
            let borderStyle_buf_ : BorderStyle | EdgeStyles | undefined
            if (borderStyle_buf__selector == 0) {
                borderStyle_buf_ = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else if (borderStyle_buf__selector == 1) {
                borderStyle_buf_ = valueDeserializer.readEdgeStyles()
            }
            else {
                throw new Error("One of the branches for borderStyle_buf_ has to be chosen through deserialisation.")
            }
            borderStyle_buf = (borderStyle_buf_ as BorderStyle | EdgeStyles)
        }
        const borderStyle_result : BorderStyle | EdgeStyles | undefined = borderStyle_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const onDidAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidAppear_buf_runtimeType))
        {
            onDidAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidAppear_result : (() => void) | undefined = onDidAppear_buf
        const onDidDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidDisappear_buf_runtimeType))
        {
            onDidDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidDisappear_result : (() => void) | undefined = onDidDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillAppear_result : (() => void) | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillDisappear_result : (() => void) | undefined = onWillDisappear_buf
        const levelMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelMode_buf : LevelMode | undefined
        if ((RuntimeType.UNDEFINED) != (levelMode_buf_runtimeType))
        {
            levelMode_buf = valueDeserializer.readLevelMode()
        }
        const levelMode_result : LevelMode | undefined = levelMode_buf
        const levelUniqueId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelUniqueId_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (levelUniqueId_buf_runtimeType))
        {
            levelUniqueId_buf = (valueDeserializer.readNumber() as number)
        }
        const levelUniqueId_result : number | undefined = levelUniqueId_buf
        const immersiveMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let immersiveMode_buf : ImmersiveMode | undefined
        if ((RuntimeType.UNDEFINED) != (immersiveMode_buf_runtimeType))
        {
            immersiveMode_buf = valueDeserializer.readImmersiveMode()
        }
        const immersiveMode_result : ImmersiveMode | undefined = immersiveMode_buf
        const levelOrder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelOrder_buf : LevelOrder | undefined
        if ((RuntimeType.UNDEFINED) != (levelOrder_buf_runtimeType))
        {
            levelOrder_buf = valueDeserializer.readLevelOrder()
        }
        const levelOrder_result : LevelOrder | undefined = levelOrder_buf
        let value : ActionSheetOptions = ({title: title_result, subtitle: subtitle_result, message: message_result, confirm: confirm_result, cancel: cancel_result, sheets: sheets_result, autoCancel: autoCancel_result, alignment: alignment_result, offset: offset_result, maskRect: maskRect_result, showInSubWindow: showInSubWindow_result, isModal: isModal_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, onWillDismiss: onWillDismiss_result, transition: transition_result, cornerRadius: cornerRadius_result, width: width_result, height: height_result, borderWidth: borderWidth_result, borderColor: borderColor_result, borderStyle: borderStyle_result, shadow: shadow_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, onDidAppear: onDidAppear_result, onDidDisappear: onDidDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, levelMode: levelMode_result, levelUniqueId: levelUniqueId_result, immersiveMode: immersiveMode_result, levelOrder: levelOrder_result} as ActionSheetOptions)
        return value
    }
    readShowToastOptions(): promptAction.ShowToastOptions {
        let valueDeserializer : Deserializer = this
        const message_buf_selector : int32 = valueDeserializer.readInt8()
        let message_buf : string | Resource | undefined
        if (message_buf_selector == 0) {
            message_buf = (valueDeserializer.readString() as string)
        }
        else if (message_buf_selector == 1) {
            message_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for message_buf has to be chosen through deserialisation.")
        }
        const message_result : ResourceStr = (message_buf as string | Resource)
        let value : promptAction.ShowToastOptions = ({message: message_result } as promptAction.ShowToastOptions)
        return value
    }
    readAlertDialogParamWithButtons(): AlertDialogParamWithButtons {
        let valueDeserializer : Deserializer = this
        const title_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let title_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (title_buf_runtimeType))
        {
            const title_buf__selector : int32 = valueDeserializer.readInt8()
            let title_buf_ : string | Resource | undefined
            if (title_buf__selector == 0) {
                title_buf_ = (valueDeserializer.readString() as string)
            }
            else if (title_buf__selector == 1) {
                title_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for title_buf_ has to be chosen through deserialisation.")
            }
            title_buf = (title_buf_ as string | Resource)
        }
        const title_result : ResourceStr | undefined = title_buf
        const subtitle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let subtitle_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (subtitle_buf_runtimeType))
        {
            const subtitle_buf__selector : int32 = valueDeserializer.readInt8()
            let subtitle_buf_ : string | Resource | undefined
            if (subtitle_buf__selector == 0) {
                subtitle_buf_ = (valueDeserializer.readString() as string)
            }
            else if (subtitle_buf__selector == 1) {
                subtitle_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for subtitle_buf_ has to be chosen through deserialisation.")
            }
            subtitle_buf = (subtitle_buf_ as string | Resource)
        }
        const subtitle_result : ResourceStr | undefined = subtitle_buf
        const message_buf_selector : int32 = valueDeserializer.readInt8()
        let message_buf : string | Resource | undefined
        if (message_buf_selector == 0) {
            message_buf = (valueDeserializer.readString() as string)
        }
        else if (message_buf_selector == 1) {
            message_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for message_buf has to be chosen through deserialisation.")
        }
        const message_result : ResourceStr = (message_buf as string | Resource)
        const autoCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let autoCancel_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (autoCancel_buf_runtimeType))
        {
            autoCancel_buf = valueDeserializer.readBoolean()
        }
        const autoCancel_result : boolean | undefined = autoCancel_buf
        const cancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cancel_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (cancel_buf_runtimeType))
        {
            cancel_buf = valueDeserializer.readVoidCallback()
        }
        const cancel_result : VoidCallback | undefined = cancel_buf
        const alignment_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignment_buf : DialogAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (alignment_buf_runtimeType))
        {
            alignment_buf = TypeChecker.DialogAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const alignment_result : DialogAlignment | undefined = alignment_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Offset | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readOffset()
        }
        const offset_result : Offset | undefined = offset_buf
        const gridCount_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gridCount_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (gridCount_buf_runtimeType))
        {
            gridCount_buf = (valueDeserializer.readNumber() as number)
        }
        const gridCount_result : number | undefined = gridCount_buf
        const maskRect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskRect_buf : Rectangle | undefined
        if ((RuntimeType.UNDEFINED) != (maskRect_buf_runtimeType))
        {
            maskRect_buf = valueDeserializer.readRectangle()
        }
        const maskRect_result : Rectangle | undefined = maskRect_buf
        const showInSubWindow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showInSubWindow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showInSubWindow_buf_runtimeType))
        {
            showInSubWindow_buf = valueDeserializer.readBoolean()
        }
        const showInSubWindow_result : boolean | undefined = showInSubWindow_buf
        const isModal_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isModal_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isModal_buf_runtimeType))
        {
            isModal_buf = valueDeserializer.readBoolean()
        }
        const isModal_result : boolean | undefined = isModal_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const onWillDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDismiss_buf : ((parameter: DismissDialogAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDismiss_buf_runtimeType))
        {
            onWillDismiss_buf = valueDeserializer.readCallback_DismissDialogAction_Void()
        }
        const onWillDismiss_result : ((parameter: DismissDialogAction) => void) | undefined = onWillDismiss_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        const cornerRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cornerRadius_buf : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (cornerRadius_buf_runtimeType))
        {
            const cornerRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let cornerRadius_buf_ : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined
            if (cornerRadius_buf__selector == 0) {
                cornerRadius_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (cornerRadius_buf__selector == 1) {
                cornerRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (cornerRadius_buf__selector == 2) {
                cornerRadius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for cornerRadius_buf_ has to be chosen through deserialisation.")
            }
            cornerRadius_buf = (cornerRadius_buf_ as Dimension | BorderRadiuses | LocalizedBorderRadiuses)
        }
        const cornerRadius_result : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined = cornerRadius_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Dimension)
        }
        const width_result : Dimension | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readLength() as Dimension)
        }
        const height_result : Dimension | undefined = height_buf
        const borderWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderWidth_buf : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (borderWidth_buf_runtimeType))
        {
            const borderWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let borderWidth_buf_ : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
            if (borderWidth_buf__selector == 0) {
                borderWidth_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (borderWidth_buf__selector == 1) {
                borderWidth_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (borderWidth_buf__selector == 2) {
                borderWidth_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for borderWidth_buf_ has to be chosen through deserialisation.")
            }
            borderWidth_buf = (borderWidth_buf_ as Dimension | EdgeWidths | LocalizedEdgeWidths)
        }
        const borderWidth_result : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined = borderWidth_buf
        const borderColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderColor_buf : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (borderColor_buf_runtimeType))
        {
            const borderColor_buf__selector : int32 = valueDeserializer.readInt8()
            let borderColor_buf_ : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
            if (borderColor_buf__selector == 0) {
                const borderColor_buf__u_selector : int32 = valueDeserializer.readInt8()
                let borderColor_buf__u : Color | number | string | Resource | undefined
                if (borderColor_buf__u_selector == 0) {
                    borderColor_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (borderColor_buf__u_selector == 1) {
                    borderColor_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (borderColor_buf__u_selector == 2) {
                    borderColor_buf__u = (valueDeserializer.readString() as string)
                }
                else if (borderColor_buf__u_selector == 3) {
                    borderColor_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for borderColor_buf__u has to be chosen through deserialisation.")
                }
                borderColor_buf_ = (borderColor_buf__u as Color | number | string | Resource)
            }
            else if (borderColor_buf__selector == 1) {
                borderColor_buf_ = valueDeserializer.readEdgeColors()
            }
            else if (borderColor_buf__selector == 2) {
                borderColor_buf_ = valueDeserializer.readLocalizedEdgeColors()
            }
            else {
                throw new Error("One of the branches for borderColor_buf_ has to be chosen through deserialisation.")
            }
            borderColor_buf = (borderColor_buf_ as ResourceColor | EdgeColors | LocalizedEdgeColors)
        }
        const borderColor_result : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined = borderColor_buf
        const borderStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderStyle_buf : BorderStyle | EdgeStyles | undefined
        if ((RuntimeType.UNDEFINED) != (borderStyle_buf_runtimeType))
        {
            const borderStyle_buf__selector : int32 = valueDeserializer.readInt8()
            let borderStyle_buf_ : BorderStyle | EdgeStyles | undefined
            if (borderStyle_buf__selector == 0) {
                borderStyle_buf_ = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else if (borderStyle_buf__selector == 1) {
                borderStyle_buf_ = valueDeserializer.readEdgeStyles()
            }
            else {
                throw new Error("One of the branches for borderStyle_buf_ has to be chosen through deserialisation.")
            }
            borderStyle_buf = (borderStyle_buf_ as BorderStyle | EdgeStyles)
        }
        const borderStyle_result : BorderStyle | EdgeStyles | undefined = borderStyle_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const textStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textStyle_buf : TextStyle_alert_dialog | undefined
        if ((RuntimeType.UNDEFINED) != (textStyle_buf_runtimeType))
        {
            textStyle_buf = valueDeserializer.readTextStyle_alert_dialog()
        }
        const textStyle_result : TextStyle_alert_dialog | undefined = textStyle_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const onDidAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidAppear_buf_runtimeType))
        {
            onDidAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidAppear_result : (() => void) | undefined = onDidAppear_buf
        const onDidDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidDisappear_buf_runtimeType))
        {
            onDidDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidDisappear_result : (() => void) | undefined = onDidDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillAppear_result : (() => void) | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillDisappear_result : (() => void) | undefined = onWillDisappear_buf
        const levelMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelMode_buf : LevelMode | undefined
        if ((RuntimeType.UNDEFINED) != (levelMode_buf_runtimeType))
        {
            levelMode_buf = valueDeserializer.readLevelMode()
        }
        const levelMode_result : LevelMode | undefined = levelMode_buf
        const levelUniqueId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelUniqueId_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (levelUniqueId_buf_runtimeType))
        {
            levelUniqueId_buf = (valueDeserializer.readNumber() as number)
        }
        const levelUniqueId_result : number | undefined = levelUniqueId_buf
        const immersiveMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let immersiveMode_buf : ImmersiveMode | undefined
        if ((RuntimeType.UNDEFINED) != (immersiveMode_buf_runtimeType))
        {
            immersiveMode_buf = valueDeserializer.readImmersiveMode()
        }
        const immersiveMode_result : ImmersiveMode | undefined = immersiveMode_buf
        const levelOrder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelOrder_buf : LevelOrder | undefined
        if ((RuntimeType.UNDEFINED) != (levelOrder_buf_runtimeType))
        {
            levelOrder_buf = valueDeserializer.readLevelOrder()
        }
        const levelOrder_result : LevelOrder | undefined = levelOrder_buf
        const primaryButton_result : AlertDialogButtonBaseOptions = valueDeserializer.readAlertDialogButtonBaseOptions()
        const secondaryButton_result : AlertDialogButtonBaseOptions = valueDeserializer.readAlertDialogButtonBaseOptions()
        let value : AlertDialogParamWithButtons = ({title: title_result, subtitle: subtitle_result, message: message_result, autoCancel: autoCancel_result, cancel: cancel_result, alignment: alignment_result, offset: offset_result, gridCount: gridCount_result, maskRect: maskRect_result, showInSubWindow: showInSubWindow_result, isModal: isModal_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, onWillDismiss: onWillDismiss_result, transition: transition_result, cornerRadius: cornerRadius_result, width: width_result, height: height_result, borderWidth: borderWidth_result, borderColor: borderColor_result, borderStyle: borderStyle_result, shadow: shadow_result, textStyle: textStyle_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, onDidAppear: onDidAppear_result, onDidDisappear: onDidDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, levelMode: levelMode_result, levelUniqueId: levelUniqueId_result, immersiveMode: immersiveMode_result, levelOrder: levelOrder_result, primaryButton: primaryButton_result, secondaryButton: secondaryButton_result} as AlertDialogParamWithButtons)
        return value
    }
    readAlertDialogParamWithConfirm(): AlertDialogParamWithConfirm {
        let valueDeserializer : Deserializer = this
        const title_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let title_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (title_buf_runtimeType))
        {
            const title_buf__selector : int32 = valueDeserializer.readInt8()
            let title_buf_ : string | Resource | undefined
            if (title_buf__selector == 0) {
                title_buf_ = (valueDeserializer.readString() as string)
            }
            else if (title_buf__selector == 1) {
                title_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for title_buf_ has to be chosen through deserialisation.")
            }
            title_buf = (title_buf_ as string | Resource)
        }
        const title_result : ResourceStr | undefined = title_buf
        const subtitle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let subtitle_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (subtitle_buf_runtimeType))
        {
            const subtitle_buf__selector : int32 = valueDeserializer.readInt8()
            let subtitle_buf_ : string | Resource | undefined
            if (subtitle_buf__selector == 0) {
                subtitle_buf_ = (valueDeserializer.readString() as string)
            }
            else if (subtitle_buf__selector == 1) {
                subtitle_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for subtitle_buf_ has to be chosen through deserialisation.")
            }
            subtitle_buf = (subtitle_buf_ as string | Resource)
        }
        const subtitle_result : ResourceStr | undefined = subtitle_buf
        const message_buf_selector : int32 = valueDeserializer.readInt8()
        let message_buf : string | Resource | undefined
        if (message_buf_selector == 0) {
            message_buf = (valueDeserializer.readString() as string)
        }
        else if (message_buf_selector == 1) {
            message_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for message_buf has to be chosen through deserialisation.")
        }
        const message_result : ResourceStr = (message_buf as string | Resource)
        const autoCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let autoCancel_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (autoCancel_buf_runtimeType))
        {
            autoCancel_buf = valueDeserializer.readBoolean()
        }
        const autoCancel_result : boolean | undefined = autoCancel_buf
        const cancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cancel_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (cancel_buf_runtimeType))
        {
            cancel_buf = valueDeserializer.readVoidCallback()
        }
        const cancel_result : VoidCallback | undefined = cancel_buf
        const alignment_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignment_buf : DialogAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (alignment_buf_runtimeType))
        {
            alignment_buf = TypeChecker.DialogAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const alignment_result : DialogAlignment | undefined = alignment_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Offset | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readOffset()
        }
        const offset_result : Offset | undefined = offset_buf
        const gridCount_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gridCount_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (gridCount_buf_runtimeType))
        {
            gridCount_buf = (valueDeserializer.readNumber() as number)
        }
        const gridCount_result : number | undefined = gridCount_buf
        const maskRect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskRect_buf : Rectangle | undefined
        if ((RuntimeType.UNDEFINED) != (maskRect_buf_runtimeType))
        {
            maskRect_buf = valueDeserializer.readRectangle()
        }
        const maskRect_result : Rectangle | undefined = maskRect_buf
        const showInSubWindow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showInSubWindow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showInSubWindow_buf_runtimeType))
        {
            showInSubWindow_buf = valueDeserializer.readBoolean()
        }
        const showInSubWindow_result : boolean | undefined = showInSubWindow_buf
        const isModal_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isModal_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isModal_buf_runtimeType))
        {
            isModal_buf = valueDeserializer.readBoolean()
        }
        const isModal_result : boolean | undefined = isModal_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const onWillDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDismiss_buf : ((parameter: DismissDialogAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDismiss_buf_runtimeType))
        {
            onWillDismiss_buf = valueDeserializer.readCallback_DismissDialogAction_Void()
        }
        const onWillDismiss_result : ((parameter: DismissDialogAction) => void) | undefined = onWillDismiss_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        const cornerRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cornerRadius_buf : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (cornerRadius_buf_runtimeType))
        {
            const cornerRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let cornerRadius_buf_ : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined
            if (cornerRadius_buf__selector == 0) {
                cornerRadius_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (cornerRadius_buf__selector == 1) {
                cornerRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (cornerRadius_buf__selector == 2) {
                cornerRadius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for cornerRadius_buf_ has to be chosen through deserialisation.")
            }
            cornerRadius_buf = (cornerRadius_buf_ as Dimension | BorderRadiuses | LocalizedBorderRadiuses)
        }
        const cornerRadius_result : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined = cornerRadius_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Dimension)
        }
        const width_result : Dimension | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readLength() as Dimension)
        }
        const height_result : Dimension | undefined = height_buf
        const borderWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderWidth_buf : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (borderWidth_buf_runtimeType))
        {
            const borderWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let borderWidth_buf_ : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
            if (borderWidth_buf__selector == 0) {
                borderWidth_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (borderWidth_buf__selector == 1) {
                borderWidth_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (borderWidth_buf__selector == 2) {
                borderWidth_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for borderWidth_buf_ has to be chosen through deserialisation.")
            }
            borderWidth_buf = (borderWidth_buf_ as Dimension | EdgeWidths | LocalizedEdgeWidths)
        }
        const borderWidth_result : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined = borderWidth_buf
        const borderColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderColor_buf : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (borderColor_buf_runtimeType))
        {
            const borderColor_buf__selector : int32 = valueDeserializer.readInt8()
            let borderColor_buf_ : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
            if (borderColor_buf__selector == 0) {
                const borderColor_buf__u_selector : int32 = valueDeserializer.readInt8()
                let borderColor_buf__u : Color | number | string | Resource | undefined
                if (borderColor_buf__u_selector == 0) {
                    borderColor_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (borderColor_buf__u_selector == 1) {
                    borderColor_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (borderColor_buf__u_selector == 2) {
                    borderColor_buf__u = (valueDeserializer.readString() as string)
                }
                else if (borderColor_buf__u_selector == 3) {
                    borderColor_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for borderColor_buf__u has to be chosen through deserialisation.")
                }
                borderColor_buf_ = (borderColor_buf__u as Color | number | string | Resource)
            }
            else if (borderColor_buf__selector == 1) {
                borderColor_buf_ = valueDeserializer.readEdgeColors()
            }
            else if (borderColor_buf__selector == 2) {
                borderColor_buf_ = valueDeserializer.readLocalizedEdgeColors()
            }
            else {
                throw new Error("One of the branches for borderColor_buf_ has to be chosen through deserialisation.")
            }
            borderColor_buf = (borderColor_buf_ as ResourceColor | EdgeColors | LocalizedEdgeColors)
        }
        const borderColor_result : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined = borderColor_buf
        const borderStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderStyle_buf : BorderStyle | EdgeStyles | undefined
        if ((RuntimeType.UNDEFINED) != (borderStyle_buf_runtimeType))
        {
            const borderStyle_buf__selector : int32 = valueDeserializer.readInt8()
            let borderStyle_buf_ : BorderStyle | EdgeStyles | undefined
            if (borderStyle_buf__selector == 0) {
                borderStyle_buf_ = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else if (borderStyle_buf__selector == 1) {
                borderStyle_buf_ = valueDeserializer.readEdgeStyles()
            }
            else {
                throw new Error("One of the branches for borderStyle_buf_ has to be chosen through deserialisation.")
            }
            borderStyle_buf = (borderStyle_buf_ as BorderStyle | EdgeStyles)
        }
        const borderStyle_result : BorderStyle | EdgeStyles | undefined = borderStyle_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const textStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textStyle_buf : TextStyle_alert_dialog | undefined
        if ((RuntimeType.UNDEFINED) != (textStyle_buf_runtimeType))
        {
            textStyle_buf = valueDeserializer.readTextStyle_alert_dialog()
        }
        const textStyle_result : TextStyle_alert_dialog | undefined = textStyle_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const onDidAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidAppear_buf_runtimeType))
        {
            onDidAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidAppear_result : (() => void) | undefined = onDidAppear_buf
        const onDidDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidDisappear_buf_runtimeType))
        {
            onDidDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidDisappear_result : (() => void) | undefined = onDidDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillAppear_result : (() => void) | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillDisappear_result : (() => void) | undefined = onWillDisappear_buf
        const levelMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelMode_buf : LevelMode | undefined
        if ((RuntimeType.UNDEFINED) != (levelMode_buf_runtimeType))
        {
            levelMode_buf = valueDeserializer.readLevelMode()
        }
        const levelMode_result : LevelMode | undefined = levelMode_buf
        const levelUniqueId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelUniqueId_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (levelUniqueId_buf_runtimeType))
        {
            levelUniqueId_buf = (valueDeserializer.readNumber() as number)
        }
        const levelUniqueId_result : number | undefined = levelUniqueId_buf
        const immersiveMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let immersiveMode_buf : ImmersiveMode | undefined
        if ((RuntimeType.UNDEFINED) != (immersiveMode_buf_runtimeType))
        {
            immersiveMode_buf = valueDeserializer.readImmersiveMode()
        }
        const immersiveMode_result : ImmersiveMode | undefined = immersiveMode_buf
        const levelOrder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelOrder_buf : LevelOrder | undefined
        if ((RuntimeType.UNDEFINED) != (levelOrder_buf_runtimeType))
        {
            levelOrder_buf = valueDeserializer.readLevelOrder()
        }
        const levelOrder_result : LevelOrder | undefined = levelOrder_buf
        const confirm_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let confirm_buf : AlertDialogButtonBaseOptions | undefined
        if ((RuntimeType.UNDEFINED) != (confirm_buf_runtimeType))
        {
            confirm_buf = valueDeserializer.readAlertDialogButtonBaseOptions()
        }
        const confirm_result : AlertDialogButtonBaseOptions | undefined = confirm_buf
        let value : AlertDialogParamWithConfirm = ({title: title_result, subtitle: subtitle_result, message: message_result, autoCancel: autoCancel_result, cancel: cancel_result, alignment: alignment_result, offset: offset_result, gridCount: gridCount_result, maskRect: maskRect_result, showInSubWindow: showInSubWindow_result, isModal: isModal_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, onWillDismiss: onWillDismiss_result, transition: transition_result, cornerRadius: cornerRadius_result, width: width_result, height: height_result, borderWidth: borderWidth_result, borderColor: borderColor_result, borderStyle: borderStyle_result, shadow: shadow_result, textStyle: textStyle_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, onDidAppear: onDidAppear_result, onDidDisappear: onDidDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, levelMode: levelMode_result, levelUniqueId: levelUniqueId_result, immersiveMode: immersiveMode_result, levelOrder: levelOrder_result, confirm: confirm_result} as AlertDialogParamWithConfirm)
        return value
    }
    readAlertDialogParamWithOptions(): AlertDialogParamWithOptions {
        let valueDeserializer : Deserializer = this
        const title_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let title_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (title_buf_runtimeType))
        {
            const title_buf__selector : int32 = valueDeserializer.readInt8()
            let title_buf_ : string | Resource | undefined
            if (title_buf__selector == 0) {
                title_buf_ = (valueDeserializer.readString() as string)
            }
            else if (title_buf__selector == 1) {
                title_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for title_buf_ has to be chosen through deserialisation.")
            }
            title_buf = (title_buf_ as string | Resource)
        }
        const title_result : ResourceStr | undefined = title_buf
        const subtitle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let subtitle_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (subtitle_buf_runtimeType))
        {
            const subtitle_buf__selector : int32 = valueDeserializer.readInt8()
            let subtitle_buf_ : string | Resource | undefined
            if (subtitle_buf__selector == 0) {
                subtitle_buf_ = (valueDeserializer.readString() as string)
            }
            else if (subtitle_buf__selector == 1) {
                subtitle_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for subtitle_buf_ has to be chosen through deserialisation.")
            }
            subtitle_buf = (subtitle_buf_ as string | Resource)
        }
        const subtitle_result : ResourceStr | undefined = subtitle_buf
        const message_buf_selector : int32 = valueDeserializer.readInt8()
        let message_buf : string | Resource | undefined
        if (message_buf_selector == 0) {
            message_buf = (valueDeserializer.readString() as string)
        }
        else if (message_buf_selector == 1) {
            message_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for message_buf has to be chosen through deserialisation.")
        }
        const message_result : ResourceStr = (message_buf as string | Resource)
        const autoCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let autoCancel_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (autoCancel_buf_runtimeType))
        {
            autoCancel_buf = valueDeserializer.readBoolean()
        }
        const autoCancel_result : boolean | undefined = autoCancel_buf
        const cancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cancel_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (cancel_buf_runtimeType))
        {
            cancel_buf = valueDeserializer.readVoidCallback()
        }
        const cancel_result : VoidCallback | undefined = cancel_buf
        const alignment_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignment_buf : DialogAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (alignment_buf_runtimeType))
        {
            alignment_buf = TypeChecker.DialogAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const alignment_result : DialogAlignment | undefined = alignment_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Offset | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readOffset()
        }
        const offset_result : Offset | undefined = offset_buf
        const gridCount_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gridCount_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (gridCount_buf_runtimeType))
        {
            gridCount_buf = (valueDeserializer.readNumber() as number)
        }
        const gridCount_result : number | undefined = gridCount_buf
        const maskRect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskRect_buf : Rectangle | undefined
        if ((RuntimeType.UNDEFINED) != (maskRect_buf_runtimeType))
        {
            maskRect_buf = valueDeserializer.readRectangle()
        }
        const maskRect_result : Rectangle | undefined = maskRect_buf
        const showInSubWindow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showInSubWindow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showInSubWindow_buf_runtimeType))
        {
            showInSubWindow_buf = valueDeserializer.readBoolean()
        }
        const showInSubWindow_result : boolean | undefined = showInSubWindow_buf
        const isModal_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isModal_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isModal_buf_runtimeType))
        {
            isModal_buf = valueDeserializer.readBoolean()
        }
        const isModal_result : boolean | undefined = isModal_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const onWillDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDismiss_buf : ((parameter: DismissDialogAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDismiss_buf_runtimeType))
        {
            onWillDismiss_buf = valueDeserializer.readCallback_DismissDialogAction_Void()
        }
        const onWillDismiss_result : ((parameter: DismissDialogAction) => void) | undefined = onWillDismiss_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        const cornerRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cornerRadius_buf : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (cornerRadius_buf_runtimeType))
        {
            const cornerRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let cornerRadius_buf_ : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined
            if (cornerRadius_buf__selector == 0) {
                cornerRadius_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (cornerRadius_buf__selector == 1) {
                cornerRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (cornerRadius_buf__selector == 2) {
                cornerRadius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for cornerRadius_buf_ has to be chosen through deserialisation.")
            }
            cornerRadius_buf = (cornerRadius_buf_ as Dimension | BorderRadiuses | LocalizedBorderRadiuses)
        }
        const cornerRadius_result : Dimension | BorderRadiuses | LocalizedBorderRadiuses | undefined = cornerRadius_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Dimension)
        }
        const width_result : Dimension | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readLength() as Dimension)
        }
        const height_result : Dimension | undefined = height_buf
        const borderWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderWidth_buf : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (borderWidth_buf_runtimeType))
        {
            const borderWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let borderWidth_buf_ : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
            if (borderWidth_buf__selector == 0) {
                borderWidth_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (borderWidth_buf__selector == 1) {
                borderWidth_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (borderWidth_buf__selector == 2) {
                borderWidth_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for borderWidth_buf_ has to be chosen through deserialisation.")
            }
            borderWidth_buf = (borderWidth_buf_ as Dimension | EdgeWidths | LocalizedEdgeWidths)
        }
        const borderWidth_result : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined = borderWidth_buf
        const borderColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderColor_buf : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (borderColor_buf_runtimeType))
        {
            const borderColor_buf__selector : int32 = valueDeserializer.readInt8()
            let borderColor_buf_ : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
            if (borderColor_buf__selector == 0) {
                const borderColor_buf__u_selector : int32 = valueDeserializer.readInt8()
                let borderColor_buf__u : Color | number | string | Resource | undefined
                if (borderColor_buf__u_selector == 0) {
                    borderColor_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (borderColor_buf__u_selector == 1) {
                    borderColor_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (borderColor_buf__u_selector == 2) {
                    borderColor_buf__u = (valueDeserializer.readString() as string)
                }
                else if (borderColor_buf__u_selector == 3) {
                    borderColor_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for borderColor_buf__u has to be chosen through deserialisation.")
                }
                borderColor_buf_ = (borderColor_buf__u as Color | number | string | Resource)
            }
            else if (borderColor_buf__selector == 1) {
                borderColor_buf_ = valueDeserializer.readEdgeColors()
            }
            else if (borderColor_buf__selector == 2) {
                borderColor_buf_ = valueDeserializer.readLocalizedEdgeColors()
            }
            else {
                throw new Error("One of the branches for borderColor_buf_ has to be chosen through deserialisation.")
            }
            borderColor_buf = (borderColor_buf_ as ResourceColor | EdgeColors | LocalizedEdgeColors)
        }
        const borderColor_result : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined = borderColor_buf
        const borderStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderStyle_buf : BorderStyle | EdgeStyles | undefined
        if ((RuntimeType.UNDEFINED) != (borderStyle_buf_runtimeType))
        {
            const borderStyle_buf__selector : int32 = valueDeserializer.readInt8()
            let borderStyle_buf_ : BorderStyle | EdgeStyles | undefined
            if (borderStyle_buf__selector == 0) {
                borderStyle_buf_ = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else if (borderStyle_buf__selector == 1) {
                borderStyle_buf_ = valueDeserializer.readEdgeStyles()
            }
            else {
                throw new Error("One of the branches for borderStyle_buf_ has to be chosen through deserialisation.")
            }
            borderStyle_buf = (borderStyle_buf_ as BorderStyle | EdgeStyles)
        }
        const borderStyle_result : BorderStyle | EdgeStyles | undefined = borderStyle_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const textStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textStyle_buf : TextStyle_alert_dialog | undefined
        if ((RuntimeType.UNDEFINED) != (textStyle_buf_runtimeType))
        {
            textStyle_buf = valueDeserializer.readTextStyle_alert_dialog()
        }
        const textStyle_result : TextStyle_alert_dialog | undefined = textStyle_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const onDidAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidAppear_buf_runtimeType))
        {
            onDidAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidAppear_result : (() => void) | undefined = onDidAppear_buf
        const onDidDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidDisappear_buf_runtimeType))
        {
            onDidDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidDisappear_result : (() => void) | undefined = onDidDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillAppear_result : (() => void) | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillDisappear_result : (() => void) | undefined = onWillDisappear_buf
        const levelMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelMode_buf : LevelMode | undefined
        if ((RuntimeType.UNDEFINED) != (levelMode_buf_runtimeType))
        {
            levelMode_buf = valueDeserializer.readLevelMode()
        }
        const levelMode_result : LevelMode | undefined = levelMode_buf
        const levelUniqueId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelUniqueId_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (levelUniqueId_buf_runtimeType))
        {
            levelUniqueId_buf = (valueDeserializer.readNumber() as number)
        }
        const levelUniqueId_result : number | undefined = levelUniqueId_buf
        const immersiveMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let immersiveMode_buf : ImmersiveMode | undefined
        if ((RuntimeType.UNDEFINED) != (immersiveMode_buf_runtimeType))
        {
            immersiveMode_buf = valueDeserializer.readImmersiveMode()
        }
        const immersiveMode_result : ImmersiveMode | undefined = immersiveMode_buf
        const levelOrder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelOrder_buf : LevelOrder | undefined
        if ((RuntimeType.UNDEFINED) != (levelOrder_buf_runtimeType))
        {
            levelOrder_buf = valueDeserializer.readLevelOrder()
        }
        const levelOrder_result : LevelOrder | undefined = levelOrder_buf
        const buttons_buf_length : int32 = valueDeserializer.readInt32()
        let buttons_buf : Array<AlertDialogButtonOptions> = new Array<AlertDialogButtonOptions>(buttons_buf_length)
        for (let buttons_buf_i = 0; buttons_buf_i < buttons_buf_length; buttons_buf_i++) {
            buttons_buf[buttons_buf_i] = valueDeserializer.readAlertDialogButtonOptions()
        }
        const buttons_result : Array<AlertDialogButtonOptions> = buttons_buf
        const buttonDirection_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let buttonDirection_buf : DialogButtonDirection | undefined
        if ((RuntimeType.UNDEFINED) != (buttonDirection_buf_runtimeType))
        {
            buttonDirection_buf = TypeChecker.DialogButtonDirection_FromNumeric(valueDeserializer.readInt32())
        }
        const buttonDirection_result : DialogButtonDirection | undefined = buttonDirection_buf
        let value : AlertDialogParamWithOptions = ({title: title_result, subtitle: subtitle_result, message: message_result, autoCancel: autoCancel_result, cancel: cancel_result, alignment: alignment_result, offset: offset_result, gridCount: gridCount_result, maskRect: maskRect_result, showInSubWindow: showInSubWindow_result, isModal: isModal_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, onWillDismiss: onWillDismiss_result, transition: transition_result, cornerRadius: cornerRadius_result, width: width_result, height: height_result, borderWidth: borderWidth_result, borderColor: borderColor_result, borderStyle: borderStyle_result, shadow: shadow_result, textStyle: textStyle_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, onDidAppear: onDidAppear_result, onDidDisappear: onDidDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, levelMode: levelMode_result, levelUniqueId: levelUniqueId_result, immersiveMode: immersiveMode_result, levelOrder: levelOrder_result, buttons: buttons_result, buttonDirection: buttonDirection_result} as AlertDialogParamWithOptions)
        return value
    }
    readAxisEvent(): AxisEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return AxisEventInternal.fromPtr(ptr)
    }
    readBackgroundColorStyle(): BackgroundColorStyle {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return BackgroundColorStyleInternal.fromPtr(ptr)
    }
    readBadgeParamWithNumber(): BadgeParamWithNumber {
        let valueDeserializer : Deserializer = this
        const position_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let position_buf : BadgePosition | Position | undefined
        if ((RuntimeType.UNDEFINED) != (position_buf_runtimeType))
        {
            const position_buf__selector : int32 = valueDeserializer.readInt8()
            let position_buf_ : BadgePosition | Position | undefined
            if (position_buf__selector == 0) {
                position_buf_ = TypeChecker.BadgePosition_FromNumeric(valueDeserializer.readInt32())
            }
            else if (position_buf__selector == 1) {
                position_buf_ = valueDeserializer.readPosition()
            }
            else {
                throw new Error("One of the branches for position_buf_ has to be chosen through deserialisation.")
            }
            position_buf = (position_buf_ as BadgePosition | Position)
        }
        const position_result : BadgePosition | Position | undefined = position_buf
        const style_result : BadgeStyle = valueDeserializer.readBadgeStyle()
        const count_result : number = (valueDeserializer.readNumber() as number)
        const maxCount_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxCount_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (maxCount_buf_runtimeType))
        {
            maxCount_buf = (valueDeserializer.readNumber() as number)
        }
        const maxCount_result : number | undefined = maxCount_buf
        let value : BadgeParamWithNumber = ({position: position_result, style: style_result, count: count_result, maxCount: maxCount_result} as BadgeParamWithNumber)
        return value
    }
    readBadgeParamWithString(): BadgeParamWithString {
        let valueDeserializer : Deserializer = this
        const position_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let position_buf : BadgePosition | Position | undefined
        if ((RuntimeType.UNDEFINED) != (position_buf_runtimeType))
        {
            const position_buf__selector : int32 = valueDeserializer.readInt8()
            let position_buf_ : BadgePosition | Position | undefined
            if (position_buf__selector == 0) {
                position_buf_ = TypeChecker.BadgePosition_FromNumeric(valueDeserializer.readInt32())
            }
            else if (position_buf__selector == 1) {
                position_buf_ = valueDeserializer.readPosition()
            }
            else {
                throw new Error("One of the branches for position_buf_ has to be chosen through deserialisation.")
            }
            position_buf = (position_buf_ as BadgePosition | Position)
        }
        const position_result : BadgePosition | Position | undefined = position_buf
        const style_result : BadgeStyle = valueDeserializer.readBadgeStyle()
        const value_result : string = (valueDeserializer.readString() as string)
        let value : BadgeParamWithString = ({position: position_result, style: style_result, value: value_result} as BadgeParamWithString)
        return value
    }
    readBaseEvent(): BaseEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return BaseEventInternal.fromPtr(ptr)
    }
    readBaseGestureEvent(): BaseGestureEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return BaseGestureEventInternal.fromPtr(ptr)
    }
    readBorderImageOption(): BorderImageOption {
        let valueDeserializer : Deserializer = this
        const slice_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let slice_buf : Length | EdgeWidths | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (slice_buf_runtimeType))
        {
            const slice_buf__selector : int32 = valueDeserializer.readInt8()
            let slice_buf_ : Length | EdgeWidths | LocalizedEdgeWidths | undefined
            if (slice_buf__selector == 0) {
                slice_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (slice_buf__selector == 1) {
                slice_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (slice_buf__selector == 2) {
                slice_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for slice_buf_ has to be chosen through deserialisation.")
            }
            slice_buf = (slice_buf_ as Length | EdgeWidths | LocalizedEdgeWidths)
        }
        const slice_result : Length | EdgeWidths | LocalizedEdgeWidths | undefined = slice_buf
        const repeat_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let repeat_buf : RepeatMode | undefined
        if ((RuntimeType.UNDEFINED) != (repeat_buf_runtimeType))
        {
            repeat_buf = TypeChecker.RepeatMode_FromNumeric(valueDeserializer.readInt32())
        }
        const repeat_result : RepeatMode | undefined = repeat_buf
        const source_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let source_buf : string | Resource | LinearGradient_common | undefined
        if ((RuntimeType.UNDEFINED) != (source_buf_runtimeType))
        {
            const source_buf__selector : int32 = valueDeserializer.readInt8()
            let source_buf_ : string | Resource | LinearGradient_common | undefined
            if (source_buf__selector == 0) {
                source_buf_ = (valueDeserializer.readString() as string)
            }
            else if (source_buf__selector == 1) {
                source_buf_ = valueDeserializer.readResource()
            }
            else if (source_buf__selector == 2) {
                source_buf_ = valueDeserializer.readLinearGradient_common()
            }
            else {
                throw new Error("One of the branches for source_buf_ has to be chosen through deserialisation.")
            }
            source_buf = (source_buf_ as string | Resource | LinearGradient_common)
        }
        const source_result : string | Resource | LinearGradient_common | undefined = source_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Length | EdgeWidths | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : Length | EdgeWidths | LocalizedEdgeWidths | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (width_buf__selector == 2) {
                width_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as Length | EdgeWidths | LocalizedEdgeWidths)
        }
        const width_result : Length | EdgeWidths | LocalizedEdgeWidths | undefined = width_buf
        const outset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let outset_buf : Length | EdgeWidths | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (outset_buf_runtimeType))
        {
            const outset_buf__selector : int32 = valueDeserializer.readInt8()
            let outset_buf_ : Length | EdgeWidths | LocalizedEdgeWidths | undefined
            if (outset_buf__selector == 0) {
                outset_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (outset_buf__selector == 1) {
                outset_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (outset_buf__selector == 2) {
                outset_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for outset_buf_ has to be chosen through deserialisation.")
            }
            outset_buf = (outset_buf_ as Length | EdgeWidths | LocalizedEdgeWidths)
        }
        const outset_result : Length | EdgeWidths | LocalizedEdgeWidths | undefined = outset_buf
        const fill_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fill_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (fill_buf_runtimeType))
        {
            fill_buf = valueDeserializer.readBoolean()
        }
        const fill_result : boolean | undefined = fill_buf
        let value : BorderImageOption = ({slice: slice_result, repeat: repeat_result, source: source_result, width: width_result, outset: outset_result, fill: fill_result} as BorderImageOption)
        return value
    }
    readBorderOptions(): BorderOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : EdgeWidths | Length | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : EdgeWidths | Length | LocalizedEdgeWidths | undefined
            if (width_buf__selector == 0) {
                width_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (width_buf__selector == 2) {
                width_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as EdgeWidths | Length | LocalizedEdgeWidths)
        }
        const width_result : EdgeWidths | Length | LocalizedEdgeWidths | undefined = width_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : EdgeColors | ResourceColor | LocalizedEdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : EdgeColors | ResourceColor | LocalizedEdgeColors | undefined
            if (color_buf__selector == 0) {
                color_buf_ = valueDeserializer.readEdgeColors()
            }
            else if (color_buf__selector == 1) {
                const color_buf__u_selector : int32 = valueDeserializer.readInt8()
                let color_buf__u : Color | number | string | Resource | undefined
                if (color_buf__u_selector == 0) {
                    color_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (color_buf__u_selector == 1) {
                    color_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (color_buf__u_selector == 2) {
                    color_buf__u = (valueDeserializer.readString() as string)
                }
                else if (color_buf__u_selector == 3) {
                    color_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for color_buf__u has to be chosen through deserialisation.")
                }
                color_buf_ = (color_buf__u as Color | number | string | Resource)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = valueDeserializer.readLocalizedEdgeColors()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as EdgeColors | ResourceColor | LocalizedEdgeColors)
        }
        const color_result : EdgeColors | ResourceColor | LocalizedEdgeColors | undefined = color_buf
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : BorderRadiuses | Length | LocalizedBorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            const radius_buf__selector : int32 = valueDeserializer.readInt8()
            let radius_buf_ : BorderRadiuses | Length | LocalizedBorderRadiuses | undefined
            if (radius_buf__selector == 0) {
                radius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (radius_buf__selector == 1) {
                radius_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (radius_buf__selector == 2) {
                radius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for radius_buf_ has to be chosen through deserialisation.")
            }
            radius_buf = (radius_buf_ as BorderRadiuses | Length | LocalizedBorderRadiuses)
        }
        const radius_result : BorderRadiuses | Length | LocalizedBorderRadiuses | undefined = radius_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : EdgeStyles | BorderStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            const style_buf__selector : int32 = valueDeserializer.readInt8()
            let style_buf_ : EdgeStyles | BorderStyle | undefined
            if (style_buf__selector == 0) {
                style_buf_ = valueDeserializer.readEdgeStyles()
            }
            else if (style_buf__selector == 1) {
                style_buf_ = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for style_buf_ has to be chosen through deserialisation.")
            }
            style_buf = (style_buf_ as EdgeStyles | BorderStyle)
        }
        const style_result : EdgeStyles | BorderStyle | undefined = style_buf
        const dashGap_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dashGap_buf : EdgeWidths | LengthMetrics | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (dashGap_buf_runtimeType))
        {
            const dashGap_buf__selector : int32 = valueDeserializer.readInt8()
            let dashGap_buf_ : EdgeWidths | LengthMetrics | LocalizedEdgeWidths | undefined
            if (dashGap_buf__selector == 0) {
                dashGap_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (dashGap_buf__selector == 1) {
                dashGap_buf_ = (valueDeserializer.readLengthMetrics() as LengthMetrics)
            }
            else if (dashGap_buf__selector == 2) {
                dashGap_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for dashGap_buf_ has to be chosen through deserialisation.")
            }
            dashGap_buf = (dashGap_buf_ as EdgeWidths | LengthMetrics | LocalizedEdgeWidths)
        }
        const dashGap_result : EdgeWidths | LengthMetrics | LocalizedEdgeWidths | undefined = dashGap_buf
        const dashWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dashWidth_buf : EdgeWidths | LengthMetrics | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (dashWidth_buf_runtimeType))
        {
            const dashWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let dashWidth_buf_ : EdgeWidths | LengthMetrics | LocalizedEdgeWidths | undefined
            if (dashWidth_buf__selector == 0) {
                dashWidth_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (dashWidth_buf__selector == 1) {
                dashWidth_buf_ = (valueDeserializer.readLengthMetrics() as LengthMetrics)
            }
            else if (dashWidth_buf__selector == 2) {
                dashWidth_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for dashWidth_buf_ has to be chosen through deserialisation.")
            }
            dashWidth_buf = (dashWidth_buf_ as EdgeWidths | LengthMetrics | LocalizedEdgeWidths)
        }
        const dashWidth_result : EdgeWidths | LengthMetrics | LocalizedEdgeWidths | undefined = dashWidth_buf
        let value : BorderOptions = ({width: width_result, color: color_result, radius: radius_result, style: style_result, dashGap: dashGap_result, dashWidth: dashWidth_result} as BorderOptions)
        return value
    }
    readButtonStyle(): ButtonStyle {
        let valueDeserializer : Deserializer = this
        const left_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let left_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (left_buf_runtimeType))
        {
            left_buf = (valueDeserializer.readNumber() as number)
        }
        const left_result : number | undefined = left_buf
        const top_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let top_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (top_buf_runtimeType))
        {
            top_buf = (valueDeserializer.readNumber() as number)
        }
        const top_result : number | undefined = top_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readNumber() as number)
        }
        const width_result : number | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readNumber() as number)
        }
        const height_result : number | undefined = height_buf
        const icons_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icons_buf : ButtonIconOptions | undefined
        if ((RuntimeType.UNDEFINED) != (icons_buf_runtimeType))
        {
            icons_buf = valueDeserializer.readButtonIconOptions()
        }
        const icons_result : ButtonIconOptions | undefined = icons_buf
        let value : ButtonStyle = ({left: left_result, top: top_result, width: width_result, height: height_result, icons: icons_result} as ButtonStyle)
        return value
    }
    readCalendarDialogOptions(): CalendarDialogOptions {
        let valueDeserializer : Deserializer = this
        const hintRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hintRadius_buf : number | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (hintRadius_buf_runtimeType))
        {
            const hintRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let hintRadius_buf_ : number | Resource | undefined
            if (hintRadius_buf__selector == 0) {
                hintRadius_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (hintRadius_buf__selector == 1) {
                hintRadius_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for hintRadius_buf_ has to be chosen through deserialisation.")
            }
            hintRadius_buf = (hintRadius_buf_ as number | Resource)
        }
        const hintRadius_result : number | Resource | undefined = hintRadius_buf
        const selected_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selected_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (selected_buf_runtimeType))
        {
            selected_buf = new Date(valueDeserializer.readInt64())
        }
        const selected_result : Date | undefined = selected_buf
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = new Date(valueDeserializer.readInt64())
        }
        const start_result : Date | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = new Date(valueDeserializer.readInt64())
        }
        const end_result : Date | undefined = end_buf
        const disabledDateRange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disabledDateRange_buf : Array<DateRange> | undefined
        if ((RuntimeType.UNDEFINED) != (disabledDateRange_buf_runtimeType))
        {
            const disabledDateRange_buf__length : int32 = valueDeserializer.readInt32()
            let disabledDateRange_buf_ : Array<DateRange> = new Array<DateRange>(disabledDateRange_buf__length)
            for (let disabledDateRange_buf__i = 0; disabledDateRange_buf__i < disabledDateRange_buf__length; disabledDateRange_buf__i++) {
                disabledDateRange_buf_[disabledDateRange_buf__i] = valueDeserializer.readDateRange()
            }
            disabledDateRange_buf = disabledDateRange_buf_
        }
        const disabledDateRange_result : Array<DateRange> | undefined = disabledDateRange_buf
        const onAccept_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAccept_buf : ((parameter: Date) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAccept_buf_runtimeType))
        {
            onAccept_buf = valueDeserializer.readCallback_Date_Void()
        }
        const onAccept_result : ((parameter: Date) => void) | undefined = onAccept_buf
        const onCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onCancel_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onCancel_buf_runtimeType))
        {
            onCancel_buf = valueDeserializer.readVoidCallback()
        }
        const onCancel_result : VoidCallback | undefined = onCancel_buf
        const onChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onChange_buf : ((parameter: Date) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onChange_buf_runtimeType))
        {
            onChange_buf = valueDeserializer.readCallback_Date_Void()
        }
        const onChange_result : ((parameter: Date) => void) | undefined = onChange_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const acceptButtonStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let acceptButtonStyle_buf : PickerDialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (acceptButtonStyle_buf_runtimeType))
        {
            acceptButtonStyle_buf = valueDeserializer.readPickerDialogButtonStyle()
        }
        const acceptButtonStyle_result : PickerDialogButtonStyle | undefined = acceptButtonStyle_buf
        const cancelButtonStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cancelButtonStyle_buf : PickerDialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (cancelButtonStyle_buf_runtimeType))
        {
            cancelButtonStyle_buf = valueDeserializer.readPickerDialogButtonStyle()
        }
        const cancelButtonStyle_result : PickerDialogButtonStyle | undefined = cancelButtonStyle_buf
        const onDidAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidAppear_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onDidAppear_buf_runtimeType))
        {
            onDidAppear_buf = valueDeserializer.readVoidCallback()
        }
        const onDidAppear_result : VoidCallback | undefined = onDidAppear_buf
        const onDidDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidDisappear_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onDidDisappear_buf_runtimeType))
        {
            onDidDisappear_buf = valueDeserializer.readVoidCallback()
        }
        const onDidDisappear_result : VoidCallback | undefined = onDidDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readVoidCallback()
        }
        const onWillAppear_result : VoidCallback | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readVoidCallback()
        }
        const onWillDisappear_result : VoidCallback | undefined = onWillDisappear_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const markToday_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let markToday_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (markToday_buf_runtimeType))
        {
            markToday_buf = valueDeserializer.readBoolean()
        }
        const markToday_result : boolean | undefined = markToday_buf
        let value : CalendarDialogOptions = ({hintRadius: hintRadius_result, selected: selected_result, start: start_result, end: end_result, disabledDateRange: disabledDateRange_result, onAccept: onAccept_result, onCancel: onCancel_result, onChange: onChange_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, acceptButtonStyle: acceptButtonStyle_result, cancelButtonStyle: cancelButtonStyle_result, onDidAppear: onDidAppear_result, onDidDisappear: onDidDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, shadow: shadow_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, markToday: markToday_result} as CalendarDialogOptions)
        return value
    }
    readCancelButtonOptions(): CancelButtonOptions {
        let valueDeserializer : Deserializer = this
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : CancelButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = TypeChecker.CancelButtonStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const style_result : CancelButtonStyle | undefined = style_buf
        const icon_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let icon_buf : IconOptions | undefined
        if ((RuntimeType.UNDEFINED) != (icon_buf_runtimeType))
        {
            icon_buf = valueDeserializer.readIconOptions()
        }
        const icon_result : IconOptions | undefined = icon_buf
        let value : CancelButtonOptions = ({style: style_result, icon: icon_result} as CancelButtonOptions)
        return value
    }
    readCapsuleStyleOptions(): CapsuleStyleOptions {
        let valueDeserializer : Deserializer = this
        const enableScanEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableScanEffect_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableScanEffect_buf_runtimeType))
        {
            enableScanEffect_buf = valueDeserializer.readBoolean()
        }
        const enableScanEffect_result : boolean | undefined = enableScanEffect_buf
        const borderColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (borderColor_buf_runtimeType))
        {
            const borderColor_buf__selector : int32 = valueDeserializer.readInt8()
            let borderColor_buf_ : Color | number | string | Resource | undefined
            if (borderColor_buf__selector == 0) {
                borderColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (borderColor_buf__selector == 1) {
                borderColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (borderColor_buf__selector == 2) {
                borderColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (borderColor_buf__selector == 3) {
                borderColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for borderColor_buf_ has to be chosen through deserialisation.")
            }
            borderColor_buf = (borderColor_buf_ as Color | number | string | Resource)
        }
        const borderColor_result : ResourceColor | undefined = borderColor_buf
        const borderWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderWidth_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (borderWidth_buf_runtimeType))
        {
            borderWidth_buf = (valueDeserializer.readLength() as Length)
        }
        const borderWidth_result : Length | undefined = borderWidth_buf
        const content_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let content_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (content_buf_runtimeType))
        {
            content_buf = (valueDeserializer.readString() as string)
        }
        const content_result : string | undefined = content_buf
        const font_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let font_buf : Font | undefined
        if ((RuntimeType.UNDEFINED) != (font_buf_runtimeType))
        {
            font_buf = valueDeserializer.readFont()
        }
        const font_result : Font | undefined = font_buf
        const fontColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontColor_buf_runtimeType))
        {
            const fontColor_buf__selector : int32 = valueDeserializer.readInt8()
            let fontColor_buf_ : Color | number | string | Resource | undefined
            if (fontColor_buf__selector == 0) {
                fontColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontColor_buf__selector == 1) {
                fontColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontColor_buf__selector == 2) {
                fontColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontColor_buf__selector == 3) {
                fontColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontColor_buf_ has to be chosen through deserialisation.")
            }
            fontColor_buf = (fontColor_buf_ as Color | number | string | Resource)
        }
        const fontColor_result : ResourceColor | undefined = fontColor_buf
        const showDefaultPercentage_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showDefaultPercentage_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showDefaultPercentage_buf_runtimeType))
        {
            showDefaultPercentage_buf = valueDeserializer.readBoolean()
        }
        const showDefaultPercentage_result : boolean | undefined = showDefaultPercentage_buf
        const borderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderRadius_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (borderRadius_buf_runtimeType))
        {
            borderRadius_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const borderRadius_result : LengthMetrics | undefined = borderRadius_buf
        let value : CapsuleStyleOptions = ({enableScanEffect: enableScanEffect_result, borderColor: borderColor_result, borderWidth: borderWidth_result, content: content_result, font: font_result, fontColor: fontColor_result, showDefaultPercentage: showDefaultPercentage_result, borderRadius: borderRadius_result} as CapsuleStyleOptions)
        return value
    }
    readClickEvent(): ClickEvent {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ClickEventInternal.fromPtr(ptr)
    }
    readCustomDialogControllerOptions(): CustomDialogControllerOptions {
        let valueDeserializer : Deserializer = this
        const builder_result : CustomBuilder = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        const cancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cancel_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (cancel_buf_runtimeType))
        {
            cancel_buf = valueDeserializer.readCallback_Void()
        }
        const cancel_result : (() => void) | undefined = cancel_buf
        const autoCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let autoCancel_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (autoCancel_buf_runtimeType))
        {
            autoCancel_buf = valueDeserializer.readBoolean()
        }
        const autoCancel_result : boolean | undefined = autoCancel_buf
        const alignment_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignment_buf : DialogAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (alignment_buf_runtimeType))
        {
            alignment_buf = TypeChecker.DialogAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const alignment_result : DialogAlignment | undefined = alignment_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Offset | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readOffset()
        }
        const offset_result : Offset | undefined = offset_buf
        const customStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let customStyle_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (customStyle_buf_runtimeType))
        {
            customStyle_buf = valueDeserializer.readBoolean()
        }
        const customStyle_result : boolean | undefined = customStyle_buf
        const gridCount_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gridCount_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (gridCount_buf_runtimeType))
        {
            gridCount_buf = (valueDeserializer.readNumber() as number)
        }
        const gridCount_result : number | undefined = gridCount_buf
        const maskColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (maskColor_buf_runtimeType))
        {
            const maskColor_buf__selector : int32 = valueDeserializer.readInt8()
            let maskColor_buf_ : Color | number | string | Resource | undefined
            if (maskColor_buf__selector == 0) {
                maskColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (maskColor_buf__selector == 1) {
                maskColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (maskColor_buf__selector == 2) {
                maskColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (maskColor_buf__selector == 3) {
                maskColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for maskColor_buf_ has to be chosen through deserialisation.")
            }
            maskColor_buf = (maskColor_buf_ as Color | number | string | Resource)
        }
        const maskColor_result : ResourceColor | undefined = maskColor_buf
        const maskRect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskRect_buf : Rectangle | undefined
        if ((RuntimeType.UNDEFINED) != (maskRect_buf_runtimeType))
        {
            maskRect_buf = valueDeserializer.readRectangle()
        }
        const maskRect_result : Rectangle | undefined = maskRect_buf
        const openAnimation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let openAnimation_buf : AnimateParam | undefined
        if ((RuntimeType.UNDEFINED) != (openAnimation_buf_runtimeType))
        {
            openAnimation_buf = valueDeserializer.readAnimateParam()
        }
        const openAnimation_result : AnimateParam | undefined = openAnimation_buf
        const closeAnimation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let closeAnimation_buf : AnimateParam | undefined
        if ((RuntimeType.UNDEFINED) != (closeAnimation_buf_runtimeType))
        {
            closeAnimation_buf = valueDeserializer.readAnimateParam()
        }
        const closeAnimation_result : AnimateParam | undefined = closeAnimation_buf
        const showInSubWindow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showInSubWindow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showInSubWindow_buf_runtimeType))
        {
            showInSubWindow_buf = valueDeserializer.readBoolean()
        }
        const showInSubWindow_result : boolean | undefined = showInSubWindow_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const cornerRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cornerRadius_buf : Dimension | BorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (cornerRadius_buf_runtimeType))
        {
            const cornerRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let cornerRadius_buf_ : Dimension | BorderRadiuses | undefined
            if (cornerRadius_buf__selector == 0) {
                cornerRadius_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (cornerRadius_buf__selector == 1) {
                cornerRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for cornerRadius_buf_ has to be chosen through deserialisation.")
            }
            cornerRadius_buf = (cornerRadius_buf_ as Dimension | BorderRadiuses)
        }
        const cornerRadius_result : Dimension | BorderRadiuses | undefined = cornerRadius_buf
        const isModal_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let isModal_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (isModal_buf_runtimeType))
        {
            isModal_buf = valueDeserializer.readBoolean()
        }
        const isModal_result : boolean | undefined = isModal_buf
        const onWillDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDismiss_buf : ((parameter: DismissDialogAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDismiss_buf_runtimeType))
        {
            onWillDismiss_buf = valueDeserializer.readCallback_DismissDialogAction_Void()
        }
        const onWillDismiss_result : ((parameter: DismissDialogAction) => void) | undefined = onWillDismiss_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Dimension)
        }
        const width_result : Dimension | undefined = width_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            height_buf = (valueDeserializer.readLength() as Dimension)
        }
        const height_result : Dimension | undefined = height_buf
        const borderWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderWidth_buf : Dimension | EdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (borderWidth_buf_runtimeType))
        {
            const borderWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let borderWidth_buf_ : Dimension | EdgeWidths | undefined
            if (borderWidth_buf__selector == 0) {
                borderWidth_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (borderWidth_buf__selector == 1) {
                borderWidth_buf_ = valueDeserializer.readEdgeWidths()
            }
            else {
                throw new Error("One of the branches for borderWidth_buf_ has to be chosen through deserialisation.")
            }
            borderWidth_buf = (borderWidth_buf_ as Dimension | EdgeWidths)
        }
        const borderWidth_result : Dimension | EdgeWidths | undefined = borderWidth_buf
        const borderColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderColor_buf : ResourceColor | EdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (borderColor_buf_runtimeType))
        {
            const borderColor_buf__selector : int32 = valueDeserializer.readInt8()
            let borderColor_buf_ : ResourceColor | EdgeColors | undefined
            if (borderColor_buf__selector == 0) {
                const borderColor_buf__u_selector : int32 = valueDeserializer.readInt8()
                let borderColor_buf__u : Color | number | string | Resource | undefined
                if (borderColor_buf__u_selector == 0) {
                    borderColor_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (borderColor_buf__u_selector == 1) {
                    borderColor_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (borderColor_buf__u_selector == 2) {
                    borderColor_buf__u = (valueDeserializer.readString() as string)
                }
                else if (borderColor_buf__u_selector == 3) {
                    borderColor_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for borderColor_buf__u has to be chosen through deserialisation.")
                }
                borderColor_buf_ = (borderColor_buf__u as Color | number | string | Resource)
            }
            else if (borderColor_buf__selector == 1) {
                borderColor_buf_ = valueDeserializer.readEdgeColors()
            }
            else {
                throw new Error("One of the branches for borderColor_buf_ has to be chosen through deserialisation.")
            }
            borderColor_buf = (borderColor_buf_ as ResourceColor | EdgeColors)
        }
        const borderColor_result : ResourceColor | EdgeColors | undefined = borderColor_buf
        const borderStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderStyle_buf : BorderStyle | EdgeStyles | undefined
        if ((RuntimeType.UNDEFINED) != (borderStyle_buf_runtimeType))
        {
            const borderStyle_buf__selector : int32 = valueDeserializer.readInt8()
            let borderStyle_buf_ : BorderStyle | EdgeStyles | undefined
            if (borderStyle_buf__selector == 0) {
                borderStyle_buf_ = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else if (borderStyle_buf__selector == 1) {
                borderStyle_buf_ = valueDeserializer.readEdgeStyles()
            }
            else {
                throw new Error("One of the branches for borderStyle_buf_ has to be chosen through deserialisation.")
            }
            borderStyle_buf = (borderStyle_buf_ as BorderStyle | EdgeStyles)
        }
        const borderStyle_result : BorderStyle | EdgeStyles | undefined = borderStyle_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const keyboardAvoidMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let keyboardAvoidMode_buf : KeyboardAvoidMode | undefined
        if ((RuntimeType.UNDEFINED) != (keyboardAvoidMode_buf_runtimeType))
        {
            keyboardAvoidMode_buf = TypeChecker.KeyboardAvoidMode_FromNumeric(valueDeserializer.readInt32())
        }
        const keyboardAvoidMode_result : KeyboardAvoidMode | undefined = keyboardAvoidMode_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const onDidAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidAppear_buf_runtimeType))
        {
            onDidAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidAppear_result : (() => void) | undefined = onDidAppear_buf
        const onDidDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidDisappear_buf_runtimeType))
        {
            onDidDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidDisappear_result : (() => void) | undefined = onDidDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillAppear_result : (() => void) | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillDisappear_result : (() => void) | undefined = onWillDisappear_buf
        const keyboardAvoidDistance_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let keyboardAvoidDistance_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (keyboardAvoidDistance_buf_runtimeType))
        {
            keyboardAvoidDistance_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const keyboardAvoidDistance_result : LengthMetrics | undefined = keyboardAvoidDistance_buf
        const levelMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelMode_buf : LevelMode | undefined
        if ((RuntimeType.UNDEFINED) != (levelMode_buf_runtimeType))
        {
            levelMode_buf = valueDeserializer.readLevelMode()
        }
        const levelMode_result : LevelMode | undefined = levelMode_buf
        const levelUniqueId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelUniqueId_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (levelUniqueId_buf_runtimeType))
        {
            levelUniqueId_buf = (valueDeserializer.readNumber() as number)
        }
        const levelUniqueId_result : number | undefined = levelUniqueId_buf
        const immersiveMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let immersiveMode_buf : ImmersiveMode | undefined
        if ((RuntimeType.UNDEFINED) != (immersiveMode_buf_runtimeType))
        {
            immersiveMode_buf = valueDeserializer.readImmersiveMode()
        }
        const immersiveMode_result : ImmersiveMode | undefined = immersiveMode_buf
        const levelOrder_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let levelOrder_buf : LevelOrder | undefined
        if ((RuntimeType.UNDEFINED) != (levelOrder_buf_runtimeType))
        {
            levelOrder_buf = valueDeserializer.readLevelOrder()
        }
        const levelOrder_result : LevelOrder | undefined = levelOrder_buf
        const focusable_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let focusable_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (focusable_buf_runtimeType))
        {
            focusable_buf = valueDeserializer.readBoolean()
        }
        const focusable_result : boolean | undefined = focusable_buf
        let value : CustomDialogControllerOptions = ({builder: builder_result, cancel: cancel_result, autoCancel: autoCancel_result, alignment: alignment_result, offset: offset_result, customStyle: customStyle_result, gridCount: gridCount_result, maskColor: maskColor_result, maskRect: maskRect_result, openAnimation: openAnimation_result, closeAnimation: closeAnimation_result, showInSubWindow: showInSubWindow_result, backgroundColor: backgroundColor_result, cornerRadius: cornerRadius_result, isModal: isModal_result, onWillDismiss: onWillDismiss_result, width: width_result, height: height_result, borderWidth: borderWidth_result, borderColor: borderColor_result, borderStyle: borderStyle_result, shadow: shadow_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, keyboardAvoidMode: keyboardAvoidMode_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, onDidAppear: onDidAppear_result, onDidDisappear: onDidDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, keyboardAvoidDistance: keyboardAvoidDistance_result, levelMode: levelMode_result, levelUniqueId: levelUniqueId_result, immersiveMode: immersiveMode_result, levelOrder: levelOrder_result, focusable: focusable_result} as CustomDialogControllerOptions)
        return value
    }
    readCustomPopupOptions(): CustomPopupOptions {
        let valueDeserializer : Deserializer = this
        const builder_result : CustomBuilder = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
        const placement_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placement_buf : Placement | undefined
        if ((RuntimeType.UNDEFINED) != (placement_buf_runtimeType))
        {
            placement_buf = TypeChecker.Placement_FromNumeric(valueDeserializer.readInt32())
        }
        const placement_result : Placement | undefined = placement_buf
        const popupColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let popupColor_buf : Color | string | Resource | number | undefined
        if ((RuntimeType.UNDEFINED) != (popupColor_buf_runtimeType))
        {
            const popupColor_buf__selector : int32 = valueDeserializer.readInt8()
            let popupColor_buf_ : Color | string | Resource | number | undefined
            if (popupColor_buf__selector == 0) {
                popupColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (popupColor_buf__selector == 1) {
                popupColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (popupColor_buf__selector == 2) {
                popupColor_buf_ = valueDeserializer.readResource()
            }
            else if (popupColor_buf__selector == 3) {
                popupColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for popupColor_buf_ has to be chosen through deserialisation.")
            }
            popupColor_buf = (popupColor_buf_ as Color | string | Resource | number)
        }
        const popupColor_result : Color | string | Resource | number | undefined = popupColor_buf
        const enableArrow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableArrow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableArrow_buf_runtimeType))
        {
            enableArrow_buf = valueDeserializer.readBoolean()
        }
        const enableArrow_result : boolean | undefined = enableArrow_buf
        const autoCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let autoCancel_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (autoCancel_buf_runtimeType))
        {
            autoCancel_buf = valueDeserializer.readBoolean()
        }
        const autoCancel_result : boolean | undefined = autoCancel_buf
        const onStateChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onStateChange_buf : PopupStateChangeCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onStateChange_buf_runtimeType))
        {
            onStateChange_buf = valueDeserializer.readPopupStateChangeCallback()
        }
        const onStateChange_result : PopupStateChangeCallback | undefined = onStateChange_buf
        const arrowOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowOffset_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (arrowOffset_buf_runtimeType))
        {
            arrowOffset_buf = (valueDeserializer.readLength() as Length)
        }
        const arrowOffset_result : Length | undefined = arrowOffset_buf
        const showInSubWindow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showInSubWindow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showInSubWindow_buf_runtimeType))
        {
            showInSubWindow_buf = valueDeserializer.readBoolean()
        }
        const showInSubWindow_result : boolean | undefined = showInSubWindow_buf
        const mask_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let mask_buf : boolean | PopupMaskType | undefined
        if ((RuntimeType.UNDEFINED) != (mask_buf_runtimeType))
        {
            const mask_buf__selector : int32 = valueDeserializer.readInt8()
            let mask_buf_ : boolean | PopupMaskType | undefined
            if (mask_buf__selector == 0) {
                mask_buf_ = valueDeserializer.readBoolean()
            }
            else if (mask_buf__selector == 1) {
                const mask_buf__u_color_buf_selector : int32 = valueDeserializer.readInt8()
                let mask_buf__u_color_buf : Color | number | string | Resource | undefined
                if (mask_buf__u_color_buf_selector == 0) {
                    mask_buf__u_color_buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (mask_buf__u_color_buf_selector == 1) {
                    mask_buf__u_color_buf = (valueDeserializer.readNumber() as number)
                }
                else if (mask_buf__u_color_buf_selector == 2) {
                    mask_buf__u_color_buf = (valueDeserializer.readString() as string)
                }
                else if (mask_buf__u_color_buf_selector == 3) {
                    mask_buf__u_color_buf = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for mask_buf__u_color_buf has to be chosen through deserialisation.")
                }
                const mask_buf__u_color : ResourceColor = (mask_buf__u_color_buf as Color | number | string | Resource)
                mask_buf_ = ({color: mask_buf__u_color} as PopupMaskType)
            }
            else {
                throw new Error("One of the branches for mask_buf_ has to be chosen through deserialisation.")
            }
            mask_buf = (mask_buf_ as boolean | PopupMaskType)
        }
        const mask_result : boolean | PopupMaskType | undefined = mask_buf
        const targetSpace_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let targetSpace_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (targetSpace_buf_runtimeType))
        {
            targetSpace_buf = (valueDeserializer.readLength() as Length)
        }
        const targetSpace_result : Length | undefined = targetSpace_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Position | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readPosition()
        }
        const offset_result : Position | undefined = offset_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Dimension)
        }
        const width_result : Dimension | undefined = width_buf
        const arrowPointPosition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowPointPosition_buf : ArrowPointPosition | undefined
        if ((RuntimeType.UNDEFINED) != (arrowPointPosition_buf_runtimeType))
        {
            arrowPointPosition_buf = TypeChecker.ArrowPointPosition_FromNumeric(valueDeserializer.readInt32())
        }
        const arrowPointPosition_result : ArrowPointPosition | undefined = arrowPointPosition_buf
        const arrowWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowWidth_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (arrowWidth_buf_runtimeType))
        {
            arrowWidth_buf = (valueDeserializer.readLength() as Dimension)
        }
        const arrowWidth_result : Dimension | undefined = arrowWidth_buf
        const arrowHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowHeight_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (arrowHeight_buf_runtimeType))
        {
            arrowHeight_buf = (valueDeserializer.readLength() as Dimension)
        }
        const arrowHeight_result : Dimension | undefined = arrowHeight_buf
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            radius_buf = (valueDeserializer.readLength() as Dimension)
        }
        const radius_result : Dimension | undefined = radius_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const focusable_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let focusable_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (focusable_buf_runtimeType))
        {
            focusable_buf = valueDeserializer.readBoolean()
        }
        const focusable_result : boolean | undefined = focusable_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        const onWillDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDismiss_buf : boolean | ((parameter: DismissPopupAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDismiss_buf_runtimeType))
        {
            const onWillDismiss_buf__selector : int32 = valueDeserializer.readInt8()
            let onWillDismiss_buf_ : boolean | ((parameter: DismissPopupAction) => void) | undefined
            if (onWillDismiss_buf__selector == 0) {
                onWillDismiss_buf_ = valueDeserializer.readBoolean()
            }
            else if (onWillDismiss_buf__selector == 1) {
                onWillDismiss_buf_ = valueDeserializer.readCallback_DismissPopupAction_Void()
            }
            else {
                throw new Error("One of the branches for onWillDismiss_buf_ has to be chosen through deserialisation.")
            }
            onWillDismiss_buf = (onWillDismiss_buf_ as boolean | ((parameter: DismissPopupAction) => void))
        }
        const onWillDismiss_result : boolean | ((parameter: DismissPopupAction) => void) | undefined = onWillDismiss_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const followTransformOfTarget_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let followTransformOfTarget_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (followTransformOfTarget_buf_runtimeType))
        {
            followTransformOfTarget_buf = valueDeserializer.readBoolean()
        }
        const followTransformOfTarget_result : boolean | undefined = followTransformOfTarget_buf
        const keyboardAvoidMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let keyboardAvoidMode_buf : KeyboardAvoidMode | undefined
        if ((RuntimeType.UNDEFINED) != (keyboardAvoidMode_buf_runtimeType))
        {
            keyboardAvoidMode_buf = TypeChecker.KeyboardAvoidMode_FromNumeric(valueDeserializer.readInt32())
        }
        const keyboardAvoidMode_result : KeyboardAvoidMode | undefined = keyboardAvoidMode_buf
        let value : CustomPopupOptions = ({builder: builder_result, placement: placement_result, popupColor: popupColor_result, enableArrow: enableArrow_result, autoCancel: autoCancel_result, onStateChange: onStateChange_result, arrowOffset: arrowOffset_result, showInSubWindow: showInSubWindow_result, mask: mask_result, targetSpace: targetSpace_result, offset: offset_result, width: width_result, arrowPointPosition: arrowPointPosition_result, arrowWidth: arrowWidth_result, arrowHeight: arrowHeight_result, radius: radius_result, shadow: shadow_result, backgroundBlurStyle: backgroundBlurStyle_result, focusable: focusable_result, transition: transition_result, onWillDismiss: onWillDismiss_result, enableHoverMode: enableHoverMode_result, followTransformOfTarget: followTransformOfTarget_result, keyboardAvoidMode: keyboardAvoidMode_result} as CustomPopupOptions)
        return value
    }
    readCustomTheme(): CustomTheme {
        let valueDeserializer : Deserializer = this
        const colors_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let colors_buf : CustomColors | undefined
        if ((RuntimeType.UNDEFINED) != (colors_buf_runtimeType))
        {
            colors_buf = valueDeserializer.readCustomColors()
        }
        const colors_result : CustomColors | undefined = colors_buf
        let value : CustomTheme = ({colors: colors_result} as CustomTheme)
        return value
    }
    readDigitIndicator(): DigitIndicator {
        throw new Error("Can not deserialize builder class")
    }
    readEditableTextChangeValue(): EditableTextChangeValue {
        let valueDeserializer : Deserializer = this
        const content_result : string = (valueDeserializer.readString() as string)
        const previewText_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewText_buf : PreviewText | undefined
        if ((RuntimeType.UNDEFINED) != (previewText_buf_runtimeType))
        {
            previewText_buf = valueDeserializer.readPreviewText()
        }
        const previewText_result : PreviewText | undefined = previewText_buf
        const options_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let options_buf : TextChangeOptions | undefined
        if ((RuntimeType.UNDEFINED) != (options_buf_runtimeType))
        {
            options_buf = valueDeserializer.readTextChangeOptions()
        }
        const options_result : TextChangeOptions | undefined = options_buf
        let value : EditableTextChangeValue = ({content: content_result, previewText: previewText_result, options: options_result} as EditableTextChangeValue)
        return value
    }
    readFlexOptions(): FlexOptions {
        let valueDeserializer : Deserializer = this
        const direction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let direction_buf : FlexDirection | undefined
        if ((RuntimeType.UNDEFINED) != (direction_buf_runtimeType))
        {
            direction_buf = TypeChecker.FlexDirection_FromNumeric(valueDeserializer.readInt32())
        }
        const direction_result : FlexDirection | undefined = direction_buf
        const wrap_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let wrap_buf : FlexWrap | undefined
        if ((RuntimeType.UNDEFINED) != (wrap_buf_runtimeType))
        {
            wrap_buf = TypeChecker.FlexWrap_FromNumeric(valueDeserializer.readInt32())
        }
        const wrap_result : FlexWrap | undefined = wrap_buf
        const justifyContent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let justifyContent_buf : FlexAlign | undefined
        if ((RuntimeType.UNDEFINED) != (justifyContent_buf_runtimeType))
        {
            justifyContent_buf = TypeChecker.FlexAlign_FromNumeric(valueDeserializer.readInt32())
        }
        const justifyContent_result : FlexAlign | undefined = justifyContent_buf
        const alignItems_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignItems_buf : ItemAlign | undefined
        if ((RuntimeType.UNDEFINED) != (alignItems_buf_runtimeType))
        {
            alignItems_buf = TypeChecker.ItemAlign_FromNumeric(valueDeserializer.readInt32())
        }
        const alignItems_result : ItemAlign | undefined = alignItems_buf
        const alignContent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignContent_buf : FlexAlign | undefined
        if ((RuntimeType.UNDEFINED) != (alignContent_buf_runtimeType))
        {
            alignContent_buf = TypeChecker.FlexAlign_FromNumeric(valueDeserializer.readInt32())
        }
        const alignContent_result : FlexAlign | undefined = alignContent_buf
        const space_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let space_buf : FlexSpaceOptions | undefined
        if ((RuntimeType.UNDEFINED) != (space_buf_runtimeType))
        {
            space_buf = valueDeserializer.readFlexSpaceOptions()
        }
        const space_result : FlexSpaceOptions | undefined = space_buf
        let value : FlexOptions = ({direction: direction_result, wrap: wrap_result, justifyContent: justifyContent_result, alignItems: alignItems_result, alignContent: alignContent_result, space: space_result} as FlexOptions)
        return value
    }
    readGridRowOptions(): GridRowOptions {
        let valueDeserializer : Deserializer = this
        const gutter_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gutter_buf : Length | GutterOption | undefined
        if ((RuntimeType.UNDEFINED) != (gutter_buf_runtimeType))
        {
            const gutter_buf__selector : int32 = valueDeserializer.readInt8()
            let gutter_buf_ : Length | GutterOption | undefined
            if (gutter_buf__selector == 0) {
                gutter_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (gutter_buf__selector == 1) {
                gutter_buf_ = valueDeserializer.readGutterOption()
            }
            else {
                throw new Error("One of the branches for gutter_buf_ has to be chosen through deserialisation.")
            }
            gutter_buf = (gutter_buf_ as Length | GutterOption)
        }
        const gutter_result : Length | GutterOption | undefined = gutter_buf
        const columns_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let columns_buf : number | GridRowColumnOption | undefined
        if ((RuntimeType.UNDEFINED) != (columns_buf_runtimeType))
        {
            const columns_buf__selector : int32 = valueDeserializer.readInt8()
            let columns_buf_ : number | GridRowColumnOption | undefined
            if (columns_buf__selector == 0) {
                columns_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (columns_buf__selector == 1) {
                columns_buf_ = valueDeserializer.readGridRowColumnOption()
            }
            else {
                throw new Error("One of the branches for columns_buf_ has to be chosen through deserialisation.")
            }
            columns_buf = (columns_buf_ as number | GridRowColumnOption)
        }
        const columns_result : number | GridRowColumnOption | undefined = columns_buf
        const breakpoints_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let breakpoints_buf : BreakPoints | undefined
        if ((RuntimeType.UNDEFINED) != (breakpoints_buf_runtimeType))
        {
            breakpoints_buf = valueDeserializer.readBreakPoints()
        }
        const breakpoints_result : BreakPoints | undefined = breakpoints_buf
        const direction_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let direction_buf : GridRowDirection | undefined
        if ((RuntimeType.UNDEFINED) != (direction_buf_runtimeType))
        {
            direction_buf = TypeChecker.GridRowDirection_FromNumeric(valueDeserializer.readInt32())
        }
        const direction_result : GridRowDirection | undefined = direction_buf
        let value : GridRowOptions = ({gutter: gutter_result, columns: columns_result, breakpoints: breakpoints_result, direction: direction_result} as GridRowOptions)
        return value
    }
    readImageAttachment(): ImageAttachment {
        let valueDeserializer : Deserializer = this
        let ptr : KPointer = valueDeserializer.readPointer()
        return ImageAttachmentInternal.fromPtr(ptr)
    }
    readImageAttachmentInterface(): ImageAttachmentInterface {
        let valueDeserializer : Deserializer = this
        const value_result : PixelMap = (valueDeserializer.readPixelMap() as PixelMap)
        const size_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let size_buf : SizeOptions | undefined
        if ((RuntimeType.UNDEFINED) != (size_buf_runtimeType))
        {
            size_buf = valueDeserializer.readSizeOptions()
        }
        const size_result : SizeOptions | undefined = size_buf
        const verticalAlign_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let verticalAlign_buf : ImageSpanAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (verticalAlign_buf_runtimeType))
        {
            verticalAlign_buf = TypeChecker.ImageSpanAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const verticalAlign_result : ImageSpanAlignment | undefined = verticalAlign_buf
        const objectFit_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let objectFit_buf : ImageFit | undefined
        if ((RuntimeType.UNDEFINED) != (objectFit_buf_runtimeType))
        {
            objectFit_buf = TypeChecker.ImageFit_FromNumeric(valueDeserializer.readInt32())
        }
        const objectFit_result : ImageFit | undefined = objectFit_buf
        const layoutStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let layoutStyle_buf : ImageAttachmentLayoutStyle | undefined
        if ((RuntimeType.UNDEFINED) != (layoutStyle_buf_runtimeType))
        {
            layoutStyle_buf = valueDeserializer.readImageAttachmentLayoutStyle()
        }
        const layoutStyle_result : ImageAttachmentLayoutStyle | undefined = layoutStyle_buf
        const colorFilter_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let colorFilter_buf : ColorFilterType | undefined
        if ((RuntimeType.UNDEFINED) != (colorFilter_buf_runtimeType))
        {
            const colorFilter_buf__selector : int32 = valueDeserializer.readInt8()
            let colorFilter_buf_ : ColorFilter | DrawingColorFilter | undefined
            if (colorFilter_buf__selector == 0) {
                colorFilter_buf_ = (valueDeserializer.readColorFilter() as ColorFilter)
            }
            else if (colorFilter_buf__selector == 1) {
                colorFilter_buf_ = (valueDeserializer.readDrawingColorFilter() as DrawingColorFilter)
            }
            else {
                throw new Error("One of the branches for colorFilter_buf_ has to be chosen through deserialisation.")
            }
            colorFilter_buf = (colorFilter_buf_ as ColorFilter | DrawingColorFilter)
        }
        const colorFilter_result : ColorFilterType | undefined = colorFilter_buf
        let value : ImageAttachmentInterface = ({value: value_result, size: size_result, verticalAlign: verticalAlign_result, objectFit: objectFit_result, layoutStyle: layoutStyle_result, colorFilter: colorFilter_result} as ImageAttachmentInterface)
        return value
    }
    readLabelStyle(): LabelStyle {
        let valueDeserializer : Deserializer = this
        const overflow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let overflow_buf : TextOverflow | undefined
        if ((RuntimeType.UNDEFINED) != (overflow_buf_runtimeType))
        {
            overflow_buf = TypeChecker.TextOverflow_FromNumeric(valueDeserializer.readInt32())
        }
        const overflow_result : TextOverflow | undefined = overflow_buf
        const maxLines_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxLines_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (maxLines_buf_runtimeType))
        {
            maxLines_buf = (valueDeserializer.readNumber() as number)
        }
        const maxLines_result : number | undefined = maxLines_buf
        const minFontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let minFontSize_buf : number | ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (minFontSize_buf_runtimeType))
        {
            const minFontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let minFontSize_buf_ : number | ResourceStr | undefined
            if (minFontSize_buf__selector == 0) {
                minFontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (minFontSize_buf__selector == 1) {
                const minFontSize_buf__u_selector : int32 = valueDeserializer.readInt8()
                let minFontSize_buf__u : string | Resource | undefined
                if (minFontSize_buf__u_selector == 0) {
                    minFontSize_buf__u = (valueDeserializer.readString() as string)
                }
                else if (minFontSize_buf__u_selector == 1) {
                    minFontSize_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for minFontSize_buf__u has to be chosen through deserialisation.")
                }
                minFontSize_buf_ = (minFontSize_buf__u as string | Resource)
            }
            else {
                throw new Error("One of the branches for minFontSize_buf_ has to be chosen through deserialisation.")
            }
            minFontSize_buf = (minFontSize_buf_ as number | ResourceStr)
        }
        const minFontSize_result : number | ResourceStr | undefined = minFontSize_buf
        const maxFontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxFontSize_buf : number | ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (maxFontSize_buf_runtimeType))
        {
            const maxFontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let maxFontSize_buf_ : number | ResourceStr | undefined
            if (maxFontSize_buf__selector == 0) {
                maxFontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (maxFontSize_buf__selector == 1) {
                const maxFontSize_buf__u_selector : int32 = valueDeserializer.readInt8()
                let maxFontSize_buf__u : string | Resource | undefined
                if (maxFontSize_buf__u_selector == 0) {
                    maxFontSize_buf__u = (valueDeserializer.readString() as string)
                }
                else if (maxFontSize_buf__u_selector == 1) {
                    maxFontSize_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for maxFontSize_buf__u has to be chosen through deserialisation.")
                }
                maxFontSize_buf_ = (maxFontSize_buf__u as string | Resource)
            }
            else {
                throw new Error("One of the branches for maxFontSize_buf_ has to be chosen through deserialisation.")
            }
            maxFontSize_buf = (maxFontSize_buf_ as number | ResourceStr)
        }
        const maxFontSize_result : number | ResourceStr | undefined = maxFontSize_buf
        const heightAdaptivePolicy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let heightAdaptivePolicy_buf : TextHeightAdaptivePolicy | undefined
        if ((RuntimeType.UNDEFINED) != (heightAdaptivePolicy_buf_runtimeType))
        {
            heightAdaptivePolicy_buf = TypeChecker.TextHeightAdaptivePolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const heightAdaptivePolicy_result : TextHeightAdaptivePolicy | undefined = heightAdaptivePolicy_buf
        const font_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let font_buf : Font | undefined
        if ((RuntimeType.UNDEFINED) != (font_buf_runtimeType))
        {
            font_buf = valueDeserializer.readFont()
        }
        const font_result : Font | undefined = font_buf
        const selectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (selectedColor_buf_runtimeType))
        {
            const selectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let selectedColor_buf_ : Color | number | string | Resource | undefined
            if (selectedColor_buf__selector == 0) {
                selectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (selectedColor_buf__selector == 1) {
                selectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (selectedColor_buf__selector == 2) {
                selectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (selectedColor_buf__selector == 3) {
                selectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for selectedColor_buf_ has to be chosen through deserialisation.")
            }
            selectedColor_buf = (selectedColor_buf_ as Color | number | string | Resource)
        }
        const selectedColor_result : ResourceColor | undefined = selectedColor_buf
        const unselectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let unselectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (unselectedColor_buf_runtimeType))
        {
            const unselectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let unselectedColor_buf_ : Color | number | string | Resource | undefined
            if (unselectedColor_buf__selector == 0) {
                unselectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (unselectedColor_buf__selector == 1) {
                unselectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (unselectedColor_buf__selector == 2) {
                unselectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (unselectedColor_buf__selector == 3) {
                unselectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for unselectedColor_buf_ has to be chosen through deserialisation.")
            }
            unselectedColor_buf = (unselectedColor_buf_ as Color | number | string | Resource)
        }
        const unselectedColor_result : ResourceColor | undefined = unselectedColor_buf
        let value : LabelStyle = ({overflow: overflow_result, maxLines: maxLines_result, minFontSize: minFontSize_result, maxFontSize: maxFontSize_result, heightAdaptivePolicy: heightAdaptivePolicy_result, font: font_result, selectedColor: selectedColor_result, unselectedColor: unselectedColor_result} as LabelStyle)
        return value
    }
    readTabBarLabelStyle(): TabBarLabelStyle {
        let valueDeserializer : Deserializer = this
        const overflow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let overflow_buf : TextOverflow | undefined
        if ((RuntimeType.UNDEFINED) != (overflow_buf_runtimeType))
        {
            overflow_buf = TypeChecker.TextOverflow_FromNumeric(valueDeserializer.readInt32())
        }
        const overflow_result : TextOverflow | undefined = overflow_buf
        const maxLines_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxLines_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (maxLines_buf_runtimeType))
        {
            maxLines_buf = (valueDeserializer.readNumber() as number)
        }
        const maxLines_result : number | undefined = maxLines_buf
        const minFontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let minFontSize_buf : number | ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (minFontSize_buf_runtimeType))
        {
            const minFontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let minFontSize_buf_ : number | ResourceStr | undefined
            if (minFontSize_buf__selector == 0) {
                minFontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (minFontSize_buf__selector == 1) {
                const minFontSize_buf__u_selector : int32 = valueDeserializer.readInt8()
                let minFontSize_buf__u : string | Resource | undefined
                if (minFontSize_buf__u_selector == 0) {
                    minFontSize_buf__u = (valueDeserializer.readString() as string)
                }
                else if (minFontSize_buf__u_selector == 1) {
                    minFontSize_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for minFontSize_buf__u has to be chosen through deserialisation.")
                }
                minFontSize_buf_ = (minFontSize_buf__u as string | Resource)
            }
            else {
                throw new Error("One of the branches for minFontSize_buf_ has to be chosen through deserialisation.")
            }
            minFontSize_buf = (minFontSize_buf_ as number | ResourceStr)
        }
        const minFontSize_result : number | ResourceStr | undefined = minFontSize_buf
        const maxFontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxFontSize_buf : number | ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (maxFontSize_buf_runtimeType))
        {
            const maxFontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let maxFontSize_buf_ : number | ResourceStr | undefined
            if (maxFontSize_buf__selector == 0) {
                maxFontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (maxFontSize_buf__selector == 1) {
                const maxFontSize_buf__u_selector : int32 = valueDeserializer.readInt8()
                let maxFontSize_buf__u : string | Resource | undefined
                if (maxFontSize_buf__u_selector == 0) {
                    maxFontSize_buf__u = (valueDeserializer.readString() as string)
                }
                else if (maxFontSize_buf__u_selector == 1) {
                    maxFontSize_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for maxFontSize_buf__u has to be chosen through deserialisation.")
                }
                maxFontSize_buf_ = (maxFontSize_buf__u as string | Resource)
            }
            else {
                throw new Error("One of the branches for maxFontSize_buf_ has to be chosen through deserialisation.")
            }
            maxFontSize_buf = (maxFontSize_buf_ as number | ResourceStr)
        }
        const maxFontSize_result : number | ResourceStr | undefined = maxFontSize_buf
        const heightAdaptivePolicy_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let heightAdaptivePolicy_buf : TextHeightAdaptivePolicy | undefined
        if ((RuntimeType.UNDEFINED) != (heightAdaptivePolicy_buf_runtimeType))
        {
            heightAdaptivePolicy_buf = TypeChecker.TextHeightAdaptivePolicy_FromNumeric(valueDeserializer.readInt32())
        }
        const heightAdaptivePolicy_result : TextHeightAdaptivePolicy | undefined = heightAdaptivePolicy_buf
        const font_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let font_buf : Font | undefined
        if ((RuntimeType.UNDEFINED) != (font_buf_runtimeType))
        {
            font_buf = valueDeserializer.readFont()
        }
        const font_result : Font | undefined = font_buf
        const selectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (selectedColor_buf_runtimeType))
        {
            const selectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let selectedColor_buf_ : Color | number | string | Resource | undefined
            if (selectedColor_buf__selector == 0) {
                selectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (selectedColor_buf__selector == 1) {
                selectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (selectedColor_buf__selector == 2) {
                selectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (selectedColor_buf__selector == 3) {
                selectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for selectedColor_buf_ has to be chosen through deserialisation.")
            }
            selectedColor_buf = (selectedColor_buf_ as Color | number | string | Resource)
        }
        const selectedColor_result : ResourceColor | undefined = selectedColor_buf
        const unselectedColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let unselectedColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (unselectedColor_buf_runtimeType))
        {
            const unselectedColor_buf__selector : int32 = valueDeserializer.readInt8()
            let unselectedColor_buf_ : Color | number | string | Resource | undefined
            if (unselectedColor_buf__selector == 0) {
                unselectedColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (unselectedColor_buf__selector == 1) {
                unselectedColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (unselectedColor_buf__selector == 2) {
                unselectedColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (unselectedColor_buf__selector == 3) {
                unselectedColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for unselectedColor_buf_ has to be chosen through deserialisation.")
            }
            unselectedColor_buf = (unselectedColor_buf_ as Color | number | string | Resource)
        }
        const unselectedColor_result : ResourceColor | undefined = unselectedColor_buf
        let value : TabBarLabelStyle = ({overflow: overflow_result, maxLines: maxLines_result, minFontSize: minFontSize_result, maxFontSize: maxFontSize_result, heightAdaptivePolicy: heightAdaptivePolicy_result, font: font_result, selectedColor: selectedColor_result, unselectedColor: unselectedColor_result} as TabBarLabelStyle)
        return value
    }
    readMenuOutlineOptions(): MenuOutlineOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Dimension | EdgeOutlineWidths | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : Dimension | EdgeOutlineWidths | undefined
            if (width_buf__selector == 0) {
                width_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (width_buf__selector == 1) {
                width_buf_ = valueDeserializer.readEdgeOutlineWidths()
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as Dimension | EdgeOutlineWidths)
        }
        const width_result : Dimension | EdgeOutlineWidths | undefined = width_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | EdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : ResourceColor | EdgeColors | undefined
            if (color_buf__selector == 0) {
                const color_buf__u_selector : int32 = valueDeserializer.readInt8()
                let color_buf__u : Color | number | string | Resource | undefined
                if (color_buf__u_selector == 0) {
                    color_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (color_buf__u_selector == 1) {
                    color_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (color_buf__u_selector == 2) {
                    color_buf__u = (valueDeserializer.readString() as string)
                }
                else if (color_buf__u_selector == 3) {
                    color_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for color_buf__u has to be chosen through deserialisation.")
                }
                color_buf_ = (color_buf__u as Color | number | string | Resource)
            }
            else if (color_buf__selector == 1) {
                color_buf_ = valueDeserializer.readEdgeColors()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as ResourceColor | EdgeColors)
        }
        const color_result : ResourceColor | EdgeColors | undefined = color_buf
        let value : MenuOutlineOptions = ({width: width_result, color: color_result} as MenuOutlineOptions)
        return value
    }
    readMoreButtonOptions(): MoreButtonOptions {
        let valueDeserializer : Deserializer = this
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        let value : MoreButtonOptions = ({backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result} as MoreButtonOptions)
        return value
    }
    readNativeEmbedDataInfo(): NativeEmbedDataInfo {
        let valueDeserializer : Deserializer = this
        const status_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let status_buf : NativeEmbedStatus | undefined
        if ((RuntimeType.UNDEFINED) != (status_buf_runtimeType))
        {
            status_buf = TypeChecker.NativeEmbedStatus_FromNumeric(valueDeserializer.readInt32())
        }
        const status_result : NativeEmbedStatus | undefined = status_buf
        const surfaceId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let surfaceId_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (surfaceId_buf_runtimeType))
        {
            surfaceId_buf = (valueDeserializer.readString() as string)
        }
        const surfaceId_result : string | undefined = surfaceId_buf
        const embedId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let embedId_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (embedId_buf_runtimeType))
        {
            embedId_buf = (valueDeserializer.readString() as string)
        }
        const embedId_result : string | undefined = embedId_buf
        const info_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let info_buf : NativeEmbedInfo | undefined
        if ((RuntimeType.UNDEFINED) != (info_buf_runtimeType))
        {
            info_buf = valueDeserializer.readNativeEmbedInfo()
        }
        const info_result : NativeEmbedInfo | undefined = info_buf
        let value : NativeEmbedDataInfo = ({status: status_result, surfaceId: surfaceId_result, embedId: embedId_result, info: info_result} as NativeEmbedDataInfo)
        return value
    }
    readNativeEmbedTouchInfo(): NativeEmbedTouchInfo {
        let valueDeserializer : Deserializer = this
        const embedId_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let embedId_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (embedId_buf_runtimeType))
        {
            embedId_buf = (valueDeserializer.readString() as string)
        }
        const embedId_result : string | undefined = embedId_buf
        const touchEvent_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let touchEvent_buf : TouchEvent | undefined
        if ((RuntimeType.UNDEFINED) != (touchEvent_buf_runtimeType))
        {
            touchEvent_buf = (valueDeserializer.readTouchEvent() as TouchEvent)
        }
        const touchEvent_result : TouchEvent | undefined = touchEvent_buf
        const result_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let result_buf : EventResult | undefined
        if ((RuntimeType.UNDEFINED) != (result_buf_runtimeType))
        {
            result_buf = (valueDeserializer.readEventResult() as EventResult)
        }
        const result_result : EventResult | undefined = result_buf
        let value : NativeEmbedTouchInfo = ({embedId: embedId_result, touchEvent: touchEvent_result, result: result_result} as NativeEmbedTouchInfo)
        return value
    }
    readNavigationTitleOptions(): NavigationTitleOptions {
        let valueDeserializer : Deserializer = this
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const barStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let barStyle_buf : BarStyle | undefined
        if ((RuntimeType.UNDEFINED) != (barStyle_buf_runtimeType))
        {
            barStyle_buf = TypeChecker.BarStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const barStyle_result : BarStyle | undefined = barStyle_buf
        const paddingStart_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let paddingStart_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (paddingStart_buf_runtimeType))
        {
            paddingStart_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const paddingStart_result : LengthMetrics | undefined = paddingStart_buf
        const paddingEnd_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let paddingEnd_buf : LengthMetrics | undefined
        if ((RuntimeType.UNDEFINED) != (paddingEnd_buf_runtimeType))
        {
            paddingEnd_buf = (valueDeserializer.readLengthMetrics() as LengthMetrics)
        }
        const paddingEnd_result : LengthMetrics | undefined = paddingEnd_buf
        let value : NavigationTitleOptions = ({backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, barStyle: barStyle_result, paddingStart: paddingStart_result, paddingEnd: paddingEnd_result} as NavigationTitleOptions)
        return value
    }
    readOutlineOptions(): OutlineOptions {
        let valueDeserializer : Deserializer = this
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : EdgeOutlineWidths | Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            const width_buf__selector : int32 = valueDeserializer.readInt8()
            let width_buf_ : EdgeOutlineWidths | Dimension | undefined
            if (width_buf__selector == 0) {
                width_buf_ = valueDeserializer.readEdgeOutlineWidths()
            }
            else if (width_buf__selector == 1) {
                width_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else {
                throw new Error("One of the branches for width_buf_ has to be chosen through deserialisation.")
            }
            width_buf = (width_buf_ as EdgeOutlineWidths | Dimension)
        }
        const width_result : EdgeOutlineWidths | Dimension | undefined = width_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : EdgeColors | ResourceColor | LocalizedEdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : EdgeColors | ResourceColor | LocalizedEdgeColors | undefined
            if (color_buf__selector == 0) {
                color_buf_ = valueDeserializer.readEdgeColors()
            }
            else if (color_buf__selector == 1) {
                const color_buf__u_selector : int32 = valueDeserializer.readInt8()
                let color_buf__u : Color | number | string | Resource | undefined
                if (color_buf__u_selector == 0) {
                    color_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (color_buf__u_selector == 1) {
                    color_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (color_buf__u_selector == 2) {
                    color_buf__u = (valueDeserializer.readString() as string)
                }
                else if (color_buf__u_selector == 3) {
                    color_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for color_buf__u has to be chosen through deserialisation.")
                }
                color_buf_ = (color_buf__u as Color | number | string | Resource)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = valueDeserializer.readLocalizedEdgeColors()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as EdgeColors | ResourceColor | LocalizedEdgeColors)
        }
        const color_result : EdgeColors | ResourceColor | LocalizedEdgeColors | undefined = color_buf
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : OutlineRadiuses | Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            const radius_buf__selector : int32 = valueDeserializer.readInt8()
            let radius_buf_ : OutlineRadiuses | Dimension | undefined
            if (radius_buf__selector == 0) {
                radius_buf_ = valueDeserializer.readOutlineRadiuses()
            }
            else if (radius_buf__selector == 1) {
                radius_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else {
                throw new Error("One of the branches for radius_buf_ has to be chosen through deserialisation.")
            }
            radius_buf = (radius_buf_ as OutlineRadiuses | Dimension)
        }
        const radius_result : OutlineRadiuses | Dimension | undefined = radius_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : EdgeOutlineStyles | OutlineStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            const style_buf__selector : int32 = valueDeserializer.readInt8()
            let style_buf_ : EdgeOutlineStyles | OutlineStyle | undefined
            if (style_buf__selector == 0) {
                style_buf_ = valueDeserializer.readEdgeOutlineStyles()
            }
            else if (style_buf__selector == 1) {
                style_buf_ = TypeChecker.OutlineStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for style_buf_ has to be chosen through deserialisation.")
            }
            style_buf = (style_buf_ as EdgeOutlineStyles | OutlineStyle)
        }
        const style_result : EdgeOutlineStyles | OutlineStyle | undefined = style_buf
        let value : OutlineOptions = ({width: width_result, color: color_result, radius: radius_result, style: style_result} as OutlineOptions)
        return value
    }
    readPickerTextStyle(): PickerTextStyle {
        let valueDeserializer : Deserializer = this
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const font_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let font_buf : Font | undefined
        if ((RuntimeType.UNDEFINED) != (font_buf_runtimeType))
        {
            font_buf = valueDeserializer.readFont()
        }
        const font_result : Font | undefined = font_buf
        let value : PickerTextStyle = ({color: color_result, font: font_result} as PickerTextStyle)
        return value
    }
    readPlaceholderStyle(): PlaceholderStyle {
        let valueDeserializer : Deserializer = this
        const font_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let font_buf : Font | undefined
        if ((RuntimeType.UNDEFINED) != (font_buf_runtimeType))
        {
            font_buf = valueDeserializer.readFont()
        }
        const font_result : Font | undefined = font_buf
        const fontColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontColor_buf_runtimeType))
        {
            const fontColor_buf__selector : int32 = valueDeserializer.readInt8()
            let fontColor_buf_ : Color | number | string | Resource | undefined
            if (fontColor_buf__selector == 0) {
                fontColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontColor_buf__selector == 1) {
                fontColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontColor_buf__selector == 2) {
                fontColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontColor_buf__selector == 3) {
                fontColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontColor_buf_ has to be chosen through deserialisation.")
            }
            fontColor_buf = (fontColor_buf_ as Color | number | string | Resource)
        }
        const fontColor_result : ResourceColor | undefined = fontColor_buf
        let value : PlaceholderStyle = ({font: font_result, fontColor: fontColor_result} as PlaceholderStyle)
        return value
    }
    readPointLightStyle(): PointLightStyle {
        let valueDeserializer : Deserializer = this
        const lightSource_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lightSource_buf : LightSource | undefined
        if ((RuntimeType.UNDEFINED) != (lightSource_buf_runtimeType))
        {
            lightSource_buf = valueDeserializer.readLightSource()
        }
        const lightSource_result : LightSource | undefined = lightSource_buf
        const illuminated_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let illuminated_buf : IlluminatedType | undefined
        if ((RuntimeType.UNDEFINED) != (illuminated_buf_runtimeType))
        {
            illuminated_buf = TypeChecker.IlluminatedType_FromNumeric(valueDeserializer.readInt32())
        }
        const illuminated_result : IlluminatedType | undefined = illuminated_buf
        const bloom_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let bloom_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (bloom_buf_runtimeType))
        {
            bloom_buf = (valueDeserializer.readNumber() as number)
        }
        const bloom_result : number | undefined = bloom_buf
        let value : PointLightStyle = ({lightSource: lightSource_result, illuminated: illuminated_result, bloom: bloom_result} as PointLightStyle)
        return value
    }
    readPopupMessageOptions(): PopupMessageOptions {
        let valueDeserializer : Deserializer = this
        const textColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (textColor_buf_runtimeType))
        {
            const textColor_buf__selector : int32 = valueDeserializer.readInt8()
            let textColor_buf_ : Color | number | string | Resource | undefined
            if (textColor_buf__selector == 0) {
                textColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (textColor_buf__selector == 1) {
                textColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (textColor_buf__selector == 2) {
                textColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (textColor_buf__selector == 3) {
                textColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for textColor_buf_ has to be chosen through deserialisation.")
            }
            textColor_buf = (textColor_buf_ as Color | number | string | Resource)
        }
        const textColor_result : ResourceColor | undefined = textColor_buf
        const font_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let font_buf : Font | undefined
        if ((RuntimeType.UNDEFINED) != (font_buf_runtimeType))
        {
            font_buf = valueDeserializer.readFont()
        }
        const font_result : Font | undefined = font_buf
        let value : PopupMessageOptions = ({textColor: textColor_result, font: font_result} as PopupMessageOptions)
        return value
    }
    readResourceImageAttachmentOptions(): ResourceImageAttachmentOptions {
        let valueDeserializer : Deserializer = this
        const resourceValue_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let resourceValue_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (resourceValue_buf_runtimeType))
        {
            const resourceValue_buf__selector : int32 = valueDeserializer.readInt8()
            let resourceValue_buf_ : string | Resource | undefined
            if (resourceValue_buf__selector == 0) {
                resourceValue_buf_ = (valueDeserializer.readString() as string)
            }
            else if (resourceValue_buf__selector == 1) {
                resourceValue_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for resourceValue_buf_ has to be chosen through deserialisation.")
            }
            resourceValue_buf = (resourceValue_buf_ as string | Resource)
        }
        const resourceValue_result : ResourceStr | undefined = resourceValue_buf
        const size_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let size_buf : SizeOptions | undefined
        if ((RuntimeType.UNDEFINED) != (size_buf_runtimeType))
        {
            size_buf = valueDeserializer.readSizeOptions()
        }
        const size_result : SizeOptions | undefined = size_buf
        const verticalAlign_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let verticalAlign_buf : ImageSpanAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (verticalAlign_buf_runtimeType))
        {
            verticalAlign_buf = TypeChecker.ImageSpanAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const verticalAlign_result : ImageSpanAlignment | undefined = verticalAlign_buf
        const objectFit_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let objectFit_buf : ImageFit | undefined
        if ((RuntimeType.UNDEFINED) != (objectFit_buf_runtimeType))
        {
            objectFit_buf = TypeChecker.ImageFit_FromNumeric(valueDeserializer.readInt32())
        }
        const objectFit_result : ImageFit | undefined = objectFit_buf
        const layoutStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let layoutStyle_buf : ImageAttachmentLayoutStyle | undefined
        if ((RuntimeType.UNDEFINED) != (layoutStyle_buf_runtimeType))
        {
            layoutStyle_buf = valueDeserializer.readImageAttachmentLayoutStyle()
        }
        const layoutStyle_result : ImageAttachmentLayoutStyle | undefined = layoutStyle_buf
        const colorFilter_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let colorFilter_buf : ColorFilterType | undefined
        if ((RuntimeType.UNDEFINED) != (colorFilter_buf_runtimeType))
        {
            const colorFilter_buf__selector : int32 = valueDeserializer.readInt8()
            let colorFilter_buf_ : ColorFilter | DrawingColorFilter | undefined
            if (colorFilter_buf__selector == 0) {
                colorFilter_buf_ = (valueDeserializer.readColorFilter() as ColorFilter)
            }
            else if (colorFilter_buf__selector == 1) {
                colorFilter_buf_ = (valueDeserializer.readDrawingColorFilter() as DrawingColorFilter)
            }
            else {
                throw new Error("One of the branches for colorFilter_buf_ has to be chosen through deserialisation.")
            }
            colorFilter_buf = (colorFilter_buf_ as ColorFilter | DrawingColorFilter)
        }
        const colorFilter_result : ColorFilterType | undefined = colorFilter_buf
        const syncLoad_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let syncLoad_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (syncLoad_buf_runtimeType))
        {
            syncLoad_buf = valueDeserializer.readBoolean()
        }
        const syncLoad_result : boolean | undefined = syncLoad_buf
        let value : ResourceImageAttachmentOptions = ({resourceValue: resourceValue_result, size: size_result, verticalAlign: verticalAlign_result, objectFit: objectFit_result, layoutStyle: layoutStyle_result, colorFilter: colorFilter_result, syncLoad: syncLoad_result} as ResourceImageAttachmentOptions)
        return value
    }
    readRichEditorImageSpanStyle(): RichEditorImageSpanStyle {
        let valueDeserializer : Deserializer = this
        const size_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let size_buf : [ Dimension, Dimension ] | undefined
        if ((RuntimeType.UNDEFINED) != (size_buf_runtimeType))
        {
            const size_buf__value0 : Dimension = (valueDeserializer.readLength() as Dimension)
            const size_buf__value1 : Dimension = (valueDeserializer.readLength() as Dimension)
            size_buf = ([size_buf__value0, size_buf__value1] as [ Dimension, Dimension ])
        }
        const size_result : [ Dimension, Dimension ] | undefined = size_buf
        const verticalAlign_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let verticalAlign_buf : ImageSpanAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (verticalAlign_buf_runtimeType))
        {
            verticalAlign_buf = TypeChecker.ImageSpanAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const verticalAlign_result : ImageSpanAlignment | undefined = verticalAlign_buf
        const objectFit_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let objectFit_buf : ImageFit | undefined
        if ((RuntimeType.UNDEFINED) != (objectFit_buf_runtimeType))
        {
            objectFit_buf = TypeChecker.ImageFit_FromNumeric(valueDeserializer.readInt32())
        }
        const objectFit_result : ImageFit | undefined = objectFit_buf
        const layoutStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let layoutStyle_buf : RichEditorLayoutStyle | undefined
        if ((RuntimeType.UNDEFINED) != (layoutStyle_buf_runtimeType))
        {
            layoutStyle_buf = valueDeserializer.readRichEditorLayoutStyle()
        }
        const layoutStyle_result : RichEditorLayoutStyle | undefined = layoutStyle_buf
        let value : RichEditorImageSpanStyle = ({size: size_result, verticalAlign: verticalAlign_result, objectFit: objectFit_result, layoutStyle: layoutStyle_result} as RichEditorImageSpanStyle)
        return value
    }
    readRichEditorImageSpanStyleResult(): RichEditorImageSpanStyleResult {
        let valueDeserializer : Deserializer = this
        const size_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const size_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const size_result : [ number, number ] = ([size_buf_value0, size_buf_value1] as [ number, number ])
        const verticalAlign_result : ImageSpanAlignment = TypeChecker.ImageSpanAlignment_FromNumeric(valueDeserializer.readInt32())
        const objectFit_result : ImageFit = TypeChecker.ImageFit_FromNumeric(valueDeserializer.readInt32())
        const layoutStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let layoutStyle_buf : RichEditorLayoutStyle | undefined
        if ((RuntimeType.UNDEFINED) != (layoutStyle_buf_runtimeType))
        {
            layoutStyle_buf = valueDeserializer.readRichEditorLayoutStyle()
        }
        const layoutStyle_result : RichEditorLayoutStyle | undefined = layoutStyle_buf
        let value : RichEditorImageSpanStyleResult = ({size: size_result, verticalAlign: verticalAlign_result, objectFit: objectFit_result, layoutStyle: layoutStyle_result} as RichEditorImageSpanStyleResult)
        return value
    }
    readRichEditorParagraphResult(): RichEditorParagraphResult {
        let valueDeserializer : Deserializer = this
        const style_result : RichEditorParagraphStyle = valueDeserializer.readRichEditorParagraphStyle()
        const range_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const range_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const range_result : [ number, number ] = ([range_buf_value0, range_buf_value1] as [ number, number ])
        let value : RichEditorParagraphResult = ({style: style_result, range: range_result} as RichEditorParagraphResult)
        return value
    }
    readRichEditorSymbolSpanOptions(): RichEditorSymbolSpanOptions {
        let valueDeserializer : Deserializer = this
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = (valueDeserializer.readNumber() as number)
        }
        const offset_result : number | undefined = offset_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : RichEditorSymbolSpanStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = valueDeserializer.readRichEditorSymbolSpanStyle()
        }
        const style_result : RichEditorSymbolSpanStyle | undefined = style_buf
        let value : RichEditorSymbolSpanOptions = ({offset: offset_result, style: style_result} as RichEditorSymbolSpanOptions)
        return value
    }
    readRichEditorTextStyle(): RichEditorTextStyle {
        let valueDeserializer : Deserializer = this
        const fontColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (fontColor_buf_runtimeType))
        {
            const fontColor_buf__selector : int32 = valueDeserializer.readInt8()
            let fontColor_buf_ : Color | number | string | Resource | undefined
            if (fontColor_buf__selector == 0) {
                fontColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontColor_buf__selector == 1) {
                fontColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontColor_buf__selector == 2) {
                fontColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontColor_buf__selector == 3) {
                fontColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontColor_buf_ has to be chosen through deserialisation.")
            }
            fontColor_buf = (fontColor_buf_ as Color | number | string | Resource)
        }
        const fontColor_result : ResourceColor | undefined = fontColor_buf
        const fontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontSize_buf : Length | number | undefined
        if ((RuntimeType.UNDEFINED) != (fontSize_buf_runtimeType))
        {
            const fontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let fontSize_buf_ : Length | number | undefined
            if (fontSize_buf__selector == 0) {
                fontSize_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (fontSize_buf__selector == 1) {
                fontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for fontSize_buf_ has to be chosen through deserialisation.")
            }
            fontSize_buf = (fontSize_buf_ as Length | number)
        }
        const fontSize_result : Length | number | undefined = fontSize_buf
        const fontStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontStyle_buf : FontStyle | undefined
        if ((RuntimeType.UNDEFINED) != (fontStyle_buf_runtimeType))
        {
            fontStyle_buf = TypeChecker.FontStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const fontStyle_result : FontStyle | undefined = fontStyle_buf
        const fontWeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontWeight_buf : number | FontWeight | string | undefined
        if ((RuntimeType.UNDEFINED) != (fontWeight_buf_runtimeType))
        {
            const fontWeight_buf__selector : int32 = valueDeserializer.readInt8()
            let fontWeight_buf_ : number | FontWeight | string | undefined
            if (fontWeight_buf__selector == 0) {
                fontWeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (fontWeight_buf__selector == 1) {
                fontWeight_buf_ = TypeChecker.FontWeight_FromNumeric(valueDeserializer.readInt32())
            }
            else if (fontWeight_buf__selector == 2) {
                fontWeight_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for fontWeight_buf_ has to be chosen through deserialisation.")
            }
            fontWeight_buf = (fontWeight_buf_ as number | FontWeight | string)
        }
        const fontWeight_result : number | FontWeight | string | undefined = fontWeight_buf
        const fontFamily_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontFamily_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (fontFamily_buf_runtimeType))
        {
            const fontFamily_buf__selector : int32 = valueDeserializer.readInt8()
            let fontFamily_buf_ : string | Resource | undefined
            if (fontFamily_buf__selector == 0) {
                fontFamily_buf_ = (valueDeserializer.readString() as string)
            }
            else if (fontFamily_buf__selector == 1) {
                fontFamily_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for fontFamily_buf_ has to be chosen through deserialisation.")
            }
            fontFamily_buf = (fontFamily_buf_ as string | Resource)
        }
        const fontFamily_result : ResourceStr | undefined = fontFamily_buf
        const decoration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let decoration_buf : DecorationStyleInterface | undefined
        if ((RuntimeType.UNDEFINED) != (decoration_buf_runtimeType))
        {
            decoration_buf = valueDeserializer.readDecorationStyleInterface()
        }
        const decoration_result : DecorationStyleInterface | undefined = decoration_buf
        const textShadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textShadow_buf : ShadowOptions | Array<ShadowOptions> | undefined
        if ((RuntimeType.UNDEFINED) != (textShadow_buf_runtimeType))
        {
            const textShadow_buf__selector : int32 = valueDeserializer.readInt8()
            let textShadow_buf_ : ShadowOptions | Array<ShadowOptions> | undefined
            if (textShadow_buf__selector == 0) {
                textShadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (textShadow_buf__selector == 1) {
                const textShadow_buf__u_length : int32 = valueDeserializer.readInt32()
                let textShadow_buf__u : Array<ShadowOptions> = new Array<ShadowOptions>(textShadow_buf__u_length)
                for (let textShadow_buf__u_i = 0; textShadow_buf__u_i < textShadow_buf__u_length; textShadow_buf__u_i++) {
                    textShadow_buf__u[textShadow_buf__u_i] = valueDeserializer.readShadowOptions()
                }
                textShadow_buf_ = textShadow_buf__u
            }
            else {
                throw new Error("One of the branches for textShadow_buf_ has to be chosen through deserialisation.")
            }
            textShadow_buf = (textShadow_buf_ as ShadowOptions | Array<ShadowOptions>)
        }
        const textShadow_result : ShadowOptions | Array<ShadowOptions> | undefined = textShadow_buf
        const letterSpacing_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let letterSpacing_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (letterSpacing_buf_runtimeType))
        {
            const letterSpacing_buf__selector : int32 = valueDeserializer.readInt8()
            let letterSpacing_buf_ : number | string | undefined
            if (letterSpacing_buf__selector == 0) {
                letterSpacing_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (letterSpacing_buf__selector == 1) {
                letterSpacing_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for letterSpacing_buf_ has to be chosen through deserialisation.")
            }
            letterSpacing_buf = (letterSpacing_buf_ as number | string)
        }
        const letterSpacing_result : number | string | undefined = letterSpacing_buf
        const lineHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lineHeight_buf : number | string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (lineHeight_buf_runtimeType))
        {
            const lineHeight_buf__selector : int32 = valueDeserializer.readInt8()
            let lineHeight_buf_ : number | string | Resource | undefined
            if (lineHeight_buf__selector == 0) {
                lineHeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (lineHeight_buf__selector == 1) {
                lineHeight_buf_ = (valueDeserializer.readString() as string)
            }
            else if (lineHeight_buf__selector == 2) {
                lineHeight_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for lineHeight_buf_ has to be chosen through deserialisation.")
            }
            lineHeight_buf = (lineHeight_buf_ as number | string | Resource)
        }
        const lineHeight_result : number | string | Resource | undefined = lineHeight_buf
        const halfLeading_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let halfLeading_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (halfLeading_buf_runtimeType))
        {
            halfLeading_buf = valueDeserializer.readBoolean()
        }
        const halfLeading_result : boolean | undefined = halfLeading_buf
        const fontFeature_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontFeature_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (fontFeature_buf_runtimeType))
        {
            fontFeature_buf = (valueDeserializer.readString() as string)
        }
        const fontFeature_result : string | undefined = fontFeature_buf
        const textBackgroundStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textBackgroundStyle_buf : TextBackgroundStyle | undefined
        if ((RuntimeType.UNDEFINED) != (textBackgroundStyle_buf_runtimeType))
        {
            textBackgroundStyle_buf = valueDeserializer.readTextBackgroundStyle()
        }
        const textBackgroundStyle_result : TextBackgroundStyle | undefined = textBackgroundStyle_buf
        let value : RichEditorTextStyle = ({fontColor: fontColor_result, fontSize: fontSize_result, fontStyle: fontStyle_result, fontWeight: fontWeight_result, fontFamily: fontFamily_result, decoration: decoration_result, textShadow: textShadow_result, letterSpacing: letterSpacing_result, lineHeight: lineHeight_result, halfLeading: halfLeading_result, fontFeature: fontFeature_result, textBackgroundStyle: textBackgroundStyle_result} as RichEditorTextStyle)
        return value
    }
    readRichEditorTextStyleResult(): RichEditorTextStyleResult {
        let valueDeserializer : Deserializer = this
        const fontColor_buf_selector : int32 = valueDeserializer.readInt8()
        let fontColor_buf : Color | number | string | Resource | undefined
        if (fontColor_buf_selector == 0) {
            fontColor_buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
        }
        else if (fontColor_buf_selector == 1) {
            fontColor_buf = (valueDeserializer.readNumber() as number)
        }
        else if (fontColor_buf_selector == 2) {
            fontColor_buf = (valueDeserializer.readString() as string)
        }
        else if (fontColor_buf_selector == 3) {
            fontColor_buf = valueDeserializer.readResource()
        }
        else {
            throw new Error("One of the branches for fontColor_buf has to be chosen through deserialisation.")
        }
        const fontColor_result : ResourceColor = (fontColor_buf as Color | number | string | Resource)
        const fontSize_result : number = (valueDeserializer.readNumber() as number)
        const fontStyle_result : FontStyle = TypeChecker.FontStyle_FromNumeric(valueDeserializer.readInt32())
        const fontWeight_result : number = (valueDeserializer.readNumber() as number)
        const fontFamily_result : string = (valueDeserializer.readString() as string)
        const decoration_result : DecorationStyleResult = valueDeserializer.readDecorationStyleResult()
        const textShadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textShadow_buf : Array<ShadowOptions> | undefined
        if ((RuntimeType.UNDEFINED) != (textShadow_buf_runtimeType))
        {
            const textShadow_buf__length : int32 = valueDeserializer.readInt32()
            let textShadow_buf_ : Array<ShadowOptions> = new Array<ShadowOptions>(textShadow_buf__length)
            for (let textShadow_buf__i = 0; textShadow_buf__i < textShadow_buf__length; textShadow_buf__i++) {
                textShadow_buf_[textShadow_buf__i] = valueDeserializer.readShadowOptions()
            }
            textShadow_buf = textShadow_buf_
        }
        const textShadow_result : Array<ShadowOptions> | undefined = textShadow_buf
        const letterSpacing_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let letterSpacing_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (letterSpacing_buf_runtimeType))
        {
            letterSpacing_buf = (valueDeserializer.readNumber() as number)
        }
        const letterSpacing_result : number | undefined = letterSpacing_buf
        const lineHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lineHeight_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (lineHeight_buf_runtimeType))
        {
            lineHeight_buf = (valueDeserializer.readNumber() as number)
        }
        const lineHeight_result : number | undefined = lineHeight_buf
        const halfLeading_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let halfLeading_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (halfLeading_buf_runtimeType))
        {
            halfLeading_buf = valueDeserializer.readBoolean()
        }
        const halfLeading_result : boolean | undefined = halfLeading_buf
        const fontFeature_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let fontFeature_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (fontFeature_buf_runtimeType))
        {
            fontFeature_buf = (valueDeserializer.readString() as string)
        }
        const fontFeature_result : string | undefined = fontFeature_buf
        const textBackgroundStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textBackgroundStyle_buf : TextBackgroundStyle | undefined
        if ((RuntimeType.UNDEFINED) != (textBackgroundStyle_buf_runtimeType))
        {
            textBackgroundStyle_buf = valueDeserializer.readTextBackgroundStyle()
        }
        const textBackgroundStyle_result : TextBackgroundStyle | undefined = textBackgroundStyle_buf
        let value : RichEditorTextStyleResult = ({fontColor: fontColor_result, fontSize: fontSize_result, fontStyle: fontStyle_result, fontWeight: fontWeight_result, fontFamily: fontFamily_result, decoration: decoration_result, textShadow: textShadow_result, letterSpacing: letterSpacing_result, lineHeight: lineHeight_result, halfLeading: halfLeading_result, fontFeature: fontFeature_result, textBackgroundStyle: textBackgroundStyle_result} as RichEditorTextStyleResult)
        return value
    }
    readRichEditorUpdateImageSpanStyleOptions(): RichEditorUpdateImageSpanStyleOptions {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readNumber() as number)
        }
        const start_result : number | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readNumber() as number)
        }
        const end_result : number | undefined = end_buf
        const imageStyle_result : RichEditorImageSpanStyle = valueDeserializer.readRichEditorImageSpanStyle()
        let value : RichEditorUpdateImageSpanStyleOptions = ({start: start_result, end: end_result, imageStyle: imageStyle_result} as RichEditorUpdateImageSpanStyleOptions)
        return value
    }
    readRichEditorUpdateTextSpanStyleOptions(): RichEditorUpdateTextSpanStyleOptions {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readNumber() as number)
        }
        const start_result : number | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = (valueDeserializer.readNumber() as number)
        }
        const end_result : number | undefined = end_buf
        const textStyle_result : RichEditorTextStyle = valueDeserializer.readRichEditorTextStyle()
        const urlStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let urlStyle_buf : RichEditorUrlStyle | undefined
        if ((RuntimeType.UNDEFINED) != (urlStyle_buf_runtimeType))
        {
            urlStyle_buf = valueDeserializer.readRichEditorUrlStyle()
        }
        const urlStyle_result : RichEditorUrlStyle | undefined = urlStyle_buf
        let value : RichEditorUpdateTextSpanStyleOptions = ({start: start_result, end: end_result, textStyle: textStyle_result, urlStyle: urlStyle_result} as RichEditorUpdateTextSpanStyleOptions)
        return value
    }
    readSheetOptions(): SheetOptions {
        let valueDeserializer : Deserializer = this
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const onAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAppear_buf_runtimeType))
        {
            onAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onAppear_result : (() => void) | undefined = onAppear_buf
        const onDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDisappear_buf_runtimeType))
        {
            onDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDisappear_result : (() => void) | undefined = onDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillAppear_result : (() => void) | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillDisappear_result : (() => void) | undefined = onWillDisappear_buf
        const height_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let height_buf : SheetSize | Length | undefined
        if ((RuntimeType.UNDEFINED) != (height_buf_runtimeType))
        {
            const height_buf__selector : int32 = valueDeserializer.readInt8()
            let height_buf_ : SheetSize | Length | undefined
            if (height_buf__selector == 0) {
                height_buf_ = TypeChecker.SheetSize_FromNumeric(valueDeserializer.readInt32())
            }
            else if (height_buf__selector == 1) {
                height_buf_ = (valueDeserializer.readLength() as Length)
            }
            else {
                throw new Error("One of the branches for height_buf_ has to be chosen through deserialisation.")
            }
            height_buf = (height_buf_ as SheetSize | Length)
        }
        const height_result : SheetSize | Length | undefined = height_buf
        const dragBar_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dragBar_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (dragBar_buf_runtimeType))
        {
            dragBar_buf = valueDeserializer.readBoolean()
        }
        const dragBar_result : boolean | undefined = dragBar_buf
        const maskColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (maskColor_buf_runtimeType))
        {
            const maskColor_buf__selector : int32 = valueDeserializer.readInt8()
            let maskColor_buf_ : Color | number | string | Resource | undefined
            if (maskColor_buf__selector == 0) {
                maskColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (maskColor_buf__selector == 1) {
                maskColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (maskColor_buf__selector == 2) {
                maskColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (maskColor_buf__selector == 3) {
                maskColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for maskColor_buf_ has to be chosen through deserialisation.")
            }
            maskColor_buf = (maskColor_buf_ as Color | number | string | Resource)
        }
        const maskColor_result : ResourceColor | undefined = maskColor_buf
        const detents_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let detents_buf : [ SheetSize | Length, SheetSize | Length | undefined, SheetSize | Length | undefined ] | undefined
        if ((RuntimeType.UNDEFINED) != (detents_buf_runtimeType))
        {
            const detents_buf__value0_buf_selector : int32 = valueDeserializer.readInt8()
            let detents_buf__value0_buf : SheetSize | Length | undefined
            if (detents_buf__value0_buf_selector == 0) {
                detents_buf__value0_buf = TypeChecker.SheetSize_FromNumeric(valueDeserializer.readInt32())
            }
            else if (detents_buf__value0_buf_selector == 1) {
                detents_buf__value0_buf = (valueDeserializer.readLength() as Length)
            }
            else {
                throw new Error("One of the branches for detents_buf__value0_buf has to be chosen through deserialisation.")
            }
            const detents_buf__value0 : SheetSize | Length = (detents_buf__value0_buf as SheetSize | Length)
            const detents_buf__value1_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
            let detents_buf__value1_buf : SheetSize | Length | undefined
            if ((RuntimeType.UNDEFINED) != (detents_buf__value1_buf_runtimeType))
            {
                const detents_buf__value1_buf__selector : int32 = valueDeserializer.readInt8()
                let detents_buf__value1_buf_ : SheetSize | Length | undefined
                if (detents_buf__value1_buf__selector == 0) {
                    detents_buf__value1_buf_ = TypeChecker.SheetSize_FromNumeric(valueDeserializer.readInt32())
                }
                else if (detents_buf__value1_buf__selector == 1) {
                    detents_buf__value1_buf_ = (valueDeserializer.readLength() as Length)
                }
                else {
                    throw new Error("One of the branches for detents_buf__value1_buf_ has to be chosen through deserialisation.")
                }
                detents_buf__value1_buf = (detents_buf__value1_buf_ as SheetSize | Length)
            }
            const detents_buf__value1 : undefined | SheetSize | Length = detents_buf__value1_buf
            const detents_buf__value2_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
            let detents_buf__value2_buf : SheetSize | Length | undefined
            if ((RuntimeType.UNDEFINED) != (detents_buf__value2_buf_runtimeType))
            {
                const detents_buf__value2_buf__selector : int32 = valueDeserializer.readInt8()
                let detents_buf__value2_buf_ : SheetSize | Length | undefined
                if (detents_buf__value2_buf__selector == 0) {
                    detents_buf__value2_buf_ = TypeChecker.SheetSize_FromNumeric(valueDeserializer.readInt32())
                }
                else if (detents_buf__value2_buf__selector == 1) {
                    detents_buf__value2_buf_ = (valueDeserializer.readLength() as Length)
                }
                else {
                    throw new Error("One of the branches for detents_buf__value2_buf_ has to be chosen through deserialisation.")
                }
                detents_buf__value2_buf = (detents_buf__value2_buf_ as SheetSize | Length)
            }
            const detents_buf__value2 : undefined | SheetSize | Length = detents_buf__value2_buf
            detents_buf = ([detents_buf__value0, detents_buf__value1, detents_buf__value2] as [ SheetSize | Length, SheetSize | Length | undefined, SheetSize | Length | undefined ])
        }
        const detents_result : [ SheetSize | Length, SheetSize | Length | undefined, SheetSize | Length | undefined ] | undefined = detents_buf
        const blurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let blurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (blurStyle_buf_runtimeType))
        {
            blurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const blurStyle_result : BlurStyle | undefined = blurStyle_buf
        const showClose_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showClose_buf : boolean | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (showClose_buf_runtimeType))
        {
            const showClose_buf__selector : int32 = valueDeserializer.readInt8()
            let showClose_buf_ : boolean | Resource | undefined
            if (showClose_buf__selector == 0) {
                showClose_buf_ = valueDeserializer.readBoolean()
            }
            else if (showClose_buf__selector == 1) {
                showClose_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for showClose_buf_ has to be chosen through deserialisation.")
            }
            showClose_buf = (showClose_buf_ as boolean | Resource)
        }
        const showClose_result : boolean | Resource | undefined = showClose_buf
        const preferType_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let preferType_buf : SheetType | undefined
        if ((RuntimeType.UNDEFINED) != (preferType_buf_runtimeType))
        {
            preferType_buf = TypeChecker.SheetType_FromNumeric(valueDeserializer.readInt32())
        }
        const preferType_result : SheetType | undefined = preferType_buf
        const title_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let title_buf : SheetTitleOptions | CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (title_buf_runtimeType))
        {
            const title_buf__selector : int32 = valueDeserializer.readInt8()
            let title_buf_ : SheetTitleOptions | CustomBuilder | undefined
            if (title_buf__selector == 0) {
                title_buf_ = valueDeserializer.readSheetTitleOptions()
            }
            else if (title_buf__selector == 1) {
                title_buf_ = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
            }
            else {
                throw new Error("One of the branches for title_buf_ has to be chosen through deserialisation.")
            }
            title_buf = (title_buf_ as SheetTitleOptions | CustomBuilder)
        }
        const title_result : SheetTitleOptions | CustomBuilder | undefined = title_buf
        const shouldDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shouldDismiss_buf : ((sheetDismiss: SheetDismiss) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (shouldDismiss_buf_runtimeType))
        {
            shouldDismiss_buf = valueDeserializer.readCallback_SheetDismiss_Void()
        }
        const shouldDismiss_result : ((sheetDismiss: SheetDismiss) => void) | undefined = shouldDismiss_buf
        const onWillDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDismiss_buf : ((parameter: DismissSheetAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDismiss_buf_runtimeType))
        {
            onWillDismiss_buf = valueDeserializer.readCallback_DismissSheetAction_Void()
        }
        const onWillDismiss_result : ((parameter: DismissSheetAction) => void) | undefined = onWillDismiss_buf
        const onWillSpringBackWhenDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillSpringBackWhenDismiss_buf : ((parameter: SpringBackAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillSpringBackWhenDismiss_buf_runtimeType))
        {
            onWillSpringBackWhenDismiss_buf = valueDeserializer.readCallback_SpringBackAction_Void()
        }
        const onWillSpringBackWhenDismiss_result : ((parameter: SpringBackAction) => void) | undefined = onWillSpringBackWhenDismiss_buf
        const enableOutsideInteractive_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableOutsideInteractive_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableOutsideInteractive_buf_runtimeType))
        {
            enableOutsideInteractive_buf = valueDeserializer.readBoolean()
        }
        const enableOutsideInteractive_result : boolean | undefined = enableOutsideInteractive_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Dimension)
        }
        const width_result : Dimension | undefined = width_buf
        const borderWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderWidth_buf : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
        if ((RuntimeType.UNDEFINED) != (borderWidth_buf_runtimeType))
        {
            const borderWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let borderWidth_buf_ : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined
            if (borderWidth_buf__selector == 0) {
                borderWidth_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (borderWidth_buf__selector == 1) {
                borderWidth_buf_ = valueDeserializer.readEdgeWidths()
            }
            else if (borderWidth_buf__selector == 2) {
                borderWidth_buf_ = valueDeserializer.readLocalizedEdgeWidths()
            }
            else {
                throw new Error("One of the branches for borderWidth_buf_ has to be chosen through deserialisation.")
            }
            borderWidth_buf = (borderWidth_buf_ as Dimension | EdgeWidths | LocalizedEdgeWidths)
        }
        const borderWidth_result : Dimension | EdgeWidths | LocalizedEdgeWidths | undefined = borderWidth_buf
        const borderColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderColor_buf : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (borderColor_buf_runtimeType))
        {
            const borderColor_buf__selector : int32 = valueDeserializer.readInt8()
            let borderColor_buf_ : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined
            if (borderColor_buf__selector == 0) {
                const borderColor_buf__u_selector : int32 = valueDeserializer.readInt8()
                let borderColor_buf__u : Color | number | string | Resource | undefined
                if (borderColor_buf__u_selector == 0) {
                    borderColor_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (borderColor_buf__u_selector == 1) {
                    borderColor_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (borderColor_buf__u_selector == 2) {
                    borderColor_buf__u = (valueDeserializer.readString() as string)
                }
                else if (borderColor_buf__u_selector == 3) {
                    borderColor_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for borderColor_buf__u has to be chosen through deserialisation.")
                }
                borderColor_buf_ = (borderColor_buf__u as Color | number | string | Resource)
            }
            else if (borderColor_buf__selector == 1) {
                borderColor_buf_ = valueDeserializer.readEdgeColors()
            }
            else if (borderColor_buf__selector == 2) {
                borderColor_buf_ = valueDeserializer.readLocalizedEdgeColors()
            }
            else {
                throw new Error("One of the branches for borderColor_buf_ has to be chosen through deserialisation.")
            }
            borderColor_buf = (borderColor_buf_ as ResourceColor | EdgeColors | LocalizedEdgeColors)
        }
        const borderColor_result : ResourceColor | EdgeColors | LocalizedEdgeColors | undefined = borderColor_buf
        const borderStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderStyle_buf : BorderStyle | EdgeStyles | undefined
        if ((RuntimeType.UNDEFINED) != (borderStyle_buf_runtimeType))
        {
            const borderStyle_buf__selector : int32 = valueDeserializer.readInt8()
            let borderStyle_buf_ : BorderStyle | EdgeStyles | undefined
            if (borderStyle_buf__selector == 0) {
                borderStyle_buf_ = TypeChecker.BorderStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else if (borderStyle_buf__selector == 1) {
                borderStyle_buf_ = valueDeserializer.readEdgeStyles()
            }
            else {
                throw new Error("One of the branches for borderStyle_buf_ has to be chosen through deserialisation.")
            }
            borderStyle_buf = (borderStyle_buf_ as BorderStyle | EdgeStyles)
        }
        const borderStyle_result : BorderStyle | EdgeStyles | undefined = borderStyle_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const onHeightDidChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onHeightDidChange_buf : ((index: number) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onHeightDidChange_buf_runtimeType))
        {
            onHeightDidChange_buf = valueDeserializer.readCallback_Number_Void()
        }
        const onHeightDidChange_result : ((index: number) => void) | undefined = onHeightDidChange_buf
        const mode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let mode_buf : SheetMode | undefined
        if ((RuntimeType.UNDEFINED) != (mode_buf_runtimeType))
        {
            mode_buf = TypeChecker.SheetMode_FromNumeric(valueDeserializer.readInt32())
        }
        const mode_result : SheetMode | undefined = mode_buf
        const scrollSizeMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let scrollSizeMode_buf : ScrollSizeMode | undefined
        if ((RuntimeType.UNDEFINED) != (scrollSizeMode_buf_runtimeType))
        {
            scrollSizeMode_buf = TypeChecker.ScrollSizeMode_FromNumeric(valueDeserializer.readInt32())
        }
        const scrollSizeMode_result : ScrollSizeMode | undefined = scrollSizeMode_buf
        const onDetentsDidChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDetentsDidChange_buf : ((index: number) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDetentsDidChange_buf_runtimeType))
        {
            onDetentsDidChange_buf = valueDeserializer.readCallback_Number_Void()
        }
        const onDetentsDidChange_result : ((index: number) => void) | undefined = onDetentsDidChange_buf
        const onWidthDidChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWidthDidChange_buf : ((index: number) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWidthDidChange_buf_runtimeType))
        {
            onWidthDidChange_buf = valueDeserializer.readCallback_Number_Void()
        }
        const onWidthDidChange_result : ((index: number) => void) | undefined = onWidthDidChange_buf
        const onTypeDidChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onTypeDidChange_buf : ((parameter: SheetType) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onTypeDidChange_buf_runtimeType))
        {
            onTypeDidChange_buf = valueDeserializer.readCallback_SheetType_Void()
        }
        const onTypeDidChange_result : ((parameter: SheetType) => void) | undefined = onTypeDidChange_buf
        const uiContext_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let uiContext_buf : UIContext | undefined
        if ((RuntimeType.UNDEFINED) != (uiContext_buf_runtimeType))
        {
            uiContext_buf = (valueDeserializer.readUIContext() as UIContext)
        }
        const uiContext_result : UIContext | undefined = uiContext_buf
        const keyboardAvoidMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let keyboardAvoidMode_buf : SheetKeyboardAvoidMode | undefined
        if ((RuntimeType.UNDEFINED) != (keyboardAvoidMode_buf_runtimeType))
        {
            keyboardAvoidMode_buf = TypeChecker.SheetKeyboardAvoidMode_FromNumeric(valueDeserializer.readInt32())
        }
        const keyboardAvoidMode_result : SheetKeyboardAvoidMode | undefined = keyboardAvoidMode_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Position | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readPosition()
        }
        const offset_result : Position | undefined = offset_buf
        const effectEdge_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let effectEdge_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (effectEdge_buf_runtimeType))
        {
            effectEdge_buf = (valueDeserializer.readNumber() as number)
        }
        const effectEdge_result : number | undefined = effectEdge_buf
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : LengthMetrics | BorderRadiuses | LocalizedBorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            const radius_buf__selector : int32 = valueDeserializer.readInt8()
            let radius_buf_ : LengthMetrics | BorderRadiuses | LocalizedBorderRadiuses | undefined
            if (radius_buf__selector == 0) {
                radius_buf_ = (valueDeserializer.readLengthMetrics() as LengthMetrics)
            }
            else if (radius_buf__selector == 1) {
                radius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (radius_buf__selector == 2) {
                radius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for radius_buf_ has to be chosen through deserialisation.")
            }
            radius_buf = (radius_buf_ as LengthMetrics | BorderRadiuses | LocalizedBorderRadiuses)
        }
        const radius_result : LengthMetrics | BorderRadiuses | LocalizedBorderRadiuses | undefined = radius_buf
        const detentSelection_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let detentSelection_buf : SheetSize | Length | undefined
        if ((RuntimeType.UNDEFINED) != (detentSelection_buf_runtimeType))
        {
            const detentSelection_buf__selector : int32 = valueDeserializer.readInt8()
            let detentSelection_buf_ : SheetSize | Length | undefined
            if (detentSelection_buf__selector == 0) {
                detentSelection_buf_ = TypeChecker.SheetSize_FromNumeric(valueDeserializer.readInt32())
            }
            else if (detentSelection_buf__selector == 1) {
                detentSelection_buf_ = (valueDeserializer.readLength() as Length)
            }
            else {
                throw new Error("One of the branches for detentSelection_buf_ has to be chosen through deserialisation.")
            }
            detentSelection_buf = (detentSelection_buf_ as SheetSize | Length)
        }
        const detentSelection_result : SheetSize | Length | undefined = detentSelection_buf
        const showInSubWindow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showInSubWindow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showInSubWindow_buf_runtimeType))
        {
            showInSubWindow_buf = valueDeserializer.readBoolean()
        }
        const showInSubWindow_result : boolean | undefined = showInSubWindow_buf
        const placement_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placement_buf : Placement | undefined
        if ((RuntimeType.UNDEFINED) != (placement_buf_runtimeType))
        {
            placement_buf = TypeChecker.Placement_FromNumeric(valueDeserializer.readInt32())
        }
        const placement_result : Placement | undefined = placement_buf
        const placementOnTarget_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placementOnTarget_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (placementOnTarget_buf_runtimeType))
        {
            placementOnTarget_buf = valueDeserializer.readBoolean()
        }
        const placementOnTarget_result : boolean | undefined = placementOnTarget_buf
        let value : SheetOptions = ({backgroundColor: backgroundColor_result, onAppear: onAppear_result, onDisappear: onDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, height: height_result, dragBar: dragBar_result, maskColor: maskColor_result, detents: detents_result, blurStyle: blurStyle_result, showClose: showClose_result, preferType: preferType_result, title: title_result, shouldDismiss: shouldDismiss_result, onWillDismiss: onWillDismiss_result, onWillSpringBackWhenDismiss: onWillSpringBackWhenDismiss_result, enableOutsideInteractive: enableOutsideInteractive_result, width: width_result, borderWidth: borderWidth_result, borderColor: borderColor_result, borderStyle: borderStyle_result, shadow: shadow_result, onHeightDidChange: onHeightDidChange_result, mode: mode_result, scrollSizeMode: scrollSizeMode_result, onDetentsDidChange: onDetentsDidChange_result, onWidthDidChange: onWidthDidChange_result, onTypeDidChange: onTypeDidChange_result, uiContext: uiContext_result, keyboardAvoidMode: keyboardAvoidMode_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, offset: offset_result, effectEdge: effectEdge_result, radius: radius_result, detentSelection: detentSelection_result, showInSubWindow: showInSubWindow_result, placement: placement_result, placementOnTarget: placementOnTarget_result} as SheetOptions)
        return value
    }
    readStyleOptions(): StyleOptions {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = (valueDeserializer.readNumber() as number)
        }
        const start_result : number | undefined = start_buf
        const length_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let length_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (length_buf_runtimeType))
        {
            length_buf = (valueDeserializer.readNumber() as number)
        }
        const length_result : number | undefined = length_buf
        const styledKey_result : StyledStringKey = TypeChecker.StyledStringKey_FromNumeric(valueDeserializer.readInt32())
        const styledValue_buf_selector : int32 = valueDeserializer.readInt8()
        let styledValue_buf : TextStyle | DecorationStyle | BaselineOffsetStyle | LetterSpacingStyle | TextShadowStyle | GestureStyle | ImageAttachment | ParagraphStyle | LineHeightStyle | UrlStyle | CustomSpan | UserDataSpan | BackgroundColorStyle | undefined
        if (styledValue_buf_selector == 0) {
            styledValue_buf = (valueDeserializer.readTextStyle_styled_string() as TextStyle)
        }
        else if (styledValue_buf_selector == 1) {
            styledValue_buf = (valueDeserializer.readDecorationStyle() as DecorationStyle)
        }
        else if (styledValue_buf_selector == 2) {
            styledValue_buf = (valueDeserializer.readBaselineOffsetStyle() as BaselineOffsetStyle)
        }
        else if (styledValue_buf_selector == 3) {
            styledValue_buf = (valueDeserializer.readLetterSpacingStyle() as LetterSpacingStyle)
        }
        else if (styledValue_buf_selector == 4) {
            styledValue_buf = (valueDeserializer.readTextShadowStyle() as TextShadowStyle)
        }
        else if (styledValue_buf_selector == 5) {
            styledValue_buf = (valueDeserializer.readGestureStyle() as GestureStyle)
        }
        else if (styledValue_buf_selector == 6) {
            styledValue_buf = (valueDeserializer.readImageAttachment() as ImageAttachment)
        }
        else if (styledValue_buf_selector == 7) {
            styledValue_buf = (valueDeserializer.readParagraphStyle() as ParagraphStyle)
        }
        else if (styledValue_buf_selector == 8) {
            styledValue_buf = (valueDeserializer.readLineHeightStyle() as LineHeightStyle)
        }
        else if (styledValue_buf_selector == 9) {
            styledValue_buf = (valueDeserializer.readUrlStyle() as UrlStyle)
        }
        else if (styledValue_buf_selector == 10) {
            styledValue_buf = (valueDeserializer.readCustomSpan() as CustomSpan)
        }
        else if (styledValue_buf_selector == 11) {
            styledValue_buf = valueDeserializer.readUserDataSpan()
        }
        else if (styledValue_buf_selector == 12) {
            styledValue_buf = (valueDeserializer.readBackgroundColorStyle() as BackgroundColorStyle)
        }
        else {
            throw new Error("One of the branches for styledValue_buf has to be chosen through deserialisation.")
        }
        const styledValue_result : StyledStringValue = (styledValue_buf as TextStyle | DecorationStyle | BaselineOffsetStyle | LetterSpacingStyle | TextShadowStyle | GestureStyle | ImageAttachment | ParagraphStyle | LineHeightStyle | UrlStyle | CustomSpan | UserDataSpan | BackgroundColorStyle)
        let value : StyleOptions = ({start: start_result, length: length_result, styledKey: styledKey_result, styledValue: styledValue_result} as StyleOptions)
        return value
    }
    readTextDataDetectorConfig(): TextDataDetectorConfig {
        let valueDeserializer : Deserializer = this
        const types_buf_length : int32 = valueDeserializer.readInt32()
        let types_buf : Array<TextDataDetectorType> = new Array<TextDataDetectorType>(types_buf_length)
        for (let types_buf_i = 0; types_buf_i < types_buf_length; types_buf_i++) {
            types_buf[types_buf_i] = TypeChecker.TextDataDetectorType_FromNumeric(valueDeserializer.readInt32())
        }
        const types_result : Array<TextDataDetectorType> = types_buf
        const onDetectResultUpdate_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDetectResultUpdate_buf : ((breakpoints: string) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDetectResultUpdate_buf_runtimeType))
        {
            onDetectResultUpdate_buf = valueDeserializer.readCallback_String_Void()
        }
        const onDetectResultUpdate_result : ((breakpoints: string) => void) | undefined = onDetectResultUpdate_buf
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const decoration_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let decoration_buf : DecorationStyleInterface | undefined
        if ((RuntimeType.UNDEFINED) != (decoration_buf_runtimeType))
        {
            decoration_buf = valueDeserializer.readDecorationStyleInterface()
        }
        const decoration_result : DecorationStyleInterface | undefined = decoration_buf
        let value : TextDataDetectorConfig = ({types: types_result, onDetectResultUpdate: onDetectResultUpdate_result, color: color_result, decoration: decoration_result} as TextDataDetectorConfig)
        return value
    }
    readTextPickerTextStyle(): TextPickerTextStyle {
        let valueDeserializer : Deserializer = this
        const color_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let color_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (color_buf_runtimeType))
        {
            const color_buf__selector : int32 = valueDeserializer.readInt8()
            let color_buf_ : Color | number | string | Resource | undefined
            if (color_buf__selector == 0) {
                color_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (color_buf__selector == 1) {
                color_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (color_buf__selector == 2) {
                color_buf_ = (valueDeserializer.readString() as string)
            }
            else if (color_buf__selector == 3) {
                color_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for color_buf_ has to be chosen through deserialisation.")
            }
            color_buf = (color_buf_ as Color | number | string | Resource)
        }
        const color_result : ResourceColor | undefined = color_buf
        const font_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let font_buf : Font | undefined
        if ((RuntimeType.UNDEFINED) != (font_buf_runtimeType))
        {
            font_buf = valueDeserializer.readFont()
        }
        const font_result : Font | undefined = font_buf
        const minFontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let minFontSize_buf : number | string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (minFontSize_buf_runtimeType))
        {
            const minFontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let minFontSize_buf_ : number | string | Resource | undefined
            if (minFontSize_buf__selector == 0) {
                minFontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (minFontSize_buf__selector == 1) {
                minFontSize_buf_ = (valueDeserializer.readString() as string)
            }
            else if (minFontSize_buf__selector == 2) {
                minFontSize_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for minFontSize_buf_ has to be chosen through deserialisation.")
            }
            minFontSize_buf = (minFontSize_buf_ as number | string | Resource)
        }
        const minFontSize_result : number | string | Resource | undefined = minFontSize_buf
        const maxFontSize_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maxFontSize_buf : number | string | Resource | undefined
        if ((RuntimeType.UNDEFINED) != (maxFontSize_buf_runtimeType))
        {
            const maxFontSize_buf__selector : int32 = valueDeserializer.readInt8()
            let maxFontSize_buf_ : number | string | Resource | undefined
            if (maxFontSize_buf__selector == 0) {
                maxFontSize_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (maxFontSize_buf__selector == 1) {
                maxFontSize_buf_ = (valueDeserializer.readString() as string)
            }
            else if (maxFontSize_buf__selector == 2) {
                maxFontSize_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for maxFontSize_buf_ has to be chosen through deserialisation.")
            }
            maxFontSize_buf = (maxFontSize_buf_ as number | string | Resource)
        }
        const maxFontSize_result : number | string | Resource | undefined = maxFontSize_buf
        const overflow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let overflow_buf : TextOverflow | undefined
        if ((RuntimeType.UNDEFINED) != (overflow_buf_runtimeType))
        {
            overflow_buf = TypeChecker.TextOverflow_FromNumeric(valueDeserializer.readInt32())
        }
        const overflow_result : TextOverflow | undefined = overflow_buf
        let value : TextPickerTextStyle = ({color: color_result, font: font_result, minFontSize: minFontSize_result, maxFontSize: maxFontSize_result, overflow: overflow_result} as TextPickerTextStyle)
        return value
    }
    readBottomTabBarStyle(): BottomTabBarStyle {
        throw new Error("Can not deserialize builder class")
    }
    readContextMenuOptions(): ContextMenuOptions {
        let valueDeserializer : Deserializer = this
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Position | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readPosition()
        }
        const offset_result : Position | undefined = offset_buf
        const placement_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placement_buf : Placement | undefined
        if ((RuntimeType.UNDEFINED) != (placement_buf_runtimeType))
        {
            placement_buf = TypeChecker.Placement_FromNumeric(valueDeserializer.readInt32())
        }
        const placement_result : Placement | undefined = placement_buf
        const enableArrow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableArrow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableArrow_buf_runtimeType))
        {
            enableArrow_buf = valueDeserializer.readBoolean()
        }
        const enableArrow_result : boolean | undefined = enableArrow_buf
        const arrowOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowOffset_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (arrowOffset_buf_runtimeType))
        {
            arrowOffset_buf = (valueDeserializer.readLength() as Length)
        }
        const arrowOffset_result : Length | undefined = arrowOffset_buf
        const preview_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let preview_buf : MenuPreviewMode | CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (preview_buf_runtimeType))
        {
            const preview_buf__selector : int32 = valueDeserializer.readInt8()
            let preview_buf_ : MenuPreviewMode | CustomBuilder | undefined
            if (preview_buf__selector == 0) {
                preview_buf_ = TypeChecker.MenuPreviewMode_FromNumeric(valueDeserializer.readInt32())
            }
            else if (preview_buf__selector == 1) {
                preview_buf_ = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
            }
            else {
                throw new Error("One of the branches for preview_buf_ has to be chosen through deserialisation.")
            }
            preview_buf = (preview_buf_ as MenuPreviewMode | CustomBuilder)
        }
        const preview_result : MenuPreviewMode | CustomBuilder | undefined = preview_buf
        const previewBorderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewBorderRadius_buf : BorderRadiusType | undefined
        if ((RuntimeType.UNDEFINED) != (previewBorderRadius_buf_runtimeType))
        {
            const previewBorderRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let previewBorderRadius_buf_ : Length | BorderRadiuses | LocalizedBorderRadiuses | undefined
            if (previewBorderRadius_buf__selector == 0) {
                previewBorderRadius_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (previewBorderRadius_buf__selector == 1) {
                previewBorderRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (previewBorderRadius_buf__selector == 2) {
                previewBorderRadius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for previewBorderRadius_buf_ has to be chosen through deserialisation.")
            }
            previewBorderRadius_buf = (previewBorderRadius_buf_ as Length | BorderRadiuses | LocalizedBorderRadiuses)
        }
        const previewBorderRadius_result : BorderRadiusType | undefined = previewBorderRadius_buf
        const borderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderRadius_buf : Length | BorderRadiuses | LocalizedBorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (borderRadius_buf_runtimeType))
        {
            const borderRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let borderRadius_buf_ : Length | BorderRadiuses | LocalizedBorderRadiuses | undefined
            if (borderRadius_buf__selector == 0) {
                borderRadius_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (borderRadius_buf__selector == 1) {
                borderRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (borderRadius_buf__selector == 2) {
                borderRadius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for borderRadius_buf_ has to be chosen through deserialisation.")
            }
            borderRadius_buf = (borderRadius_buf_ as Length | BorderRadiuses | LocalizedBorderRadiuses)
        }
        const borderRadius_result : Length | BorderRadiuses | LocalizedBorderRadiuses | undefined = borderRadius_buf
        const onAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAppear_buf_runtimeType))
        {
            onAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onAppear_result : (() => void) | undefined = onAppear_buf
        const onDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDisappear_buf_runtimeType))
        {
            onDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDisappear_result : (() => void) | undefined = onDisappear_buf
        const aboutToAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let aboutToAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (aboutToAppear_buf_runtimeType))
        {
            aboutToAppear_buf = valueDeserializer.readCallback_Void()
        }
        const aboutToAppear_result : (() => void) | undefined = aboutToAppear_buf
        const aboutToDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let aboutToDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (aboutToDisappear_buf_runtimeType))
        {
            aboutToDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const aboutToDisappear_result : (() => void) | undefined = aboutToDisappear_buf
        const layoutRegionMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let layoutRegionMargin_buf : Padding | undefined
        if ((RuntimeType.UNDEFINED) != (layoutRegionMargin_buf_runtimeType))
        {
            layoutRegionMargin_buf = valueDeserializer.readPadding()
        }
        const layoutRegionMargin_result : Padding | undefined = layoutRegionMargin_buf
        const previewAnimationOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewAnimationOptions_buf : ContextMenuAnimationOptions | undefined
        if ((RuntimeType.UNDEFINED) != (previewAnimationOptions_buf_runtimeType))
        {
            previewAnimationOptions_buf = valueDeserializer.readContextMenuAnimationOptions()
        }
        const previewAnimationOptions_result : ContextMenuAnimationOptions | undefined = previewAnimationOptions_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const outlineColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let outlineColor_buf : ResourceColor | EdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (outlineColor_buf_runtimeType))
        {
            const outlineColor_buf__selector : int32 = valueDeserializer.readInt8()
            let outlineColor_buf_ : ResourceColor | EdgeColors | undefined
            if (outlineColor_buf__selector == 0) {
                const outlineColor_buf__u_selector : int32 = valueDeserializer.readInt8()
                let outlineColor_buf__u : Color | number | string | Resource | undefined
                if (outlineColor_buf__u_selector == 0) {
                    outlineColor_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (outlineColor_buf__u_selector == 1) {
                    outlineColor_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (outlineColor_buf__u_selector == 2) {
                    outlineColor_buf__u = (valueDeserializer.readString() as string)
                }
                else if (outlineColor_buf__u_selector == 3) {
                    outlineColor_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for outlineColor_buf__u has to be chosen through deserialisation.")
                }
                outlineColor_buf_ = (outlineColor_buf__u as Color | number | string | Resource)
            }
            else if (outlineColor_buf__selector == 1) {
                outlineColor_buf_ = valueDeserializer.readEdgeColors()
            }
            else {
                throw new Error("One of the branches for outlineColor_buf_ has to be chosen through deserialisation.")
            }
            outlineColor_buf = (outlineColor_buf_ as ResourceColor | EdgeColors)
        }
        const outlineColor_result : ResourceColor | EdgeColors | undefined = outlineColor_buf
        const outlineWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let outlineWidth_buf : Dimension | EdgeOutlineWidths | undefined
        if ((RuntimeType.UNDEFINED) != (outlineWidth_buf_runtimeType))
        {
            const outlineWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let outlineWidth_buf_ : Dimension | EdgeOutlineWidths | undefined
            if (outlineWidth_buf__selector == 0) {
                outlineWidth_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (outlineWidth_buf__selector == 1) {
                outlineWidth_buf_ = valueDeserializer.readEdgeOutlineWidths()
            }
            else {
                throw new Error("One of the branches for outlineWidth_buf_ has to be chosen through deserialisation.")
            }
            outlineWidth_buf = (outlineWidth_buf_ as Dimension | EdgeOutlineWidths)
        }
        const outlineWidth_result : Dimension | EdgeOutlineWidths | undefined = outlineWidth_buf
        const hapticFeedbackMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hapticFeedbackMode_buf : HapticFeedbackMode | undefined
        if ((RuntimeType.UNDEFINED) != (hapticFeedbackMode_buf_runtimeType))
        {
            hapticFeedbackMode_buf = TypeChecker.HapticFeedbackMode_FromNumeric(valueDeserializer.readInt32())
        }
        const hapticFeedbackMode_result : HapticFeedbackMode | undefined = hapticFeedbackMode_buf
        let value : ContextMenuOptions = ({offset: offset_result, placement: placement_result, enableArrow: enableArrow_result, arrowOffset: arrowOffset_result, preview: preview_result, previewBorderRadius: previewBorderRadius_result, borderRadius: borderRadius_result, onAppear: onAppear_result, onDisappear: onDisappear_result, aboutToAppear: aboutToAppear_result, aboutToDisappear: aboutToDisappear_result, layoutRegionMargin: layoutRegionMargin_result, previewAnimationOptions: previewAnimationOptions_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, transition: transition_result, enableHoverMode: enableHoverMode_result, outlineColor: outlineColor_result, outlineWidth: outlineWidth_result, hapticFeedbackMode: hapticFeedbackMode_result} as ContextMenuOptions)
        return value
    }
    readDatePickerDialogOptions(): DatePickerDialogOptions {
        let valueDeserializer : Deserializer = this
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = new Date(valueDeserializer.readInt64())
        }
        const start_result : Date | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = new Date(valueDeserializer.readInt64())
        }
        const end_result : Date | undefined = end_buf
        const selected_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selected_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (selected_buf_runtimeType))
        {
            selected_buf = new Date(valueDeserializer.readInt64())
        }
        const selected_result : Date | undefined = selected_buf
        const mode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let mode_buf : DatePickerMode | undefined
        if ((RuntimeType.UNDEFINED) != (mode_buf_runtimeType))
        {
            mode_buf = TypeChecker.DatePickerMode_FromNumeric(valueDeserializer.readInt32())
        }
        const mode_result : DatePickerMode | undefined = mode_buf
        const lunar_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lunar_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (lunar_buf_runtimeType))
        {
            lunar_buf = valueDeserializer.readBoolean()
        }
        const lunar_result : boolean | undefined = lunar_buf
        const lunarSwitch_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lunarSwitch_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (lunarSwitch_buf_runtimeType))
        {
            lunarSwitch_buf = valueDeserializer.readBoolean()
        }
        const lunarSwitch_result : boolean | undefined = lunarSwitch_buf
        const lunarSwitchStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let lunarSwitchStyle_buf : LunarSwitchStyle | undefined
        if ((RuntimeType.UNDEFINED) != (lunarSwitchStyle_buf_runtimeType))
        {
            lunarSwitchStyle_buf = valueDeserializer.readLunarSwitchStyle()
        }
        const lunarSwitchStyle_result : LunarSwitchStyle | undefined = lunarSwitchStyle_buf
        const showTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showTime_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showTime_buf_runtimeType))
        {
            showTime_buf = valueDeserializer.readBoolean()
        }
        const showTime_result : boolean | undefined = showTime_buf
        const useMilitaryTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let useMilitaryTime_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (useMilitaryTime_buf_runtimeType))
        {
            useMilitaryTime_buf = valueDeserializer.readBoolean()
        }
        const useMilitaryTime_result : boolean | undefined = useMilitaryTime_buf
        const disappearTextStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disappearTextStyle_buf : PickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (disappearTextStyle_buf_runtimeType))
        {
            disappearTextStyle_buf = valueDeserializer.readPickerTextStyle()
        }
        const disappearTextStyle_result : PickerTextStyle | undefined = disappearTextStyle_buf
        const textStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textStyle_buf : PickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (textStyle_buf_runtimeType))
        {
            textStyle_buf = valueDeserializer.readPickerTextStyle()
        }
        const textStyle_result : PickerTextStyle | undefined = textStyle_buf
        const acceptButtonStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let acceptButtonStyle_buf : PickerDialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (acceptButtonStyle_buf_runtimeType))
        {
            acceptButtonStyle_buf = valueDeserializer.readPickerDialogButtonStyle()
        }
        const acceptButtonStyle_result : PickerDialogButtonStyle | undefined = acceptButtonStyle_buf
        const cancelButtonStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cancelButtonStyle_buf : PickerDialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (cancelButtonStyle_buf_runtimeType))
        {
            cancelButtonStyle_buf = valueDeserializer.readPickerDialogButtonStyle()
        }
        const cancelButtonStyle_result : PickerDialogButtonStyle | undefined = cancelButtonStyle_buf
        const selectedTextStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selectedTextStyle_buf : PickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (selectedTextStyle_buf_runtimeType))
        {
            selectedTextStyle_buf = valueDeserializer.readPickerTextStyle()
        }
        const selectedTextStyle_result : PickerTextStyle | undefined = selectedTextStyle_buf
        const maskRect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskRect_buf : Rectangle | undefined
        if ((RuntimeType.UNDEFINED) != (maskRect_buf_runtimeType))
        {
            maskRect_buf = valueDeserializer.readRectangle()
        }
        const maskRect_result : Rectangle | undefined = maskRect_buf
        const alignment_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignment_buf : DialogAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (alignment_buf_runtimeType))
        {
            alignment_buf = TypeChecker.DialogAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const alignment_result : DialogAlignment | undefined = alignment_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Offset | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readOffset()
        }
        const offset_result : Offset | undefined = offset_buf
        const onAccept_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAccept_buf : ((value: DatePickerResult) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAccept_buf_runtimeType))
        {
            onAccept_buf = valueDeserializer.readCallback_DatePickerResult_Void()
        }
        const onAccept_result : ((value: DatePickerResult) => void) | undefined = onAccept_buf
        const onCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onCancel_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onCancel_buf_runtimeType))
        {
            onCancel_buf = valueDeserializer.readVoidCallback()
        }
        const onCancel_result : VoidCallback | undefined = onCancel_buf
        const onChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onChange_buf : ((value: DatePickerResult) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onChange_buf_runtimeType))
        {
            onChange_buf = valueDeserializer.readCallback_DatePickerResult_Void()
        }
        const onChange_result : ((value: DatePickerResult) => void) | undefined = onChange_buf
        const onDateAccept_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDateAccept_buf : ((parameter: Date) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDateAccept_buf_runtimeType))
        {
            onDateAccept_buf = valueDeserializer.readCallback_Date_Void()
        }
        const onDateAccept_result : ((parameter: Date) => void) | undefined = onDateAccept_buf
        const onDateChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDateChange_buf : ((parameter: Date) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDateChange_buf_runtimeType))
        {
            onDateChange_buf = valueDeserializer.readCallback_Date_Void()
        }
        const onDateChange_result : ((parameter: Date) => void) | undefined = onDateChange_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const onDidAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidAppear_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onDidAppear_buf_runtimeType))
        {
            onDidAppear_buf = valueDeserializer.readVoidCallback()
        }
        const onDidAppear_result : VoidCallback | undefined = onDidAppear_buf
        const onDidDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidDisappear_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onDidDisappear_buf_runtimeType))
        {
            onDidDisappear_buf = valueDeserializer.readVoidCallback()
        }
        const onDidDisappear_result : VoidCallback | undefined = onDidDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readVoidCallback()
        }
        const onWillAppear_result : VoidCallback | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : VoidCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readVoidCallback()
        }
        const onWillDisappear_result : VoidCallback | undefined = onWillDisappear_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const dateTimeOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dateTimeOptions_buf : DateTimeOptions | undefined
        if ((RuntimeType.UNDEFINED) != (dateTimeOptions_buf_runtimeType))
        {
            dateTimeOptions_buf = valueDeserializer.readDateTimeOptions()
        }
        const dateTimeOptions_result : DateTimeOptions | undefined = dateTimeOptions_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const enableHapticFeedback_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHapticFeedback_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHapticFeedback_buf_runtimeType))
        {
            enableHapticFeedback_buf = valueDeserializer.readBoolean()
        }
        const enableHapticFeedback_result : boolean | undefined = enableHapticFeedback_buf
        let value : DatePickerDialogOptions = ({start: start_result, end: end_result, selected: selected_result, mode: mode_result, lunar: lunar_result, lunarSwitch: lunarSwitch_result, lunarSwitchStyle: lunarSwitchStyle_result, showTime: showTime_result, useMilitaryTime: useMilitaryTime_result, disappearTextStyle: disappearTextStyle_result, textStyle: textStyle_result, acceptButtonStyle: acceptButtonStyle_result, cancelButtonStyle: cancelButtonStyle_result, selectedTextStyle: selectedTextStyle_result, maskRect: maskRect_result, alignment: alignment_result, offset: offset_result, onAccept: onAccept_result, onCancel: onCancel_result, onChange: onChange_result, onDateAccept: onDateAccept_result, onDateChange: onDateChange_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, onDidAppear: onDidAppear_result, onDidDisappear: onDidDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, shadow: shadow_result, dateTimeOptions: dateTimeOptions_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, enableHapticFeedback: enableHapticFeedback_result} as DatePickerDialogOptions)
        return value
    }
    readMenuOptions(): MenuOptions {
        let valueDeserializer : Deserializer = this
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Position | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readPosition()
        }
        const offset_result : Position | undefined = offset_buf
        const placement_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placement_buf : Placement | undefined
        if ((RuntimeType.UNDEFINED) != (placement_buf_runtimeType))
        {
            placement_buf = TypeChecker.Placement_FromNumeric(valueDeserializer.readInt32())
        }
        const placement_result : Placement | undefined = placement_buf
        const enableArrow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableArrow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableArrow_buf_runtimeType))
        {
            enableArrow_buf = valueDeserializer.readBoolean()
        }
        const enableArrow_result : boolean | undefined = enableArrow_buf
        const arrowOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowOffset_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (arrowOffset_buf_runtimeType))
        {
            arrowOffset_buf = (valueDeserializer.readLength() as Length)
        }
        const arrowOffset_result : Length | undefined = arrowOffset_buf
        const preview_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let preview_buf : MenuPreviewMode | CustomBuilder | undefined
        if ((RuntimeType.UNDEFINED) != (preview_buf_runtimeType))
        {
            const preview_buf__selector : int32 = valueDeserializer.readInt8()
            let preview_buf_ : MenuPreviewMode | CustomBuilder | undefined
            if (preview_buf__selector == 0) {
                preview_buf_ = TypeChecker.MenuPreviewMode_FromNumeric(valueDeserializer.readInt32())
            }
            else if (preview_buf__selector == 1) {
                preview_buf_ = CallbackTransformer.transformToCustomBuilder(valueDeserializer.readCustomNodeBuilder())
            }
            else {
                throw new Error("One of the branches for preview_buf_ has to be chosen through deserialisation.")
            }
            preview_buf = (preview_buf_ as MenuPreviewMode | CustomBuilder)
        }
        const preview_result : MenuPreviewMode | CustomBuilder | undefined = preview_buf
        const previewBorderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewBorderRadius_buf : BorderRadiusType | undefined
        if ((RuntimeType.UNDEFINED) != (previewBorderRadius_buf_runtimeType))
        {
            const previewBorderRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let previewBorderRadius_buf_ : Length | BorderRadiuses | LocalizedBorderRadiuses | undefined
            if (previewBorderRadius_buf__selector == 0) {
                previewBorderRadius_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (previewBorderRadius_buf__selector == 1) {
                previewBorderRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (previewBorderRadius_buf__selector == 2) {
                previewBorderRadius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for previewBorderRadius_buf_ has to be chosen through deserialisation.")
            }
            previewBorderRadius_buf = (previewBorderRadius_buf_ as Length | BorderRadiuses | LocalizedBorderRadiuses)
        }
        const previewBorderRadius_result : BorderRadiusType | undefined = previewBorderRadius_buf
        const borderRadius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let borderRadius_buf : Length | BorderRadiuses | LocalizedBorderRadiuses | undefined
        if ((RuntimeType.UNDEFINED) != (borderRadius_buf_runtimeType))
        {
            const borderRadius_buf__selector : int32 = valueDeserializer.readInt8()
            let borderRadius_buf_ : Length | BorderRadiuses | LocalizedBorderRadiuses | undefined
            if (borderRadius_buf__selector == 0) {
                borderRadius_buf_ = (valueDeserializer.readLength() as Length)
            }
            else if (borderRadius_buf__selector == 1) {
                borderRadius_buf_ = valueDeserializer.readBorderRadiuses()
            }
            else if (borderRadius_buf__selector == 2) {
                borderRadius_buf_ = valueDeserializer.readLocalizedBorderRadiuses()
            }
            else {
                throw new Error("One of the branches for borderRadius_buf_ has to be chosen through deserialisation.")
            }
            borderRadius_buf = (borderRadius_buf_ as Length | BorderRadiuses | LocalizedBorderRadiuses)
        }
        const borderRadius_result : Length | BorderRadiuses | LocalizedBorderRadiuses | undefined = borderRadius_buf
        const onAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAppear_buf_runtimeType))
        {
            onAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onAppear_result : (() => void) | undefined = onAppear_buf
        const onDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDisappear_buf_runtimeType))
        {
            onDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDisappear_result : (() => void) | undefined = onDisappear_buf
        const aboutToAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let aboutToAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (aboutToAppear_buf_runtimeType))
        {
            aboutToAppear_buf = valueDeserializer.readCallback_Void()
        }
        const aboutToAppear_result : (() => void) | undefined = aboutToAppear_buf
        const aboutToDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let aboutToDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (aboutToDisappear_buf_runtimeType))
        {
            aboutToDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const aboutToDisappear_result : (() => void) | undefined = aboutToDisappear_buf
        const layoutRegionMargin_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let layoutRegionMargin_buf : Padding | undefined
        if ((RuntimeType.UNDEFINED) != (layoutRegionMargin_buf_runtimeType))
        {
            layoutRegionMargin_buf = valueDeserializer.readPadding()
        }
        const layoutRegionMargin_result : Padding | undefined = layoutRegionMargin_buf
        const previewAnimationOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewAnimationOptions_buf : ContextMenuAnimationOptions | undefined
        if ((RuntimeType.UNDEFINED) != (previewAnimationOptions_buf_runtimeType))
        {
            previewAnimationOptions_buf = valueDeserializer.readContextMenuAnimationOptions()
        }
        const previewAnimationOptions_result : ContextMenuAnimationOptions | undefined = previewAnimationOptions_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const outlineColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let outlineColor_buf : ResourceColor | EdgeColors | undefined
        if ((RuntimeType.UNDEFINED) != (outlineColor_buf_runtimeType))
        {
            const outlineColor_buf__selector : int32 = valueDeserializer.readInt8()
            let outlineColor_buf_ : ResourceColor | EdgeColors | undefined
            if (outlineColor_buf__selector == 0) {
                const outlineColor_buf__u_selector : int32 = valueDeserializer.readInt8()
                let outlineColor_buf__u : Color | number | string | Resource | undefined
                if (outlineColor_buf__u_selector == 0) {
                    outlineColor_buf__u = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (outlineColor_buf__u_selector == 1) {
                    outlineColor_buf__u = (valueDeserializer.readNumber() as number)
                }
                else if (outlineColor_buf__u_selector == 2) {
                    outlineColor_buf__u = (valueDeserializer.readString() as string)
                }
                else if (outlineColor_buf__u_selector == 3) {
                    outlineColor_buf__u = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for outlineColor_buf__u has to be chosen through deserialisation.")
                }
                outlineColor_buf_ = (outlineColor_buf__u as Color | number | string | Resource)
            }
            else if (outlineColor_buf__selector == 1) {
                outlineColor_buf_ = valueDeserializer.readEdgeColors()
            }
            else {
                throw new Error("One of the branches for outlineColor_buf_ has to be chosen through deserialisation.")
            }
            outlineColor_buf = (outlineColor_buf_ as ResourceColor | EdgeColors)
        }
        const outlineColor_result : ResourceColor | EdgeColors | undefined = outlineColor_buf
        const outlineWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let outlineWidth_buf : Dimension | EdgeOutlineWidths | undefined
        if ((RuntimeType.UNDEFINED) != (outlineWidth_buf_runtimeType))
        {
            const outlineWidth_buf__selector : int32 = valueDeserializer.readInt8()
            let outlineWidth_buf_ : Dimension | EdgeOutlineWidths | undefined
            if (outlineWidth_buf__selector == 0) {
                outlineWidth_buf_ = (valueDeserializer.readLength() as Dimension)
            }
            else if (outlineWidth_buf__selector == 1) {
                outlineWidth_buf_ = valueDeserializer.readEdgeOutlineWidths()
            }
            else {
                throw new Error("One of the branches for outlineWidth_buf_ has to be chosen through deserialisation.")
            }
            outlineWidth_buf = (outlineWidth_buf_ as Dimension | EdgeOutlineWidths)
        }
        const outlineWidth_result : Dimension | EdgeOutlineWidths | undefined = outlineWidth_buf
        const hapticFeedbackMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hapticFeedbackMode_buf : HapticFeedbackMode | undefined
        if ((RuntimeType.UNDEFINED) != (hapticFeedbackMode_buf_runtimeType))
        {
            hapticFeedbackMode_buf = TypeChecker.HapticFeedbackMode_FromNumeric(valueDeserializer.readInt32())
        }
        const hapticFeedbackMode_result : HapticFeedbackMode | undefined = hapticFeedbackMode_buf
        const title_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let title_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (title_buf_runtimeType))
        {
            const title_buf__selector : int32 = valueDeserializer.readInt8()
            let title_buf_ : string | Resource | undefined
            if (title_buf__selector == 0) {
                title_buf_ = (valueDeserializer.readString() as string)
            }
            else if (title_buf__selector == 1) {
                title_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for title_buf_ has to be chosen through deserialisation.")
            }
            title_buf = (title_buf_ as string | Resource)
        }
        const title_result : ResourceStr | undefined = title_buf
        const showInSubWindow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showInSubWindow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showInSubWindow_buf_runtimeType))
        {
            showInSubWindow_buf = valueDeserializer.readBoolean()
        }
        const showInSubWindow_result : boolean | undefined = showInSubWindow_buf
        let value : MenuOptions = ({offset: offset_result, placement: placement_result, enableArrow: enableArrow_result, arrowOffset: arrowOffset_result, preview: preview_result, previewBorderRadius: previewBorderRadius_result, borderRadius: borderRadius_result, onAppear: onAppear_result, onDisappear: onDisappear_result, aboutToAppear: aboutToAppear_result, aboutToDisappear: aboutToDisappear_result, layoutRegionMargin: layoutRegionMargin_result, previewAnimationOptions: previewAnimationOptions_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, transition: transition_result, enableHoverMode: enableHoverMode_result, outlineColor: outlineColor_result, outlineWidth: outlineWidth_result, hapticFeedbackMode: hapticFeedbackMode_result, title: title_result, showInSubWindow: showInSubWindow_result} as MenuOptions)
        return value
    }
    readNavigationMenuOptions(): NavigationMenuOptions {
        let valueDeserializer : Deserializer = this
        const moreButtonOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let moreButtonOptions_buf : MoreButtonOptions | undefined
        if ((RuntimeType.UNDEFINED) != (moreButtonOptions_buf_runtimeType))
        {
            moreButtonOptions_buf = valueDeserializer.readMoreButtonOptions()
        }
        const moreButtonOptions_result : MoreButtonOptions | undefined = moreButtonOptions_buf
        let value : NavigationMenuOptions = ({moreButtonOptions: moreButtonOptions_result} as NavigationMenuOptions)
        return value
    }
    readNavigationToolbarOptions(): NavigationToolbarOptions {
        let valueDeserializer : Deserializer = this
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const moreButtonOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let moreButtonOptions_buf : MoreButtonOptions | undefined
        if ((RuntimeType.UNDEFINED) != (moreButtonOptions_buf_runtimeType))
        {
            moreButtonOptions_buf = valueDeserializer.readMoreButtonOptions()
        }
        const moreButtonOptions_result : MoreButtonOptions | undefined = moreButtonOptions_buf
        const barStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let barStyle_buf : BarStyle | undefined
        if ((RuntimeType.UNDEFINED) != (barStyle_buf_runtimeType))
        {
            barStyle_buf = TypeChecker.BarStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const barStyle_result : BarStyle | undefined = barStyle_buf
        const hideItemValue_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hideItemValue_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (hideItemValue_buf_runtimeType))
        {
            hideItemValue_buf = valueDeserializer.readBoolean()
        }
        const hideItemValue_result : boolean | undefined = hideItemValue_buf
        let value : NavigationToolbarOptions = ({backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, moreButtonOptions: moreButtonOptions_result, barStyle: barStyle_result, hideItemValue: hideItemValue_result} as NavigationToolbarOptions)
        return value
    }
    readPopupButton(): PopupButton {
        let valueDeserializer : Deserializer = this
        const value_result: string = (valueDeserializer.readString() as string)
        const action_result: (() => void) = valueDeserializer.readCallback_Void()
        let value: PopupButton = ({
            value: value_result,
            action: CallbackTransformer.transformFromCallbackVoid(action_result)
        } as PopupButton)
        return value
    }
    readPopupOptions(): PopupOptions {
        let valueDeserializer : Deserializer = this
        const message_result : string = (valueDeserializer.readString() as string)
        const placement_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let placement_buf : Placement | undefined
        if ((RuntimeType.UNDEFINED) != (placement_buf_runtimeType))
        {
            placement_buf = TypeChecker.Placement_FromNumeric(valueDeserializer.readInt32())
        }
        const placement_result : Placement | undefined = placement_buf
        const primaryButton_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let primaryButton_buf : PopupButton | undefined
        if ((RuntimeType.UNDEFINED) != (primaryButton_buf_runtimeType))
        {
            primaryButton_buf = valueDeserializer.readPopupButton()
        }
        const primaryButton_result : PopupButton | undefined = primaryButton_buf
        const secondaryButton_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let secondaryButton_buf : PopupButton | undefined
        if ((RuntimeType.UNDEFINED) != (secondaryButton_buf_runtimeType))
        {
            secondaryButton_buf = valueDeserializer.readPopupButton()
        }
        const secondaryButton_result : PopupButton | undefined = secondaryButton_buf
        const onStateChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onStateChange_buf : PopupStateChangeCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onStateChange_buf_runtimeType))
        {
            onStateChange_buf = valueDeserializer.readPopupStateChangeCallback()
        }
        const onStateChange_result : PopupStateChangeCallback | undefined = onStateChange_buf
        const arrowOffset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowOffset_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (arrowOffset_buf_runtimeType))
        {
            arrowOffset_buf = (valueDeserializer.readLength() as Length)
        }
        const arrowOffset_result : Length | undefined = arrowOffset_buf
        const showInSubWindow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let showInSubWindow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (showInSubWindow_buf_runtimeType))
        {
            showInSubWindow_buf = valueDeserializer.readBoolean()
        }
        const showInSubWindow_result : boolean | undefined = showInSubWindow_buf
        const mask_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let mask_buf : boolean | PopupMaskType | undefined
        if ((RuntimeType.UNDEFINED) != (mask_buf_runtimeType))
        {
            const mask_buf__selector : int32 = valueDeserializer.readInt8()
            let mask_buf_ : boolean | PopupMaskType | undefined
            if (mask_buf__selector == 0) {
                mask_buf_ = valueDeserializer.readBoolean()
            }
            else if (mask_buf__selector == 1) {
                const mask_buf__u_color_buf_selector : int32 = valueDeserializer.readInt8()
                let mask_buf__u_color_buf : Color | number | string | Resource | undefined
                if (mask_buf__u_color_buf_selector == 0) {
                    mask_buf__u_color_buf = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
                }
                else if (mask_buf__u_color_buf_selector == 1) {
                    mask_buf__u_color_buf = (valueDeserializer.readNumber() as number)
                }
                else if (mask_buf__u_color_buf_selector == 2) {
                    mask_buf__u_color_buf = (valueDeserializer.readString() as string)
                }
                else if (mask_buf__u_color_buf_selector == 3) {
                    mask_buf__u_color_buf = valueDeserializer.readResource()
                }
                else {
                    throw new Error("One of the branches for mask_buf__u_color_buf has to be chosen through deserialisation.")
                }
                const mask_buf__u_color : ResourceColor = (mask_buf__u_color_buf as Color | number | string | Resource)
                mask_buf_ = ({color: mask_buf__u_color} as PopupMaskType)
            }
            else {
                throw new Error("One of the branches for mask_buf_ has to be chosen through deserialisation.")
            }
            mask_buf = (mask_buf_ as boolean | PopupMaskType)
        }
        const mask_result : boolean | PopupMaskType | undefined = mask_buf
        const messageOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let messageOptions_buf : PopupMessageOptions | undefined
        if ((RuntimeType.UNDEFINED) != (messageOptions_buf_runtimeType))
        {
            messageOptions_buf = valueDeserializer.readPopupMessageOptions()
        }
        const messageOptions_result : PopupMessageOptions | undefined = messageOptions_buf
        const targetSpace_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let targetSpace_buf : Length | undefined
        if ((RuntimeType.UNDEFINED) != (targetSpace_buf_runtimeType))
        {
            targetSpace_buf = (valueDeserializer.readLength() as Length)
        }
        const targetSpace_result : Length | undefined = targetSpace_buf
        const enableArrow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableArrow_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableArrow_buf_runtimeType))
        {
            enableArrow_buf = valueDeserializer.readBoolean()
        }
        const enableArrow_result : boolean | undefined = enableArrow_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Position | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readPosition()
        }
        const offset_result : Position | undefined = offset_buf
        const popupColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let popupColor_buf : Color | string | Resource | number | undefined
        if ((RuntimeType.UNDEFINED) != (popupColor_buf_runtimeType))
        {
            const popupColor_buf__selector : int32 = valueDeserializer.readInt8()
            let popupColor_buf_ : Color | string | Resource | number | undefined
            if (popupColor_buf__selector == 0) {
                popupColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (popupColor_buf__selector == 1) {
                popupColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (popupColor_buf__selector == 2) {
                popupColor_buf_ = valueDeserializer.readResource()
            }
            else if (popupColor_buf__selector == 3) {
                popupColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else {
                throw new Error("One of the branches for popupColor_buf_ has to be chosen through deserialisation.")
            }
            popupColor_buf = (popupColor_buf_ as Color | string | Resource | number)
        }
        const popupColor_result : Color | string | Resource | number | undefined = popupColor_buf
        const autoCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let autoCancel_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (autoCancel_buf_runtimeType))
        {
            autoCancel_buf = valueDeserializer.readBoolean()
        }
        const autoCancel_result : boolean | undefined = autoCancel_buf
        const width_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let width_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (width_buf_runtimeType))
        {
            width_buf = (valueDeserializer.readLength() as Dimension)
        }
        const width_result : Dimension | undefined = width_buf
        const arrowPointPosition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowPointPosition_buf : ArrowPointPosition | undefined
        if ((RuntimeType.UNDEFINED) != (arrowPointPosition_buf_runtimeType))
        {
            arrowPointPosition_buf = TypeChecker.ArrowPointPosition_FromNumeric(valueDeserializer.readInt32())
        }
        const arrowPointPosition_result : ArrowPointPosition | undefined = arrowPointPosition_buf
        const arrowWidth_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowWidth_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (arrowWidth_buf_runtimeType))
        {
            arrowWidth_buf = (valueDeserializer.readLength() as Dimension)
        }
        const arrowWidth_result : Dimension | undefined = arrowWidth_buf
        const arrowHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let arrowHeight_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (arrowHeight_buf_runtimeType))
        {
            arrowHeight_buf = (valueDeserializer.readLength() as Dimension)
        }
        const arrowHeight_result : Dimension | undefined = arrowHeight_buf
        const radius_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let radius_buf : Dimension | undefined
        if ((RuntimeType.UNDEFINED) != (radius_buf_runtimeType))
        {
            radius_buf = (valueDeserializer.readLength() as Dimension)
        }
        const radius_result : Dimension | undefined = radius_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const transition_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let transition_buf : TransitionEffect | undefined
        if ((RuntimeType.UNDEFINED) != (transition_buf_runtimeType))
        {
            transition_buf = (valueDeserializer.readTransitionEffect() as TransitionEffect)
        }
        const transition_result : TransitionEffect | undefined = transition_buf
        const onWillDismiss_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDismiss_buf : boolean | ((parameter: DismissPopupAction) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDismiss_buf_runtimeType))
        {
            const onWillDismiss_buf__selector : int32 = valueDeserializer.readInt8()
            let onWillDismiss_buf_ : boolean | ((parameter: DismissPopupAction) => void) | undefined
            if (onWillDismiss_buf__selector == 0) {
                onWillDismiss_buf_ = valueDeserializer.readBoolean()
            }
            else if (onWillDismiss_buf__selector == 1) {
                onWillDismiss_buf_ = valueDeserializer.readCallback_DismissPopupAction_Void()
            }
            else {
                throw new Error("One of the branches for onWillDismiss_buf_ has to be chosen through deserialisation.")
            }
            onWillDismiss_buf = (onWillDismiss_buf_ as boolean | ((parameter: DismissPopupAction) => void))
        }
        const onWillDismiss_result : boolean | ((parameter: DismissPopupAction) => void) | undefined = onWillDismiss_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const followTransformOfTarget_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let followTransformOfTarget_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (followTransformOfTarget_buf_runtimeType))
        {
            followTransformOfTarget_buf = valueDeserializer.readBoolean()
        }
        const followTransformOfTarget_result : boolean | undefined = followTransformOfTarget_buf
        const keyboardAvoidMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let keyboardAvoidMode_buf : KeyboardAvoidMode | undefined
        if ((RuntimeType.UNDEFINED) != (keyboardAvoidMode_buf_runtimeType))
        {
            keyboardAvoidMode_buf = TypeChecker.KeyboardAvoidMode_FromNumeric(valueDeserializer.readInt32())
        }
        const keyboardAvoidMode_result : KeyboardAvoidMode | undefined = keyboardAvoidMode_buf
        let value : PopupOptions = ({message: message_result, placement: placement_result, primaryButton: primaryButton_result, secondaryButton: secondaryButton_result, onStateChange: onStateChange_result, arrowOffset: arrowOffset_result, showInSubWindow: showInSubWindow_result, mask: mask_result, messageOptions: messageOptions_result, targetSpace: targetSpace_result, enableArrow: enableArrow_result, offset: offset_result, popupColor: popupColor_result, autoCancel: autoCancel_result, width: width_result, arrowPointPosition: arrowPointPosition_result, arrowWidth: arrowWidth_result, arrowHeight: arrowHeight_result, radius: radius_result, shadow: shadow_result, backgroundBlurStyle: backgroundBlurStyle_result, transition: transition_result, onWillDismiss: onWillDismiss_result, enableHoverMode: enableHoverMode_result, followTransformOfTarget: followTransformOfTarget_result, keyboardAvoidMode: keyboardAvoidMode_result} as PopupOptions)
        return value
    }
    readRichEditorImageSpanOptions(): RichEditorImageSpanOptions {
        let valueDeserializer : Deserializer = this
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = (valueDeserializer.readNumber() as number)
        }
        const offset_result : number | undefined = offset_buf
        const imageStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let imageStyle_buf : RichEditorImageSpanStyle | undefined
        if ((RuntimeType.UNDEFINED) != (imageStyle_buf_runtimeType))
        {
            imageStyle_buf = valueDeserializer.readRichEditorImageSpanStyle()
        }
        const imageStyle_result : RichEditorImageSpanStyle | undefined = imageStyle_buf
        const gesture_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gesture_buf : RichEditorGesture | undefined
        if ((RuntimeType.UNDEFINED) != (gesture_buf_runtimeType))
        {
            gesture_buf = valueDeserializer.readRichEditorGesture()
        }
        const gesture_result : RichEditorGesture | undefined = gesture_buf
        const onHover_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onHover_buf : OnHoverCallback | undefined
        if ((RuntimeType.UNDEFINED) != (onHover_buf_runtimeType))
        {
            onHover_buf = valueDeserializer.readOnHoverCallback()
        }
        const onHover_result : OnHoverCallback | undefined = onHover_buf
        let value : RichEditorImageSpanOptions = ({offset: offset_result, imageStyle: imageStyle_result, gesture: gesture_result, onHover: onHover_result} as RichEditorImageSpanOptions)
        return value
    }
    readRichEditorImageSpanResult(): RichEditorImageSpanResult {
        let valueDeserializer : Deserializer = this
        const spanPosition_result : RichEditorSpanPosition = valueDeserializer.readRichEditorSpanPosition()
        const valuePixelMap_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let valuePixelMap_buf : PixelMap | undefined
        if ((RuntimeType.UNDEFINED) != (valuePixelMap_buf_runtimeType))
        {
            valuePixelMap_buf = (valueDeserializer.readPixelMap() as PixelMap)
        }
        const valuePixelMap_result : PixelMap | undefined = valuePixelMap_buf
        const valueResourceStr_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let valueResourceStr_buf : ResourceStr | undefined
        if ((RuntimeType.UNDEFINED) != (valueResourceStr_buf_runtimeType))
        {
            const valueResourceStr_buf__selector : int32 = valueDeserializer.readInt8()
            let valueResourceStr_buf_ : string | Resource | undefined
            if (valueResourceStr_buf__selector == 0) {
                valueResourceStr_buf_ = (valueDeserializer.readString() as string)
            }
            else if (valueResourceStr_buf__selector == 1) {
                valueResourceStr_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for valueResourceStr_buf_ has to be chosen through deserialisation.")
            }
            valueResourceStr_buf = (valueResourceStr_buf_ as string | Resource)
        }
        const valueResourceStr_result : ResourceStr | undefined = valueResourceStr_buf
        const imageStyle_result : RichEditorImageSpanStyleResult = valueDeserializer.readRichEditorImageSpanStyleResult()
        const offsetInSpan_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const offsetInSpan_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const offsetInSpan_result : [ number, number ] = ([offsetInSpan_buf_value0, offsetInSpan_buf_value1] as [ number, number ])
        let value : RichEditorImageSpanResult = ({spanPosition: spanPosition_result, valuePixelMap: valuePixelMap_result, valueResourceStr: valueResourceStr_result, imageStyle: imageStyle_result, offsetInSpan: offsetInSpan_result} as RichEditorImageSpanResult)
        return value
    }
    readRichEditorTextSpanOptions(): RichEditorTextSpanOptions {
        let valueDeserializer : Deserializer = this
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : number | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = (valueDeserializer.readNumber() as number)
        }
        const offset_result : number | undefined = offset_buf
        const style_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let style_buf : RichEditorTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (style_buf_runtimeType))
        {
            style_buf = valueDeserializer.readRichEditorTextStyle()
        }
        const style_result : RichEditorTextStyle | undefined = style_buf
        const paragraphStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let paragraphStyle_buf : RichEditorParagraphStyle | undefined
        if ((RuntimeType.UNDEFINED) != (paragraphStyle_buf_runtimeType))
        {
            paragraphStyle_buf = valueDeserializer.readRichEditorParagraphStyle()
        }
        const paragraphStyle_result : RichEditorParagraphStyle | undefined = paragraphStyle_buf
        const gesture_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let gesture_buf : RichEditorGesture | undefined
        if ((RuntimeType.UNDEFINED) != (gesture_buf_runtimeType))
        {
            gesture_buf = valueDeserializer.readRichEditorGesture()
        }
        const gesture_result : RichEditorGesture | undefined = gesture_buf
        const urlStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let urlStyle_buf : RichEditorUrlStyle | undefined
        if ((RuntimeType.UNDEFINED) != (urlStyle_buf_runtimeType))
        {
            urlStyle_buf = valueDeserializer.readRichEditorUrlStyle()
        }
        const urlStyle_result : RichEditorUrlStyle | undefined = urlStyle_buf
        let value : RichEditorTextSpanOptions = ({offset: offset_result, style: style_result, paragraphStyle: paragraphStyle_result, gesture: gesture_result, urlStyle: urlStyle_result} as RichEditorTextSpanOptions)
        return value
    }
    readRichEditorTextSpanResult(): RichEditorTextSpanResult {
        let valueDeserializer : Deserializer = this
        const spanPosition_result : RichEditorSpanPosition = valueDeserializer.readRichEditorSpanPosition()
        const value_result : string = (valueDeserializer.readString() as string)
        const textStyle_result : RichEditorTextStyleResult = valueDeserializer.readRichEditorTextStyleResult()
        const offsetInSpan_buf_value0 : number = (valueDeserializer.readNumber() as number)
        const offsetInSpan_buf_value1 : number = (valueDeserializer.readNumber() as number)
        const offsetInSpan_result : [ number, number ] = ([offsetInSpan_buf_value0, offsetInSpan_buf_value1] as [ number, number ])
        const symbolSpanStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let symbolSpanStyle_buf : RichEditorSymbolSpanStyle | undefined
        if ((RuntimeType.UNDEFINED) != (symbolSpanStyle_buf_runtimeType))
        {
            symbolSpanStyle_buf = valueDeserializer.readRichEditorSymbolSpanStyle()
        }
        const symbolSpanStyle_result : RichEditorSymbolSpanStyle | undefined = symbolSpanStyle_buf
        const valueResource_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let valueResource_buf : Resource | undefined
        if ((RuntimeType.UNDEFINED) != (valueResource_buf_runtimeType))
        {
            valueResource_buf = valueDeserializer.readResource()
        }
        const valueResource_result : Resource | undefined = valueResource_buf
        const paragraphStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let paragraphStyle_buf : RichEditorParagraphStyle | undefined
        if ((RuntimeType.UNDEFINED) != (paragraphStyle_buf_runtimeType))
        {
            paragraphStyle_buf = valueDeserializer.readRichEditorParagraphStyle()
        }
        const paragraphStyle_result : RichEditorParagraphStyle | undefined = paragraphStyle_buf
        const previewText_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let previewText_buf : string | undefined
        if ((RuntimeType.UNDEFINED) != (previewText_buf_runtimeType))
        {
            previewText_buf = (valueDeserializer.readString() as string)
        }
        const previewText_result : string | undefined = previewText_buf
        const urlStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let urlStyle_buf : RichEditorUrlStyle | undefined
        if ((RuntimeType.UNDEFINED) != (urlStyle_buf_runtimeType))
        {
            urlStyle_buf = valueDeserializer.readRichEditorUrlStyle()
        }
        const urlStyle_result : RichEditorUrlStyle | undefined = urlStyle_buf
        let value : RichEditorTextSpanResult = ({spanPosition: spanPosition_result, value: value_result, textStyle: textStyle_result, offsetInSpan: offsetInSpan_result, symbolSpanStyle: symbolSpanStyle_result, valueResource: valueResource_result, paragraphStyle: paragraphStyle_result, previewText: previewText_result, urlStyle: urlStyle_result} as RichEditorTextSpanResult)
        return value
    }
    readSpanStyle(): SpanStyle {
        let valueDeserializer : Deserializer = this
        const start_result : number = (valueDeserializer.readNumber() as number)
        const length_result : number = (valueDeserializer.readNumber() as number)
        const styledKey_result : StyledStringKey = TypeChecker.StyledStringKey_FromNumeric(valueDeserializer.readInt32())
        const styledValue_buf_selector : int32 = valueDeserializer.readInt8()
        let styledValue_buf : TextStyle | DecorationStyle | BaselineOffsetStyle | LetterSpacingStyle | TextShadowStyle | GestureStyle | ImageAttachment | ParagraphStyle | LineHeightStyle | UrlStyle | CustomSpan | UserDataSpan | BackgroundColorStyle | undefined
        if (styledValue_buf_selector == 0) {
            styledValue_buf = (valueDeserializer.readTextStyle_styled_string() as TextStyle)
        }
        else if (styledValue_buf_selector == 1) {
            styledValue_buf = (valueDeserializer.readDecorationStyle() as DecorationStyle)
        }
        else if (styledValue_buf_selector == 2) {
            styledValue_buf = (valueDeserializer.readBaselineOffsetStyle() as BaselineOffsetStyle)
        }
        else if (styledValue_buf_selector == 3) {
            styledValue_buf = (valueDeserializer.readLetterSpacingStyle() as LetterSpacingStyle)
        }
        else if (styledValue_buf_selector == 4) {
            styledValue_buf = (valueDeserializer.readTextShadowStyle() as TextShadowStyle)
        }
        else if (styledValue_buf_selector == 5) {
            styledValue_buf = (valueDeserializer.readGestureStyle() as GestureStyle)
        }
        else if (styledValue_buf_selector == 6) {
            styledValue_buf = (valueDeserializer.readImageAttachment() as ImageAttachment)
        }
        else if (styledValue_buf_selector == 7) {
            styledValue_buf = (valueDeserializer.readParagraphStyle() as ParagraphStyle)
        }
        else if (styledValue_buf_selector == 8) {
            styledValue_buf = (valueDeserializer.readLineHeightStyle() as LineHeightStyle)
        }
        else if (styledValue_buf_selector == 9) {
            styledValue_buf = (valueDeserializer.readUrlStyle() as UrlStyle)
        }
        else if (styledValue_buf_selector == 10) {
            styledValue_buf = (valueDeserializer.readCustomSpan() as CustomSpan)
        }
        else if (styledValue_buf_selector == 11) {
            styledValue_buf = valueDeserializer.readUserDataSpan()
        }
        else if (styledValue_buf_selector == 12) {
            styledValue_buf = (valueDeserializer.readBackgroundColorStyle() as BackgroundColorStyle)
        }
        else {
            throw new Error("One of the branches for styledValue_buf has to be chosen through deserialisation.")
        }
        const styledValue_result : StyledStringValue = (styledValue_buf as TextStyle | DecorationStyle | BaselineOffsetStyle | LetterSpacingStyle | TextShadowStyle | GestureStyle | ImageAttachment | ParagraphStyle | LineHeightStyle | UrlStyle | CustomSpan | UserDataSpan | BackgroundColorStyle)
        let value : SpanStyle = ({start: start_result, length: length_result, styledKey: styledKey_result, styledValue: styledValue_result} as SpanStyle)
        return value
    }
    readSubTabBarStyle(): SubTabBarStyle {
        throw new Error("Can not deserialize builder class")
    }
    readTextPickerDialogOptions(): TextPickerDialogOptions {
        let valueDeserializer : Deserializer = this
        const range_buf_selector : int32 = valueDeserializer.readInt8()
        let range_buf : Array<string> | Array<Array<string>> | Resource | Array<TextPickerRangeContent> | Array<TextCascadePickerRangeContent> | undefined
        if (range_buf_selector == 0) {
            const range_buf_u_length : int32 = valueDeserializer.readInt32()
            let range_buf_u : Array<string> = new Array<string>(range_buf_u_length)
            for (let range_buf_u_i = 0; range_buf_u_i < range_buf_u_length; range_buf_u_i++) {
                range_buf_u[range_buf_u_i] = (valueDeserializer.readString() as string)
            }
            range_buf = range_buf_u
        }
        else if (range_buf_selector == 1) {
            const range_buf_u_length : int32 = valueDeserializer.readInt32()
            let range_buf_u : Array<Array<string>> = new Array<Array<string>>(range_buf_u_length)
            for (let range_buf_u_i = 0; range_buf_u_i < range_buf_u_length; range_buf_u_i++) {
                const range_buf_u_buf_length : int32 = valueDeserializer.readInt32()
                let range_buf_u_buf : Array<string> = new Array<string>(range_buf_u_buf_length)
                for (let range_buf_u_buf_i = 0; range_buf_u_buf_i < range_buf_u_buf_length; range_buf_u_buf_i++) {
                    range_buf_u_buf[range_buf_u_buf_i] = (valueDeserializer.readString() as string)
                }
                range_buf_u[range_buf_u_i] = range_buf_u_buf
            }
            range_buf = range_buf_u
        }
        else if (range_buf_selector == 2) {
            range_buf = valueDeserializer.readResource()
        }
        else if (range_buf_selector == 3) {
            const range_buf_u_length : int32 = valueDeserializer.readInt32()
            let range_buf_u : Array<TextPickerRangeContent> = new Array<TextPickerRangeContent>(range_buf_u_length)
            for (let range_buf_u_i = 0; range_buf_u_i < range_buf_u_length; range_buf_u_i++) {
                range_buf_u[range_buf_u_i] = valueDeserializer.readTextPickerRangeContent()
            }
            range_buf = range_buf_u
        }
        else if (range_buf_selector == 4) {
            const range_buf_u_length : int32 = valueDeserializer.readInt32()
            let range_buf_u : Array<TextCascadePickerRangeContent> = new Array<TextCascadePickerRangeContent>(range_buf_u_length)
            for (let range_buf_u_i = 0; range_buf_u_i < range_buf_u_length; range_buf_u_i++) {
                range_buf_u[range_buf_u_i] = valueDeserializer.readTextCascadePickerRangeContent()
            }
            range_buf = range_buf_u
        }
        else {
            throw new Error("One of the branches for range_buf has to be chosen through deserialisation.")
        }
        const range_result : Array<string> | Array<Array<string>> | Resource | Array<TextPickerRangeContent> | Array<TextCascadePickerRangeContent> = (range_buf as Array<string> | Array<Array<string>> | Resource | Array<TextPickerRangeContent> | Array<TextCascadePickerRangeContent>)
        const value_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let value_buf : string | Array<string> | undefined
        if ((RuntimeType.UNDEFINED) != (value_buf_runtimeType))
        {
            const value_buf__selector : int32 = valueDeserializer.readInt8()
            let value_buf_ : string | Array<string> | undefined
            if (value_buf__selector == 0) {
                value_buf_ = (valueDeserializer.readString() as string)
            }
            else if (value_buf__selector == 1) {
                const value_buf__u_length : int32 = valueDeserializer.readInt32()
                let value_buf__u : Array<string> = new Array<string>(value_buf__u_length)
                for (let value_buf__u_i = 0; value_buf__u_i < value_buf__u_length; value_buf__u_i++) {
                    value_buf__u[value_buf__u_i] = (valueDeserializer.readString() as string)
                }
                value_buf_ = value_buf__u
            }
            else {
                throw new Error("One of the branches for value_buf_ has to be chosen through deserialisation.")
            }
            value_buf = (value_buf_ as string | Array<string>)
        }
        const value_result : string | Array<string> | undefined = value_buf
        const selected_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selected_buf : number | Array<number> | undefined
        if ((RuntimeType.UNDEFINED) != (selected_buf_runtimeType))
        {
            const selected_buf__selector : int32 = valueDeserializer.readInt8()
            let selected_buf_ : number | Array<number> | undefined
            if (selected_buf__selector == 0) {
                selected_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (selected_buf__selector == 1) {
                const selected_buf__u_length : int32 = valueDeserializer.readInt32()
                let selected_buf__u : Array<number> = new Array<number>(selected_buf__u_length)
                for (let selected_buf__u_i = 0; selected_buf__u_i < selected_buf__u_length; selected_buf__u_i++) {
                    selected_buf__u[selected_buf__u_i] = (valueDeserializer.readNumber() as number)
                }
                selected_buf_ = selected_buf__u
            }
            else {
                throw new Error("One of the branches for selected_buf_ has to be chosen through deserialisation.")
            }
            selected_buf = (selected_buf_ as number | Array<number>)
        }
        const selected_result : number | Array<number> | undefined = selected_buf
        const columnWidths_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let columnWidths_buf : Array<LengthMetrics> | undefined
        if ((RuntimeType.UNDEFINED) != (columnWidths_buf_runtimeType))
        {
            const columnWidths_buf__length : int32 = valueDeserializer.readInt32()
            let columnWidths_buf_ : Array<LengthMetrics> = new Array<LengthMetrics>(columnWidths_buf__length)
            for (let columnWidths_buf__i = 0; columnWidths_buf__i < columnWidths_buf__length; columnWidths_buf__i++) {
                columnWidths_buf_[columnWidths_buf__i] = (valueDeserializer.readLengthMetrics() as LengthMetrics)
            }
            columnWidths_buf = columnWidths_buf_
        }
        const columnWidths_result : Array<LengthMetrics> | undefined = columnWidths_buf
        const defaultPickerItemHeight_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let defaultPickerItemHeight_buf : number | string | undefined
        if ((RuntimeType.UNDEFINED) != (defaultPickerItemHeight_buf_runtimeType))
        {
            const defaultPickerItemHeight_buf__selector : int32 = valueDeserializer.readInt8()
            let defaultPickerItemHeight_buf_ : number | string | undefined
            if (defaultPickerItemHeight_buf__selector == 0) {
                defaultPickerItemHeight_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (defaultPickerItemHeight_buf__selector == 1) {
                defaultPickerItemHeight_buf_ = (valueDeserializer.readString() as string)
            }
            else {
                throw new Error("One of the branches for defaultPickerItemHeight_buf_ has to be chosen through deserialisation.")
            }
            defaultPickerItemHeight_buf = (defaultPickerItemHeight_buf_ as number | string)
        }
        const defaultPickerItemHeight_result : number | string | undefined = defaultPickerItemHeight_buf
        const canLoop_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let canLoop_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (canLoop_buf_runtimeType))
        {
            canLoop_buf = valueDeserializer.readBoolean()
        }
        const canLoop_result : boolean | undefined = canLoop_buf
        const disappearTextStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disappearTextStyle_buf : PickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (disappearTextStyle_buf_runtimeType))
        {
            disappearTextStyle_buf = valueDeserializer.readPickerTextStyle()
        }
        const disappearTextStyle_result : PickerTextStyle | undefined = disappearTextStyle_buf
        const textStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textStyle_buf : PickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (textStyle_buf_runtimeType))
        {
            textStyle_buf = valueDeserializer.readPickerTextStyle()
        }
        const textStyle_result : PickerTextStyle | undefined = textStyle_buf
        const acceptButtonStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let acceptButtonStyle_buf : PickerDialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (acceptButtonStyle_buf_runtimeType))
        {
            acceptButtonStyle_buf = valueDeserializer.readPickerDialogButtonStyle()
        }
        const acceptButtonStyle_result : PickerDialogButtonStyle | undefined = acceptButtonStyle_buf
        const cancelButtonStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cancelButtonStyle_buf : PickerDialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (cancelButtonStyle_buf_runtimeType))
        {
            cancelButtonStyle_buf = valueDeserializer.readPickerDialogButtonStyle()
        }
        const cancelButtonStyle_result : PickerDialogButtonStyle | undefined = cancelButtonStyle_buf
        const selectedTextStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selectedTextStyle_buf : PickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (selectedTextStyle_buf_runtimeType))
        {
            selectedTextStyle_buf = valueDeserializer.readPickerTextStyle()
        }
        const selectedTextStyle_result : PickerTextStyle | undefined = selectedTextStyle_buf
        const disableTextStyleAnimation_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disableTextStyleAnimation_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (disableTextStyleAnimation_buf_runtimeType))
        {
            disableTextStyleAnimation_buf = valueDeserializer.readBoolean()
        }
        const disableTextStyleAnimation_result : boolean | undefined = disableTextStyleAnimation_buf
        const defaultTextStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let defaultTextStyle_buf : TextPickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (defaultTextStyle_buf_runtimeType))
        {
            defaultTextStyle_buf = valueDeserializer.readTextPickerTextStyle()
        }
        const defaultTextStyle_result : TextPickerTextStyle | undefined = defaultTextStyle_buf
        const onAccept_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAccept_buf : ((value: TextPickerResult) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAccept_buf_runtimeType))
        {
            onAccept_buf = valueDeserializer.readCallback_TextPickerResult_Void()
        }
        const onAccept_result : ((value: TextPickerResult) => void) | undefined = onAccept_buf
        const onCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onCancel_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onCancel_buf_runtimeType))
        {
            onCancel_buf = valueDeserializer.readCallback_Void()
        }
        const onCancel_result : (() => void) | undefined = onCancel_buf
        const onChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onChange_buf : ((value: TextPickerResult) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onChange_buf_runtimeType))
        {
            onChange_buf = valueDeserializer.readCallback_TextPickerResult_Void()
        }
        const onChange_result : ((value: TextPickerResult) => void) | undefined = onChange_buf
        const onScrollStop_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onScrollStop_buf : ((value: TextPickerResult) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onScrollStop_buf_runtimeType))
        {
            onScrollStop_buf = valueDeserializer.readCallback_TextPickerResult_Void()
        }
        const onScrollStop_result : ((value: TextPickerResult) => void) | undefined = onScrollStop_buf
        const onEnterSelectedArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onEnterSelectedArea_buf : ((value: TextPickerResult) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onEnterSelectedArea_buf_runtimeType))
        {
            onEnterSelectedArea_buf = valueDeserializer.readCallback_TextPickerResult_Void()
        }
        const onEnterSelectedArea_result : ((value: TextPickerResult) => void) | undefined = onEnterSelectedArea_buf
        const maskRect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskRect_buf : Rectangle | undefined
        if ((RuntimeType.UNDEFINED) != (maskRect_buf_runtimeType))
        {
            maskRect_buf = valueDeserializer.readRectangle()
        }
        const maskRect_result : Rectangle | undefined = maskRect_buf
        const alignment_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignment_buf : DialogAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (alignment_buf_runtimeType))
        {
            alignment_buf = TypeChecker.DialogAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const alignment_result : DialogAlignment | undefined = alignment_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Offset | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readOffset()
        }
        const offset_result : Offset | undefined = offset_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const onDidAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidAppear_buf_runtimeType))
        {
            onDidAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidAppear_result : (() => void) | undefined = onDidAppear_buf
        const onDidDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidDisappear_buf_runtimeType))
        {
            onDidDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidDisappear_result : (() => void) | undefined = onDidDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillAppear_result : (() => void) | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillDisappear_result : (() => void) | undefined = onWillDisappear_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const enableHapticFeedback_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHapticFeedback_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHapticFeedback_buf_runtimeType))
        {
            enableHapticFeedback_buf = valueDeserializer.readBoolean()
        }
        const enableHapticFeedback_result : boolean | undefined = enableHapticFeedback_buf
        let value : TextPickerDialogOptions = ({range: range_result, value: value_result, selected: selected_result, columnWidths: columnWidths_result, defaultPickerItemHeight: defaultPickerItemHeight_result, canLoop: canLoop_result, disappearTextStyle: disappearTextStyle_result, textStyle: textStyle_result, acceptButtonStyle: acceptButtonStyle_result, cancelButtonStyle: cancelButtonStyle_result, selectedTextStyle: selectedTextStyle_result, disableTextStyleAnimation: disableTextStyleAnimation_result, defaultTextStyle: defaultTextStyle_result, onAccept: onAccept_result, onCancel: onCancel_result, onChange: onChange_result, onScrollStop: onScrollStop_result, onEnterSelectedArea: onEnterSelectedArea_result, maskRect: maskRect_result, alignment: alignment_result, offset: offset_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, onDidAppear: onDidAppear_result, onDidDisappear: onDidDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, shadow: shadow_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, enableHapticFeedback: enableHapticFeedback_result} as TextPickerDialogOptions)
        return value
    }
    readTimePickerDialogOptions(): TimePickerDialogOptions {
        let valueDeserializer : Deserializer = this
        const selected_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selected_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (selected_buf_runtimeType))
        {
            selected_buf = new Date(valueDeserializer.readInt64())
        }
        const selected_result : Date | undefined = selected_buf
        const format_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let format_buf : TimePickerFormat | undefined
        if ((RuntimeType.UNDEFINED) != (format_buf_runtimeType))
        {
            format_buf = TypeChecker.TimePickerFormat_FromNumeric(valueDeserializer.readInt32())
        }
        const format_result : TimePickerFormat | undefined = format_buf
        const start_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let start_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (start_buf_runtimeType))
        {
            start_buf = new Date(valueDeserializer.readInt64())
        }
        const start_result : Date | undefined = start_buf
        const end_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let end_buf : Date | undefined
        if ((RuntimeType.UNDEFINED) != (end_buf_runtimeType))
        {
            end_buf = new Date(valueDeserializer.readInt64())
        }
        const end_result : Date | undefined = end_buf
        const useMilitaryTime_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let useMilitaryTime_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (useMilitaryTime_buf_runtimeType))
        {
            useMilitaryTime_buf = valueDeserializer.readBoolean()
        }
        const useMilitaryTime_result : boolean | undefined = useMilitaryTime_buf
        const disappearTextStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let disappearTextStyle_buf : PickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (disappearTextStyle_buf_runtimeType))
        {
            disappearTextStyle_buf = valueDeserializer.readPickerTextStyle()
        }
        const disappearTextStyle_result : PickerTextStyle | undefined = disappearTextStyle_buf
        const textStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let textStyle_buf : PickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (textStyle_buf_runtimeType))
        {
            textStyle_buf = valueDeserializer.readPickerTextStyle()
        }
        const textStyle_result : PickerTextStyle | undefined = textStyle_buf
        const acceptButtonStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let acceptButtonStyle_buf : PickerDialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (acceptButtonStyle_buf_runtimeType))
        {
            acceptButtonStyle_buf = valueDeserializer.readPickerDialogButtonStyle()
        }
        const acceptButtonStyle_result : PickerDialogButtonStyle | undefined = acceptButtonStyle_buf
        const cancelButtonStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let cancelButtonStyle_buf : PickerDialogButtonStyle | undefined
        if ((RuntimeType.UNDEFINED) != (cancelButtonStyle_buf_runtimeType))
        {
            cancelButtonStyle_buf = valueDeserializer.readPickerDialogButtonStyle()
        }
        const cancelButtonStyle_result : PickerDialogButtonStyle | undefined = cancelButtonStyle_buf
        const selectedTextStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let selectedTextStyle_buf : PickerTextStyle | undefined
        if ((RuntimeType.UNDEFINED) != (selectedTextStyle_buf_runtimeType))
        {
            selectedTextStyle_buf = valueDeserializer.readPickerTextStyle()
        }
        const selectedTextStyle_result : PickerTextStyle | undefined = selectedTextStyle_buf
        const maskRect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let maskRect_buf : Rectangle | undefined
        if ((RuntimeType.UNDEFINED) != (maskRect_buf_runtimeType))
        {
            maskRect_buf = valueDeserializer.readRectangle()
        }
        const maskRect_result : Rectangle | undefined = maskRect_buf
        const alignment_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let alignment_buf : DialogAlignment | undefined
        if ((RuntimeType.UNDEFINED) != (alignment_buf_runtimeType))
        {
            alignment_buf = TypeChecker.DialogAlignment_FromNumeric(valueDeserializer.readInt32())
        }
        const alignment_result : DialogAlignment | undefined = alignment_buf
        const offset_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let offset_buf : Offset | undefined
        if ((RuntimeType.UNDEFINED) != (offset_buf_runtimeType))
        {
            offset_buf = valueDeserializer.readOffset()
        }
        const offset_result : Offset | undefined = offset_buf
        const onAccept_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onAccept_buf : ((value: TimePickerResult) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onAccept_buf_runtimeType))
        {
            onAccept_buf = valueDeserializer.readCallback_TimePickerResult_Void()
        }
        const onAccept_result : ((value: TimePickerResult) => void) | undefined = onAccept_buf
        const onCancel_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onCancel_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onCancel_buf_runtimeType))
        {
            onCancel_buf = valueDeserializer.readCallback_Void()
        }
        const onCancel_result : (() => void) | undefined = onCancel_buf
        const onChange_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onChange_buf : ((value: TimePickerResult) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onChange_buf_runtimeType))
        {
            onChange_buf = valueDeserializer.readCallback_TimePickerResult_Void()
        }
        const onChange_result : ((value: TimePickerResult) => void) | undefined = onChange_buf
        const onEnterSelectedArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onEnterSelectedArea_buf : ((value: TimePickerResult) => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onEnterSelectedArea_buf_runtimeType))
        {
            onEnterSelectedArea_buf = valueDeserializer.readCallback_TimePickerResult_Void()
        }
        const onEnterSelectedArea_result : ((value: TimePickerResult) => void) | undefined = onEnterSelectedArea_buf
        const backgroundColor_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundColor_buf : ResourceColor | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundColor_buf_runtimeType))
        {
            const backgroundColor_buf__selector : int32 = valueDeserializer.readInt8()
            let backgroundColor_buf_ : Color | number | string | Resource | undefined
            if (backgroundColor_buf__selector == 0) {
                backgroundColor_buf_ = TypeChecker.Color_FromNumeric(valueDeserializer.readInt32())
            }
            else if (backgroundColor_buf__selector == 1) {
                backgroundColor_buf_ = (valueDeserializer.readNumber() as number)
            }
            else if (backgroundColor_buf__selector == 2) {
                backgroundColor_buf_ = (valueDeserializer.readString() as string)
            }
            else if (backgroundColor_buf__selector == 3) {
                backgroundColor_buf_ = valueDeserializer.readResource()
            }
            else {
                throw new Error("One of the branches for backgroundColor_buf_ has to be chosen through deserialisation.")
            }
            backgroundColor_buf = (backgroundColor_buf_ as Color | number | string | Resource)
        }
        const backgroundColor_result : ResourceColor | undefined = backgroundColor_buf
        const backgroundBlurStyle_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyle_buf : BlurStyle | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyle_buf_runtimeType))
        {
            backgroundBlurStyle_buf = TypeChecker.BlurStyle_FromNumeric(valueDeserializer.readInt32())
        }
        const backgroundBlurStyle_result : BlurStyle | undefined = backgroundBlurStyle_buf
        const backgroundBlurStyleOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundBlurStyleOptions_buf : BackgroundBlurStyleOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundBlurStyleOptions_buf_runtimeType))
        {
            backgroundBlurStyleOptions_buf = valueDeserializer.readBackgroundBlurStyleOptions()
        }
        const backgroundBlurStyleOptions_result : BackgroundBlurStyleOptions | undefined = backgroundBlurStyleOptions_buf
        const backgroundEffect_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let backgroundEffect_buf : BackgroundEffectOptions | undefined
        if ((RuntimeType.UNDEFINED) != (backgroundEffect_buf_runtimeType))
        {
            backgroundEffect_buf = valueDeserializer.readBackgroundEffectOptions()
        }
        const backgroundEffect_result : BackgroundEffectOptions | undefined = backgroundEffect_buf
        const enableCascade_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableCascade_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableCascade_buf_runtimeType))
        {
            enableCascade_buf = valueDeserializer.readBoolean()
        }
        const enableCascade_result : boolean | undefined = enableCascade_buf
        const onDidAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidAppear_buf_runtimeType))
        {
            onDidAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidAppear_result : (() => void) | undefined = onDidAppear_buf
        const onDidDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onDidDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onDidDisappear_buf_runtimeType))
        {
            onDidDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onDidDisappear_result : (() => void) | undefined = onDidDisappear_buf
        const onWillAppear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillAppear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillAppear_buf_runtimeType))
        {
            onWillAppear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillAppear_result : (() => void) | undefined = onWillAppear_buf
        const onWillDisappear_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let onWillDisappear_buf : (() => void) | undefined
        if ((RuntimeType.UNDEFINED) != (onWillDisappear_buf_runtimeType))
        {
            onWillDisappear_buf = valueDeserializer.readCallback_Void()
        }
        const onWillDisappear_result : (() => void) | undefined = onWillDisappear_buf
        const shadow_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let shadow_buf : ShadowOptions | ShadowStyle | undefined
        if ((RuntimeType.UNDEFINED) != (shadow_buf_runtimeType))
        {
            const shadow_buf__selector : int32 = valueDeserializer.readInt8()
            let shadow_buf_ : ShadowOptions | ShadowStyle | undefined
            if (shadow_buf__selector == 0) {
                shadow_buf_ = valueDeserializer.readShadowOptions()
            }
            else if (shadow_buf__selector == 1) {
                shadow_buf_ = TypeChecker.ShadowStyle_FromNumeric(valueDeserializer.readInt32())
            }
            else {
                throw new Error("One of the branches for shadow_buf_ has to be chosen through deserialisation.")
            }
            shadow_buf = (shadow_buf_ as ShadowOptions | ShadowStyle)
        }
        const shadow_result : ShadowOptions | ShadowStyle | undefined = shadow_buf
        const dateTimeOptions_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let dateTimeOptions_buf : DateTimeOptions | undefined
        if ((RuntimeType.UNDEFINED) != (dateTimeOptions_buf_runtimeType))
        {
            dateTimeOptions_buf = valueDeserializer.readDateTimeOptions()
        }
        const dateTimeOptions_result : DateTimeOptions | undefined = dateTimeOptions_buf
        const enableHoverMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHoverMode_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHoverMode_buf_runtimeType))
        {
            enableHoverMode_buf = valueDeserializer.readBoolean()
        }
        const enableHoverMode_result : boolean | undefined = enableHoverMode_buf
        const hoverModeArea_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let hoverModeArea_buf : HoverModeAreaType | undefined
        if ((RuntimeType.UNDEFINED) != (hoverModeArea_buf_runtimeType))
        {
            hoverModeArea_buf = TypeChecker.HoverModeAreaType_FromNumeric(valueDeserializer.readInt32())
        }
        const hoverModeArea_result : HoverModeAreaType | undefined = hoverModeArea_buf
        const enableHapticFeedback_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let enableHapticFeedback_buf : boolean | undefined
        if ((RuntimeType.UNDEFINED) != (enableHapticFeedback_buf_runtimeType))
        {
            enableHapticFeedback_buf = valueDeserializer.readBoolean()
        }
        const enableHapticFeedback_result : boolean | undefined = enableHapticFeedback_buf
        let value : TimePickerDialogOptions = ({selected: selected_result, format: format_result, start: start_result, end: end_result, useMilitaryTime: useMilitaryTime_result, disappearTextStyle: disappearTextStyle_result, textStyle: textStyle_result, acceptButtonStyle: acceptButtonStyle_result, cancelButtonStyle: cancelButtonStyle_result, selectedTextStyle: selectedTextStyle_result, maskRect: maskRect_result, alignment: alignment_result, offset: offset_result, onAccept: onAccept_result, onCancel: onCancel_result, onChange: onChange_result, onEnterSelectedArea: onEnterSelectedArea_result, backgroundColor: backgroundColor_result, backgroundBlurStyle: backgroundBlurStyle_result, backgroundBlurStyleOptions: backgroundBlurStyleOptions_result, backgroundEffect: backgroundEffect_result, enableCascade: enableCascade_result, onDidAppear: onDidAppear_result, onDidDisappear: onDidDisappear_result, onWillAppear: onWillAppear_result, onWillDisappear: onWillDisappear_result, shadow: shadow_result, dateTimeOptions: dateTimeOptions_result, enableHoverMode: enableHoverMode_result, hoverModeArea: hoverModeArea_result, enableHapticFeedback: enableHapticFeedback_result} as TimePickerDialogOptions)
        return value
    }
    readWithThemeOptions(): WithThemeOptions {
        let valueDeserializer : Deserializer = this
        const theme_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let theme_buf : CustomTheme | undefined
        if ((RuntimeType.UNDEFINED) != (theme_buf_runtimeType))
        {
            theme_buf = valueDeserializer.readCustomTheme()
        }
        const theme_result : CustomTheme | undefined = theme_buf
        const colorMode_buf_runtimeType  = (valueDeserializer.readInt8() as int32)
        let colorMode_buf : ThemeColorMode | undefined
        if ((RuntimeType.UNDEFINED) != (colorMode_buf_runtimeType))
        {
            colorMode_buf = TypeChecker.ThemeColorMode_FromNumeric(valueDeserializer.readInt32())
        }
        const colorMode_result : ThemeColorMode | undefined = colorMode_buf
        let value : WithThemeOptions = ({theme: theme_result, colorMode: colorMode_result} as WithThemeOptions)
        return value
    }
    readLength(): Length | undefined {
        const valueType  = this.readInt8()
        if ((RuntimeType.NUMBER) == (valueType)) {
            return this.readFloat32() as number
        }
        else if ((RuntimeType.STRING) == (valueType)) {
            return this.readString()
        }
        else if ((RuntimeType.OBJECT) == (valueType)) {
            return ({id: this.readInt32(), bundleName: "", moduleName: ""}) as Resource
        }
        else {
            return undefined
        }
    }
}
