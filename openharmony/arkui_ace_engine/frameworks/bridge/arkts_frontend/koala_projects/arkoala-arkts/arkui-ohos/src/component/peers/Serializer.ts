/*
 * Copyright (c) 2024-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// WARNING! THIS FILE IS AUTO-GENERATED, DO NOT MAKE CHANGES, THEY WILL BE LOST ON NEXT GENERATION!

import { SerializerBase, DeserializerBase, CallbackResource, InteropNativeModule, MaterializedBase, Tags, RuntimeType, runtimeType, toPeerPtr, nullptr, KPointer, NativeBuffer, KSerializerBuffer, KUint8ArrayPtr } from "@koalaui/interop"
import { int32, int64, float32, unsafeCast } from "@koalaui/common"
import { CallbackKind } from "./CallbackKind"
import { TypeChecker } from "#components"
import { CallbackTransformer } from "./CallbackTransformer"
import { SingleLengthDetent, DoubleLengthDetents, TripleLengthDetents, AccessibilityCallback, AccessibilityFocusCallback, Bindable, GestureRecognizerJudgeBeginCallback, HoverCallback, OnDragEventCallback, OnMoveHandler, OnScrollCallback, PopupStateChangeCallback, ReuseIdCallback, ShouldBuiltInRecognizerParallelWithCallback, SizeChangeCallback, TransitionFinishCallback, VisibleAreaChangeCallback, AccessibilityHoverEvent, AccessibilityHoverEventInternal, AccessibilityRoleType, AccessibilitySamePageMode, AdaptiveColor, CommonMethod, BlurStyle, BlendApplyType, BlurStyleActivePolicy, PickerTextStyle, ChainStyle, ContentClipMode, DismissReason, DragBehavior, DragEvent, DragEventInternal, DragResult, Rectangle, DataSyncOptions, DraggingSizeChangeEffect, DragPreviewMode, DrawModifier, DrawModifierInternal, EffectEdge, EffectType, FinishCallbackType, GestureModifier, GestureModifierInternal, UIGestureEvent, ScrollableCommonMethod, ItemDragInfo, CustomBuilder, NestedScrollOptions, EdgeEffectOptions, HapticFeedbackMode, HoverModeAreaType, ICurve, ICurveInternal, KeyboardAvoidMode, LayoutPolicy, LayoutSafeAreaEdge, LayoutSafeAreaType, ChildrenMainSize, ChildrenMainSizeInternal, RectResult, MenuPolicy, MenuPreviewMode, ModalTransition, OutlineStyle, PixelMapMock, PixelMapMockInternal, PopupStateChangeParam, PreDragStatus, ProgressMask, ProgressMaskInternal, RepeatMode, SelectionOptions, SafeAreaEdge, SafeAreaType, ScrollSizeMode, TextDecorationOptions, TextContentControllerBase, TextContentControllerBaseInternal, ShadowStyle, ShadowType, SheetKeyboardAvoidMode, SheetMode, SheetSize, SheetType, SourceTool, SourceType, BackgroundEffectOptions, BackgroundBlurStyleOptions, TranslateOptions, InputCounterOptions, ShadowOptions, CaretOffset, TextContentControllerOptions, ThemeColorMode, TouchTestInfo, TouchTestStrategy, TransitionEdge, TransitionEffect, TransitionEffectInternal, TransitionEffects, RotateOptions, ScaleOptions, AnimateParam, TransitionHierarchyStrategy, UICommonEvent, UICommonEventInternal, Callback_ClickEvent_Void, ClickEvent, ClickEventInternal, Callback_TouchEvent_Void, TouchEvent, TouchEventInternal, Callback_KeyEvent_Void, KeyEvent, KeyEventInternal, HoverEvent, HoverEventInternal, Callback_MouseEvent_Void, MouseEvent, MouseEventInternal, VisibleAreaEventOptions, SheetOptions, View, ViewInternal, Callback_KeyEvent_Boolean, Callback_Area_Area_Void, Callback_Array_TouchTestInfo_TouchResult, TouchResult, Callback_AxisEvent_Void, AxisEvent, AxisEventInternal, Callback_Boolean_HoverEvent_Void, Callback_CrownEvent_Void, CrownEvent, Callback_DismissContentCoverAction_Void, DismissContentCoverAction, Callback_DismissPopupAction_Void, DismissPopupAction, Callback_DismissSheetAction_Void, DismissSheetAction, Callback_DragEvent_String_Union_CustomBuilder_DragItemInfo, DragItemInfo, Callback_DragEvent_String_Void, Callback_FocusAxisEvent_Void, FocusAxisEvent, FocusAxisEventInternal, Callback_GestureInfo_BaseGestureEvent_GestureJudgeResult, Callback_HoverEvent_Void, Callback_Literal_Boolean_isVisible_Void, Literal_Boolean_isVisible, Callback_PreDragStatus_Void, Callback_SheetDismiss_Void, SheetDismiss, Callback_SheetType_Void, Callback_SpringBackAction_Void, SpringBackAction, Callback_TouchEvent_HitTestMode, BackgroundBrightnessOptions, BackgroundImageOptions, BlurOptions, ClickEffect, DateRange, DragInteractionOptions, DropOptions, ExpectedFrameRateRange, FocusMovement, ForegroundEffectOptions, GeometryTransitionOptions, InvertOptions, LinearGradient_common, Tuple_ResourceColor_Number, LinearGradientBlurOptions, FractionStop, LinearGradientOptions, LocalizedHorizontalAlignParam, LocalizedVerticalAlignParam, Measurable, MeasurableInternal, MeasureResult, SizeResult, MotionBlurAnchor, MotionBlurOptions, MotionPathOptions, OverlayOffset, PixelRoundPolicy, PixelStretchEffectOptions, PreviewConfiguration, RadialGradientOptions, Tuple_Length_Length, StateStyles, SweepGradientOptions, SystemAdaptiveOptions, TipsOptions, TouchObject, AlignRuleOption, HorizontalAlignParam, VerticalAlignParam, BlurStyleOptions, ContentCoverOptions, BindOptions, ContextMenuAnimationOptions, MultiShadowOptions, DragPreviewOptions, EventTarget, FadingEdgeOptions, BaseEvent, BaseEventInternal, ForegroundBlurStyleOptions, HistoricalPoint, LightSource, LocalizedAlignRuleOptions, MenuElement, OverlayOptions, PickerDialogButtonStyle, ReuseOptions, sharedTransitionOptions, SheetTitleOptions, TransitionOptions, BorderImageOption, CustomPopupOptions, Literal_ResourceColor_color, PointLightStyle, PopupMessageOptions, Type_SheetOptions_detents, ContextMenuOptions, BorderRadiusType, MenuOptions, PopupOptions, Literal_String_value_Callback_Void_action, ScrollResult, PopupMaskType, DividerStyle, BlendMode, PopupButton } from "./../common"
import { ButtonTriggerClickCallback, ButtonRole, ButtonStyleMode, ButtonType, ControlSize, ButtonOptions } from "./../button"
import { Callback_Extender_OnFinish, Callback_Extender_OnProgress, DoubleAnimationParam } from "./../animationExtender"
import { Callback_RangeUpdate, Context_getGroupDir_Callback, RestrictedWorker_onerror_Callback, RestrictedWorker_onexit_Callback, RestrictedWorker_onmessage_Callback, ComponentContent, ComponentContentInternal, UnifiedData, UnifiedDataInternal, SystemBarStyle, PointerStyle, Scene, SceneInternal, Context, ContextInternal, WorkerEventListener, WorkerEventListenerInternal, Event, ErrorEvent, MessageEvents, BaseContext, BaseContextInternal, PostMessageOptions, WorkerOptions, CustomColors, RestrictedWorker, RestrictedWorkerInternal, CustomTheme } from "./../arkui-custom"
import { UIContext } from "@ohos/arkui/UIContext"
import { ContentDidScrollCallback, ContentWillScrollCallback, OnSwiperAnimationEndCallback, OnSwiperAnimationStartCallback, OnSwiperGestureSwipeCallback, SwiperAnimationEvent, SwiperAnimationMode, SwiperAttribute, DotIndicator, DigitIndicator, SwiperDisplayMode, SwiperNestedScrollMode, SwiperContentAnimatedTransition, SwiperContentWillScrollResult, AutoPlayOptions, ArrowStyle, SwiperAutoFill, SwiperContentTransitionProxy, SwiperContentTransitionProxyInternal, SwiperController, SwiperControllerInternal, Callback_SwiperContentTransitionProxy_Void, Indicator } from "./../swiper"
import { CustomNodeBuilder } from "./../customBuilder"
import { EditableTextOnChangeCallback, OnDidChangeCallback, AutoCapitalizationMode, KeyboardAppearance, LayoutManager, LayoutManagerInternal, PositionWithAffinity, TextRange, MenuType, TextDataDetectorConfig, EditMenuOptions, TextEditControllerEx, TextEditControllerExInternal, PreviewText, StyledStringController, StyledStringControllerInternal, StyledStringChangedListener, CaretStyle, TextChangeOptions, InsertValue, DeleteValue, EditableTextChangeValue, FontSettingOptions, TextBaseController, TextBaseControllerInternal, TextDataDetectorType, TextDeleteDirection, TextMenuItemId, TextMenuItemIdInternal, TextMenuShowMode, AsyncCallback_Array_TextMenuItem_Array_TextMenuItem, TextMenuItem, AsyncCallback_TextMenuItem_TextRange_Boolean, Callback_StyledStringChangeValue_Boolean, StyledStringChangeValue, DecorationStyleResult } from "./../textCommon"
import { ErrorCallback } from "./../ohos.base"
import { GetItemMainSizeByIndex, WaterFlowAttribute, WaterFlowLayoutMode, WaterFlowSections, WaterFlowSectionsInternal, SectionOptions, WaterFlowOptions } from "./../waterFlow"
import { ImageCompleteCallback, ImageLoadResult } from "./../imageSpan"
import { ImageErrorCallback, ColorContent, DynamicRangeMode, ImageContent, ImageInterpolation, ImageRenderMode, ImageRotateOrientation, Callback_Type_ImageAttribute_onComplete_callback_event_Void, Type_ImageAttribute_onComplete_callback_event, ImageError, ImageSourceSize, ResizableOptions } from "./../image"
import { InterceptionModeCallback, InterceptionShowCallback, BarStyle, LaunchMode, NavBarPosition, NavigationMenuItem, NavigationOperation, NavigationTitleOptions, NavigationMenuOptions, ToolbarItem, NavigationToolbarOptions, NavigationAttribute, Tuple_Dimension_Dimension, NavigationMode, NavigationTitleMode, Callback_NavigationTitleMode_Void, Callback_Boolean_Void, Callback_NavigationMode_Void, Callback_String_Opt_Object_Void, Type_NavigationAttribute_customNavContentTransition_delegate, NavContentInfo, NavigationAnimatedTransition, NavigationCommonTitle, NavigationCustomTitle, NavPathStack, NavPathStackInternal, NavPathInfo, NavPathInfoInternal, NavigationOptions, Callback_PopInfo_Void, PopInfo, NavigationInterception, ToolbarItemStatus, Callback_NavigationTransitionProxy_Void, NavigationTransitionProxy, NavigationTransitionProxyInternal, NavBar, MoreButtonOptions } from "./../navigation"
import { LocationButtonCallback, LocationButtonOnClickResult, LocationDescription, LocationIconStyle, LocationButtonOptions } from "./../locationButton"
import { MenuCallback, MenuOnAppearCallback, PasteEventCallback, SubmitCallback, RichEditorAttribute, Callback_RichEditorSelection_Void, RichEditorSelection, Callback_RichEditorRange_Void, RichEditorRange, Callback_RichEditorInsertValue_Boolean, RichEditorInsertValue, Callback_RichEditorTextSpanResult_Void, RichEditorTextSpanResult, Callback_TextRange_Void, Callback_RichEditorDeleteValue_Boolean, RichEditorDeleteValue, PasteEvent, Callback_RichEditorChangeValue_Boolean, RichEditorChangeValue, Callback_CutEvent_Void, CutEvent, Callback_CopyEvent_Void, CopyEvent, RichEditorSpanType, RichEditorResponseType, SelectionMenuOptions, KeyboardOptions, PlaceholderStyle, RichEditorBaseController, RichEditorBaseControllerInternal, RichEditorTextStyle, RichEditorController, RichEditorControllerInternal, RichEditorTextSpanOptions, RichEditorImageSpanOptions, RichEditorBuilderSpanOptions, RichEditorSymbolSpanOptions, RichEditorUpdateTextSpanStyleOptions, RichEditorUpdateImageSpanStyleOptions, RichEditorUpdateSymbolSpanStyleOptions, RichEditorParagraphStyleOptions, RichEditorImageSpanResult, RichEditorParagraphResult, RichEditorSpan, RichEditorDeleteDirection, RichEditorOptions, RichEditorStyledStringController, RichEditorStyledStringControllerInternal, RichEditorStyledStringOptions, LeadingMarginPlaceholder, PreviewMenuOptions, RichEditorGesture, RichEditorSpanPosition, RichEditorLayoutStyle, RichEditorParagraphStyle, RichEditorSymbolSpanStyle, RichEditorSpanStyleOptions, RichEditorUrlStyle, RichEditorImageSpanStyle, RichEditorImageSpanStyleResult, RichEditorTextStyleResult } from "./../richEditor"
import { NavDestinationTransitionDelegate, NavDestinationActiveReason, NavDestinationAttribute, Callback_Boolean, Callback_Object_Void, NavDestinationMode, Callback_NavDestinationContext_Void, NavDestinationContext, NavDestinationContextInternal, NavigationSystemTransitionType, NestedScrollInfo, Callback_NavDestinationActiveReason_Void, Orientation, NavDestinationCommonTitle, NavDestinationCustomTitle, NavDestinationTransition, RouteMapConfig } from "./../navDestination"
import { NavExtender_OnUpdateStack } from "./../navigationExtender"
import { OnAdsBlockedCallback, OnContextMenuHideCallback, OnFirstMeaningfulPaintCallback, OnFullScreenEnterCallback, OnIntelligentTrackingPreventionCallback, OnLargestContentfulPaintCallback, OnNativeEmbedVisibilityChangeCallback, OnNavigationEntryCommittedCallback, OnOverrideUrlLoadingCallback, OnRenderProcessNotRespondingCallback, OnRenderProcessRespondingCallback, OnSafeBrowsingCheckResultCallback, OnSslErrorEventCallback, OnViewportFitChangedCallback, WebKeyboardCallback, BlurOnKeyboardHideMode, CacheMode, ClientAuthenticationHandler, ClientAuthenticationHandlerInternal, ConsoleMessage, ConsoleMessageInternal, MessageLevel, ContextMenuEditStateFlags, ContextMenuInputFieldType, ContextMenuMediaType, ContextMenuSourceType, ControllerHandler, ControllerHandlerInternal, DataResubmissionHandler, DataResubmissionHandlerInternal, EventResult, EventResultInternal, FileSelectorMode, FileSelectorParam, FileSelectorParamInternal, FileSelectorResult, FileSelectorResultInternal, FullScreenExitHandler, FullScreenExitHandlerInternal, HitTestType, HttpAuthHandler, HttpAuthHandlerInternal, JsGeolocation, JsGeolocationInternal, JsResult, JsResultInternal, MixedMode, NativeEmbedStatus, NativeMediaPlayerConfig, OnAudioStateChangedEvent, OnConsoleEvent, OnDataResubmittedEvent, OnFirstContentfulPaintEvent, OnOverScrollEvent, OnProgressChangeEvent, OnScaleChangeEvent, OnScrollEvent, OnSearchResultReceiveEvent, OnShowFileSelectorEvent, OverScrollMode, PermissionRequest, PermissionRequestInternal, ProtectedResourceType, RenderExitReason, RenderMode, RenderProcessNotRespondingReason, ScreenCaptureHandler, ScreenCaptureHandlerInternal, ScreenCaptureConfig, SslError, SslErrorHandler, SslErrorHandlerInternal, ThreatType, ViewportFit, WebAttribute, JavaScriptProxy, WebDarkMode, WebMediaOptions, Callback_OnPageEndEvent_Void, OnPageEndEvent, Callback_OnPageBeginEvent_Void, OnPageBeginEvent, Callback_OnProgressChangeEvent_Void, Callback_OnTitleReceiveEvent_Void, OnTitleReceiveEvent, Callback_OnGeolocationShowEvent_Void, OnGeolocationShowEvent, Callback_OnAlertEvent_Boolean, OnAlertEvent, Callback_OnBeforeUnloadEvent_Boolean, OnBeforeUnloadEvent, Callback_OnConfirmEvent_Boolean, OnConfirmEvent, Callback_OnPromptEvent_Boolean, OnPromptEvent, Callback_OnConsoleEvent_Boolean, Callback_OnErrorReceiveEvent_Void, OnErrorReceiveEvent, Callback_OnHttpErrorReceiveEvent_Void, OnHttpErrorReceiveEvent, Callback_OnDownloadStartEvent_Void, OnDownloadStartEvent, Callback_OnRefreshAccessedHistoryEvent_Void, OnRefreshAccessedHistoryEvent, Type_WebAttribute_onUrlLoadIntercept_callback, Literal_Union_String_WebResourceRequest_data, WebResourceRequest, WebResourceRequestInternal, Callback_Literal_Function_handler_Object_error_Void, Literal_Function_handler_Object_error, Callback_OnRenderExitedEvent_Void, OnRenderExitedEvent, Callback_OnShowFileSelectorEvent_Boolean, Callback_Literal_Object_detail_Boolean, Literal_Object_detail, Type_WebAttribute_onFileSelectorShow_callback, Literal_Function_callback__Object_fileSelector, Callback_OnResourceLoadEvent_Void, OnResourceLoadEvent, FullScreenEnterEvent, Callback_OnScaleChangeEvent_Void, Callback_OnHttpAuthRequestEvent_Boolean, OnHttpAuthRequestEvent, Callback_OnInterceptRequestEvent_WebResourceResponse, OnInterceptRequestEvent, WebResourceResponse, WebResourceResponseInternal, Callback_OnPermissionRequestEvent_Void, OnPermissionRequestEvent, Callback_OnScreenCaptureRequestEvent_Void, OnScreenCaptureRequestEvent, Callback_OnContextMenuShowEvent_Boolean, OnContextMenuShowEvent, Callback_OnSearchResultReceiveEvent_Void, Callback_OnScrollEvent_Void, Callback_OnSslErrorEventReceiveEvent_Void, OnSslErrorEventReceiveEvent, SslErrorEvent, Callback_OnClientAuthenticationEvent_Void, OnClientAuthenticationEvent, Callback_OnWindowNewEvent_Void, OnWindowNewEvent, Callback_OnTouchIconUrlReceivedEvent_Void, OnTouchIconUrlReceivedEvent, Callback_OnFaviconReceivedEvent_Void, OnFaviconReceivedEvent, Callback_OnPageVisibleEvent_Void, OnPageVisibleEvent, Callback_OnDataResubmittedEvent_Void, Callback_OnAudioStateChangedEvent_Void, Callback_OnFirstContentfulPaintEvent_Void, FirstMeaningfulPaint, LargestContentfulPaint, Callback_OnLoadInterceptEvent_Boolean, OnLoadInterceptEvent, Callback_OnOverScrollEvent_Void, LoadCommittedDetails, IntelligentTrackingPreventionDetails, ScriptItem, WebLayoutMode, NestedScrollOptionsExt, Callback_NativeEmbedDataInfo_Void, NativeEmbedDataInfo, NativeEmbedVisibilityInfo, Callback_NativeEmbedTouchInfo_Void, NativeEmbedTouchInfo, RenderProcessNotRespondingData, ExpandedMenuItemOptions, WebKeyboardCallbackInfo, AdsBlockedDetails, WebKeyboardAvoidMode, EmbedOptions, WebElementType, WebResponseType, SelectionMenuOptionsExt, WebCaptureMode, WebContextMenuParam, WebContextMenuParamInternal, WebContextMenuResult, WebContextMenuResultInternal, WebController, WebControllerInternal, Literal_String_script_Callback_String_Void_callback_, Literal_String_baseUrl_data_encoding_historyUrl_mimeType, Literal_Union_String_Resource_url_Array_Header_headers, Header, Literal_Object_object__String_name_Array_String_methodList, WebCookie, WebCookieInternal, WebKeyboardController, WebKeyboardControllerInternal, WebNavigationType, WebResourceError, WebResourceErrorInternal, Callback_Literal_String_plainText_Void, Literal_String_plainText, WebKeyboardOptions, WebOptionsSerializer, NativeEmbedInfo } from "./../web"
import { OnAlphabetIndexerPopupSelectCallback, OnAlphabetIndexerRequestPopupDataCallback, OnAlphabetIndexerSelectCallback, AlphabetIndexerAttribute, Callback_Number_Void, IndexerAlign, Callback_Opt_Number_Void, AlphabetIndexerOptions } from "./../alphabetIndexer"
import { OnCheckboxChangeCallback, Callback_Opt_Boolean_Void, CheckboxOptions } from "./../checkbox"
import { OnCheckboxGroupChangeCallback, SelectStatus, CheckboxGroupResult, CheckboxGroupOptions } from "./../checkboxgroup"
import { OnContentScrollCallback, OnPasteCallback, OnSubmitCallback, OnTextSelectionChangeCallback, ContentType, EnterKeyType, InputType, SubmitEvent, SubmitEventInternal, TextInputAttribute, TextInputStyle, PasswordIcon, UnderlineColor, TextInputController, TextInputControllerInternal, TextInputOptions } from "./../textInput"
import { OnFoldStatusChangeCallback, OnHoverStatusChangeCallback, OnFoldStatusChangeInfo, HoverEventParam, FolderStackOptions } from "./../folderStack"
import { OnHoverCallback } from "./../sdk-stubs"
import { OnLinearIndicatorChangeCallback, LinearIndicatorController, LinearIndicatorControllerInternal, LinearIndicatorStartOptions, LinearIndicatorStyle } from "./../linearindicator"
import { OnNativeLoadCallback, XComponentController, XComponentControllerInternal, Literal_Number_surfaceHeight_surfaceWidth, SurfaceRect, SurfaceRotationOptions, NativeXComponentParameters, XComponentOptions } from "./../xcomponent"
import { OnRadioChangeCallback, RadioIndicatorType, RadioOptions, RadioStyle } from "./../radio"
import { OnRatingChangeCallback, RatingOptions, StarStyleOptions } from "./../rating"
import { OnScrollEdgeCallback, OnScrollFrameBeginCallback, ScrollOnScrollCallback, ScrollOnWillScrollCallback, Scroller, ScrollerInternal, ScrollAlign, OffsetResult, OnScrollFrameBeginHandlerResult, ScrollAttribute, ScrollDirection, ScrollSnapOptions, OffsetOptions, ScrollOptions, ScrollEdgeOptions, ScrollPageOptions, Literal_Boolean_next_Axis_direction, ScrollToIndexOptions, ScrollAnimationOptions } from "./../scroll"
import { OnScrollVisibleContentChangeCallback, ChainEdgeEffect, ScrollState, ListAttribute, ListItemAlign, ListDividerOptions, ChainAnimationOptions, StickyStyle, ScrollSnapAlign, Callback_Number_Number_Number_Void, VisibleListContentInfo, Callback_Number_Boolean, Callback_Number_Number_Boolean, ListItemGroupArea, ListScroller, ListScrollerInternal, CloseSwipeActionOptions, ListOptions } from "./../list"
import { OnSelectCallback, ArrowPosition, AvoidanceMode, MenuAlignType, SelectAttribute, Callback_Number_String_Void, MenuOutlineOptions, Callback_Opt_Union_Number_Resource_Void, Callback_Opt_ResourceStr_Void, MenuItemConfiguration, MenuItemConfigurationInternal, SelectOption } from "./../select"
import { OnTabsAnimationEndCallback, OnTabsAnimationStartCallback, OnTabsContentWillChangeCallback, OnTabsGestureSwipeCallback, TabsCustomContentTransitionCallback, AnimationMode, BarMode, BarPosition, LayoutStyle, TabContentTransitionProxy, TabContentTransitionProxyInternal, TabsAnimationEvent, TabsAttribute, BarGridColumnOptions, ScrollableBarModeOptions, TabsCacheMode, TabsController, TabsControllerInternal, TabContentAnimatedTransition, Callback_TabContentTransitionProxy_Void, CommonModifier, TabsOptions } from "./../tabs"
import { OnTextPickerChangeCallback, TextPickerEnterSelectedAreaCallback, TextPickerScrollStopCallback, DividerOptions, TextPickerDialogOptions, Callback_String_Number_Void, Callback_TextPickerResult_Void, TextPickerResult, Callback_Union_Number_Array_Number_Void, Callback_Union_String_Array_String_Void, Type_TextPickerAttribute_onChange_callback, TextCascadePickerRangeContent, TextPickerOptions, TextPickerRangeContent, TextPickerTextStyle } from "./../textPicker"
import { OnTimePickerChangeCallback, TimePickerFormat, TimePickerResult, Callback_TimePickerResult_Void, TimePickerOptions, TimePickerDialogOptions } from "./../timePicker"
import { PageTransitionCallback, RouteType, SlideEffect } from "./../pageTransition"
import { PasteButtonCallback, PasteButtonOnClickResult, PasteDescription, PasteIconStyle, PasteButtonOptions } from "./../pasteButton"
import { PluginErrorCallback, PluginErrorData, PluginComponentTemplate, PluginComponentOptions } from "./../pluginComponent"
import { ReceiveCallback, BaseShape, BaseShapeInternal, CircleShape, CircleShapeInternal, ShapeSize, CommonShape, CommonShapeInternal, WebviewController, WebviewControllerInternal, Summary, EllipseShape, EllipseShapeInternal, ImageModifier, IntentionCode, RectWidthStyle, RectHeightStyle, SymbolGlyphModifier, PathShape, PathShapeInternal, PathShapeOptions, PerfMonitorActionType, PerfMonitorSourceType, RectShape, RectShapeInternal, RectShapeOptions, RoundRectShapeOptions, ResolutionQuality, TextModifier, IndicatorStyle, WebHeader, WindowStatusType, AsyncCallback_image_PixelMap_Void, SnapshotOptions, LabelStyle } from "./../arkui-external"
import { SymbolEffect, SymbolEffectInternal, ReplaceSymbolEffect, ReplaceSymbolEffectInternal, ScaleSymbolEffect, ScaleSymbolEffectInternal } from "../symbolglyph"
import { FontOptions, FontInfo } from "@ohos/font"
import { MeasureOptions } from "@ohos/measure"
import { SaveButtonCallback, SaveButtonOnClickResult, SaveDescription, SaveIconStyle, SaveButtonOptions } from "./../saveButton"
import { SearchSubmitCallback, CancelButtonStyle, SearchAttribute, IconOptions, CancelButtonOptions, CancelButtonSymbolOptions, SearchType, Callback_InsertValue_Boolean, Callback_InsertValue_Void, Callback_DeleteValue_Boolean, Callback_DeleteValue_Void, Callback_EditableTextChangeValue_Boolean, SearchButtonOptions, SearchController, SearchControllerInternal, SearchOptions } from "./../search"
import { SearchValueCallback } from "./../searchops"
import { SliderTriggerChangeCallback, SliderAttribute, Callback_Number_SliderChangeMode_Void, SliderChangeMode, SliderBlockStyle, SliderInteraction, SlideRange, SliderBlockType, SliderStyle, SliderOptions } from "./../slider"
import { StyledStringMarshallCallback, StyledStringUnmarshallCallback, CustomSpan, CustomSpanInternal, CustomSpanMeasureInfo, CustomSpanMetrics, CustomSpanDrawInfo, GestureStyle, GestureStyleInternal, GestureStyleInterface, StyledString, StyledStringInternal, MutableStyledString, MutableStyledStringInternal, ImageAttachment, ImageAttachmentInternal, StyleOptions, StyledStringKey, SpanStyle, UserDataSpan, DecorationStyleInterface, UrlStyle, UrlStyleInternal, BaselineOffsetStyle, BaselineOffsetStyleInternal, LetterSpacingStyle, LetterSpacingStyleInternal, LineHeightStyle, LineHeightStyleInternal, TextShadowStyle, TextShadowStyleInternal, DecorationStyle, DecorationStyleInternal, ImageAttachmentLayoutStyle, ParagraphStyle, ParagraphStyleInternal, ParagraphStyleInterface, TextStyle, TextStyle_styled_stringInternal, TextStyleInterface, BackgroundColorStyle, BackgroundColorStyleInternal, ColorFilterType, ImageAttachmentInterface, AttachmentType, ResourceImageAttachmentOptions, StyledStringValue } from "./../styledString"
import { TextAreaSubmitCallback, TextAreaAttribute, Callback_EnterKeyType_Void, Callback_String_PasteEvent_Void, TextAreaType, Callback_ResourceStr_Void, TextAreaController, TextAreaControllerInternal, TextAreaOptions } from "./../textArea"
import { TextFieldValueCallback } from "./../textfieldops"
import { VoidCallback, ResourceColor, Font, Position, Length, SizeOptions, Offset, ColorFilter, ColorFilterInternal, ResourceStr, Dimension, PX, VP, FP, LPX, Percentage, LengthConstrain, DividerStyleOptions, ConstraintSizeOptions, Area, AccessibilityOptions, Bias, BorderRadiuses, ChainWeightOptions, DirectionalEdgesT, EdgeOutlineStyles, EdgeOutlineWidths, EdgeWidths, OutlineRadiuses, Padding, EdgeColors, LocalizedBorderRadiuses, LocalizedEdgeColors, LocalizedEdges, LocalizedEdgeWidths, LocalizedPadding, LocalizedPosition, MarkStyle, BorderOptions, OutlineOptions, EdgeStyles, Edges } from "./../units"
import { WithThemeInterface, WithThemeAttribute, WithThemeOptions } from "./../withTheme"
import { AccessibilityHoverType, Alignment, Color, AnimationStatus, AppRotation, ArrowPointPosition, Axis, AxisAction, AxisModel, BarState, BorderStyle, CheckBoxShape, ClickEffectLevel, ColoringStrategy, CopyOptions, CrownAction, CrownSensitivity, Curve, DialogButtonStyle, Direction, DividerMode, Edge, EdgeEffect, EllipsisMode, EmbeddedType, FillMode, FlexAlign, FlexDirection, FlexWrap, FocusDrawLevel, FoldStatus, FontStyle, FontWeight, FunctionKey, GradientDirection, HeightBreakpoint, HitTestMode, HorizontalAlign, HoverEffect, IlluminatedType, ImageFit, ImageRepeat, ImageSize, ImageSpanAlignment, InteractionHand, ItemAlign, KeySource, KeyType, LineBreakStrategy, LineCapStyle, LineJoinStyle, MarqueeUpdateStrategy, ModifierKey, MouseAction, MouseButton, NestedScrollMode, ObscuredReasons, OptionWidthMode, PageFlipMode, PixelRoundCalcPolicy, PixelRoundMode, Placement, PlayMode, RelateType, RenderFit, ResponseType, ScrollSource, TextAlign, SharedTransitionEffectType, TextOverflow, TextContentStyle, TextHeightAdaptivePolicy, WordBreak, TextCase, TextSelectableMode, TextDecorationStyle, TextDecorationType, TitleHeight, TouchType, TransitionType, VerticalAlign, Visibility, Week, WidthBreakpoint, XComponentType } from "./../enums"
import { Affinity, LineMetrics, TextBox, RunMetrics, TextDirection } from "./../arkui-graphics-text"
import { Resource } from "global.resource"
import { AnimatedDrawableDescriptor, AnimatedDrawableDescriptorInternal, DrawableDescriptor, DrawableDescriptorInternal, AnimationOptions, LayeredDrawableDescriptor, LayeredDrawableDescriptorInternal, PixelMapDrawableDescriptor, PixelMapDrawableDescriptorInternal } from "./../arkui-drawabledescriptor"
import { PixelMap, PixelMapInternal } from "./../arkui-pixelmap"
import { BadgePosition, BadgeStyle, BadgeParamWithNumber, BadgeParam, BadgeParamWithString } from "./../badge"
import { BarrierDirection, LocalizedBarrierDirection, BarrierStyle, GuideLinePosition, GuideLineStyle, LocalizedBarrierStyle } from "./../relativeContainer"
import { DrawingCanvas, DrawingCanvasInternal, DrawingColorFilter, DrawingColorFilterInternal, DrawingLattice, DrawingLatticeInternal, RectType } from "./../arkui-drawing"
import { drawing } from "@ohos/graphics/drawing"
import { BreakpointsReference, GridRowDirection, Callback_String_Void, BreakPoints, GridRowColumnOption, GridRowSizeOption, GutterOption, GridRowOptions } from "./../gridRow"
import { CalendarAlign, CalendarPickerAttribute, Callback_Date_Void, CalendarOptions, CalendarDialogOptions } from "./../calendarPicker"
import { CalendarController, CalendarControllerInternal, Literal_Number_day_month_year, Callback_CalendarRequestedData_Void, CalendarRequestedData, Callback_CalendarSelectedDate_Void, CalendarSelectedDate, CalendarDay, MonthData, CurrentDayStyle, NonCurrentDayStyle, TodayStyle, WeekStyle, WorkStateStyle } from "./../calendar"
import { CanvasGradient, CanvasGradientInternal, CanvasPath, CanvasPathInternal, CanvasPattern, CanvasPatternInternal, OffscreenCanvas, OffscreenCanvasInternal, ImageBitmap, ImageBitmapInternal, RenderingContextSettings, RenderingContextSettingsInternal, OffscreenCanvasRenderingContext2D, OffscreenCanvasRenderingContext2DInternal, Path2D, Path2DInternal, TextMetrics, DrawingRenderingContext, DrawingRenderingContextInternal, ImageData, ImageDataInternal, CanvasRenderer, CanvasRendererInternal, ImageSmoothingQuality, CanvasLineCap, CanvasLineJoin, CanvasDirection, CanvasTextAlign, CanvasTextBaseline, CanvasFillRule, CanvasRenderingContext2D, CanvasRenderingContext2DInternal } from "./../canvas"
import { Matrix2D, Matrix2DInternal } from "./../matrix2d"
import { ColorMode, LayoutDirection } from "./../stateManagement"
import { Component3DAttribute, ModelType, SceneOptions } from "./../component3d"
import { CustomDialogController, CustomDialogControllerInternal, CustomDialogControllerOptions } from "./../customDialogController"
import { DrawContext, Rect, LengthMetricsUnit, LengthUnit, ShapeClip, RoundRect, Circle, CommandPath, ShapeMask, Size, Vector2, Vector3, Corners, CornerRadius, Edges as EdgesT, Frame, Matrix4, LengthMetrics, Position as GraphicsPosition, ColorMetrics } from "./../../Graphics"
import { DataOperationType } from "./../lazyForEach"
import { DataPanelType, LinearGradient, LinearGradientInternal, ColorStop, DataPanelOptions, DataPanelShadowOptions } from "./../dataPanel"
import { DatePickerMode, Callback_DatePickerResult_Void, DatePickerResult, DatePickerOptions, LunarSwitchStyle, DatePickerDialogOptions } from "./../datePicker"
import { DialogAlignment, DialogButtonDirection, LevelOrder, TextStyle_alert_dialog, AlertDialogButtonBaseOptions, AlertDialogButtonOptions, AlertDialogParamWithButtons, AlertDialogParam, AlertDialogParamWithConfirm, AlertDialogParamWithOptions } from "./../alertDialog"
import { DistributionType, DisturbanceFieldShape, ParticleEmitterShape, ParticleType, ParticleUpdater } from "./../particle"
import { DpiFollowStrategy, UIExtensionProxy, UIExtensionProxyInternal, Callback_UIExtensionProxy_Void, WindowModeFollowStrategy, Callback_Literal_Number_code__want_Void, Literal_Number_code__want, Callback_Map_String_Object_Void, UIExtensionOptions } from "./../uiExtensionComponent"
import { EditMode, ListItemStyle, Sticky, SwipeActionState, SwipeEdgeEffect, Callback_SwipeActionState_Void, ListItemOptions, SwipeActionItem, SwipeActionOptions } from "./../listItem"
import { EffectFillStyle, PulseSymbolEffect, PulseSymbolEffectInternal, SymbolEffectStrategy, SymbolGlyphAttribute, SymbolRenderingStrategy, AppearSymbolEffect, AppearSymbolEffectInternal, BounceSymbolEffect, BounceSymbolEffectInternal, DisappearSymbolEffect, DisappearSymbolEffectInternal, HierarchicalSymbolEffect, HierarchicalSymbolEffectInternal } from "./../symbolglyph"
import { EventTargetInfo, EventTargetInfoInternal, GestureControl, GestureGroupInterface, GestureGroupInterfaceInternal, GestureMode, GestureType, TapGestureInterface, TapGestureInterfaceInternal, LongPressGestureInterface, LongPressGestureInterfaceInternal, PanGestureInterface, PanGestureInterfaceInternal, PinchGestureInterface, PinchGestureInterfaceInternal, SwipeGestureInterface, SwipeGestureInterfaceInternal, RotationGestureInterface, RotationGestureInterfaceInternal, GestureJudgeResult, GestureMask, GesturePriority, GestureRecognizer, GestureRecognizerInternal, GestureRecognizerState, GestureInterface, Literal_Number_duration_fingers_Boolean_repeat, LongPressGestureHandlerOptions, Callback_GestureEvent_Void, GestureEvent, GestureEventInternal, LongPressRecognizer, LongPressRecognizerInternal, PanDirection, Literal_Number_distance_fingers_PanDirection_direction, PanGestureOptions, PanGestureOptionsInternal, PanGestureHandlerOptions, PanRecognizer, PanRecognizerInternal, Literal_Number_distance_fingers, PinchGestureHandlerOptions, PinchRecognizer, PinchRecognizerInternal, Literal_Number_angle_fingers, RotationGestureHandlerOptions, RotationRecognizer, RotationRecognizerInternal, ScrollableTargetInfo, ScrollableTargetInfoInternal, SwipeDirection, Literal_Number_fingers_speed_SwipeDirection_direction, SwipeGestureHandlerOptions, SwipeRecognizer, SwipeRecognizerInternal, TapGestureParameters, TapRecognizer, TapRecognizerInternal, GestureHandler, GestureInfo, BaseGestureEvent, BaseGestureEventInternal, FingerInfo, BaseHandlerOptions, LongPressGestureEvent, LongPressGestureEventInternal, PanGestureEvent, PanGestureEventInternal, PinchGestureEvent, PinchGestureEventInternal, RotationGestureEvent, RotationGestureEventInternal, SwipeGestureEvent, SwipeGestureEventInternal, TapGestureEvent, TapGestureEventInternal } from "./../gesture"
import { Filter, FilterInternal, TileMode, WaterRippleMode, FlyMode, VisualEffect, VisualEffectInternal, BrightnessBlender } from "./../arkui-uieffect"
import { FocusPriority, KeyProcessingMode, FocusBoxStyle } from "./../focus"
import { FormDimension, FormRenderingMode, FormShape, Callback_Any_Void, Callback_FormCallbackInfo_Void, FormCallbackInfo, Callback_Literal_Number_errcode_String_msg_Void, Literal_Number_errcode_String_msg, FormInfo } from "./../formComponent"
import { FrameNode, FrameNodeInternal } from "../../FrameNode"
import { FrictionMotion, FrictionMotionInternal, ScrollMotion, ScrollMotionInternal, SpringProp, SpringPropInternal, SpringMotion, SpringMotionInternal } from "./../animator"
import { FullscreenInfo, PlaybackInfo, PlaybackSpeed, PreparedInfo, SeekMode, VideoController, VideoControllerInternal, Callback_FullscreenInfo_Void, Callback_PlaybackInfo_Void, Callback_PreparedInfo_Void, PosterOptions, VideoOptions } from "./../video"
import { GridAttribute, Callback_Number_Number_ComputedBarAttribute, ComputedBarAttribute, Callback_Number_Number_Void, GridDirection, Callback_ItemDragInfo_Void, Callback_ItemDragInfo_Number_Number_Void, Callback_ItemDragInfo_Number_Void, Callback_ItemDragInfo_Number_Number_Boolean_Void, GridItemAlignment, Callback_Number_ScrollState_Literal_Number_offsetRemain, Literal_Number_offsetRemain, Callback_Number_Tuple_Number_Number, Callback_Number_Tuple_Number_Number_Number_Number, Tuple_Number_Number_Number_Number, GridLayoutOptions } from "./../grid"
import { GridAttribute_onItemDragStart_event_type, ListAttribute_onItemDragStart_event_type, TextTimerAttribute_onTimer_event_type, AnimationRange_Number } from "./../type-replacements"
import { GridItemStyle, GridItemOptions } from "./../gridItem"
import { ImageAnalyzerController, ImageAnalyzerControllerInternal, ImageAnalyzerType, ImageAnalyzerConfig, ImageAIOptions } from "./../imageCommon"
import { IndicatorComponentController, IndicatorComponentControllerInternal } from "./../indicatorcomponent"
import { ItemState } from "./../stepperItem"
import { LayoutMode, SelectedMode, BoardStyle, TabBarSymbol, TabBarIconStyle, TabBarOptions, BottomTabBarStyle, SubTabBarStyle, SubTabBarIndicatorStyle, TabBarLabelStyle } from "./../tabContent"
import { ListItemGroupStyle, ListItemGroupOptions } from "./../listItemGroup"
import { LoadingProgressStyle } from "./../loadingProgress"
import { MarqueeStartPolicy, MarqueeState, TextAttribute, TextOverflowOptions, TextMarqueeOptions, Callback_MarqueeState_Void, TextSpanType, TextResponseType, TextController, TextControllerInternal, TextOptions } from "./../text"
import { Matrix4Transit, Matrix4TransitInternal, TranslateOption, ScaleOption, RotateOption, PolyToPolyOptions } from "./../arkui-matrix4"
import { Tuple_Number_Number, Tuple_Number_Number_Number } from "./../arkui-synthetics"
import { NavigationType } from "./../navigator"
import { NavRouteMode, RouteInfo } from "./../navRouter"
import { NodeController } from "../../NodeController"
import { Offset_componentutils, RotateResult, ScaleResult, TranslateResult, ComponentInfo, Matrix4Result } from "./../arkui-componentutils"
import { PanelHeight, PanelMode, PanelType, Callback_Number_Number_PanelMode_Void, Callback_Opt_PanelMode_Void } from "./../panel"
import { PatternLockChallengeResult, PatternLockController, PatternLockControllerInternal, Callback_Array_Number_Void, CircleStyleOptions } from "./../patternLock"
import { Point } from "./../point"
import { ProgressStatus, ProgressStyle, ProgressType, ProgressOptions, ProgressStyleOptions, CommonProgressStyleOptions, RingStyleOptions, ScanEffectOptions, LinearStyleOptions, CapsuleStyleOptions } from "./../progress"
import { RefreshStatus, Callback_RefreshStatus_Void, RefreshOptions } from "./../refresh"
import { RootSceneSession } from "./../rootScene"
import { RRect, WindowAnimationTarget } from "./../remoteWindow"
import { ScrollBarDirection, ScrollBarOptions } from "./../scrollBar"
import { SecurityComponentLayoutDirection } from "./../securityComponent"
import { ContentModifier, Callback_WrappedBuilder_Args_Void, CommonConfiguration, WrappedBuilder } from "./../arkui-wrapper-builder"
import { ShapeAttribute, ViewportRect } from "./../shape"
import { SideBarContainerType, SideBarPosition, ButtonIconOptions, ButtonStyle } from "./../sidebar"
import { SizeType, GridContainerOptions } from "./../gridContainer"
import { SubMenuExpandingMode } from "./../menu"
import { TextClockController, TextClockControllerInternal, TextClockOptions } from "./../textClock"
import { TextTimerController, TextTimerControllerInternal, TextTimerOptions } from "./../textTimer"
import { ToggleType, ToggleOptions, SwitchStyle } from "./../toggle"
import { UniformDataType } from "./../arkui-uniformtypedescriptor"
import { WindowSceneAttribute } from "./../windowScene"
import { Callback_Array_String_Void, Callback_Array_TextMenuItem_Void, Callback_Buffer_Void, Callback_ComputedBarAttribute_Void, Callback_CustomBuilder_Void, Callback_GestureJudgeResult_Void, Callback_GestureRecognizer_Void, Callback_HitTestMode_Void, Callback_Literal_Number_offsetRemain_Void, Callback_OffsetResult_Void, Callback_OnScrollFrameBeginHandlerResult_Void, Callback_Opt_Array_NavDestinationTransition_Void, Callback_Opt_Array_String_Void, Callback_Opt_NavigationAnimatedTransition_Void, Callback_Opt_StyledString_Opt_Array_String_Void, Callback_Opt_TabContentAnimatedTransition_Void, Callback_Pointer_Void, Callback_StyledStringMarshallingValue_Void, Callback_TouchResult_Void, Callback_Tuple_Number_Number_Number_Number_Void, Callback_Tuple_Number_Number_Void, Callback_Union_CustomBuilder_DragItemInfo_Void, Callback_WebKeyboardOptions_Void, Callback_WebResourceResponse_Void, Callback_WithThemeAttribute_Void } from "./../generatorSynthetic"
import { Callback_DismissDialogAction_Void, DismissDialogAction, ImmersiveMode, LevelMode, ActionSheetButtonOptions, ActionSheetOffset, SheetInfo, ActionSheetOptions } from "./../actionSheet"
import { Want } from "./../ohos.app.ability"
import { Callback_TerminationInfo_Void, TerminationInfo } from "./../embeddedComponent"
import { BusinessError } from "#external"
import { Profiler } from "./../inspector"
import { ASTCResource } from "./../mediaCachedImage"
import { CircleOptions } from "./../circle"
import { ColumnOptions, ColumnOptionsV2 } from "./../column"
import { ColumnSplitDividerStyle } from "./../columnSplit"
import { DateTimeOptions } from "./../arkui-intl"
import { EllipseOptions } from "./../ellipse"
import { FormLinkOptions } from "./../formLink"
import { GaugeOptions, GaugeIndicatorOptions, GaugeShadowOptions } from "./../gauge"
import { GridColColumnOption, GridColOptions } from "./../gridCol"
import { LineOptions } from "./../line"
import { MarqueeOptions } from "./../marquee"
import { PathOptions } from "./../path"
import { PolygonOptions } from "./../polygon"
import { PolylineOptions } from "./../polyline"
import { RenderNode, RenderNodeInternal } from "../../RenderNode"
import { RoundedRectOptions, RectOptions, RadiusItem } from "./../rect"
import { RowOptions, RowOptionsV2 } from "./../row"
import { StackOptions } from "./../stack"
import { TransformationMatrix } from "./../arkui-common"
import { FlexSpaceOptions, FlexOptions } from "./../flex"
import { ImageFrameInfo } from "./../imageAnimator"
import { MenuItemGroupOptions } from "./../menuItemGroup"
import { MenuItemOptions } from "./../menuItem"
import { TextBackgroundStyle } from "./../span"
import { DividerStyle as DividerStyle_sidebar } from "./../sidebar"
import promptAction from '@ohos/promptAction'

export class Serializer extends SerializerBase {
    private static pool?: Array<Serializer> | undefined = undefined
    private static poolTop: int32 = -1
    static hold(): Serializer {
        if (!(Serializer.pool != undefined))
        {
            Serializer.pool = new Array<Serializer>(8)
            const pool : Array<Serializer> = (Serializer.pool)!
            for (let idx = 0; idx < 8; idx++) {
                pool[idx] = new Serializer()
            }
        }
        const pool : Array<Serializer> = (Serializer.pool)!
        if (Serializer.poolTop >= pool.length - 1)
        {
            throw new Error("Serializer pool is full. Check if you had released serializers before")
        }
        Serializer.poolTop = Serializer.poolTop + 1
        let serializer  = pool[Serializer.poolTop]
        return serializer
    }
    public release(): void {
        if (Serializer.poolTop == -1)
        {
            throw new Error("Serializer pool is empty. Check if you had hold serializers before")
        }
        const pool : Array<Serializer> = (Serializer.pool)!
        if ((this) == (pool[Serializer.poolTop]))
        {
            Serializer.poolTop = Serializer.poolTop - 1
            super.release()
            return
        }
        throw new Error("Only last serializer should be released")
    }
    constructor() {
        super()
    }
    writeAlphabetIndexerAttribute(value: AlphabetIndexerAttribute): void {
    }
    writeAnimatedDrawableDescriptor(value: AnimatedDrawableDescriptor): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeBaseShape(value: BaseShape): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCalendarController(value: CalendarController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCalendarPickerAttribute(value: CalendarPickerAttribute): void {
    }
    writeCanvasGradient(value: CanvasGradient): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCanvasPath(value: CanvasPath): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCanvasPattern(value: CanvasPattern): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCircleShape(value: CircleShape): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeClientAuthenticationHandler(value: ClientAuthenticationHandler): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeColorContent(value: ColorContent): void {
    }
    writeColorFilter(value: ColorFilter): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCommonShape(value: CommonShape): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeComponent3DAttribute(value: Component3DAttribute): void {
    }
    writeComponentContent(value: ComponentContent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeConsoleMessage(value: ConsoleMessage): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeControllerHandler(value: ControllerHandler): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCustomDialogController(value: CustomDialogController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCustomSpan(value: CustomSpan): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeDataResubmissionHandler(value: DataResubmissionHandler): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeDragEvent(value: DragEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeDrawableDescriptor(value: DrawableDescriptor): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeDrawingCanvas(value: drawing.Canvas): void {
        let valueSerializer : Serializer = this
        valueSerializer.holdAndWriteObject(value)
    }
    writeDrawingColorFilter(value: DrawingColorFilter): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeDrawingLattice(value: DrawingLattice): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeDrawModifier(value: DrawModifier): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeEllipseShape(value: EllipseShape): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeEventResult(value: EventResult): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeEventTargetInfo(value: EventTargetInfo): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeFileSelectorParam(value: FileSelectorParam): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeFileSelectorResult(value: FileSelectorResult): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeFilter(value: Filter): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeFrameNode(value: FrameNode): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeFrictionMotion(value: FrictionMotion): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeFullScreenExitHandler(value: FullScreenExitHandler): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeFullscreenInfo(value: FullscreenInfo): void {
        let valueSerializer : Serializer = this
        const value_fullscreen  = value.fullscreen
        valueSerializer.writeBoolean(value_fullscreen)
    }
    writeGestureGroupInterface(value: GestureGroupInterface): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeGestureModifier(value: GestureModifier): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeGestureRecognizer(value: GestureRecognizer): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeGestureStyle(value: GestureStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeGridAttribute(value: GridAttribute): void {
    }
    writeHttpAuthHandler(value: HttpAuthHandler): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeICurve(value: ICurve): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeImageAnalyzerController(value: ImageAnalyzerController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeImageModifier(value: ImageModifier): void {
    }
    writeIndicatorComponentController(value: IndicatorComponentController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeJsGeolocation(value: JsGeolocation): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeJsResult(value: JsResult): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLayeredDrawableDescriptor(value: LayeredDrawableDescriptor): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLayoutManager(value: LayoutManager): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLayoutPolicy(value: LayoutPolicy): void {
    }
    writeLengthConstrain(value: LengthConstrain): void {
        let valueSerializer : Serializer = this
        const value_minLength  = value.minLength
        valueSerializer.writeLength(value_minLength)
        const value_maxLength  = value.maxLength
        valueSerializer.writeLength(value_maxLength)
    }
    writeLinearGradient(value: LinearGradient): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLinearIndicatorController(value: LinearIndicatorController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeListAttribute(value: ListAttribute): void {
    }
    writeListScroller(value: ListScroller): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLongPressGestureInterface(value: LongPressGestureInterface): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLongPressRecognizer(value: LongPressRecognizer): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeMatrix4Transit(value: Matrix4Transit): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeNativeMediaPlayerConfig(value: NativeMediaPlayerConfig): void {
        let valueSerializer : Serializer = this
        const value_enable  = value.enable
        valueSerializer.writeBoolean(value_enable)
        const value_shouldOverlay  = value.shouldOverlay
        valueSerializer.writeBoolean(value_shouldOverlay)
    }
    writeNavDestinationAttribute(value: NavDestinationAttribute): void {
    }
    writeNavigationAttribute(value: NavigationAttribute): void {
    }
    writeNavPathStack(value: NavPathStack): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeNestedScrollOptions(value: NestedScrollOptions): void {
        let valueSerializer : Serializer = this
        const value_scrollForward  = value.scrollForward
        valueSerializer.writeInt32(TypeChecker.NestedScrollMode_ToNumeric(value_scrollForward))
        const value_scrollBackward  = value.scrollBackward
        valueSerializer.writeInt32(TypeChecker.NestedScrollMode_ToNumeric(value_scrollBackward))
    }
    writeNodeController(value: NodeController): void {
    }
    writeOffscreenCanvas(value: OffscreenCanvas): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeOffset(value: Offset): void {
        let valueSerializer : Serializer = this
        const value_dx  = value.dx
        valueSerializer.writeLength(value_dx)
        const value_dy  = value.dy
        valueSerializer.writeLength(value_dy)
    }
    writeOffset_componentutils(value: Offset_componentutils): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
    }
    writeOffsetResult(value: OffsetResult): void {
        let valueSerializer : Serializer = this
        const value_xOffset  = value.xOffset
        valueSerializer.writeNumber(value_xOffset)
        const value_yOffset  = value.yOffset
        valueSerializer.writeNumber(value_yOffset)
    }
    writeScrollResult(value: ScrollResult): void {
        let valueSerializer : Serializer = this
        const value_offsetRemain  = value.offsetRemain;
        valueSerializer.writeNumber(value_offsetRemain)
    }
    writeOnAudioStateChangedEvent(value: OnAudioStateChangedEvent): void {
        let valueSerializer : Serializer = this
        const value_playing  = value.playing
        valueSerializer.writeBoolean(value_playing)
    }
    writeOnConsoleEvent(value: OnConsoleEvent): void {
        let valueSerializer : Serializer = this
        const value_message  = value.message
        valueSerializer.writeConsoleMessage(value_message)
    }
    writeOnDataResubmittedEvent(value: OnDataResubmittedEvent): void {
        let valueSerializer : Serializer = this
        const value_handler  = value.handler
        valueSerializer.writeDataResubmissionHandler(value_handler)
    }
    writeOnFirstContentfulPaintEvent(value: OnFirstContentfulPaintEvent): void {
        let valueSerializer : Serializer = this
        const value_navigationStartTick  = value.navigationStartTick
        valueSerializer.writeNumber(value_navigationStartTick)
        const value_firstContentfulPaintMs  = value.firstContentfulPaintMs
        valueSerializer.writeNumber(value_firstContentfulPaintMs)
    }
    writeOnFoldStatusChangeInfo(value: OnFoldStatusChangeInfo): void {
        let valueSerializer : Serializer = this
        const value_foldStatus  = value.foldStatus
        valueSerializer.writeInt32(TypeChecker.FoldStatus_ToNumeric(value_foldStatus))
    }
    writeOnOverScrollEvent(value: OnOverScrollEvent): void {
        let valueSerializer : Serializer = this
        const value_xOffset  = value.xOffset
        valueSerializer.writeNumber(value_xOffset)
        const value_yOffset  = value.yOffset
        valueSerializer.writeNumber(value_yOffset)
    }
    writeOnProgressChangeEvent(value: OnProgressChangeEvent): void {
        let valueSerializer : Serializer = this
        const value_newProgress  = value.newProgress
        valueSerializer.writeNumber(value_newProgress)
    }
    writeOnScaleChangeEvent(value: OnScaleChangeEvent): void {
        let valueSerializer : Serializer = this
        const value_oldScale  = value.oldScale
        valueSerializer.writeNumber(value_oldScale)
        const value_newScale  = value.newScale
        valueSerializer.writeNumber(value_newScale)
    }
    writeOnScrollEvent(value: OnScrollEvent): void {
        let valueSerializer : Serializer = this
        const value_xOffset  = value.xOffset
        valueSerializer.writeNumber(value_xOffset)
        const value_yOffset  = value.yOffset
        valueSerializer.writeNumber(value_yOffset)
    }
    writeOnScrollFrameBeginHandlerResult(value: OnScrollFrameBeginHandlerResult): void {
        let valueSerializer : Serializer = this
        const value_offsetRemain  = value.offsetRemain
        valueSerializer.writeNumber(value_offsetRemain)
    }
    writeOnSearchResultReceiveEvent(value: OnSearchResultReceiveEvent): void {
        let valueSerializer : Serializer = this
        const value_activeMatchOrdinal  = value.activeMatchOrdinal
        valueSerializer.writeNumber(value_activeMatchOrdinal)
        const value_numberOfMatches  = value.numberOfMatches
        valueSerializer.writeNumber(value_numberOfMatches)
        const value_isDoneCounting  = value.isDoneCounting
        valueSerializer.writeBoolean(value_isDoneCounting)
    }
    writeOnShowFileSelectorEvent(value: OnShowFileSelectorEvent): void {
        let valueSerializer : Serializer = this
        const value_result  = value.result
        valueSerializer.writeFileSelectorResult(value_result)
        const value_fileSelector  = value.fileSelector
        valueSerializer.writeFileSelectorParam(value_fileSelector)
    }
    writePanGestureInterface(value: PanGestureInterface): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePanGestureOptions(value: PanGestureOptions): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePanRecognizer(value: PanRecognizer): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePath2D(value: Path2D): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePathShape(value: PathShape): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePatternLockController(value: PatternLockController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePermissionRequest(value: PermissionRequest): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePinchGestureInterface(value: PinchGestureInterface): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePinchRecognizer(value: PinchRecognizer): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePixelMap(value: PixelMap): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePixelMapDrawableDescriptor(value: PixelMapDrawableDescriptor): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePixelMapMock(value: PixelMapMock): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePlaybackInfo(value: PlaybackInfo): void {
        let valueSerializer : Serializer = this
        const value_time  = value.time
        valueSerializer.writeNumber(value_time)
    }
    writePoint(value: Point): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
    }
    writePopupStateChangeParam(value: PopupStateChangeParam): void {
        let valueSerializer : Serializer = this
        const value_isVisible  = value.isVisible
        valueSerializer.writeBoolean(value_isVisible)
    }
    writePositionWithAffinity(value: PositionWithAffinity): void {
        let valueSerializer : Serializer = this
        const value_position  = value.position
        valueSerializer.writeNumber(value_position)
        const value_affinity  = value.affinity
        valueSerializer.writeInt32(TypeChecker.Affinity_ToNumeric(value_affinity))
    }
    writePreparedInfo(value: PreparedInfo): void {
        let valueSerializer : Serializer = this
        const value_duration  = value.duration
        valueSerializer.writeNumber(value_duration)
    }
    writeProgressMask(value: ProgressMask): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePulseSymbolEffect(value: PulseSymbolEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeRect(value: Rect): void {
        let valueSerializer : Serializer = this
        const value_left  = value.left
        valueSerializer.writeNumber(value_left)
        const value_top  = value.top
        valueSerializer.writeNumber(value_top)
        const value_right  = value.right
        valueSerializer.writeNumber(value_right)
        const value_bottom  = value.bottom
        valueSerializer.writeNumber(value_bottom)
    }
    writeRectResult(value: RectResult): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_height  = value.height
        valueSerializer.writeNumber(value_height)
    }
    writeRectShape(value: RectShape): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeRichEditorAttribute(value: RichEditorAttribute): void {
    }
    writeRichEditorBaseController(value: RichEditorBaseController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeRichEditorController(value: RichEditorController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeRichEditorOptions(value: RichEditorOptions): void {
        let valueSerializer : Serializer = this
        const value_controller  = value.controller
        valueSerializer.writeRichEditorController(value_controller)
    }
    writeRichEditorStyledStringController(value: RichEditorStyledStringController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeRichEditorStyledStringOptions(value: RichEditorStyledStringOptions): void {
        let valueSerializer : Serializer = this
        const value_controller  = value.controller
        valueSerializer.writeRichEditorStyledStringController(value_controller)
    }
    writeRootSceneSession(value: RootSceneSession): void {
    }
    writeRotateResult(value: RotateResult): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
        const value_z  = value.z
        valueSerializer.writeNumber(value_z)
        const value_centerX  = value.centerX
        valueSerializer.writeNumber(value_centerX)
        const value_centerY  = value.centerY
        valueSerializer.writeNumber(value_centerY)
        const value_angle  = value.angle
        valueSerializer.writeNumber(value_angle)
    }
    writeRotationGestureInterface(value: RotationGestureInterface): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeRotationRecognizer(value: RotationRecognizer): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeRRect(value: RRect): void {
        let valueSerializer : Serializer = this
        const value_left  = value.left
        valueSerializer.writeNumber(value_left)
        const value_top  = value.top
        valueSerializer.writeNumber(value_top)
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_height  = value.height
        valueSerializer.writeNumber(value_height)
        const value_radius  = value.radius
        valueSerializer.writeNumber(value_radius)
    }
    writeRunMetrics(value: RunMetrics): void {
    }
    writeScaleResult(value: ScaleResult): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
        const value_z  = value.z
        valueSerializer.writeNumber(value_z)
        const value_centerX  = value.centerX
        valueSerializer.writeNumber(value_centerX)
        const value_centerY  = value.centerY
        valueSerializer.writeNumber(value_centerY)
    }
    writeScene(value: Scene): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeScreenCaptureHandler(value: ScreenCaptureHandler): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeScrollableTargetInfo(value: ScrollableTargetInfo): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeScrollAttribute(value: ScrollAttribute): void {
    }
    writeScroller(value: Scroller): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeScrollMotion(value: ScrollMotion): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSearchAttribute(value: SearchAttribute): void {
    }
    writeSearchController(value: SearchController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSelectAttribute(value: SelectAttribute): void {
    }
    writeShapeAttribute(value: ShapeAttribute): void {
    }
    writeShapeClip(value: ShapeClip): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeShapeMask(value: ShapeMask): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSize(value: Size): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_height  = value.height
        valueSerializer.writeNumber(value_height)
    }
    writeSliderAttribute(value: SliderAttribute): void {
    }
    writeSpringMotion(value: SpringMotion): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSpringProp(value: SpringProp): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSslErrorHandler(value: SslErrorHandler): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeStyledString(value: StyledString): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeStyledStringController(value: StyledStringController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSubmitEvent(value: SubmitEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSwipeGestureInterface(value: SwipeGestureInterface): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSwiperAnimationEvent(value: SwiperAnimationEvent): void {
        let valueSerializer : Serializer = this
        const value_currentOffset  = value.currentOffset
        valueSerializer.writeNumber(value_currentOffset)
        const value_targetOffset  = value.targetOffset
        valueSerializer.writeNumber(value_targetOffset)
        const value_velocity  = value.velocity
        valueSerializer.writeNumber(value_velocity)
    }
    writeSwiperAttribute(value: SwiperAttribute): void {
    }
    writeSwiperContentTransitionProxy(value: SwiperContentTransitionProxy): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSwiperContentWillScrollResult(value: SwiperContentWillScrollResult): void {
        let valueSerializer : Serializer = this
        const value_currentIndex  = value.currentIndex
        valueSerializer.writeNumber(value_currentIndex)
        const value_comingIndex  = value.comingIndex
        valueSerializer.writeNumber(value_comingIndex)
        const value_offset  = value.offset
        valueSerializer.writeNumber(value_offset)
    }
    writeSwiperController(value: SwiperController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSwipeRecognizer(value: SwipeRecognizer): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSymbolEffect(value: SymbolEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSymbolGlyphAttribute(value: SymbolGlyphAttribute): void {
    }
    writeSymbolGlyphModifier(value: SymbolGlyphModifier): void {
    }
    writeTabContentTransitionProxy(value: TabContentTransitionProxy): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTabsAnimationEvent(value: TabsAnimationEvent): void {
        let valueSerializer : Serializer = this
        const value_currentOffset  = value.currentOffset
        valueSerializer.writeNumber(value_currentOffset)
        const value_targetOffset  = value.targetOffset
        valueSerializer.writeNumber(value_targetOffset)
        const value_velocity  = value.velocity
        valueSerializer.writeNumber(value_velocity)
    }
    writeTabsAttribute(value: TabsAttribute): void {
    }
    writeTabsController(value: TabsController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTapGestureInterface(value: TapGestureInterface): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTapRecognizer(value: TapRecognizer): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextAreaAttribute(value: TextAreaAttribute): void {
    }
    writeTextAreaController(value: TextAreaController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextAttribute(value: TextAttribute): void {
    }
    writeTextBaseController(value: TextBaseController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextClockController(value: TextClockController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextContentControllerBase(value: TextContentControllerBase): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextController(value: TextController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextEditControllerEx(value: TextEditControllerEx): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextInputAttribute(value: TextInputAttribute): void {
    }
    writeTextInputController(value: TextInputController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextMenuItemId(value: TextMenuItemId): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextMetrics(value: TextMetrics): void {
        let valueSerializer : Serializer = this
        const value_actualBoundingBoxAscent  = value.actualBoundingBoxAscent
        valueSerializer.writeNumber(value_actualBoundingBoxAscent)
        const value_actualBoundingBoxDescent  = value.actualBoundingBoxDescent
        valueSerializer.writeNumber(value_actualBoundingBoxDescent)
        const value_actualBoundingBoxLeft  = value.actualBoundingBoxLeft
        valueSerializer.writeNumber(value_actualBoundingBoxLeft)
        const value_actualBoundingBoxRight  = value.actualBoundingBoxRight
        valueSerializer.writeNumber(value_actualBoundingBoxRight)
        const value_alphabeticBaseline  = value.alphabeticBaseline
        valueSerializer.writeNumber(value_alphabeticBaseline)
        const value_emHeightAscent  = value.emHeightAscent
        valueSerializer.writeNumber(value_emHeightAscent)
        const value_emHeightDescent  = value.emHeightDescent
        valueSerializer.writeNumber(value_emHeightDescent)
        const value_fontBoundingBoxAscent  = value.fontBoundingBoxAscent
        valueSerializer.writeNumber(value_fontBoundingBoxAscent)
        const value_fontBoundingBoxDescent  = value.fontBoundingBoxDescent
        valueSerializer.writeNumber(value_fontBoundingBoxDescent)
        const value_hangingBaseline  = value.hangingBaseline
        valueSerializer.writeNumber(value_hangingBaseline)
        const value_ideographicBaseline  = value.ideographicBaseline
        valueSerializer.writeNumber(value_ideographicBaseline)
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_height  = value.height
        valueSerializer.writeNumber(value_height)
    }
    writeTextModifier(value: TextModifier): void {
    }
    writeTextOptions(value: TextOptions): void {
        let valueSerializer : Serializer = this
        const value_controller  = value.controller
        valueSerializer.writeTextController(value_controller)
    }
    writeTextOverflowOptions(value: TextOverflowOptions): void {
        let valueSerializer : Serializer = this
        const value_overflow  = value.overflow
        valueSerializer.writeInt32(TypeChecker.TextOverflow_ToNumeric(value_overflow))
    }
    writeTextTimerController(value: TextTimerController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTimePickerResult(value: TimePickerResult): void {
        let valueSerializer : Serializer = this
        const value_hour  = value.hour
        valueSerializer.writeNumber(value_hour)
        const value_minute  = value.minute
        valueSerializer.writeNumber(value_minute)
        const value_second  = value.second
        valueSerializer.writeNumber(value_second)
    }
    writeTouchTestInfo(value: TouchTestInfo): void {
        let valueSerializer : Serializer = this
        const value_windowX  = value.windowX
        valueSerializer.writeNumber(value_windowX)
        const value_windowY  = value.windowY
        valueSerializer.writeNumber(value_windowY)
        const value_parentX  = value.parentX
        valueSerializer.writeNumber(value_parentX)
        const value_parentY  = value.parentY
        valueSerializer.writeNumber(value_parentY)
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
        const value_rect  = value.rect
        valueSerializer.writeRectResult(value_rect)
        const value_id  = value.id
        valueSerializer.writeString(value_id)
    }
    writeTransitionEffect(value: TransitionEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTranslateResult(value: TranslateResult): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
        const value_z  = value.z
        valueSerializer.writeNumber(value_z)
    }
    writeUICommonEvent(value: UICommonEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeUIContext(value: UIContext): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeUIExtensionProxy(value: UIExtensionProxy): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeUIGestureEvent(value: UIGestureEvent): void {
    }
    writeUnifiedData(value: UnifiedData): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeUrlStyle(value: UrlStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeUserDataSpan(value: UserDataSpan): void {
    }
    writeVector2(value: Vector2): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
    }
    writeVector3(value: Vector3): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
        const value_z  = value.z
        valueSerializer.writeNumber(value_z)
    }
    writeVideoController(value: VideoController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeView(value: View): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeVisualEffect(value: VisualEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWaterFlowAttribute(value: WaterFlowAttribute): void {
    }
    writeWaterFlowSections(value: WaterFlowSections): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWebAttribute(value: WebAttribute): void {
    }
    writeWebContextMenuParam(value: WebContextMenuParam): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWebContextMenuResult(value: WebContextMenuResult): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWebController(value: WebController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWebCookie(value: WebCookie): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWebHeader(value: WebHeader): void {
        let valueSerializer : Serializer = this
        const value_headerKey  = value.headerKey
        valueSerializer.writeString(value_headerKey)
        const value_headerValue  = value.headerValue
        valueSerializer.writeString(value_headerValue)
    }
    writeWebKeyboardController(value: WebKeyboardController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWebResourceError(value: WebResourceError): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWebResourceRequest(value: WebResourceRequest): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWebResourceResponse(value: WebResourceResponse): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWebviewController(value: WebviewController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeWindowAnimationTarget(value: WindowAnimationTarget): void {
        let valueSerializer : Serializer = this
        const value_bundleName  = value.bundleName
        valueSerializer.writeString(value_bundleName)
        const value_abilityName  = value.abilityName
        valueSerializer.writeString(value_abilityName)
        const value_windowBounds  = value.windowBounds
        valueSerializer.writeRRect(value_windowBounds)
        const value_missionId  = value.missionId
        valueSerializer.writeNumber(value_missionId)
    }
    writeWindowSceneAttribute(value: WindowSceneAttribute): void {
    }
    writeWithThemeAttribute(value: WithThemeAttribute): void {
    }
    writeWorkerEventListener(value: WorkerEventListener): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeXComponentController(value: XComponentController): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeAccessibilityOptions(value: AccessibilityOptions): void {
        let valueSerializer : Serializer = this
        const value_accessibilityPreferred  = value.accessibilityPreferred
        let value_accessibilityPreferred_type : int32 = RuntimeType.UNDEFINED
        value_accessibilityPreferred_type = runtimeType(value_accessibilityPreferred)
        valueSerializer.writeInt8(value_accessibilityPreferred_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_accessibilityPreferred_type)) {
            const value_accessibilityPreferred_value  = value_accessibilityPreferred!
            valueSerializer.writeBoolean(value_accessibilityPreferred_value)
        }
    }
    writeAdsBlockedDetails(value: AdsBlockedDetails): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
        const value_adsBlocked  = value.adsBlocked
        valueSerializer.writeInt32(value_adsBlocked.length as int32)
        for (let i = 0; i < value_adsBlocked.length; i++) {
            const value_adsBlocked_element : string = value_adsBlocked[i]
            valueSerializer.writeString(value_adsBlocked_element)
        }
    }
    writeAlphabetIndexerOptions(value: AlphabetIndexerOptions): void {
        let valueSerializer : Serializer = this
        const value_arrayValue  = value.arrayValue
        valueSerializer.writeInt32(value_arrayValue.length as int32)
        for (let i = 0; i < value_arrayValue.length; i++) {
            const value_arrayValue_element : string = value_arrayValue[i]
            valueSerializer.writeString(value_arrayValue_element)
        }
        const value_selected  = value.selected
        valueSerializer.writeNumber(value_selected)
    }
    writeAnimationOptions(value: AnimationOptions): void {
        let valueSerializer : Serializer = this
        const value_duration  = value.duration
        let value_duration_type : int32 = RuntimeType.UNDEFINED
        value_duration_type = runtimeType(value_duration)
        valueSerializer.writeInt8(value_duration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_duration_type)) {
            const value_duration_value  = value_duration!
            valueSerializer.writeNumber(value_duration_value)
        }
        const value_iterations  = value.iterations
        let value_iterations_type : int32 = RuntimeType.UNDEFINED
        value_iterations_type = runtimeType(value_iterations)
        valueSerializer.writeInt8(value_iterations_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iterations_type)) {
            const value_iterations_value  = value_iterations!
            valueSerializer.writeNumber(value_iterations_value)
        }
    }
    writeAppearSymbolEffect(value: AppearSymbolEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeASTCResource(value: ASTCResource): void {
        let valueSerializer : Serializer = this
        const value_sources  = value.sources
        valueSerializer.writeInt32(value_sources.length as int32)
        for (let i = 0; i < value_sources.length; i++) {
            const value_sources_element : string = value_sources[i]
            valueSerializer.writeString(value_sources_element)
        }
        const value_column  = value.column
        valueSerializer.writeNumber(value_column)
    }
    writeAutoPlayOptions(value: AutoPlayOptions): void {
        let valueSerializer : Serializer = this
        const value_stopWhenTouched  = value.stopWhenTouched
        valueSerializer.writeBoolean(value_stopWhenTouched)
    }
    writeBackgroundBrightnessOptions(value: BackgroundBrightnessOptions): void {
        let valueSerializer : Serializer = this
        const value_rate  = value.rate
        valueSerializer.writeNumber(value_rate)
        const value_lightUpDegree  = value.lightUpDegree
        valueSerializer.writeNumber(value_lightUpDegree)
    }
    writeBackgroundImageOptions(value: BackgroundImageOptions): void {
        let valueSerializer : Serializer = this
        const value_syncLoad  = value.syncLoad
        let value_syncLoad_type : int32 = RuntimeType.UNDEFINED
        value_syncLoad_type = runtimeType(value_syncLoad)
        valueSerializer.writeInt8(value_syncLoad_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_syncLoad_type)) {
            const value_syncLoad_value  = value_syncLoad!
            valueSerializer.writeBoolean(value_syncLoad_value)
        }
        const value_repeat  = value.repeat
        let value_repeat_type : int32 = RuntimeType.UNDEFINED
        value_repeat_type = runtimeType(value_repeat)
        valueSerializer.writeInt8(value_repeat_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_repeat_type)) {
            const value_repeat_value  = (value_repeat as ImageRepeat)
            valueSerializer.writeInt32(TypeChecker.ImageRepeat_ToNumeric(value_repeat_value))
        }
    }
    writeBarGridColumnOptions(value: BarGridColumnOptions): void {
        let valueSerializer : Serializer = this
        const value_sm  = value.sm
        let value_sm_type : int32 = RuntimeType.UNDEFINED
        value_sm_type = runtimeType(value_sm)
        valueSerializer.writeInt8(value_sm_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_sm_type)) {
            const value_sm_value  = value_sm!
            valueSerializer.writeNumber(value_sm_value)
        }
        const value_md  = value.md
        let value_md_type : int32 = RuntimeType.UNDEFINED
        value_md_type = runtimeType(value_md)
        valueSerializer.writeInt8(value_md_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_md_type)) {
            const value_md_value  = value_md!
            valueSerializer.writeNumber(value_md_value)
        }
        const value_lg  = value.lg
        let value_lg_type : int32 = RuntimeType.UNDEFINED
        value_lg_type = runtimeType(value_lg)
        valueSerializer.writeInt8(value_lg_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lg_type)) {
            const value_lg_value  = value_lg!
            valueSerializer.writeNumber(value_lg_value)
        }
        const value_margin  = value.margin
        let value_margin_type : int32 = RuntimeType.UNDEFINED
        value_margin_type = runtimeType(value_margin)
        valueSerializer.writeInt8(value_margin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_margin_type)) {
            const value_margin_value  = value_margin!
            valueSerializer.writeLength(value_margin_value)
        }
        const value_gutter  = value.gutter
        let value_gutter_type : int32 = RuntimeType.UNDEFINED
        value_gutter_type = runtimeType(value_gutter)
        valueSerializer.writeInt8(value_gutter_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gutter_type)) {
            const value_gutter_value  = value_gutter!
            valueSerializer.writeLength(value_gutter_value)
        }
    }
    writeBarrierStyle(value: BarrierStyle): void {
        let valueSerializer : Serializer = this
        const value_id  = value.id
        valueSerializer.writeString(value_id)
        const value_direction  = value.direction
        valueSerializer.writeInt32(TypeChecker.BarrierDirection_ToNumeric(value_direction))
        const value_referencedId  = value.referencedId
        valueSerializer.writeInt32(value_referencedId.length as int32)
        for (let i = 0; i < value_referencedId.length; i++) {
            const value_referencedId_element : string = value_referencedId[i]
            valueSerializer.writeString(value_referencedId_element)
        }
    }
    writeBaseContext(value: BaseContext): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeBaselineOffsetStyle(value: BaselineOffsetStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeBias(value: Bias): void {
        let valueSerializer : Serializer = this
        const value_horizontal  = value.horizontal
        let value_horizontal_type : int32 = RuntimeType.UNDEFINED
        value_horizontal_type = runtimeType(value_horizontal)
        valueSerializer.writeInt8(value_horizontal_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_horizontal_type)) {
            const value_horizontal_value  = value_horizontal!
            valueSerializer.writeNumber(value_horizontal_value)
        }
        const value_vertical  = value.vertical
        let value_vertical_type : int32 = RuntimeType.UNDEFINED
        value_vertical_type = runtimeType(value_vertical)
        valueSerializer.writeInt8(value_vertical_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_vertical_type)) {
            const value_vertical_value  = value_vertical!
            valueSerializer.writeNumber(value_vertical_value)
        }
    }
    writeBlurOptions(value: BlurOptions): void {
        let valueSerializer : Serializer = this
        const value_grayscale  = value.grayscale
        const value_grayscale_0  = value_grayscale[0]
        valueSerializer.writeNumber(value_grayscale_0)
        const value_grayscale_1  = value_grayscale[1]
        valueSerializer.writeNumber(value_grayscale_1)
    }
    writeBoardStyle(value: BoardStyle): void {
        let valueSerializer : Serializer = this
        const value_borderRadius  = value.borderRadius
        let value_borderRadius_type : int32 = RuntimeType.UNDEFINED
        value_borderRadius_type = runtimeType(value_borderRadius)
        valueSerializer.writeInt8(value_borderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderRadius_type)) {
            const value_borderRadius_value  = value_borderRadius!
            valueSerializer.writeLength(value_borderRadius_value)
        }
    }
    writeBorderRadiuses(value: BorderRadiuses): void {
        let valueSerializer : Serializer = this
        const value_topLeft  = value.topLeft
        let value_topLeft_type : int32 = RuntimeType.UNDEFINED
        value_topLeft_type = runtimeType(value_topLeft)
        valueSerializer.writeInt8(value_topLeft_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_topLeft_type)) {
            const value_topLeft_value  = value_topLeft!
            valueSerializer.writeLength(value_topLeft_value)
        }
        const value_topRight  = value.topRight
        let value_topRight_type : int32 = RuntimeType.UNDEFINED
        value_topRight_type = runtimeType(value_topRight)
        valueSerializer.writeInt8(value_topRight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_topRight_type)) {
            const value_topRight_value  = value_topRight!
            valueSerializer.writeLength(value_topRight_value)
        }
        const value_bottomLeft  = value.bottomLeft
        let value_bottomLeft_type : int32 = RuntimeType.UNDEFINED
        value_bottomLeft_type = runtimeType(value_bottomLeft)
        valueSerializer.writeInt8(value_bottomLeft_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottomLeft_type)) {
            const value_bottomLeft_value  = value_bottomLeft!
            valueSerializer.writeLength(value_bottomLeft_value)
        }
        const value_bottomRight  = value.bottomRight
        let value_bottomRight_type : int32 = RuntimeType.UNDEFINED
        value_bottomRight_type = runtimeType(value_bottomRight)
        valueSerializer.writeInt8(value_bottomRight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottomRight_type)) {
            const value_bottomRight_value  = value_bottomRight!
            valueSerializer.writeLength(value_bottomRight_value)
        }
    }
    writeBorderRadiuses_graphics(value: Corners<number>): void {
        let valueSerializer : Serializer = this
        const value_topLeft  = value.topLeft
        valueSerializer.writeNumber(value_topLeft)
        const value_topRight  = value.topRight
        valueSerializer.writeNumber(value_topRight)
        const value_bottomLeft  = value.bottomLeft
        valueSerializer.writeNumber(value_bottomLeft)
        const value_bottomRight  = value.bottomRight
        valueSerializer.writeNumber(value_bottomRight)
    }
    writeBounceSymbolEffect(value: BounceSymbolEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeBreakPoints(value: BreakPoints): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        valueSerializer.writeInt8(value_value_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_value_type)) {
            const value_value_value  = value_value!
            valueSerializer.writeInt32(value_value_value.length as int32)
            for (let i = 0; i < value_value_value.length; i++) {
                const value_value_value_element : string = value_value_value[i]
                valueSerializer.writeString(value_value_value_element)
            }
        }
        const value_reference  = value.reference
        let value_reference_type : int32 = RuntimeType.UNDEFINED
        value_reference_type = runtimeType(value_reference)
        valueSerializer.writeInt8(value_reference_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_reference_type)) {
            const value_reference_value  = (value_reference as BreakpointsReference)
            valueSerializer.writeInt32(TypeChecker.BreakpointsReference_ToNumeric(value_reference_value))
        }
    }
    writeBrightnessBlender(value: BrightnessBlender): void {
        let valueSerializer : Serializer = this
        const value_cubicRate  = value.cubicRate
        valueSerializer.writeNumber(value_cubicRate)
        const value_quadraticRate  = value.quadraticRate
        valueSerializer.writeNumber(value_quadraticRate)
        const value_linearRate  = value.linearRate
        valueSerializer.writeNumber(value_linearRate)
        const value_degree  = value.degree
        valueSerializer.writeNumber(value_degree)
        const value_saturation  = value.saturation
        valueSerializer.writeNumber(value_saturation)
        const value_positiveCoefficient  = value.positiveCoefficient
        const value_positiveCoefficient_0  = value_positiveCoefficient[0]
        valueSerializer.writeNumber(value_positiveCoefficient_0)
        const value_positiveCoefficient_1  = value_positiveCoefficient[1]
        valueSerializer.writeNumber(value_positiveCoefficient_1)
        const value_positiveCoefficient_2  = value_positiveCoefficient[2]
        valueSerializer.writeNumber(value_positiveCoefficient_2)
        const value_negativeCoefficient  = value.negativeCoefficient
        const value_negativeCoefficient_0  = value_negativeCoefficient[0]
        valueSerializer.writeNumber(value_negativeCoefficient_0)
        const value_negativeCoefficient_1  = value_negativeCoefficient[1]
        valueSerializer.writeNumber(value_negativeCoefficient_1)
        const value_negativeCoefficient_2  = value_negativeCoefficient[2]
        valueSerializer.writeNumber(value_negativeCoefficient_2)
        const value_fraction  = value.fraction
        valueSerializer.writeNumber(value_fraction)
    }
    writeBusinessError(value: BusinessError): void {
        let valueSerializer : Serializer = this
        const value_name  = value.name
        valueSerializer.writeString(value_name)
        const value_message  = value.message
        valueSerializer.writeString(value_message)
        const value_stack  = value.stack
        let value_stack_type : int32 = RuntimeType.UNDEFINED
        value_stack_type = runtimeType(value_stack)
        valueSerializer.writeInt8(value_stack_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_stack_type)) {
            const value_stack_value  = value_stack!
            valueSerializer.writeString(value_stack_value)
        }
        const value_code  = value.code
        valueSerializer.writeNumber(value_code)
    }
    writeButtonOptions(value: ButtonOptions): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = (value_type as ButtonType)
            valueSerializer.writeInt32(TypeChecker.ButtonType_ToNumeric(value_type_value))
        }
        const value_stateEffect  = value.stateEffect
        let value_stateEffect_type : int32 = RuntimeType.UNDEFINED
        value_stateEffect_type = runtimeType(value_stateEffect)
        valueSerializer.writeInt8(value_stateEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_stateEffect_type)) {
            const value_stateEffect_value  = value_stateEffect!
            valueSerializer.writeBoolean(value_stateEffect_value)
        }
        const value_buttonStyle  = value.buttonStyle
        let value_buttonStyle_type : int32 = RuntimeType.UNDEFINED
        value_buttonStyle_type = runtimeType(value_buttonStyle)
        valueSerializer.writeInt8(value_buttonStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_buttonStyle_type)) {
            const value_buttonStyle_value  = (value_buttonStyle as ButtonStyleMode)
            valueSerializer.writeInt32(TypeChecker.ButtonStyleMode_ToNumeric(value_buttonStyle_value))
        }
        const value_controlSize  = value.controlSize
        let value_controlSize_type : int32 = RuntimeType.UNDEFINED
        value_controlSize_type = runtimeType(value_controlSize)
        valueSerializer.writeInt8(value_controlSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_controlSize_type)) {
            const value_controlSize_value  = (value_controlSize as ControlSize)
            valueSerializer.writeInt32(TypeChecker.ControlSize_ToNumeric(value_controlSize_value))
        }
        const value_role  = value.role
        let value_role_type : int32 = RuntimeType.UNDEFINED
        value_role_type = runtimeType(value_role)
        valueSerializer.writeInt8(value_role_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_role_type)) {
            const value_role_value  = (value_role as ButtonRole)
            valueSerializer.writeInt32(TypeChecker.ButtonRole_ToNumeric(value_role_value))
        }
    }
    writeCalendarDay(value: CalendarDay): void {
        let valueSerializer : Serializer = this
        const value_index  = value.index
        valueSerializer.writeNumber(value_index)
        const value_lunarMonth  = value.lunarMonth
        valueSerializer.writeString(value_lunarMonth)
        const value_lunarDay  = value.lunarDay
        valueSerializer.writeString(value_lunarDay)
        const value_dayMark  = value.dayMark
        valueSerializer.writeString(value_dayMark)
        const value_dayMarkValue  = value.dayMarkValue
        valueSerializer.writeString(value_dayMarkValue)
        const value_year  = value.year
        valueSerializer.writeNumber(value_year)
        const value_month  = value.month
        valueSerializer.writeNumber(value_month)
        const value_day  = value.day
        valueSerializer.writeNumber(value_day)
        const value_isFirstOfLunar  = value.isFirstOfLunar
        valueSerializer.writeBoolean(value_isFirstOfLunar)
        const value_hasSchedule  = value.hasSchedule
        valueSerializer.writeBoolean(value_hasSchedule)
        const value_markLunarDay  = value.markLunarDay
        valueSerializer.writeBoolean(value_markLunarDay)
    }
    writeCalendarRequestedData(value: CalendarRequestedData): void {
        let valueSerializer : Serializer = this
        const value_year  = value.year
        valueSerializer.writeNumber(value_year)
        const value_month  = value.month
        valueSerializer.writeNumber(value_month)
        const value_currentYear  = value.currentYear
        valueSerializer.writeNumber(value_currentYear)
        const value_currentMonth  = value.currentMonth
        valueSerializer.writeNumber(value_currentMonth)
        const value_monthState  = value.monthState
        valueSerializer.writeNumber(value_monthState)
    }
    writeCalendarSelectedDate(value: CalendarSelectedDate): void {
        let valueSerializer : Serializer = this
        const value_year  = value.year
        valueSerializer.writeNumber(value_year)
        const value_month  = value.month
        valueSerializer.writeNumber(value_month)
        const value_day  = value.day
        valueSerializer.writeNumber(value_day)
    }
    writeCancelButtonSymbolOptions(value: CancelButtonSymbolOptions): void {
        let valueSerializer : Serializer = this
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as CancelButtonStyle)
            valueSerializer.writeInt32(TypeChecker.CancelButtonStyle_ToNumeric(value_style_value))
        }
        /* when symbol modifier implemented, please remove undefined */
        const value_icon  = undefined
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            valueSerializer.writeSymbolGlyphModifier(value_icon_value)
        }
    }
    writeCaretOffset(value: CaretOffset): void {
        let valueSerializer : Serializer = this
        const value_index  = value.index
        valueSerializer.writeNumber(value_index)
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
    }
    writeChainAnimationOptions(value: ChainAnimationOptions): void {
        let valueSerializer : Serializer = this
        const value_minSpace  = value.minSpace
        valueSerializer.writeLength(value_minSpace)
        const value_maxSpace  = value.maxSpace
        valueSerializer.writeLength(value_maxSpace)
        const value_conductivity  = value.conductivity
        let value_conductivity_type : int32 = RuntimeType.UNDEFINED
        value_conductivity_type = runtimeType(value_conductivity)
        valueSerializer.writeInt8(value_conductivity_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_conductivity_type)) {
            const value_conductivity_value  = value_conductivity!
            valueSerializer.writeNumber(value_conductivity_value)
        }
        const value_intensity  = value.intensity
        let value_intensity_type : int32 = RuntimeType.UNDEFINED
        value_intensity_type = runtimeType(value_intensity)
        valueSerializer.writeInt8(value_intensity_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_intensity_type)) {
            const value_intensity_value  = value_intensity!
            valueSerializer.writeNumber(value_intensity_value)
        }
        const value_edgeEffect  = value.edgeEffect
        let value_edgeEffect_type : int32 = RuntimeType.UNDEFINED
        value_edgeEffect_type = runtimeType(value_edgeEffect)
        valueSerializer.writeInt8(value_edgeEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_edgeEffect_type)) {
            const value_edgeEffect_value  = (value_edgeEffect as ChainEdgeEffect)
            valueSerializer.writeInt32(TypeChecker.ChainEdgeEffect_ToNumeric(value_edgeEffect_value))
        }
        const value_stiffness  = value.stiffness
        let value_stiffness_type : int32 = RuntimeType.UNDEFINED
        value_stiffness_type = runtimeType(value_stiffness)
        valueSerializer.writeInt8(value_stiffness_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_stiffness_type)) {
            const value_stiffness_value  = value_stiffness!
            valueSerializer.writeNumber(value_stiffness_value)
        }
        const value_damping  = value.damping
        let value_damping_type : int32 = RuntimeType.UNDEFINED
        value_damping_type = runtimeType(value_damping)
        valueSerializer.writeInt8(value_damping_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_damping_type)) {
            const value_damping_value  = value_damping!
            valueSerializer.writeNumber(value_damping_value)
        }
    }
    writeChainWeightOptions(value: ChainWeightOptions): void {
        let valueSerializer : Serializer = this
        const value_horizontal  = value.horizontal
        let value_horizontal_type : int32 = RuntimeType.UNDEFINED
        value_horizontal_type = runtimeType(value_horizontal)
        valueSerializer.writeInt8(value_horizontal_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_horizontal_type)) {
            const value_horizontal_value  = value_horizontal!
            valueSerializer.writeNumber(value_horizontal_value)
        }
        const value_vertical  = value.vertical
        let value_vertical_type : int32 = RuntimeType.UNDEFINED
        value_vertical_type = runtimeType(value_vertical)
        valueSerializer.writeInt8(value_vertical_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_vertical_type)) {
            const value_vertical_value  = value_vertical!
            valueSerializer.writeNumber(value_vertical_value)
        }
    }
    writeCheckboxGroupOptions(value: CheckboxGroupOptions): void {
        let valueSerializer : Serializer = this
        const value_group  = value.group
        let value_group_type : int32 = RuntimeType.UNDEFINED
        value_group_type = runtimeType(value_group)
        valueSerializer.writeInt8(value_group_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_group_type)) {
            const value_group_value  = value_group!
            valueSerializer.writeString(value_group_value)
        }
    }
    writeCheckboxGroupResult(value: CheckboxGroupResult): void {
        let valueSerializer : Serializer = this
        const value_name  = value.name
        valueSerializer.writeInt32(value_name.length as int32)
        for (let i = 0; i < value_name.length; i++) {
            const value_name_element : string = value_name[i]
            valueSerializer.writeString(value_name_element)
        }
        const value_status  = value.status
        valueSerializer.writeInt32(TypeChecker.SelectStatus_ToNumeric(value_status))
    }
    writeCheckboxOptions(value: CheckboxOptions): void {
        let valueSerializer : Serializer = this
        const value_name  = value.name
        let value_name_type : int32 = RuntimeType.UNDEFINED
        value_name_type = runtimeType(value_name)
        valueSerializer.writeInt8(value_name_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_name_type)) {
            const value_name_value  = value_name!
            valueSerializer.writeString(value_name_value)
        }
        const value_group  = value.group
        let value_group_type : int32 = RuntimeType.UNDEFINED
        value_group_type = runtimeType(value_group)
        valueSerializer.writeInt8(value_group_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_group_type)) {
            const value_group_value  = value_group!
            valueSerializer.writeString(value_group_value)
        }
        const value_indicatorBuilder  = value.indicatorBuilder
        let value_indicatorBuilder_type : int32 = RuntimeType.UNDEFINED
        value_indicatorBuilder_type = runtimeType(value_indicatorBuilder)
        valueSerializer.writeInt8(value_indicatorBuilder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_indicatorBuilder_type)) {
            const value_indicatorBuilder_value  = value_indicatorBuilder!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_indicatorBuilder_value))
        }
    }
    writeChildrenMainSize(value: ChildrenMainSize): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCircle(value: Circle): void {
        let valueSerializer : Serializer = this
        const value_centerX  = value.centerX
        valueSerializer.writeNumber(value_centerX)
        const value_centerY  = value.centerY
        valueSerializer.writeNumber(value_centerY)
        const value_radius  = value.radius
        valueSerializer.writeNumber(value_radius)
    }
    writeCircleOptions(value: CircleOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as string
                valueSerializer.writeString(value_width_value_0)
            }
            else if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as string
                valueSerializer.writeString(value_height_value_0)
            }
            else if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_1)
            }
        }
    }
    writeClickEffect(value: ClickEffect): void {
        let valueSerializer : Serializer = this
        const value_level  = value.level
        valueSerializer.writeInt32(TypeChecker.ClickEffectLevel_ToNumeric(value_level))
        const value_scale  = value.scale
        let value_scale_type : int32 = RuntimeType.UNDEFINED
        value_scale_type = runtimeType(value_scale)
        valueSerializer.writeInt8(value_scale_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scale_type)) {
            const value_scale_value  = value_scale!
            valueSerializer.writeNumber(value_scale_value)
        }
    }
    writeCloseSwipeActionOptions(value: CloseSwipeActionOptions): void {
        let valueSerializer : Serializer = this
        const value_onFinish  = value.onFinish
        let value_onFinish_type : int32 = RuntimeType.UNDEFINED
        value_onFinish_type = runtimeType(value_onFinish)
        valueSerializer.writeInt8(value_onFinish_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onFinish_type)) {
            const value_onFinish_value  = value_onFinish!
            valueSerializer.holdAndWriteCallback(value_onFinish_value)
        }
    }
    writeColorMetrics(value: ColorMetrics): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeColumnOptions(value: ColumnOptions): void {
        let valueSerializer : Serializer = this
        const value_space  = value.space
        let value_space_type : int32 = RuntimeType.UNDEFINED
        value_space_type = runtimeType(value_space)
        valueSerializer.writeInt8(value_space_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_space_type)) {
            const value_space_value  = value_space!
            let value_space_value_type : int32 = RuntimeType.UNDEFINED
            value_space_value_type = runtimeType(value_space_value)
            if (RuntimeType.STRING == value_space_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_space_value_0  = value_space_value as string
                valueSerializer.writeString(value_space_value_0)
            }
            else if (RuntimeType.NUMBER == value_space_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_space_value_1  = value_space_value as number
                valueSerializer.writeNumber(value_space_value_1)
            }
        }
    }
    writeColumnOptionsV2(value: ColumnOptionsV2): void {
        let valueSerializer : Serializer = this
        const value_stub  = value.stub
        valueSerializer.writeString(value_stub)
    }
    writeColumnSplitDividerStyle(value: ColumnSplitDividerStyle): void {
        let valueSerializer : Serializer = this
        const value_startMargin  = value.startMargin
        let value_startMargin_type : int32 = RuntimeType.UNDEFINED
        value_startMargin_type = runtimeType(value_startMargin)
        valueSerializer.writeInt8(value_startMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_startMargin_type)) {
            const value_startMargin_value  = value_startMargin!
            valueSerializer.writeLength(value_startMargin_value)
        }
        const value_endMargin  = value.endMargin
        let value_endMargin_type : int32 = RuntimeType.UNDEFINED
        value_endMargin_type = runtimeType(value_endMargin)
        valueSerializer.writeInt8(value_endMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_endMargin_type)) {
            const value_endMargin_value  = value_endMargin!
            valueSerializer.writeLength(value_endMargin_value)
        }
    }
    writeCommandPath(value: CommandPath): void {
        let valueSerializer : Serializer = this
        const value_commands  = value.commands
        valueSerializer.writeString(value_commands)
    }
    writeCommonConfiguration(value: CommonConfiguration): void {
        let valueSerializer : Serializer = this
        const value_enabled  = value.enabled
        valueSerializer.writeBoolean(value_enabled)
        const value_contentModifier  = value.contentModifier
        valueSerializer.holdAndWriteObject(value_contentModifier)
    }
    writeCommonModifier(value: CommonModifier): void {
        let valueSerializer : Serializer = this
        const value__CommonModifierStub  = value._CommonModifierStub
        valueSerializer.writeString(value__CommonModifierStub)
    }
    writeComputedBarAttribute(value: ComputedBarAttribute): void {
        let valueSerializer : Serializer = this
        const value_totalOffset  = value.totalOffset
        valueSerializer.writeNumber(value_totalOffset)
        const value_totalLength  = value.totalLength
        valueSerializer.writeNumber(value_totalLength)
    }
    writeConstraintSizeOptions(value: ConstraintSizeOptions): void {
        let valueSerializer : Serializer = this
        const value_minWidth  = value.minWidth
        let value_minWidth_type : int32 = RuntimeType.UNDEFINED
        value_minWidth_type = runtimeType(value_minWidth)
        valueSerializer.writeInt8(value_minWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_minWidth_type)) {
            const value_minWidth_value  = value_minWidth!
            valueSerializer.writeLength(value_minWidth_value)
        }
        const value_maxWidth  = value.maxWidth
        let value_maxWidth_type : int32 = RuntimeType.UNDEFINED
        value_maxWidth_type = runtimeType(value_maxWidth)
        valueSerializer.writeInt8(value_maxWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxWidth_type)) {
            const value_maxWidth_value  = value_maxWidth!
            valueSerializer.writeLength(value_maxWidth_value)
        }
        const value_minHeight  = value.minHeight
        let value_minHeight_type : int32 = RuntimeType.UNDEFINED
        value_minHeight_type = runtimeType(value_minHeight)
        valueSerializer.writeInt8(value_minHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_minHeight_type)) {
            const value_minHeight_value  = value_minHeight!
            valueSerializer.writeLength(value_minHeight_value)
        }
        const value_maxHeight  = value.maxHeight
        let value_maxHeight_type : int32 = RuntimeType.UNDEFINED
        value_maxHeight_type = runtimeType(value_maxHeight)
        valueSerializer.writeInt8(value_maxHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxHeight_type)) {
            const value_maxHeight_value  = value_maxHeight!
            valueSerializer.writeLength(value_maxHeight_value)
        }
    }
    writeContext(value: Context): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCopyEvent(value: CopyEvent): void {
        let valueSerializer : Serializer = this
        const value_preventDefault  = value.preventDefault
        let value_preventDefault_type : int32 = RuntimeType.UNDEFINED
        value_preventDefault_type = runtimeType(value_preventDefault)
        valueSerializer.writeInt8(value_preventDefault_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_preventDefault_type)) {
            const value_preventDefault_value  = value_preventDefault!
            valueSerializer.holdAndWriteCallback(value_preventDefault_value)
        }
    }
    writeCornerRadius(value: CornerRadius): void {
        let valueSerializer : Serializer = this
        const value_topLeft  = value.topLeft
        valueSerializer.writeVector2(value_topLeft)
        const value_topRight  = value.topRight
        valueSerializer.writeVector2(value_topRight)
        const value_bottomLeft  = value.bottomLeft
        valueSerializer.writeVector2(value_bottomLeft)
        const value_bottomRight  = value.bottomRight
        valueSerializer.writeVector2(value_bottomRight)
    }
    writeCrownEvent(value: CrownEvent): void {
        let valueSerializer : Serializer = this
        const value_timestamp  = value.timestamp
        valueSerializer.writeInt64(value_timestamp)
        const value_angularVelocity  = value.angularVelocity
        valueSerializer.writeNumber(value_angularVelocity)
        const value_degree  = value.degree
        valueSerializer.writeNumber(value_degree)
        const value_action  = value.action
        valueSerializer.writeInt32(TypeChecker.CrownAction_ToNumeric(value_action))
        const value_stopPropagation  = value.stopPropagation
        valueSerializer.holdAndWriteCallback(value_stopPropagation)
    }
    writeCustomSpanDrawInfo(value: CustomSpanDrawInfo): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_lineTop  = value.lineTop
        valueSerializer.writeNumber(value_lineTop)
        const value_lineBottom  = value.lineBottom
        valueSerializer.writeNumber(value_lineBottom)
        const value_baseline  = value.baseline
        valueSerializer.writeNumber(value_baseline)
    }
    writeCustomSpanMeasureInfo(value: CustomSpanMeasureInfo): void {
        let valueSerializer : Serializer = this
        const value_fontSize  = value.fontSize
        valueSerializer.writeNumber(value_fontSize)
    }
    writeCustomSpanMetrics(value: CustomSpanMetrics): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeNumber(value_height_value)
        }
    }
    writeCutEvent(value: CutEvent): void {
        let valueSerializer : Serializer = this
        const value_preventDefault  = value.preventDefault
        let value_preventDefault_type : int32 = RuntimeType.UNDEFINED
        value_preventDefault_type = runtimeType(value_preventDefault)
        valueSerializer.writeInt8(value_preventDefault_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_preventDefault_type)) {
            const value_preventDefault_value  = value_preventDefault!
            valueSerializer.holdAndWriteCallback(value_preventDefault_value)
        }
    }
    writeDataPanelOptions(value: DataPanelOptions): void {
        let valueSerializer : Serializer = this
        const value_values  = value.values
        valueSerializer.writeInt32(value_values.length as int32)
        for (let i = 0; i < value_values.length; i++) {
            const value_values_element : number = value_values[i]
            valueSerializer.writeNumber(value_values_element)
        }
        const value_max  = value.max
        let value_max_type : int32 = RuntimeType.UNDEFINED
        value_max_type = runtimeType(value_max)
        valueSerializer.writeInt8(value_max_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_max_type)) {
            const value_max_value  = value_max!
            valueSerializer.writeNumber(value_max_value)
        }
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = (value_type as DataPanelType)
            valueSerializer.writeInt32(TypeChecker.DataPanelType_ToNumeric(value_type_value))
        }
    }
    writeDataSyncOptions(value: DataSyncOptions): void {
        let valueSerializer : Serializer = this
        const value__DataSyncOptionsStub  = value._DataSyncOptionsStub
        valueSerializer.writeString(value__DataSyncOptionsStub)
    }
    writeDatePickerOptions(value: DatePickerOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeInt64((value_start_value.getTime() as int64))
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeInt64((value_end_value.getTime() as int64))
        }
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            valueSerializer.writeInt64((value_selected_value.getTime() as int64))
        }
        const value_mode  = value.mode
        let value_mode_type : int32 = RuntimeType.UNDEFINED
        value_mode_type = runtimeType(value_mode)
        valueSerializer.writeInt8(value_mode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_mode_type)) {
            const value_mode_value  = (value_mode as DatePickerMode)
            valueSerializer.writeInt32(TypeChecker.DatePickerMode_ToNumeric(value_mode_value))
        }
    }
    writeDatePickerResult(value: DatePickerResult): void {
        let valueSerializer : Serializer = this
        const value_year  = value.year
        let value_year_type : int32 = RuntimeType.UNDEFINED
        value_year_type = runtimeType(value_year)
        valueSerializer.writeInt8(value_year_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_year_type)) {
            const value_year_value  = value_year!
            valueSerializer.writeNumber(value_year_value)
        }
        const value_month  = value.month
        let value_month_type : int32 = RuntimeType.UNDEFINED
        value_month_type = runtimeType(value_month)
        valueSerializer.writeInt8(value_month_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_month_type)) {
            const value_month_value  = value_month!
            valueSerializer.writeNumber(value_month_value)
        }
        const value_day  = value.day
        let value_day_type : int32 = RuntimeType.UNDEFINED
        value_day_type = runtimeType(value_day)
        valueSerializer.writeInt8(value_day_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_day_type)) {
            const value_day_value  = value_day!
            valueSerializer.writeNumber(value_day_value)
        }
    }
    writeDateRange(value: DateRange): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeInt64((value_start_value.getTime() as int64))
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeInt64((value_end_value.getTime() as int64))
        }
    }
    writeDateTimeOptions(value: DateTimeOptions): void {
        let valueSerializer : Serializer = this
        const value_locale  = value.locale
        let value_locale_type : int32 = RuntimeType.UNDEFINED
        value_locale_type = runtimeType(value_locale)
        valueSerializer.writeInt8(value_locale_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_locale_type)) {
            const value_locale_value  = value_locale!
            valueSerializer.writeString(value_locale_value)
        }
        const value_dateStyle  = value.dateStyle
        let value_dateStyle_type : int32 = RuntimeType.UNDEFINED
        value_dateStyle_type = runtimeType(value_dateStyle)
        valueSerializer.writeInt8(value_dateStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dateStyle_type)) {
            const value_dateStyle_value  = value_dateStyle!
            valueSerializer.writeString(value_dateStyle_value)
        }
        const value_timeStyle  = value.timeStyle
        let value_timeStyle_type : int32 = RuntimeType.UNDEFINED
        value_timeStyle_type = runtimeType(value_timeStyle)
        valueSerializer.writeInt8(value_timeStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_timeStyle_type)) {
            const value_timeStyle_value  = value_timeStyle!
            valueSerializer.writeString(value_timeStyle_value)
        }
        const value_hourCycle  = value.hourCycle
        let value_hourCycle_type : int32 = RuntimeType.UNDEFINED
        value_hourCycle_type = runtimeType(value_hourCycle)
        valueSerializer.writeInt8(value_hourCycle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hourCycle_type)) {
            const value_hourCycle_value  = value_hourCycle!
            valueSerializer.writeString(value_hourCycle_value)
        }
        const value_timeZone  = value.timeZone
        let value_timeZone_type : int32 = RuntimeType.UNDEFINED
        value_timeZone_type = runtimeType(value_timeZone)
        valueSerializer.writeInt8(value_timeZone_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_timeZone_type)) {
            const value_timeZone_value  = value_timeZone!
            valueSerializer.writeString(value_timeZone_value)
        }
        const value_numberingSystem  = value.numberingSystem
        let value_numberingSystem_type : int32 = RuntimeType.UNDEFINED
        value_numberingSystem_type = runtimeType(value_numberingSystem)
        valueSerializer.writeInt8(value_numberingSystem_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_numberingSystem_type)) {
            const value_numberingSystem_value  = value_numberingSystem!
            valueSerializer.writeString(value_numberingSystem_value)
        }
        const value_hour12  = value.hour12
        let value_hour12_type : int32 = RuntimeType.UNDEFINED
        value_hour12_type = runtimeType(value_hour12)
        valueSerializer.writeInt8(value_hour12_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hour12_type)) {
            const value_hour12_value  = value_hour12!
            valueSerializer.writeBoolean(value_hour12_value)
        }
        const value_weekday  = value.weekday
        let value_weekday_type : int32 = RuntimeType.UNDEFINED
        value_weekday_type = runtimeType(value_weekday)
        valueSerializer.writeInt8(value_weekday_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_weekday_type)) {
            const value_weekday_value  = value_weekday!
            valueSerializer.writeString(value_weekday_value)
        }
        const value_era  = value.era
        let value_era_type : int32 = RuntimeType.UNDEFINED
        value_era_type = runtimeType(value_era)
        valueSerializer.writeInt8(value_era_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_era_type)) {
            const value_era_value  = value_era!
            valueSerializer.writeString(value_era_value)
        }
        const value_year  = value.year
        let value_year_type : int32 = RuntimeType.UNDEFINED
        value_year_type = runtimeType(value_year)
        valueSerializer.writeInt8(value_year_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_year_type)) {
            const value_year_value  = value_year!
            valueSerializer.writeString(value_year_value)
        }
        const value_month  = value.month
        let value_month_type : int32 = RuntimeType.UNDEFINED
        value_month_type = runtimeType(value_month)
        valueSerializer.writeInt8(value_month_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_month_type)) {
            const value_month_value  = value_month!
            valueSerializer.writeString(value_month_value)
        }
        const value_day  = value.day
        let value_day_type : int32 = RuntimeType.UNDEFINED
        value_day_type = runtimeType(value_day)
        valueSerializer.writeInt8(value_day_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_day_type)) {
            const value_day_value  = value_day!
            valueSerializer.writeString(value_day_value)
        }
        const value_hour  = value.hour
        let value_hour_type : int32 = RuntimeType.UNDEFINED
        value_hour_type = runtimeType(value_hour)
        valueSerializer.writeInt8(value_hour_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hour_type)) {
            const value_hour_value  = value_hour!
            valueSerializer.writeString(value_hour_value)
        }
        const value_minute  = value.minute
        let value_minute_type : int32 = RuntimeType.UNDEFINED
        value_minute_type = runtimeType(value_minute)
        valueSerializer.writeInt8(value_minute_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_minute_type)) {
            const value_minute_value  = value_minute!
            valueSerializer.writeString(value_minute_value)
        }
        const value_second  = value.second
        let value_second_type : int32 = RuntimeType.UNDEFINED
        value_second_type = runtimeType(value_second)
        valueSerializer.writeInt8(value_second_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_second_type)) {
            const value_second_value  = value_second!
            valueSerializer.writeString(value_second_value)
        }
        const value_timeZoneName  = value.timeZoneName
        let value_timeZoneName_type : int32 = RuntimeType.UNDEFINED
        value_timeZoneName_type = runtimeType(value_timeZoneName)
        valueSerializer.writeInt8(value_timeZoneName_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_timeZoneName_type)) {
            const value_timeZoneName_value  = value_timeZoneName!
            valueSerializer.writeString(value_timeZoneName_value)
        }
        const value_dayPeriod  = value.dayPeriod
        let value_dayPeriod_type : int32 = RuntimeType.UNDEFINED
        value_dayPeriod_type = runtimeType(value_dayPeriod)
        valueSerializer.writeInt8(value_dayPeriod_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dayPeriod_type)) {
            const value_dayPeriod_value  = value_dayPeriod!
            valueSerializer.writeString(value_dayPeriod_value)
        }
        const value_localeMatcher  = value.localeMatcher
        let value_localeMatcher_type : int32 = RuntimeType.UNDEFINED
        value_localeMatcher_type = runtimeType(value_localeMatcher)
        valueSerializer.writeInt8(value_localeMatcher_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_localeMatcher_type)) {
            const value_localeMatcher_value  = value_localeMatcher!
            valueSerializer.writeString(value_localeMatcher_value)
        }
        const value_formatMatcher  = value.formatMatcher
        let value_formatMatcher_type : int32 = RuntimeType.UNDEFINED
        value_formatMatcher_type = runtimeType(value_formatMatcher)
        valueSerializer.writeInt8(value_formatMatcher_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_formatMatcher_type)) {
            const value_formatMatcher_value  = value_formatMatcher!
            valueSerializer.writeString(value_formatMatcher_value)
        }
    }
    writeDeleteValue(value: DeleteValue): void {
        let valueSerializer : Serializer = this
        const value_deleteOffset  = value.deleteOffset
        valueSerializer.writeNumber(value_deleteOffset)
        const value_direction  = value.direction
        valueSerializer.writeInt32(TypeChecker.TextDeleteDirection_ToNumeric(value_direction))
        const value_deleteValue  = value.deleteValue
        valueSerializer.writeString(value_deleteValue)
    }
    writeDirectionalEdgesT(value: DirectionalEdgesT): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        valueSerializer.writeNumber(value_start)
        const value_end  = value.end
        valueSerializer.writeNumber(value_end)
        const value_top  = value.top
        valueSerializer.writeNumber(value_top)
        const value_bottom  = value.bottom
        valueSerializer.writeNumber(value_bottom)
    }
    writeDisappearSymbolEffect(value: DisappearSymbolEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeDismissContentCoverAction(value: DismissContentCoverAction): void {
        let valueSerializer : Serializer = this
        const value_dismiss  = value.dismiss
        valueSerializer.holdAndWriteCallback(value_dismiss)
        const value_reason  = value.reason
        valueSerializer.writeInt32(TypeChecker.DismissReason_ToNumeric(value_reason))
    }
    writeDismissDialogAction(value: DismissDialogAction): void {
        let valueSerializer : Serializer = this
        const value_dismiss  = value.dismiss
        valueSerializer.holdAndWriteCallback(value_dismiss)
        const value_reason  = value.reason
        valueSerializer.writeInt32(TypeChecker.DismissReason_ToNumeric(value_reason))
    }
    writeDismissPopupAction(value: DismissPopupAction): void {
        let valueSerializer : Serializer = this
        const value_dismiss  = value.dismiss
        valueSerializer.holdAndWriteCallback(CallbackTransformer.transformToCallbackVoid(value_dismiss))
        const value_reason  = value.reason
        valueSerializer.writeInt32(TypeChecker.DismissReason_ToNumeric(value_reason))
    }
    writeDismissSheetAction(value: DismissSheetAction): void {
        let valueSerializer : Serializer = this
        const value_dismiss  = value.dismiss
        valueSerializer.holdAndWriteCallback(value_dismiss)
        const value_reason  = value.reason
        valueSerializer.writeInt32(TypeChecker.DismissReason_ToNumeric(value_reason))
    }
    writeDoubleAnimationParam(value: DoubleAnimationParam): void {
        let valueSerializer : Serializer = this
        const value_propertyName  = value.propertyName
        valueSerializer.writeString(value_propertyName)
        const value_startValue  = value.startValue
        valueSerializer.writeFloat32(value_startValue)
        const value_endValue  = value.endValue
        valueSerializer.writeFloat32(value_endValue)
        const value_duration  = value.duration
        valueSerializer.writeInt32(value_duration)
        const value_delay  = value.delay
        valueSerializer.writeInt32(value_delay)
        const value_curve  = value.curve
        let value_curve_type : int32 = RuntimeType.UNDEFINED
        value_curve_type = runtimeType(value_curve)
        if (TypeChecker.isCurve(value_curve)) {
            valueSerializer.writeInt8(0 as int32)
            const value_curve_0  = value_curve as Curve
            valueSerializer.writeInt32(TypeChecker.Curve_ToNumeric(value_curve_0))
        }
        else if (RuntimeType.STRING == value_curve_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_curve_1  = value_curve as string
            valueSerializer.writeString(value_curve_1)
        }
        else if (RuntimeType.OBJECT == value_curve_type) {
            valueSerializer.writeInt8(2 as int32)
            const value_curve_2  = value_curve as ICurve
            valueSerializer.writeICurve(value_curve_2)
        }
        const value_onProgress  = value.onProgress
        let value_onProgress_type : int32 = RuntimeType.UNDEFINED
        value_onProgress_type = runtimeType(value_onProgress)
        valueSerializer.writeInt8(value_onProgress_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onProgress_type)) {
            const value_onProgress_value  = value_onProgress!
            valueSerializer.holdAndWriteCallback(value_onProgress_value)
        }
        const value_onFinish  = value.onFinish
        let value_onFinish_type : int32 = RuntimeType.UNDEFINED
        value_onFinish_type = runtimeType(value_onFinish)
        valueSerializer.writeInt8(value_onFinish_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onFinish_type)) {
            const value_onFinish_value  = value_onFinish!
            valueSerializer.holdAndWriteCallback(value_onFinish_value)
        }
    }
    writeDragInteractionOptions(value: DragInteractionOptions): void {
        let valueSerializer : Serializer = this
        const value_isMultiSelectionEnabled  = value.isMultiSelectionEnabled
        let value_isMultiSelectionEnabled_type : int32 = RuntimeType.UNDEFINED
        value_isMultiSelectionEnabled_type = runtimeType(value_isMultiSelectionEnabled)
        valueSerializer.writeInt8(value_isMultiSelectionEnabled_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isMultiSelectionEnabled_type)) {
            const value_isMultiSelectionEnabled_value  = value_isMultiSelectionEnabled!
            valueSerializer.writeBoolean(value_isMultiSelectionEnabled_value)
        }
        const value_defaultAnimationBeforeLifting  = value.defaultAnimationBeforeLifting
        let value_defaultAnimationBeforeLifting_type : int32 = RuntimeType.UNDEFINED
        value_defaultAnimationBeforeLifting_type = runtimeType(value_defaultAnimationBeforeLifting)
        valueSerializer.writeInt8(value_defaultAnimationBeforeLifting_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_defaultAnimationBeforeLifting_type)) {
            const value_defaultAnimationBeforeLifting_value  = value_defaultAnimationBeforeLifting!
            valueSerializer.writeBoolean(value_defaultAnimationBeforeLifting_value)
        }
        const value_enableEdgeAutoScroll  = value.enableEdgeAutoScroll
        let value_enableEdgeAutoScroll_type : int32 = RuntimeType.UNDEFINED
        value_enableEdgeAutoScroll_type = runtimeType(value_enableEdgeAutoScroll)
        valueSerializer.writeInt8(value_enableEdgeAutoScroll_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableEdgeAutoScroll_type)) {
            const value_enableEdgeAutoScroll_value  = value_enableEdgeAutoScroll!
            valueSerializer.writeBoolean(value_enableEdgeAutoScroll_value)
        }
        const value_enableHapticFeedback  = value.enableHapticFeedback
        let value_enableHapticFeedback_type : int32 = RuntimeType.UNDEFINED
        value_enableHapticFeedback_type = runtimeType(value_enableHapticFeedback)
        valueSerializer.writeInt8(value_enableHapticFeedback_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHapticFeedback_type)) {
            const value_enableHapticFeedback_value  = value_enableHapticFeedback!
            valueSerializer.writeBoolean(value_enableHapticFeedback_value)
        }
        const value_isLiftingDisabled  = value.isLiftingDisabled
        let value_isLiftingDisabled_type : int32 = RuntimeType.UNDEFINED
        value_isLiftingDisabled_type = runtimeType(value_isLiftingDisabled)
        valueSerializer.writeInt8(value_isLiftingDisabled_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isLiftingDisabled_type)) {
            const value_isLiftingDisabled_value  = value_isLiftingDisabled!
            valueSerializer.writeBoolean(value_isLiftingDisabled_value)
        }
    }
    writeDragItemInfo(value: DragItemInfo): void {
        let valueSerializer : Serializer = this
        const value_pixelMap  = value.pixelMap
        let value_pixelMap_type : int32 = RuntimeType.UNDEFINED
        value_pixelMap_type = runtimeType(value_pixelMap)
        valueSerializer.writeInt8(value_pixelMap_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_pixelMap_type)) {
            const value_pixelMap_value  = value_pixelMap!
            valueSerializer.writePixelMap(value_pixelMap_value)
        }
        const value_builder  = value.builder
        let value_builder_type : int32 = RuntimeType.UNDEFINED
        value_builder_type = runtimeType(value_builder)
        valueSerializer.writeInt8(value_builder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_builder_type)) {
            const value_builder_value  = value_builder!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_builder_value))
        }
        const value_extraInfo  = value.extraInfo
        let value_extraInfo_type : int32 = RuntimeType.UNDEFINED
        value_extraInfo_type = runtimeType(value_extraInfo)
        valueSerializer.writeInt8(value_extraInfo_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_extraInfo_type)) {
            const value_extraInfo_value  = value_extraInfo!
            valueSerializer.writeString(value_extraInfo_value)
        }
    }
    writeDrawContext(value: DrawContext): void {
        let valueSerializer : Serializer = this
        const value_size  = value.size
        valueSerializer.writeSize(value_size)
        const value_sizeInPixel  = value.sizeInPixel
        valueSerializer.writeSize(value_sizeInPixel)
        const value_canvas  = value.canvas
        valueSerializer.writeDrawingCanvas(value_canvas)
    }
    writeDrawingRenderingContext(value: DrawingRenderingContext): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeDropOptions(value: DropOptions): void {
        let valueSerializer : Serializer = this
        const value_disableDataPrefetch  = value.disableDataPrefetch
        let value_disableDataPrefetch_type : int32 = RuntimeType.UNDEFINED
        value_disableDataPrefetch_type = runtimeType(value_disableDataPrefetch)
        valueSerializer.writeInt8(value_disableDataPrefetch_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disableDataPrefetch_type)) {
            const value_disableDataPrefetch_value  = value_disableDataPrefetch!
            valueSerializer.writeBoolean(value_disableDataPrefetch_value)
        }
    }
    writeEdgeEffectOptions(value: EdgeEffectOptions): void {
        let valueSerializer : Serializer = this
        const value_alwaysEnabled  = value.alwaysEnabled
        valueSerializer.writeBoolean(value_alwaysEnabled)
        const value_effectEdge  = value.effectEdge
        let value_effectEdge_type : int32 = RuntimeType.UNDEFINED
        value_effectEdge_type = runtimeType(value_effectEdge)
        valueSerializer.writeInt8(value_effectEdge_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_effectEdge_type)) {
            const value_effectEdge_value  = value_effectEdge!
            valueSerializer.writeNumber(value_effectEdge_value)
        }
    }
    writeEdgeOutlineStyles(value: EdgeOutlineStyles): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = (value_top as OutlineStyle)
            valueSerializer.writeInt32(TypeChecker.OutlineStyle_ToNumeric(value_top_value))
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = (value_right as OutlineStyle)
            valueSerializer.writeInt32(TypeChecker.OutlineStyle_ToNumeric(value_right_value))
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = (value_bottom as OutlineStyle)
            valueSerializer.writeInt32(TypeChecker.OutlineStyle_ToNumeric(value_bottom_value))
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = (value_left as OutlineStyle)
            valueSerializer.writeInt32(TypeChecker.OutlineStyle_ToNumeric(value_left_value))
        }
    }
    writeEdgeOutlineWidths(value: EdgeOutlineWidths): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLength(value_top_value)
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            valueSerializer.writeLength(value_right_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLength(value_bottom_value)
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            valueSerializer.writeLength(value_left_value)
        }
    }
    writeEdges(value: Edges): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLength(value_top_value)
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            valueSerializer.writeLength(value_left_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLength(value_bottom_value)
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            valueSerializer.writeLength(value_right_value)
        }
    }
    writeEdgesNumber(value: EdgesT<number>): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeNumber(value_top_value)
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            valueSerializer.writeNumber(value_left_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeNumber(value_bottom_value)
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            valueSerializer.writeNumber(value_right_value)
        }
    }
    writeEdgeStyles(value: EdgeStyles): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = (value_top as BorderStyle)
            valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_top_value))
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = (value_right as BorderStyle)
            valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_right_value))
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = (value_bottom as BorderStyle)
            valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_bottom_value))
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = (value_left as BorderStyle)
            valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_left_value))
        }
    }
    writeGraphicsEdgeStyles(value: EdgesT<BorderStyle>): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = (value_top as BorderStyle)
            valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_top_value))
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = (value_right as BorderStyle)
            valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_right_value))
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = (value_bottom as BorderStyle)
            valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_bottom_value))
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = (value_left as BorderStyle)
            valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_left_value))
        }
    }
    writeEdgeWidths(value: EdgeWidths): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLength(value_top_value)
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            valueSerializer.writeLength(value_right_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLength(value_bottom_value)
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            valueSerializer.writeLength(value_left_value)
        }
    }
    writeEditMenuOptions(value: EditMenuOptions): void {
        let valueSerializer : Serializer = this
        const value_onCreateMenu  = value.onCreateMenu
        valueSerializer.holdAndWriteCallback(value_onCreateMenu)
        const value_onMenuItemClick  = value.onMenuItemClick
        valueSerializer.holdAndWriteCallback(value_onMenuItemClick)
    }
    writeEllipseOptions(value: EllipseOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as string
                valueSerializer.writeString(value_width_value_0)
            }
            else if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as string
                valueSerializer.writeString(value_height_value_0)
            }
            else if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_1)
            }
        }
    }
    writeEmbedOptions(value: EmbedOptions): void {
        let valueSerializer : Serializer = this
        const value_supportDefaultIntrinsicSize  = value.supportDefaultIntrinsicSize
        let value_supportDefaultIntrinsicSize_type : int32 = RuntimeType.UNDEFINED
        value_supportDefaultIntrinsicSize_type = runtimeType(value_supportDefaultIntrinsicSize)
        valueSerializer.writeInt8(value_supportDefaultIntrinsicSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_supportDefaultIntrinsicSize_type)) {
            const value_supportDefaultIntrinsicSize_value  = value_supportDefaultIntrinsicSize!
            valueSerializer.writeBoolean(value_supportDefaultIntrinsicSize_value)
        }
    }
    writeErrorEvent(value: ErrorEvent): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeString(value_type)
        const value_timeStamp  = value.timeStamp
        valueSerializer.writeInt64(value_timeStamp)
        const value_message  = value.message
        valueSerializer.writeString(value_message)
        const value_filename  = value.filename
        valueSerializer.writeString(value_filename)
        const value_lineno  = value.lineno
        valueSerializer.writeNumber(value_lineno)
        const value_colno  = value.colno
        valueSerializer.writeNumber(value_colno)
        const value_error  = value.error
        valueSerializer.holdAndWriteObject(value_error)
    }
    writeEvent(value: Event): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeString(value_type)
        const value_timeStamp  = value.timeStamp
        valueSerializer.writeInt64(value_timeStamp)
    }
    writeExpectedFrameRateRange(value: ExpectedFrameRateRange): void {
        let valueSerializer : Serializer = this
        const value_min  = value.min
        valueSerializer.writeNumber(value_min)
        const value_max  = value.max
        valueSerializer.writeNumber(value_max)
        const value_expected  = value.expected
        valueSerializer.writeNumber(value_expected)
    }
    writeFingerInfo(value: FingerInfo): void {
        let valueSerializer : Serializer = this
        const value_id  = value.id
        valueSerializer.writeNumber(value_id)
        const value_globalX  = value.globalX
        valueSerializer.writeNumber(value_globalX)
        const value_globalY  = value.globalY
        valueSerializer.writeNumber(value_globalY)
        const value_localX  = value.localX
        valueSerializer.writeNumber(value_localX)
        const value_localY  = value.localY
        valueSerializer.writeNumber(value_localY)
        const value_displayX  = value.displayX
        valueSerializer.writeNumber(value_displayX)
        const value_displayY  = value.displayY
        valueSerializer.writeNumber(value_displayY)
        const value_hand  = value.hand
        let value_hand_type : int32 = RuntimeType.UNDEFINED
        value_hand_type = runtimeType(value_hand)
        valueSerializer.writeInt8(value_hand_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hand_type)) {
            const value_hand_value  = (value_hand as InteractionHand)
            valueSerializer.writeInt32(TypeChecker.InteractionHand_ToNumeric(value_hand_value))
        }
    }
    writeFirstMeaningfulPaint(value: FirstMeaningfulPaint): void {
        let valueSerializer : Serializer = this
        const value_navigationStartTime  = value.navigationStartTime
        let value_navigationStartTime_type : int32 = RuntimeType.UNDEFINED
        value_navigationStartTime_type = runtimeType(value_navigationStartTime)
        valueSerializer.writeInt8(value_navigationStartTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_navigationStartTime_type)) {
            const value_navigationStartTime_value  = value_navigationStartTime!
            valueSerializer.writeNumber(value_navigationStartTime_value)
        }
        const value_firstMeaningfulPaintTime  = value.firstMeaningfulPaintTime
        let value_firstMeaningfulPaintTime_type : int32 = RuntimeType.UNDEFINED
        value_firstMeaningfulPaintTime_type = runtimeType(value_firstMeaningfulPaintTime)
        valueSerializer.writeInt8(value_firstMeaningfulPaintTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_firstMeaningfulPaintTime_type)) {
            const value_firstMeaningfulPaintTime_value  = value_firstMeaningfulPaintTime!
            valueSerializer.writeNumber(value_firstMeaningfulPaintTime_value)
        }
    }
    writeFocusMovement(value: FocusMovement): void {
        let valueSerializer : Serializer = this
        const value_forward  = value.forward
        let value_forward_type : int32 = RuntimeType.UNDEFINED
        value_forward_type = runtimeType(value_forward)
        valueSerializer.writeInt8(value_forward_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_forward_type)) {
            const value_forward_value  = value_forward!
            valueSerializer.writeString(value_forward_value)
        }
        const value_backward  = value.backward
        let value_backward_type : int32 = RuntimeType.UNDEFINED
        value_backward_type = runtimeType(value_backward)
        valueSerializer.writeInt8(value_backward_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backward_type)) {
            const value_backward_value  = value_backward!
            valueSerializer.writeString(value_backward_value)
        }
        const value_up  = value.up
        let value_up_type : int32 = RuntimeType.UNDEFINED
        value_up_type = runtimeType(value_up)
        valueSerializer.writeInt8(value_up_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_up_type)) {
            const value_up_value  = value_up!
            valueSerializer.writeString(value_up_value)
        }
        const value_down  = value.down
        let value_down_type : int32 = RuntimeType.UNDEFINED
        value_down_type = runtimeType(value_down)
        valueSerializer.writeInt8(value_down_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_down_type)) {
            const value_down_value  = value_down!
            valueSerializer.writeString(value_down_value)
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            valueSerializer.writeString(value_left_value)
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            valueSerializer.writeString(value_right_value)
        }
    }
    writeFolderStackOptions(value: FolderStackOptions): void {
        let valueSerializer : Serializer = this
        const value_upperItems  = value.upperItems
        let value_upperItems_type : int32 = RuntimeType.UNDEFINED
        value_upperItems_type = runtimeType(value_upperItems)
        valueSerializer.writeInt8(value_upperItems_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_upperItems_type)) {
            const value_upperItems_value  = value_upperItems!
            valueSerializer.writeInt32(value_upperItems_value.length as int32)
            for (let i = 0; i < value_upperItems_value.length; i++) {
                const value_upperItems_value_element : string = value_upperItems_value[i]
                valueSerializer.writeString(value_upperItems_value_element)
            }
        }
    }
    writeFontInfo(value: FontInfo): void {
        let valueSerializer : Serializer = this
        const value_path  = value.path
        valueSerializer.writeString(value_path)
        const value_postScriptName  = value.postScriptName
        valueSerializer.writeString(value_postScriptName)
        const value_fullName  = value.fullName
        valueSerializer.writeString(value_fullName)
        const value_family  = value.family
        valueSerializer.writeString(value_family)
        const value_subfamily  = value.subfamily
        valueSerializer.writeString(value_subfamily)
        const value_weight  = value.weight
        valueSerializer.writeNumber(value_weight)
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_italic  = value.italic
        valueSerializer.writeBoolean(value_italic)
        const value_monoSpace  = value.monoSpace
        valueSerializer.writeBoolean(value_monoSpace)
        const value_symbolic  = value.symbolic
        valueSerializer.writeBoolean(value_symbolic)
    }
    writeFontSettingOptions(value: FontSettingOptions): void {
        let valueSerializer : Serializer = this
        const value_enableVariableFontWeight  = value.enableVariableFontWeight
        let value_enableVariableFontWeight_type : int32 = RuntimeType.UNDEFINED
        value_enableVariableFontWeight_type = runtimeType(value_enableVariableFontWeight)
        valueSerializer.writeInt8(value_enableVariableFontWeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableVariableFontWeight_type)) {
            const value_enableVariableFontWeight_value  = value_enableVariableFontWeight!
            valueSerializer.writeBoolean(value_enableVariableFontWeight_value)
        }
    }
    writeForegroundEffectOptions(value: ForegroundEffectOptions): void {
        let valueSerializer : Serializer = this
        const value_radius  = value.radius
        valueSerializer.writeNumber(value_radius)
    }
    writeFormCallbackInfo(value: FormCallbackInfo): void {
        let valueSerializer : Serializer = this
        const value_id  = value.id
        valueSerializer.writeInt64(value_id)
        const value_idString  = value.idString
        valueSerializer.writeString(value_idString)
    }
    writeFormLinkOptions(value: FormLinkOptions): void {
        let valueSerializer : Serializer = this
        const value_action  = value.action
        valueSerializer.writeString(value_action)
        const value_moduleName  = value.moduleName
        let value_moduleName_type : int32 = RuntimeType.UNDEFINED
        value_moduleName_type = runtimeType(value_moduleName)
        valueSerializer.writeInt8(value_moduleName_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_moduleName_type)) {
            const value_moduleName_value  = value_moduleName!
            valueSerializer.writeString(value_moduleName_value)
        }
        const value_bundleName  = value.bundleName
        let value_bundleName_type : int32 = RuntimeType.UNDEFINED
        value_bundleName_type = runtimeType(value_bundleName)
        valueSerializer.writeInt8(value_bundleName_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bundleName_type)) {
            const value_bundleName_value  = value_bundleName!
            valueSerializer.writeString(value_bundleName_value)
        }
        const value_abilityName  = value.abilityName
        let value_abilityName_type : int32 = RuntimeType.UNDEFINED
        value_abilityName_type = runtimeType(value_abilityName)
        valueSerializer.writeInt8(value_abilityName_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_abilityName_type)) {
            const value_abilityName_value  = value_abilityName!
            valueSerializer.writeString(value_abilityName_value)
        }
        const value_uri  = value.uri
        let value_uri_type : int32 = RuntimeType.UNDEFINED
        value_uri_type = runtimeType(value_uri)
        valueSerializer.writeInt8(value_uri_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_uri_type)) {
            const value_uri_value  = value_uri!
            valueSerializer.writeString(value_uri_value)
        }
        const value_params  = value.params
        let value_params_type : int32 = RuntimeType.UNDEFINED
        value_params_type = runtimeType(value_params)
        valueSerializer.writeInt8(value_params_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_params_type)) {
            const value_params_value  = value_params!
            valueSerializer.holdAndWriteObject(value_params_value)
        }
    }
    writeFrame(value: Frame): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_height  = value.height
        valueSerializer.writeNumber(value_height)
    }
    writeFullScreenEnterEvent(value: FullScreenEnterEvent): void {
        let valueSerializer : Serializer = this
        const value_handler  = value.handler
        valueSerializer.writeFullScreenExitHandler(value_handler)
        const value_videoWidth  = value.videoWidth
        let value_videoWidth_type : int32 = RuntimeType.UNDEFINED
        value_videoWidth_type = runtimeType(value_videoWidth)
        valueSerializer.writeInt8(value_videoWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_videoWidth_type)) {
            const value_videoWidth_value  = value_videoWidth!
            valueSerializer.writeNumber(value_videoWidth_value)
        }
        const value_videoHeight  = value.videoHeight
        let value_videoHeight_type : int32 = RuntimeType.UNDEFINED
        value_videoHeight_type = runtimeType(value_videoHeight)
        valueSerializer.writeInt8(value_videoHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_videoHeight_type)) {
            const value_videoHeight_value  = value_videoHeight!
            valueSerializer.writeNumber(value_videoHeight_value)
        }
    }
    writeGaugeOptions(value: GaugeOptions): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        valueSerializer.writeNumber(value_value)
        const value_min  = value.min
        let value_min_type : int32 = RuntimeType.UNDEFINED
        value_min_type = runtimeType(value_min)
        valueSerializer.writeInt8(value_min_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_min_type)) {
            const value_min_value  = value_min!
            valueSerializer.writeNumber(value_min_value)
        }
        const value_max  = value.max
        let value_max_type : int32 = RuntimeType.UNDEFINED
        value_max_type = runtimeType(value_max)
        valueSerializer.writeInt8(value_max_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_max_type)) {
            const value_max_value  = value_max!
            valueSerializer.writeNumber(value_max_value)
        }
    }
    writeGeometryTransitionOptions(value: GeometryTransitionOptions): void {
        let valueSerializer : Serializer = this
        const value_follow  = value.follow
        let value_follow_type : int32 = RuntimeType.UNDEFINED
        value_follow_type = runtimeType(value_follow)
        valueSerializer.writeInt8(value_follow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_follow_type)) {
            const value_follow_value  = value_follow!
            valueSerializer.writeBoolean(value_follow_value)
        }
        const value_hierarchyStrategy  = value.hierarchyStrategy
        let value_hierarchyStrategy_type : int32 = RuntimeType.UNDEFINED
        value_hierarchyStrategy_type = runtimeType(value_hierarchyStrategy)
        valueSerializer.writeInt8(value_hierarchyStrategy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hierarchyStrategy_type)) {
            const value_hierarchyStrategy_value  = (value_hierarchyStrategy as TransitionHierarchyStrategy)
            valueSerializer.writeInt32(TypeChecker.TransitionHierarchyStrategy_ToNumeric(value_hierarchyStrategy_value))
        }
    }
    writeGestureInfo(value: GestureInfo): void {
        let valueSerializer : Serializer = this
        const value_tag  = value.tag
        let value_tag_type : int32 = RuntimeType.UNDEFINED
        value_tag_type = runtimeType(value_tag)
        valueSerializer.writeInt8(value_tag_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_tag_type)) {
            const value_tag_value  = value_tag!
            valueSerializer.writeString(value_tag_value)
        }
        const value_type  = value.type
        valueSerializer.writeInt32(TypeChecker.GestureControl_GestureType_ToNumeric(value_type))
        const value_isSystemGesture  = value.isSystemGesture
        valueSerializer.writeBoolean(value_isSystemGesture)
    }
    writeGestureStyleInterface(value: GestureStyleInterface): void {
        let valueSerializer : Serializer = this
        const value_onClick  = value.onClick
        let value_onClick_type : int32 = RuntimeType.UNDEFINED
        value_onClick_type = runtimeType(value_onClick)
        valueSerializer.writeInt8(value_onClick_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onClick_type)) {
            const value_onClick_value  = value_onClick!
            valueSerializer.holdAndWriteCallback(value_onClick_value)
        }
        const value_onLongPress  = value.onLongPress
        let value_onLongPress_type : int32 = RuntimeType.UNDEFINED
        value_onLongPress_type = runtimeType(value_onLongPress)
        valueSerializer.writeInt8(value_onLongPress_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onLongPress_type)) {
            const value_onLongPress_value  = value_onLongPress!
            valueSerializer.holdAndWriteCallback(value_onLongPress_value)
        }
    }
    writeGridColColumnOption(value: GridColColumnOption): void {
        let valueSerializer : Serializer = this
        const value_xs  = value.xs
        let value_xs_type : int32 = RuntimeType.UNDEFINED
        value_xs_type = runtimeType(value_xs)
        valueSerializer.writeInt8(value_xs_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xs_type)) {
            const value_xs_value  = value_xs!
            valueSerializer.writeNumber(value_xs_value)
        }
        const value_sm  = value.sm
        let value_sm_type : int32 = RuntimeType.UNDEFINED
        value_sm_type = runtimeType(value_sm)
        valueSerializer.writeInt8(value_sm_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_sm_type)) {
            const value_sm_value  = value_sm!
            valueSerializer.writeNumber(value_sm_value)
        }
        const value_md  = value.md
        let value_md_type : int32 = RuntimeType.UNDEFINED
        value_md_type = runtimeType(value_md)
        valueSerializer.writeInt8(value_md_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_md_type)) {
            const value_md_value  = value_md!
            valueSerializer.writeNumber(value_md_value)
        }
        const value_lg  = value.lg
        let value_lg_type : int32 = RuntimeType.UNDEFINED
        value_lg_type = runtimeType(value_lg)
        valueSerializer.writeInt8(value_lg_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lg_type)) {
            const value_lg_value  = value_lg!
            valueSerializer.writeNumber(value_lg_value)
        }
        const value_xl  = value.xl
        let value_xl_type : int32 = RuntimeType.UNDEFINED
        value_xl_type = runtimeType(value_xl)
        valueSerializer.writeInt8(value_xl_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xl_type)) {
            const value_xl_value  = value_xl!
            valueSerializer.writeNumber(value_xl_value)
        }
        const value_xxl  = value.xxl
        let value_xxl_type : int32 = RuntimeType.UNDEFINED
        value_xxl_type = runtimeType(value_xxl)
        valueSerializer.writeInt8(value_xxl_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xxl_type)) {
            const value_xxl_value  = value_xxl!
            valueSerializer.writeNumber(value_xxl_value)
        }
    }
    writeGridContainerOptions(value: GridContainerOptions): void {
        let valueSerializer : Serializer = this
        const value_columns  = value.columns
        let value_columns_type : int32 = RuntimeType.UNDEFINED
        value_columns_type = runtimeType(value_columns)
        valueSerializer.writeInt8(value_columns_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_columns_type)) {
            const value_columns_value  = value_columns!
            let value_columns_value_type : int32 = RuntimeType.UNDEFINED
            value_columns_value_type = runtimeType(value_columns_value)
            if (RuntimeType.NUMBER == value_columns_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_columns_value_0  = value_columns_value as number
                valueSerializer.writeNumber(value_columns_value_0)
            }
            else if (RuntimeType.STRING == value_columns_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_columns_value_1  = value_columns_value as string
                valueSerializer.writeString(value_columns_value_1)
            }
        }
        const value_sizeType  = value.sizeType
        let value_sizeType_type : int32 = RuntimeType.UNDEFINED
        value_sizeType_type = runtimeType(value_sizeType)
        valueSerializer.writeInt8(value_sizeType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_sizeType_type)) {
            const value_sizeType_value  = (value_sizeType as SizeType)
            valueSerializer.writeInt32(TypeChecker.SizeType_ToNumeric(value_sizeType_value))
        }
        const value_gutter  = value.gutter
        let value_gutter_type : int32 = RuntimeType.UNDEFINED
        value_gutter_type = runtimeType(value_gutter)
        valueSerializer.writeInt8(value_gutter_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gutter_type)) {
            const value_gutter_value  = value_gutter!
            let value_gutter_value_type : int32 = RuntimeType.UNDEFINED
            value_gutter_value_type = runtimeType(value_gutter_value)
            if (RuntimeType.NUMBER == value_gutter_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_gutter_value_0  = value_gutter_value as number
                valueSerializer.writeNumber(value_gutter_value_0)
            }
            else if (RuntimeType.STRING == value_gutter_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_gutter_value_1  = value_gutter_value as string
                valueSerializer.writeString(value_gutter_value_1)
            }
        }
        const value_margin  = value.margin
        let value_margin_type : int32 = RuntimeType.UNDEFINED
        value_margin_type = runtimeType(value_margin)
        valueSerializer.writeInt8(value_margin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_margin_type)) {
            const value_margin_value  = value_margin!
            let value_margin_value_type : int32 = RuntimeType.UNDEFINED
            value_margin_value_type = runtimeType(value_margin_value)
            if (RuntimeType.NUMBER == value_margin_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_margin_value_0  = value_margin_value as number
                valueSerializer.writeNumber(value_margin_value_0)
            }
            else if (RuntimeType.STRING == value_margin_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_margin_value_1  = value_margin_value as string
                valueSerializer.writeString(value_margin_value_1)
            }
        }
    }
    writeGridItemOptions(value: GridItemOptions): void {
        let valueSerializer : Serializer = this
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as GridItemStyle)
            valueSerializer.writeInt32(TypeChecker.GridItemStyle_ToNumeric(value_style_value))
        }
    }
    writeGridLayoutOptions(value: GridLayoutOptions): void {
        let valueSerializer : Serializer = this
        const value_regularSize  = value.regularSize
        const value_regularSize_0  = value_regularSize[0]
        valueSerializer.writeNumber(value_regularSize_0)
        const value_regularSize_1  = value_regularSize[1]
        valueSerializer.writeNumber(value_regularSize_1)
        const value_irregularIndexes  = value.irregularIndexes
        let value_irregularIndexes_type : int32 = RuntimeType.UNDEFINED
        value_irregularIndexes_type = runtimeType(value_irregularIndexes)
        valueSerializer.writeInt8(value_irregularIndexes_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_irregularIndexes_type)) {
            const value_irregularIndexes_value  = value_irregularIndexes!
            valueSerializer.writeInt32(value_irregularIndexes_value.length as int32)
            for (let i = 0; i < value_irregularIndexes_value.length; i++) {
                const value_irregularIndexes_value_element : number = value_irregularIndexes_value[i]
                valueSerializer.writeNumber(value_irregularIndexes_value_element)
            }
        }
        const value_onGetIrregularSizeByIndex  = value.onGetIrregularSizeByIndex
        let value_onGetIrregularSizeByIndex_type : int32 = RuntimeType.UNDEFINED
        value_onGetIrregularSizeByIndex_type = runtimeType(value_onGetIrregularSizeByIndex)
        valueSerializer.writeInt8(value_onGetIrregularSizeByIndex_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onGetIrregularSizeByIndex_type)) {
            const value_onGetIrregularSizeByIndex_value  = value_onGetIrregularSizeByIndex!
            valueSerializer.holdAndWriteCallback(value_onGetIrregularSizeByIndex_value)
        }
        const value_onGetRectByIndex  = value.onGetRectByIndex
        let value_onGetRectByIndex_type : int32 = RuntimeType.UNDEFINED
        value_onGetRectByIndex_type = runtimeType(value_onGetRectByIndex)
        valueSerializer.writeInt8(value_onGetRectByIndex_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onGetRectByIndex_type)) {
            const value_onGetRectByIndex_value  = value_onGetRectByIndex!
            valueSerializer.holdAndWriteCallback(value_onGetRectByIndex_value)
        }
    }
    writeGridRowColumnOption(value: GridRowColumnOption): void {
        let valueSerializer : Serializer = this
        const value_xs  = value.xs
        let value_xs_type : int32 = RuntimeType.UNDEFINED
        value_xs_type = runtimeType(value_xs)
        valueSerializer.writeInt8(value_xs_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xs_type)) {
            const value_xs_value  = value_xs!
            valueSerializer.writeNumber(value_xs_value)
        }
        const value_sm  = value.sm
        let value_sm_type : int32 = RuntimeType.UNDEFINED
        value_sm_type = runtimeType(value_sm)
        valueSerializer.writeInt8(value_sm_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_sm_type)) {
            const value_sm_value  = value_sm!
            valueSerializer.writeNumber(value_sm_value)
        }
        const value_md  = value.md
        let value_md_type : int32 = RuntimeType.UNDEFINED
        value_md_type = runtimeType(value_md)
        valueSerializer.writeInt8(value_md_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_md_type)) {
            const value_md_value  = value_md!
            valueSerializer.writeNumber(value_md_value)
        }
        const value_lg  = value.lg
        let value_lg_type : int32 = RuntimeType.UNDEFINED
        value_lg_type = runtimeType(value_lg)
        valueSerializer.writeInt8(value_lg_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lg_type)) {
            const value_lg_value  = value_lg!
            valueSerializer.writeNumber(value_lg_value)
        }
        const value_xl  = value.xl
        let value_xl_type : int32 = RuntimeType.UNDEFINED
        value_xl_type = runtimeType(value_xl)
        valueSerializer.writeInt8(value_xl_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xl_type)) {
            const value_xl_value  = value_xl!
            valueSerializer.writeNumber(value_xl_value)
        }
        const value_xxl  = value.xxl
        let value_xxl_type : int32 = RuntimeType.UNDEFINED
        value_xxl_type = runtimeType(value_xxl)
        valueSerializer.writeInt8(value_xxl_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xxl_type)) {
            const value_xxl_value  = value_xxl!
            valueSerializer.writeNumber(value_xxl_value)
        }
    }
    writeGridRowSizeOption(value: GridRowSizeOption): void {
        let valueSerializer : Serializer = this
        const value_xs  = value.xs
        let value_xs_type : int32 = RuntimeType.UNDEFINED
        value_xs_type = runtimeType(value_xs)
        valueSerializer.writeInt8(value_xs_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xs_type)) {
            const value_xs_value  = value_xs!
            valueSerializer.writeLength(value_xs_value)
        }
        const value_sm  = value.sm
        let value_sm_type : int32 = RuntimeType.UNDEFINED
        value_sm_type = runtimeType(value_sm)
        valueSerializer.writeInt8(value_sm_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_sm_type)) {
            const value_sm_value  = value_sm!
            valueSerializer.writeLength(value_sm_value)
        }
        const value_md  = value.md
        let value_md_type : int32 = RuntimeType.UNDEFINED
        value_md_type = runtimeType(value_md)
        valueSerializer.writeInt8(value_md_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_md_type)) {
            const value_md_value  = value_md!
            valueSerializer.writeLength(value_md_value)
        }
        const value_lg  = value.lg
        let value_lg_type : int32 = RuntimeType.UNDEFINED
        value_lg_type = runtimeType(value_lg)
        valueSerializer.writeInt8(value_lg_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lg_type)) {
            const value_lg_value  = value_lg!
            valueSerializer.writeLength(value_lg_value)
        }
        const value_xl  = value.xl
        let value_xl_type : int32 = RuntimeType.UNDEFINED
        value_xl_type = runtimeType(value_xl)
        valueSerializer.writeInt8(value_xl_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xl_type)) {
            const value_xl_value  = value_xl!
            valueSerializer.writeLength(value_xl_value)
        }
        const value_xxl  = value.xxl
        let value_xxl_type : int32 = RuntimeType.UNDEFINED
        value_xxl_type = runtimeType(value_xxl)
        valueSerializer.writeInt8(value_xxl_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xxl_type)) {
            const value_xxl_value  = value_xxl!
            valueSerializer.writeLength(value_xxl_value)
        }
    }
    writeGuideLinePosition(value: GuideLinePosition): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeLength(value_start_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeLength(value_end_value)
        }
    }
    writeGuideLineStyle(value: GuideLineStyle): void {
        let valueSerializer : Serializer = this
        const value_id  = value.id
        valueSerializer.writeString(value_id)
        const value_direction  = value.direction
        valueSerializer.writeInt32(TypeChecker.Axis_ToNumeric(value_direction))
        const value_position  = value.position
        valueSerializer.writeGuideLinePosition(value_position)
    }
    writeHeader(value: Header): void {
        let valueSerializer : Serializer = this
        const value_headerKey  = value.headerKey
        valueSerializer.writeString(value_headerKey)
        const value_headerValue  = value.headerValue
        valueSerializer.writeString(value_headerValue)
    }
    writeHierarchicalSymbolEffect(value: HierarchicalSymbolEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeHoverEventParam(value: HoverEventParam): void {
        let valueSerializer : Serializer = this
        const value_foldStatus  = value.foldStatus
        valueSerializer.writeInt32(TypeChecker.FoldStatus_ToNumeric(value_foldStatus))
        const value_isHoverMode  = value.isHoverMode
        valueSerializer.writeBoolean(value_isHoverMode)
        const value_appRotation  = value.appRotation
        valueSerializer.writeInt32(TypeChecker.AppRotation_ToNumeric(value_appRotation))
        const value_windowStatusType  = value.windowStatusType
        valueSerializer.writeInt32(TypeChecker.WindowStatusType_ToNumeric(value_windowStatusType))
    }
    writeImageAIOptions(value: ImageAIOptions): void {
        let valueSerializer : Serializer = this
        const value_types  = value.types
        let value_types_type : int32 = RuntimeType.UNDEFINED
        value_types_type = runtimeType(value_types)
        valueSerializer.writeInt8(value_types_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_types_type)) {
            const value_types_value  = value_types!
            valueSerializer.writeInt32(value_types_value.length as int32)
            for (let i = 0; i < value_types_value.length; i++) {
                const value_types_value_element : ImageAnalyzerType = value_types_value[i]
                valueSerializer.writeInt32(TypeChecker.ImageAnalyzerType_ToNumeric(value_types_value_element))
            }
        }
        const value_aiController  = value.aiController
        let value_aiController_type : int32 = RuntimeType.UNDEFINED
        value_aiController_type = runtimeType(value_aiController)
        valueSerializer.writeInt8(value_aiController_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_aiController_type)) {
            const value_aiController_value  = value_aiController!
            valueSerializer.writeImageAnalyzerController(value_aiController_value)
        }
    }
    writeImageAnalyzerConfig(value: ImageAnalyzerConfig): void {
        let valueSerializer : Serializer = this
        const value_types  = value.types
        valueSerializer.writeInt32(value_types.length as int32)
        for (let i = 0; i < value_types.length; i++) {
            const value_types_element : ImageAnalyzerType = value_types[i]
            valueSerializer.writeInt32(TypeChecker.ImageAnalyzerType_ToNumeric(value_types_element))
        }
    }
    writeImageBitmap(value: ImageBitmap): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeImageData(value: ImageData): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeImageError(value: ImageError): void {
        let valueSerializer : Serializer = this
        const value_componentWidth  = value.componentWidth
        valueSerializer.writeNumber(value_componentWidth)
        const value_componentHeight  = value.componentHeight
        valueSerializer.writeNumber(value_componentHeight)
        const value_message  = value.message
        valueSerializer.writeString(value_message)
    }
    writeImageLoadResult(value: ImageLoadResult): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_height  = value.height
        valueSerializer.writeNumber(value_height)
        const value_componentWidth  = value.componentWidth
        valueSerializer.writeNumber(value_componentWidth)
        const value_componentHeight  = value.componentHeight
        valueSerializer.writeNumber(value_componentHeight)
        const value_loadingStatus  = value.loadingStatus
        valueSerializer.writeNumber(value_loadingStatus)
        const value_contentWidth  = value.contentWidth
        valueSerializer.writeNumber(value_contentWidth)
        const value_contentHeight  = value.contentHeight
        valueSerializer.writeNumber(value_contentHeight)
        const value_contentOffsetX  = value.contentOffsetX
        valueSerializer.writeNumber(value_contentOffsetX)
        const value_contentOffsetY  = value.contentOffsetY
        valueSerializer.writeNumber(value_contentOffsetY)
    }
    writeImageSourceSize(value: ImageSourceSize): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_height  = value.height
        valueSerializer.writeNumber(value_height)
    }
    writeImmersiveMode(value: ImmersiveMode): void {
        let valueSerializer : Serializer = this
        const value__ImmersiveModeStub  = value._ImmersiveModeStub
        valueSerializer.writeString(value__ImmersiveModeStub)
    }
    writeInputCounterOptions(value: InputCounterOptions): void {
        let valueSerializer : Serializer = this
        const value_thresholdPercentage  = value.thresholdPercentage
        let value_thresholdPercentage_type : int32 = RuntimeType.UNDEFINED
        value_thresholdPercentage_type = runtimeType(value_thresholdPercentage)
        valueSerializer.writeInt8(value_thresholdPercentage_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_thresholdPercentage_type)) {
            const value_thresholdPercentage_value  = value_thresholdPercentage!
            valueSerializer.writeNumber(value_thresholdPercentage_value)
        }
        const value_highlightBorder  = value.highlightBorder
        let value_highlightBorder_type : int32 = RuntimeType.UNDEFINED
        value_highlightBorder_type = runtimeType(value_highlightBorder)
        valueSerializer.writeInt8(value_highlightBorder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_highlightBorder_type)) {
            const value_highlightBorder_value  = value_highlightBorder!
            valueSerializer.writeBoolean(value_highlightBorder_value)
        }
    }
    writeInsertValue(value: InsertValue): void {
        let valueSerializer : Serializer = this
        const value_insertOffset  = value.insertOffset
        valueSerializer.writeNumber(value_insertOffset)
        const value_insertValue  = value.insertValue
        valueSerializer.writeString(value_insertValue)
    }
    writeIntelligentTrackingPreventionDetails(value: IntelligentTrackingPreventionDetails): void {
        let valueSerializer : Serializer = this
        const value_host  = value.host
        valueSerializer.writeString(value_host)
        const value_trackerHost  = value.trackerHost
        valueSerializer.writeString(value_trackerHost)
    }
    writeInvertOptions(value: InvertOptions): void {
        let valueSerializer : Serializer = this
        const value_low  = value.low
        valueSerializer.writeNumber(value_low)
        const value_high  = value.high
        valueSerializer.writeNumber(value_high)
        const value_threshold  = value.threshold
        valueSerializer.writeNumber(value_threshold)
        const value_thresholdRange  = value.thresholdRange
        valueSerializer.writeNumber(value_thresholdRange)
    }
    writeItemDragInfo(value: ItemDragInfo): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
    }
    writeKeyboardOptions(value: KeyboardOptions): void {
        let valueSerializer : Serializer = this
        const value_supportAvoidance  = value.supportAvoidance
        let value_supportAvoidance_type : int32 = RuntimeType.UNDEFINED
        value_supportAvoidance_type = runtimeType(value_supportAvoidance)
        valueSerializer.writeInt8(value_supportAvoidance_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_supportAvoidance_type)) {
            const value_supportAvoidance_value  = value_supportAvoidance!
            valueSerializer.writeBoolean(value_supportAvoidance_value)
        }
    }
    writeKeyEvent(value: KeyEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLargestContentfulPaint(value: LargestContentfulPaint): void {
        let valueSerializer : Serializer = this
        const value_navigationStartTime  = value.navigationStartTime
        let value_navigationStartTime_type : int32 = RuntimeType.UNDEFINED
        value_navigationStartTime_type = runtimeType(value_navigationStartTime)
        valueSerializer.writeInt8(value_navigationStartTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_navigationStartTime_type)) {
            const value_navigationStartTime_value  = value_navigationStartTime!
            valueSerializer.writeNumber(value_navigationStartTime_value)
        }
        const value_largestImagePaintTime  = value.largestImagePaintTime
        let value_largestImagePaintTime_type : int32 = RuntimeType.UNDEFINED
        value_largestImagePaintTime_type = runtimeType(value_largestImagePaintTime)
        valueSerializer.writeInt8(value_largestImagePaintTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_largestImagePaintTime_type)) {
            const value_largestImagePaintTime_value  = value_largestImagePaintTime!
            valueSerializer.writeNumber(value_largestImagePaintTime_value)
        }
        const value_largestTextPaintTime  = value.largestTextPaintTime
        let value_largestTextPaintTime_type : int32 = RuntimeType.UNDEFINED
        value_largestTextPaintTime_type = runtimeType(value_largestTextPaintTime)
        valueSerializer.writeInt8(value_largestTextPaintTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_largestTextPaintTime_type)) {
            const value_largestTextPaintTime_value  = value_largestTextPaintTime!
            valueSerializer.writeNumber(value_largestTextPaintTime_value)
        }
        const value_imageBPP  = value.imageBPP
        let value_imageBPP_type : int32 = RuntimeType.UNDEFINED
        value_imageBPP_type = runtimeType(value_imageBPP)
        valueSerializer.writeInt8(value_imageBPP_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_imageBPP_type)) {
            const value_imageBPP_value  = value_imageBPP!
            valueSerializer.writeNumber(value_imageBPP_value)
        }
        const value_largestImageLoadStartTime  = value.largestImageLoadStartTime
        let value_largestImageLoadStartTime_type : int32 = RuntimeType.UNDEFINED
        value_largestImageLoadStartTime_type = runtimeType(value_largestImageLoadStartTime)
        valueSerializer.writeInt8(value_largestImageLoadStartTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_largestImageLoadStartTime_type)) {
            const value_largestImageLoadStartTime_value  = value_largestImageLoadStartTime!
            valueSerializer.writeNumber(value_largestImageLoadStartTime_value)
        }
        const value_largestImageLoadEndTime  = value.largestImageLoadEndTime
        let value_largestImageLoadEndTime_type : int32 = RuntimeType.UNDEFINED
        value_largestImageLoadEndTime_type = runtimeType(value_largestImageLoadEndTime)
        valueSerializer.writeInt8(value_largestImageLoadEndTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_largestImageLoadEndTime_type)) {
            const value_largestImageLoadEndTime_value  = value_largestImageLoadEndTime!
            valueSerializer.writeNumber(value_largestImageLoadEndTime_value)
        }
    }
    writeLeadingMarginPlaceholder(value: LeadingMarginPlaceholder): void {
        let valueSerializer : Serializer = this
        const value_pixelMap  = value.pixelMap
        valueSerializer.writePixelMap(value_pixelMap)
        const value_size  = value.size
        const value_size_0  = value_size[0]
        valueSerializer.writeLength(value_size_0)
        const value_size_1  = value_size[1]
        valueSerializer.writeLength(value_size_1)
    }
    writeLengthMetrics(value: LengthMetrics): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLetterSpacingStyle(value: LetterSpacingStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLevelMode(value: LevelMode): void {
        let valueSerializer : Serializer = this
        const value__LevelModeStub  = value._LevelModeStub
        valueSerializer.writeString(value__LevelModeStub)
    }
    writeLevelOrder(value: LevelOrder): void {
        let valueSerializer : Serializer = this
        const value__LevelOrderStub  = value._LevelOrderStub
        valueSerializer.writeString(value__LevelOrderStub)
    }
    writeLinearGradient_common(value: LinearGradient_common): void {
        let valueSerializer : Serializer = this
        const value_angle  = value.angle
        let value_angle_type : int32 = RuntimeType.UNDEFINED
        value_angle_type = runtimeType(value_angle)
        valueSerializer.writeInt8(value_angle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_angle_type)) {
            const value_angle_value  = value_angle!
            let value_angle_value_type : int32 = RuntimeType.UNDEFINED
            value_angle_value_type = runtimeType(value_angle_value)
            if (RuntimeType.NUMBER == value_angle_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_angle_value_0  = value_angle_value as number
                valueSerializer.writeNumber(value_angle_value_0)
            }
            else if (RuntimeType.STRING == value_angle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_angle_value_1  = value_angle_value as string
                valueSerializer.writeString(value_angle_value_1)
            }
        }
        const value_direction  = value.direction
        let value_direction_type : int32 = RuntimeType.UNDEFINED
        value_direction_type = runtimeType(value_direction)
        valueSerializer.writeInt8(value_direction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_direction_type)) {
            const value_direction_value  = (value_direction as GradientDirection)
            valueSerializer.writeInt32(TypeChecker.GradientDirection_ToNumeric(value_direction_value))
        }
        const value_colors  = value.colors
        valueSerializer.writeInt32(value_colors.length as int32)
        for (let i = 0; i < value_colors.length; i++) {
            const value_colors_element : [ ResourceColor, number ] = value_colors[i]
            const value_colors_element_0  = value_colors_element[0]
            let value_colors_element_0_type : int32 = RuntimeType.UNDEFINED
            value_colors_element_0_type = runtimeType(value_colors_element_0)
            if (TypeChecker.isColor(value_colors_element_0)) {
                valueSerializer.writeInt8(0 as int32)
                const value_colors_element_0_0  = value_colors_element_0 as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_colors_element_0_0))
            }
            else if (RuntimeType.NUMBER == value_colors_element_0_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_colors_element_0_1  = value_colors_element_0 as number
                valueSerializer.writeNumber(value_colors_element_0_1)
            }
            else if (RuntimeType.STRING == value_colors_element_0_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_colors_element_0_2  = value_colors_element_0 as string
                valueSerializer.writeString(value_colors_element_0_2)
            }
            else if (RuntimeType.OBJECT == value_colors_element_0_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_colors_element_0_3  = value_colors_element_0 as Resource
                valueSerializer.writeResource(value_colors_element_0_3)
            }
            const value_colors_element_1  = value_colors_element[1]
            valueSerializer.writeNumber(value_colors_element_1)
        }
        const value_repeating  = value.repeating
        let value_repeating_type : int32 = RuntimeType.UNDEFINED
        value_repeating_type = runtimeType(value_repeating)
        valueSerializer.writeInt8(value_repeating_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_repeating_type)) {
            const value_repeating_value  = value_repeating!
            valueSerializer.writeBoolean(value_repeating_value)
        }
    }
    writeLinearGradientBlurOptions(value: LinearGradientBlurOptions): void {
        let valueSerializer : Serializer = this
        const value_fractionStops  = value.fractionStops
        valueSerializer.writeInt32(value_fractionStops.length as int32)
        for (let i = 0; i < value_fractionStops.length; i++) {
            const value_fractionStops_element : FractionStop = value_fractionStops[i]
            const value_fractionStops_element_0  = value_fractionStops_element[0]
            valueSerializer.writeNumber(value_fractionStops_element_0)
            const value_fractionStops_element_1  = value_fractionStops_element[1]
            valueSerializer.writeNumber(value_fractionStops_element_1)
        }
        const value_direction  = value.direction
        valueSerializer.writeInt32(TypeChecker.GradientDirection_ToNumeric(value_direction))
    }
    writeLinearGradientOptions(value: LinearGradientOptions): void {
        let valueSerializer : Serializer = this
        const value_angle  = value.angle
        let value_angle_type : int32 = RuntimeType.UNDEFINED
        value_angle_type = runtimeType(value_angle)
        valueSerializer.writeInt8(value_angle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_angle_type)) {
            const value_angle_value  = value_angle!
            let value_angle_value_type : int32 = RuntimeType.UNDEFINED
            value_angle_value_type = runtimeType(value_angle_value)
            if (RuntimeType.NUMBER == value_angle_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_angle_value_0  = value_angle_value as number
                valueSerializer.writeNumber(value_angle_value_0)
            }
            else if (RuntimeType.STRING == value_angle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_angle_value_1  = value_angle_value as string
                valueSerializer.writeString(value_angle_value_1)
            }
        }
        const value_direction  = value.direction
        let value_direction_type : int32 = RuntimeType.UNDEFINED
        value_direction_type = runtimeType(value_direction)
        valueSerializer.writeInt8(value_direction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_direction_type)) {
            const value_direction_value  = (value_direction as GradientDirection)
            valueSerializer.writeInt32(TypeChecker.GradientDirection_ToNumeric(value_direction_value))
        }
        const value_colors  = value.colors
        valueSerializer.writeInt32(value_colors.length as int32)
        for (let i = 0; i < value_colors.length; i++) {
            const value_colors_element : [ ResourceColor, number ] = value_colors[i]
            const value_colors_element_0  = value_colors_element[0]
            let value_colors_element_0_type : int32 = RuntimeType.UNDEFINED
            value_colors_element_0_type = runtimeType(value_colors_element_0)
            if (TypeChecker.isColor(value_colors_element_0)) {
                valueSerializer.writeInt8(0 as int32)
                const value_colors_element_0_0  = value_colors_element_0 as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_colors_element_0_0))
            }
            else if (RuntimeType.NUMBER == value_colors_element_0_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_colors_element_0_1  = value_colors_element_0 as number
                valueSerializer.writeNumber(value_colors_element_0_1)
            }
            else if (RuntimeType.STRING == value_colors_element_0_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_colors_element_0_2  = value_colors_element_0 as string
                valueSerializer.writeString(value_colors_element_0_2)
            }
            else if (RuntimeType.OBJECT == value_colors_element_0_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_colors_element_0_3  = value_colors_element_0 as Resource
                valueSerializer.writeResource(value_colors_element_0_3)
            }
            const value_colors_element_1  = value_colors_element[1]
            valueSerializer.writeNumber(value_colors_element_1)
        }
        const value_repeating  = value.repeating
        let value_repeating_type : int32 = RuntimeType.UNDEFINED
        value_repeating_type = runtimeType(value_repeating)
        valueSerializer.writeInt8(value_repeating_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_repeating_type)) {
            const value_repeating_value  = value_repeating!
            valueSerializer.writeBoolean(value_repeating_value)
        }
    }
    writeLinearIndicatorStartOptions(value: LinearIndicatorStartOptions): void {
        let valueSerializer : Serializer = this
        const value_interval  = value.interval
        let value_interval_type : int32 = RuntimeType.UNDEFINED
        value_interval_type = runtimeType(value_interval)
        valueSerializer.writeInt8(value_interval_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_interval_type)) {
            const value_interval_value  = value_interval!
            valueSerializer.writeNumber(value_interval_value)
        }
        const value_duration  = value.duration
        let value_duration_type : int32 = RuntimeType.UNDEFINED
        value_duration_type = runtimeType(value_duration)
        valueSerializer.writeInt8(value_duration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_duration_type)) {
            const value_duration_value  = value_duration!
            valueSerializer.writeNumber(value_duration_value)
        }
    }
    writeLineHeightStyle(value: LineHeightStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLineMetrics(value: LineMetrics): void {
        let valueSerializer : Serializer = this
        const value_startIndex  = value.startIndex
        valueSerializer.writeNumber(value_startIndex)
        const value_endIndex  = value.endIndex
        valueSerializer.writeNumber(value_endIndex)
        const value_ascent  = value.ascent
        valueSerializer.writeNumber(value_ascent)
        const value_descent  = value.descent
        valueSerializer.writeNumber(value_descent)
        const value_height  = value.height
        valueSerializer.writeNumber(value_height)
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_left  = value.left
        valueSerializer.writeNumber(value_left)
        const value_baseline  = value.baseline
        valueSerializer.writeNumber(value_baseline)
        const value_lineNumber  = value.lineNumber
        valueSerializer.writeNumber(value_lineNumber)
        const value_topHeight  = value.topHeight
        valueSerializer.writeNumber(value_topHeight)
        const value_runMetrics  = value.runMetrics
        valueSerializer.writeInt32(value_runMetrics.size as int32 as int32)
        for (const pair of value_runMetrics) {
            const value_runMetrics_key = pair[0]
            const value_runMetrics_value = pair[1]
            valueSerializer.writeNumber(value_runMetrics_key)
            valueSerializer.writeRunMetrics(value_runMetrics_value)
        }
    }
    writeLineOptions(value: LineOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as string
                valueSerializer.writeString(value_width_value_0)
            }
            else if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as string
                valueSerializer.writeString(value_height_value_0)
            }
            else if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_1)
            }
        }
    }
    writeListItemGroupOptions(value: ListItemGroupOptions): void {
        let valueSerializer : Serializer = this
        const value_header  = value.header
        let value_header_type : int32 = RuntimeType.UNDEFINED
        value_header_type = runtimeType(value_header)
        valueSerializer.writeInt8(value_header_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_header_type)) {
            const value_header_value  = value_header!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_header_value))
        }
        const value_headerComponent  = value.headerComponent
        let value_headerComponent_type : int32 = RuntimeType.UNDEFINED
        value_headerComponent_type = runtimeType(value_headerComponent)
        valueSerializer.writeInt8(value_headerComponent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_headerComponent_type)) {
            const value_headerComponent_value  = value_headerComponent!
            valueSerializer.writeComponentContent(value_headerComponent_value)
        }
        const value_footer  = value.footer
        let value_footer_type : int32 = RuntimeType.UNDEFINED
        value_footer_type = runtimeType(value_footer)
        valueSerializer.writeInt8(value_footer_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_footer_type)) {
            const value_footer_value  = value_footer!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_footer_value))
        }
        const value_footerComponent  = value.footerComponent
        let value_footerComponent_type : int32 = RuntimeType.UNDEFINED
        value_footerComponent_type = runtimeType(value_footerComponent)
        valueSerializer.writeInt8(value_footerComponent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_footerComponent_type)) {
            const value_footerComponent_value  = value_footerComponent!
            valueSerializer.writeComponentContent(value_footerComponent_value)
        }
        const value_space  = value.space
        let value_space_type : int32 = RuntimeType.UNDEFINED
        value_space_type = runtimeType(value_space)
        valueSerializer.writeInt8(value_space_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_space_type)) {
            const value_space_value  = value_space!
            let value_space_value_type : int32 = RuntimeType.UNDEFINED
            value_space_value_type = runtimeType(value_space_value)
            if (RuntimeType.NUMBER == value_space_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_space_value_0  = value_space_value as number
                valueSerializer.writeNumber(value_space_value_0)
            }
            else if (RuntimeType.STRING == value_space_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_space_value_1  = value_space_value as string
                valueSerializer.writeString(value_space_value_1)
            }
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as ListItemGroupStyle)
            valueSerializer.writeInt32(TypeChecker.ListItemGroupStyle_ToNumeric(value_style_value))
        }
    }
    writeListItemOptions(value: ListItemOptions): void {
        let valueSerializer : Serializer = this
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as ListItemStyle)
            valueSerializer.writeInt32(TypeChecker.ListItemStyle_ToNumeric(value_style_value))
        }
    }
    writeListOptions(value: ListOptions): void {
        let valueSerializer : Serializer = this
        const value_initialIndex  = value.initialIndex
        let value_initialIndex_type : int32 = RuntimeType.UNDEFINED
        value_initialIndex_type = runtimeType(value_initialIndex)
        valueSerializer.writeInt8(value_initialIndex_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_initialIndex_type)) {
            const value_initialIndex_value  = value_initialIndex!
            valueSerializer.writeNumber(value_initialIndex_value)
        }
        const value_space  = value.space
        let value_space_type : int32 = RuntimeType.UNDEFINED
        value_space_type = runtimeType(value_space)
        valueSerializer.writeInt8(value_space_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_space_type)) {
            const value_space_value  = value_space!
            let value_space_value_type : int32 = RuntimeType.UNDEFINED
            value_space_value_type = runtimeType(value_space_value)
            if (RuntimeType.NUMBER == value_space_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_space_value_0  = value_space_value as number
                valueSerializer.writeNumber(value_space_value_0)
            }
            else if (RuntimeType.STRING == value_space_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_space_value_1  = value_space_value as string
                valueSerializer.writeString(value_space_value_1)
            }
        }
        const value_scroller  = value.scroller
        let value_scroller_type : int32 = RuntimeType.UNDEFINED
        value_scroller_type = runtimeType(value_scroller)
        valueSerializer.writeInt8(value_scroller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scroller_type)) {
            const value_scroller_value  = value_scroller!
            valueSerializer.writeScroller(value_scroller_value)
        }
    }
    writeLoadCommittedDetails(value: LoadCommittedDetails): void {
        let valueSerializer : Serializer = this
        const value_isMainFrame  = value.isMainFrame
        valueSerializer.writeBoolean(value_isMainFrame)
        const value_isSameDocument  = value.isSameDocument
        valueSerializer.writeBoolean(value_isSameDocument)
        const value_didReplaceEntry  = value.didReplaceEntry
        valueSerializer.writeBoolean(value_didReplaceEntry)
        const value_navigationType  = value.navigationType
        valueSerializer.writeInt32(TypeChecker.WebNavigationType_ToNumeric(value_navigationType))
        const value_url  = value.url
        valueSerializer.writeString(value_url)
    }
    writeLocalizedBarrierStyle(value: LocalizedBarrierStyle): void {
        let valueSerializer : Serializer = this
        const value_id  = value.id
        valueSerializer.writeString(value_id)
        const value_localizedDirection  = value.localizedDirection
        valueSerializer.writeInt32(TypeChecker.LocalizedBarrierDirection_ToNumeric(value_localizedDirection))
        const value_referencedId  = value.referencedId
        valueSerializer.writeInt32(value_referencedId.length as int32)
        for (let i = 0; i < value_referencedId.length; i++) {
            const value_referencedId_element : string = value_referencedId[i]
            valueSerializer.writeString(value_referencedId_element)
        }
    }
    writeLocalizedHorizontalAlignParam(value: LocalizedHorizontalAlignParam): void {
        let valueSerializer : Serializer = this
        const value_anchor  = value.anchor
        valueSerializer.writeString(value_anchor)
        const value_align  = value.align
        valueSerializer.writeInt32(TypeChecker.HorizontalAlign_ToNumeric(value_align))
    }
    writeLocalizedVerticalAlignParam(value: LocalizedVerticalAlignParam): void {
        let valueSerializer : Serializer = this
        const value_anchor  = value.anchor
        valueSerializer.writeString(value_anchor)
        const value_align  = value.align
        valueSerializer.writeInt32(TypeChecker.VerticalAlign_ToNumeric(value_align))
    }
    writeLocationButtonOptions(value: LocationButtonOptions): void {
        let valueSerializer : Serializer = this
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = (value_icon as LocationIconStyle)
            valueSerializer.writeInt32(TypeChecker.LocationIconStyle_ToNumeric(value_icon_value))
        }
        const value_text  = value.text
        let value_text_type : int32 = RuntimeType.UNDEFINED
        value_text_type = runtimeType(value_text)
        valueSerializer.writeInt8(value_text_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_text_type)) {
            const value_text_value  = (value_text as LocationDescription)
            valueSerializer.writeInt32(TypeChecker.LocationDescription_ToNumeric(value_text_value))
        }
        const value_buttonType  = value.buttonType
        let value_buttonType_type : int32 = RuntimeType.UNDEFINED
        value_buttonType_type = runtimeType(value_buttonType)
        valueSerializer.writeInt8(value_buttonType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_buttonType_type)) {
            const value_buttonType_value  = (value_buttonType as ButtonType)
            valueSerializer.writeInt32(TypeChecker.ButtonType_ToNumeric(value_buttonType_value))
        }
    }
    writeLongPressGestureHandlerOptions(value: LongPressGestureHandlerOptions): void {
        let valueSerializer : Serializer = this
        const value_isFingerCountLimited  = value.isFingerCountLimited
        let value_isFingerCountLimited_type : int32 = RuntimeType.UNDEFINED
        value_isFingerCountLimited_type = runtimeType(value_isFingerCountLimited)
        valueSerializer.writeInt8(value_isFingerCountLimited_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isFingerCountLimited_type)) {
            const value_isFingerCountLimited_value  = value_isFingerCountLimited!
            valueSerializer.writeBoolean(value_isFingerCountLimited_value)
        }
        const value_fingers  = value.fingers
        let value_fingers_type : int32 = RuntimeType.UNDEFINED
        value_fingers_type = runtimeType(value_fingers)
        valueSerializer.writeInt8(value_fingers_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fingers_type)) {
            const value_fingers_value  = value_fingers!
            valueSerializer.writeNumber(value_fingers_value)
        }
        const value_repeat  = value.repeat
        let value_repeat_type : int32 = RuntimeType.UNDEFINED
        value_repeat_type = runtimeType(value_repeat)
        valueSerializer.writeInt8(value_repeat_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_repeat_type)) {
            const value_repeat_value  = value_repeat!
            valueSerializer.writeBoolean(value_repeat_value)
        }
        const value_duration  = value.duration
        let value_duration_type : int32 = RuntimeType.UNDEFINED
        value_duration_type = runtimeType(value_duration)
        valueSerializer.writeInt8(value_duration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_duration_type)) {
            const value_duration_value  = value_duration!
            valueSerializer.writeNumber(value_duration_value)
        }
    }
    writeMarqueeOptions(value: MarqueeOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        valueSerializer.writeBoolean(value_start)
        const value_step  = value.step
        let value_step_type : int32 = RuntimeType.UNDEFINED
        value_step_type = runtimeType(value_step)
        valueSerializer.writeInt8(value_step_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_step_type)) {
            const value_step_value  = value_step!
            valueSerializer.writeNumber(value_step_value)
        }
        const value_loop  = value.loop
        let value_loop_type : int32 = RuntimeType.UNDEFINED
        value_loop_type = runtimeType(value_loop)
        valueSerializer.writeInt8(value_loop_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_loop_type)) {
            const value_loop_value  = value_loop!
            valueSerializer.writeNumber(value_loop_value)
        }
        const value_fromStart  = value.fromStart
        let value_fromStart_type : int32 = RuntimeType.UNDEFINED
        value_fromStart_type = runtimeType(value_fromStart)
        valueSerializer.writeInt8(value_fromStart_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fromStart_type)) {
            const value_fromStart_value  = value_fromStart!
            valueSerializer.writeBoolean(value_fromStart_value)
        }
        const value_src  = value.src
        valueSerializer.writeString(value_src)
    }
    writeMatrix2D(value: Matrix2D): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeMeasurable(value: Measurable): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeMeasureResult(value: MeasureResult): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        valueSerializer.writeNumber(value_width)
        const value_height  = value.height
        valueSerializer.writeNumber(value_height)
    }
    writeMessageEvents(value: MessageEvents): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeString(value_type)
        const value_timeStamp  = value.timeStamp
        valueSerializer.writeInt64(value_timeStamp)
        const value_data  = value.data
        valueSerializer.holdAndWriteObject(value_data)
    }
    writeMonthData(value: MonthData): void {
        let valueSerializer : Serializer = this
        const value_year  = value.year
        valueSerializer.writeNumber(value_year)
        const value_month  = value.month
        valueSerializer.writeNumber(value_month)
        const value_data  = value.data
        valueSerializer.writeInt32(value_data.length as int32)
        for (let i = 0; i < value_data.length; i++) {
            const value_data_element : CalendarDay = value_data[i]
            valueSerializer.writeCalendarDay(value_data_element)
        }
    }
    writeMotionBlurAnchor(value: MotionBlurAnchor): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
    }
    writeMotionBlurOptions(value: MotionBlurOptions): void {
        let valueSerializer : Serializer = this
        const value_radius  = value.radius
        valueSerializer.writeNumber(value_radius)
        const value_anchor  = value.anchor
        valueSerializer.writeMotionBlurAnchor(value_anchor)
    }
    writeMotionPathOptions(value: MotionPathOptions): void {
        let valueSerializer : Serializer = this
        const value_path  = value.path
        valueSerializer.writeString(value_path)
        const value_from  = value.from
        let value_from_type : int32 = RuntimeType.UNDEFINED
        value_from_type = runtimeType(value_from)
        valueSerializer.writeInt8(value_from_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_from_type)) {
            const value_from_value  = value_from!
            valueSerializer.writeNumber(value_from_value)
        }
        const value_to  = value.to
        let value_to_type : int32 = RuntimeType.UNDEFINED
        value_to_type = runtimeType(value_to)
        valueSerializer.writeInt8(value_to_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_to_type)) {
            const value_to_value  = value_to!
            valueSerializer.writeNumber(value_to_value)
        }
        const value_rotatable  = value.rotatable
        let value_rotatable_type : int32 = RuntimeType.UNDEFINED
        value_rotatable_type = runtimeType(value_rotatable)
        valueSerializer.writeInt8(value_rotatable_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_rotatable_type)) {
            const value_rotatable_value  = value_rotatable!
            valueSerializer.writeBoolean(value_rotatable_value)
        }
    }
    writeMutableStyledString(value: MutableStyledString): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeNativeEmbedVisibilityInfo(value: NativeEmbedVisibilityInfo): void {
        let valueSerializer : Serializer = this
        const value_visibility  = value.visibility
        valueSerializer.writeBoolean(value_visibility)
        const value_embedId  = value.embedId
        valueSerializer.writeString(value_embedId)
    }
    writeNavContentInfo(value: NavContentInfo): void {
        let valueSerializer : Serializer = this
        const value_name  = value.name
        let value_name_type : int32 = RuntimeType.UNDEFINED
        value_name_type = runtimeType(value_name)
        valueSerializer.writeInt8(value_name_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_name_type)) {
            const value_name_value  = value_name!
            valueSerializer.writeString(value_name_value)
        }
        const value_index  = value.index
        valueSerializer.writeNumber(value_index)
        const value_mode  = value.mode
        let value_mode_type : int32 = RuntimeType.UNDEFINED
        value_mode_type = runtimeType(value_mode)
        valueSerializer.writeInt8(value_mode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_mode_type)) {
            const value_mode_value  = (value_mode as NavDestinationMode)
            valueSerializer.writeInt32(TypeChecker.NavDestinationMode_ToNumeric(value_mode_value))
        }
        const value_param  = value.param
        let value_param_type : int32 = RuntimeType.UNDEFINED
        value_param_type = runtimeType(value_param)
        valueSerializer.writeInt8(value_param_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_param_type)) {
            const value_param_value  = value_param!
            valueSerializer.holdAndWriteObject(value_param_value)
        }
        const value_navDestinationId  = value.navDestinationId
        let value_navDestinationId_type : int32 = RuntimeType.UNDEFINED
        value_navDestinationId_type = runtimeType(value_navDestinationId)
        valueSerializer.writeInt8(value_navDestinationId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_navDestinationId_type)) {
            const value_navDestinationId_value  = value_navDestinationId!
            valueSerializer.writeString(value_navDestinationId_value)
        }
    }
    writeNavDestinationCustomTitle(value: NavDestinationCustomTitle): void {
        let valueSerializer : Serializer = this
        const value_builder  = value.builder
        valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_builder))
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        if (TypeChecker.isTitleHeight(value_height)) {
            valueSerializer.writeInt8(0 as int32)
            const value_height_0  = value_height as TitleHeight
            valueSerializer.writeInt32(TypeChecker.TitleHeight_ToNumeric(value_height_0))
        }
        else if (((RuntimeType.NUMBER) == (value_height_type)) || ((RuntimeType.STRING) == (value_height_type)) || (((RuntimeType.OBJECT) == (value_height_type)) && (TypeChecker.isResource(value_height, false, false, false, false, false)))) {
            valueSerializer.writeInt8(1 as int32)
            const value_height_1  = value_height as Length
            valueSerializer.writeLength(value_height_1)
        }
    }
    writeNavDestinationTransition(value: NavDestinationTransition): void {
        let valueSerializer : Serializer = this
        const value_onTransitionEnd  = value.onTransitionEnd
        let value_onTransitionEnd_type : int32 = RuntimeType.UNDEFINED
        value_onTransitionEnd_type = runtimeType(value_onTransitionEnd)
        valueSerializer.writeInt8(value_onTransitionEnd_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onTransitionEnd_type)) {
            const value_onTransitionEnd_value  = value_onTransitionEnd!
            valueSerializer.holdAndWriteCallback(value_onTransitionEnd_value)
        }
        const value_duration  = value.duration
        let value_duration_type : int32 = RuntimeType.UNDEFINED
        value_duration_type = runtimeType(value_duration)
        valueSerializer.writeInt8(value_duration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_duration_type)) {
            const value_duration_value  = value_duration!
            valueSerializer.writeNumber(value_duration_value)
        }
        const value_curve  = value.curve
        let value_curve_type : int32 = RuntimeType.UNDEFINED
        value_curve_type = runtimeType(value_curve)
        valueSerializer.writeInt8(value_curve_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_curve_type)) {
            const value_curve_value  = (value_curve as Curve)
            valueSerializer.writeInt32(TypeChecker.Curve_ToNumeric(value_curve_value))
        }
        const value_delay  = value.delay
        let value_delay_type : int32 = RuntimeType.UNDEFINED
        value_delay_type = runtimeType(value_delay)
        valueSerializer.writeInt8(value_delay_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_delay_type)) {
            const value_delay_value  = value_delay!
            valueSerializer.writeNumber(value_delay_value)
        }
        const value_event  = value.event
        valueSerializer.holdAndWriteCallback(value_event)
    }
    writeNavigationAnimatedTransition(value: NavigationAnimatedTransition): void {
        let valueSerializer : Serializer = this
        const value_onTransitionEnd  = value.onTransitionEnd
        let value_onTransitionEnd_type : int32 = RuntimeType.UNDEFINED
        value_onTransitionEnd_type = runtimeType(value_onTransitionEnd)
        valueSerializer.writeInt8(value_onTransitionEnd_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onTransitionEnd_type)) {
            const value_onTransitionEnd_value  = value_onTransitionEnd!
            valueSerializer.holdAndWriteCallback(value_onTransitionEnd_value)
        }
        const value_timeout  = value.timeout
        let value_timeout_type : int32 = RuntimeType.UNDEFINED
        value_timeout_type = runtimeType(value_timeout)
        valueSerializer.writeInt8(value_timeout_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_timeout_type)) {
            const value_timeout_value  = value_timeout!
            valueSerializer.writeNumber(value_timeout_value)
        }
        const value_isInteractive  = value.isInteractive
        let value_isInteractive_type : int32 = RuntimeType.UNDEFINED
        value_isInteractive_type = runtimeType(value_isInteractive)
        valueSerializer.writeInt8(value_isInteractive_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isInteractive_type)) {
            const value_isInteractive_value  = value_isInteractive!
            valueSerializer.writeBoolean(value_isInteractive_value)
        }
        const value_transition  = value.transition
        valueSerializer.holdAndWriteCallback(value_transition)
    }
    writeNavigationCustomTitle(value: NavigationCustomTitle): void {
        let valueSerializer : Serializer = this
        const value_builder  = value.builder
        valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_builder))
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        if (TypeChecker.isTitleHeight(value_height)) {
            valueSerializer.writeInt8(0 as int32)
            const value_height_0  = value_height as TitleHeight
            valueSerializer.writeInt32(TypeChecker.TitleHeight_ToNumeric(value_height_0))
        }
        else if (((RuntimeType.NUMBER) == (value_height_type)) || ((RuntimeType.STRING) == (value_height_type)) || (((RuntimeType.OBJECT) == (value_height_type)) && (TypeChecker.isResource(value_height, false, false, false, false, false)))) {
            valueSerializer.writeInt8(1 as int32)
            const value_height_1  = value_height as Length
            valueSerializer.writeLength(value_height_1)
        }
    }
    writeNavigationInterception(value: NavigationInterception): void {
        let valueSerializer : Serializer = this
        const value_willShow  = value.willShow
        let value_willShow_type : int32 = RuntimeType.UNDEFINED
        value_willShow_type = runtimeType(value_willShow)
        valueSerializer.writeInt8(value_willShow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_willShow_type)) {
            const value_willShow_value  = value_willShow!
            valueSerializer.holdAndWriteCallback(value_willShow_value)
        }
        const value_didShow  = value.didShow
        let value_didShow_type : int32 = RuntimeType.UNDEFINED
        value_didShow_type = runtimeType(value_didShow)
        valueSerializer.writeInt8(value_didShow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_didShow_type)) {
            const value_didShow_value  = value_didShow!
            valueSerializer.holdAndWriteCallback(value_didShow_value)
        }
        const value_modeChange  = value.modeChange
        let value_modeChange_type : int32 = RuntimeType.UNDEFINED
        value_modeChange_type = runtimeType(value_modeChange)
        valueSerializer.writeInt8(value_modeChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_modeChange_type)) {
            const value_modeChange_value  = value_modeChange!
            valueSerializer.holdAndWriteCallback(value_modeChange_value)
        }
    }
    writeNavigationOptions(value: NavigationOptions): void {
        let valueSerializer : Serializer = this
        const value_launchMode  = value.launchMode
        let value_launchMode_type : int32 = RuntimeType.UNDEFINED
        value_launchMode_type = runtimeType(value_launchMode)
        valueSerializer.writeInt8(value_launchMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_launchMode_type)) {
            const value_launchMode_value  = (value_launchMode as LaunchMode)
            valueSerializer.writeInt32(TypeChecker.LaunchMode_ToNumeric(value_launchMode_value))
        }
        const value_animated  = value.animated
        let value_animated_type : int32 = RuntimeType.UNDEFINED
        value_animated_type = runtimeType(value_animated)
        valueSerializer.writeInt8(value_animated_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_animated_type)) {
            const value_animated_value  = value_animated!
            valueSerializer.writeBoolean(value_animated_value)
        }
    }
    writeNavigationTransitionProxy(value: NavigationTransitionProxy): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeNavPathInfo(value: NavPathInfo): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeNestedScrollInfo(value: NestedScrollInfo): void {
        let valueSerializer : Serializer = this
        const value_parent  = value.parent
        valueSerializer.writeScroller(value_parent)
        const value_child  = value.child
        valueSerializer.writeScroller(value_child)
    }
    writeNestedScrollOptionsExt(value: NestedScrollOptionsExt): void {
        let valueSerializer : Serializer = this
        const value_scrollUp  = value.scrollUp
        let value_scrollUp_type : int32 = RuntimeType.UNDEFINED
        value_scrollUp_type = runtimeType(value_scrollUp)
        valueSerializer.writeInt8(value_scrollUp_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scrollUp_type)) {
            const value_scrollUp_value  = (value_scrollUp as NestedScrollMode)
            valueSerializer.writeInt32(TypeChecker.NestedScrollMode_ToNumeric(value_scrollUp_value))
        }
        const value_scrollDown  = value.scrollDown
        let value_scrollDown_type : int32 = RuntimeType.UNDEFINED
        value_scrollDown_type = runtimeType(value_scrollDown)
        valueSerializer.writeInt8(value_scrollDown_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scrollDown_type)) {
            const value_scrollDown_value  = (value_scrollDown as NestedScrollMode)
            valueSerializer.writeInt32(TypeChecker.NestedScrollMode_ToNumeric(value_scrollDown_value))
        }
        const value_scrollRight  = value.scrollRight
        let value_scrollRight_type : int32 = RuntimeType.UNDEFINED
        value_scrollRight_type = runtimeType(value_scrollRight)
        valueSerializer.writeInt8(value_scrollRight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scrollRight_type)) {
            const value_scrollRight_value  = (value_scrollRight as NestedScrollMode)
            valueSerializer.writeInt32(TypeChecker.NestedScrollMode_ToNumeric(value_scrollRight_value))
        }
        const value_scrollLeft  = value.scrollLeft
        let value_scrollLeft_type : int32 = RuntimeType.UNDEFINED
        value_scrollLeft_type = runtimeType(value_scrollLeft)
        valueSerializer.writeInt8(value_scrollLeft_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scrollLeft_type)) {
            const value_scrollLeft_value  = (value_scrollLeft as NestedScrollMode)
            valueSerializer.writeInt32(TypeChecker.NestedScrollMode_ToNumeric(value_scrollLeft_value))
        }
    }
    writeOffsetOptions(value: OffsetOptions): void {
        let valueSerializer : Serializer = this
        const value_xOffset  = value.xOffset
        let value_xOffset_type : int32 = RuntimeType.UNDEFINED
        value_xOffset_type = runtimeType(value_xOffset)
        valueSerializer.writeInt8(value_xOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_xOffset_type)) {
            const value_xOffset_value  = value_xOffset!
            valueSerializer.writeLength(value_xOffset_value)
        }
        const value_yOffset  = value.yOffset
        let value_yOffset_type : int32 = RuntimeType.UNDEFINED
        value_yOffset_type = runtimeType(value_yOffset)
        valueSerializer.writeInt8(value_yOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_yOffset_type)) {
            const value_yOffset_value  = value_yOffset!
            valueSerializer.writeLength(value_yOffset_value)
        }
    }
    writeOnAlertEvent(value: OnAlertEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
        const value_message  = value.message
        valueSerializer.writeString(value_message)
        const value_result  = value.result
        valueSerializer.writeJsResult(value_result)
    }
    writeOnBeforeUnloadEvent(value: OnBeforeUnloadEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
        const value_message  = value.message
        valueSerializer.writeString(value_message)
        const value_result  = value.result
        valueSerializer.writeJsResult(value_result)
    }
    writeOnClientAuthenticationEvent(value: OnClientAuthenticationEvent): void {
        let valueSerializer : Serializer = this
        const value_handler  = value.handler
        valueSerializer.writeClientAuthenticationHandler(value_handler)
        const value_host  = value.host
        valueSerializer.writeString(value_host)
        const value_port  = value.port
        valueSerializer.writeNumber(value_port)
        const value_keyTypes  = value.keyTypes
        valueSerializer.writeInt32(value_keyTypes.length as int32)
        for (let i = 0; i < value_keyTypes.length; i++) {
            const value_keyTypes_element : string = value_keyTypes[i]
            valueSerializer.writeString(value_keyTypes_element)
        }
        const value_issuers  = value.issuers
        valueSerializer.writeInt32(value_issuers.length as int32)
        for (let i = 0; i < value_issuers.length; i++) {
            const value_issuers_element : string = value_issuers[i]
            valueSerializer.writeString(value_issuers_element)
        }
    }
    writeOnConfirmEvent(value: OnConfirmEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
        const value_message  = value.message
        valueSerializer.writeString(value_message)
        const value_result  = value.result
        valueSerializer.writeJsResult(value_result)
    }
    writeOnContextMenuShowEvent(value: OnContextMenuShowEvent): void {
        let valueSerializer : Serializer = this
        const value_param  = value.param
        valueSerializer.writeWebContextMenuParam(value_param)
        const value_result  = value.result
        valueSerializer.writeWebContextMenuResult(value_result)
    }
    writeOnDownloadStartEvent(value: OnDownloadStartEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
        const value_userAgent  = value.userAgent
        valueSerializer.writeString(value_userAgent)
        const value_contentDisposition  = value.contentDisposition
        valueSerializer.writeString(value_contentDisposition)
        const value_mimetype  = value.mimetype
        valueSerializer.writeString(value_mimetype)
        const value_contentLength  = value.contentLength
        valueSerializer.writeNumber(value_contentLength)
    }
    writeOnErrorReceiveEvent(value: OnErrorReceiveEvent): void {
        let valueSerializer : Serializer = this
        const value_request  = value.request
        valueSerializer.writeWebResourceRequest(value_request)
        const value_error  = value.error
        valueSerializer.writeWebResourceError(value_error)
    }
    writeOnFaviconReceivedEvent(value: OnFaviconReceivedEvent): void {
        let valueSerializer : Serializer = this
        const value_favicon  = value.favicon
        valueSerializer.writePixelMap(value_favicon)
    }
    writeOnGeolocationShowEvent(value: OnGeolocationShowEvent): void {
        let valueSerializer : Serializer = this
        const value_origin  = value.origin
        valueSerializer.writeString(value_origin)
        const value_geolocation  = value.geolocation
        valueSerializer.writeJsGeolocation(value_geolocation)
    }
    writeOnHttpAuthRequestEvent(value: OnHttpAuthRequestEvent): void {
        let valueSerializer : Serializer = this
        const value_handler  = value.handler
        valueSerializer.writeHttpAuthHandler(value_handler)
        const value_host  = value.host
        valueSerializer.writeString(value_host)
        const value_realm  = value.realm
        valueSerializer.writeString(value_realm)
    }
    writeOnHttpErrorReceiveEvent(value: OnHttpErrorReceiveEvent): void {
        let valueSerializer : Serializer = this
        const value_request  = value.request
        valueSerializer.writeWebResourceRequest(value_request)
        const value_response  = value.response
        valueSerializer.writeWebResourceResponse(value_response)
    }
    writeOnInterceptRequestEvent(value: OnInterceptRequestEvent): void {
        let valueSerializer : Serializer = this
        const value_request  = value.request
        valueSerializer.writeWebResourceRequest(value_request)
    }
    writeOnLoadInterceptEvent(value: OnLoadInterceptEvent): void {
        let valueSerializer : Serializer = this
        const value_data  = value.data
        valueSerializer.writeWebResourceRequest(value_data)
    }
    writeOnPageBeginEvent(value: OnPageBeginEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
    }
    writeOnPageEndEvent(value: OnPageEndEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
    }
    writeOnPageVisibleEvent(value: OnPageVisibleEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
    }
    writeOnPermissionRequestEvent(value: OnPermissionRequestEvent): void {
        let valueSerializer : Serializer = this
        const value_request  = value.request
        valueSerializer.writePermissionRequest(value_request)
    }
    writeOnPromptEvent(value: OnPromptEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
        const value_message  = value.message
        valueSerializer.writeString(value_message)
        const value_value  = value.value
        valueSerializer.writeString(value_value)
        const value_result  = value.result
        valueSerializer.writeJsResult(value_result)
    }
    writeOnRefreshAccessedHistoryEvent(value: OnRefreshAccessedHistoryEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
        const value_isRefreshed  = value.isRefreshed
        valueSerializer.writeBoolean(value_isRefreshed)
    }
    writeOnRenderExitedEvent(value: OnRenderExitedEvent): void {
        let valueSerializer : Serializer = this
        const value_renderExitReason  = value.renderExitReason
        valueSerializer.writeInt32(TypeChecker.RenderExitReason_ToNumeric(value_renderExitReason))
    }
    writeOnResourceLoadEvent(value: OnResourceLoadEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
    }
    writeOnScreenCaptureRequestEvent(value: OnScreenCaptureRequestEvent): void {
        let valueSerializer : Serializer = this
        const value_handler  = value.handler
        valueSerializer.writeScreenCaptureHandler(value_handler)
    }
    writeOnSslErrorEventReceiveEvent(value: OnSslErrorEventReceiveEvent): void {
        let valueSerializer : Serializer = this
        const value_handler  = value.handler
        valueSerializer.writeSslErrorHandler(value_handler)
        const value_error  = value.error
        valueSerializer.writeInt32(TypeChecker.SslError_ToNumeric(value_error))
        const value_certChainData  = value.certChainData
        let value_certChainData_type : int32 = RuntimeType.UNDEFINED
        value_certChainData_type = runtimeType(value_certChainData)
        valueSerializer.writeInt8(value_certChainData_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_certChainData_type)) {
            const value_certChainData_value  = value_certChainData!
            valueSerializer.writeInt32(value_certChainData_value.length as int32)
            for (let i = 0; i < value_certChainData_value.length; i++) {
                const value_certChainData_value_element : NativeBuffer = value_certChainData_value[i]
                valueSerializer.writeBuffer(value_certChainData_value_element)
            }
        }
    }
    writeOnTitleReceiveEvent(value: OnTitleReceiveEvent): void {
        let valueSerializer : Serializer = this
        const value_title  = value.title
        valueSerializer.writeString(value_title)
    }
    writeOnTouchIconUrlReceivedEvent(value: OnTouchIconUrlReceivedEvent): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        valueSerializer.writeString(value_url)
        const value_precomposed  = value.precomposed
        valueSerializer.writeBoolean(value_precomposed)
    }
    writeOnWindowNewEvent(value: OnWindowNewEvent): void {
        let valueSerializer : Serializer = this
        const value_isAlert  = value.isAlert
        valueSerializer.writeBoolean(value_isAlert)
        const value_isUserTrigger  = value.isUserTrigger
        valueSerializer.writeBoolean(value_isUserTrigger)
        const value_targetUrl  = value.targetUrl
        valueSerializer.writeString(value_targetUrl)
        const value_handler  = value.handler
        valueSerializer.writeControllerHandler(value_handler)
    }
    writeOrientation(value: Orientation): void {
        let valueSerializer : Serializer = this
        const value__OrientationStub  = value._OrientationStub
        valueSerializer.writeString(value__OrientationStub)
    }
    writeOutlineRadiuses(value: OutlineRadiuses): void {
        let valueSerializer : Serializer = this
        const value_topLeft  = value.topLeft
        let value_topLeft_type : int32 = RuntimeType.UNDEFINED
        value_topLeft_type = runtimeType(value_topLeft)
        valueSerializer.writeInt8(value_topLeft_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_topLeft_type)) {
            const value_topLeft_value  = value_topLeft!
            valueSerializer.writeLength(value_topLeft_value)
        }
        const value_topRight  = value.topRight
        let value_topRight_type : int32 = RuntimeType.UNDEFINED
        value_topRight_type = runtimeType(value_topRight)
        valueSerializer.writeInt8(value_topRight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_topRight_type)) {
            const value_topRight_value  = value_topRight!
            valueSerializer.writeLength(value_topRight_value)
        }
        const value_bottomLeft  = value.bottomLeft
        let value_bottomLeft_type : int32 = RuntimeType.UNDEFINED
        value_bottomLeft_type = runtimeType(value_bottomLeft)
        valueSerializer.writeInt8(value_bottomLeft_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottomLeft_type)) {
            const value_bottomLeft_value  = value_bottomLeft!
            valueSerializer.writeLength(value_bottomLeft_value)
        }
        const value_bottomRight  = value.bottomRight
        let value_bottomRight_type : int32 = RuntimeType.UNDEFINED
        value_bottomRight_type = runtimeType(value_bottomRight)
        valueSerializer.writeInt8(value_bottomRight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottomRight_type)) {
            const value_bottomRight_value  = value_bottomRight!
            valueSerializer.writeLength(value_bottomRight_value)
        }
    }
    writeOverlayOffset(value: OverlayOffset): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            valueSerializer.writeNumber(value_x_value)
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            valueSerializer.writeNumber(value_y_value)
        }
    }
    writePadding(value: Padding): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLength(value_top_value)
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            valueSerializer.writeLength(value_right_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLength(value_bottom_value)
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            valueSerializer.writeLength(value_left_value)
        }
    }
    writePanGestureHandlerOptions(value: PanGestureHandlerOptions): void {
        let valueSerializer : Serializer = this
        const value_isFingerCountLimited  = value.isFingerCountLimited
        let value_isFingerCountLimited_type : int32 = RuntimeType.UNDEFINED
        value_isFingerCountLimited_type = runtimeType(value_isFingerCountLimited)
        valueSerializer.writeInt8(value_isFingerCountLimited_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isFingerCountLimited_type)) {
            const value_isFingerCountLimited_value  = value_isFingerCountLimited!
            valueSerializer.writeBoolean(value_isFingerCountLimited_value)
        }
        const value_fingers  = value.fingers
        let value_fingers_type : int32 = RuntimeType.UNDEFINED
        value_fingers_type = runtimeType(value_fingers)
        valueSerializer.writeInt8(value_fingers_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fingers_type)) {
            const value_fingers_value  = value_fingers!
            valueSerializer.writeNumber(value_fingers_value)
        }
        const value_direction  = value.direction
        let value_direction_type : int32 = RuntimeType.UNDEFINED
        value_direction_type = runtimeType(value_direction)
        valueSerializer.writeInt8(value_direction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_direction_type)) {
            const value_direction_value  = (value_direction as PanDirection)
            valueSerializer.writeInt32(TypeChecker.PanDirection_ToNumeric(value_direction_value))
        }
        const value_distance  = value.distance
        let value_distance_type : int32 = RuntimeType.UNDEFINED
        value_distance_type = runtimeType(value_distance)
        valueSerializer.writeInt8(value_distance_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_distance_type)) {
            const value_distance_value  = value_distance!
            valueSerializer.writeNumber(value_distance_value)
        }
    }
    writePasteButtonOptions(value: PasteButtonOptions): void {
        let valueSerializer : Serializer = this
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = (value_icon as PasteIconStyle)
            valueSerializer.writeInt32(TypeChecker.PasteIconStyle_ToNumeric(value_icon_value))
        }
        const value_text  = value.text
        let value_text_type : int32 = RuntimeType.UNDEFINED
        value_text_type = runtimeType(value_text)
        valueSerializer.writeInt8(value_text_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_text_type)) {
            const value_text_value  = (value_text as PasteDescription)
            valueSerializer.writeInt32(TypeChecker.PasteDescription_ToNumeric(value_text_value))
        }
        const value_buttonType  = value.buttonType
        let value_buttonType_type : int32 = RuntimeType.UNDEFINED
        value_buttonType_type = runtimeType(value_buttonType)
        valueSerializer.writeInt8(value_buttonType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_buttonType_type)) {
            const value_buttonType_value  = (value_buttonType as ButtonType)
            valueSerializer.writeInt32(TypeChecker.ButtonType_ToNumeric(value_buttonType_value))
        }
    }
    writePasteEvent(value: PasteEvent): void {
        let valueSerializer : Serializer = this
        const value_preventDefault  = value.preventDefault
        let value_preventDefault_type : int32 = RuntimeType.UNDEFINED
        value_preventDefault_type = runtimeType(value_preventDefault)
        valueSerializer.writeInt8(value_preventDefault_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_preventDefault_type)) {
            const value_preventDefault_value  = value_preventDefault!
            valueSerializer.holdAndWriteCallback(value_preventDefault_value)
        }
    }
    writePathOptions(value: PathOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_0)
            }
            else if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as string
                valueSerializer.writeString(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_0)
            }
            else if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as string
                valueSerializer.writeString(value_height_value_1)
            }
        }
        const value_commands  = value.commands
        let value_commands_type : int32 = RuntimeType.UNDEFINED
        value_commands_type = runtimeType(value_commands)
        valueSerializer.writeInt8(value_commands_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_commands_type)) {
            const value_commands_value  = value_commands!
            valueSerializer.writeString(value_commands_value)
        }
    }
    writePathShapeOptions(value: PathShapeOptions): void {
        let valueSerializer : Serializer = this
        const value_commands  = value.commands
        let value_commands_type : int32 = RuntimeType.UNDEFINED
        value_commands_type = runtimeType(value_commands)
        valueSerializer.writeInt8(value_commands_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_commands_type)) {
            const value_commands_value  = value_commands!
            valueSerializer.writeString(value_commands_value)
        }
    }
    writePinchGestureHandlerOptions(value: PinchGestureHandlerOptions): void {
        let valueSerializer : Serializer = this
        const value_isFingerCountLimited  = value.isFingerCountLimited
        let value_isFingerCountLimited_type : int32 = RuntimeType.UNDEFINED
        value_isFingerCountLimited_type = runtimeType(value_isFingerCountLimited)
        valueSerializer.writeInt8(value_isFingerCountLimited_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isFingerCountLimited_type)) {
            const value_isFingerCountLimited_value  = value_isFingerCountLimited!
            valueSerializer.writeBoolean(value_isFingerCountLimited_value)
        }
        const value_fingers  = value.fingers
        let value_fingers_type : int32 = RuntimeType.UNDEFINED
        value_fingers_type = runtimeType(value_fingers)
        valueSerializer.writeInt8(value_fingers_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fingers_type)) {
            const value_fingers_value  = value_fingers!
            valueSerializer.writeNumber(value_fingers_value)
        }
        const value_distance  = value.distance
        let value_distance_type : int32 = RuntimeType.UNDEFINED
        value_distance_type = runtimeType(value_distance)
        valueSerializer.writeInt8(value_distance_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_distance_type)) {
            const value_distance_value  = value_distance!
            valueSerializer.writeNumber(value_distance_value)
        }
    }
    writePixelRoundPolicy(value: PixelRoundPolicy): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = (value_start as PixelRoundCalcPolicy)
            valueSerializer.writeInt32(TypeChecker.PixelRoundCalcPolicy_ToNumeric(value_start_value))
        }
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = (value_top as PixelRoundCalcPolicy)
            valueSerializer.writeInt32(TypeChecker.PixelRoundCalcPolicy_ToNumeric(value_top_value))
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = (value_end as PixelRoundCalcPolicy)
            valueSerializer.writeInt32(TypeChecker.PixelRoundCalcPolicy_ToNumeric(value_end_value))
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = (value_bottom as PixelRoundCalcPolicy)
            valueSerializer.writeInt32(TypeChecker.PixelRoundCalcPolicy_ToNumeric(value_bottom_value))
        }
    }
    writePixelStretchEffectOptions(value: PixelStretchEffectOptions): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLength(value_top_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLength(value_bottom_value)
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            valueSerializer.writeLength(value_left_value)
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            valueSerializer.writeLength(value_right_value)
        }
    }
    writePluginComponentTemplate(value: PluginComponentTemplate): void {
        let valueSerializer : Serializer = this
        const value_source  = value.source
        valueSerializer.writeString(value_source)
        const value_bundleName  = value.bundleName
        valueSerializer.writeString(value_bundleName)
    }
    writePluginErrorData(value: PluginErrorData): void {
        let valueSerializer : Serializer = this
        const value_errcode  = value.errcode
        valueSerializer.writeNumber(value_errcode)
        const value_msg  = value.msg
        valueSerializer.writeString(value_msg)
    }
    writePolygonOptions(value: PolygonOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as string
                valueSerializer.writeString(value_width_value_0)
            }
            else if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as string
                valueSerializer.writeString(value_height_value_0)
            }
            else if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_1)
            }
        }
    }
    writePolylineOptions(value: PolylineOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as string
                valueSerializer.writeString(value_width_value_0)
            }
            else if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as string
                valueSerializer.writeString(value_height_value_0)
            }
            else if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_1)
            }
        }
    }
    writePolyToPolyOptions(value: PolyToPolyOptions): void {
        let valueSerializer : Serializer = this
        const value_src  = value.src
        valueSerializer.writeInt32(value_src.length as int32)
        for (let i = 0; i < value_src.length; i++) {
            const value_src_element : Point = value_src[i]
            valueSerializer.writePoint(value_src_element)
        }
        const value_srcIndex  = value.srcIndex
        let value_srcIndex_type : int32 = RuntimeType.UNDEFINED
        value_srcIndex_type = runtimeType(value_srcIndex)
        valueSerializer.writeInt8(value_srcIndex_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_srcIndex_type)) {
            const value_srcIndex_value  = value_srcIndex!
            valueSerializer.writeNumber(value_srcIndex_value)
        }
        const value_dst  = value.dst
        valueSerializer.writeInt32(value_dst.length as int32)
        for (let i = 0; i < value_dst.length; i++) {
            const value_dst_element : Point = value_dst[i]
            valueSerializer.writePoint(value_dst_element)
        }
        const value_dstIndex  = value.dstIndex
        let value_dstIndex_type : int32 = RuntimeType.UNDEFINED
        value_dstIndex_type = runtimeType(value_dstIndex)
        valueSerializer.writeInt8(value_dstIndex_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dstIndex_type)) {
            const value_dstIndex_value  = value_dstIndex!
            valueSerializer.writeNumber(value_dstIndex_value)
        }
        const value_pointCount  = value.pointCount
        let value_pointCount_type : int32 = RuntimeType.UNDEFINED
        value_pointCount_type = runtimeType(value_pointCount)
        valueSerializer.writeInt8(value_pointCount_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_pointCount_type)) {
            const value_pointCount_value  = value_pointCount!
            valueSerializer.writeNumber(value_pointCount_value)
        }
    }
    writePopInfo(value: PopInfo): void {
        let valueSerializer : Serializer = this
        const value_info  = value.info
        valueSerializer.writeNavPathInfo(value_info)
        const value_result  = value.result
        valueSerializer.holdAndWriteObject(value_result)
    }
    writePosition(value: Position): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            valueSerializer.writeLength(value_x_value)
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            valueSerializer.writeLength(value_y_value)
        }
    }
    writeGraphicsPosition(value: GraphicsPosition): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            valueSerializer.writeLength(value_x_value)
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            valueSerializer.writeLength(value_y_value)
        }
    }
    writePosterOptions(value: PosterOptions): void {
        let valueSerializer : Serializer = this
        const value_showFirstFrame  = value.showFirstFrame
        let value_showFirstFrame_type : int32 = RuntimeType.UNDEFINED
        value_showFirstFrame_type = runtimeType(value_showFirstFrame)
        valueSerializer.writeInt8(value_showFirstFrame_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showFirstFrame_type)) {
            const value_showFirstFrame_value  = value_showFirstFrame!
            valueSerializer.writeBoolean(value_showFirstFrame_value)
        }
    }
    writePostMessageOptions(value: PostMessageOptions): void {
        let valueSerializer : Serializer = this
        const value_transfer  = value.transfer
        let value_transfer_type : int32 = RuntimeType.UNDEFINED
        value_transfer_type = runtimeType(value_transfer)
        valueSerializer.writeInt8(value_transfer_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transfer_type)) {
            const value_transfer_value  = value_transfer!
            valueSerializer.writeInt32(value_transfer_value.length as int32)
            for (let i = 0; i < value_transfer_value.length; i++) {
                const value_transfer_value_element : Object = value_transfer_value[i]
                valueSerializer.holdAndWriteObject(value_transfer_value_element)
            }
        }
    }
    writePreviewConfiguration(value: PreviewConfiguration): void {
        let valueSerializer : Serializer = this
        const value_onlyForLifting  = value.onlyForLifting
        let value_onlyForLifting_type : int32 = RuntimeType.UNDEFINED
        value_onlyForLifting_type = runtimeType(value_onlyForLifting)
        valueSerializer.writeInt8(value_onlyForLifting_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onlyForLifting_type)) {
            const value_onlyForLifting_value  = value_onlyForLifting!
            valueSerializer.writeBoolean(value_onlyForLifting_value)
        }
        const value_delayCreating  = value.delayCreating
        let value_delayCreating_type : int32 = RuntimeType.UNDEFINED
        value_delayCreating_type = runtimeType(value_delayCreating)
        valueSerializer.writeInt8(value_delayCreating_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_delayCreating_type)) {
            const value_delayCreating_value  = value_delayCreating!
            valueSerializer.writeBoolean(value_delayCreating_value)
        }
    }
    writePreviewMenuOptions(value: PreviewMenuOptions): void {
        let valueSerializer : Serializer = this
        const value_hapticFeedbackMode  = value.hapticFeedbackMode
        let value_hapticFeedbackMode_type : int32 = RuntimeType.UNDEFINED
        value_hapticFeedbackMode_type = runtimeType(value_hapticFeedbackMode)
        valueSerializer.writeInt8(value_hapticFeedbackMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hapticFeedbackMode_type)) {
            const value_hapticFeedbackMode_value  = (value_hapticFeedbackMode as HapticFeedbackMode)
            valueSerializer.writeInt32(TypeChecker.HapticFeedbackMode_ToNumeric(value_hapticFeedbackMode_value))
        }
    }
    writePreviewText(value: PreviewText): void {
        let valueSerializer : Serializer = this
        const value_offset  = value.offset
        valueSerializer.writeNumber(value_offset)
        const value_value  = value.value
        valueSerializer.writeString(value_value)
    }
    writeProgressOptions(value: ProgressOptions): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        valueSerializer.writeNumber(value_value)
        const value_total  = value.total
        let value_total_type : int32 = RuntimeType.UNDEFINED
        value_total_type = runtimeType(value_total)
        valueSerializer.writeInt8(value_total_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_total_type)) {
            const value_total_value  = value_total!
            valueSerializer.writeNumber(value_total_value)
        }
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = (value_type as ProgressType)
            valueSerializer.writeInt32(TypeChecker.ProgressType_ToNumeric(value_type_value))
        }
    }
    writeProgressStyleOptions(value: ProgressStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_enableSmoothEffect  = value.enableSmoothEffect
        let value_enableSmoothEffect_type : int32 = RuntimeType.UNDEFINED
        value_enableSmoothEffect_type = runtimeType(value_enableSmoothEffect)
        valueSerializer.writeInt8(value_enableSmoothEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableSmoothEffect_type)) {
            const value_enableSmoothEffect_value  = value_enableSmoothEffect!
            valueSerializer.writeBoolean(value_enableSmoothEffect_value)
        }
        const value_strokeWidth  = value.strokeWidth
        let value_strokeWidth_type : int32 = RuntimeType.UNDEFINED
        value_strokeWidth_type = runtimeType(value_strokeWidth)
        valueSerializer.writeInt8(value_strokeWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeWidth_type)) {
            const value_strokeWidth_value  = value_strokeWidth!
            valueSerializer.writeLength(value_strokeWidth_value)
        }
        const value_scaleCount  = value.scaleCount
        let value_scaleCount_type : int32 = RuntimeType.UNDEFINED
        value_scaleCount_type = runtimeType(value_scaleCount)
        valueSerializer.writeInt8(value_scaleCount_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scaleCount_type)) {
            const value_scaleCount_value  = value_scaleCount!
            valueSerializer.writeNumber(value_scaleCount_value)
        }
        const value_scaleWidth  = value.scaleWidth
        let value_scaleWidth_type : int32 = RuntimeType.UNDEFINED
        value_scaleWidth_type = runtimeType(value_scaleWidth)
        valueSerializer.writeInt8(value_scaleWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scaleWidth_type)) {
            const value_scaleWidth_value  = value_scaleWidth!
            valueSerializer.writeLength(value_scaleWidth_value)
        }
    }
    writeRadialGradientOptions(value: RadialGradientOptions): void {
        let valueSerializer : Serializer = this
        const value_center  = value.center
        const value_center_0  = value_center[0]
        valueSerializer.writeLength(value_center_0)
        const value_center_1  = value_center[1]
        valueSerializer.writeLength(value_center_1)
        const value_radius  = value.radius
        valueSerializer.writeLength(value_radius)
        const value_colors  = value.colors
        valueSerializer.writeInt32(value_colors.length as int32)
        for (let i = 0; i < value_colors.length; i++) {
            const value_colors_element : [ ResourceColor, number ] = value_colors[i]
            const value_colors_element_0  = value_colors_element[0]
            let value_colors_element_0_type : int32 = RuntimeType.UNDEFINED
            value_colors_element_0_type = runtimeType(value_colors_element_0)
            if (TypeChecker.isColor(value_colors_element_0)) {
                valueSerializer.writeInt8(0 as int32)
                const value_colors_element_0_0  = value_colors_element_0 as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_colors_element_0_0))
            }
            else if (RuntimeType.NUMBER == value_colors_element_0_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_colors_element_0_1  = value_colors_element_0 as number
                valueSerializer.writeNumber(value_colors_element_0_1)
            }
            else if (RuntimeType.STRING == value_colors_element_0_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_colors_element_0_2  = value_colors_element_0 as string
                valueSerializer.writeString(value_colors_element_0_2)
            }
            else if (RuntimeType.OBJECT == value_colors_element_0_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_colors_element_0_3  = value_colors_element_0 as Resource
                valueSerializer.writeResource(value_colors_element_0_3)
            }
            const value_colors_element_1  = value_colors_element[1]
            valueSerializer.writeNumber(value_colors_element_1)
        }
        const value_repeating  = value.repeating
        let value_repeating_type : int32 = RuntimeType.UNDEFINED
        value_repeating_type = runtimeType(value_repeating)
        valueSerializer.writeInt8(value_repeating_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_repeating_type)) {
            const value_repeating_value  = value_repeating!
            valueSerializer.writeBoolean(value_repeating_value)
        }
    }
    writeRadioOptions(value: RadioOptions): void {
        let valueSerializer : Serializer = this
        const value_group  = value.group
        valueSerializer.writeString(value_group)
        const value_value  = value.value
        valueSerializer.writeString(value_value)
        const value_indicatorType  = value.indicatorType
        let value_indicatorType_type : int32 = RuntimeType.UNDEFINED
        value_indicatorType_type = runtimeType(value_indicatorType)
        valueSerializer.writeInt8(value_indicatorType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_indicatorType_type)) {
            const value_indicatorType_value  = (value_indicatorType as RadioIndicatorType)
            valueSerializer.writeInt32(TypeChecker.RadioIndicatorType_ToNumeric(value_indicatorType_value))
        }
        const value_indicatorBuilder  = value.indicatorBuilder
        let value_indicatorBuilder_type : int32 = RuntimeType.UNDEFINED
        value_indicatorBuilder_type = runtimeType(value_indicatorBuilder)
        valueSerializer.writeInt8(value_indicatorBuilder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_indicatorBuilder_type)) {
            const value_indicatorBuilder_value  = value_indicatorBuilder!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_indicatorBuilder_value))
        }
    }
    writeRatingOptions(value: RatingOptions): void {
        let valueSerializer : Serializer = this
        const value_rating  = value.rating
        valueSerializer.writeNumber(value_rating)
        const value_indicator  = value.indicator
        let value_indicator_type : int32 = RuntimeType.UNDEFINED
        value_indicator_type = runtimeType(value_indicator)
        valueSerializer.writeInt8(value_indicator_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_indicator_type)) {
            const value_indicator_value  = value_indicator!
            valueSerializer.writeBoolean(value_indicator_value)
        }
    }
    writeRectangle(value: Rectangle): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            valueSerializer.writeLength(value_x_value)
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            valueSerializer.writeLength(value_y_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeLength(value_height_value)
        }
    }
    writeRenderingContextSettings(value: RenderingContextSettings): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeRenderNode(value: RenderNode): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeRenderProcessNotRespondingData(value: RenderProcessNotRespondingData): void {
        let valueSerializer : Serializer = this
        const value_jsStack  = value.jsStack
        valueSerializer.writeString(value_jsStack)
        const value_pid  = value.pid
        valueSerializer.writeNumber(value_pid)
        const value_reason  = value.reason
        valueSerializer.writeInt32(TypeChecker.RenderProcessNotRespondingReason_ToNumeric(value_reason))
    }
    writeReplaceSymbolEffect(value: ReplaceSymbolEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeResource(value: Resource): void {
        let valueSerializer : Serializer = this
        const value_bundleName  = value.bundleName
        valueSerializer.writeString(value_bundleName)
        const value_moduleName  = value.moduleName
        valueSerializer.writeString(value_moduleName)
        const value_id  = value.id
        valueSerializer.writeNumber(value_id)
        const value_params  = value.params
        let value_params_type : int32 = RuntimeType.UNDEFINED
        value_params_type = runtimeType(value_params)
        valueSerializer.writeInt8(value_params_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_params_type)) {
            const value_params_value  = value_params!
            valueSerializer.writeInt32(value_params_value.length as int32)
            for (let i = 0; i < value_params_value.length; i++) {
                valueSerializer.writeString(String(value_params_value[i]))
            }
        }
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = value_type!
            valueSerializer.writeNumber(value_type_value)
        }
    }
    writeRichEditorDeleteValue(value: RichEditorDeleteValue): void {
        let valueSerializer : Serializer = this
        const value_offset  = value.offset
        valueSerializer.writeNumber(value_offset)
        const value_direction  = value.direction
        valueSerializer.writeInt32(TypeChecker.RichEditorDeleteDirection_ToNumeric(value_direction))
        const value_length  = value.length
        valueSerializer.writeNumber(value_length)
        const value_richEditorDeleteSpans  = value.richEditorDeleteSpans
        valueSerializer.writeInt32(value_richEditorDeleteSpans.length as int32)
        for (let i = 0; i < value_richEditorDeleteSpans.length; i++) {
            const value_richEditorDeleteSpans_element : RichEditorTextSpanResult | RichEditorImageSpanResult = value_richEditorDeleteSpans[i]
            let value_richEditorDeleteSpans_element_type : int32 = RuntimeType.UNDEFINED
            value_richEditorDeleteSpans_element_type = runtimeType(value_richEditorDeleteSpans_element)
            if (TypeChecker.isRichEditorTextSpanResult(value_richEditorDeleteSpans_element, true, false, false, true, false, false, false, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_richEditorDeleteSpans_element_0  = value_richEditorDeleteSpans_element as RichEditorTextSpanResult
                valueSerializer.writeRichEditorTextSpanResult(value_richEditorDeleteSpans_element_0)
            }
            else if (TypeChecker.isRichEditorImageSpanResult(value_richEditorDeleteSpans_element, true, false, false, false, true)) {
                valueSerializer.writeInt8(1 as int32)
                const value_richEditorDeleteSpans_element_1  = value_richEditorDeleteSpans_element as RichEditorImageSpanResult
                valueSerializer.writeRichEditorImageSpanResult(value_richEditorDeleteSpans_element_1)
            }
        }
    }
    writeRichEditorGesture(value: RichEditorGesture): void {
        let valueSerializer : Serializer = this
        const value_onClick  = value.onClick
        let value_onClick_type : int32 = RuntimeType.UNDEFINED
        value_onClick_type = runtimeType(value_onClick)
        valueSerializer.writeInt8(value_onClick_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onClick_type)) {
            const value_onClick_value  = value_onClick!
            valueSerializer.holdAndWriteCallback(value_onClick_value)
        }
        const value_onLongPress  = value.onLongPress
        let value_onLongPress_type : int32 = RuntimeType.UNDEFINED
        value_onLongPress_type = runtimeType(value_onLongPress)
        valueSerializer.writeInt8(value_onLongPress_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onLongPress_type)) {
            const value_onLongPress_value  = value_onLongPress!
            valueSerializer.holdAndWriteCallback(value_onLongPress_value)
        }
        const value_onDoubleClick  = value.onDoubleClick
        let value_onDoubleClick_type : int32 = RuntimeType.UNDEFINED
        value_onDoubleClick_type = runtimeType(value_onDoubleClick)
        valueSerializer.writeInt8(value_onDoubleClick_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDoubleClick_type)) {
            const value_onDoubleClick_value  = value_onDoubleClick!
            valueSerializer.holdAndWriteCallback(value_onDoubleClick_value)
        }
    }
    writeRichEditorInsertValue(value: RichEditorInsertValue): void {
        let valueSerializer : Serializer = this
        const value_insertOffset  = value.insertOffset
        valueSerializer.writeNumber(value_insertOffset)
        const value_insertValue  = value.insertValue
        valueSerializer.writeString(value_insertValue)
        const value_previewText  = value.previewText
        let value_previewText_type : int32 = RuntimeType.UNDEFINED
        value_previewText_type = runtimeType(value_previewText)
        valueSerializer.writeInt8(value_previewText_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewText_type)) {
            const value_previewText_value  = value_previewText!
            valueSerializer.writeString(value_previewText_value)
        }
    }
    writeRichEditorRange(value: RichEditorRange): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeNumber(value_start_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeNumber(value_end_value)
        }
    }
    writeRichEditorSelection(value: RichEditorSelection): void {
        let valueSerializer : Serializer = this
        const value_selection  = value.selection
        const value_selection_0  = value_selection[0]
        valueSerializer.writeNumber(value_selection_0)
        const value_selection_1  = value_selection[1]
        valueSerializer.writeNumber(value_selection_1)
        const value_spans  = value.spans
        valueSerializer.writeInt32(value_spans.length as int32)
        for (let i = 0; i < value_spans.length; i++) {
            const value_spans_element : RichEditorTextSpanResult | RichEditorImageSpanResult = value_spans[i]
            let value_spans_element_type : int32 = RuntimeType.UNDEFINED
            value_spans_element_type = runtimeType(value_spans_element)
            if (TypeChecker.isRichEditorTextSpanResult(value_spans_element, true, false, false, true, false, false, false, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_spans_element_0  = value_spans_element as RichEditorTextSpanResult
                valueSerializer.writeRichEditorTextSpanResult(value_spans_element_0)
            }
            else if (TypeChecker.isRichEditorImageSpanResult(value_spans_element, true, false, false, false, true)) {
                valueSerializer.writeInt8(1 as int32)
                const value_spans_element_1  = value_spans_element as RichEditorImageSpanResult
                valueSerializer.writeRichEditorImageSpanResult(value_spans_element_1)
            }
        }
    }
    writeRichEditorSpanPosition(value: RichEditorSpanPosition): void {
        let valueSerializer : Serializer = this
        const value_spanIndex  = value.spanIndex
        valueSerializer.writeNumber(value_spanIndex)
        const value_spanRange  = value.spanRange
        const value_spanRange_0  = value_spanRange[0]
        valueSerializer.writeNumber(value_spanRange_0)
        const value_spanRange_1  = value_spanRange[1]
        valueSerializer.writeNumber(value_spanRange_1)
    }
    writeRingStyleOptions(value: RingStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_enableScanEffect  = value.enableScanEffect
        let value_enableScanEffect_type : int32 = RuntimeType.UNDEFINED
        value_enableScanEffect_type = runtimeType(value_enableScanEffect)
        valueSerializer.writeInt8(value_enableScanEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableScanEffect_type)) {
            const value_enableScanEffect_value  = value_enableScanEffect!
            valueSerializer.writeBoolean(value_enableScanEffect_value)
        }
        const value_strokeWidth  = value.strokeWidth
        let value_strokeWidth_type : int32 = RuntimeType.UNDEFINED
        value_strokeWidth_type = runtimeType(value_strokeWidth)
        valueSerializer.writeInt8(value_strokeWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeWidth_type)) {
            const value_strokeWidth_value  = value_strokeWidth!
            valueSerializer.writeLength(value_strokeWidth_value)
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            valueSerializer.writeBoolean(value_shadow_value)
        }
        const value_status  = value.status
        let value_status_type : int32 = RuntimeType.UNDEFINED
        value_status_type = runtimeType(value_status)
        valueSerializer.writeInt8(value_status_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_status_type)) {
            const value_status_value  = (value_status as ProgressStatus)
            valueSerializer.writeInt32(TypeChecker.ProgressStatus_ToNumeric(value_status_value))
        }
    }
    writeRotateOption(value: RotateOption): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            valueSerializer.writeNumber(value_x_value)
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            valueSerializer.writeNumber(value_y_value)
        }
        const value_z  = value.z
        let value_z_type : int32 = RuntimeType.UNDEFINED
        value_z_type = runtimeType(value_z)
        valueSerializer.writeInt8(value_z_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_z_type)) {
            const value_z_value  = value_z!
            valueSerializer.writeNumber(value_z_value)
        }
        const value_centerX  = value.centerX
        let value_centerX_type : int32 = RuntimeType.UNDEFINED
        value_centerX_type = runtimeType(value_centerX)
        valueSerializer.writeInt8(value_centerX_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_centerX_type)) {
            const value_centerX_value  = value_centerX!
            valueSerializer.writeNumber(value_centerX_value)
        }
        const value_centerY  = value.centerY
        let value_centerY_type : int32 = RuntimeType.UNDEFINED
        value_centerY_type = runtimeType(value_centerY)
        valueSerializer.writeInt8(value_centerY_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_centerY_type)) {
            const value_centerY_value  = value_centerY!
            valueSerializer.writeNumber(value_centerY_value)
        }
        const value_angle  = value.angle
        let value_angle_type : int32 = RuntimeType.UNDEFINED
        value_angle_type = runtimeType(value_angle)
        valueSerializer.writeInt8(value_angle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_angle_type)) {
            const value_angle_value  = value_angle!
            valueSerializer.writeNumber(value_angle_value)
        }
    }
    writeRotateOptions(value: RotateOptions): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            valueSerializer.writeNumber(value_x_value)
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            valueSerializer.writeNumber(value_y_value)
        }
        const value_z  = value.z
        let value_z_type : int32 = RuntimeType.UNDEFINED
        value_z_type = runtimeType(value_z)
        valueSerializer.writeInt8(value_z_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_z_type)) {
            const value_z_value  = value_z!
            valueSerializer.writeNumber(value_z_value)
        }
        const value_centerX  = value.centerX
        let value_centerX_type : int32 = RuntimeType.UNDEFINED
        value_centerX_type = runtimeType(value_centerX)
        valueSerializer.writeInt8(value_centerX_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_centerX_type)) {
            const value_centerX_value  = value_centerX!
            let value_centerX_value_type : int32 = RuntimeType.UNDEFINED
            value_centerX_value_type = runtimeType(value_centerX_value)
            if (RuntimeType.NUMBER == value_centerX_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_centerX_value_0  = value_centerX_value as number
                valueSerializer.writeNumber(value_centerX_value_0)
            }
            else if (RuntimeType.STRING == value_centerX_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_centerX_value_1  = value_centerX_value as string
                valueSerializer.writeString(value_centerX_value_1)
            }
        }
        const value_centerY  = value.centerY
        let value_centerY_type : int32 = RuntimeType.UNDEFINED
        value_centerY_type = runtimeType(value_centerY)
        valueSerializer.writeInt8(value_centerY_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_centerY_type)) {
            const value_centerY_value  = value_centerY!
            let value_centerY_value_type : int32 = RuntimeType.UNDEFINED
            value_centerY_value_type = runtimeType(value_centerY_value)
            if (RuntimeType.NUMBER == value_centerY_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_centerY_value_0  = value_centerY_value as number
                valueSerializer.writeNumber(value_centerY_value_0)
            }
            else if (RuntimeType.STRING == value_centerY_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_centerY_value_1  = value_centerY_value as string
                valueSerializer.writeString(value_centerY_value_1)
            }
        }
        const value_centerZ  = value.centerZ
        let value_centerZ_type : int32 = RuntimeType.UNDEFINED
        value_centerZ_type = runtimeType(value_centerZ)
        valueSerializer.writeInt8(value_centerZ_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_centerZ_type)) {
            const value_centerZ_value  = value_centerZ!
            valueSerializer.writeNumber(value_centerZ_value)
        }
        const value_perspective  = value.perspective
        let value_perspective_type : int32 = RuntimeType.UNDEFINED
        value_perspective_type = runtimeType(value_perspective)
        valueSerializer.writeInt8(value_perspective_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_perspective_type)) {
            const value_perspective_value  = value_perspective!
            valueSerializer.writeNumber(value_perspective_value)
        }
        const value_angle  = value.angle
        let value_angle_type : int32 = RuntimeType.UNDEFINED
        value_angle_type = runtimeType(value_angle)
        if (RuntimeType.NUMBER == value_angle_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_angle_0  = value_angle as number
            valueSerializer.writeNumber(value_angle_0)
        }
        else if (RuntimeType.STRING == value_angle_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_angle_1  = value_angle as string
            valueSerializer.writeString(value_angle_1)
        }
    }
    writeRotationGestureHandlerOptions(value: RotationGestureHandlerOptions): void {
        let valueSerializer : Serializer = this
        const value_isFingerCountLimited  = value.isFingerCountLimited
        let value_isFingerCountLimited_type : int32 = RuntimeType.UNDEFINED
        value_isFingerCountLimited_type = runtimeType(value_isFingerCountLimited)
        valueSerializer.writeInt8(value_isFingerCountLimited_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isFingerCountLimited_type)) {
            const value_isFingerCountLimited_value  = value_isFingerCountLimited!
            valueSerializer.writeBoolean(value_isFingerCountLimited_value)
        }
        const value_fingers  = value.fingers
        let value_fingers_type : int32 = RuntimeType.UNDEFINED
        value_fingers_type = runtimeType(value_fingers)
        valueSerializer.writeInt8(value_fingers_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fingers_type)) {
            const value_fingers_value  = value_fingers!
            valueSerializer.writeNumber(value_fingers_value)
        }
        const value_angle  = value.angle
        let value_angle_type : int32 = RuntimeType.UNDEFINED
        value_angle_type = runtimeType(value_angle)
        valueSerializer.writeInt8(value_angle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_angle_type)) {
            const value_angle_value  = value_angle!
            valueSerializer.writeNumber(value_angle_value)
        }
    }
    writeRoundedRectOptions(value: RoundedRectOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_0)
            }
            else if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as string
                valueSerializer.writeString(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_0)
            }
            else if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as string
                valueSerializer.writeString(value_height_value_1)
            }
        }
        const value_radiusWidth  = value.radiusWidth
        let value_radiusWidth_type : int32 = RuntimeType.UNDEFINED
        value_radiusWidth_type = runtimeType(value_radiusWidth)
        valueSerializer.writeInt8(value_radiusWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radiusWidth_type)) {
            const value_radiusWidth_value  = value_radiusWidth!
            let value_radiusWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_radiusWidth_value_type = runtimeType(value_radiusWidth_value)
            if (RuntimeType.NUMBER == value_radiusWidth_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_radiusWidth_value_0  = value_radiusWidth_value as number
                valueSerializer.writeNumber(value_radiusWidth_value_0)
            }
            else if (RuntimeType.STRING == value_radiusWidth_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_radiusWidth_value_1  = value_radiusWidth_value as string
                valueSerializer.writeString(value_radiusWidth_value_1)
            }
        }
        const value_radiusHeight  = value.radiusHeight
        let value_radiusHeight_type : int32 = RuntimeType.UNDEFINED
        value_radiusHeight_type = runtimeType(value_radiusHeight)
        valueSerializer.writeInt8(value_radiusHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radiusHeight_type)) {
            const value_radiusHeight_value  = value_radiusHeight!
            let value_radiusHeight_value_type : int32 = RuntimeType.UNDEFINED
            value_radiusHeight_value_type = runtimeType(value_radiusHeight_value)
            if (RuntimeType.NUMBER == value_radiusHeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_radiusHeight_value_0  = value_radiusHeight_value as number
                valueSerializer.writeNumber(value_radiusHeight_value_0)
            }
            else if (RuntimeType.STRING == value_radiusHeight_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_radiusHeight_value_1  = value_radiusHeight_value as string
                valueSerializer.writeString(value_radiusHeight_value_1)
            }
        }
    }
    writeRoundRect(value: RoundRect): void {
        let valueSerializer : Serializer = this
        const value_rect  = value.rect
        valueSerializer.writeRect(value_rect)
        const value_corners  = value.corners
        valueSerializer.writeCornerRadius(value_corners)
    }
    writeRoundRectShapeOptions(value: RoundRectShapeOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_0)
            }
            else if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as string
                valueSerializer.writeString(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_0)
            }
            else if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as string
                valueSerializer.writeString(value_height_value_1)
            }
        }
        const value_radiusWidth  = value.radiusWidth
        let value_radiusWidth_type : int32 = RuntimeType.UNDEFINED
        value_radiusWidth_type = runtimeType(value_radiusWidth)
        valueSerializer.writeInt8(value_radiusWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radiusWidth_type)) {
            const value_radiusWidth_value  = value_radiusWidth!
            let value_radiusWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_radiusWidth_value_type = runtimeType(value_radiusWidth_value)
            if (RuntimeType.NUMBER == value_radiusWidth_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_radiusWidth_value_0  = value_radiusWidth_value as number
                valueSerializer.writeNumber(value_radiusWidth_value_0)
            }
            else if (RuntimeType.STRING == value_radiusWidth_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_radiusWidth_value_1  = value_radiusWidth_value as string
                valueSerializer.writeString(value_radiusWidth_value_1)
            }
        }
        const value_radiusHeight  = value.radiusHeight
        let value_radiusHeight_type : int32 = RuntimeType.UNDEFINED
        value_radiusHeight_type = runtimeType(value_radiusHeight)
        valueSerializer.writeInt8(value_radiusHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radiusHeight_type)) {
            const value_radiusHeight_value  = value_radiusHeight!
            let value_radiusHeight_value_type : int32 = RuntimeType.UNDEFINED
            value_radiusHeight_value_type = runtimeType(value_radiusHeight_value)
            if (RuntimeType.NUMBER == value_radiusHeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_radiusHeight_value_0  = value_radiusHeight_value as number
                valueSerializer.writeNumber(value_radiusHeight_value_0)
            }
            else if (RuntimeType.STRING == value_radiusHeight_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_radiusHeight_value_1  = value_radiusHeight_value as string
                valueSerializer.writeString(value_radiusHeight_value_1)
            }
        }
    }
    writeRouteInfo(value: RouteInfo): void {
        let valueSerializer : Serializer = this
        const value_name  = value.name
        valueSerializer.writeString(value_name)
        const value_param  = value.param
        let value_param_type : int32 = RuntimeType.UNDEFINED
        value_param_type = runtimeType(value_param)
        valueSerializer.writeInt8(value_param_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_param_type)) {
            const value_param_value  = value_param!
            valueSerializer.holdAndWriteObject(value_param_value)
        }
    }
    writeRouteMapConfig(value: RouteMapConfig): void {
        let valueSerializer : Serializer = this
        const value_name  = value.name
        valueSerializer.writeString(value_name)
        const value_pageSourceFile  = value.pageSourceFile
        valueSerializer.writeString(value_pageSourceFile)
        const value_data  = value.data
        valueSerializer.holdAndWriteObject(value_data)
    }
    writeRowOptions(value: RowOptions): void {
        let valueSerializer : Serializer = this
        const value_space  = value.space
        let value_space_type : int32 = RuntimeType.UNDEFINED
        value_space_type = runtimeType(value_space)
        valueSerializer.writeInt8(value_space_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_space_type)) {
            const value_space_value  = value_space!
            let value_space_value_type : int32 = RuntimeType.UNDEFINED
            value_space_value_type = runtimeType(value_space_value)
            if (RuntimeType.STRING == value_space_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_space_value_0  = value_space_value as string
                valueSerializer.writeString(value_space_value_0)
            }
            else if (RuntimeType.NUMBER == value_space_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_space_value_1  = value_space_value as number
                valueSerializer.writeNumber(value_space_value_1)
            }
        }
    }
    writeRowOptionsV2(value: RowOptionsV2): void {
        let valueSerializer : Serializer = this
        const value_stub  = value.stub
        valueSerializer.writeString(value_stub)
    }
    writeSaveButtonOptions(value: SaveButtonOptions): void {
        let valueSerializer : Serializer = this
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = (value_icon as SaveIconStyle)
            valueSerializer.writeInt32(TypeChecker.SaveIconStyle_ToNumeric(value_icon_value))
        }
        const value_text  = value.text
        let value_text_type : int32 = RuntimeType.UNDEFINED
        value_text_type = runtimeType(value_text)
        valueSerializer.writeInt8(value_text_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_text_type)) {
            const value_text_value  = (value_text as SaveDescription)
            valueSerializer.writeInt32(TypeChecker.SaveDescription_ToNumeric(value_text_value))
        }
        const value_buttonType  = value.buttonType
        let value_buttonType_type : int32 = RuntimeType.UNDEFINED
        value_buttonType_type = runtimeType(value_buttonType)
        valueSerializer.writeInt8(value_buttonType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_buttonType_type)) {
            const value_buttonType_value  = (value_buttonType as ButtonType)
            valueSerializer.writeInt32(TypeChecker.ButtonType_ToNumeric(value_buttonType_value))
        }
    }
    writeScaleOption(value: ScaleOption): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            valueSerializer.writeNumber(value_x_value)
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            valueSerializer.writeNumber(value_y_value)
        }
        const value_z  = value.z
        let value_z_type : int32 = RuntimeType.UNDEFINED
        value_z_type = runtimeType(value_z)
        valueSerializer.writeInt8(value_z_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_z_type)) {
            const value_z_value  = value_z!
            valueSerializer.writeNumber(value_z_value)
        }
        const value_centerX  = value.centerX
        let value_centerX_type : int32 = RuntimeType.UNDEFINED
        value_centerX_type = runtimeType(value_centerX)
        valueSerializer.writeInt8(value_centerX_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_centerX_type)) {
            const value_centerX_value  = value_centerX!
            valueSerializer.writeNumber(value_centerX_value)
        }
        const value_centerY  = value.centerY
        let value_centerY_type : int32 = RuntimeType.UNDEFINED
        value_centerY_type = runtimeType(value_centerY)
        valueSerializer.writeInt8(value_centerY_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_centerY_type)) {
            const value_centerY_value  = value_centerY!
            valueSerializer.writeNumber(value_centerY_value)
        }
    }
    writeScaleOptions(value: ScaleOptions): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            valueSerializer.writeNumber(value_x_value)
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            valueSerializer.writeNumber(value_y_value)
        }
        const value_z  = value.z
        let value_z_type : int32 = RuntimeType.UNDEFINED
        value_z_type = runtimeType(value_z)
        valueSerializer.writeInt8(value_z_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_z_type)) {
            const value_z_value  = value_z!
            valueSerializer.writeNumber(value_z_value)
        }
        const value_centerX  = value.centerX
        let value_centerX_type : int32 = RuntimeType.UNDEFINED
        value_centerX_type = runtimeType(value_centerX)
        valueSerializer.writeInt8(value_centerX_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_centerX_type)) {
            const value_centerX_value  = value_centerX!
            let value_centerX_value_type : int32 = RuntimeType.UNDEFINED
            value_centerX_value_type = runtimeType(value_centerX_value)
            if (RuntimeType.NUMBER == value_centerX_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_centerX_value_0  = value_centerX_value as number
                valueSerializer.writeNumber(value_centerX_value_0)
            }
            else if (RuntimeType.STRING == value_centerX_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_centerX_value_1  = value_centerX_value as string
                valueSerializer.writeString(value_centerX_value_1)
            }
        }
        const value_centerY  = value.centerY
        let value_centerY_type : int32 = RuntimeType.UNDEFINED
        value_centerY_type = runtimeType(value_centerY)
        valueSerializer.writeInt8(value_centerY_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_centerY_type)) {
            const value_centerY_value  = value_centerY!
            let value_centerY_value_type : int32 = RuntimeType.UNDEFINED
            value_centerY_value_type = runtimeType(value_centerY_value)
            if (RuntimeType.NUMBER == value_centerY_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_centerY_value_0  = value_centerY_value as number
                valueSerializer.writeNumber(value_centerY_value_0)
            }
            else if (RuntimeType.STRING == value_centerY_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_centerY_value_1  = value_centerY_value as string
                valueSerializer.writeString(value_centerY_value_1)
            }
        }
    }
    writeScaleSymbolEffect(value: ScaleSymbolEffect): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeScreenCaptureConfig(value: ScreenCaptureConfig): void {
        let valueSerializer : Serializer = this
        const value_captureMode  = value.captureMode
        valueSerializer.writeInt32(TypeChecker.WebCaptureMode_ToNumeric(value_captureMode))
    }
    writeScriptItem(value: ScriptItem): void {
        let valueSerializer : Serializer = this
        const value_script  = value.script
        valueSerializer.writeString(value_script)
        const value_scriptRules  = value.scriptRules
        valueSerializer.writeInt32(value_scriptRules.length as int32)
        for (let i = 0; i < value_scriptRules.length; i++) {
            const value_scriptRules_element : string = value_scriptRules[i]
            valueSerializer.writeString(value_scriptRules_element)
        }
    }
    writeScrollableBarModeOptions(value: ScrollableBarModeOptions): void {
        let valueSerializer : Serializer = this
        const value_margin  = value.margin
        let value_margin_type : int32 = RuntimeType.UNDEFINED
        value_margin_type = runtimeType(value_margin)
        valueSerializer.writeInt8(value_margin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_margin_type)) {
            const value_margin_value  = value_margin!
            valueSerializer.writeLength(value_margin_value)
        }
        const value_nonScrollableLayoutStyle  = value.nonScrollableLayoutStyle
        let value_nonScrollableLayoutStyle_type : int32 = RuntimeType.UNDEFINED
        value_nonScrollableLayoutStyle_type = runtimeType(value_nonScrollableLayoutStyle)
        valueSerializer.writeInt8(value_nonScrollableLayoutStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_nonScrollableLayoutStyle_type)) {
            const value_nonScrollableLayoutStyle_value  = (value_nonScrollableLayoutStyle as LayoutStyle)
            valueSerializer.writeInt32(TypeChecker.LayoutStyle_ToNumeric(value_nonScrollableLayoutStyle_value))
        }
    }
    writeScrollAnimationOptions(value: ScrollAnimationOptions): void {
        let valueSerializer : Serializer = this
        const value_duration  = value.duration
        let value_duration_type : int32 = RuntimeType.UNDEFINED
        value_duration_type = runtimeType(value_duration)
        valueSerializer.writeInt8(value_duration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_duration_type)) {
            const value_duration_value  = value_duration!
            valueSerializer.writeNumber(value_duration_value)
        }
        const value_curve  = value.curve
        let value_curve_type : int32 = RuntimeType.UNDEFINED
        value_curve_type = runtimeType(value_curve)
        valueSerializer.writeInt8(value_curve_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_curve_type)) {
            const value_curve_value  = value_curve!
            let value_curve_value_type : int32 = RuntimeType.UNDEFINED
            value_curve_value_type = runtimeType(value_curve_value)
            if (TypeChecker.isCurve(value_curve_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_curve_value_0  = value_curve_value as Curve
                valueSerializer.writeInt32(TypeChecker.Curve_ToNumeric(value_curve_value_0))
            }
            else if (RuntimeType.OBJECT == value_curve_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_curve_value_1  = value_curve_value as ICurve
                valueSerializer.writeICurve(value_curve_value_1)
            }
        }
        const value_canOverScroll  = value.canOverScroll
        let value_canOverScroll_type : int32 = RuntimeType.UNDEFINED
        value_canOverScroll_type = runtimeType(value_canOverScroll)
        valueSerializer.writeInt8(value_canOverScroll_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_canOverScroll_type)) {
            const value_canOverScroll_value  = value_canOverScroll!
            valueSerializer.writeBoolean(value_canOverScroll_value)
        }
    }
    writeScrollBarOptions(value: ScrollBarOptions): void {
        let valueSerializer : Serializer = this
        const value_scroller  = value.scroller
        valueSerializer.writeScroller(value_scroller)
        const value_direction  = value.direction
        let value_direction_type : int32 = RuntimeType.UNDEFINED
        value_direction_type = runtimeType(value_direction)
        valueSerializer.writeInt8(value_direction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_direction_type)) {
            const value_direction_value  = (value_direction as ScrollBarDirection)
            valueSerializer.writeInt32(TypeChecker.ScrollBarDirection_ToNumeric(value_direction_value))
        }
        const value_state  = value.state
        let value_state_type : int32 = RuntimeType.UNDEFINED
        value_state_type = runtimeType(value_state)
        valueSerializer.writeInt8(value_state_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_state_type)) {
            const value_state_value  = (value_state as BarState)
            valueSerializer.writeInt32(TypeChecker.BarState_ToNumeric(value_state_value))
        }
    }
    writeScrollEdgeOptions(value: ScrollEdgeOptions): void {
        let valueSerializer : Serializer = this
        const value_velocity  = value.velocity
        let value_velocity_type : int32 = RuntimeType.UNDEFINED
        value_velocity_type = runtimeType(value_velocity)
        valueSerializer.writeInt8(value_velocity_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_velocity_type)) {
            const value_velocity_value  = value_velocity!
            valueSerializer.writeNumber(value_velocity_value)
        }
    }
    writeScrollPageOptions(value: ScrollPageOptions): void {
        let valueSerializer : Serializer = this
        const value_next  = value.next
        valueSerializer.writeBoolean(value_next)
        const value_animation  = value.animation
        let value_animation_type : int32 = RuntimeType.UNDEFINED
        value_animation_type = runtimeType(value_animation)
        valueSerializer.writeInt8(value_animation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_animation_type)) {
            const value_animation_value  = value_animation!
            valueSerializer.writeBoolean(value_animation_value)
        }
    }
    writeSelectionOptions(value: SelectionOptions): void {
        let valueSerializer : Serializer = this
        const value_menuPolicy  = value.menuPolicy
        let value_menuPolicy_type : int32 = RuntimeType.UNDEFINED
        value_menuPolicy_type = runtimeType(value_menuPolicy)
        valueSerializer.writeInt8(value_menuPolicy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_menuPolicy_type)) {
            const value_menuPolicy_value  = (value_menuPolicy as MenuPolicy)
            valueSerializer.writeInt32(TypeChecker.MenuPolicy_ToNumeric(value_menuPolicy_value))
        }
    }
    writeShapeSize(value: ShapeSize): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_0)
            }
            else if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as string
                valueSerializer.writeString(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_0)
            }
            else if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as string
                valueSerializer.writeString(value_height_value_1)
            }
        }
    }
    writeSheetDismiss(value: SheetDismiss): void {
        let valueSerializer : Serializer = this
        const value_dismiss  = value.dismiss
        valueSerializer.holdAndWriteCallback(value_dismiss)
    }
    writeSizeOptions(value: SizeOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeLength(value_height_value)
        }
    }
    writeSlideRange(value: SlideRange): void {
        let valueSerializer : Serializer = this
        const value_from  = value.from
        let value_from_type : int32 = RuntimeType.UNDEFINED
        value_from_type = runtimeType(value_from)
        valueSerializer.writeInt8(value_from_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_from_type)) {
            const value_from_value  = value_from!
            valueSerializer.writeNumber(value_from_value)
        }
        const value_to  = value.to
        let value_to_type : int32 = RuntimeType.UNDEFINED
        value_to_type = runtimeType(value_to)
        valueSerializer.writeInt8(value_to_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_to_type)) {
            const value_to_value  = value_to!
            valueSerializer.writeNumber(value_to_value)
        }
    }
    writeSliderOptions(value: SliderOptions): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        valueSerializer.writeInt8(value_value_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_value_type)) {
            const value_value_value  = value_value!
            valueSerializer.writeNumber(value_value_value)
        }
        const value_min  = value.min
        let value_min_type : int32 = RuntimeType.UNDEFINED
        value_min_type = runtimeType(value_min)
        valueSerializer.writeInt8(value_min_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_min_type)) {
            const value_min_value  = value_min!
            valueSerializer.writeNumber(value_min_value)
        }
        const value_max  = value.max
        let value_max_type : int32 = RuntimeType.UNDEFINED
        value_max_type = runtimeType(value_max)
        valueSerializer.writeInt8(value_max_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_max_type)) {
            const value_max_value  = value_max!
            valueSerializer.writeNumber(value_max_value)
        }
        const value_step  = value.step
        let value_step_type : int32 = RuntimeType.UNDEFINED
        value_step_type = runtimeType(value_step)
        valueSerializer.writeInt8(value_step_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_step_type)) {
            const value_step_value  = value_step!
            valueSerializer.writeNumber(value_step_value)
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as SliderStyle)
            valueSerializer.writeInt32(TypeChecker.SliderStyle_ToNumeric(value_style_value))
        }
        const value_direction  = value.direction
        let value_direction_type : int32 = RuntimeType.UNDEFINED
        value_direction_type = runtimeType(value_direction)
        valueSerializer.writeInt8(value_direction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_direction_type)) {
            const value_direction_value  = (value_direction as Axis)
            valueSerializer.writeInt32(TypeChecker.Axis_ToNumeric(value_direction_value))
        }
        const value_reverse  = value.reverse
        let value_reverse_type : int32 = RuntimeType.UNDEFINED
        value_reverse_type = runtimeType(value_reverse)
        valueSerializer.writeInt8(value_reverse_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_reverse_type)) {
            const value_reverse_value  = value_reverse!
            valueSerializer.writeBoolean(value_reverse_value)
        }
    }
    writeSnapshotOptions(value: SnapshotOptions): void {
        let valueSerializer : Serializer = this
        const value_scale  = value.scale
        let value_scale_type : int32 = RuntimeType.UNDEFINED
        value_scale_type = runtimeType(value_scale)
        valueSerializer.writeInt8(value_scale_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scale_type)) {
            const value_scale_value  = value_scale!
            valueSerializer.writeNumber(value_scale_value)
        }
        const value_waitUntilRenderFinished  = value.waitUntilRenderFinished
        let value_waitUntilRenderFinished_type : int32 = RuntimeType.UNDEFINED
        value_waitUntilRenderFinished_type = runtimeType(value_waitUntilRenderFinished)
        valueSerializer.writeInt8(value_waitUntilRenderFinished_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_waitUntilRenderFinished_type)) {
            const value_waitUntilRenderFinished_value  = value_waitUntilRenderFinished!
            valueSerializer.writeBoolean(value_waitUntilRenderFinished_value)
        }
    }
    writeSpringBackAction(value: SpringBackAction): void {
        let valueSerializer : Serializer = this
        const value_springBack  = value.springBack
        valueSerializer.holdAndWriteCallback(value_springBack)
    }
    writeSslErrorEvent(value: SslErrorEvent): void {
        let valueSerializer : Serializer = this
        const value_handler  = value.handler
        valueSerializer.writeSslErrorHandler(value_handler)
        const value_error  = value.error
        valueSerializer.writeInt32(TypeChecker.SslError_ToNumeric(value_error))
        const value_url  = value.url
        valueSerializer.writeString(value_url)
        const value_originalUrl  = value.originalUrl
        valueSerializer.writeString(value_originalUrl)
        const value_referrer  = value.referrer
        valueSerializer.writeString(value_referrer)
        const value_isFatalError  = value.isFatalError
        valueSerializer.writeBoolean(value_isFatalError)
        const value_isMainFrame  = value.isMainFrame
        valueSerializer.writeBoolean(value_isMainFrame)
    }
    writeStackOptions(value: StackOptions): void {
        let valueSerializer : Serializer = this
        const value_alignContent  = value.alignContent
        let value_alignContent_type : int32 = RuntimeType.UNDEFINED
        value_alignContent_type = runtimeType(value_alignContent)
        valueSerializer.writeInt8(value_alignContent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignContent_type)) {
            const value_alignContent_value  = (value_alignContent as Alignment)
            valueSerializer.writeInt32(TypeChecker.Alignment_ToNumeric(value_alignContent_value))
        }
    }
    writeStarStyleOptions(value: StarStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_backgroundUri  = value.backgroundUri
        valueSerializer.writeString(value_backgroundUri)
        const value_foregroundUri  = value.foregroundUri
        valueSerializer.writeString(value_foregroundUri)
        const value_secondaryUri  = value.secondaryUri
        let value_secondaryUri_type : int32 = RuntimeType.UNDEFINED
        value_secondaryUri_type = runtimeType(value_secondaryUri)
        valueSerializer.writeInt8(value_secondaryUri_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_secondaryUri_type)) {
            const value_secondaryUri_value  = value_secondaryUri!
            valueSerializer.writeString(value_secondaryUri_value)
        }
    }
    writeStateStyles(value: StateStyles): void {
        let valueSerializer : Serializer = this
        const value_normal  = value.normal
        let value_normal_type : int32 = RuntimeType.UNDEFINED
        value_normal_type = runtimeType(value_normal)
        valueSerializer.writeInt8(value_normal_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_normal_type)) {
            const value_normal_value  = value_normal!
            valueSerializer.holdAndWriteObject(value_normal_value)
        }
        const value_pressed  = value.pressed
        let value_pressed_type : int32 = RuntimeType.UNDEFINED
        value_pressed_type = runtimeType(value_pressed)
        valueSerializer.writeInt8(value_pressed_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_pressed_type)) {
            const value_pressed_value  = value_pressed!
            valueSerializer.holdAndWriteObject(value_pressed_value)
        }
        const value_disabled  = value.disabled
        let value_disabled_type : int32 = RuntimeType.UNDEFINED
        value_disabled_type = runtimeType(value_disabled)
        valueSerializer.writeInt8(value_disabled_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disabled_type)) {
            const value_disabled_value  = value_disabled!
            valueSerializer.holdAndWriteObject(value_disabled_value)
        }
        const value_focused  = value.focused
        let value_focused_type : int32 = RuntimeType.UNDEFINED
        value_focused_type = runtimeType(value_focused)
        valueSerializer.writeInt8(value_focused_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_focused_type)) {
            const value_focused_value  = value_focused!
            valueSerializer.holdAndWriteObject(value_focused_value)
        }
        const value_clicked  = value.clicked
        let value_clicked_type : int32 = RuntimeType.UNDEFINED
        value_clicked_type = runtimeType(value_clicked)
        valueSerializer.writeInt8(value_clicked_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_clicked_type)) {
            const value_clicked_value  = value_clicked!
            valueSerializer.holdAndWriteObject(value_clicked_value)
        }
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            valueSerializer.holdAndWriteObject(value_selected_value)
        }
    }
    writeStyledStringChangedListener(value: StyledStringChangedListener): void {
        let valueSerializer : Serializer = this
        const value_onWillChange  = value.onWillChange
        let value_onWillChange_type : int32 = RuntimeType.UNDEFINED
        value_onWillChange_type = runtimeType(value_onWillChange)
        valueSerializer.writeInt8(value_onWillChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillChange_type)) {
            const value_onWillChange_value  = value_onWillChange!
            valueSerializer.holdAndWriteCallback(value_onWillChange_value)
        }
        const value_onDidChange  = value.onDidChange
        let value_onDidChange_type : int32 = RuntimeType.UNDEFINED
        value_onDidChange_type = runtimeType(value_onDidChange)
        valueSerializer.writeInt8(value_onDidChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidChange_type)) {
            const value_onDidChange_value  = value_onDidChange!
            valueSerializer.holdAndWriteCallback(value_onDidChange_value)
        }
    }
    writeSummary(value: Summary): void {
        let valueSerializer : Serializer = this
        const value_summary  = value.summary
        valueSerializer.writeInt32(value_summary.size as int32 as int32)
        for (const pair of value_summary) {
            const value_summary_key = pair[0]
            const value_summary_value = pair[1]
            valueSerializer.writeString(value_summary_key)
            valueSerializer.writeInt64(value_summary_value)
        }
        const value_totalSize  = value.totalSize
        valueSerializer.writeInt64(value_totalSize)
    }
    writeSurfaceRect(value: SurfaceRect): void {
        let valueSerializer : Serializer = this
        const value_offsetX  = value.offsetX
        let value_offsetX_type : int32 = RuntimeType.UNDEFINED
        value_offsetX_type = runtimeType(value_offsetX)
        valueSerializer.writeInt8(value_offsetX_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offsetX_type)) {
            const value_offsetX_value  = value_offsetX!
            valueSerializer.writeNumber(value_offsetX_value)
        }
        const value_offsetY  = value.offsetY
        let value_offsetY_type : int32 = RuntimeType.UNDEFINED
        value_offsetY_type = runtimeType(value_offsetY)
        valueSerializer.writeInt8(value_offsetY_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offsetY_type)) {
            const value_offsetY_value  = value_offsetY!
            valueSerializer.writeNumber(value_offsetY_value)
        }
        const value_surfaceWidth  = value.surfaceWidth
        valueSerializer.writeNumber(value_surfaceWidth)
        const value_surfaceHeight  = value.surfaceHeight
        valueSerializer.writeNumber(value_surfaceHeight)
    }
    writeSurfaceRotationOptions(value: SurfaceRotationOptions): void {
        let valueSerializer : Serializer = this
        const value_lock  = value.lock
        let value_lock_type : int32 = RuntimeType.UNDEFINED
        value_lock_type = runtimeType(value_lock)
        valueSerializer.writeInt8(value_lock_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lock_type)) {
            const value_lock_value  = value_lock!
            valueSerializer.writeBoolean(value_lock_value)
        }
    }
    writeSweepGradientOptions(value: SweepGradientOptions): void {
        let valueSerializer : Serializer = this
        const value_center  = value.center
        const value_center_0  = value_center[0]
        valueSerializer.writeLength(value_center_0)
        const value_center_1  = value_center[1]
        valueSerializer.writeLength(value_center_1)
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            let value_start_value_type : int32 = RuntimeType.UNDEFINED
            value_start_value_type = runtimeType(value_start_value)
            if (RuntimeType.NUMBER == value_start_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_start_value_0  = value_start_value as number
                valueSerializer.writeNumber(value_start_value_0)
            }
            else if (RuntimeType.STRING == value_start_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_start_value_1  = value_start_value as string
                valueSerializer.writeString(value_start_value_1)
            }
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            let value_end_value_type : int32 = RuntimeType.UNDEFINED
            value_end_value_type = runtimeType(value_end_value)
            if (RuntimeType.NUMBER == value_end_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_end_value_0  = value_end_value as number
                valueSerializer.writeNumber(value_end_value_0)
            }
            else if (RuntimeType.STRING == value_end_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_end_value_1  = value_end_value as string
                valueSerializer.writeString(value_end_value_1)
            }
        }
        const value_rotation  = value.rotation
        let value_rotation_type : int32 = RuntimeType.UNDEFINED
        value_rotation_type = runtimeType(value_rotation)
        valueSerializer.writeInt8(value_rotation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_rotation_type)) {
            const value_rotation_value  = value_rotation!
            let value_rotation_value_type : int32 = RuntimeType.UNDEFINED
            value_rotation_value_type = runtimeType(value_rotation_value)
            if (RuntimeType.NUMBER == value_rotation_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_rotation_value_0  = value_rotation_value as number
                valueSerializer.writeNumber(value_rotation_value_0)
            }
            else if (RuntimeType.STRING == value_rotation_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_rotation_value_1  = value_rotation_value as string
                valueSerializer.writeString(value_rotation_value_1)
            }
        }
        const value_colors  = value.colors
        valueSerializer.writeInt32(value_colors.length as int32)
        for (let i = 0; i < value_colors.length; i++) {
            const value_colors_element : [ ResourceColor, number ] = value_colors[i]
            const value_colors_element_0  = value_colors_element[0]
            let value_colors_element_0_type : int32 = RuntimeType.UNDEFINED
            value_colors_element_0_type = runtimeType(value_colors_element_0)
            if (TypeChecker.isColor(value_colors_element_0)) {
                valueSerializer.writeInt8(0 as int32)
                const value_colors_element_0_0  = value_colors_element_0 as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_colors_element_0_0))
            }
            else if (RuntimeType.NUMBER == value_colors_element_0_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_colors_element_0_1  = value_colors_element_0 as number
                valueSerializer.writeNumber(value_colors_element_0_1)
            }
            else if (RuntimeType.STRING == value_colors_element_0_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_colors_element_0_2  = value_colors_element_0 as string
                valueSerializer.writeString(value_colors_element_0_2)
            }
            else if (RuntimeType.OBJECT == value_colors_element_0_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_colors_element_0_3  = value_colors_element_0 as Resource
                valueSerializer.writeResource(value_colors_element_0_3)
            }
            const value_colors_element_1  = value_colors_element[1]
            valueSerializer.writeNumber(value_colors_element_1)
        }
        const value_repeating  = value.repeating
        let value_repeating_type : int32 = RuntimeType.UNDEFINED
        value_repeating_type = runtimeType(value_repeating)
        valueSerializer.writeInt8(value_repeating_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_repeating_type)) {
            const value_repeating_value  = value_repeating!
            valueSerializer.writeBoolean(value_repeating_value)
        }
    }
    writeSwipeActionItem(value: SwipeActionItem): void {
        let valueSerializer : Serializer = this
        const value_builder  = value.builder
        let value_builder_type : int32 = RuntimeType.UNDEFINED
        value_builder_type = runtimeType(value_builder)
        valueSerializer.writeInt8(value_builder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_builder_type)) {
            const value_builder_value  = value_builder!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_builder_value))
        }
        const value_builderComponent  = value.builderComponent
        let value_builderComponent_type : int32 = RuntimeType.UNDEFINED
        value_builderComponent_type = runtimeType(value_builderComponent)
        valueSerializer.writeInt8(value_builderComponent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_builderComponent_type)) {
            const value_builderComponent_value  = value_builderComponent!
            valueSerializer.writeComponentContent(value_builderComponent_value)
        }
        const value_actionAreaDistance  = value.actionAreaDistance
        let value_actionAreaDistance_type : int32 = RuntimeType.UNDEFINED
        value_actionAreaDistance_type = runtimeType(value_actionAreaDistance)
        valueSerializer.writeInt8(value_actionAreaDistance_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_actionAreaDistance_type)) {
            const value_actionAreaDistance_value  = value_actionAreaDistance!
            valueSerializer.writeLength(value_actionAreaDistance_value)
        }
        const value_onAction  = value.onAction
        let value_onAction_type : int32 = RuntimeType.UNDEFINED
        value_onAction_type = runtimeType(value_onAction)
        valueSerializer.writeInt8(value_onAction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAction_type)) {
            const value_onAction_value  = value_onAction!
            valueSerializer.holdAndWriteCallback(value_onAction_value)
        }
        const value_onEnterActionArea  = value.onEnterActionArea
        let value_onEnterActionArea_type : int32 = RuntimeType.UNDEFINED
        value_onEnterActionArea_type = runtimeType(value_onEnterActionArea)
        valueSerializer.writeInt8(value_onEnterActionArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onEnterActionArea_type)) {
            const value_onEnterActionArea_value  = value_onEnterActionArea!
            valueSerializer.holdAndWriteCallback(value_onEnterActionArea_value)
        }
        const value_onExitActionArea  = value.onExitActionArea
        let value_onExitActionArea_type : int32 = RuntimeType.UNDEFINED
        value_onExitActionArea_type = runtimeType(value_onExitActionArea)
        valueSerializer.writeInt8(value_onExitActionArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onExitActionArea_type)) {
            const value_onExitActionArea_value  = value_onExitActionArea!
            valueSerializer.holdAndWriteCallback(value_onExitActionArea_value)
        }
        const value_onStateChange  = value.onStateChange
        let value_onStateChange_type : int32 = RuntimeType.UNDEFINED
        value_onStateChange_type = runtimeType(value_onStateChange)
        valueSerializer.writeInt8(value_onStateChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onStateChange_type)) {
            const value_onStateChange_value  = value_onStateChange!
            valueSerializer.holdAndWriteCallback(value_onStateChange_value)
        }
    }
    writeSwipeGestureHandlerOptions(value: SwipeGestureHandlerOptions): void {
        let valueSerializer : Serializer = this
        const value_isFingerCountLimited  = value.isFingerCountLimited
        let value_isFingerCountLimited_type : int32 = RuntimeType.UNDEFINED
        value_isFingerCountLimited_type = runtimeType(value_isFingerCountLimited)
        valueSerializer.writeInt8(value_isFingerCountLimited_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isFingerCountLimited_type)) {
            const value_isFingerCountLimited_value  = value_isFingerCountLimited!
            valueSerializer.writeBoolean(value_isFingerCountLimited_value)
        }
        const value_fingers  = value.fingers
        let value_fingers_type : int32 = RuntimeType.UNDEFINED
        value_fingers_type = runtimeType(value_fingers)
        valueSerializer.writeInt8(value_fingers_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fingers_type)) {
            const value_fingers_value  = value_fingers!
            valueSerializer.writeNumber(value_fingers_value)
        }
        const value_direction  = value.direction
        let value_direction_type : int32 = RuntimeType.UNDEFINED
        value_direction_type = runtimeType(value_direction)
        valueSerializer.writeInt8(value_direction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_direction_type)) {
            const value_direction_value  = (value_direction as SwipeDirection)
            valueSerializer.writeInt32(TypeChecker.SwipeDirection_ToNumeric(value_direction_value))
        }
        const value_speed  = value.speed
        let value_speed_type : int32 = RuntimeType.UNDEFINED
        value_speed_type = runtimeType(value_speed)
        valueSerializer.writeInt8(value_speed_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_speed_type)) {
            const value_speed_value  = value_speed!
            valueSerializer.writeNumber(value_speed_value)
        }
    }
    writeSwiperAutoFill(value: SwiperAutoFill): void {
        let valueSerializer : Serializer = this
        const value_minSize  = value.minSize
        let value_minSize_type : int32 = RuntimeType.UNDEFINED
        value_minSize_type = runtimeType(value_minSize)
        if (RuntimeType.STRING == value_minSize_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_minSize_0  = value_minSize as string
            valueSerializer.writeString(value_minSize_0)
        }
        else if (RuntimeType.NUMBER == value_minSize_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_minSize_1  = value_minSize as number
            valueSerializer.writeNumber(value_minSize_1)
        }
    }
    writeSwiperContentAnimatedTransition(value: SwiperContentAnimatedTransition): void {
        let valueSerializer : Serializer = this
        const value_timeout  = value.timeout
        let value_timeout_type : int32 = RuntimeType.UNDEFINED
        value_timeout_type = runtimeType(value_timeout)
        valueSerializer.writeInt8(value_timeout_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_timeout_type)) {
            const value_timeout_value  = value_timeout!
            valueSerializer.writeNumber(value_timeout_value)
        }
        const value_transition  = value.transition
        valueSerializer.holdAndWriteCallback(value_transition)
    }
    writeSystemAdaptiveOptions(value: SystemAdaptiveOptions): void {
        let valueSerializer : Serializer = this
        const value_disableSystemAdaptation  = value.disableSystemAdaptation
        let value_disableSystemAdaptation_type : int32 = RuntimeType.UNDEFINED
        value_disableSystemAdaptation_type = runtimeType(value_disableSystemAdaptation)
        valueSerializer.writeInt8(value_disableSystemAdaptation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disableSystemAdaptation_type)) {
            const value_disableSystemAdaptation_value  = value_disableSystemAdaptation!
            valueSerializer.writeBoolean(value_disableSystemAdaptation_value)
        }
    }
    writeSystemBarStyle(value: SystemBarStyle): void {
        let valueSerializer : Serializer = this
        const value_statusBarContentColor  = value.statusBarContentColor
        let value_statusBarContentColor_type : int32 = RuntimeType.UNDEFINED
        value_statusBarContentColor_type = runtimeType(value_statusBarContentColor)
        valueSerializer.writeInt8(value_statusBarContentColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_statusBarContentColor_type)) {
            const value_statusBarContentColor_value  = value_statusBarContentColor!
            valueSerializer.writeString(value_statusBarContentColor_value)
        }
    }
    writeTabBarSymbol(value: TabBarSymbol): void {
        let valueSerializer : Serializer = this
        const value_normal  = value.normal
        valueSerializer.writeSymbolGlyphModifier(value_normal)
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            valueSerializer.writeSymbolGlyphModifier(value_selected_value)
        }
    }
    writeTabContentAnimatedTransition(value: TabContentAnimatedTransition): void {
        let valueSerializer : Serializer = this
        const value_timeout  = value.timeout
        let value_timeout_type : int32 = RuntimeType.UNDEFINED
        value_timeout_type = runtimeType(value_timeout)
        valueSerializer.writeInt8(value_timeout_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_timeout_type)) {
            const value_timeout_value  = value_timeout!
            valueSerializer.writeNumber(value_timeout_value)
        }
        const value_transition  = value.transition
        valueSerializer.holdAndWriteCallback(value_transition)
    }
    writeTapGestureParameters(value: TapGestureParameters): void {
        let valueSerializer : Serializer = this
        const value_isFingerCountLimited  = value.isFingerCountLimited
        let value_isFingerCountLimited_type : int32 = RuntimeType.UNDEFINED
        value_isFingerCountLimited_type = runtimeType(value_isFingerCountLimited)
        valueSerializer.writeInt8(value_isFingerCountLimited_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isFingerCountLimited_type)) {
            const value_isFingerCountLimited_value  = value_isFingerCountLimited!
            valueSerializer.writeBoolean(value_isFingerCountLimited_value)
        }
        const value_count  = value.count
        let value_count_type : int32 = RuntimeType.UNDEFINED
        value_count_type = runtimeType(value_count)
        valueSerializer.writeInt8(value_count_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_count_type)) {
            const value_count_value  = value_count!
            valueSerializer.writeNumber(value_count_value)
        }
        const value_fingers  = value.fingers
        let value_fingers_type : int32 = RuntimeType.UNDEFINED
        value_fingers_type = runtimeType(value_fingers)
        valueSerializer.writeInt8(value_fingers_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fingers_type)) {
            const value_fingers_value  = value_fingers!
            valueSerializer.writeNumber(value_fingers_value)
        }
        const value_distanceThreshold  = value.distanceThreshold
        let value_distanceThreshold_type : int32 = RuntimeType.UNDEFINED
        value_distanceThreshold_type = runtimeType(value_distanceThreshold)
        valueSerializer.writeInt8(value_distanceThreshold_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_distanceThreshold_type)) {
            const value_distanceThreshold_value  = value_distanceThreshold!
            valueSerializer.writeNumber(value_distanceThreshold_value)
        }
    }
    writeTextBox(value: TextBox): void {
        let valueSerializer : Serializer = this
        const value_rect  = value.rect
        valueSerializer.writeRect(value_rect)
        const value_direction  = value.direction
        valueSerializer.writeInt32(TypeChecker.TextDirection_ToNumeric(value_direction))
    }
    writeTextClockOptions(value: TextClockOptions): void {
        let valueSerializer : Serializer = this
        const value_timeZoneOffset  = value.timeZoneOffset
        let value_timeZoneOffset_type : int32 = RuntimeType.UNDEFINED
        value_timeZoneOffset_type = runtimeType(value_timeZoneOffset)
        valueSerializer.writeInt8(value_timeZoneOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_timeZoneOffset_type)) {
            const value_timeZoneOffset_value  = value_timeZoneOffset!
            valueSerializer.writeNumber(value_timeZoneOffset_value)
        }
        const value_controller  = value.controller
        let value_controller_type : int32 = RuntimeType.UNDEFINED
        value_controller_type = runtimeType(value_controller)
        valueSerializer.writeInt8(value_controller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_controller_type)) {
            const value_controller_value  = value_controller!
            valueSerializer.writeTextClockController(value_controller_value)
        }
    }
    writeTextContentControllerOptions(value: TextContentControllerOptions): void {
        let valueSerializer : Serializer = this
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeNumber(value_offset_value)
        }
    }
    writeTextMarqueeOptions(value: TextMarqueeOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        valueSerializer.writeBoolean(value_start)
        const value_step  = value.step
        let value_step_type : int32 = RuntimeType.UNDEFINED
        value_step_type = runtimeType(value_step)
        valueSerializer.writeInt8(value_step_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_step_type)) {
            const value_step_value  = value_step!
            valueSerializer.writeNumber(value_step_value)
        }
        const value_loop  = value.loop
        let value_loop_type : int32 = RuntimeType.UNDEFINED
        value_loop_type = runtimeType(value_loop)
        valueSerializer.writeInt8(value_loop_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_loop_type)) {
            const value_loop_value  = value_loop!
            valueSerializer.writeNumber(value_loop_value)
        }
        const value_fromStart  = value.fromStart
        let value_fromStart_type : int32 = RuntimeType.UNDEFINED
        value_fromStart_type = runtimeType(value_fromStart)
        valueSerializer.writeInt8(value_fromStart_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fromStart_type)) {
            const value_fromStart_value  = value_fromStart!
            valueSerializer.writeBoolean(value_fromStart_value)
        }
        const value_delay  = value.delay
        let value_delay_type : int32 = RuntimeType.UNDEFINED
        value_delay_type = runtimeType(value_delay)
        valueSerializer.writeInt8(value_delay_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_delay_type)) {
            const value_delay_value  = value_delay!
            valueSerializer.writeNumber(value_delay_value)
        }
        const value_fadeout  = value.fadeout
        let value_fadeout_type : int32 = RuntimeType.UNDEFINED
        value_fadeout_type = runtimeType(value_fadeout)
        valueSerializer.writeInt8(value_fadeout_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fadeout_type)) {
            const value_fadeout_value  = value_fadeout!
            valueSerializer.writeBoolean(value_fadeout_value)
        }
        const value_marqueeStartPolicy  = value.marqueeStartPolicy
        let value_marqueeStartPolicy_type : int32 = RuntimeType.UNDEFINED
        value_marqueeStartPolicy_type = runtimeType(value_marqueeStartPolicy)
        valueSerializer.writeInt8(value_marqueeStartPolicy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_marqueeStartPolicy_type)) {
            const value_marqueeStartPolicy_value  = (value_marqueeStartPolicy as MarqueeStartPolicy)
            valueSerializer.writeInt32(TypeChecker.MarqueeStartPolicy_ToNumeric(value_marqueeStartPolicy_value))
        }
    }
    writeTextRange(value: TextRange): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeNumber(value_start_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeNumber(value_end_value)
        }
    }
    writeTextShadowStyle(value: TextShadowStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextStyle_alert_dialog(value: TextStyle_alert_dialog): void {
        let valueSerializer : Serializer = this
        const value_wordBreak  = value.wordBreak
        let value_wordBreak_type : int32 = RuntimeType.UNDEFINED
        value_wordBreak_type = runtimeType(value_wordBreak)
        valueSerializer.writeInt8(value_wordBreak_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_wordBreak_type)) {
            const value_wordBreak_value  = (value_wordBreak as WordBreak)
            valueSerializer.writeInt32(TypeChecker.WordBreak_ToNumeric(value_wordBreak_value))
        }
    }
    writeTextTimerOptions(value: TextTimerOptions): void {
        let valueSerializer : Serializer = this
        const value_isCountDown  = value.isCountDown
        let value_isCountDown_type : int32 = RuntimeType.UNDEFINED
        value_isCountDown_type = runtimeType(value_isCountDown)
        valueSerializer.writeInt8(value_isCountDown_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isCountDown_type)) {
            const value_isCountDown_value  = value_isCountDown!
            valueSerializer.writeBoolean(value_isCountDown_value)
        }
        const value_count  = value.count
        let value_count_type : int32 = RuntimeType.UNDEFINED
        value_count_type = runtimeType(value_count)
        valueSerializer.writeInt8(value_count_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_count_type)) {
            const value_count_value  = value_count!
            valueSerializer.writeNumber(value_count_value)
        }
        const value_controller  = value.controller
        let value_controller_type : int32 = RuntimeType.UNDEFINED
        value_controller_type = runtimeType(value_controller)
        valueSerializer.writeInt8(value_controller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_controller_type)) {
            const value_controller_value  = value_controller!
            valueSerializer.writeTextTimerController(value_controller_value)
        }
    }
    writeTimePickerOptions(value: TimePickerOptions): void {
        let valueSerializer : Serializer = this
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            valueSerializer.writeInt64((value_selected_value.getTime() as int64))
        }
        const value_format  = value.format
        let value_format_type : int32 = RuntimeType.UNDEFINED
        value_format_type = runtimeType(value_format)
        valueSerializer.writeInt8(value_format_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_format_type)) {
            const value_format_value  = (value_format as TimePickerFormat)
            valueSerializer.writeInt32(TypeChecker.TimePickerFormat_ToNumeric(value_format_value))
        }
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeInt64((value_start_value.getTime() as int64))
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeInt64((value_end_value.getTime() as int64))
        }
    }
    writeTipsOptions(value: TipsOptions): void {
        let valueSerializer : Serializer = this
        const value_appearingTime  = value.appearingTime
        let value_appearingTime_type : int32 = RuntimeType.UNDEFINED
        value_appearingTime_type = runtimeType(value_appearingTime)
        valueSerializer.writeInt8(value_appearingTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_appearingTime_type)) {
            const value_appearingTime_value  = value_appearingTime!
            valueSerializer.writeNumber(value_appearingTime_value)
        }
        const value_disappearingTime  = value.disappearingTime
        let value_disappearingTime_type : int32 = RuntimeType.UNDEFINED
        value_disappearingTime_type = runtimeType(value_disappearingTime)
        valueSerializer.writeInt8(value_disappearingTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disappearingTime_type)) {
            const value_disappearingTime_value  = value_disappearingTime!
            valueSerializer.writeNumber(value_disappearingTime_value)
        }
        const value_appearingTimeWithContinuousOperation  = value.appearingTimeWithContinuousOperation
        let value_appearingTimeWithContinuousOperation_type : int32 = RuntimeType.UNDEFINED
        value_appearingTimeWithContinuousOperation_type = runtimeType(value_appearingTimeWithContinuousOperation)
        valueSerializer.writeInt8(value_appearingTimeWithContinuousOperation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_appearingTimeWithContinuousOperation_type)) {
            const value_appearingTimeWithContinuousOperation_value  = value_appearingTimeWithContinuousOperation!
            valueSerializer.writeNumber(value_appearingTimeWithContinuousOperation_value)
        }
        const value_disappearingTimeWithContinuousOperation  = value.disappearingTimeWithContinuousOperation
        let value_disappearingTimeWithContinuousOperation_type : int32 = RuntimeType.UNDEFINED
        value_disappearingTimeWithContinuousOperation_type = runtimeType(value_disappearingTimeWithContinuousOperation)
        valueSerializer.writeInt8(value_disappearingTimeWithContinuousOperation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disappearingTimeWithContinuousOperation_type)) {
            const value_disappearingTimeWithContinuousOperation_value  = value_disappearingTimeWithContinuousOperation!
            valueSerializer.writeNumber(value_disappearingTimeWithContinuousOperation_value)
        }
        const value_enableArrow  = value.enableArrow
        let value_enableArrow_type : int32 = RuntimeType.UNDEFINED
        value_enableArrow_type = runtimeType(value_enableArrow)
        valueSerializer.writeInt8(value_enableArrow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableArrow_type)) {
            const value_enableArrow_value  = value_enableArrow!
            valueSerializer.writeBoolean(value_enableArrow_value)
        }
        const value_arrowPointPosition  = value.arrowPointPosition
        let value_arrowPointPosition_type : int32 = RuntimeType.UNDEFINED
        value_arrowPointPosition_type = runtimeType(value_arrowPointPosition)
        valueSerializer.writeInt8(value_arrowPointPosition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowPointPosition_type)) {
            const value_arrowPointPosition_value  = (value_arrowPointPosition as ArrowPointPosition)
            valueSerializer.writeInt32(TypeChecker.ArrowPointPosition_ToNumeric(value_arrowPointPosition_value))
        }
        const value_arrowWidth  = value.arrowWidth
        let value_arrowWidth_type : int32 = RuntimeType.UNDEFINED
        value_arrowWidth_type = runtimeType(value_arrowWidth)
        valueSerializer.writeInt8(value_arrowWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowWidth_type)) {
            const value_arrowWidth_value  = value_arrowWidth!
            valueSerializer.writeLength(value_arrowWidth_value)
        }
        const value_arrowHeight  = value.arrowHeight
        let value_arrowHeight_type : int32 = RuntimeType.UNDEFINED
        value_arrowHeight_type = runtimeType(value_arrowHeight)
        valueSerializer.writeInt8(value_arrowHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowHeight_type)) {
            const value_arrowHeight_value  = value_arrowHeight!
            valueSerializer.writeLength(value_arrowHeight_value)
        }
    }
    writeToggleOptions(value: ToggleOptions): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeInt32(TypeChecker.ToggleType_ToNumeric(value_type))
        const value_isOn  = value.isOn
        let value_isOn_type : int32 = RuntimeType.UNDEFINED
        value_isOn_type = runtimeType(value_isOn)
        valueSerializer.writeInt8(value_isOn_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isOn_type)) {
            const value_isOn_value  = value_isOn!
            valueSerializer.writeBoolean(value_isOn_value)
        }
    }
    writeTouchObject(value: TouchObject): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeInt32(TypeChecker.TouchType_ToNumeric(value_type))
        const value_id  = value.id
        valueSerializer.writeNumber(value_id)
        const value_displayX  = value.displayX
        valueSerializer.writeNumber(value_displayX)
        const value_displayY  = value.displayY
        valueSerializer.writeNumber(value_displayY)
        const value_windowX  = value.windowX
        valueSerializer.writeNumber(value_windowX)
        const value_windowY  = value.windowY
        valueSerializer.writeNumber(value_windowY)
        const value_screenX  = value.screenX
        valueSerializer.writeNumber(value_screenX)
        const value_screenY  = value.screenY
        valueSerializer.writeNumber(value_screenY)
        const value_x  = value.x
        valueSerializer.writeNumber(value_x)
        const value_y  = value.y
        valueSerializer.writeNumber(value_y)
        const value_hand  = value.hand
        let value_hand_type : int32 = RuntimeType.UNDEFINED
        value_hand_type = runtimeType(value_hand)
        valueSerializer.writeInt8(value_hand_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hand_type)) {
            const value_hand_value  = (value_hand as InteractionHand)
            valueSerializer.writeInt32(TypeChecker.InteractionHand_ToNumeric(value_hand_value))
        }
        const value_pressedTime  = value.pressedTime
        let value_pressedTime_type : int32 = RuntimeType.UNDEFINED
        value_pressedTime_type = runtimeType(value_pressedTime)
        valueSerializer.writeInt8(value_pressedTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_pressedTime_type)) {
            const value_pressedTime_value  = value_pressedTime!
            valueSerializer.writeNumber(value_pressedTime_value)
        }
        const value_pressure  = value.pressure
        let value_pressure_type : int32 = RuntimeType.UNDEFINED
        value_pressure_type = runtimeType(value_pressure)
        valueSerializer.writeInt8(value_pressure_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_pressure_type)) {
            const value_pressure_value  = value_pressure!
            valueSerializer.writeNumber(value_pressure_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeNumber(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeNumber(value_height_value)
        }
    }
    writeTouchResult(value: TouchResult): void {
        let valueSerializer : Serializer = this
        const value_strategy  = value.strategy
        valueSerializer.writeInt32(TypeChecker.TouchTestStrategy_ToNumeric(value_strategy))
        const value_id  = value.id
        let value_id_type : int32 = RuntimeType.UNDEFINED
        value_id_type = runtimeType(value_id)
        valueSerializer.writeInt8(value_id_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_id_type)) {
            const value_id_value  = value_id!
            valueSerializer.writeString(value_id_value)
        }
    }
    writeTransformationMatrix(value: TransformationMatrix): void {
        let valueSerializer : Serializer = this
        const value_matrix4x4  = value.matrix4x4
        valueSerializer.writeInt32(value_matrix4x4.length as int32)
        for (let i = 0; i < value_matrix4x4.length; i++) {
            const value_matrix4x4_element : number = value_matrix4x4[i]
            valueSerializer.writeNumber(value_matrix4x4_element)
        }
    }
    writeTranslateOption(value: TranslateOption): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            valueSerializer.writeNumber(value_x_value)
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            valueSerializer.writeNumber(value_y_value)
        }
        const value_z  = value.z
        let value_z_type : int32 = RuntimeType.UNDEFINED
        value_z_type = runtimeType(value_z)
        valueSerializer.writeInt8(value_z_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_z_type)) {
            const value_z_value  = value_z!
            valueSerializer.writeNumber(value_z_value)
        }
    }
    writeTranslateOptions(value: TranslateOptions): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            let value_x_value_type : int32 = RuntimeType.UNDEFINED
            value_x_value_type = runtimeType(value_x_value)
            if (RuntimeType.NUMBER == value_x_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_x_value_0  = value_x_value as number
                valueSerializer.writeNumber(value_x_value_0)
            }
            else if (RuntimeType.STRING == value_x_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_x_value_1  = value_x_value as string
                valueSerializer.writeString(value_x_value_1)
            }
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            let value_y_value_type : int32 = RuntimeType.UNDEFINED
            value_y_value_type = runtimeType(value_y_value)
            if (RuntimeType.NUMBER == value_y_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_y_value_0  = value_y_value as number
                valueSerializer.writeNumber(value_y_value_0)
            }
            else if (RuntimeType.STRING == value_y_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_y_value_1  = value_y_value as string
                valueSerializer.writeString(value_y_value_1)
            }
        }
        const value_z  = value.z
        let value_z_type : int32 = RuntimeType.UNDEFINED
        value_z_type = runtimeType(value_z)
        valueSerializer.writeInt8(value_z_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_z_type)) {
            const value_z_value  = value_z!
            let value_z_value_type : int32 = RuntimeType.UNDEFINED
            value_z_value_type = runtimeType(value_z_value)
            if (RuntimeType.NUMBER == value_z_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_z_value_0  = value_z_value as number
                valueSerializer.writeNumber(value_z_value_0)
            }
            else if (RuntimeType.STRING == value_z_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_z_value_1  = value_z_value as string
                valueSerializer.writeString(value_z_value_1)
            }
        }
    }
    writeUIExtensionOptions(value: UIExtensionOptions): void {
        let valueSerializer : Serializer = this
        const value_isTransferringCaller  = value.isTransferringCaller
        let value_isTransferringCaller_type : int32 = RuntimeType.UNDEFINED
        value_isTransferringCaller_type = runtimeType(value_isTransferringCaller)
        valueSerializer.writeInt8(value_isTransferringCaller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isTransferringCaller_type)) {
            const value_isTransferringCaller_value  = value_isTransferringCaller!
            valueSerializer.writeBoolean(value_isTransferringCaller_value)
        }
        const value_placeholder  = value.placeholder
        let value_placeholder_type : int32 = RuntimeType.UNDEFINED
        value_placeholder_type = runtimeType(value_placeholder)
        valueSerializer.writeInt8(value_placeholder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placeholder_type)) {
            const value_placeholder_value  = value_placeholder!
            valueSerializer.writeComponentContent(value_placeholder_value)
        }
        const value_areaChangePlaceholder  = value.areaChangePlaceholder
        let value_areaChangePlaceholder_type : int32 = RuntimeType.UNDEFINED
        value_areaChangePlaceholder_type = runtimeType(value_areaChangePlaceholder)
        valueSerializer.writeInt8(value_areaChangePlaceholder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_areaChangePlaceholder_type)) {
            const value_areaChangePlaceholder_value  = value_areaChangePlaceholder!
            valueSerializer.writeInt32(value_areaChangePlaceholder_value.size as int32 as int32)
            for (const pair of value_areaChangePlaceholder_value) {
                const value_areaChangePlaceholder_value_key = pair[0]
                const value_areaChangePlaceholder_value_value = pair[1]
                valueSerializer.writeString(value_areaChangePlaceholder_value_key)
                valueSerializer.writeComponentContent(value_areaChangePlaceholder_value_value)
            }
        }
        const value_dpiFollowStrategy  = value.dpiFollowStrategy
        let value_dpiFollowStrategy_type : int32 = RuntimeType.UNDEFINED
        value_dpiFollowStrategy_type = runtimeType(value_dpiFollowStrategy)
        valueSerializer.writeInt8(value_dpiFollowStrategy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dpiFollowStrategy_type)) {
            const value_dpiFollowStrategy_value  = (value_dpiFollowStrategy as DpiFollowStrategy)
            valueSerializer.writeInt32(TypeChecker.DpiFollowStrategy_ToNumeric(value_dpiFollowStrategy_value))
        }
        const value_windowModeFollowStrategy  = value.windowModeFollowStrategy
        let value_windowModeFollowStrategy_type : int32 = RuntimeType.UNDEFINED
        value_windowModeFollowStrategy_type = runtimeType(value_windowModeFollowStrategy)
        valueSerializer.writeInt8(value_windowModeFollowStrategy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_windowModeFollowStrategy_type)) {
            const value_windowModeFollowStrategy_value  = (value_windowModeFollowStrategy as WindowModeFollowStrategy)
            valueSerializer.writeInt32(TypeChecker.WindowModeFollowStrategy_ToNumeric(value_windowModeFollowStrategy_value))
        }
    }
    writeViewportRect(value: ViewportRect): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            let value_x_value_type : int32 = RuntimeType.UNDEFINED
            value_x_value_type = runtimeType(value_x_value)
            if (RuntimeType.NUMBER == value_x_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_x_value_0  = value_x_value as number
                valueSerializer.writeNumber(value_x_value_0)
            }
            else if (RuntimeType.STRING == value_x_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_x_value_1  = value_x_value as string
                valueSerializer.writeString(value_x_value_1)
            }
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            let value_y_value_type : int32 = RuntimeType.UNDEFINED
            value_y_value_type = runtimeType(value_y_value)
            if (RuntimeType.NUMBER == value_y_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_y_value_0  = value_y_value as number
                valueSerializer.writeNumber(value_y_value_0)
            }
            else if (RuntimeType.STRING == value_y_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_y_value_1  = value_y_value as string
                valueSerializer.writeString(value_y_value_1)
            }
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_0)
            }
            else if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as string
                valueSerializer.writeString(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_0)
            }
            else if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as string
                valueSerializer.writeString(value_height_value_1)
            }
        }
    }
    writeVisibleAreaEventOptions(value: VisibleAreaEventOptions): void {
        let valueSerializer : Serializer = this
        const value_ratios  = value.ratios
        valueSerializer.writeInt32(value_ratios.length as int32)
        for (let i = 0; i < value_ratios.length; i++) {
            const value_ratios_element : number = value_ratios[i]
            valueSerializer.writeNumber(value_ratios_element)
        }
        const value_expectedUpdateInterval  = value.expectedUpdateInterval
        let value_expectedUpdateInterval_type : int32 = RuntimeType.UNDEFINED
        value_expectedUpdateInterval_type = runtimeType(value_expectedUpdateInterval)
        valueSerializer.writeInt8(value_expectedUpdateInterval_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_expectedUpdateInterval_type)) {
            const value_expectedUpdateInterval_value  = value_expectedUpdateInterval!
            valueSerializer.writeNumber(value_expectedUpdateInterval_value)
        }
    }
    writeVisibleListContentInfo(value: VisibleListContentInfo): void {
        let valueSerializer : Serializer = this
        const value_index  = value.index
        valueSerializer.writeNumber(value_index)
        const value_itemGroupArea  = value.itemGroupArea
        let value_itemGroupArea_type : int32 = RuntimeType.UNDEFINED
        value_itemGroupArea_type = runtimeType(value_itemGroupArea)
        valueSerializer.writeInt8(value_itemGroupArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_itemGroupArea_type)) {
            const value_itemGroupArea_value  = (value_itemGroupArea as ListItemGroupArea)
            valueSerializer.writeInt32(TypeChecker.ListItemGroupArea_ToNumeric(value_itemGroupArea_value))
        }
        const value_itemIndexInGroup  = value.itemIndexInGroup
        let value_itemIndexInGroup_type : int32 = RuntimeType.UNDEFINED
        value_itemIndexInGroup_type = runtimeType(value_itemIndexInGroup)
        valueSerializer.writeInt8(value_itemIndexInGroup_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_itemIndexInGroup_type)) {
            const value_itemIndexInGroup_value  = value_itemIndexInGroup!
            valueSerializer.writeNumber(value_itemIndexInGroup_value)
        }
    }
    writeWant(value: Want): void {
        let valueSerializer : Serializer = this
        const value_bundleName  = value.bundleName
        let value_bundleName_type : int32 = RuntimeType.UNDEFINED
        value_bundleName_type = runtimeType(value_bundleName)
        valueSerializer.writeInt8(value_bundleName_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bundleName_type)) {
            const value_bundleName_value  = value_bundleName!
            valueSerializer.writeString(value_bundleName_value)
        }
        const value_abilityName  = value.abilityName
        let value_abilityName_type : int32 = RuntimeType.UNDEFINED
        value_abilityName_type = runtimeType(value_abilityName)
        valueSerializer.writeInt8(value_abilityName_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_abilityName_type)) {
            const value_abilityName_value  = value_abilityName!
            valueSerializer.writeString(value_abilityName_value)
        }
        const value_deviceId  = value.deviceId
        let value_deviceId_type : int32 = RuntimeType.UNDEFINED
        value_deviceId_type = runtimeType(value_deviceId)
        valueSerializer.writeInt8(value_deviceId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_deviceId_type)) {
            const value_deviceId_value  = value_deviceId!
            valueSerializer.writeString(value_deviceId_value)
        }
        const value_uri  = value.uri
        let value_uri_type : int32 = RuntimeType.UNDEFINED
        value_uri_type = runtimeType(value_uri)
        valueSerializer.writeInt8(value_uri_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_uri_type)) {
            const value_uri_value  = value_uri!
            valueSerializer.writeString(value_uri_value)
        }
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = value_type!
            valueSerializer.writeString(value_type_value)
        }
        const value_flags  = value.flags
        let value_flags_type : int32 = RuntimeType.UNDEFINED
        value_flags_type = runtimeType(value_flags)
        valueSerializer.writeInt8(value_flags_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_flags_type)) {
            const value_flags_value  = value_flags!
            valueSerializer.writeNumber(value_flags_value)
        }
        const value_action  = value.action
        let value_action_type : int32 = RuntimeType.UNDEFINED
        value_action_type = runtimeType(value_action)
        valueSerializer.writeInt8(value_action_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_action_type)) {
            const value_action_value  = value_action!
            valueSerializer.writeString(value_action_value)
        }
        const value_parameters  = value.parameters
        let value_parameters_type : int32 = RuntimeType.UNDEFINED
        value_parameters_type = runtimeType(value_parameters)
        valueSerializer.writeInt8(value_parameters_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_parameters_type)) {
            const value_parameters_value  = value_parameters!
            valueSerializer.writeInt32(value_parameters_value.size as int32 as int32)
            for (const pair of value_parameters_value) {
                const value_parameters_value_key = pair[0]
                const value_parameters_value_value = pair[1]
                valueSerializer.writeString(value_parameters_value_key)
                valueSerializer.holdAndWriteObject(value_parameters_value_value)
            }
        }
        const value_entities  = value.entities
        let value_entities_type : int32 = RuntimeType.UNDEFINED
        value_entities_type = runtimeType(value_entities)
        valueSerializer.writeInt8(value_entities_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_entities_type)) {
            const value_entities_value  = value_entities!
            valueSerializer.writeInt32(value_entities_value.length as int32)
            for (let i = 0; i < value_entities_value.length; i++) {
                const value_entities_value_element : string = value_entities_value[i]
                valueSerializer.writeString(value_entities_value_element)
            }
        }
        const value_moduleName  = value.moduleName
        let value_moduleName_type : int32 = RuntimeType.UNDEFINED
        value_moduleName_type = runtimeType(value_moduleName)
        valueSerializer.writeInt8(value_moduleName_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_moduleName_type)) {
            const value_moduleName_value  = value_moduleName!
            valueSerializer.writeString(value_moduleName_value)
        }
    }
    writeWaterFlowOptions(value: WaterFlowOptions): void {
        let valueSerializer : Serializer = this
        const value_footer  = value.footer
        let value_footer_type : int32 = RuntimeType.UNDEFINED
        value_footer_type = runtimeType(value_footer)
        valueSerializer.writeInt8(value_footer_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_footer_type)) {
            const value_footer_value  = value_footer!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_footer_value))
        }
        const value_footerContent  = undefined
        let value_footerContent_type : int32 = RuntimeType.UNDEFINED
        value_footerContent_type = runtimeType(value_footerContent)
        valueSerializer.writeInt8(value_footerContent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_footerContent_type)) {
            const value_footerContent_value  = value_footerContent!
            valueSerializer.writeComponentContent(value_footerContent_value)
        }
        const value_scroller  = value.scroller
        let value_scroller_type : int32 = RuntimeType.UNDEFINED
        value_scroller_type = runtimeType(value_scroller)
        valueSerializer.writeInt8(value_scroller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scroller_type)) {
            const value_scroller_value  = value_scroller!
            valueSerializer.writeScroller(value_scroller_value)
        }
        const value_sections  = value.sections
        let value_sections_type : int32 = RuntimeType.UNDEFINED
        value_sections_type = runtimeType(value_sections)
        valueSerializer.writeInt8(value_sections_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_sections_type)) {
            const value_sections_value  = value_sections!
            valueSerializer.writeWaterFlowSections(value_sections_value)
        }
        const value_layoutMode  = value.layoutMode
        let value_layoutMode_type : int32 = RuntimeType.UNDEFINED
        value_layoutMode_type = runtimeType(value_layoutMode)
        valueSerializer.writeInt8(value_layoutMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_layoutMode_type)) {
            const value_layoutMode_value  = (value_layoutMode as WaterFlowLayoutMode)
            valueSerializer.writeInt32(TypeChecker.WaterFlowLayoutMode_ToNumeric(value_layoutMode_value))
        }
    }
    writeWebKeyboardCallbackInfo(value: WebKeyboardCallbackInfo): void {
        let valueSerializer : Serializer = this
        const value_controller  = value.controller
        valueSerializer.writeWebKeyboardController(value_controller)
        const value_attributes  = value.attributes
        valueSerializer.writeInt32(value_attributes.size as int32 as int32)
        for (const pair of value_attributes) {
            const value_attributes_key = pair[0]
            const value_attributes_value = pair[1]
            valueSerializer.writeString(value_attributes_key)
            valueSerializer.writeString(value_attributes_value)
        }
    }
    writeWebKeyboardOptions(value: WebKeyboardOptions): void {
        let valueSerializer : Serializer = this
        const value_useSystemKeyboard  = value.useSystemKeyboard
        valueSerializer.writeBoolean(value_useSystemKeyboard)
        const value_enterKeyType  = value.enterKeyType
        let value_enterKeyType_type : int32 = RuntimeType.UNDEFINED
        value_enterKeyType_type = runtimeType(value_enterKeyType)
        valueSerializer.writeInt8(value_enterKeyType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enterKeyType_type)) {
            const value_enterKeyType_value  = value_enterKeyType!
            valueSerializer.writeNumber(value_enterKeyType_value)
        }
        const value_customKeyboard  = value.customKeyboard
        let value_customKeyboard_type : int32 = RuntimeType.UNDEFINED
        value_customKeyboard_type = runtimeType(value_customKeyboard)
        valueSerializer.writeInt8(value_customKeyboard_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_customKeyboard_type)) {
            const value_customKeyboard_value  = value_customKeyboard!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_customKeyboard_value))
        }
    }
    writeWebMediaOptions(value: WebMediaOptions): void {
        let valueSerializer : Serializer = this
        const value_resumeInterval  = value.resumeInterval
        let value_resumeInterval_type : int32 = RuntimeType.UNDEFINED
        value_resumeInterval_type = runtimeType(value_resumeInterval)
        valueSerializer.writeInt8(value_resumeInterval_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_resumeInterval_type)) {
            const value_resumeInterval_value  = value_resumeInterval!
            valueSerializer.writeNumber(value_resumeInterval_value)
        }
        const value_audioExclusive  = value.audioExclusive
        let value_audioExclusive_type : int32 = RuntimeType.UNDEFINED
        value_audioExclusive_type = runtimeType(value_audioExclusive)
        valueSerializer.writeInt8(value_audioExclusive_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_audioExclusive_type)) {
            const value_audioExclusive_value  = value_audioExclusive!
            valueSerializer.writeBoolean(value_audioExclusive_value)
        }
    }
    writeWebOptions(value: WebOptionsSerializer): void {
        let valueSerializer : Serializer = this
        const value_src  = value.src
        let value_src_type : int32 = RuntimeType.UNDEFINED
        value_src_type = runtimeType(value_src)
        if (RuntimeType.STRING == value_src_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_src_0  = value_src as string
            valueSerializer.writeString(value_src_0)
        }
        else if (RuntimeType.OBJECT == value_src_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_src_1  = value_src as Resource
            valueSerializer.writeResource(value_src_1)
        }
        const value_renderMode  = value.renderMode
        let value_renderMode_type : int32 = RuntimeType.UNDEFINED
        value_renderMode_type = runtimeType(value_renderMode)
        valueSerializer.writeInt8(value_renderMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_renderMode_type)) {
            const value_renderMode_value  = (value_renderMode as RenderMode)
            valueSerializer.writeInt32(TypeChecker.RenderMode_ToNumeric(value_renderMode_value))
        }
        const value_incognitoMode  = value.incognitoMode
        let value_incognitoMode_type : int32 = RuntimeType.UNDEFINED
        value_incognitoMode_type = runtimeType(value_incognitoMode)
        valueSerializer.writeInt8(value_incognitoMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_incognitoMode_type)) {
            const value_incognitoMode_value  = value_incognitoMode!
            valueSerializer.writeBoolean(value_incognitoMode_value)
        }
        const value_sharedRenderProcessToken  = value.sharedRenderProcessToken
        let value_sharedRenderProcessToken_type : int32 = RuntimeType.UNDEFINED
        value_sharedRenderProcessToken_type = runtimeType(value_sharedRenderProcessToken)
        valueSerializer.writeInt8(value_sharedRenderProcessToken_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_sharedRenderProcessToken_type)) {
            const value_sharedRenderProcessToken_value  = value_sharedRenderProcessToken!
            valueSerializer.writeString(value_sharedRenderProcessToken_value)
        }
    }
    writeWorkerOptions(value: WorkerOptions): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = value_type!
            valueSerializer.writeString(value_type_value)
        }
        const value_name  = value.name
        let value_name_type : int32 = RuntimeType.UNDEFINED
        value_name_type = runtimeType(value_name)
        valueSerializer.writeInt8(value_name_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_name_type)) {
            const value_name_value  = value_name!
            valueSerializer.writeString(value_name_value)
        }
        const value_shared  = value.shared
        let value_shared_type : int32 = RuntimeType.UNDEFINED
        value_shared_type = runtimeType(value_shared)
        valueSerializer.writeInt8(value_shared_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shared_type)) {
            const value_shared_value  = value_shared!
            valueSerializer.writeBoolean(value_shared_value)
        }
    }
    writeWrappedBuilder(value: WrappedBuilder): void {
        let valueSerializer : Serializer = this
        const value_builder  = value.builder
        valueSerializer.holdAndWriteCallback(value_builder)
    }
    writeActionSheetButtonOptions(value: ActionSheetButtonOptions): void {
        let valueSerializer : Serializer = this
        const value_enabled  = value.enabled
        let value_enabled_type : int32 = RuntimeType.UNDEFINED
        value_enabled_type = runtimeType(value_enabled)
        valueSerializer.writeInt8(value_enabled_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enabled_type)) {
            const value_enabled_value  = value_enabled!
            valueSerializer.writeBoolean(value_enabled_value)
        }
        const value_defaultFocus  = value.defaultFocus
        let value_defaultFocus_type : int32 = RuntimeType.UNDEFINED
        value_defaultFocus_type = runtimeType(value_defaultFocus)
        valueSerializer.writeInt8(value_defaultFocus_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_defaultFocus_type)) {
            const value_defaultFocus_value  = value_defaultFocus!
            valueSerializer.writeBoolean(value_defaultFocus_value)
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as DialogButtonStyle)
            valueSerializer.writeInt32(TypeChecker.DialogButtonStyle_ToNumeric(value_style_value))
        }
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        if (RuntimeType.STRING == value_value_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_value_0  = value_value as string
            valueSerializer.writeString(value_value_0)
        }
        else if (RuntimeType.OBJECT == value_value_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_value_1  = value_value as Resource
            valueSerializer.writeResource(value_value_1)
        }
        const value_action  = value.action
        valueSerializer.holdAndWriteCallback(value_action)
    }
    writeActionSheetOffset(value: ActionSheetOffset): void {
        let valueSerializer : Serializer = this
        const value_dx  = value.dx
        let value_dx_type : int32 = RuntimeType.UNDEFINED
        value_dx_type = runtimeType(value_dx)
        if (RuntimeType.NUMBER == value_dx_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_dx_0  = value_dx as number
            valueSerializer.writeNumber(value_dx_0)
        }
        else if (RuntimeType.STRING == value_dx_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_dx_1  = value_dx as string
            valueSerializer.writeString(value_dx_1)
        }
        else if (RuntimeType.OBJECT == value_dx_type) {
            valueSerializer.writeInt8(2 as int32)
            const value_dx_2  = value_dx as Resource
            valueSerializer.writeResource(value_dx_2)
        }
        const value_dy  = value.dy
        let value_dy_type : int32 = RuntimeType.UNDEFINED
        value_dy_type = runtimeType(value_dy)
        if (RuntimeType.NUMBER == value_dy_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_dy_0  = value_dy as number
            valueSerializer.writeNumber(value_dy_0)
        }
        else if (RuntimeType.STRING == value_dy_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_dy_1  = value_dy as string
            valueSerializer.writeString(value_dy_1)
        }
        else if (RuntimeType.OBJECT == value_dy_type) {
            valueSerializer.writeInt8(2 as int32)
            const value_dy_2  = value_dy as Resource
            valueSerializer.writeResource(value_dy_2)
        }
    }
    writeAlertDialogButtonBaseOptions(value: AlertDialogButtonBaseOptions): void {
        let valueSerializer : Serializer = this
        const value_enabled  = value.enabled
        let value_enabled_type : int32 = RuntimeType.UNDEFINED
        value_enabled_type = runtimeType(value_enabled)
        valueSerializer.writeInt8(value_enabled_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enabled_type)) {
            const value_enabled_value  = value_enabled!
            valueSerializer.writeBoolean(value_enabled_value)
        }
        const value_defaultFocus  = value.defaultFocus
        let value_defaultFocus_type : int32 = RuntimeType.UNDEFINED
        value_defaultFocus_type = runtimeType(value_defaultFocus)
        valueSerializer.writeInt8(value_defaultFocus_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_defaultFocus_type)) {
            const value_defaultFocus_value  = value_defaultFocus!
            valueSerializer.writeBoolean(value_defaultFocus_value)
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as DialogButtonStyle)
            valueSerializer.writeInt32(TypeChecker.DialogButtonStyle_ToNumeric(value_style_value))
        }
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        if (RuntimeType.STRING == value_value_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_value_0  = value_value as string
            valueSerializer.writeString(value_value_0)
        }
        else if (RuntimeType.OBJECT == value_value_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_value_1  = value_value as Resource
            valueSerializer.writeResource(value_value_1)
        }
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        valueSerializer.writeInt8(value_fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontColor_type)) {
            const value_fontColor_value  = value_fontColor!
            let value_fontColor_value_type : int32 = RuntimeType.UNDEFINED
            value_fontColor_value_type = runtimeType(value_fontColor_value)
            if (TypeChecker.isColor(value_fontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontColor_value_0  = value_fontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontColor_value_1  = value_fontColor_value as number
                valueSerializer.writeNumber(value_fontColor_value_1)
            }
            else if (RuntimeType.STRING == value_fontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontColor_value_2  = value_fontColor_value as string
                valueSerializer.writeString(value_fontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontColor_value_3  = value_fontColor_value as Resource
                valueSerializer.writeResource(value_fontColor_value_3)
            }
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_action  = value.action
        valueSerializer.holdAndWriteCallback(value_action)
    }
    writeAlertDialogButtonOptions(value: AlertDialogButtonOptions): void {
        let valueSerializer : Serializer = this
        const value_enabled  = value.enabled
        let value_enabled_type : int32 = RuntimeType.UNDEFINED
        value_enabled_type = runtimeType(value_enabled)
        valueSerializer.writeInt8(value_enabled_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enabled_type)) {
            const value_enabled_value  = value_enabled!
            valueSerializer.writeBoolean(value_enabled_value)
        }
        const value_defaultFocus  = value.defaultFocus
        let value_defaultFocus_type : int32 = RuntimeType.UNDEFINED
        value_defaultFocus_type = runtimeType(value_defaultFocus)
        valueSerializer.writeInt8(value_defaultFocus_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_defaultFocus_type)) {
            const value_defaultFocus_value  = value_defaultFocus!
            valueSerializer.writeBoolean(value_defaultFocus_value)
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as DialogButtonStyle)
            valueSerializer.writeInt32(TypeChecker.DialogButtonStyle_ToNumeric(value_style_value))
        }
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        if (RuntimeType.STRING == value_value_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_value_0  = value_value as string
            valueSerializer.writeString(value_value_0)
        }
        else if (RuntimeType.OBJECT == value_value_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_value_1  = value_value as Resource
            valueSerializer.writeResource(value_value_1)
        }
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        valueSerializer.writeInt8(value_fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontColor_type)) {
            const value_fontColor_value  = value_fontColor!
            let value_fontColor_value_type : int32 = RuntimeType.UNDEFINED
            value_fontColor_value_type = runtimeType(value_fontColor_value)
            if (TypeChecker.isColor(value_fontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontColor_value_0  = value_fontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontColor_value_1  = value_fontColor_value as number
                valueSerializer.writeNumber(value_fontColor_value_1)
            }
            else if (RuntimeType.STRING == value_fontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontColor_value_2  = value_fontColor_value as string
                valueSerializer.writeString(value_fontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontColor_value_3  = value_fontColor_value as Resource
                valueSerializer.writeResource(value_fontColor_value_3)
            }
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_action  = value.action
        valueSerializer.holdAndWriteCallback(value_action)
        const value_primary  = value.primary
        let value_primary_type : int32 = RuntimeType.UNDEFINED
        value_primary_type = runtimeType(value_primary)
        valueSerializer.writeInt8(value_primary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_primary_type)) {
            const value_primary_value  = value_primary!
            valueSerializer.writeBoolean(value_primary_value)
        }
    }
    writeAlignRuleOption(value: AlignRuleOption): void {
        let valueSerializer : Serializer = this
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            const value_left_value_anchor  = value_left_value.anchor
            valueSerializer.writeString(value_left_value_anchor)
            const value_left_value_align  = value_left_value.align
            valueSerializer.writeInt32(TypeChecker.HorizontalAlign_ToNumeric(value_left_value_align))
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            const value_right_value_anchor  = value_right_value.anchor
            valueSerializer.writeString(value_right_value_anchor)
            const value_right_value_align  = value_right_value.align
            valueSerializer.writeInt32(TypeChecker.HorizontalAlign_ToNumeric(value_right_value_align))
        }
        const value_middle  = value.middle
        let value_middle_type : int32 = RuntimeType.UNDEFINED
        value_middle_type = runtimeType(value_middle)
        valueSerializer.writeInt8(value_middle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_middle_type)) {
            const value_middle_value  = value_middle!
            const value_middle_value_anchor  = value_middle_value.anchor
            valueSerializer.writeString(value_middle_value_anchor)
            const value_middle_value_align  = value_middle_value.align
            valueSerializer.writeInt32(TypeChecker.HorizontalAlign_ToNumeric(value_middle_value_align))
        }
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            const value_top_value_anchor  = value_top_value.anchor
            valueSerializer.writeString(value_top_value_anchor)
            const value_top_value_align  = value_top_value.align
            valueSerializer.writeInt32(TypeChecker.VerticalAlign_ToNumeric(value_top_value_align))
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            const value_bottom_value_anchor  = value_bottom_value.anchor
            valueSerializer.writeString(value_bottom_value_anchor)
            const value_bottom_value_align  = value_bottom_value.align
            valueSerializer.writeInt32(TypeChecker.VerticalAlign_ToNumeric(value_bottom_value_align))
        }
        const value_center  = value.center
        let value_center_type : int32 = RuntimeType.UNDEFINED
        value_center_type = runtimeType(value_center)
        valueSerializer.writeInt8(value_center_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_center_type)) {
            const value_center_value  = value_center!
            const value_center_value_anchor  = value_center_value.anchor
            valueSerializer.writeString(value_center_value_anchor)
            const value_center_value_align  = value_center_value.align
            valueSerializer.writeInt32(TypeChecker.VerticalAlign_ToNumeric(value_center_value_align))
        }
        const value_bias  = value.bias
        let value_bias_type : int32 = RuntimeType.UNDEFINED
        value_bias_type = runtimeType(value_bias)
        valueSerializer.writeInt8(value_bias_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bias_type)) {
            const value_bias_value  = value_bias!
            valueSerializer.writeBias(value_bias_value)
        }
    }
    writeAnimateParam(value: AnimateParam): void {
        let valueSerializer : Serializer = this
        const value_duration  = value.duration
        let value_duration_type : int32 = RuntimeType.UNDEFINED
        value_duration_type = runtimeType(value_duration)
        valueSerializer.writeInt8(value_duration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_duration_type)) {
            const value_duration_value  = value_duration!
            valueSerializer.writeNumber(value_duration_value)
        }
        const value_tempo  = value.tempo
        let value_tempo_type : int32 = RuntimeType.UNDEFINED
        value_tempo_type = runtimeType(value_tempo)
        valueSerializer.writeInt8(value_tempo_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_tempo_type)) {
            const value_tempo_value  = value_tempo!
            valueSerializer.writeNumber(value_tempo_value)
        }
        const value_curve  = value.curve
        let value_curve_type : int32 = RuntimeType.UNDEFINED
        value_curve_type = runtimeType(value_curve)
        valueSerializer.writeInt8(value_curve_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_curve_type)) {
            const value_curve_value  = value_curve!
            let value_curve_value_type : int32 = RuntimeType.UNDEFINED
            value_curve_value_type = runtimeType(value_curve_value)
            if (TypeChecker.isCurve(value_curve_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_curve_value_0  = value_curve_value as Curve
                valueSerializer.writeInt32(TypeChecker.Curve_ToNumeric(value_curve_value_0))
            }
            else if (RuntimeType.STRING == value_curve_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_curve_value_1  = value_curve_value as string
                valueSerializer.writeString(value_curve_value_1)
            }
            else if (RuntimeType.OBJECT == value_curve_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_curve_value_2  = value_curve_value as ICurve
                valueSerializer.writeICurve(value_curve_value_2)
            }
        }
        const value_delay  = value.delay
        let value_delay_type : int32 = RuntimeType.UNDEFINED
        value_delay_type = runtimeType(value_delay)
        valueSerializer.writeInt8(value_delay_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_delay_type)) {
            const value_delay_value  = value_delay!
            valueSerializer.writeNumber(value_delay_value)
        }
        const value_iterations  = value.iterations
        let value_iterations_type : int32 = RuntimeType.UNDEFINED
        value_iterations_type = runtimeType(value_iterations)
        valueSerializer.writeInt8(value_iterations_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iterations_type)) {
            const value_iterations_value  = value_iterations!
            valueSerializer.writeNumber(value_iterations_value)
        }
        const value_playMode  = value.playMode
        let value_playMode_type : int32 = RuntimeType.UNDEFINED
        value_playMode_type = runtimeType(value_playMode)
        valueSerializer.writeInt8(value_playMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_playMode_type)) {
            const value_playMode_value  = (value_playMode as PlayMode)
            valueSerializer.writeInt32(TypeChecker.PlayMode_ToNumeric(value_playMode_value))
        }
        const value_onFinish  = value.onFinish
        let value_onFinish_type : int32 = RuntimeType.UNDEFINED
        value_onFinish_type = runtimeType(value_onFinish)
        valueSerializer.writeInt8(value_onFinish_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onFinish_type)) {
            const value_onFinish_value  = value_onFinish!
            valueSerializer.holdAndWriteCallback(value_onFinish_value)
        }
        const value_finishCallbackType  = value.finishCallbackType
        let value_finishCallbackType_type : int32 = RuntimeType.UNDEFINED
        value_finishCallbackType_type = runtimeType(value_finishCallbackType)
        valueSerializer.writeInt8(value_finishCallbackType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_finishCallbackType_type)) {
            const value_finishCallbackType_value  = (value_finishCallbackType as FinishCallbackType)
            valueSerializer.writeInt32(TypeChecker.FinishCallbackType_ToNumeric(value_finishCallbackType_value))
        }
        const value_expectedFrameRateRange  = value.expectedFrameRateRange
        let value_expectedFrameRateRange_type : int32 = RuntimeType.UNDEFINED
        value_expectedFrameRateRange_type = runtimeType(value_expectedFrameRateRange)
        valueSerializer.writeInt8(value_expectedFrameRateRange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_expectedFrameRateRange_type)) {
            const value_expectedFrameRateRange_value  = value_expectedFrameRateRange!
            valueSerializer.writeExpectedFrameRateRange(value_expectedFrameRateRange_value)
        }
    }
    writeArea(value: Area): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        valueSerializer.writeLength(value_width)
        const value_height  = value.height
        valueSerializer.writeLength(value_height)
        const value_position  = value.position
        valueSerializer.writePosition(value_position)
        const value_globalPosition  = value.globalPosition
        valueSerializer.writePosition(value_globalPosition)
    }
    writeArrowStyle(value: ArrowStyle): void {
        let valueSerializer : Serializer = this
        const value_showBackground  = value.showBackground
        let value_showBackground_type : int32 = RuntimeType.UNDEFINED
        value_showBackground_type = runtimeType(value_showBackground)
        valueSerializer.writeInt8(value_showBackground_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showBackground_type)) {
            const value_showBackground_value  = value_showBackground!
            valueSerializer.writeBoolean(value_showBackground_value)
        }
        const value_isSidebarMiddle  = value.isSidebarMiddle
        let value_isSidebarMiddle_type : int32 = RuntimeType.UNDEFINED
        value_isSidebarMiddle_type = runtimeType(value_isSidebarMiddle)
        valueSerializer.writeInt8(value_isSidebarMiddle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isSidebarMiddle_type)) {
            const value_isSidebarMiddle_value  = value_isSidebarMiddle!
            valueSerializer.writeBoolean(value_isSidebarMiddle_value)
        }
        const value_backgroundSize  = value.backgroundSize
        let value_backgroundSize_type : int32 = RuntimeType.UNDEFINED
        value_backgroundSize_type = runtimeType(value_backgroundSize)
        valueSerializer.writeInt8(value_backgroundSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundSize_type)) {
            const value_backgroundSize_value  = value_backgroundSize!
            valueSerializer.writeLength(value_backgroundSize_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_arrowSize  = value.arrowSize
        let value_arrowSize_type : int32 = RuntimeType.UNDEFINED
        value_arrowSize_type = runtimeType(value_arrowSize)
        valueSerializer.writeInt8(value_arrowSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowSize_type)) {
            const value_arrowSize_value  = value_arrowSize!
            valueSerializer.writeLength(value_arrowSize_value)
        }
        const value_arrowColor  = value.arrowColor
        let value_arrowColor_type : int32 = RuntimeType.UNDEFINED
        value_arrowColor_type = runtimeType(value_arrowColor)
        valueSerializer.writeInt8(value_arrowColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowColor_type)) {
            const value_arrowColor_value  = value_arrowColor!
            let value_arrowColor_value_type : int32 = RuntimeType.UNDEFINED
            value_arrowColor_value_type = runtimeType(value_arrowColor_value)
            if (TypeChecker.isColor(value_arrowColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_arrowColor_value_0  = value_arrowColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_arrowColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_arrowColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_arrowColor_value_1  = value_arrowColor_value as number
                valueSerializer.writeNumber(value_arrowColor_value_1)
            }
            else if (RuntimeType.STRING == value_arrowColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_arrowColor_value_2  = value_arrowColor_value as string
                valueSerializer.writeString(value_arrowColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_arrowColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_arrowColor_value_3  = value_arrowColor_value as Resource
                valueSerializer.writeResource(value_arrowColor_value_3)
            }
        }
    }
    writeBackgroundBlurStyleOptions(value: BackgroundBlurStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_colorMode  = value.colorMode
        let value_colorMode_type : int32 = RuntimeType.UNDEFINED
        value_colorMode_type = runtimeType(value_colorMode)
        valueSerializer.writeInt8(value_colorMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_colorMode_type)) {
            const value_colorMode_value  = (value_colorMode as ThemeColorMode)
            valueSerializer.writeInt32(TypeChecker.ThemeColorMode_ToNumeric(value_colorMode_value))
        }
        const value_adaptiveColor  = value.adaptiveColor
        let value_adaptiveColor_type : int32 = RuntimeType.UNDEFINED
        value_adaptiveColor_type = runtimeType(value_adaptiveColor)
        valueSerializer.writeInt8(value_adaptiveColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_adaptiveColor_type)) {
            const value_adaptiveColor_value  = (value_adaptiveColor as AdaptiveColor)
            valueSerializer.writeInt32(TypeChecker.AdaptiveColor_ToNumeric(value_adaptiveColor_value))
        }
        const value_scale  = value.scale
        let value_scale_type : int32 = RuntimeType.UNDEFINED
        value_scale_type = runtimeType(value_scale)
        valueSerializer.writeInt8(value_scale_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scale_type)) {
            const value_scale_value  = value_scale!
            valueSerializer.writeNumber(value_scale_value)
        }
        const value_blurOptions  = value.blurOptions
        let value_blurOptions_type : int32 = RuntimeType.UNDEFINED
        value_blurOptions_type = runtimeType(value_blurOptions)
        valueSerializer.writeInt8(value_blurOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_blurOptions_type)) {
            const value_blurOptions_value  = value_blurOptions!
            valueSerializer.writeBlurOptions(value_blurOptions_value)
        }
        const value_policy  = value.policy
        let value_policy_type : int32 = RuntimeType.UNDEFINED
        value_policy_type = runtimeType(value_policy)
        valueSerializer.writeInt8(value_policy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_policy_type)) {
            const value_policy_value  = (value_policy as BlurStyleActivePolicy)
            valueSerializer.writeInt32(TypeChecker.BlurStyleActivePolicy_ToNumeric(value_policy_value))
        }
        const value_inactiveColor  = value.inactiveColor
        let value_inactiveColor_type : int32 = RuntimeType.UNDEFINED
        value_inactiveColor_type = runtimeType(value_inactiveColor)
        valueSerializer.writeInt8(value_inactiveColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_inactiveColor_type)) {
            const value_inactiveColor_value  = value_inactiveColor!
            let value_inactiveColor_value_type : int32 = RuntimeType.UNDEFINED
            value_inactiveColor_value_type = runtimeType(value_inactiveColor_value)
            if (TypeChecker.isColor(value_inactiveColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_inactiveColor_value_0  = value_inactiveColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_inactiveColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_inactiveColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_inactiveColor_value_1  = value_inactiveColor_value as number
                valueSerializer.writeNumber(value_inactiveColor_value_1)
            }
            else if (RuntimeType.STRING == value_inactiveColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_inactiveColor_value_2  = value_inactiveColor_value as string
                valueSerializer.writeString(value_inactiveColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_inactiveColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_inactiveColor_value_3  = value_inactiveColor_value as Resource
                valueSerializer.writeResource(value_inactiveColor_value_3)
            }
        }
    }
    writeBackgroundEffectOptions(value: BackgroundEffectOptions): void {
        let valueSerializer : Serializer = this
        const value_radius  = value.radius
        valueSerializer.writeNumber(value_radius)
        const value_saturation  = value.saturation
        let value_saturation_type : int32 = RuntimeType.UNDEFINED
        value_saturation_type = runtimeType(value_saturation)
        valueSerializer.writeInt8(value_saturation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_saturation_type)) {
            const value_saturation_value  = value_saturation!
            valueSerializer.writeNumber(value_saturation_value)
        }
        const value_brightness  = value.brightness
        let value_brightness_type : int32 = RuntimeType.UNDEFINED
        value_brightness_type = runtimeType(value_brightness)
        valueSerializer.writeInt8(value_brightness_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_brightness_type)) {
            const value_brightness_value  = value_brightness!
            valueSerializer.writeNumber(value_brightness_value)
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_adaptiveColor  = value.adaptiveColor
        let value_adaptiveColor_type : int32 = RuntimeType.UNDEFINED
        value_adaptiveColor_type = runtimeType(value_adaptiveColor)
        valueSerializer.writeInt8(value_adaptiveColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_adaptiveColor_type)) {
            const value_adaptiveColor_value  = (value_adaptiveColor as AdaptiveColor)
            valueSerializer.writeInt32(TypeChecker.AdaptiveColor_ToNumeric(value_adaptiveColor_value))
        }
        const value_blurOptions  = value.blurOptions
        let value_blurOptions_type : int32 = RuntimeType.UNDEFINED
        value_blurOptions_type = runtimeType(value_blurOptions)
        valueSerializer.writeInt8(value_blurOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_blurOptions_type)) {
            const value_blurOptions_value  = value_blurOptions!
            valueSerializer.writeBlurOptions(value_blurOptions_value)
        }
        const value_policy  = value.policy
        let value_policy_type : int32 = RuntimeType.UNDEFINED
        value_policy_type = runtimeType(value_policy)
        valueSerializer.writeInt8(value_policy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_policy_type)) {
            const value_policy_value  = (value_policy as BlurStyleActivePolicy)
            valueSerializer.writeInt32(TypeChecker.BlurStyleActivePolicy_ToNumeric(value_policy_value))
        }
        const value_inactiveColor  = value.inactiveColor
        let value_inactiveColor_type : int32 = RuntimeType.UNDEFINED
        value_inactiveColor_type = runtimeType(value_inactiveColor)
        valueSerializer.writeInt8(value_inactiveColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_inactiveColor_type)) {
            const value_inactiveColor_value  = value_inactiveColor!
            let value_inactiveColor_value_type : int32 = RuntimeType.UNDEFINED
            value_inactiveColor_value_type = runtimeType(value_inactiveColor_value)
            if (TypeChecker.isColor(value_inactiveColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_inactiveColor_value_0  = value_inactiveColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_inactiveColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_inactiveColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_inactiveColor_value_1  = value_inactiveColor_value as number
                valueSerializer.writeNumber(value_inactiveColor_value_1)
            }
            else if (RuntimeType.STRING == value_inactiveColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_inactiveColor_value_2  = value_inactiveColor_value as string
                valueSerializer.writeString(value_inactiveColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_inactiveColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_inactiveColor_value_3  = value_inactiveColor_value as Resource
                valueSerializer.writeResource(value_inactiveColor_value_3)
            }
        }
    }
    writeBadgeStyle(value: BadgeStyle): void {
        let valueSerializer : Serializer = this
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_fontSize  = value.fontSize
        let value_fontSize_type : int32 = RuntimeType.UNDEFINED
        value_fontSize_type = runtimeType(value_fontSize)
        valueSerializer.writeInt8(value_fontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontSize_type)) {
            const value_fontSize_value  = value_fontSize!
            let value_fontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_fontSize_value_type = runtimeType(value_fontSize_value)
            if (RuntimeType.NUMBER == value_fontSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontSize_value_0  = value_fontSize_value as number
                valueSerializer.writeNumber(value_fontSize_value_0)
            }
            else if (RuntimeType.STRING == value_fontSize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontSize_value_1  = value_fontSize_value as string
                valueSerializer.writeString(value_fontSize_value_1)
            }
        }
        const value_badgeSize  = value.badgeSize
        let value_badgeSize_type : int32 = RuntimeType.UNDEFINED
        value_badgeSize_type = runtimeType(value_badgeSize)
        valueSerializer.writeInt8(value_badgeSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_badgeSize_type)) {
            const value_badgeSize_value  = value_badgeSize!
            let value_badgeSize_value_type : int32 = RuntimeType.UNDEFINED
            value_badgeSize_value_type = runtimeType(value_badgeSize_value)
            if (RuntimeType.NUMBER == value_badgeSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_badgeSize_value_0  = value_badgeSize_value as number
                valueSerializer.writeNumber(value_badgeSize_value_0)
            }
            else if (RuntimeType.STRING == value_badgeSize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_badgeSize_value_1  = value_badgeSize_value as string
                valueSerializer.writeString(value_badgeSize_value_1)
            }
        }
        const value_badgeColor  = value.badgeColor
        let value_badgeColor_type : int32 = RuntimeType.UNDEFINED
        value_badgeColor_type = runtimeType(value_badgeColor)
        valueSerializer.writeInt8(value_badgeColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_badgeColor_type)) {
            const value_badgeColor_value  = value_badgeColor!
            let value_badgeColor_value_type : int32 = RuntimeType.UNDEFINED
            value_badgeColor_value_type = runtimeType(value_badgeColor_value)
            if (TypeChecker.isColor(value_badgeColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_badgeColor_value_0  = value_badgeColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_badgeColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_badgeColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_badgeColor_value_1  = value_badgeColor_value as number
                valueSerializer.writeNumber(value_badgeColor_value_1)
            }
            else if (RuntimeType.STRING == value_badgeColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_badgeColor_value_2  = value_badgeColor_value as string
                valueSerializer.writeString(value_badgeColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_badgeColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_badgeColor_value_3  = value_badgeColor_value as Resource
                valueSerializer.writeResource(value_badgeColor_value_3)
            }
        }
        const value_borderColor  = value.borderColor
        let value_borderColor_type : int32 = RuntimeType.UNDEFINED
        value_borderColor_type = runtimeType(value_borderColor)
        valueSerializer.writeInt8(value_borderColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderColor_type)) {
            const value_borderColor_value  = value_borderColor!
            let value_borderColor_value_type : int32 = RuntimeType.UNDEFINED
            value_borderColor_value_type = runtimeType(value_borderColor_value)
            if (TypeChecker.isColor(value_borderColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderColor_value_0  = value_borderColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_borderColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_borderColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderColor_value_1  = value_borderColor_value as number
                valueSerializer.writeNumber(value_borderColor_value_1)
            }
            else if (RuntimeType.STRING == value_borderColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderColor_value_2  = value_borderColor_value as string
                valueSerializer.writeString(value_borderColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_borderColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_borderColor_value_3  = value_borderColor_value as Resource
                valueSerializer.writeResource(value_borderColor_value_3)
            }
        }
        const value_borderWidth  = value.borderWidth
        let value_borderWidth_type : int32 = RuntimeType.UNDEFINED
        value_borderWidth_type = runtimeType(value_borderWidth)
        valueSerializer.writeInt8(value_borderWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderWidth_type)) {
            const value_borderWidth_value  = value_borderWidth!
            valueSerializer.writeLength(value_borderWidth_value)
        }
        const value_fontWeight  = value.fontWeight
        let value_fontWeight_type : int32 = RuntimeType.UNDEFINED
        value_fontWeight_type = runtimeType(value_fontWeight)
        valueSerializer.writeInt8(value_fontWeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontWeight_type)) {
            const value_fontWeight_value  = value_fontWeight!
            let value_fontWeight_value_type : int32 = RuntimeType.UNDEFINED
            value_fontWeight_value_type = runtimeType(value_fontWeight_value)
            if (RuntimeType.NUMBER == value_fontWeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontWeight_value_0  = value_fontWeight_value as number
                valueSerializer.writeNumber(value_fontWeight_value_0)
            }
            else if (TypeChecker.isFontWeight(value_fontWeight_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontWeight_value_1  = value_fontWeight_value as FontWeight
                valueSerializer.writeInt32(TypeChecker.FontWeight_ToNumeric(value_fontWeight_value_1))
            }
            else if (RuntimeType.STRING == value_fontWeight_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontWeight_value_2  = value_fontWeight_value as string
                valueSerializer.writeString(value_fontWeight_value_2)
            }
        }
    }
    writeButtonIconOptions(value: ButtonIconOptions): void {
        let valueSerializer : Serializer = this
        const value_shown  = value.shown
        let value_shown_type : int32 = RuntimeType.UNDEFINED
        value_shown_type = runtimeType(value_shown)
        if (RuntimeType.STRING == value_shown_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_shown_0  = value_shown as string
            valueSerializer.writeString(value_shown_0)
        }
        else if (TypeChecker.isPixelMap(value_shown, false, false)) {
            valueSerializer.writeInt8(1 as int32)
            const value_shown_1  = value_shown as PixelMap
            valueSerializer.writePixelMap(value_shown_1)
        }
        else if (TypeChecker.isResource(value_shown, false, false, false, false, false)) {
            valueSerializer.writeInt8(2 as int32)
            const value_shown_2  = value_shown as Resource
            valueSerializer.writeResource(value_shown_2)
        }
        const value_hidden  = value.hidden
        let value_hidden_type : int32 = RuntimeType.UNDEFINED
        value_hidden_type = runtimeType(value_hidden)
        if (RuntimeType.STRING == value_hidden_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_hidden_0  = value_hidden as string
            valueSerializer.writeString(value_hidden_0)
        }
        else if (TypeChecker.isPixelMap(value_hidden, false, false)) {
            valueSerializer.writeInt8(1 as int32)
            const value_hidden_1  = value_hidden as PixelMap
            valueSerializer.writePixelMap(value_hidden_1)
        }
        else if (TypeChecker.isResource(value_hidden, false, false, false, false, false)) {
            valueSerializer.writeInt8(2 as int32)
            const value_hidden_2  = value_hidden as Resource
            valueSerializer.writeResource(value_hidden_2)
        }
        const value_switching  = value.switching
        let value_switching_type : int32 = RuntimeType.UNDEFINED
        value_switching_type = runtimeType(value_switching)
        valueSerializer.writeInt8(value_switching_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_switching_type)) {
            const value_switching_value  = value_switching!
            let value_switching_value_type : int32 = RuntimeType.UNDEFINED
            value_switching_value_type = runtimeType(value_switching_value)
            if (RuntimeType.STRING == value_switching_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_switching_value_0  = value_switching_value as string
                valueSerializer.writeString(value_switching_value_0)
            }
            else if (TypeChecker.isPixelMap(value_switching_value, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_switching_value_1  = value_switching_value as PixelMap
                valueSerializer.writePixelMap(value_switching_value_1)
            }
            else if (TypeChecker.isResource(value_switching_value, false, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_switching_value_2  = value_switching_value as Resource
                valueSerializer.writeResource(value_switching_value_2)
            }
        }
    }
    writeCalendarOptions(value: CalendarOptions): void {
        let valueSerializer : Serializer = this
        const value_hintRadius  = value.hintRadius
        let value_hintRadius_type : int32 = RuntimeType.UNDEFINED
        value_hintRadius_type = runtimeType(value_hintRadius)
        valueSerializer.writeInt8(value_hintRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hintRadius_type)) {
            const value_hintRadius_value  = value_hintRadius!
            let value_hintRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_hintRadius_value_type = runtimeType(value_hintRadius_value)
            if (RuntimeType.NUMBER == value_hintRadius_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_hintRadius_value_0  = value_hintRadius_value as number
                valueSerializer.writeNumber(value_hintRadius_value_0)
            }
            else if (RuntimeType.OBJECT == value_hintRadius_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_hintRadius_value_1  = value_hintRadius_value as Resource
                valueSerializer.writeResource(value_hintRadius_value_1)
            }
        }
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            valueSerializer.writeInt64((value_selected_value.getTime() as int64))
        }
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeInt64((value_start_value.getTime() as int64))
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeInt64((value_end_value.getTime() as int64))
        }
        const value_disabledDateRange  = value.disabledDateRange
        let value_disabledDateRange_type : int32 = RuntimeType.UNDEFINED
        value_disabledDateRange_type = runtimeType(value_disabledDateRange)
        valueSerializer.writeInt8(value_disabledDateRange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disabledDateRange_type)) {
            const value_disabledDateRange_value  = value_disabledDateRange!
            valueSerializer.writeInt32(value_disabledDateRange_value.length as int32)
            for (let i = 0; i < value_disabledDateRange_value.length; i++) {
                const value_disabledDateRange_value_element : DateRange = value_disabledDateRange_value[i]
                valueSerializer.writeDateRange(value_disabledDateRange_value_element)
            }
        }
    }
    writeCanvasRenderer(value: CanvasRenderer): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCanvasRenderingContext2D(value: CanvasRenderingContext2D): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCaretStyle(value: CaretStyle): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
    }
    writeCircleStyleOptions(value: CircleStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            valueSerializer.writeLengthMetrics(value_radius_value)
        }
        const value_enableWaveEffect  = value.enableWaveEffect
        let value_enableWaveEffect_type : int32 = RuntimeType.UNDEFINED
        value_enableWaveEffect_type = runtimeType(value_enableWaveEffect)
        valueSerializer.writeInt8(value_enableWaveEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableWaveEffect_type)) {
            const value_enableWaveEffect_value  = value_enableWaveEffect!
            valueSerializer.writeBoolean(value_enableWaveEffect_value)
        }
        const value_enableForeground  = value.enableForeground
        let value_enableForeground_type : int32 = RuntimeType.UNDEFINED
        value_enableForeground_type = runtimeType(value_enableForeground)
        valueSerializer.writeInt8(value_enableForeground_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableForeground_type)) {
            const value_enableForeground_value  = value_enableForeground!
            valueSerializer.writeBoolean(value_enableForeground_value)
        }
    }
    writeColorStop(value: ColorStop): void {
        let valueSerializer : Serializer = this
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        if (TypeChecker.isColor(value_color)) {
            valueSerializer.writeInt8(0 as int32)
            const value_color_0  = value_color as Color
            valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_0))
        }
        else if (RuntimeType.NUMBER == value_color_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_color_1  = value_color as number
            valueSerializer.writeNumber(value_color_1)
        }
        else if (RuntimeType.STRING == value_color_type) {
            valueSerializer.writeInt8(2 as int32)
            const value_color_2  = value_color as string
            valueSerializer.writeString(value_color_2)
        }
        else if (RuntimeType.OBJECT == value_color_type) {
            valueSerializer.writeInt8(3 as int32)
            const value_color_3  = value_color as Resource
            valueSerializer.writeResource(value_color_3)
        }
        const value_offset  = value.offset
        valueSerializer.writeLength(value_offset)
    }
    writeComponentInfo(value: ComponentInfo): void {
        let valueSerializer : Serializer = this
        const value_size  = value.size
        valueSerializer.writeSize(value_size)
        const value_localOffset  = value.localOffset
        valueSerializer.writeOffset_componentutils(value_localOffset)
        const value_windowOffset  = value.windowOffset
        valueSerializer.writeOffset_componentutils(value_windowOffset)
        const value_screenOffset  = value.screenOffset
        valueSerializer.writeOffset_componentutils(value_screenOffset)
        const value_translate  = value.translate
        valueSerializer.writeTranslateResult(value_translate)
        const value_scale  = value.scale
        valueSerializer.writeScaleResult(value_scale)
        const value_rotate  = value.rotate
        valueSerializer.writeRotateResult(value_rotate)
        const value_transform  = value.transform
        const value_transform_0  = value_transform[0]
        valueSerializer.writeNumber(value_transform_0)
        const value_transform_1  = value_transform[1]
        valueSerializer.writeNumber(value_transform_1)
        const value_transform_2  = value_transform[2]
        valueSerializer.writeNumber(value_transform_2)
        const value_transform_3  = value_transform[3]
        valueSerializer.writeNumber(value_transform_3)
        const value_transform_4  = value_transform[4]
        valueSerializer.writeNumber(value_transform_4)
        const value_transform_5  = value_transform[5]
        valueSerializer.writeNumber(value_transform_5)
        const value_transform_6  = value_transform[6]
        valueSerializer.writeNumber(value_transform_6)
        const value_transform_7  = value_transform[7]
        valueSerializer.writeNumber(value_transform_7)
        const value_transform_8  = value_transform[8]
        valueSerializer.writeNumber(value_transform_8)
        const value_transform_9  = value_transform[9]
        valueSerializer.writeNumber(value_transform_9)
        const value_transform_10  = value_transform[10]
        valueSerializer.writeNumber(value_transform_10)
        const value_transform_11  = value_transform[11]
        valueSerializer.writeNumber(value_transform_11)
        const value_transform_12  = value_transform[12]
        valueSerializer.writeNumber(value_transform_12)
        const value_transform_13  = value_transform[13]
        valueSerializer.writeNumber(value_transform_13)
        const value_transform_14  = value_transform[14]
        valueSerializer.writeNumber(value_transform_14)
        const value_transform_15  = value_transform[15]
        valueSerializer.writeNumber(value_transform_15)
    }
    writeContentCoverOptions(value: ContentCoverOptions): void {
        let valueSerializer : Serializer = this
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_onAppear  = value.onAppear
        let value_onAppear_type : int32 = RuntimeType.UNDEFINED
        value_onAppear_type = runtimeType(value_onAppear)
        valueSerializer.writeInt8(value_onAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAppear_type)) {
            const value_onAppear_value  = value_onAppear!
            valueSerializer.holdAndWriteCallback(value_onAppear_value)
        }
        const value_onDisappear  = value.onDisappear
        let value_onDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDisappear_type = runtimeType(value_onDisappear)
        valueSerializer.writeInt8(value_onDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDisappear_type)) {
            const value_onDisappear_value  = value_onDisappear!
            valueSerializer.holdAndWriteCallback(value_onDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_modalTransition  = value.modalTransition
        let value_modalTransition_type : int32 = RuntimeType.UNDEFINED
        value_modalTransition_type = runtimeType(value_modalTransition)
        valueSerializer.writeInt8(value_modalTransition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_modalTransition_type)) {
            const value_modalTransition_value  = (value_modalTransition as ModalTransition)
            valueSerializer.writeInt32(TypeChecker.ModalTransition_ToNumeric(value_modalTransition_value))
        }
        const value_onWillDismiss  = value.onWillDismiss
        let value_onWillDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillDismiss_type = runtimeType(value_onWillDismiss)
        valueSerializer.writeInt8(value_onWillDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDismiss_type)) {
            const value_onWillDismiss_value  = value_onWillDismiss!
            valueSerializer.holdAndWriteCallback(value_onWillDismiss_value)
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
    }
    writeContextMenuAnimationOptions(value: ContextMenuAnimationOptions): void {
        let valueSerializer : Serializer = this
        const value_scale  = value.scale
        let value_scale_type : int32 = RuntimeType.UNDEFINED
        value_scale_type = runtimeType(value_scale)
        valueSerializer.writeInt8(value_scale_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scale_type)) {
            const value_scale_value  = value_scale!
            const value_scale_value_0  = value_scale_value[0]
            valueSerializer.writeNumber(value_scale_value_0)
            const value_scale_value_1  = value_scale_value[1]
            valueSerializer.writeNumber(value_scale_value_1)
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
        const value_hoverScale  = value.hoverScale
        let value_hoverScale_type : int32 = RuntimeType.UNDEFINED
        value_hoverScale_type = runtimeType(value_hoverScale)
        valueSerializer.writeInt8(value_hoverScale_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverScale_type)) {
            const value_hoverScale_value  = value_hoverScale!
            const value_hoverScale_value_0  = value_hoverScale_value[0]
            valueSerializer.writeNumber(value_hoverScale_value_0)
            const value_hoverScale_value_1  = value_hoverScale_value[1]
            valueSerializer.writeNumber(value_hoverScale_value_1)
        }
    }
    writeCurrentDayStyle(value: CurrentDayStyle): void {
        let valueSerializer : Serializer = this
        const value_dayColor  = value.dayColor
        let value_dayColor_type : int32 = RuntimeType.UNDEFINED
        value_dayColor_type = runtimeType(value_dayColor)
        valueSerializer.writeInt8(value_dayColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dayColor_type)) {
            const value_dayColor_value  = value_dayColor!
            let value_dayColor_value_type : int32 = RuntimeType.UNDEFINED
            value_dayColor_value_type = runtimeType(value_dayColor_value)
            if (TypeChecker.isColor(value_dayColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_dayColor_value_0  = value_dayColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_dayColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_dayColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_dayColor_value_1  = value_dayColor_value as number
                valueSerializer.writeNumber(value_dayColor_value_1)
            }
            else if (RuntimeType.STRING == value_dayColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_dayColor_value_2  = value_dayColor_value as string
                valueSerializer.writeString(value_dayColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_dayColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_dayColor_value_3  = value_dayColor_value as Resource
                valueSerializer.writeResource(value_dayColor_value_3)
            }
        }
        const value_lunarColor  = value.lunarColor
        let value_lunarColor_type : int32 = RuntimeType.UNDEFINED
        value_lunarColor_type = runtimeType(value_lunarColor)
        valueSerializer.writeInt8(value_lunarColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lunarColor_type)) {
            const value_lunarColor_value  = value_lunarColor!
            let value_lunarColor_value_type : int32 = RuntimeType.UNDEFINED
            value_lunarColor_value_type = runtimeType(value_lunarColor_value)
            if (TypeChecker.isColor(value_lunarColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_lunarColor_value_0  = value_lunarColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_lunarColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_lunarColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_lunarColor_value_1  = value_lunarColor_value as number
                valueSerializer.writeNumber(value_lunarColor_value_1)
            }
            else if (RuntimeType.STRING == value_lunarColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_lunarColor_value_2  = value_lunarColor_value as string
                valueSerializer.writeString(value_lunarColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_lunarColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_lunarColor_value_3  = value_lunarColor_value as Resource
                valueSerializer.writeResource(value_lunarColor_value_3)
            }
        }
        const value_markLunarColor  = value.markLunarColor
        let value_markLunarColor_type : int32 = RuntimeType.UNDEFINED
        value_markLunarColor_type = runtimeType(value_markLunarColor)
        valueSerializer.writeInt8(value_markLunarColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_markLunarColor_type)) {
            const value_markLunarColor_value  = value_markLunarColor!
            let value_markLunarColor_value_type : int32 = RuntimeType.UNDEFINED
            value_markLunarColor_value_type = runtimeType(value_markLunarColor_value)
            if (TypeChecker.isColor(value_markLunarColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_markLunarColor_value_0  = value_markLunarColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_markLunarColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_markLunarColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_markLunarColor_value_1  = value_markLunarColor_value as number
                valueSerializer.writeNumber(value_markLunarColor_value_1)
            }
            else if (RuntimeType.STRING == value_markLunarColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_markLunarColor_value_2  = value_markLunarColor_value as string
                valueSerializer.writeString(value_markLunarColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_markLunarColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_markLunarColor_value_3  = value_markLunarColor_value as Resource
                valueSerializer.writeResource(value_markLunarColor_value_3)
            }
        }
        const value_dayFontSize  = value.dayFontSize
        let value_dayFontSize_type : int32 = RuntimeType.UNDEFINED
        value_dayFontSize_type = runtimeType(value_dayFontSize)
        valueSerializer.writeInt8(value_dayFontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dayFontSize_type)) {
            const value_dayFontSize_value  = value_dayFontSize!
            valueSerializer.writeNumber(value_dayFontSize_value)
        }
        const value_lunarDayFontSize  = value.lunarDayFontSize
        let value_lunarDayFontSize_type : int32 = RuntimeType.UNDEFINED
        value_lunarDayFontSize_type = runtimeType(value_lunarDayFontSize)
        valueSerializer.writeInt8(value_lunarDayFontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lunarDayFontSize_type)) {
            const value_lunarDayFontSize_value  = value_lunarDayFontSize!
            valueSerializer.writeNumber(value_lunarDayFontSize_value)
        }
        const value_dayHeight  = value.dayHeight
        let value_dayHeight_type : int32 = RuntimeType.UNDEFINED
        value_dayHeight_type = runtimeType(value_dayHeight)
        valueSerializer.writeInt8(value_dayHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dayHeight_type)) {
            const value_dayHeight_value  = value_dayHeight!
            valueSerializer.writeNumber(value_dayHeight_value)
        }
        const value_dayWidth  = value.dayWidth
        let value_dayWidth_type : int32 = RuntimeType.UNDEFINED
        value_dayWidth_type = runtimeType(value_dayWidth)
        valueSerializer.writeInt8(value_dayWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dayWidth_type)) {
            const value_dayWidth_value  = value_dayWidth!
            valueSerializer.writeNumber(value_dayWidth_value)
        }
        const value_gregorianCalendarHeight  = value.gregorianCalendarHeight
        let value_gregorianCalendarHeight_type : int32 = RuntimeType.UNDEFINED
        value_gregorianCalendarHeight_type = runtimeType(value_gregorianCalendarHeight)
        valueSerializer.writeInt8(value_gregorianCalendarHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gregorianCalendarHeight_type)) {
            const value_gregorianCalendarHeight_value  = value_gregorianCalendarHeight!
            valueSerializer.writeNumber(value_gregorianCalendarHeight_value)
        }
        const value_dayYAxisOffset  = value.dayYAxisOffset
        let value_dayYAxisOffset_type : int32 = RuntimeType.UNDEFINED
        value_dayYAxisOffset_type = runtimeType(value_dayYAxisOffset)
        valueSerializer.writeInt8(value_dayYAxisOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dayYAxisOffset_type)) {
            const value_dayYAxisOffset_value  = value_dayYAxisOffset!
            valueSerializer.writeNumber(value_dayYAxisOffset_value)
        }
        const value_lunarDayYAxisOffset  = value.lunarDayYAxisOffset
        let value_lunarDayYAxisOffset_type : int32 = RuntimeType.UNDEFINED
        value_lunarDayYAxisOffset_type = runtimeType(value_lunarDayYAxisOffset)
        valueSerializer.writeInt8(value_lunarDayYAxisOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lunarDayYAxisOffset_type)) {
            const value_lunarDayYAxisOffset_value  = value_lunarDayYAxisOffset!
            valueSerializer.writeNumber(value_lunarDayYAxisOffset_value)
        }
        const value_underscoreXAxisOffset  = value.underscoreXAxisOffset
        let value_underscoreXAxisOffset_type : int32 = RuntimeType.UNDEFINED
        value_underscoreXAxisOffset_type = runtimeType(value_underscoreXAxisOffset)
        valueSerializer.writeInt8(value_underscoreXAxisOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_underscoreXAxisOffset_type)) {
            const value_underscoreXAxisOffset_value  = value_underscoreXAxisOffset!
            valueSerializer.writeNumber(value_underscoreXAxisOffset_value)
        }
        const value_underscoreYAxisOffset  = value.underscoreYAxisOffset
        let value_underscoreYAxisOffset_type : int32 = RuntimeType.UNDEFINED
        value_underscoreYAxisOffset_type = runtimeType(value_underscoreYAxisOffset)
        valueSerializer.writeInt8(value_underscoreYAxisOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_underscoreYAxisOffset_type)) {
            const value_underscoreYAxisOffset_value  = value_underscoreYAxisOffset!
            valueSerializer.writeNumber(value_underscoreYAxisOffset_value)
        }
        const value_scheduleMarkerXAxisOffset  = value.scheduleMarkerXAxisOffset
        let value_scheduleMarkerXAxisOffset_type : int32 = RuntimeType.UNDEFINED
        value_scheduleMarkerXAxisOffset_type = runtimeType(value_scheduleMarkerXAxisOffset)
        valueSerializer.writeInt8(value_scheduleMarkerXAxisOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scheduleMarkerXAxisOffset_type)) {
            const value_scheduleMarkerXAxisOffset_value  = value_scheduleMarkerXAxisOffset!
            valueSerializer.writeNumber(value_scheduleMarkerXAxisOffset_value)
        }
        const value_scheduleMarkerYAxisOffset  = value.scheduleMarkerYAxisOffset
        let value_scheduleMarkerYAxisOffset_type : int32 = RuntimeType.UNDEFINED
        value_scheduleMarkerYAxisOffset_type = runtimeType(value_scheduleMarkerYAxisOffset)
        valueSerializer.writeInt8(value_scheduleMarkerYAxisOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scheduleMarkerYAxisOffset_type)) {
            const value_scheduleMarkerYAxisOffset_value  = value_scheduleMarkerYAxisOffset!
            valueSerializer.writeNumber(value_scheduleMarkerYAxisOffset_value)
        }
        const value_colSpace  = value.colSpace
        let value_colSpace_type : int32 = RuntimeType.UNDEFINED
        value_colSpace_type = runtimeType(value_colSpace)
        valueSerializer.writeInt8(value_colSpace_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_colSpace_type)) {
            const value_colSpace_value  = value_colSpace!
            valueSerializer.writeNumber(value_colSpace_value)
        }
        const value_dailyFiveRowSpace  = value.dailyFiveRowSpace
        let value_dailyFiveRowSpace_type : int32 = RuntimeType.UNDEFINED
        value_dailyFiveRowSpace_type = runtimeType(value_dailyFiveRowSpace)
        valueSerializer.writeInt8(value_dailyFiveRowSpace_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dailyFiveRowSpace_type)) {
            const value_dailyFiveRowSpace_value  = value_dailyFiveRowSpace!
            valueSerializer.writeNumber(value_dailyFiveRowSpace_value)
        }
        const value_dailySixRowSpace  = value.dailySixRowSpace
        let value_dailySixRowSpace_type : int32 = RuntimeType.UNDEFINED
        value_dailySixRowSpace_type = runtimeType(value_dailySixRowSpace)
        valueSerializer.writeInt8(value_dailySixRowSpace_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dailySixRowSpace_type)) {
            const value_dailySixRowSpace_value  = value_dailySixRowSpace!
            valueSerializer.writeNumber(value_dailySixRowSpace_value)
        }
        const value_lunarHeight  = value.lunarHeight
        let value_lunarHeight_type : int32 = RuntimeType.UNDEFINED
        value_lunarHeight_type = runtimeType(value_lunarHeight)
        valueSerializer.writeInt8(value_lunarHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lunarHeight_type)) {
            const value_lunarHeight_value  = value_lunarHeight!
            valueSerializer.writeNumber(value_lunarHeight_value)
        }
        const value_underscoreWidth  = value.underscoreWidth
        let value_underscoreWidth_type : int32 = RuntimeType.UNDEFINED
        value_underscoreWidth_type = runtimeType(value_underscoreWidth)
        valueSerializer.writeInt8(value_underscoreWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_underscoreWidth_type)) {
            const value_underscoreWidth_value  = value_underscoreWidth!
            valueSerializer.writeNumber(value_underscoreWidth_value)
        }
        const value_underscoreLength  = value.underscoreLength
        let value_underscoreLength_type : int32 = RuntimeType.UNDEFINED
        value_underscoreLength_type = runtimeType(value_underscoreLength)
        valueSerializer.writeInt8(value_underscoreLength_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_underscoreLength_type)) {
            const value_underscoreLength_value  = value_underscoreLength!
            valueSerializer.writeNumber(value_underscoreLength_value)
        }
        const value_scheduleMarkerRadius  = value.scheduleMarkerRadius
        let value_scheduleMarkerRadius_type : int32 = RuntimeType.UNDEFINED
        value_scheduleMarkerRadius_type = runtimeType(value_scheduleMarkerRadius)
        valueSerializer.writeInt8(value_scheduleMarkerRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scheduleMarkerRadius_type)) {
            const value_scheduleMarkerRadius_value  = value_scheduleMarkerRadius!
            valueSerializer.writeNumber(value_scheduleMarkerRadius_value)
        }
        const value_boundaryRowOffset  = value.boundaryRowOffset
        let value_boundaryRowOffset_type : int32 = RuntimeType.UNDEFINED
        value_boundaryRowOffset_type = runtimeType(value_boundaryRowOffset)
        valueSerializer.writeInt8(value_boundaryRowOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_boundaryRowOffset_type)) {
            const value_boundaryRowOffset_value  = value_boundaryRowOffset!
            valueSerializer.writeNumber(value_boundaryRowOffset_value)
        }
        const value_boundaryColOffset  = value.boundaryColOffset
        let value_boundaryColOffset_type : int32 = RuntimeType.UNDEFINED
        value_boundaryColOffset_type = runtimeType(value_boundaryColOffset)
        valueSerializer.writeInt8(value_boundaryColOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_boundaryColOffset_type)) {
            const value_boundaryColOffset_value  = value_boundaryColOffset!
            valueSerializer.writeNumber(value_boundaryColOffset_value)
        }
    }
    writeCustomColors(value: CustomColors): void {
        let valueSerializer : Serializer = this
        const value_brand  = value.brand
        let value_brand_type : int32 = RuntimeType.UNDEFINED
        value_brand_type = runtimeType(value_brand)
        valueSerializer.writeInt8(value_brand_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_brand_type)) {
            const value_brand_value  = value_brand!
            let value_brand_value_type : int32 = RuntimeType.UNDEFINED
            value_brand_value_type = runtimeType(value_brand_value)
            if (TypeChecker.isColor(value_brand_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_brand_value_0  = value_brand_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_brand_value_0))
            }
            else if (RuntimeType.NUMBER == value_brand_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_brand_value_1  = value_brand_value as number
                valueSerializer.writeNumber(value_brand_value_1)
            }
            else if (RuntimeType.STRING == value_brand_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_brand_value_2  = value_brand_value as string
                valueSerializer.writeString(value_brand_value_2)
            }
            else if (RuntimeType.OBJECT == value_brand_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_brand_value_3  = value_brand_value as Resource
                valueSerializer.writeResource(value_brand_value_3)
            }
        }
        const value_warning  = value.warning
        let value_warning_type : int32 = RuntimeType.UNDEFINED
        value_warning_type = runtimeType(value_warning)
        valueSerializer.writeInt8(value_warning_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_warning_type)) {
            const value_warning_value  = value_warning!
            let value_warning_value_type : int32 = RuntimeType.UNDEFINED
            value_warning_value_type = runtimeType(value_warning_value)
            if (TypeChecker.isColor(value_warning_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_warning_value_0  = value_warning_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_warning_value_0))
            }
            else if (RuntimeType.NUMBER == value_warning_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_warning_value_1  = value_warning_value as number
                valueSerializer.writeNumber(value_warning_value_1)
            }
            else if (RuntimeType.STRING == value_warning_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_warning_value_2  = value_warning_value as string
                valueSerializer.writeString(value_warning_value_2)
            }
            else if (RuntimeType.OBJECT == value_warning_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_warning_value_3  = value_warning_value as Resource
                valueSerializer.writeResource(value_warning_value_3)
            }
        }
        const value_alert  = value.alert
        let value_alert_type : int32 = RuntimeType.UNDEFINED
        value_alert_type = runtimeType(value_alert)
        valueSerializer.writeInt8(value_alert_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alert_type)) {
            const value_alert_value  = value_alert!
            let value_alert_value_type : int32 = RuntimeType.UNDEFINED
            value_alert_value_type = runtimeType(value_alert_value)
            if (TypeChecker.isColor(value_alert_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_alert_value_0  = value_alert_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_alert_value_0))
            }
            else if (RuntimeType.NUMBER == value_alert_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_alert_value_1  = value_alert_value as number
                valueSerializer.writeNumber(value_alert_value_1)
            }
            else if (RuntimeType.STRING == value_alert_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_alert_value_2  = value_alert_value as string
                valueSerializer.writeString(value_alert_value_2)
            }
            else if (RuntimeType.OBJECT == value_alert_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_alert_value_3  = value_alert_value as Resource
                valueSerializer.writeResource(value_alert_value_3)
            }
        }
        const value_confirm  = value.confirm
        let value_confirm_type : int32 = RuntimeType.UNDEFINED
        value_confirm_type = runtimeType(value_confirm)
        valueSerializer.writeInt8(value_confirm_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_confirm_type)) {
            const value_confirm_value  = value_confirm!
            let value_confirm_value_type : int32 = RuntimeType.UNDEFINED
            value_confirm_value_type = runtimeType(value_confirm_value)
            if (TypeChecker.isColor(value_confirm_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_confirm_value_0  = value_confirm_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_confirm_value_0))
            }
            else if (RuntimeType.NUMBER == value_confirm_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_confirm_value_1  = value_confirm_value as number
                valueSerializer.writeNumber(value_confirm_value_1)
            }
            else if (RuntimeType.STRING == value_confirm_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_confirm_value_2  = value_confirm_value as string
                valueSerializer.writeString(value_confirm_value_2)
            }
            else if (RuntimeType.OBJECT == value_confirm_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_confirm_value_3  = value_confirm_value as Resource
                valueSerializer.writeResource(value_confirm_value_3)
            }
        }
        const value_fontPrimary  = value.fontPrimary
        let value_fontPrimary_type : int32 = RuntimeType.UNDEFINED
        value_fontPrimary_type = runtimeType(value_fontPrimary)
        valueSerializer.writeInt8(value_fontPrimary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontPrimary_type)) {
            const value_fontPrimary_value  = value_fontPrimary!
            let value_fontPrimary_value_type : int32 = RuntimeType.UNDEFINED
            value_fontPrimary_value_type = runtimeType(value_fontPrimary_value)
            if (TypeChecker.isColor(value_fontPrimary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontPrimary_value_0  = value_fontPrimary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontPrimary_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontPrimary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontPrimary_value_1  = value_fontPrimary_value as number
                valueSerializer.writeNumber(value_fontPrimary_value_1)
            }
            else if (RuntimeType.STRING == value_fontPrimary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontPrimary_value_2  = value_fontPrimary_value as string
                valueSerializer.writeString(value_fontPrimary_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontPrimary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontPrimary_value_3  = value_fontPrimary_value as Resource
                valueSerializer.writeResource(value_fontPrimary_value_3)
            }
        }
        const value_fontSecondary  = value.fontSecondary
        let value_fontSecondary_type : int32 = RuntimeType.UNDEFINED
        value_fontSecondary_type = runtimeType(value_fontSecondary)
        valueSerializer.writeInt8(value_fontSecondary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontSecondary_type)) {
            const value_fontSecondary_value  = value_fontSecondary!
            let value_fontSecondary_value_type : int32 = RuntimeType.UNDEFINED
            value_fontSecondary_value_type = runtimeType(value_fontSecondary_value)
            if (TypeChecker.isColor(value_fontSecondary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontSecondary_value_0  = value_fontSecondary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontSecondary_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontSecondary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontSecondary_value_1  = value_fontSecondary_value as number
                valueSerializer.writeNumber(value_fontSecondary_value_1)
            }
            else if (RuntimeType.STRING == value_fontSecondary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontSecondary_value_2  = value_fontSecondary_value as string
                valueSerializer.writeString(value_fontSecondary_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontSecondary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontSecondary_value_3  = value_fontSecondary_value as Resource
                valueSerializer.writeResource(value_fontSecondary_value_3)
            }
        }
        const value_fontTertiary  = value.fontTertiary
        let value_fontTertiary_type : int32 = RuntimeType.UNDEFINED
        value_fontTertiary_type = runtimeType(value_fontTertiary)
        valueSerializer.writeInt8(value_fontTertiary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontTertiary_type)) {
            const value_fontTertiary_value  = value_fontTertiary!
            let value_fontTertiary_value_type : int32 = RuntimeType.UNDEFINED
            value_fontTertiary_value_type = runtimeType(value_fontTertiary_value)
            if (TypeChecker.isColor(value_fontTertiary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontTertiary_value_0  = value_fontTertiary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontTertiary_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontTertiary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontTertiary_value_1  = value_fontTertiary_value as number
                valueSerializer.writeNumber(value_fontTertiary_value_1)
            }
            else if (RuntimeType.STRING == value_fontTertiary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontTertiary_value_2  = value_fontTertiary_value as string
                valueSerializer.writeString(value_fontTertiary_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontTertiary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontTertiary_value_3  = value_fontTertiary_value as Resource
                valueSerializer.writeResource(value_fontTertiary_value_3)
            }
        }
        const value_fontFourth  = value.fontFourth
        let value_fontFourth_type : int32 = RuntimeType.UNDEFINED
        value_fontFourth_type = runtimeType(value_fontFourth)
        valueSerializer.writeInt8(value_fontFourth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontFourth_type)) {
            const value_fontFourth_value  = value_fontFourth!
            let value_fontFourth_value_type : int32 = RuntimeType.UNDEFINED
            value_fontFourth_value_type = runtimeType(value_fontFourth_value)
            if (TypeChecker.isColor(value_fontFourth_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontFourth_value_0  = value_fontFourth_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontFourth_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontFourth_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontFourth_value_1  = value_fontFourth_value as number
                valueSerializer.writeNumber(value_fontFourth_value_1)
            }
            else if (RuntimeType.STRING == value_fontFourth_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontFourth_value_2  = value_fontFourth_value as string
                valueSerializer.writeString(value_fontFourth_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontFourth_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontFourth_value_3  = value_fontFourth_value as Resource
                valueSerializer.writeResource(value_fontFourth_value_3)
            }
        }
        const value_fontEmphasize  = value.fontEmphasize
        let value_fontEmphasize_type : int32 = RuntimeType.UNDEFINED
        value_fontEmphasize_type = runtimeType(value_fontEmphasize)
        valueSerializer.writeInt8(value_fontEmphasize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontEmphasize_type)) {
            const value_fontEmphasize_value  = value_fontEmphasize!
            let value_fontEmphasize_value_type : int32 = RuntimeType.UNDEFINED
            value_fontEmphasize_value_type = runtimeType(value_fontEmphasize_value)
            if (TypeChecker.isColor(value_fontEmphasize_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontEmphasize_value_0  = value_fontEmphasize_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontEmphasize_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontEmphasize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontEmphasize_value_1  = value_fontEmphasize_value as number
                valueSerializer.writeNumber(value_fontEmphasize_value_1)
            }
            else if (RuntimeType.STRING == value_fontEmphasize_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontEmphasize_value_2  = value_fontEmphasize_value as string
                valueSerializer.writeString(value_fontEmphasize_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontEmphasize_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontEmphasize_value_3  = value_fontEmphasize_value as Resource
                valueSerializer.writeResource(value_fontEmphasize_value_3)
            }
        }
        const value_fontOnPrimary  = value.fontOnPrimary
        let value_fontOnPrimary_type : int32 = RuntimeType.UNDEFINED
        value_fontOnPrimary_type = runtimeType(value_fontOnPrimary)
        valueSerializer.writeInt8(value_fontOnPrimary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontOnPrimary_type)) {
            const value_fontOnPrimary_value  = value_fontOnPrimary!
            let value_fontOnPrimary_value_type : int32 = RuntimeType.UNDEFINED
            value_fontOnPrimary_value_type = runtimeType(value_fontOnPrimary_value)
            if (TypeChecker.isColor(value_fontOnPrimary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontOnPrimary_value_0  = value_fontOnPrimary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontOnPrimary_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontOnPrimary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontOnPrimary_value_1  = value_fontOnPrimary_value as number
                valueSerializer.writeNumber(value_fontOnPrimary_value_1)
            }
            else if (RuntimeType.STRING == value_fontOnPrimary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontOnPrimary_value_2  = value_fontOnPrimary_value as string
                valueSerializer.writeString(value_fontOnPrimary_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontOnPrimary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontOnPrimary_value_3  = value_fontOnPrimary_value as Resource
                valueSerializer.writeResource(value_fontOnPrimary_value_3)
            }
        }
        const value_fontOnSecondary  = value.fontOnSecondary
        let value_fontOnSecondary_type : int32 = RuntimeType.UNDEFINED
        value_fontOnSecondary_type = runtimeType(value_fontOnSecondary)
        valueSerializer.writeInt8(value_fontOnSecondary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontOnSecondary_type)) {
            const value_fontOnSecondary_value  = value_fontOnSecondary!
            let value_fontOnSecondary_value_type : int32 = RuntimeType.UNDEFINED
            value_fontOnSecondary_value_type = runtimeType(value_fontOnSecondary_value)
            if (TypeChecker.isColor(value_fontOnSecondary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontOnSecondary_value_0  = value_fontOnSecondary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontOnSecondary_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontOnSecondary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontOnSecondary_value_1  = value_fontOnSecondary_value as number
                valueSerializer.writeNumber(value_fontOnSecondary_value_1)
            }
            else if (RuntimeType.STRING == value_fontOnSecondary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontOnSecondary_value_2  = value_fontOnSecondary_value as string
                valueSerializer.writeString(value_fontOnSecondary_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontOnSecondary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontOnSecondary_value_3  = value_fontOnSecondary_value as Resource
                valueSerializer.writeResource(value_fontOnSecondary_value_3)
            }
        }
        const value_fontOnTertiary  = value.fontOnTertiary
        let value_fontOnTertiary_type : int32 = RuntimeType.UNDEFINED
        value_fontOnTertiary_type = runtimeType(value_fontOnTertiary)
        valueSerializer.writeInt8(value_fontOnTertiary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontOnTertiary_type)) {
            const value_fontOnTertiary_value  = value_fontOnTertiary!
            let value_fontOnTertiary_value_type : int32 = RuntimeType.UNDEFINED
            value_fontOnTertiary_value_type = runtimeType(value_fontOnTertiary_value)
            if (TypeChecker.isColor(value_fontOnTertiary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontOnTertiary_value_0  = value_fontOnTertiary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontOnTertiary_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontOnTertiary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontOnTertiary_value_1  = value_fontOnTertiary_value as number
                valueSerializer.writeNumber(value_fontOnTertiary_value_1)
            }
            else if (RuntimeType.STRING == value_fontOnTertiary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontOnTertiary_value_2  = value_fontOnTertiary_value as string
                valueSerializer.writeString(value_fontOnTertiary_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontOnTertiary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontOnTertiary_value_3  = value_fontOnTertiary_value as Resource
                valueSerializer.writeResource(value_fontOnTertiary_value_3)
            }
        }
        const value_fontOnFourth  = value.fontOnFourth
        let value_fontOnFourth_type : int32 = RuntimeType.UNDEFINED
        value_fontOnFourth_type = runtimeType(value_fontOnFourth)
        valueSerializer.writeInt8(value_fontOnFourth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontOnFourth_type)) {
            const value_fontOnFourth_value  = value_fontOnFourth!
            let value_fontOnFourth_value_type : int32 = RuntimeType.UNDEFINED
            value_fontOnFourth_value_type = runtimeType(value_fontOnFourth_value)
            if (TypeChecker.isColor(value_fontOnFourth_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontOnFourth_value_0  = value_fontOnFourth_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontOnFourth_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontOnFourth_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontOnFourth_value_1  = value_fontOnFourth_value as number
                valueSerializer.writeNumber(value_fontOnFourth_value_1)
            }
            else if (RuntimeType.STRING == value_fontOnFourth_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontOnFourth_value_2  = value_fontOnFourth_value as string
                valueSerializer.writeString(value_fontOnFourth_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontOnFourth_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontOnFourth_value_3  = value_fontOnFourth_value as Resource
                valueSerializer.writeResource(value_fontOnFourth_value_3)
            }
        }
        const value_iconPrimary  = value.iconPrimary
        let value_iconPrimary_type : int32 = RuntimeType.UNDEFINED
        value_iconPrimary_type = runtimeType(value_iconPrimary)
        valueSerializer.writeInt8(value_iconPrimary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconPrimary_type)) {
            const value_iconPrimary_value  = value_iconPrimary!
            let value_iconPrimary_value_type : int32 = RuntimeType.UNDEFINED
            value_iconPrimary_value_type = runtimeType(value_iconPrimary_value)
            if (TypeChecker.isColor(value_iconPrimary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconPrimary_value_0  = value_iconPrimary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconPrimary_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconPrimary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconPrimary_value_1  = value_iconPrimary_value as number
                valueSerializer.writeNumber(value_iconPrimary_value_1)
            }
            else if (RuntimeType.STRING == value_iconPrimary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconPrimary_value_2  = value_iconPrimary_value as string
                valueSerializer.writeString(value_iconPrimary_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconPrimary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconPrimary_value_3  = value_iconPrimary_value as Resource
                valueSerializer.writeResource(value_iconPrimary_value_3)
            }
        }
        const value_iconSecondary  = value.iconSecondary
        let value_iconSecondary_type : int32 = RuntimeType.UNDEFINED
        value_iconSecondary_type = runtimeType(value_iconSecondary)
        valueSerializer.writeInt8(value_iconSecondary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconSecondary_type)) {
            const value_iconSecondary_value  = value_iconSecondary!
            let value_iconSecondary_value_type : int32 = RuntimeType.UNDEFINED
            value_iconSecondary_value_type = runtimeType(value_iconSecondary_value)
            if (TypeChecker.isColor(value_iconSecondary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconSecondary_value_0  = value_iconSecondary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconSecondary_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconSecondary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconSecondary_value_1  = value_iconSecondary_value as number
                valueSerializer.writeNumber(value_iconSecondary_value_1)
            }
            else if (RuntimeType.STRING == value_iconSecondary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconSecondary_value_2  = value_iconSecondary_value as string
                valueSerializer.writeString(value_iconSecondary_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconSecondary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconSecondary_value_3  = value_iconSecondary_value as Resource
                valueSerializer.writeResource(value_iconSecondary_value_3)
            }
        }
        const value_iconTertiary  = value.iconTertiary
        let value_iconTertiary_type : int32 = RuntimeType.UNDEFINED
        value_iconTertiary_type = runtimeType(value_iconTertiary)
        valueSerializer.writeInt8(value_iconTertiary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconTertiary_type)) {
            const value_iconTertiary_value  = value_iconTertiary!
            let value_iconTertiary_value_type : int32 = RuntimeType.UNDEFINED
            value_iconTertiary_value_type = runtimeType(value_iconTertiary_value)
            if (TypeChecker.isColor(value_iconTertiary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconTertiary_value_0  = value_iconTertiary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconTertiary_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconTertiary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconTertiary_value_1  = value_iconTertiary_value as number
                valueSerializer.writeNumber(value_iconTertiary_value_1)
            }
            else if (RuntimeType.STRING == value_iconTertiary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconTertiary_value_2  = value_iconTertiary_value as string
                valueSerializer.writeString(value_iconTertiary_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconTertiary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconTertiary_value_3  = value_iconTertiary_value as Resource
                valueSerializer.writeResource(value_iconTertiary_value_3)
            }
        }
        const value_iconFourth  = value.iconFourth
        let value_iconFourth_type : int32 = RuntimeType.UNDEFINED
        value_iconFourth_type = runtimeType(value_iconFourth)
        valueSerializer.writeInt8(value_iconFourth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconFourth_type)) {
            const value_iconFourth_value  = value_iconFourth!
            let value_iconFourth_value_type : int32 = RuntimeType.UNDEFINED
            value_iconFourth_value_type = runtimeType(value_iconFourth_value)
            if (TypeChecker.isColor(value_iconFourth_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconFourth_value_0  = value_iconFourth_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconFourth_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconFourth_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconFourth_value_1  = value_iconFourth_value as number
                valueSerializer.writeNumber(value_iconFourth_value_1)
            }
            else if (RuntimeType.STRING == value_iconFourth_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconFourth_value_2  = value_iconFourth_value as string
                valueSerializer.writeString(value_iconFourth_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconFourth_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconFourth_value_3  = value_iconFourth_value as Resource
                valueSerializer.writeResource(value_iconFourth_value_3)
            }
        }
        const value_iconEmphasize  = value.iconEmphasize
        let value_iconEmphasize_type : int32 = RuntimeType.UNDEFINED
        value_iconEmphasize_type = runtimeType(value_iconEmphasize)
        valueSerializer.writeInt8(value_iconEmphasize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconEmphasize_type)) {
            const value_iconEmphasize_value  = value_iconEmphasize!
            let value_iconEmphasize_value_type : int32 = RuntimeType.UNDEFINED
            value_iconEmphasize_value_type = runtimeType(value_iconEmphasize_value)
            if (TypeChecker.isColor(value_iconEmphasize_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconEmphasize_value_0  = value_iconEmphasize_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconEmphasize_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconEmphasize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconEmphasize_value_1  = value_iconEmphasize_value as number
                valueSerializer.writeNumber(value_iconEmphasize_value_1)
            }
            else if (RuntimeType.STRING == value_iconEmphasize_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconEmphasize_value_2  = value_iconEmphasize_value as string
                valueSerializer.writeString(value_iconEmphasize_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconEmphasize_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconEmphasize_value_3  = value_iconEmphasize_value as Resource
                valueSerializer.writeResource(value_iconEmphasize_value_3)
            }
        }
        const value_iconSubEmphasize  = value.iconSubEmphasize
        let value_iconSubEmphasize_type : int32 = RuntimeType.UNDEFINED
        value_iconSubEmphasize_type = runtimeType(value_iconSubEmphasize)
        valueSerializer.writeInt8(value_iconSubEmphasize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconSubEmphasize_type)) {
            const value_iconSubEmphasize_value  = value_iconSubEmphasize!
            let value_iconSubEmphasize_value_type : int32 = RuntimeType.UNDEFINED
            value_iconSubEmphasize_value_type = runtimeType(value_iconSubEmphasize_value)
            if (TypeChecker.isColor(value_iconSubEmphasize_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconSubEmphasize_value_0  = value_iconSubEmphasize_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconSubEmphasize_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconSubEmphasize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconSubEmphasize_value_1  = value_iconSubEmphasize_value as number
                valueSerializer.writeNumber(value_iconSubEmphasize_value_1)
            }
            else if (RuntimeType.STRING == value_iconSubEmphasize_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconSubEmphasize_value_2  = value_iconSubEmphasize_value as string
                valueSerializer.writeString(value_iconSubEmphasize_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconSubEmphasize_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconSubEmphasize_value_3  = value_iconSubEmphasize_value as Resource
                valueSerializer.writeResource(value_iconSubEmphasize_value_3)
            }
        }
        const value_iconOnPrimary  = value.iconOnPrimary
        let value_iconOnPrimary_type : int32 = RuntimeType.UNDEFINED
        value_iconOnPrimary_type = runtimeType(value_iconOnPrimary)
        valueSerializer.writeInt8(value_iconOnPrimary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconOnPrimary_type)) {
            const value_iconOnPrimary_value  = value_iconOnPrimary!
            let value_iconOnPrimary_value_type : int32 = RuntimeType.UNDEFINED
            value_iconOnPrimary_value_type = runtimeType(value_iconOnPrimary_value)
            if (TypeChecker.isColor(value_iconOnPrimary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconOnPrimary_value_0  = value_iconOnPrimary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconOnPrimary_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconOnPrimary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconOnPrimary_value_1  = value_iconOnPrimary_value as number
                valueSerializer.writeNumber(value_iconOnPrimary_value_1)
            }
            else if (RuntimeType.STRING == value_iconOnPrimary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconOnPrimary_value_2  = value_iconOnPrimary_value as string
                valueSerializer.writeString(value_iconOnPrimary_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconOnPrimary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconOnPrimary_value_3  = value_iconOnPrimary_value as Resource
                valueSerializer.writeResource(value_iconOnPrimary_value_3)
            }
        }
        const value_iconOnSecondary  = value.iconOnSecondary
        let value_iconOnSecondary_type : int32 = RuntimeType.UNDEFINED
        value_iconOnSecondary_type = runtimeType(value_iconOnSecondary)
        valueSerializer.writeInt8(value_iconOnSecondary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconOnSecondary_type)) {
            const value_iconOnSecondary_value  = value_iconOnSecondary!
            let value_iconOnSecondary_value_type : int32 = RuntimeType.UNDEFINED
            value_iconOnSecondary_value_type = runtimeType(value_iconOnSecondary_value)
            if (TypeChecker.isColor(value_iconOnSecondary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconOnSecondary_value_0  = value_iconOnSecondary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconOnSecondary_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconOnSecondary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconOnSecondary_value_1  = value_iconOnSecondary_value as number
                valueSerializer.writeNumber(value_iconOnSecondary_value_1)
            }
            else if (RuntimeType.STRING == value_iconOnSecondary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconOnSecondary_value_2  = value_iconOnSecondary_value as string
                valueSerializer.writeString(value_iconOnSecondary_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconOnSecondary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconOnSecondary_value_3  = value_iconOnSecondary_value as Resource
                valueSerializer.writeResource(value_iconOnSecondary_value_3)
            }
        }
        const value_iconOnTertiary  = value.iconOnTertiary
        let value_iconOnTertiary_type : int32 = RuntimeType.UNDEFINED
        value_iconOnTertiary_type = runtimeType(value_iconOnTertiary)
        valueSerializer.writeInt8(value_iconOnTertiary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconOnTertiary_type)) {
            const value_iconOnTertiary_value  = value_iconOnTertiary!
            let value_iconOnTertiary_value_type : int32 = RuntimeType.UNDEFINED
            value_iconOnTertiary_value_type = runtimeType(value_iconOnTertiary_value)
            if (TypeChecker.isColor(value_iconOnTertiary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconOnTertiary_value_0  = value_iconOnTertiary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconOnTertiary_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconOnTertiary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconOnTertiary_value_1  = value_iconOnTertiary_value as number
                valueSerializer.writeNumber(value_iconOnTertiary_value_1)
            }
            else if (RuntimeType.STRING == value_iconOnTertiary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconOnTertiary_value_2  = value_iconOnTertiary_value as string
                valueSerializer.writeString(value_iconOnTertiary_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconOnTertiary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconOnTertiary_value_3  = value_iconOnTertiary_value as Resource
                valueSerializer.writeResource(value_iconOnTertiary_value_3)
            }
        }
        const value_iconOnFourth  = value.iconOnFourth
        let value_iconOnFourth_type : int32 = RuntimeType.UNDEFINED
        value_iconOnFourth_type = runtimeType(value_iconOnFourth)
        valueSerializer.writeInt8(value_iconOnFourth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_iconOnFourth_type)) {
            const value_iconOnFourth_value  = value_iconOnFourth!
            let value_iconOnFourth_value_type : int32 = RuntimeType.UNDEFINED
            value_iconOnFourth_value_type = runtimeType(value_iconOnFourth_value)
            if (TypeChecker.isColor(value_iconOnFourth_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_iconOnFourth_value_0  = value_iconOnFourth_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_iconOnFourth_value_0))
            }
            else if (RuntimeType.NUMBER == value_iconOnFourth_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_iconOnFourth_value_1  = value_iconOnFourth_value as number
                valueSerializer.writeNumber(value_iconOnFourth_value_1)
            }
            else if (RuntimeType.STRING == value_iconOnFourth_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_iconOnFourth_value_2  = value_iconOnFourth_value as string
                valueSerializer.writeString(value_iconOnFourth_value_2)
            }
            else if (RuntimeType.OBJECT == value_iconOnFourth_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_iconOnFourth_value_3  = value_iconOnFourth_value as Resource
                valueSerializer.writeResource(value_iconOnFourth_value_3)
            }
        }
        const value_backgroundPrimary  = value.backgroundPrimary
        let value_backgroundPrimary_type : int32 = RuntimeType.UNDEFINED
        value_backgroundPrimary_type = runtimeType(value_backgroundPrimary)
        valueSerializer.writeInt8(value_backgroundPrimary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundPrimary_type)) {
            const value_backgroundPrimary_value  = value_backgroundPrimary!
            let value_backgroundPrimary_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundPrimary_value_type = runtimeType(value_backgroundPrimary_value)
            if (TypeChecker.isColor(value_backgroundPrimary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundPrimary_value_0  = value_backgroundPrimary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundPrimary_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundPrimary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundPrimary_value_1  = value_backgroundPrimary_value as number
                valueSerializer.writeNumber(value_backgroundPrimary_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundPrimary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundPrimary_value_2  = value_backgroundPrimary_value as string
                valueSerializer.writeString(value_backgroundPrimary_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundPrimary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundPrimary_value_3  = value_backgroundPrimary_value as Resource
                valueSerializer.writeResource(value_backgroundPrimary_value_3)
            }
        }
        const value_backgroundSecondary  = value.backgroundSecondary
        let value_backgroundSecondary_type : int32 = RuntimeType.UNDEFINED
        value_backgroundSecondary_type = runtimeType(value_backgroundSecondary)
        valueSerializer.writeInt8(value_backgroundSecondary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundSecondary_type)) {
            const value_backgroundSecondary_value  = value_backgroundSecondary!
            let value_backgroundSecondary_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundSecondary_value_type = runtimeType(value_backgroundSecondary_value)
            if (TypeChecker.isColor(value_backgroundSecondary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundSecondary_value_0  = value_backgroundSecondary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundSecondary_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundSecondary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundSecondary_value_1  = value_backgroundSecondary_value as number
                valueSerializer.writeNumber(value_backgroundSecondary_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundSecondary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundSecondary_value_2  = value_backgroundSecondary_value as string
                valueSerializer.writeString(value_backgroundSecondary_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundSecondary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundSecondary_value_3  = value_backgroundSecondary_value as Resource
                valueSerializer.writeResource(value_backgroundSecondary_value_3)
            }
        }
        const value_backgroundTertiary  = value.backgroundTertiary
        let value_backgroundTertiary_type : int32 = RuntimeType.UNDEFINED
        value_backgroundTertiary_type = runtimeType(value_backgroundTertiary)
        valueSerializer.writeInt8(value_backgroundTertiary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundTertiary_type)) {
            const value_backgroundTertiary_value  = value_backgroundTertiary!
            let value_backgroundTertiary_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundTertiary_value_type = runtimeType(value_backgroundTertiary_value)
            if (TypeChecker.isColor(value_backgroundTertiary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundTertiary_value_0  = value_backgroundTertiary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundTertiary_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundTertiary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundTertiary_value_1  = value_backgroundTertiary_value as number
                valueSerializer.writeNumber(value_backgroundTertiary_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundTertiary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundTertiary_value_2  = value_backgroundTertiary_value as string
                valueSerializer.writeString(value_backgroundTertiary_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundTertiary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundTertiary_value_3  = value_backgroundTertiary_value as Resource
                valueSerializer.writeResource(value_backgroundTertiary_value_3)
            }
        }
        const value_backgroundFourth  = value.backgroundFourth
        let value_backgroundFourth_type : int32 = RuntimeType.UNDEFINED
        value_backgroundFourth_type = runtimeType(value_backgroundFourth)
        valueSerializer.writeInt8(value_backgroundFourth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundFourth_type)) {
            const value_backgroundFourth_value  = value_backgroundFourth!
            let value_backgroundFourth_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundFourth_value_type = runtimeType(value_backgroundFourth_value)
            if (TypeChecker.isColor(value_backgroundFourth_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundFourth_value_0  = value_backgroundFourth_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundFourth_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundFourth_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundFourth_value_1  = value_backgroundFourth_value as number
                valueSerializer.writeNumber(value_backgroundFourth_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundFourth_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundFourth_value_2  = value_backgroundFourth_value as string
                valueSerializer.writeString(value_backgroundFourth_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundFourth_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundFourth_value_3  = value_backgroundFourth_value as Resource
                valueSerializer.writeResource(value_backgroundFourth_value_3)
            }
        }
        const value_backgroundEmphasize  = value.backgroundEmphasize
        let value_backgroundEmphasize_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEmphasize_type = runtimeType(value_backgroundEmphasize)
        valueSerializer.writeInt8(value_backgroundEmphasize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEmphasize_type)) {
            const value_backgroundEmphasize_value  = value_backgroundEmphasize!
            let value_backgroundEmphasize_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundEmphasize_value_type = runtimeType(value_backgroundEmphasize_value)
            if (TypeChecker.isColor(value_backgroundEmphasize_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundEmphasize_value_0  = value_backgroundEmphasize_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundEmphasize_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundEmphasize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundEmphasize_value_1  = value_backgroundEmphasize_value as number
                valueSerializer.writeNumber(value_backgroundEmphasize_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundEmphasize_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundEmphasize_value_2  = value_backgroundEmphasize_value as string
                valueSerializer.writeString(value_backgroundEmphasize_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundEmphasize_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundEmphasize_value_3  = value_backgroundEmphasize_value as Resource
                valueSerializer.writeResource(value_backgroundEmphasize_value_3)
            }
        }
        const value_compForegroundPrimary  = value.compForegroundPrimary
        let value_compForegroundPrimary_type : int32 = RuntimeType.UNDEFINED
        value_compForegroundPrimary_type = runtimeType(value_compForegroundPrimary)
        valueSerializer.writeInt8(value_compForegroundPrimary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compForegroundPrimary_type)) {
            const value_compForegroundPrimary_value  = value_compForegroundPrimary!
            let value_compForegroundPrimary_value_type : int32 = RuntimeType.UNDEFINED
            value_compForegroundPrimary_value_type = runtimeType(value_compForegroundPrimary_value)
            if (TypeChecker.isColor(value_compForegroundPrimary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compForegroundPrimary_value_0  = value_compForegroundPrimary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compForegroundPrimary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compForegroundPrimary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compForegroundPrimary_value_1  = value_compForegroundPrimary_value as number
                valueSerializer.writeNumber(value_compForegroundPrimary_value_1)
            }
            else if (RuntimeType.STRING == value_compForegroundPrimary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compForegroundPrimary_value_2  = value_compForegroundPrimary_value as string
                valueSerializer.writeString(value_compForegroundPrimary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compForegroundPrimary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compForegroundPrimary_value_3  = value_compForegroundPrimary_value as Resource
                valueSerializer.writeResource(value_compForegroundPrimary_value_3)
            }
        }
        const value_compBackgroundPrimary  = value.compBackgroundPrimary
        let value_compBackgroundPrimary_type : int32 = RuntimeType.UNDEFINED
        value_compBackgroundPrimary_type = runtimeType(value_compBackgroundPrimary)
        valueSerializer.writeInt8(value_compBackgroundPrimary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compBackgroundPrimary_type)) {
            const value_compBackgroundPrimary_value  = value_compBackgroundPrimary!
            let value_compBackgroundPrimary_value_type : int32 = RuntimeType.UNDEFINED
            value_compBackgroundPrimary_value_type = runtimeType(value_compBackgroundPrimary_value)
            if (TypeChecker.isColor(value_compBackgroundPrimary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compBackgroundPrimary_value_0  = value_compBackgroundPrimary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compBackgroundPrimary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compBackgroundPrimary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compBackgroundPrimary_value_1  = value_compBackgroundPrimary_value as number
                valueSerializer.writeNumber(value_compBackgroundPrimary_value_1)
            }
            else if (RuntimeType.STRING == value_compBackgroundPrimary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compBackgroundPrimary_value_2  = value_compBackgroundPrimary_value as string
                valueSerializer.writeString(value_compBackgroundPrimary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compBackgroundPrimary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compBackgroundPrimary_value_3  = value_compBackgroundPrimary_value as Resource
                valueSerializer.writeResource(value_compBackgroundPrimary_value_3)
            }
        }
        const value_compBackgroundPrimaryTran  = value.compBackgroundPrimaryTran
        let value_compBackgroundPrimaryTran_type : int32 = RuntimeType.UNDEFINED
        value_compBackgroundPrimaryTran_type = runtimeType(value_compBackgroundPrimaryTran)
        valueSerializer.writeInt8(value_compBackgroundPrimaryTran_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compBackgroundPrimaryTran_type)) {
            const value_compBackgroundPrimaryTran_value  = value_compBackgroundPrimaryTran!
            let value_compBackgroundPrimaryTran_value_type : int32 = RuntimeType.UNDEFINED
            value_compBackgroundPrimaryTran_value_type = runtimeType(value_compBackgroundPrimaryTran_value)
            if (TypeChecker.isColor(value_compBackgroundPrimaryTran_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compBackgroundPrimaryTran_value_0  = value_compBackgroundPrimaryTran_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compBackgroundPrimaryTran_value_0))
            }
            else if (RuntimeType.NUMBER == value_compBackgroundPrimaryTran_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compBackgroundPrimaryTran_value_1  = value_compBackgroundPrimaryTran_value as number
                valueSerializer.writeNumber(value_compBackgroundPrimaryTran_value_1)
            }
            else if (RuntimeType.STRING == value_compBackgroundPrimaryTran_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compBackgroundPrimaryTran_value_2  = value_compBackgroundPrimaryTran_value as string
                valueSerializer.writeString(value_compBackgroundPrimaryTran_value_2)
            }
            else if (RuntimeType.OBJECT == value_compBackgroundPrimaryTran_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compBackgroundPrimaryTran_value_3  = value_compBackgroundPrimaryTran_value as Resource
                valueSerializer.writeResource(value_compBackgroundPrimaryTran_value_3)
            }
        }
        const value_compBackgroundPrimaryContrary  = value.compBackgroundPrimaryContrary
        let value_compBackgroundPrimaryContrary_type : int32 = RuntimeType.UNDEFINED
        value_compBackgroundPrimaryContrary_type = runtimeType(value_compBackgroundPrimaryContrary)
        valueSerializer.writeInt8(value_compBackgroundPrimaryContrary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compBackgroundPrimaryContrary_type)) {
            const value_compBackgroundPrimaryContrary_value  = value_compBackgroundPrimaryContrary!
            let value_compBackgroundPrimaryContrary_value_type : int32 = RuntimeType.UNDEFINED
            value_compBackgroundPrimaryContrary_value_type = runtimeType(value_compBackgroundPrimaryContrary_value)
            if (TypeChecker.isColor(value_compBackgroundPrimaryContrary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compBackgroundPrimaryContrary_value_0  = value_compBackgroundPrimaryContrary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compBackgroundPrimaryContrary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compBackgroundPrimaryContrary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compBackgroundPrimaryContrary_value_1  = value_compBackgroundPrimaryContrary_value as number
                valueSerializer.writeNumber(value_compBackgroundPrimaryContrary_value_1)
            }
            else if (RuntimeType.STRING == value_compBackgroundPrimaryContrary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compBackgroundPrimaryContrary_value_2  = value_compBackgroundPrimaryContrary_value as string
                valueSerializer.writeString(value_compBackgroundPrimaryContrary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compBackgroundPrimaryContrary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compBackgroundPrimaryContrary_value_3  = value_compBackgroundPrimaryContrary_value as Resource
                valueSerializer.writeResource(value_compBackgroundPrimaryContrary_value_3)
            }
        }
        const value_compBackgroundGray  = value.compBackgroundGray
        let value_compBackgroundGray_type : int32 = RuntimeType.UNDEFINED
        value_compBackgroundGray_type = runtimeType(value_compBackgroundGray)
        valueSerializer.writeInt8(value_compBackgroundGray_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compBackgroundGray_type)) {
            const value_compBackgroundGray_value  = value_compBackgroundGray!
            let value_compBackgroundGray_value_type : int32 = RuntimeType.UNDEFINED
            value_compBackgroundGray_value_type = runtimeType(value_compBackgroundGray_value)
            if (TypeChecker.isColor(value_compBackgroundGray_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compBackgroundGray_value_0  = value_compBackgroundGray_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compBackgroundGray_value_0))
            }
            else if (RuntimeType.NUMBER == value_compBackgroundGray_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compBackgroundGray_value_1  = value_compBackgroundGray_value as number
                valueSerializer.writeNumber(value_compBackgroundGray_value_1)
            }
            else if (RuntimeType.STRING == value_compBackgroundGray_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compBackgroundGray_value_2  = value_compBackgroundGray_value as string
                valueSerializer.writeString(value_compBackgroundGray_value_2)
            }
            else if (RuntimeType.OBJECT == value_compBackgroundGray_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compBackgroundGray_value_3  = value_compBackgroundGray_value as Resource
                valueSerializer.writeResource(value_compBackgroundGray_value_3)
            }
        }
        const value_compBackgroundSecondary  = value.compBackgroundSecondary
        let value_compBackgroundSecondary_type : int32 = RuntimeType.UNDEFINED
        value_compBackgroundSecondary_type = runtimeType(value_compBackgroundSecondary)
        valueSerializer.writeInt8(value_compBackgroundSecondary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compBackgroundSecondary_type)) {
            const value_compBackgroundSecondary_value  = value_compBackgroundSecondary!
            let value_compBackgroundSecondary_value_type : int32 = RuntimeType.UNDEFINED
            value_compBackgroundSecondary_value_type = runtimeType(value_compBackgroundSecondary_value)
            if (TypeChecker.isColor(value_compBackgroundSecondary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compBackgroundSecondary_value_0  = value_compBackgroundSecondary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compBackgroundSecondary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compBackgroundSecondary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compBackgroundSecondary_value_1  = value_compBackgroundSecondary_value as number
                valueSerializer.writeNumber(value_compBackgroundSecondary_value_1)
            }
            else if (RuntimeType.STRING == value_compBackgroundSecondary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compBackgroundSecondary_value_2  = value_compBackgroundSecondary_value as string
                valueSerializer.writeString(value_compBackgroundSecondary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compBackgroundSecondary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compBackgroundSecondary_value_3  = value_compBackgroundSecondary_value as Resource
                valueSerializer.writeResource(value_compBackgroundSecondary_value_3)
            }
        }
        const value_compBackgroundTertiary  = value.compBackgroundTertiary
        let value_compBackgroundTertiary_type : int32 = RuntimeType.UNDEFINED
        value_compBackgroundTertiary_type = runtimeType(value_compBackgroundTertiary)
        valueSerializer.writeInt8(value_compBackgroundTertiary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compBackgroundTertiary_type)) {
            const value_compBackgroundTertiary_value  = value_compBackgroundTertiary!
            let value_compBackgroundTertiary_value_type : int32 = RuntimeType.UNDEFINED
            value_compBackgroundTertiary_value_type = runtimeType(value_compBackgroundTertiary_value)
            if (TypeChecker.isColor(value_compBackgroundTertiary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compBackgroundTertiary_value_0  = value_compBackgroundTertiary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compBackgroundTertiary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compBackgroundTertiary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compBackgroundTertiary_value_1  = value_compBackgroundTertiary_value as number
                valueSerializer.writeNumber(value_compBackgroundTertiary_value_1)
            }
            else if (RuntimeType.STRING == value_compBackgroundTertiary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compBackgroundTertiary_value_2  = value_compBackgroundTertiary_value as string
                valueSerializer.writeString(value_compBackgroundTertiary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compBackgroundTertiary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compBackgroundTertiary_value_3  = value_compBackgroundTertiary_value as Resource
                valueSerializer.writeResource(value_compBackgroundTertiary_value_3)
            }
        }
        const value_compBackgroundEmphasize  = value.compBackgroundEmphasize
        let value_compBackgroundEmphasize_type : int32 = RuntimeType.UNDEFINED
        value_compBackgroundEmphasize_type = runtimeType(value_compBackgroundEmphasize)
        valueSerializer.writeInt8(value_compBackgroundEmphasize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compBackgroundEmphasize_type)) {
            const value_compBackgroundEmphasize_value  = value_compBackgroundEmphasize!
            let value_compBackgroundEmphasize_value_type : int32 = RuntimeType.UNDEFINED
            value_compBackgroundEmphasize_value_type = runtimeType(value_compBackgroundEmphasize_value)
            if (TypeChecker.isColor(value_compBackgroundEmphasize_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compBackgroundEmphasize_value_0  = value_compBackgroundEmphasize_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compBackgroundEmphasize_value_0))
            }
            else if (RuntimeType.NUMBER == value_compBackgroundEmphasize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compBackgroundEmphasize_value_1  = value_compBackgroundEmphasize_value as number
                valueSerializer.writeNumber(value_compBackgroundEmphasize_value_1)
            }
            else if (RuntimeType.STRING == value_compBackgroundEmphasize_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compBackgroundEmphasize_value_2  = value_compBackgroundEmphasize_value as string
                valueSerializer.writeString(value_compBackgroundEmphasize_value_2)
            }
            else if (RuntimeType.OBJECT == value_compBackgroundEmphasize_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compBackgroundEmphasize_value_3  = value_compBackgroundEmphasize_value as Resource
                valueSerializer.writeResource(value_compBackgroundEmphasize_value_3)
            }
        }
        const value_compBackgroundNeutral  = value.compBackgroundNeutral
        let value_compBackgroundNeutral_type : int32 = RuntimeType.UNDEFINED
        value_compBackgroundNeutral_type = runtimeType(value_compBackgroundNeutral)
        valueSerializer.writeInt8(value_compBackgroundNeutral_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compBackgroundNeutral_type)) {
            const value_compBackgroundNeutral_value  = value_compBackgroundNeutral!
            let value_compBackgroundNeutral_value_type : int32 = RuntimeType.UNDEFINED
            value_compBackgroundNeutral_value_type = runtimeType(value_compBackgroundNeutral_value)
            if (TypeChecker.isColor(value_compBackgroundNeutral_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compBackgroundNeutral_value_0  = value_compBackgroundNeutral_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compBackgroundNeutral_value_0))
            }
            else if (RuntimeType.NUMBER == value_compBackgroundNeutral_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compBackgroundNeutral_value_1  = value_compBackgroundNeutral_value as number
                valueSerializer.writeNumber(value_compBackgroundNeutral_value_1)
            }
            else if (RuntimeType.STRING == value_compBackgroundNeutral_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compBackgroundNeutral_value_2  = value_compBackgroundNeutral_value as string
                valueSerializer.writeString(value_compBackgroundNeutral_value_2)
            }
            else if (RuntimeType.OBJECT == value_compBackgroundNeutral_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compBackgroundNeutral_value_3  = value_compBackgroundNeutral_value as Resource
                valueSerializer.writeResource(value_compBackgroundNeutral_value_3)
            }
        }
        const value_compEmphasizeSecondary  = value.compEmphasizeSecondary
        let value_compEmphasizeSecondary_type : int32 = RuntimeType.UNDEFINED
        value_compEmphasizeSecondary_type = runtimeType(value_compEmphasizeSecondary)
        valueSerializer.writeInt8(value_compEmphasizeSecondary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compEmphasizeSecondary_type)) {
            const value_compEmphasizeSecondary_value  = value_compEmphasizeSecondary!
            let value_compEmphasizeSecondary_value_type : int32 = RuntimeType.UNDEFINED
            value_compEmphasizeSecondary_value_type = runtimeType(value_compEmphasizeSecondary_value)
            if (TypeChecker.isColor(value_compEmphasizeSecondary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compEmphasizeSecondary_value_0  = value_compEmphasizeSecondary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compEmphasizeSecondary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compEmphasizeSecondary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compEmphasizeSecondary_value_1  = value_compEmphasizeSecondary_value as number
                valueSerializer.writeNumber(value_compEmphasizeSecondary_value_1)
            }
            else if (RuntimeType.STRING == value_compEmphasizeSecondary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compEmphasizeSecondary_value_2  = value_compEmphasizeSecondary_value as string
                valueSerializer.writeString(value_compEmphasizeSecondary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compEmphasizeSecondary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compEmphasizeSecondary_value_3  = value_compEmphasizeSecondary_value as Resource
                valueSerializer.writeResource(value_compEmphasizeSecondary_value_3)
            }
        }
        const value_compEmphasizeTertiary  = value.compEmphasizeTertiary
        let value_compEmphasizeTertiary_type : int32 = RuntimeType.UNDEFINED
        value_compEmphasizeTertiary_type = runtimeType(value_compEmphasizeTertiary)
        valueSerializer.writeInt8(value_compEmphasizeTertiary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compEmphasizeTertiary_type)) {
            const value_compEmphasizeTertiary_value  = value_compEmphasizeTertiary!
            let value_compEmphasizeTertiary_value_type : int32 = RuntimeType.UNDEFINED
            value_compEmphasizeTertiary_value_type = runtimeType(value_compEmphasizeTertiary_value)
            if (TypeChecker.isColor(value_compEmphasizeTertiary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compEmphasizeTertiary_value_0  = value_compEmphasizeTertiary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compEmphasizeTertiary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compEmphasizeTertiary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compEmphasizeTertiary_value_1  = value_compEmphasizeTertiary_value as number
                valueSerializer.writeNumber(value_compEmphasizeTertiary_value_1)
            }
            else if (RuntimeType.STRING == value_compEmphasizeTertiary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compEmphasizeTertiary_value_2  = value_compEmphasizeTertiary_value as string
                valueSerializer.writeString(value_compEmphasizeTertiary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compEmphasizeTertiary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compEmphasizeTertiary_value_3  = value_compEmphasizeTertiary_value as Resource
                valueSerializer.writeResource(value_compEmphasizeTertiary_value_3)
            }
        }
        const value_compDivider  = value.compDivider
        let value_compDivider_type : int32 = RuntimeType.UNDEFINED
        value_compDivider_type = runtimeType(value_compDivider)
        valueSerializer.writeInt8(value_compDivider_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compDivider_type)) {
            const value_compDivider_value  = value_compDivider!
            let value_compDivider_value_type : int32 = RuntimeType.UNDEFINED
            value_compDivider_value_type = runtimeType(value_compDivider_value)
            if (TypeChecker.isColor(value_compDivider_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compDivider_value_0  = value_compDivider_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compDivider_value_0))
            }
            else if (RuntimeType.NUMBER == value_compDivider_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compDivider_value_1  = value_compDivider_value as number
                valueSerializer.writeNumber(value_compDivider_value_1)
            }
            else if (RuntimeType.STRING == value_compDivider_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compDivider_value_2  = value_compDivider_value as string
                valueSerializer.writeString(value_compDivider_value_2)
            }
            else if (RuntimeType.OBJECT == value_compDivider_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compDivider_value_3  = value_compDivider_value as Resource
                valueSerializer.writeResource(value_compDivider_value_3)
            }
        }
        const value_compCommonContrary  = value.compCommonContrary
        let value_compCommonContrary_type : int32 = RuntimeType.UNDEFINED
        value_compCommonContrary_type = runtimeType(value_compCommonContrary)
        valueSerializer.writeInt8(value_compCommonContrary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compCommonContrary_type)) {
            const value_compCommonContrary_value  = value_compCommonContrary!
            let value_compCommonContrary_value_type : int32 = RuntimeType.UNDEFINED
            value_compCommonContrary_value_type = runtimeType(value_compCommonContrary_value)
            if (TypeChecker.isColor(value_compCommonContrary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compCommonContrary_value_0  = value_compCommonContrary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compCommonContrary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compCommonContrary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compCommonContrary_value_1  = value_compCommonContrary_value as number
                valueSerializer.writeNumber(value_compCommonContrary_value_1)
            }
            else if (RuntimeType.STRING == value_compCommonContrary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compCommonContrary_value_2  = value_compCommonContrary_value as string
                valueSerializer.writeString(value_compCommonContrary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compCommonContrary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compCommonContrary_value_3  = value_compCommonContrary_value as Resource
                valueSerializer.writeResource(value_compCommonContrary_value_3)
            }
        }
        const value_compBackgroundFocus  = value.compBackgroundFocus
        let value_compBackgroundFocus_type : int32 = RuntimeType.UNDEFINED
        value_compBackgroundFocus_type = runtimeType(value_compBackgroundFocus)
        valueSerializer.writeInt8(value_compBackgroundFocus_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compBackgroundFocus_type)) {
            const value_compBackgroundFocus_value  = value_compBackgroundFocus!
            let value_compBackgroundFocus_value_type : int32 = RuntimeType.UNDEFINED
            value_compBackgroundFocus_value_type = runtimeType(value_compBackgroundFocus_value)
            if (TypeChecker.isColor(value_compBackgroundFocus_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compBackgroundFocus_value_0  = value_compBackgroundFocus_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compBackgroundFocus_value_0))
            }
            else if (RuntimeType.NUMBER == value_compBackgroundFocus_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compBackgroundFocus_value_1  = value_compBackgroundFocus_value as number
                valueSerializer.writeNumber(value_compBackgroundFocus_value_1)
            }
            else if (RuntimeType.STRING == value_compBackgroundFocus_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compBackgroundFocus_value_2  = value_compBackgroundFocus_value as string
                valueSerializer.writeString(value_compBackgroundFocus_value_2)
            }
            else if (RuntimeType.OBJECT == value_compBackgroundFocus_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compBackgroundFocus_value_3  = value_compBackgroundFocus_value as Resource
                valueSerializer.writeResource(value_compBackgroundFocus_value_3)
            }
        }
        const value_compFocusedPrimary  = value.compFocusedPrimary
        let value_compFocusedPrimary_type : int32 = RuntimeType.UNDEFINED
        value_compFocusedPrimary_type = runtimeType(value_compFocusedPrimary)
        valueSerializer.writeInt8(value_compFocusedPrimary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compFocusedPrimary_type)) {
            const value_compFocusedPrimary_value  = value_compFocusedPrimary!
            let value_compFocusedPrimary_value_type : int32 = RuntimeType.UNDEFINED
            value_compFocusedPrimary_value_type = runtimeType(value_compFocusedPrimary_value)
            if (TypeChecker.isColor(value_compFocusedPrimary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compFocusedPrimary_value_0  = value_compFocusedPrimary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compFocusedPrimary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compFocusedPrimary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compFocusedPrimary_value_1  = value_compFocusedPrimary_value as number
                valueSerializer.writeNumber(value_compFocusedPrimary_value_1)
            }
            else if (RuntimeType.STRING == value_compFocusedPrimary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compFocusedPrimary_value_2  = value_compFocusedPrimary_value as string
                valueSerializer.writeString(value_compFocusedPrimary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compFocusedPrimary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compFocusedPrimary_value_3  = value_compFocusedPrimary_value as Resource
                valueSerializer.writeResource(value_compFocusedPrimary_value_3)
            }
        }
        const value_compFocusedSecondary  = value.compFocusedSecondary
        let value_compFocusedSecondary_type : int32 = RuntimeType.UNDEFINED
        value_compFocusedSecondary_type = runtimeType(value_compFocusedSecondary)
        valueSerializer.writeInt8(value_compFocusedSecondary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compFocusedSecondary_type)) {
            const value_compFocusedSecondary_value  = value_compFocusedSecondary!
            let value_compFocusedSecondary_value_type : int32 = RuntimeType.UNDEFINED
            value_compFocusedSecondary_value_type = runtimeType(value_compFocusedSecondary_value)
            if (TypeChecker.isColor(value_compFocusedSecondary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compFocusedSecondary_value_0  = value_compFocusedSecondary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compFocusedSecondary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compFocusedSecondary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compFocusedSecondary_value_1  = value_compFocusedSecondary_value as number
                valueSerializer.writeNumber(value_compFocusedSecondary_value_1)
            }
            else if (RuntimeType.STRING == value_compFocusedSecondary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compFocusedSecondary_value_2  = value_compFocusedSecondary_value as string
                valueSerializer.writeString(value_compFocusedSecondary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compFocusedSecondary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compFocusedSecondary_value_3  = value_compFocusedSecondary_value as Resource
                valueSerializer.writeResource(value_compFocusedSecondary_value_3)
            }
        }
        const value_compFocusedTertiary  = value.compFocusedTertiary
        let value_compFocusedTertiary_type : int32 = RuntimeType.UNDEFINED
        value_compFocusedTertiary_type = runtimeType(value_compFocusedTertiary)
        valueSerializer.writeInt8(value_compFocusedTertiary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_compFocusedTertiary_type)) {
            const value_compFocusedTertiary_value  = value_compFocusedTertiary!
            let value_compFocusedTertiary_value_type : int32 = RuntimeType.UNDEFINED
            value_compFocusedTertiary_value_type = runtimeType(value_compFocusedTertiary_value)
            if (TypeChecker.isColor(value_compFocusedTertiary_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_compFocusedTertiary_value_0  = value_compFocusedTertiary_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_compFocusedTertiary_value_0))
            }
            else if (RuntimeType.NUMBER == value_compFocusedTertiary_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_compFocusedTertiary_value_1  = value_compFocusedTertiary_value as number
                valueSerializer.writeNumber(value_compFocusedTertiary_value_1)
            }
            else if (RuntimeType.STRING == value_compFocusedTertiary_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_compFocusedTertiary_value_2  = value_compFocusedTertiary_value as string
                valueSerializer.writeString(value_compFocusedTertiary_value_2)
            }
            else if (RuntimeType.OBJECT == value_compFocusedTertiary_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_compFocusedTertiary_value_3  = value_compFocusedTertiary_value as Resource
                valueSerializer.writeResource(value_compFocusedTertiary_value_3)
            }
        }
        const value_interactiveHover  = value.interactiveHover
        let value_interactiveHover_type : int32 = RuntimeType.UNDEFINED
        value_interactiveHover_type = runtimeType(value_interactiveHover)
        valueSerializer.writeInt8(value_interactiveHover_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_interactiveHover_type)) {
            const value_interactiveHover_value  = value_interactiveHover!
            let value_interactiveHover_value_type : int32 = RuntimeType.UNDEFINED
            value_interactiveHover_value_type = runtimeType(value_interactiveHover_value)
            if (TypeChecker.isColor(value_interactiveHover_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_interactiveHover_value_0  = value_interactiveHover_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_interactiveHover_value_0))
            }
            else if (RuntimeType.NUMBER == value_interactiveHover_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_interactiveHover_value_1  = value_interactiveHover_value as number
                valueSerializer.writeNumber(value_interactiveHover_value_1)
            }
            else if (RuntimeType.STRING == value_interactiveHover_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_interactiveHover_value_2  = value_interactiveHover_value as string
                valueSerializer.writeString(value_interactiveHover_value_2)
            }
            else if (RuntimeType.OBJECT == value_interactiveHover_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_interactiveHover_value_3  = value_interactiveHover_value as Resource
                valueSerializer.writeResource(value_interactiveHover_value_3)
            }
        }
        const value_interactivePressed  = value.interactivePressed
        let value_interactivePressed_type : int32 = RuntimeType.UNDEFINED
        value_interactivePressed_type = runtimeType(value_interactivePressed)
        valueSerializer.writeInt8(value_interactivePressed_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_interactivePressed_type)) {
            const value_interactivePressed_value  = value_interactivePressed!
            let value_interactivePressed_value_type : int32 = RuntimeType.UNDEFINED
            value_interactivePressed_value_type = runtimeType(value_interactivePressed_value)
            if (TypeChecker.isColor(value_interactivePressed_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_interactivePressed_value_0  = value_interactivePressed_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_interactivePressed_value_0))
            }
            else if (RuntimeType.NUMBER == value_interactivePressed_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_interactivePressed_value_1  = value_interactivePressed_value as number
                valueSerializer.writeNumber(value_interactivePressed_value_1)
            }
            else if (RuntimeType.STRING == value_interactivePressed_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_interactivePressed_value_2  = value_interactivePressed_value as string
                valueSerializer.writeString(value_interactivePressed_value_2)
            }
            else if (RuntimeType.OBJECT == value_interactivePressed_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_interactivePressed_value_3  = value_interactivePressed_value as Resource
                valueSerializer.writeResource(value_interactivePressed_value_3)
            }
        }
        const value_interactiveFocus  = value.interactiveFocus
        let value_interactiveFocus_type : int32 = RuntimeType.UNDEFINED
        value_interactiveFocus_type = runtimeType(value_interactiveFocus)
        valueSerializer.writeInt8(value_interactiveFocus_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_interactiveFocus_type)) {
            const value_interactiveFocus_value  = value_interactiveFocus!
            let value_interactiveFocus_value_type : int32 = RuntimeType.UNDEFINED
            value_interactiveFocus_value_type = runtimeType(value_interactiveFocus_value)
            if (TypeChecker.isColor(value_interactiveFocus_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_interactiveFocus_value_0  = value_interactiveFocus_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_interactiveFocus_value_0))
            }
            else if (RuntimeType.NUMBER == value_interactiveFocus_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_interactiveFocus_value_1  = value_interactiveFocus_value as number
                valueSerializer.writeNumber(value_interactiveFocus_value_1)
            }
            else if (RuntimeType.STRING == value_interactiveFocus_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_interactiveFocus_value_2  = value_interactiveFocus_value as string
                valueSerializer.writeString(value_interactiveFocus_value_2)
            }
            else if (RuntimeType.OBJECT == value_interactiveFocus_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_interactiveFocus_value_3  = value_interactiveFocus_value as Resource
                valueSerializer.writeResource(value_interactiveFocus_value_3)
            }
        }
        const value_interactiveActive  = value.interactiveActive
        let value_interactiveActive_type : int32 = RuntimeType.UNDEFINED
        value_interactiveActive_type = runtimeType(value_interactiveActive)
        valueSerializer.writeInt8(value_interactiveActive_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_interactiveActive_type)) {
            const value_interactiveActive_value  = value_interactiveActive!
            let value_interactiveActive_value_type : int32 = RuntimeType.UNDEFINED
            value_interactiveActive_value_type = runtimeType(value_interactiveActive_value)
            if (TypeChecker.isColor(value_interactiveActive_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_interactiveActive_value_0  = value_interactiveActive_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_interactiveActive_value_0))
            }
            else if (RuntimeType.NUMBER == value_interactiveActive_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_interactiveActive_value_1  = value_interactiveActive_value as number
                valueSerializer.writeNumber(value_interactiveActive_value_1)
            }
            else if (RuntimeType.STRING == value_interactiveActive_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_interactiveActive_value_2  = value_interactiveActive_value as string
                valueSerializer.writeString(value_interactiveActive_value_2)
            }
            else if (RuntimeType.OBJECT == value_interactiveActive_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_interactiveActive_value_3  = value_interactiveActive_value as Resource
                valueSerializer.writeResource(value_interactiveActive_value_3)
            }
        }
        const value_interactiveSelect  = value.interactiveSelect
        let value_interactiveSelect_type : int32 = RuntimeType.UNDEFINED
        value_interactiveSelect_type = runtimeType(value_interactiveSelect)
        valueSerializer.writeInt8(value_interactiveSelect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_interactiveSelect_type)) {
            const value_interactiveSelect_value  = value_interactiveSelect!
            let value_interactiveSelect_value_type : int32 = RuntimeType.UNDEFINED
            value_interactiveSelect_value_type = runtimeType(value_interactiveSelect_value)
            if (TypeChecker.isColor(value_interactiveSelect_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_interactiveSelect_value_0  = value_interactiveSelect_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_interactiveSelect_value_0))
            }
            else if (RuntimeType.NUMBER == value_interactiveSelect_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_interactiveSelect_value_1  = value_interactiveSelect_value as number
                valueSerializer.writeNumber(value_interactiveSelect_value_1)
            }
            else if (RuntimeType.STRING == value_interactiveSelect_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_interactiveSelect_value_2  = value_interactiveSelect_value as string
                valueSerializer.writeString(value_interactiveSelect_value_2)
            }
            else if (RuntimeType.OBJECT == value_interactiveSelect_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_interactiveSelect_value_3  = value_interactiveSelect_value as Resource
                valueSerializer.writeResource(value_interactiveSelect_value_3)
            }
        }
        const value_interactiveClick  = value.interactiveClick
        let value_interactiveClick_type : int32 = RuntimeType.UNDEFINED
        value_interactiveClick_type = runtimeType(value_interactiveClick)
        valueSerializer.writeInt8(value_interactiveClick_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_interactiveClick_type)) {
            const value_interactiveClick_value  = value_interactiveClick!
            let value_interactiveClick_value_type : int32 = RuntimeType.UNDEFINED
            value_interactiveClick_value_type = runtimeType(value_interactiveClick_value)
            if (TypeChecker.isColor(value_interactiveClick_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_interactiveClick_value_0  = value_interactiveClick_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_interactiveClick_value_0))
            }
            else if (RuntimeType.NUMBER == value_interactiveClick_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_interactiveClick_value_1  = value_interactiveClick_value as number
                valueSerializer.writeNumber(value_interactiveClick_value_1)
            }
            else if (RuntimeType.STRING == value_interactiveClick_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_interactiveClick_value_2  = value_interactiveClick_value as string
                valueSerializer.writeString(value_interactiveClick_value_2)
            }
            else if (RuntimeType.OBJECT == value_interactiveClick_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_interactiveClick_value_3  = value_interactiveClick_value as Resource
                valueSerializer.writeResource(value_interactiveClick_value_3)
            }
        }
    }
    writeDataPanelShadowOptions(value: DataPanelShadowOptions): void {
        let valueSerializer : Serializer = this
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            let value_radius_value_type : int32 = RuntimeType.UNDEFINED
            value_radius_value_type = runtimeType(value_radius_value)
            if (RuntimeType.NUMBER == value_radius_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_radius_value_0  = value_radius_value as number
                valueSerializer.writeNumber(value_radius_value_0)
            }
            else if (RuntimeType.OBJECT == value_radius_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_radius_value_1  = value_radius_value as Resource
                valueSerializer.writeResource(value_radius_value_1)
            }
        }
        const value_offsetX  = value.offsetX
        let value_offsetX_type : int32 = RuntimeType.UNDEFINED
        value_offsetX_type = runtimeType(value_offsetX)
        valueSerializer.writeInt8(value_offsetX_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offsetX_type)) {
            const value_offsetX_value  = value_offsetX!
            let value_offsetX_value_type : int32 = RuntimeType.UNDEFINED
            value_offsetX_value_type = runtimeType(value_offsetX_value)
            if (RuntimeType.NUMBER == value_offsetX_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_offsetX_value_0  = value_offsetX_value as number
                valueSerializer.writeNumber(value_offsetX_value_0)
            }
            else if (RuntimeType.OBJECT == value_offsetX_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offsetX_value_1  = value_offsetX_value as Resource
                valueSerializer.writeResource(value_offsetX_value_1)
            }
        }
        const value_offsetY  = value.offsetY
        let value_offsetY_type : int32 = RuntimeType.UNDEFINED
        value_offsetY_type = runtimeType(value_offsetY)
        valueSerializer.writeInt8(value_offsetY_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offsetY_type)) {
            const value_offsetY_value  = value_offsetY!
            let value_offsetY_value_type : int32 = RuntimeType.UNDEFINED
            value_offsetY_value_type = runtimeType(value_offsetY_value)
            if (RuntimeType.NUMBER == value_offsetY_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_offsetY_value_0  = value_offsetY_value as number
                valueSerializer.writeNumber(value_offsetY_value_0)
            }
            else if (RuntimeType.OBJECT == value_offsetY_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offsetY_value_1  = value_offsetY_value as Resource
                valueSerializer.writeResource(value_offsetY_value_1)
            }
        }
        const value_colors  = value.colors
        let value_colors_type : int32 = RuntimeType.UNDEFINED
        value_colors_type = runtimeType(value_colors)
        valueSerializer.writeInt8(value_colors_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_colors_type)) {
            const value_colors_value  = value_colors!
            valueSerializer.writeInt32(value_colors_value.length as int32)
            for (let i = 0; i < value_colors_value.length; i++) {
                const value_colors_value_element : ResourceColor | LinearGradient = value_colors_value[i]
                let value_colors_value_element_type : int32 = RuntimeType.UNDEFINED
                value_colors_value_element_type = runtimeType(value_colors_value_element)
                if ((TypeChecker.isColor(value_colors_value_element)) || (RuntimeType.NUMBER == value_colors_value_element_type) || (RuntimeType.STRING == value_colors_value_element_type) || (RuntimeType.OBJECT == value_colors_value_element_type)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_colors_value_element_0  = value_colors_value_element as ResourceColor
                    let value_colors_value_element_0_type : int32 = RuntimeType.UNDEFINED
                    value_colors_value_element_0_type = runtimeType(value_colors_value_element_0)
                    if (TypeChecker.isColor(value_colors_value_element_0)) {
                        valueSerializer.writeInt8(0 as int32)
                        const value_colors_value_element_0_0  = value_colors_value_element_0 as Color
                        valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_colors_value_element_0_0))
                    }
                    else if (RuntimeType.NUMBER == value_colors_value_element_0_type) {
                        valueSerializer.writeInt8(1 as int32)
                        const value_colors_value_element_0_1  = value_colors_value_element_0 as number
                        valueSerializer.writeNumber(value_colors_value_element_0_1)
                    }
                    else if (RuntimeType.STRING == value_colors_value_element_0_type) {
                        valueSerializer.writeInt8(2 as int32)
                        const value_colors_value_element_0_2  = value_colors_value_element_0 as string
                        valueSerializer.writeString(value_colors_value_element_0_2)
                    }
                    else if (RuntimeType.OBJECT == value_colors_value_element_0_type) {
                        valueSerializer.writeInt8(3 as int32)
                        const value_colors_value_element_0_3  = value_colors_value_element_0 as Resource
                        valueSerializer.writeResource(value_colors_value_element_0_3)
                    }
                }
                else if (TypeChecker.isLinearGradient(value_colors_value_element)) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_colors_value_element_1  = value_colors_value_element as LinearGradient
                    valueSerializer.writeLinearGradient(value_colors_value_element_1)
                }
            }
        }
    }
    writeDecorationStyle(value: DecorationStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeDecorationStyleInterface(value: DecorationStyleInterface): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeInt32(TypeChecker.TextDecorationType_ToNumeric(value_type))
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as TextDecorationStyle)
            valueSerializer.writeInt32(TypeChecker.TextDecorationStyle_ToNumeric(value_style_value))
        }
    }
    writeDecorationStyleResult(value: DecorationStyleResult): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeInt32(TypeChecker.TextDecorationType_ToNumeric(value_type))
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        if (TypeChecker.isColor(value_color)) {
            valueSerializer.writeInt8(0 as int32)
            const value_color_0  = value_color as Color
            valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_0))
        }
        else if (RuntimeType.NUMBER == value_color_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_color_1  = value_color as number
            valueSerializer.writeNumber(value_color_1)
        }
        else if (RuntimeType.STRING == value_color_type) {
            valueSerializer.writeInt8(2 as int32)
            const value_color_2  = value_color as string
            valueSerializer.writeString(value_color_2)
        }
        else if (RuntimeType.OBJECT == value_color_type) {
            valueSerializer.writeInt8(3 as int32)
            const value_color_3  = value_color as Resource
            valueSerializer.writeResource(value_color_3)
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as TextDecorationStyle)
            valueSerializer.writeInt32(TypeChecker.TextDecorationStyle_ToNumeric(value_style_value))
        }
    }
    writeDividerOptions(value: DividerOptions): void {
        let valueSerializer : Serializer = this
        const value_strokeWidth  = value.strokeWidth
        let value_strokeWidth_type : int32 = RuntimeType.UNDEFINED
        value_strokeWidth_type = runtimeType(value_strokeWidth)
        valueSerializer.writeInt8(value_strokeWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeWidth_type)) {
            const value_strokeWidth_value  = value_strokeWidth!
            valueSerializer.writeLength(value_strokeWidth_value)
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_startMargin  = value.startMargin
        let value_startMargin_type : int32 = RuntimeType.UNDEFINED
        value_startMargin_type = runtimeType(value_startMargin)
        valueSerializer.writeInt8(value_startMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_startMargin_type)) {
            const value_startMargin_value  = value_startMargin!
            valueSerializer.writeLength(value_startMargin_value)
        }
        const value_endMargin  = value.endMargin
        let value_endMargin_type : int32 = RuntimeType.UNDEFINED
        value_endMargin_type = runtimeType(value_endMargin)
        valueSerializer.writeInt8(value_endMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_endMargin_type)) {
            const value_endMargin_value  = value_endMargin!
            valueSerializer.writeLength(value_endMargin_value)
        }
    }
    writeDividerStyle(value: DividerStyle): void {
        let valueSerializer : Serializer = this
        const value_strokeWidth  = value.strokeWidth
        valueSerializer.writeLength(value_strokeWidth)
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_startMargin  = value.startMargin
        let value_startMargin_type : int32 = RuntimeType.UNDEFINED
        value_startMargin_type = runtimeType(value_startMargin)
        valueSerializer.writeInt8(value_startMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_startMargin_type)) {
            const value_startMargin_value  = value_startMargin!
            valueSerializer.writeLength(value_startMargin_value)
        }
        const value_endMargin  = value.endMargin
        let value_endMargin_type : int32 = RuntimeType.UNDEFINED
        value_endMargin_type = runtimeType(value_endMargin)
        valueSerializer.writeInt8(value_endMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_endMargin_type)) {
            const value_endMargin_value  = value_endMargin!
            valueSerializer.writeLength(value_endMargin_value)
        }
    }
    writeDividerStyleSidebar(value: DividerStyle_sidebar): void {
        let valueSerializer : Serializer = this
        const value_strokeWidth  = value.strokeWidth
        valueSerializer.writeLength(value_strokeWidth)
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_startMargin  = value.startMargin
        let value_startMargin_type : int32 = RuntimeType.UNDEFINED
        value_startMargin_type = runtimeType(value_startMargin)
        valueSerializer.writeInt8(value_startMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_startMargin_type)) {
            const value_startMargin_value  = value_startMargin!
            valueSerializer.writeLength(value_startMargin_value)
        }
        const value_endMargin  = value.endMargin
        let value_endMargin_type : int32 = RuntimeType.UNDEFINED
        value_endMargin_type = runtimeType(value_endMargin)
        valueSerializer.writeInt8(value_endMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_endMargin_type)) {
            const value_endMargin_value  = value_endMargin!
            valueSerializer.writeLength(value_endMargin_value)
        }
    }
    writeDividerStyleOptions(value: DividerStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_strokeWidth  = value.strokeWidth
        let value_strokeWidth_type : int32 = RuntimeType.UNDEFINED
        value_strokeWidth_type = runtimeType(value_strokeWidth)
        valueSerializer.writeInt8(value_strokeWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeWidth_type)) {
            const value_strokeWidth_value  = value_strokeWidth!
            valueSerializer.writeLengthMetrics(value_strokeWidth_value)
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_startMargin  = value.startMargin
        let value_startMargin_type : int32 = RuntimeType.UNDEFINED
        value_startMargin_type = runtimeType(value_startMargin)
        valueSerializer.writeInt8(value_startMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_startMargin_type)) {
            const value_startMargin_value  = value_startMargin!
            valueSerializer.writeLengthMetrics(value_startMargin_value)
        }
        const value_endMargin  = value.endMargin
        let value_endMargin_type : int32 = RuntimeType.UNDEFINED
        value_endMargin_type = runtimeType(value_endMargin)
        valueSerializer.writeInt8(value_endMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_endMargin_type)) {
            const value_endMargin_value  = value_endMargin!
            valueSerializer.writeLengthMetrics(value_endMargin_value)
        }
        const value_mode  = value.mode
        let value_mode_type : int32 = RuntimeType.UNDEFINED
        value_mode_type = runtimeType(value_mode)
        valueSerializer.writeInt8(value_mode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_mode_type)) {
            const value_mode_value  = (value_mode as DividerMode)
            valueSerializer.writeInt32(TypeChecker.DividerMode_ToNumeric(value_mode_value))
        }
    }
    writeDotIndicator(value: DotIndicator): void {
        let valueSerializer : Serializer = this
        const value__left  = value._left
        let value__left_type : int32 = RuntimeType.UNDEFINED
        value__left_type = runtimeType(value__left)
        valueSerializer.writeInt8(value__left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__left_type)) {
            const value__left_value  = value__left!
            valueSerializer.writeLength(value__left_value)
        }
        const value__top  = value._top
        let value__top_type : int32 = RuntimeType.UNDEFINED
        value__top_type = runtimeType(value__top)
        valueSerializer.writeInt8(value__top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__top_type)) {
            const value__top_value  = value__top!
            valueSerializer.writeLength(value__top_value)
        }
        const value__right  = value._right
        let value__right_type : int32 = RuntimeType.UNDEFINED
        value__right_type = runtimeType(value__right)
        valueSerializer.writeInt8(value__right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__right_type)) {
            const value__right_value  = value__right!
            valueSerializer.writeLength(value__right_value)
        }
        const value__bottom  = value._bottom
        let value__bottom_type : int32 = RuntimeType.UNDEFINED
        value__bottom_type = runtimeType(value__bottom)
        valueSerializer.writeInt8(value__bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__bottom_type)) {
            const value__bottom_value  = value__bottom!
            valueSerializer.writeLength(value__bottom_value)
        }
        const value__start  = value._start
        let value__start_type : int32 = RuntimeType.UNDEFINED
        value__start_type = runtimeType(value__start)
        valueSerializer.writeInt8(value__start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__start_type)) {
            const value__start_value  = value__start!
            valueSerializer.writeLengthMetrics(value__start_value)
        }
        const value__end  = value._end
        let value__end_type : int32 = RuntimeType.UNDEFINED
        value__end_type = runtimeType(value__end)
        valueSerializer.writeInt8(value__end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__end_type)) {
            const value__end_value  = value__end!
            valueSerializer.writeLengthMetrics(value__end_value)
        }
        const value__itemWidth  = value._itemWidth
        let value__itemWidth_type : int32 = RuntimeType.UNDEFINED
        value__itemWidth_type = runtimeType(value__itemWidth)
        valueSerializer.writeInt8(value__itemWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__itemWidth_type)) {
            const value__itemWidth_value  = value__itemWidth!
            valueSerializer.writeLength(value__itemWidth_value)
        }
        const value__itemHeight  = value._itemHeight
        let value__itemHeight_type : int32 = RuntimeType.UNDEFINED
        value__itemHeight_type = runtimeType(value__itemHeight)
        valueSerializer.writeInt8(value__itemHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__itemHeight_type)) {
            const value__itemHeight_value  = value__itemHeight!
            valueSerializer.writeLength(value__itemHeight_value)
        }
        const value__selectedItemWidth  = value._selectedItemWidth
        let value__selectedItemWidth_type : int32 = RuntimeType.UNDEFINED
        value__selectedItemWidth_type = runtimeType(value__selectedItemWidth)
        valueSerializer.writeInt8(value__selectedItemWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__selectedItemWidth_type)) {
            const value__selectedItemWidth_value  = value__selectedItemWidth!
            valueSerializer.writeLength(value__selectedItemWidth_value)
        }
        const value__selectedItemHeight  = value._selectedItemHeight
        let value__selectedItemHeight_type : int32 = RuntimeType.UNDEFINED
        value__selectedItemHeight_type = runtimeType(value__selectedItemHeight)
        valueSerializer.writeInt8(value__selectedItemHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__selectedItemHeight_type)) {
            const value__selectedItemHeight_value  = value__selectedItemHeight!
            valueSerializer.writeLength(value__selectedItemHeight_value)
        }
        const value__mask  = value._mask
        let value__mask_type : int32 = RuntimeType.UNDEFINED
        value__mask_type = runtimeType(value__mask)
        valueSerializer.writeInt8(value__mask_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__mask_type)) {
            const value__mask_value  = value__mask!
            valueSerializer.writeBoolean(value__mask_value)
        }
        const value__color  = value._color
        let value__color_type : int32 = RuntimeType.UNDEFINED
        value__color_type = runtimeType(value__color)
        valueSerializer.writeInt8(value__color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__color_type)) {
            const value__color_value  = value__color!
            let value__color_value_type : int32 = RuntimeType.UNDEFINED
            value__color_value_type = runtimeType(value__color_value)
            if (TypeChecker.isColor(value__color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value__color_value_0  = value__color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value__color_value_0))
            }
            else if (RuntimeType.NUMBER == value__color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value__color_value_1  = value__color_value as number
                valueSerializer.writeNumber(value__color_value_1)
            }
            else if (RuntimeType.STRING == value__color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value__color_value_2  = value__color_value as string
                valueSerializer.writeString(value__color_value_2)
            }
            else if (RuntimeType.OBJECT == value__color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value__color_value_3  = value__color_value as Resource
                valueSerializer.writeResource(value__color_value_3)
            }
        }
        const value__selectedColor  = value._selectedColor
        let value__selectedColor_type : int32 = RuntimeType.UNDEFINED
        value__selectedColor_type = runtimeType(value__selectedColor)
        valueSerializer.writeInt8(value__selectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__selectedColor_type)) {
            const value__selectedColor_value  = value__selectedColor!
            let value__selectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value__selectedColor_value_type = runtimeType(value__selectedColor_value)
            if (TypeChecker.isColor(value__selectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value__selectedColor_value_0  = value__selectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value__selectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value__selectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value__selectedColor_value_1  = value__selectedColor_value as number
                valueSerializer.writeNumber(value__selectedColor_value_1)
            }
            else if (RuntimeType.STRING == value__selectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value__selectedColor_value_2  = value__selectedColor_value as string
                valueSerializer.writeString(value__selectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value__selectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value__selectedColor_value_3  = value__selectedColor_value as Resource
                valueSerializer.writeResource(value__selectedColor_value_3)
            }
        }
        const value__maxDisplayCount  = value._maxDisplayCount
        let value__maxDisplayCount_type : int32 = RuntimeType.UNDEFINED
        value__maxDisplayCount_type = runtimeType(value__maxDisplayCount)
        valueSerializer.writeInt8(value__maxDisplayCount_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__maxDisplayCount_type)) {
            const value__maxDisplayCount_value  = value__maxDisplayCount!
            valueSerializer.writeNumber(value__maxDisplayCount_value)
        }
        const value__space  = value._space
        let value__space_type : int32 = RuntimeType.UNDEFINED
        value__space_type = runtimeType(value__space)
        valueSerializer.writeInt8(value__space_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__space_type)) {
            const value__space_value  = value__space!
            valueSerializer.writeLengthMetrics(value__space_value)
        }
    }
    writeDragPreviewOptions(value: DragPreviewOptions): void {
        let valueSerializer : Serializer = this
        const value_mode  = value.mode
        let value_mode_type : int32 = RuntimeType.UNDEFINED
        value_mode_type = runtimeType(value_mode)
        valueSerializer.writeInt8(value_mode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_mode_type)) {
            const value_mode_value  = value_mode!
            let value_mode_value_type : int32 = RuntimeType.UNDEFINED
            value_mode_value_type = runtimeType(value_mode_value)
            if (TypeChecker.isDragPreviewMode(value_mode_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_mode_value_0  = value_mode_value as DragPreviewMode
                valueSerializer.writeInt32(TypeChecker.DragPreviewMode_ToNumeric(value_mode_value_0))
            }
            else if (RuntimeType.OBJECT == value_mode_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_mode_value_1  = value_mode_value as Array<DragPreviewMode>
                valueSerializer.writeInt32(value_mode_value_1.length as int32)
                for (let i = 0; i < value_mode_value_1.length; i++) {
                    const value_mode_value_1_element : DragPreviewMode = value_mode_value_1[i]
                    valueSerializer.writeInt32(TypeChecker.DragPreviewMode_ToNumeric(value_mode_value_1_element))
                }
            }
        }
        const value_numberBadge  = value.numberBadge
        let value_numberBadge_type : int32 = RuntimeType.UNDEFINED
        value_numberBadge_type = runtimeType(value_numberBadge)
        valueSerializer.writeInt8(value_numberBadge_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_numberBadge_type)) {
            const value_numberBadge_value  = value_numberBadge!
            let value_numberBadge_value_type : int32 = RuntimeType.UNDEFINED
            value_numberBadge_value_type = runtimeType(value_numberBadge_value)
            if (RuntimeType.BOOLEAN == value_numberBadge_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_numberBadge_value_0  = value_numberBadge_value as boolean
                valueSerializer.writeBoolean(value_numberBadge_value_0)
            }
            else if (RuntimeType.NUMBER == value_numberBadge_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_numberBadge_value_1  = value_numberBadge_value as number
                valueSerializer.writeNumber(value_numberBadge_value_1)
            }
        }
        const value_sizeChangeEffect  = value.sizeChangeEffect
        let value_sizeChangeEffect_type : int32 = RuntimeType.UNDEFINED
        value_sizeChangeEffect_type = runtimeType(value_sizeChangeEffect)
        valueSerializer.writeInt8(value_sizeChangeEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_sizeChangeEffect_type)) {
            const value_sizeChangeEffect_value  = (value_sizeChangeEffect as DraggingSizeChangeEffect)
            valueSerializer.writeInt32(TypeChecker.DraggingSizeChangeEffect_ToNumeric(value_sizeChangeEffect_value))
        }
    }
    writeEdgeColors(value: EdgeColors): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            let value_top_value_type : int32 = RuntimeType.UNDEFINED
            value_top_value_type = runtimeType(value_top_value)
            if (TypeChecker.isColor(value_top_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_top_value_0  = value_top_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_top_value_0))
            }
            else if (RuntimeType.NUMBER == value_top_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_top_value_1  = value_top_value as number
                valueSerializer.writeNumber(value_top_value_1)
            }
            else if (RuntimeType.STRING == value_top_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_top_value_2  = value_top_value as string
                valueSerializer.writeString(value_top_value_2)
            }
            else if (RuntimeType.OBJECT == value_top_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_top_value_3  = value_top_value as Resource
                valueSerializer.writeResource(value_top_value_3)
            }
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            let value_right_value_type : int32 = RuntimeType.UNDEFINED
            value_right_value_type = runtimeType(value_right_value)
            if (TypeChecker.isColor(value_right_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_right_value_0  = value_right_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_right_value_0))
            }
            else if (RuntimeType.NUMBER == value_right_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_right_value_1  = value_right_value as number
                valueSerializer.writeNumber(value_right_value_1)
            }
            else if (RuntimeType.STRING == value_right_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_right_value_2  = value_right_value as string
                valueSerializer.writeString(value_right_value_2)
            }
            else if (RuntimeType.OBJECT == value_right_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_right_value_3  = value_right_value as Resource
                valueSerializer.writeResource(value_right_value_3)
            }
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            let value_bottom_value_type : int32 = RuntimeType.UNDEFINED
            value_bottom_value_type = runtimeType(value_bottom_value)
            if (TypeChecker.isColor(value_bottom_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_bottom_value_0  = value_bottom_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_bottom_value_0))
            }
            else if (RuntimeType.NUMBER == value_bottom_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_bottom_value_1  = value_bottom_value as number
                valueSerializer.writeNumber(value_bottom_value_1)
            }
            else if (RuntimeType.STRING == value_bottom_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_bottom_value_2  = value_bottom_value as string
                valueSerializer.writeString(value_bottom_value_2)
            }
            else if (RuntimeType.OBJECT == value_bottom_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_bottom_value_3  = value_bottom_value as Resource
                valueSerializer.writeResource(value_bottom_value_3)
            }
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            let value_left_value_type : int32 = RuntimeType.UNDEFINED
            value_left_value_type = runtimeType(value_left_value)
            if (TypeChecker.isColor(value_left_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_left_value_0  = value_left_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_left_value_0))
            }
            else if (RuntimeType.NUMBER == value_left_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_left_value_1  = value_left_value as number
                valueSerializer.writeNumber(value_left_value_1)
            }
            else if (RuntimeType.STRING == value_left_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_left_value_2  = value_left_value as string
                valueSerializer.writeString(value_left_value_2)
            }
            else if (RuntimeType.OBJECT == value_left_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_left_value_3  = value_left_value as Resource
                valueSerializer.writeResource(value_left_value_3)
            }
        }
    }
    writeEventTarget(value: EventTarget): void {
        let valueSerializer : Serializer = this
        const value_area  = value.area
        valueSerializer.writeArea(value_area)
        const value_id  = value.id
        let value_id_type : int32 = RuntimeType.UNDEFINED
        value_id_type = runtimeType(value_id)
        valueSerializer.writeInt8(value_id_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_id_type)) {
            const value_id_value  = value_id!
            valueSerializer.writeString(value_id_value)
        }
    }
    writeExpandedMenuItemOptions(value: ExpandedMenuItemOptions): void {
        let valueSerializer : Serializer = this
        const value_content  = value.content
        let value_content_type : int32 = RuntimeType.UNDEFINED
        value_content_type = runtimeType(value_content)
        if (RuntimeType.STRING == value_content_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_content_0  = value_content as string
            valueSerializer.writeString(value_content_0)
        }
        else if (RuntimeType.OBJECT == value_content_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_content_1  = value_content as Resource
            valueSerializer.writeResource(value_content_1)
        }
        const value_startIcon  = value.startIcon
        let value_startIcon_type : int32 = RuntimeType.UNDEFINED
        value_startIcon_type = runtimeType(value_startIcon)
        valueSerializer.writeInt8(value_startIcon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_startIcon_type)) {
            const value_startIcon_value  = value_startIcon!
            let value_startIcon_value_type : int32 = RuntimeType.UNDEFINED
            value_startIcon_value_type = runtimeType(value_startIcon_value)
            if (RuntimeType.STRING == value_startIcon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_startIcon_value_0  = value_startIcon_value as string
                valueSerializer.writeString(value_startIcon_value_0)
            }
            else if (RuntimeType.OBJECT == value_startIcon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_startIcon_value_1  = value_startIcon_value as Resource
                valueSerializer.writeResource(value_startIcon_value_1)
            }
        }
        const value_action  = value.action
        valueSerializer.holdAndWriteCallback(value_action)
    }
    writeFadingEdgeOptions(value: FadingEdgeOptions): void {
        let valueSerializer : Serializer = this
        const value_fadingEdgeLength  = value.fadingEdgeLength
        let value_fadingEdgeLength_type : int32 = RuntimeType.UNDEFINED
        value_fadingEdgeLength_type = runtimeType(value_fadingEdgeLength)
        valueSerializer.writeInt8(value_fadingEdgeLength_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fadingEdgeLength_type)) {
            const value_fadingEdgeLength_value  = value_fadingEdgeLength!
            valueSerializer.writeLengthMetrics(value_fadingEdgeLength_value)
        }
    }
    writeFlexSpaceOptions(value: FlexSpaceOptions): void {
        let valueSerializer : Serializer = this
        const value_main  = value.main
        let value_main_type : int32 = RuntimeType.UNDEFINED
        value_main_type = runtimeType(value_main)
        valueSerializer.writeInt8(value_main_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_main_type)) {
            const value_main_value  = value_main!
            valueSerializer.writeLengthMetrics(value_main_value)
        }
        const value_cross  = value.cross
        let value_cross_type : int32 = RuntimeType.UNDEFINED
        value_cross_type = runtimeType(value_cross)
        valueSerializer.writeInt8(value_cross_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cross_type)) {
            const value_cross_value  = value_cross!
            valueSerializer.writeLengthMetrics(value_cross_value)
        }
    }
    writeFocusAxisEvent(value: FocusAxisEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeFocusBoxStyle(value: FocusBoxStyle): void {
        let valueSerializer : Serializer = this
        const value_margin  = value.margin
        let value_margin_type : int32 = RuntimeType.UNDEFINED
        value_margin_type = runtimeType(value_margin)
        valueSerializer.writeInt8(value_margin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_margin_type)) {
            const value_margin_value  = value_margin!
            valueSerializer.writeLengthMetrics(value_margin_value)
        }
        const value_strokeColor  = value.strokeColor
        let value_strokeColor_type : int32 = RuntimeType.UNDEFINED
        value_strokeColor_type = runtimeType(value_strokeColor)
        valueSerializer.writeInt8(value_strokeColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeColor_type)) {
            const value_strokeColor_value  = value_strokeColor!
            valueSerializer.writeColorMetrics(value_strokeColor_value)
        }
        const value_strokeWidth  = value.strokeWidth
        let value_strokeWidth_type : int32 = RuntimeType.UNDEFINED
        value_strokeWidth_type = runtimeType(value_strokeWidth)
        valueSerializer.writeInt8(value_strokeWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeWidth_type)) {
            const value_strokeWidth_value  = value_strokeWidth!
            valueSerializer.writeLengthMetrics(value_strokeWidth_value)
        }
    }
    writeFont(value: Font): void {
        let valueSerializer : Serializer = this
        const value_size  = value.size
        let value_size_type : int32 = RuntimeType.UNDEFINED
        value_size_type = runtimeType(value_size)
        valueSerializer.writeInt8(value_size_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_size_type)) {
            const value_size_value  = value_size!
            valueSerializer.writeLength(value_size_value)
        }
        const value_weight  = value.weight
        let value_weight_type : int32 = RuntimeType.UNDEFINED
        value_weight_type = runtimeType(value_weight)
        valueSerializer.writeInt8(value_weight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_weight_type)) {
            const value_weight_value  = value_weight!
            let value_weight_value_type : int32 = RuntimeType.UNDEFINED
            value_weight_value_type = runtimeType(value_weight_value)
            if (TypeChecker.isFontWeight(value_weight_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_weight_value_0  = value_weight_value as FontWeight
                valueSerializer.writeInt32(TypeChecker.FontWeight_ToNumeric(value_weight_value_0))
            }
            else if (RuntimeType.NUMBER == value_weight_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_weight_value_1  = value_weight_value as number
                valueSerializer.writeNumber(value_weight_value_1)
            }
            else if (RuntimeType.STRING == value_weight_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_weight_value_2  = value_weight_value as string
                valueSerializer.writeString(value_weight_value_2)
            }
        }
        const value_family  = value.family
        let value_family_type : int32 = RuntimeType.UNDEFINED
        value_family_type = runtimeType(value_family)
        valueSerializer.writeInt8(value_family_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_family_type)) {
            const value_family_value  = value_family!
            let value_family_value_type : int32 = RuntimeType.UNDEFINED
            value_family_value_type = runtimeType(value_family_value)
            if (RuntimeType.STRING == value_family_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_family_value_0  = value_family_value as string
                valueSerializer.writeString(value_family_value_0)
            }
            else if (RuntimeType.OBJECT == value_family_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_family_value_1  = value_family_value as Resource
                valueSerializer.writeResource(value_family_value_1)
            }
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as FontStyle)
            valueSerializer.writeInt32(TypeChecker.FontStyle_ToNumeric(value_style_value))
        }
    }
    writeFontOptions(value: FontOptions): void {
        let valueSerializer : Serializer = this
        const value_familyName  = value.familyName
        let value_familyName_type : int32 = RuntimeType.UNDEFINED
        value_familyName_type = runtimeType(value_familyName)
        if (RuntimeType.STRING == value_familyName_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_familyName_0  = value_familyName as string
            valueSerializer.writeString(value_familyName_0)
        }
        else if (RuntimeType.OBJECT == value_familyName_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_familyName_1  = value_familyName as Resource
            valueSerializer.writeResource(value_familyName_1)
        }
        const value_familySrc  = value.familySrc
        let value_familySrc_type : int32 = RuntimeType.UNDEFINED
        value_familySrc_type = runtimeType(value_familySrc)
        if (RuntimeType.STRING == value_familySrc_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_familySrc_0  = value_familySrc as string
            valueSerializer.writeString(value_familySrc_0)
        }
        else if (RuntimeType.OBJECT == value_familySrc_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_familySrc_1  = value_familySrc as Resource
            valueSerializer.writeResource(value_familySrc_1)
        }
    }
    writeForegroundBlurStyleOptions(value: ForegroundBlurStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_colorMode  = value.colorMode
        let value_colorMode_type : int32 = RuntimeType.UNDEFINED
        value_colorMode_type = runtimeType(value_colorMode)
        valueSerializer.writeInt8(value_colorMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_colorMode_type)) {
            const value_colorMode_value  = (value_colorMode as ThemeColorMode)
            valueSerializer.writeInt32(TypeChecker.ThemeColorMode_ToNumeric(value_colorMode_value))
        }
        const value_adaptiveColor  = value.adaptiveColor
        let value_adaptiveColor_type : int32 = RuntimeType.UNDEFINED
        value_adaptiveColor_type = runtimeType(value_adaptiveColor)
        valueSerializer.writeInt8(value_adaptiveColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_adaptiveColor_type)) {
            const value_adaptiveColor_value  = (value_adaptiveColor as AdaptiveColor)
            valueSerializer.writeInt32(TypeChecker.AdaptiveColor_ToNumeric(value_adaptiveColor_value))
        }
        const value_scale  = value.scale
        let value_scale_type : int32 = RuntimeType.UNDEFINED
        value_scale_type = runtimeType(value_scale)
        valueSerializer.writeInt8(value_scale_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scale_type)) {
            const value_scale_value  = value_scale!
            valueSerializer.writeNumber(value_scale_value)
        }
        const value_blurOptions  = value.blurOptions
        let value_blurOptions_type : int32 = RuntimeType.UNDEFINED
        value_blurOptions_type = runtimeType(value_blurOptions)
        valueSerializer.writeInt8(value_blurOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_blurOptions_type)) {
            const value_blurOptions_value  = value_blurOptions!
            valueSerializer.writeBlurOptions(value_blurOptions_value)
        }
    }
    writeFormInfo(value: FormInfo): void {
        let valueSerializer : Serializer = this
        const value_id  = value.id
        let value_id_type : int32 = RuntimeType.UNDEFINED
        value_id_type = runtimeType(value_id)
        if (RuntimeType.NUMBER == value_id_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_id_0  = value_id as int64
            valueSerializer.writeInt64(value_id_0)
        }
        else if (RuntimeType.STRING == value_id_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_id_1  = value_id as string
            valueSerializer.writeString(value_id_1)
        }
        const value_name  = value.name
        valueSerializer.writeString(value_name)
        const value_bundle  = value.bundle
        valueSerializer.writeString(value_bundle)
        const value_ability  = value.ability
        valueSerializer.writeString(value_ability)
        const value_module  = value.module
        valueSerializer.writeString(value_module)
        const value_dimension  = value.dimension
        let value_dimension_type : int32 = RuntimeType.UNDEFINED
        value_dimension_type = runtimeType(value_dimension)
        valueSerializer.writeInt8(value_dimension_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dimension_type)) {
            const value_dimension_value  = (value_dimension as FormDimension)
            valueSerializer.writeInt32(TypeChecker.FormDimension_ToNumeric(value_dimension_value))
        }
        const value_temporary  = value.temporary
        let value_temporary_type : int32 = RuntimeType.UNDEFINED
        value_temporary_type = runtimeType(value_temporary)
        valueSerializer.writeInt8(value_temporary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_temporary_type)) {
            const value_temporary_value  = value_temporary!
            valueSerializer.writeBoolean(value_temporary_value)
        }
        const value_want  = value.want
        let value_want_type : int32 = RuntimeType.UNDEFINED
        value_want_type = runtimeType(value_want)
        valueSerializer.writeInt8(value_want_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_want_type)) {
            const value_want_value  = value_want!
            valueSerializer.writeWant(value_want_value)
        }
        const value_renderingMode  = value.renderingMode
        let value_renderingMode_type : int32 = RuntimeType.UNDEFINED
        value_renderingMode_type = runtimeType(value_renderingMode)
        valueSerializer.writeInt8(value_renderingMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_renderingMode_type)) {
            const value_renderingMode_value  = (value_renderingMode as FormRenderingMode)
            valueSerializer.writeInt32(TypeChecker.FormRenderingMode_ToNumeric(value_renderingMode_value))
        }
        const value_shape  = value.shape
        let value_shape_type : int32 = RuntimeType.UNDEFINED
        value_shape_type = runtimeType(value_shape)
        valueSerializer.writeInt8(value_shape_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shape_type)) {
            const value_shape_value  = (value_shape as FormShape)
            valueSerializer.writeInt32(TypeChecker.FormShape_ToNumeric(value_shape_value))
        }
    }
    writeGaugeIndicatorOptions(value: GaugeIndicatorOptions): void {
        let valueSerializer : Serializer = this
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            let value_icon_value_type : int32 = RuntimeType.UNDEFINED
            value_icon_value_type = runtimeType(value_icon_value)
            if (RuntimeType.STRING == value_icon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_icon_value_0  = value_icon_value as string
                valueSerializer.writeString(value_icon_value_0)
            }
            else if (RuntimeType.OBJECT == value_icon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_icon_value_1  = value_icon_value as Resource
                valueSerializer.writeResource(value_icon_value_1)
            }
        }
        const value_space  = value.space
        let value_space_type : int32 = RuntimeType.UNDEFINED
        value_space_type = runtimeType(value_space)
        valueSerializer.writeInt8(value_space_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_space_type)) {
            const value_space_value  = value_space!
            valueSerializer.writeLength(value_space_value)
        }
    }
    writeGaugeShadowOptions(value: GaugeShadowOptions): void {
        let valueSerializer : Serializer = this
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            let value_radius_value_type : int32 = RuntimeType.UNDEFINED
            value_radius_value_type = runtimeType(value_radius_value)
            if (RuntimeType.NUMBER == value_radius_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_radius_value_0  = value_radius_value as number
                valueSerializer.writeNumber(value_radius_value_0)
            }
            else if (RuntimeType.OBJECT == value_radius_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_radius_value_1  = value_radius_value as Resource
                valueSerializer.writeResource(value_radius_value_1)
            }
        }
        const value_offsetX  = value.offsetX
        let value_offsetX_type : int32 = RuntimeType.UNDEFINED
        value_offsetX_type = runtimeType(value_offsetX)
        valueSerializer.writeInt8(value_offsetX_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offsetX_type)) {
            const value_offsetX_value  = value_offsetX!
            let value_offsetX_value_type : int32 = RuntimeType.UNDEFINED
            value_offsetX_value_type = runtimeType(value_offsetX_value)
            if (RuntimeType.NUMBER == value_offsetX_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_offsetX_value_0  = value_offsetX_value as number
                valueSerializer.writeNumber(value_offsetX_value_0)
            }
            else if (RuntimeType.OBJECT == value_offsetX_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offsetX_value_1  = value_offsetX_value as Resource
                valueSerializer.writeResource(value_offsetX_value_1)
            }
        }
        const value_offsetY  = value.offsetY
        let value_offsetY_type : int32 = RuntimeType.UNDEFINED
        value_offsetY_type = runtimeType(value_offsetY)
        valueSerializer.writeInt8(value_offsetY_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offsetY_type)) {
            const value_offsetY_value  = value_offsetY!
            let value_offsetY_value_type : int32 = RuntimeType.UNDEFINED
            value_offsetY_value_type = runtimeType(value_offsetY_value)
            if (RuntimeType.NUMBER == value_offsetY_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_offsetY_value_0  = value_offsetY_value as number
                valueSerializer.writeNumber(value_offsetY_value_0)
            }
            else if (RuntimeType.OBJECT == value_offsetY_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offsetY_value_1  = value_offsetY_value as Resource
                valueSerializer.writeResource(value_offsetY_value_1)
            }
        }
    }
    writeGestureEvent(value: GestureEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeGridColOptions(value: GridColOptions): void {
        let valueSerializer : Serializer = this
        const value_span  = value.span
        let value_span_type : int32 = RuntimeType.UNDEFINED
        value_span_type = runtimeType(value_span)
        valueSerializer.writeInt8(value_span_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_span_type)) {
            const value_span_value  = value_span!
            let value_span_value_type : int32 = RuntimeType.UNDEFINED
            value_span_value_type = runtimeType(value_span_value)
            if (RuntimeType.NUMBER == value_span_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_span_value_0  = value_span_value as number
                valueSerializer.writeNumber(value_span_value_0)
            }
            else if (RuntimeType.OBJECT == value_span_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_span_value_1  = value_span_value as GridColColumnOption
                valueSerializer.writeGridColColumnOption(value_span_value_1)
            }
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            let value_offset_value_type : int32 = RuntimeType.UNDEFINED
            value_offset_value_type = runtimeType(value_offset_value)
            if (RuntimeType.NUMBER == value_offset_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_offset_value_0  = value_offset_value as number
                valueSerializer.writeNumber(value_offset_value_0)
            }
            else if (RuntimeType.OBJECT == value_offset_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offset_value_1  = value_offset_value as GridColColumnOption
                valueSerializer.writeGridColColumnOption(value_offset_value_1)
            }
        }
        const value_order  = value.order
        let value_order_type : int32 = RuntimeType.UNDEFINED
        value_order_type = runtimeType(value_order)
        valueSerializer.writeInt8(value_order_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_order_type)) {
            const value_order_value  = value_order!
            let value_order_value_type : int32 = RuntimeType.UNDEFINED
            value_order_value_type = runtimeType(value_order_value)
            if (RuntimeType.NUMBER == value_order_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_order_value_0  = value_order_value as number
                valueSerializer.writeNumber(value_order_value_0)
            }
            else if (RuntimeType.OBJECT == value_order_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_order_value_1  = value_order_value as GridColColumnOption
                valueSerializer.writeGridColColumnOption(value_order_value_1)
            }
        }
    }
    writeGutterOption(value: GutterOption): void {
        let valueSerializer : Serializer = this
        const value_x  = value.x
        let value_x_type : int32 = RuntimeType.UNDEFINED
        value_x_type = runtimeType(value_x)
        valueSerializer.writeInt8(value_x_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_x_type)) {
            const value_x_value  = value_x!
            let value_x_value_type : int32 = RuntimeType.UNDEFINED
            value_x_value_type = runtimeType(value_x_value)
            if (((RuntimeType.NUMBER) == (value_x_value_type)) || ((RuntimeType.STRING) == (value_x_value_type)) || (((RuntimeType.OBJECT) == (value_x_value_type)) && (TypeChecker.isResource(value_x_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_x_value_0  = value_x_value as Length
                valueSerializer.writeLength(value_x_value_0)
            }
            else if (TypeChecker.isGridRowSizeOption(value_x_value, false, false, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_x_value_1  = value_x_value as GridRowSizeOption
                valueSerializer.writeGridRowSizeOption(value_x_value_1)
            }
        }
        const value_y  = value.y
        let value_y_type : int32 = RuntimeType.UNDEFINED
        value_y_type = runtimeType(value_y)
        valueSerializer.writeInt8(value_y_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_y_type)) {
            const value_y_value  = value_y!
            let value_y_value_type : int32 = RuntimeType.UNDEFINED
            value_y_value_type = runtimeType(value_y_value)
            if (((RuntimeType.NUMBER) == (value_y_value_type)) || ((RuntimeType.STRING) == (value_y_value_type)) || (((RuntimeType.OBJECT) == (value_y_value_type)) && (TypeChecker.isResource(value_y_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_y_value_0  = value_y_value as Length
                valueSerializer.writeLength(value_y_value_0)
            }
            else if (TypeChecker.isGridRowSizeOption(value_y_value, false, false, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_y_value_1  = value_y_value as GridRowSizeOption
                valueSerializer.writeGridRowSizeOption(value_y_value_1)
            }
        }
    }
    writeHistoricalPoint(value: HistoricalPoint): void {
        let valueSerializer : Serializer = this
        const value_touchObject  = value.touchObject
        valueSerializer.writeTouchObject(value_touchObject)
        const value_size  = value.size
        valueSerializer.writeNumber(value_size)
        const value_force  = value.force
        valueSerializer.writeNumber(value_force)
        const value_timestamp  = value.timestamp
        valueSerializer.writeInt64(value_timestamp)
    }
    writeHoverEvent(value: HoverEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeIconOptions(value: IconOptions): void {
        let valueSerializer : Serializer = this
        const value_size  = value.size
        let value_size_type : int32 = RuntimeType.UNDEFINED
        value_size_type = runtimeType(value_size)
        valueSerializer.writeInt8(value_size_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_size_type)) {
            const value_size_value  = value_size!
            valueSerializer.writeLength(value_size_value)
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_src  = value.src
        let value_src_type : int32 = RuntimeType.UNDEFINED
        value_src_type = runtimeType(value_src)
        valueSerializer.writeInt8(value_src_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_src_type)) {
            const value_src_value  = value_src!
            let value_src_value_type : int32 = RuntimeType.UNDEFINED
            value_src_value_type = runtimeType(value_src_value)
            if (RuntimeType.STRING == value_src_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_src_value_0  = value_src_value as string
                valueSerializer.writeString(value_src_value_0)
            }
            else if (RuntimeType.OBJECT == value_src_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_src_value_1  = value_src_value as Resource
                valueSerializer.writeResource(value_src_value_1)
            }
        }
    }
    writeImageAttachmentLayoutStyle(value: ImageAttachmentLayoutStyle): void {
        let valueSerializer : Serializer = this
        const value_margin  = value.margin
        let value_margin_type : int32 = RuntimeType.UNDEFINED
        value_margin_type = runtimeType(value_margin)
        valueSerializer.writeInt8(value_margin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_margin_type)) {
            const value_margin_value  = value_margin!
            let value_margin_value_type : int32 = RuntimeType.UNDEFINED
            value_margin_value_type = runtimeType(value_margin_value)
            if (TypeChecker.isLengthMetrics(value_margin_value, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_margin_value_0  = value_margin_value as LengthMetrics
                valueSerializer.writeLengthMetrics(value_margin_value_0)
            }
            else if (TypeChecker.isPadding(value_margin_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_margin_value_1  = value_margin_value as Padding
                valueSerializer.writePadding(value_margin_value_1)
            }
        }
        const value_padding  = value.padding
        let value_padding_type : int32 = RuntimeType.UNDEFINED
        value_padding_type = runtimeType(value_padding)
        valueSerializer.writeInt8(value_padding_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_padding_type)) {
            const value_padding_value  = value_padding!
            let value_padding_value_type : int32 = RuntimeType.UNDEFINED
            value_padding_value_type = runtimeType(value_padding_value)
            if (TypeChecker.isLengthMetrics(value_padding_value, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_padding_value_0  = value_padding_value as LengthMetrics
                valueSerializer.writeLengthMetrics(value_padding_value_0)
            }
            else if (TypeChecker.isPadding(value_padding_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_padding_value_1  = value_padding_value as Padding
                const value_padding_value_1_top  = value_padding_value_1.top
                let value_padding_value_1_top_type : int32 = RuntimeType.UNDEFINED
                value_padding_value_1_top_type = runtimeType(value_padding_value_1_top)
                valueSerializer.writeInt8(value_padding_value_1_top_type as int32)
                if ((RuntimeType.UNDEFINED) != (value_padding_value_1_top_type)) {
                    const value_padding_value_1_top_value  = value_padding_value_1_top!
                    valueSerializer.writeLength(value_padding_value_1_top_value)
                }
                const value_padding_value_1_right  = value_padding_value_1.right
                let value_padding_value_1_right_type : int32 = RuntimeType.UNDEFINED
                value_padding_value_1_right_type = runtimeType(value_padding_value_1_right)
                valueSerializer.writeInt8(value_padding_value_1_right_type as int32)
                if ((RuntimeType.UNDEFINED) != (value_padding_value_1_right_type)) {
                    const value_padding_value_1_right_value  = value_padding_value_1_right!
                    valueSerializer.writeLength(value_padding_value_1_right_value)
                }
                const value_padding_value_1_bottom  = value_padding_value_1.bottom
                let value_padding_value_1_bottom_type : int32 = RuntimeType.UNDEFINED
                value_padding_value_1_bottom_type = runtimeType(value_padding_value_1_bottom)
                valueSerializer.writeInt8(value_padding_value_1_bottom_type as int32)
                if ((RuntimeType.UNDEFINED) != (value_padding_value_1_bottom_type)) {
                    const value_padding_value_1_bottom_value  = value_padding_value_1_bottom!
                    valueSerializer.writeLength(value_padding_value_1_bottom_value)
                }
                const value_padding_value_1_left  = value_padding_value_1.left
                let value_padding_value_1_left_type : int32 = RuntimeType.UNDEFINED
                value_padding_value_1_left_type = runtimeType(value_padding_value_1_left)
                valueSerializer.writeInt8(value_padding_value_1_left_type as int32)
                if ((RuntimeType.UNDEFINED) != (value_padding_value_1_left_type)) {
                    const value_padding_value_1_left_value  = value_padding_value_1_left!
                    valueSerializer.writeLength(value_padding_value_1_left_value)
                }
            }
        }
        const value_borderRadius  = value.borderRadius
        let value_borderRadius_type : int32 = RuntimeType.UNDEFINED
        value_borderRadius_type = runtimeType(value_borderRadius)
        valueSerializer.writeInt8(value_borderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderRadius_type)) {
            const value_borderRadius_value  = value_borderRadius!
            let value_borderRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_borderRadius_value_type = runtimeType(value_borderRadius_value)
            if (TypeChecker.isLengthMetrics(value_borderRadius_value, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderRadius_value_0  = value_borderRadius_value as LengthMetrics
                valueSerializer.writeLengthMetrics(value_borderRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_borderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderRadius_value_1  = value_borderRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_borderRadius_value_1)
            }
        }
    }
    writeImageFrameInfo(value: ImageFrameInfo): void {
        let valueSerializer : Serializer = this
        const value_src  = value.src
        let value_src_type : int32 = RuntimeType.UNDEFINED
        value_src_type = runtimeType(value_src)
        if (RuntimeType.STRING == value_src_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_src_0  = value_src as string
            valueSerializer.writeString(value_src_0)
        }
        else if (TypeChecker.isResource(value_src, false, false, false, false, false)) {
            valueSerializer.writeInt8(1 as int32)
            const value_src_1  = value_src as Resource
            valueSerializer.writeResource(value_src_1)
        }
        else if (TypeChecker.isPixelMap(value_src, false, false)) {
            valueSerializer.writeInt8(2 as int32)
            const value_src_2  = value_src as PixelMap
            valueSerializer.writePixelMap(value_src_2)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_0)
            }
            else if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as string
                valueSerializer.writeString(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_0)
            }
            else if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as string
                valueSerializer.writeString(value_height_value_1)
            }
        }
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            let value_top_value_type : int32 = RuntimeType.UNDEFINED
            value_top_value_type = runtimeType(value_top_value)
            if (RuntimeType.NUMBER == value_top_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_top_value_0  = value_top_value as number
                valueSerializer.writeNumber(value_top_value_0)
            }
            else if (RuntimeType.STRING == value_top_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_top_value_1  = value_top_value as string
                valueSerializer.writeString(value_top_value_1)
            }
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            let value_left_value_type : int32 = RuntimeType.UNDEFINED
            value_left_value_type = runtimeType(value_left_value)
            if (RuntimeType.NUMBER == value_left_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_left_value_0  = value_left_value as number
                valueSerializer.writeNumber(value_left_value_0)
            }
            else if (RuntimeType.STRING == value_left_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_left_value_1  = value_left_value as string
                valueSerializer.writeString(value_left_value_1)
            }
        }
        const value_duration  = value.duration
        let value_duration_type : int32 = RuntimeType.UNDEFINED
        value_duration_type = runtimeType(value_duration)
        valueSerializer.writeInt8(value_duration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_duration_type)) {
            const value_duration_value  = value_duration!
            valueSerializer.writeNumber(value_duration_value)
        }
    }
    writeIndicatorStyle(value: IndicatorStyle): void {
        let valueSerializer : Serializer = this
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeLength(value_height_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_borderRadius  = value.borderRadius
        let value_borderRadius_type : int32 = RuntimeType.UNDEFINED
        value_borderRadius_type = runtimeType(value_borderRadius)
        valueSerializer.writeInt8(value_borderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderRadius_type)) {
            const value_borderRadius_value  = value_borderRadius!
            valueSerializer.writeLength(value_borderRadius_value)
        }
        const value_marginTop  = value.marginTop
        let value_marginTop_type : int32 = RuntimeType.UNDEFINED
        value_marginTop_type = runtimeType(value_marginTop)
        valueSerializer.writeInt8(value_marginTop_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_marginTop_type)) {
            const value_marginTop_value  = value_marginTop!
            valueSerializer.writeLength(value_marginTop_value)
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_selectedColor  = value.selectedColor
        let value_selectedColor_type : int32 = RuntimeType.UNDEFINED
        value_selectedColor_type = runtimeType(value_selectedColor)
        valueSerializer.writeInt8(value_selectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selectedColor_type)) {
            const value_selectedColor_value  = value_selectedColor!
            let value_selectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_selectedColor_value_type = runtimeType(value_selectedColor_value)
            if (TypeChecker.isColor(value_selectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_selectedColor_value_0  = value_selectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_selectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_selectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_selectedColor_value_1  = value_selectedColor_value as number
                valueSerializer.writeNumber(value_selectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_selectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_selectedColor_value_2  = value_selectedColor_value as string
                valueSerializer.writeString(value_selectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_selectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_selectedColor_value_3  = value_selectedColor_value as Resource
                valueSerializer.writeResource(value_selectedColor_value_3)
            }
        }
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            valueSerializer.writeLength(value_left_value)
        }
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLength(value_top_value)
        }
        const value_right  = value.right
        let value_right_type : int32 = RuntimeType.UNDEFINED
        value_right_type = runtimeType(value_right)
        valueSerializer.writeInt8(value_right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_right_type)) {
            const value_right_value  = value_right!
            valueSerializer.writeLength(value_right_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLength(value_bottom_value)
        }
        const value_size  = value.size
        let value_size_type : int32 = RuntimeType.UNDEFINED
        value_size_type = runtimeType(value_size)
        valueSerializer.writeInt8(value_size_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_size_type)) {
            const value_size_value  = value_size!
            valueSerializer.writeLength(value_size_value)
        }
        const value_mask  = value.mask
        let value_mask_type : int32 = RuntimeType.UNDEFINED
        value_mask_type = runtimeType(value_mask)
        valueSerializer.writeInt8(value_mask_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_mask_type)) {
            const value_mask_value  = value_mask!
            valueSerializer.writeBoolean(value_mask_value)
        }
    }
    writeSubTabBarIndicatorStyle(value: SubTabBarIndicatorStyle): void {
        let valueSerializer : Serializer = this
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeLength(value_height_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_borderRadius  = value.borderRadius
        let value_borderRadius_type : int32 = RuntimeType.UNDEFINED
        value_borderRadius_type = runtimeType(value_borderRadius)
        valueSerializer.writeInt8(value_borderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderRadius_type)) {
            const value_borderRadius_value  = value_borderRadius!
            valueSerializer.writeLength(value_borderRadius_value)
        }
        const value_marginTop  = value.marginTop
        let value_marginTop_type : int32 = RuntimeType.UNDEFINED
        value_marginTop_type = runtimeType(value_marginTop)
        valueSerializer.writeInt8(value_marginTop_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_marginTop_type)) {
            const value_marginTop_value  = value_marginTop!
            valueSerializer.writeLength(value_marginTop_value)
        }
    }
    writeJavaScriptProxy(value: JavaScriptProxy): void {
        let valueSerializer : Serializer = this
        const value_object_  = value.object_
        valueSerializer.holdAndWriteObject(value_object_)
        const value_name  = value.name
        valueSerializer.writeString(value_name)
        const value_methodList  = value.methodList
        valueSerializer.writeInt32(value_methodList.length as int32)
        for (let i = 0; i < value_methodList.length; i++) {
            const value_methodList_element : string = value_methodList[i]
            valueSerializer.writeString(value_methodList_element)
        }
        const value_controller  = value.controller
        let value_controller_type : int32 = RuntimeType.UNDEFINED
        value_controller_type = runtimeType(value_controller)
        if (TypeChecker.isWebController(value_controller)) {
            valueSerializer.writeInt8(0 as int32)
            const value_controller_0  = value_controller as WebController
            valueSerializer.writeWebController(value_controller_0)
        }
        else if (TypeChecker.isWebviewController(value_controller)) {
            valueSerializer.writeInt8(1 as int32)
            const value_controller_1  = value_controller as WebviewController
            valueSerializer.writeWebviewController(value_controller_1)
        }
        const value_asyncMethodList  = value.asyncMethodList
        let value_asyncMethodList_type : int32 = RuntimeType.UNDEFINED
        value_asyncMethodList_type = runtimeType(value_asyncMethodList)
        valueSerializer.writeInt8(value_asyncMethodList_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_asyncMethodList_type)) {
            const value_asyncMethodList_value  = value_asyncMethodList!
            valueSerializer.writeInt32(value_asyncMethodList_value.length as int32)
            for (let i = 0; i < value_asyncMethodList_value.length; i++) {
                const value_asyncMethodList_value_element : string = value_asyncMethodList_value[i]
                valueSerializer.writeString(value_asyncMethodList_value_element)
            }
        }
        const value_permission  = value.permission
        let value_permission_type : int32 = RuntimeType.UNDEFINED
        value_permission_type = runtimeType(value_permission)
        valueSerializer.writeInt8(value_permission_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_permission_type)) {
            const value_permission_value  = value_permission!
            valueSerializer.writeString(value_permission_value)
        }
    }
    writeLightSource(value: LightSource): void {
        let valueSerializer : Serializer = this
        const value_positionX  = value.positionX
        valueSerializer.writeLength(value_positionX)
        const value_positionY  = value.positionY
        valueSerializer.writeLength(value_positionY)
        const value_positionZ  = value.positionZ
        valueSerializer.writeLength(value_positionZ)
        const value_intensity  = value.intensity
        valueSerializer.writeNumber(value_intensity)
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
    }
    writeLinearIndicatorStyle(value: LinearIndicatorStyle): void {
        let valueSerializer : Serializer = this
        const value_space  = value.space
        let value_space_type : int32 = RuntimeType.UNDEFINED
        value_space_type = runtimeType(value_space)
        valueSerializer.writeInt8(value_space_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_space_type)) {
            const value_space_value  = value_space!
            valueSerializer.writeLengthMetrics(value_space_value)
        }
        const value_strokeWidth  = value.strokeWidth
        let value_strokeWidth_type : int32 = RuntimeType.UNDEFINED
        value_strokeWidth_type = runtimeType(value_strokeWidth)
        valueSerializer.writeInt8(value_strokeWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeWidth_type)) {
            const value_strokeWidth_value  = value_strokeWidth!
            valueSerializer.writeLengthMetrics(value_strokeWidth_value)
        }
        const value_strokeRadius  = value.strokeRadius
        let value_strokeRadius_type : int32 = RuntimeType.UNDEFINED
        value_strokeRadius_type = runtimeType(value_strokeRadius)
        valueSerializer.writeInt8(value_strokeRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeRadius_type)) {
            const value_strokeRadius_value  = value_strokeRadius!
            valueSerializer.writeLengthMetrics(value_strokeRadius_value)
        }
        const value_trackBackgroundColor  = value.trackBackgroundColor
        let value_trackBackgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_trackBackgroundColor_type = runtimeType(value_trackBackgroundColor)
        valueSerializer.writeInt8(value_trackBackgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_trackBackgroundColor_type)) {
            const value_trackBackgroundColor_value  = value_trackBackgroundColor!
            valueSerializer.writeColorMetrics(value_trackBackgroundColor_value)
        }
        const value_trackColor  = value.trackColor
        let value_trackColor_type : int32 = RuntimeType.UNDEFINED
        value_trackColor_type = runtimeType(value_trackColor)
        valueSerializer.writeInt8(value_trackColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_trackColor_type)) {
            const value_trackColor_value  = value_trackColor!
            valueSerializer.writeColorMetrics(value_trackColor_value)
        }
    }
    writeLinearStyleOptions(value: LinearStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_enableScanEffect  = value.enableScanEffect
        let value_enableScanEffect_type : int32 = RuntimeType.UNDEFINED
        value_enableScanEffect_type = runtimeType(value_enableScanEffect)
        valueSerializer.writeInt8(value_enableScanEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableScanEffect_type)) {
            const value_enableScanEffect_value  = value_enableScanEffect!
            valueSerializer.writeBoolean(value_enableScanEffect_value)
        }
        const value_strokeWidth  = value.strokeWidth
        let value_strokeWidth_type : int32 = RuntimeType.UNDEFINED
        value_strokeWidth_type = runtimeType(value_strokeWidth)
        valueSerializer.writeInt8(value_strokeWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeWidth_type)) {
            const value_strokeWidth_value  = value_strokeWidth!
            valueSerializer.writeLength(value_strokeWidth_value)
        }
        const value_strokeRadius  = value.strokeRadius
        let value_strokeRadius_type : int32 = RuntimeType.UNDEFINED
        value_strokeRadius_type = runtimeType(value_strokeRadius)
        valueSerializer.writeInt8(value_strokeRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeRadius_type)) {
            const value_strokeRadius_value  = value_strokeRadius!
            let value_strokeRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_strokeRadius_value_type = runtimeType(value_strokeRadius_value)
            if (RuntimeType.STRING == value_strokeRadius_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_strokeRadius_value_0  = value_strokeRadius_value as string
                valueSerializer.writeString(value_strokeRadius_value_0)
            }
            else if (RuntimeType.NUMBER == value_strokeRadius_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_strokeRadius_value_1  = value_strokeRadius_value as number
                valueSerializer.writeNumber(value_strokeRadius_value_1)
            }
            else if (RuntimeType.OBJECT == value_strokeRadius_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_strokeRadius_value_2  = value_strokeRadius_value as Resource
                valueSerializer.writeResource(value_strokeRadius_value_2)
            }
        }
    }
    writeListDividerOptions(value: ListDividerOptions): void {
        let valueSerializer : Serializer = this
        const value_strokeWidth  = value.strokeWidth
        valueSerializer.writeLength(value_strokeWidth)
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_startMargin  = value.startMargin
        let value_startMargin_type : int32 = RuntimeType.UNDEFINED
        value_startMargin_type = runtimeType(value_startMargin)
        valueSerializer.writeInt8(value_startMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_startMargin_type)) {
            const value_startMargin_value  = value_startMargin!
            valueSerializer.writeLength(value_startMargin_value)
        }
        const value_endMargin  = value.endMargin
        let value_endMargin_type : int32 = RuntimeType.UNDEFINED
        value_endMargin_type = runtimeType(value_endMargin)
        valueSerializer.writeInt8(value_endMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_endMargin_type)) {
            const value_endMargin_value  = value_endMargin!
            valueSerializer.writeLength(value_endMargin_value)
        }
    }
    writeLocalizedAlignRuleOptions(value: LocalizedAlignRuleOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeLocalizedHorizontalAlignParam(value_start_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeLocalizedHorizontalAlignParam(value_end_value)
        }
        const value_middle  = value.middle
        let value_middle_type : int32 = RuntimeType.UNDEFINED
        value_middle_type = runtimeType(value_middle)
        valueSerializer.writeInt8(value_middle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_middle_type)) {
            const value_middle_value  = value_middle!
            valueSerializer.writeLocalizedHorizontalAlignParam(value_middle_value)
        }
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLocalizedVerticalAlignParam(value_top_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLocalizedVerticalAlignParam(value_bottom_value)
        }
        const value_center  = value.center
        let value_center_type : int32 = RuntimeType.UNDEFINED
        value_center_type = runtimeType(value_center)
        valueSerializer.writeInt8(value_center_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_center_type)) {
            const value_center_value  = value_center!
            valueSerializer.writeLocalizedVerticalAlignParam(value_center_value)
        }
        const value_bias  = value.bias
        let value_bias_type : int32 = RuntimeType.UNDEFINED
        value_bias_type = runtimeType(value_bias)
        valueSerializer.writeInt8(value_bias_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bias_type)) {
            const value_bias_value  = value_bias!
            valueSerializer.writeBias(value_bias_value)
        }
    }
    writeLocalizedBorderRadiuses(value: LocalizedBorderRadiuses): void {
        let valueSerializer : Serializer = this
        const value_topStart  = value.topStart
        let value_topStart_type : int32 = RuntimeType.UNDEFINED
        value_topStart_type = runtimeType(value_topStart)
        valueSerializer.writeInt8(value_topStart_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_topStart_type)) {
            const value_topStart_value  = value_topStart!
            valueSerializer.writeLengthMetrics(value_topStart_value)
        }
        const value_topEnd  = value.topEnd
        let value_topEnd_type : int32 = RuntimeType.UNDEFINED
        value_topEnd_type = runtimeType(value_topEnd)
        valueSerializer.writeInt8(value_topEnd_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_topEnd_type)) {
            const value_topEnd_value  = value_topEnd!
            valueSerializer.writeLengthMetrics(value_topEnd_value)
        }
        const value_bottomStart  = value.bottomStart
        let value_bottomStart_type : int32 = RuntimeType.UNDEFINED
        value_bottomStart_type = runtimeType(value_bottomStart)
        valueSerializer.writeInt8(value_bottomStart_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottomStart_type)) {
            const value_bottomStart_value  = value_bottomStart!
            valueSerializer.writeLengthMetrics(value_bottomStart_value)
        }
        const value_bottomEnd  = value.bottomEnd
        let value_bottomEnd_type : int32 = RuntimeType.UNDEFINED
        value_bottomEnd_type = runtimeType(value_bottomEnd)
        valueSerializer.writeInt8(value_bottomEnd_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottomEnd_type)) {
            const value_bottomEnd_value  = value_bottomEnd!
            valueSerializer.writeLengthMetrics(value_bottomEnd_value)
        }
    }
    writeLocalizedEdgeColors(value: LocalizedEdgeColors): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            let value_top_value_type : int32 = RuntimeType.UNDEFINED
            value_top_value_type = runtimeType(value_top_value)
            if (TypeChecker.isColor(value_top_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_top_value_0  = value_top_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_top_value_0))
            }
            else if (RuntimeType.NUMBER == value_top_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_top_value_1  = value_top_value as number
                valueSerializer.writeNumber(value_top_value_1)
            }
            else if (RuntimeType.STRING == value_top_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_top_value_2  = value_top_value as string
                valueSerializer.writeString(value_top_value_2)
            }
            else if (RuntimeType.OBJECT == value_top_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_top_value_3  = value_top_value as Resource
                valueSerializer.writeResource(value_top_value_3)
            }
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            let value_end_value_type : int32 = RuntimeType.UNDEFINED
            value_end_value_type = runtimeType(value_end_value)
            if (TypeChecker.isColor(value_end_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_end_value_0  = value_end_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_end_value_0))
            }
            else if (RuntimeType.NUMBER == value_end_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_end_value_1  = value_end_value as number
                valueSerializer.writeNumber(value_end_value_1)
            }
            else if (RuntimeType.STRING == value_end_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_end_value_2  = value_end_value as string
                valueSerializer.writeString(value_end_value_2)
            }
            else if (RuntimeType.OBJECT == value_end_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_end_value_3  = value_end_value as Resource
                valueSerializer.writeResource(value_end_value_3)
            }
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            let value_bottom_value_type : int32 = RuntimeType.UNDEFINED
            value_bottom_value_type = runtimeType(value_bottom_value)
            if (TypeChecker.isColor(value_bottom_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_bottom_value_0  = value_bottom_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_bottom_value_0))
            }
            else if (RuntimeType.NUMBER == value_bottom_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_bottom_value_1  = value_bottom_value as number
                valueSerializer.writeNumber(value_bottom_value_1)
            }
            else if (RuntimeType.STRING == value_bottom_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_bottom_value_2  = value_bottom_value as string
                valueSerializer.writeString(value_bottom_value_2)
            }
            else if (RuntimeType.OBJECT == value_bottom_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_bottom_value_3  = value_bottom_value as Resource
                valueSerializer.writeResource(value_bottom_value_3)
            }
        }
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            let value_start_value_type : int32 = RuntimeType.UNDEFINED
            value_start_value_type = runtimeType(value_start_value)
            if (TypeChecker.isColor(value_start_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_start_value_0  = value_start_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_start_value_0))
            }
            else if (RuntimeType.NUMBER == value_start_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_start_value_1  = value_start_value as number
                valueSerializer.writeNumber(value_start_value_1)
            }
            else if (RuntimeType.STRING == value_start_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_start_value_2  = value_start_value as string
                valueSerializer.writeString(value_start_value_2)
            }
            else if (RuntimeType.OBJECT == value_start_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_start_value_3  = value_start_value as Resource
                valueSerializer.writeResource(value_start_value_3)
            }
        }
    }
    writeLocalizedEdges(value: LocalizedEdges): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLengthMetrics(value_top_value)
        }
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeLengthMetrics(value_start_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLengthMetrics(value_bottom_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeLengthMetrics(value_end_value)
        }
    }
    writeLocalizedEdgeWidths(value: LocalizedEdgeWidths): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLengthMetrics(value_top_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeLengthMetrics(value_end_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLengthMetrics(value_bottom_value)
        }
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeLengthMetrics(value_start_value)
        }
    }
    writeLocalizedPadding(value: LocalizedPadding): void {
        let valueSerializer : Serializer = this
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLengthMetrics(value_top_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeLengthMetrics(value_end_value)
        }
        const value_bottom  = value.bottom
        let value_bottom_type : int32 = RuntimeType.UNDEFINED
        value_bottom_type = runtimeType(value_bottom)
        valueSerializer.writeInt8(value_bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bottom_type)) {
            const value_bottom_value  = value_bottom!
            valueSerializer.writeLengthMetrics(value_bottom_value)
        }
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeLengthMetrics(value_start_value)
        }
    }
    writeLocalizedPosition(value: LocalizedPosition): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeLengthMetrics(value_start_value)
        }
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeLengthMetrics(value_top_value)
        }
    }
    writeLongPressGestureEvent(value: LongPressGestureEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeLunarSwitchStyle(value: LunarSwitchStyle): void {
        let valueSerializer : Serializer = this
        const value_selectedColor  = value.selectedColor
        let value_selectedColor_type : int32 = RuntimeType.UNDEFINED
        value_selectedColor_type = runtimeType(value_selectedColor)
        valueSerializer.writeInt8(value_selectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selectedColor_type)) {
            const value_selectedColor_value  = value_selectedColor!
            let value_selectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_selectedColor_value_type = runtimeType(value_selectedColor_value)
            if (TypeChecker.isColor(value_selectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_selectedColor_value_0  = value_selectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_selectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_selectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_selectedColor_value_1  = value_selectedColor_value as number
                valueSerializer.writeNumber(value_selectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_selectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_selectedColor_value_2  = value_selectedColor_value as string
                valueSerializer.writeString(value_selectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_selectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_selectedColor_value_3  = value_selectedColor_value as Resource
                valueSerializer.writeResource(value_selectedColor_value_3)
            }
        }
        const value_unselectedColor  = value.unselectedColor
        let value_unselectedColor_type : int32 = RuntimeType.UNDEFINED
        value_unselectedColor_type = runtimeType(value_unselectedColor)
        valueSerializer.writeInt8(value_unselectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_unselectedColor_type)) {
            const value_unselectedColor_value  = value_unselectedColor!
            let value_unselectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_unselectedColor_value_type = runtimeType(value_unselectedColor_value)
            if (TypeChecker.isColor(value_unselectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_unselectedColor_value_0  = value_unselectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_unselectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_unselectedColor_value_1  = value_unselectedColor_value as number
                valueSerializer.writeNumber(value_unselectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_unselectedColor_value_2  = value_unselectedColor_value as string
                valueSerializer.writeString(value_unselectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_unselectedColor_value_3  = value_unselectedColor_value as Resource
                valueSerializer.writeResource(value_unselectedColor_value_3)
            }
        }
        const value_strokeColor  = value.strokeColor
        let value_strokeColor_type : int32 = RuntimeType.UNDEFINED
        value_strokeColor_type = runtimeType(value_strokeColor)
        valueSerializer.writeInt8(value_strokeColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeColor_type)) {
            const value_strokeColor_value  = value_strokeColor!
            let value_strokeColor_value_type : int32 = RuntimeType.UNDEFINED
            value_strokeColor_value_type = runtimeType(value_strokeColor_value)
            if (TypeChecker.isColor(value_strokeColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_strokeColor_value_0  = value_strokeColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_strokeColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_strokeColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_strokeColor_value_1  = value_strokeColor_value as number
                valueSerializer.writeNumber(value_strokeColor_value_1)
            }
            else if (RuntimeType.STRING == value_strokeColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_strokeColor_value_2  = value_strokeColor_value as string
                valueSerializer.writeString(value_strokeColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_strokeColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_strokeColor_value_3  = value_strokeColor_value as Resource
                valueSerializer.writeResource(value_strokeColor_value_3)
            }
        }
    }
    writeMarkStyle(value: MarkStyle): void {
        let valueSerializer : Serializer = this
        const value_strokeColor  = value.strokeColor
        let value_strokeColor_type : int32 = RuntimeType.UNDEFINED
        value_strokeColor_type = runtimeType(value_strokeColor)
        valueSerializer.writeInt8(value_strokeColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeColor_type)) {
            const value_strokeColor_value  = value_strokeColor!
            let value_strokeColor_value_type : int32 = RuntimeType.UNDEFINED
            value_strokeColor_value_type = runtimeType(value_strokeColor_value)
            if (TypeChecker.isColor(value_strokeColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_strokeColor_value_0  = value_strokeColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_strokeColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_strokeColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_strokeColor_value_1  = value_strokeColor_value as number
                valueSerializer.writeNumber(value_strokeColor_value_1)
            }
            else if (RuntimeType.STRING == value_strokeColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_strokeColor_value_2  = value_strokeColor_value as string
                valueSerializer.writeString(value_strokeColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_strokeColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_strokeColor_value_3  = value_strokeColor_value as Resource
                valueSerializer.writeResource(value_strokeColor_value_3)
            }
        }
        const value_size  = value.size
        let value_size_type : int32 = RuntimeType.UNDEFINED
        value_size_type = runtimeType(value_size)
        valueSerializer.writeInt8(value_size_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_size_type)) {
            const value_size_value  = value_size!
            valueSerializer.writeLength(value_size_value)
        }
        const value_strokeWidth  = value.strokeWidth
        let value_strokeWidth_type : int32 = RuntimeType.UNDEFINED
        value_strokeWidth_type = runtimeType(value_strokeWidth)
        valueSerializer.writeInt8(value_strokeWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_strokeWidth_type)) {
            const value_strokeWidth_value  = value_strokeWidth!
            valueSerializer.writeLength(value_strokeWidth_value)
        }
    }
    writeMeasureOptions(value: MeasureOptions): void {
        let valueSerializer : Serializer = this
        const value_textContent  = value.textContent
        let value_textContent_type : int32 = RuntimeType.UNDEFINED
        value_textContent_type = runtimeType(value_textContent)
        if (RuntimeType.STRING == value_textContent_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_textContent_0  = value_textContent as string
            valueSerializer.writeString(value_textContent_0)
        }
        else if (RuntimeType.OBJECT == value_textContent_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_textContent_1  = value_textContent as Resource
            valueSerializer.writeResource(value_textContent_1)
        }
        const value_constraintWidth  = value.constraintWidth
        let value_constraintWidth_type : int32 = RuntimeType.UNDEFINED
        value_constraintWidth_type = runtimeType(value_constraintWidth)
        valueSerializer.writeInt8(value_constraintWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_constraintWidth_type)) {
            const value_constraintWidth_value  = value_constraintWidth!
            let value_constraintWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_constraintWidth_value_type = runtimeType(value_constraintWidth_value)
            if (RuntimeType.NUMBER == value_constraintWidth_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_constraintWidth_value_0  = value_constraintWidth_value as number
                valueSerializer.writeNumber(value_constraintWidth_value_0)
            }
            else if (RuntimeType.STRING == value_constraintWidth_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_constraintWidth_value_1  = value_constraintWidth_value as string
                valueSerializer.writeString(value_constraintWidth_value_1)
            }
            else if (RuntimeType.OBJECT == value_constraintWidth_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_constraintWidth_value_2  = value_constraintWidth_value as Resource
                valueSerializer.writeResource(value_constraintWidth_value_2)
            }
        }
        const value_fontSize  = value.fontSize
        let value_fontSize_type : int32 = RuntimeType.UNDEFINED
        value_fontSize_type = runtimeType(value_fontSize)
        valueSerializer.writeInt8(value_fontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontSize_type)) {
            const value_fontSize_value  = value_fontSize!
            let value_fontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_fontSize_value_type = runtimeType(value_fontSize_value)
            if (RuntimeType.NUMBER == value_fontSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontSize_value_0  = value_fontSize_value as number
                valueSerializer.writeNumber(value_fontSize_value_0)
            }
            else if (RuntimeType.STRING == value_fontSize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontSize_value_1  = value_fontSize_value as string
                valueSerializer.writeString(value_fontSize_value_1)
            }
            else if (RuntimeType.OBJECT == value_fontSize_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontSize_value_2  = value_fontSize_value as Resource
                valueSerializer.writeResource(value_fontSize_value_2)
            }
        }
        const value_fontStyle  = value.fontStyle
        let value_fontStyle_type : int32 = RuntimeType.UNDEFINED
        value_fontStyle_type = runtimeType(value_fontStyle)
        valueSerializer.writeInt8(value_fontStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontStyle_type)) {
            const value_fontStyle_value  = value_fontStyle!
            let value_fontStyle_value_type : int32 = RuntimeType.UNDEFINED
            value_fontStyle_value_type = runtimeType(value_fontStyle_value)
            if (RuntimeType.NUMBER == value_fontStyle_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontStyle_value_0  = value_fontStyle_value as number
                valueSerializer.writeNumber(value_fontStyle_value_0)
            }
            else if (TypeChecker.isFontStyle(value_fontStyle_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontStyle_value_1  = value_fontStyle_value as FontStyle
                valueSerializer.writeInt32(TypeChecker.FontStyle_ToNumeric(value_fontStyle_value_1))
            }
        }
        const value_fontWeight  = value.fontWeight
        let value_fontWeight_type : int32 = RuntimeType.UNDEFINED
        value_fontWeight_type = runtimeType(value_fontWeight)
        valueSerializer.writeInt8(value_fontWeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontWeight_type)) {
            const value_fontWeight_value  = value_fontWeight!
            let value_fontWeight_value_type : int32 = RuntimeType.UNDEFINED
            value_fontWeight_value_type = runtimeType(value_fontWeight_value)
            if (RuntimeType.NUMBER == value_fontWeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontWeight_value_0  = value_fontWeight_value as number
                valueSerializer.writeNumber(value_fontWeight_value_0)
            }
            else if (RuntimeType.STRING == value_fontWeight_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontWeight_value_1  = value_fontWeight_value as string
                valueSerializer.writeString(value_fontWeight_value_1)
            }
            else if (TypeChecker.isFontWeight(value_fontWeight_value)) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontWeight_value_2  = value_fontWeight_value as FontWeight
                valueSerializer.writeInt32(TypeChecker.FontWeight_ToNumeric(value_fontWeight_value_2))
            }
        }
        const value_fontFamily  = value.fontFamily
        let value_fontFamily_type : int32 = RuntimeType.UNDEFINED
        value_fontFamily_type = runtimeType(value_fontFamily)
        valueSerializer.writeInt8(value_fontFamily_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontFamily_type)) {
            const value_fontFamily_value  = value_fontFamily!
            let value_fontFamily_value_type : int32 = RuntimeType.UNDEFINED
            value_fontFamily_value_type = runtimeType(value_fontFamily_value)
            if (RuntimeType.STRING == value_fontFamily_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontFamily_value_0  = value_fontFamily_value as string
                valueSerializer.writeString(value_fontFamily_value_0)
            }
            else if (RuntimeType.OBJECT == value_fontFamily_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontFamily_value_1  = value_fontFamily_value as Resource
                valueSerializer.writeResource(value_fontFamily_value_1)
            }
        }
        const value_letterSpacing  = value.letterSpacing
        let value_letterSpacing_type : int32 = RuntimeType.UNDEFINED
        value_letterSpacing_type = runtimeType(value_letterSpacing)
        valueSerializer.writeInt8(value_letterSpacing_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_letterSpacing_type)) {
            const value_letterSpacing_value  = value_letterSpacing!
            let value_letterSpacing_value_type : int32 = RuntimeType.UNDEFINED
            value_letterSpacing_value_type = runtimeType(value_letterSpacing_value)
            if (RuntimeType.NUMBER == value_letterSpacing_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_letterSpacing_value_0  = value_letterSpacing_value as number
                valueSerializer.writeNumber(value_letterSpacing_value_0)
            }
            else if (RuntimeType.STRING == value_letterSpacing_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_letterSpacing_value_1  = value_letterSpacing_value as string
                valueSerializer.writeString(value_letterSpacing_value_1)
            }
        }
        const value_textAlign  = value.textAlign
        let value_textAlign_type : int32 = RuntimeType.UNDEFINED
        value_textAlign_type = runtimeType(value_textAlign)
        valueSerializer.writeInt8(value_textAlign_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textAlign_type)) {
            const value_textAlign_value  = value_textAlign!
            let value_textAlign_value_type : int32 = RuntimeType.UNDEFINED
            value_textAlign_value_type = runtimeType(value_textAlign_value)
            if (RuntimeType.NUMBER == value_textAlign_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_textAlign_value_0  = value_textAlign_value as number
                valueSerializer.writeNumber(value_textAlign_value_0)
            }
            else if (TypeChecker.isTextAlign(value_textAlign_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_textAlign_value_1  = value_textAlign_value as TextAlign
                valueSerializer.writeInt32(TypeChecker.TextAlign_ToNumeric(value_textAlign_value_1))
            }
        }
        const value_overflow  = value.overflow
        let value_overflow_type : int32 = RuntimeType.UNDEFINED
        value_overflow_type = runtimeType(value_overflow)
        valueSerializer.writeInt8(value_overflow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_overflow_type)) {
            const value_overflow_value  = value_overflow!
            let value_overflow_value_type : int32 = RuntimeType.UNDEFINED
            value_overflow_value_type = runtimeType(value_overflow_value)
            if (RuntimeType.NUMBER == value_overflow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_overflow_value_0  = value_overflow_value as number
                valueSerializer.writeNumber(value_overflow_value_0)
            }
            else if (TypeChecker.isTextOverflow(value_overflow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_overflow_value_1  = value_overflow_value as TextOverflow
                valueSerializer.writeInt32(TypeChecker.TextOverflow_ToNumeric(value_overflow_value_1))
            }
        }
        const value_maxLines  = value.maxLines
        let value_maxLines_type : int32 = RuntimeType.UNDEFINED
        value_maxLines_type = runtimeType(value_maxLines)
        valueSerializer.writeInt8(value_maxLines_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxLines_type)) {
            const value_maxLines_value  = value_maxLines!
            valueSerializer.writeNumber(value_maxLines_value)
        }
        const value_lineHeight  = value.lineHeight
        let value_lineHeight_type : int32 = RuntimeType.UNDEFINED
        value_lineHeight_type = runtimeType(value_lineHeight)
        valueSerializer.writeInt8(value_lineHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lineHeight_type)) {
            const value_lineHeight_value  = value_lineHeight!
            let value_lineHeight_value_type : int32 = RuntimeType.UNDEFINED
            value_lineHeight_value_type = runtimeType(value_lineHeight_value)
            if (RuntimeType.NUMBER == value_lineHeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_lineHeight_value_0  = value_lineHeight_value as number
                valueSerializer.writeNumber(value_lineHeight_value_0)
            }
            else if (RuntimeType.STRING == value_lineHeight_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_lineHeight_value_1  = value_lineHeight_value as string
                valueSerializer.writeString(value_lineHeight_value_1)
            }
            else if (RuntimeType.OBJECT == value_lineHeight_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_lineHeight_value_2  = value_lineHeight_value as Resource
                valueSerializer.writeResource(value_lineHeight_value_2)
            }
        }
        const value_baselineOffset  = value.baselineOffset
        let value_baselineOffset_type : int32 = RuntimeType.UNDEFINED
        value_baselineOffset_type = runtimeType(value_baselineOffset)
        valueSerializer.writeInt8(value_baselineOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_baselineOffset_type)) {
            const value_baselineOffset_value  = value_baselineOffset!
            let value_baselineOffset_value_type : int32 = RuntimeType.UNDEFINED
            value_baselineOffset_value_type = runtimeType(value_baselineOffset_value)
            if (RuntimeType.NUMBER == value_baselineOffset_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_baselineOffset_value_0  = value_baselineOffset_value as number
                valueSerializer.writeNumber(value_baselineOffset_value_0)
            }
            else if (RuntimeType.STRING == value_baselineOffset_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_baselineOffset_value_1  = value_baselineOffset_value as string
                valueSerializer.writeString(value_baselineOffset_value_1)
            }
        }
        const value_textCase  = value.textCase
        let value_textCase_type : int32 = RuntimeType.UNDEFINED
        value_textCase_type = runtimeType(value_textCase)
        valueSerializer.writeInt8(value_textCase_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textCase_type)) {
            const value_textCase_value  = value_textCase!
            let value_textCase_value_type : int32 = RuntimeType.UNDEFINED
            value_textCase_value_type = runtimeType(value_textCase_value)
            if (RuntimeType.NUMBER == value_textCase_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_textCase_value_0  = value_textCase_value as number
                valueSerializer.writeNumber(value_textCase_value_0)
            }
            else if (TypeChecker.isTextCase(value_textCase_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_textCase_value_1  = value_textCase_value as TextCase
                valueSerializer.writeInt32(TypeChecker.TextCase_ToNumeric(value_textCase_value_1))
            }
        }
        const value_textIndent  = value.textIndent
        let value_textIndent_type : int32 = RuntimeType.UNDEFINED
        value_textIndent_type = runtimeType(value_textIndent)
        valueSerializer.writeInt8(value_textIndent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textIndent_type)) {
            const value_textIndent_value  = value_textIndent!
            let value_textIndent_value_type : int32 = RuntimeType.UNDEFINED
            value_textIndent_value_type = runtimeType(value_textIndent_value)
            if (RuntimeType.NUMBER == value_textIndent_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_textIndent_value_0  = value_textIndent_value as number
                valueSerializer.writeNumber(value_textIndent_value_0)
            }
            else if (RuntimeType.STRING == value_textIndent_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_textIndent_value_1  = value_textIndent_value as string
                valueSerializer.writeString(value_textIndent_value_1)
            }
        }
        const value_wordBreak  = value.wordBreak
        let value_wordBreak_type : int32 = RuntimeType.UNDEFINED
        value_wordBreak_type = runtimeType(value_wordBreak)
        valueSerializer.writeInt8(value_wordBreak_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_wordBreak_type)) {
            const value_wordBreak_value  = (value_wordBreak as WordBreak)
            valueSerializer.writeInt32(TypeChecker.WordBreak_ToNumeric(value_wordBreak_value))
        }
    }
    writeMenuElement(value: MenuElement): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        if (RuntimeType.STRING == value_value_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_value_0  = value_value as string
            valueSerializer.writeString(value_value_0)
        }
        else if (RuntimeType.OBJECT == value_value_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_value_1  = value_value as Resource
            valueSerializer.writeResource(value_value_1)
        }
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            let value_icon_value_type : int32 = RuntimeType.UNDEFINED
            value_icon_value_type = runtimeType(value_icon_value)
            if (RuntimeType.STRING == value_icon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_icon_value_0  = value_icon_value as string
                valueSerializer.writeString(value_icon_value_0)
            }
            else if (RuntimeType.OBJECT == value_icon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_icon_value_1  = value_icon_value as Resource
                valueSerializer.writeResource(value_icon_value_1)
            }
        }
        const value_enabled  = value.enabled
        let value_enabled_type : int32 = RuntimeType.UNDEFINED
        value_enabled_type = runtimeType(value_enabled)
        valueSerializer.writeInt8(value_enabled_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enabled_type)) {
            const value_enabled_value  = value_enabled!
            valueSerializer.writeBoolean(value_enabled_value)
        }
        const value_action  = value.action
        valueSerializer.holdAndWriteCallback(value_action)
    }
    writeMenuItemConfiguration(value: MenuItemConfiguration): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeMenuItemGroupOptions(value: MenuItemGroupOptions): void {
        let valueSerializer : Serializer = this
        const value_header  = value.header
        let value_header_type : int32 = RuntimeType.UNDEFINED
        value_header_type = runtimeType(value_header)
        valueSerializer.writeInt8(value_header_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_header_type)) {
            const value_header_value  = value_header!
            let value_header_value_type : int32 = RuntimeType.UNDEFINED
            value_header_value_type = runtimeType(value_header_value)
            if ((RuntimeType.STRING == value_header_value_type) || (RuntimeType.OBJECT == value_header_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_header_value_0  = value_header_value as ResourceStr
                let value_header_value_0_type : int32 = RuntimeType.UNDEFINED
                value_header_value_0_type = runtimeType(value_header_value_0)
                if (RuntimeType.STRING == value_header_value_0_type) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_header_value_0_0  = value_header_value_0 as string
                    valueSerializer.writeString(value_header_value_0_0)
                }
                else if (RuntimeType.OBJECT == value_header_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_header_value_0_1  = value_header_value_0 as Resource
                    valueSerializer.writeResource(value_header_value_0_1)
                }
            }
            else if (RuntimeType.FUNCTION == value_header_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_header_value_1  = value_header_value as CustomBuilder
                valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_header_value_1))
            }
        }
        const value_footer  = value.footer
        let value_footer_type : int32 = RuntimeType.UNDEFINED
        value_footer_type = runtimeType(value_footer)
        valueSerializer.writeInt8(value_footer_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_footer_type)) {
            const value_footer_value  = value_footer!
            let value_footer_value_type : int32 = RuntimeType.UNDEFINED
            value_footer_value_type = runtimeType(value_footer_value)
            if ((RuntimeType.STRING == value_footer_value_type) || (RuntimeType.OBJECT == value_footer_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_footer_value_0  = value_footer_value as ResourceStr
                let value_footer_value_0_type : int32 = RuntimeType.UNDEFINED
                value_footer_value_0_type = runtimeType(value_footer_value_0)
                if (RuntimeType.STRING == value_footer_value_0_type) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_footer_value_0_0  = value_footer_value_0 as string
                    valueSerializer.writeString(value_footer_value_0_0)
                }
                else if (RuntimeType.OBJECT == value_footer_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_footer_value_0_1  = value_footer_value_0 as Resource
                    valueSerializer.writeResource(value_footer_value_0_1)
                }
            }
            else if (RuntimeType.FUNCTION == value_footer_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_footer_value_1  = value_footer_value as CustomBuilder
                valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_footer_value_1))
            }
        }
    }
    writeMenuItemOptions(value: MenuItemOptions): void {
        let valueSerializer : Serializer = this
        const value_startIcon  = value.startIcon
        let value_startIcon_type : int32 = RuntimeType.UNDEFINED
        value_startIcon_type = runtimeType(value_startIcon)
        valueSerializer.writeInt8(value_startIcon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_startIcon_type)) {
            const value_startIcon_value  = value_startIcon!
            let value_startIcon_value_type : int32 = RuntimeType.UNDEFINED
            value_startIcon_value_type = runtimeType(value_startIcon_value)
            if (RuntimeType.STRING == value_startIcon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_startIcon_value_0  = value_startIcon_value as string
                valueSerializer.writeString(value_startIcon_value_0)
            }
            else if (RuntimeType.OBJECT == value_startIcon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_startIcon_value_1  = value_startIcon_value as Resource
                valueSerializer.writeResource(value_startIcon_value_1)
            }
        }
        const value_content  = value.content
        let value_content_type : int32 = RuntimeType.UNDEFINED
        value_content_type = runtimeType(value_content)
        valueSerializer.writeInt8(value_content_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_content_type)) {
            const value_content_value  = value_content!
            let value_content_value_type : int32 = RuntimeType.UNDEFINED
            value_content_value_type = runtimeType(value_content_value)
            if (RuntimeType.STRING == value_content_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_content_value_0  = value_content_value as string
                valueSerializer.writeString(value_content_value_0)
            }
            else if (RuntimeType.OBJECT == value_content_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_content_value_1  = value_content_value as Resource
                valueSerializer.writeResource(value_content_value_1)
            }
        }
        const value_endIcon  = value.endIcon
        let value_endIcon_type : int32 = RuntimeType.UNDEFINED
        value_endIcon_type = runtimeType(value_endIcon)
        valueSerializer.writeInt8(value_endIcon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_endIcon_type)) {
            const value_endIcon_value  = value_endIcon!
            let value_endIcon_value_type : int32 = RuntimeType.UNDEFINED
            value_endIcon_value_type = runtimeType(value_endIcon_value)
            if (RuntimeType.STRING == value_endIcon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_endIcon_value_0  = value_endIcon_value as string
                valueSerializer.writeString(value_endIcon_value_0)
            }
            else if (RuntimeType.OBJECT == value_endIcon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_endIcon_value_1  = value_endIcon_value as Resource
                valueSerializer.writeResource(value_endIcon_value_1)
            }
        }
        const value_labelInfo  = value.labelInfo
        let value_labelInfo_type : int32 = RuntimeType.UNDEFINED
        value_labelInfo_type = runtimeType(value_labelInfo)
        valueSerializer.writeInt8(value_labelInfo_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_labelInfo_type)) {
            const value_labelInfo_value  = value_labelInfo!
            let value_labelInfo_value_type : int32 = RuntimeType.UNDEFINED
            value_labelInfo_value_type = runtimeType(value_labelInfo_value)
            if (RuntimeType.STRING == value_labelInfo_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_labelInfo_value_0  = value_labelInfo_value as string
                valueSerializer.writeString(value_labelInfo_value_0)
            }
            else if (RuntimeType.OBJECT == value_labelInfo_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_labelInfo_value_1  = value_labelInfo_value as Resource
                valueSerializer.writeResource(value_labelInfo_value_1)
            }
        }
        const value_builder  = value.builder
        let value_builder_type : int32 = RuntimeType.UNDEFINED
        value_builder_type = runtimeType(value_builder)
        valueSerializer.writeInt8(value_builder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_builder_type)) {
            const value_builder_value  = value_builder!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_builder_value))
        }
    }
    writeMouseEvent(value: MouseEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeNativeEmbedInfo(value: NativeEmbedInfo): void {
        let valueSerializer : Serializer = this
        const value_id  = value.id
        let value_id_type : int32 = RuntimeType.UNDEFINED
        value_id_type = runtimeType(value_id)
        valueSerializer.writeInt8(value_id_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_id_type)) {
            const value_id_value  = value_id!
            valueSerializer.writeString(value_id_value)
        }
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = value_type!
            valueSerializer.writeString(value_type_value)
        }
        const value_src  = value.src
        let value_src_type : int32 = RuntimeType.UNDEFINED
        value_src_type = runtimeType(value_src)
        valueSerializer.writeInt8(value_src_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_src_type)) {
            const value_src_value  = value_src!
            valueSerializer.writeString(value_src_value)
        }
        const value_position  = value.position
        let value_position_type : int32 = RuntimeType.UNDEFINED
        value_position_type = runtimeType(value_position)
        valueSerializer.writeInt8(value_position_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_position_type)) {
            const value_position_value  = value_position!
            valueSerializer.writePosition(value_position_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeNumber(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeNumber(value_height_value)
        }
        const value_url  = value.url
        let value_url_type : int32 = RuntimeType.UNDEFINED
        value_url_type = runtimeType(value_url)
        valueSerializer.writeInt8(value_url_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_url_type)) {
            const value_url_value  = value_url!
            valueSerializer.writeString(value_url_value)
        }
        const value_tag  = value.tag
        let value_tag_type : int32 = RuntimeType.UNDEFINED
        value_tag_type = runtimeType(value_tag)
        valueSerializer.writeInt8(value_tag_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_tag_type)) {
            const value_tag_value  = value_tag!
            valueSerializer.writeString(value_tag_value)
        }
        const value_params  = value.params
        let value_params_type : int32 = RuntimeType.UNDEFINED
        value_params_type = runtimeType(value_params)
        valueSerializer.writeInt8(value_params_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_params_type)) {
            const value_params_value  = value_params!
            valueSerializer.writeInt32(value_params_value.size as int32 as int32)
            for (const pair of value_params_value) {
                const value_params_value_key = pair[0]
                const value_params_value_value = pair[1]
                valueSerializer.writeString(value_params_value_key)
                valueSerializer.writeString(value_params_value_value)
            }
        }
    }
    writeNativeXComponentParameters(value: NativeXComponentParameters): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeInt32(TypeChecker.XComponentType_ToNumeric(value_type))
        const value_imageAIOptions  = value.imageAIOptions
        let value_imageAIOptions_type : int32 = RuntimeType.UNDEFINED
        value_imageAIOptions_type = runtimeType(value_imageAIOptions)
        valueSerializer.writeInt8(value_imageAIOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_imageAIOptions_type)) {
            const value_imageAIOptions_value  = value_imageAIOptions!
            valueSerializer.writeImageAIOptions(value_imageAIOptions_value)
        }
    }
    writeNavDestinationCommonTitle(value: NavDestinationCommonTitle): void {
        let valueSerializer : Serializer = this
        const value_main  = value.main
        let value_main_type : int32 = RuntimeType.UNDEFINED
        value_main_type = runtimeType(value_main)
        if (RuntimeType.STRING == value_main_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_main_0  = value_main as string
            valueSerializer.writeString(value_main_0)
        }
        else if (RuntimeType.OBJECT == value_main_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_main_1  = value_main as Resource
            valueSerializer.writeResource(value_main_1)
        }
        const value_sub  = value.sub
        let value_sub_type : int32 = RuntimeType.UNDEFINED
        value_sub_type = runtimeType(value_sub)
        if (RuntimeType.STRING == value_sub_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_sub_0  = value_sub as string
            valueSerializer.writeString(value_sub_0)
        }
        else if (RuntimeType.OBJECT == value_sub_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_sub_1  = value_sub as Resource
            valueSerializer.writeResource(value_sub_1)
        }
    }
    writeNavDestinationContext(value: NavDestinationContext): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeNavigationCommonTitle(value: NavigationCommonTitle): void {
        let valueSerializer : Serializer = this
        const value_main  = value.main
        let value_main_type : int32 = RuntimeType.UNDEFINED
        value_main_type = runtimeType(value_main)
        if (RuntimeType.STRING == value_main_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_main_0  = value_main as string
            valueSerializer.writeString(value_main_0)
        }
        else if (RuntimeType.OBJECT == value_main_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_main_1  = value_main as Resource
            valueSerializer.writeResource(value_main_1)
        }
        const value_sub  = value.sub
        let value_sub_type : int32 = RuntimeType.UNDEFINED
        value_sub_type = runtimeType(value_sub)
        if (RuntimeType.STRING == value_sub_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_sub_0  = value_sub as string
            valueSerializer.writeString(value_sub_0)
        }
        else if (RuntimeType.OBJECT == value_sub_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_sub_1  = value_sub as Resource
            valueSerializer.writeResource(value_sub_1)
        }
    }
    writeNavigationMenuItem(value: NavigationMenuItem): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        if (RuntimeType.STRING == value_value_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_value_0  = value_value as string
            valueSerializer.writeString(value_value_0)
        }
        else if (RuntimeType.OBJECT == value_value_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_value_1  = value_value as Resource
            valueSerializer.writeResource(value_value_1)
        }
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            let value_icon_value_type : int32 = RuntimeType.UNDEFINED
            value_icon_value_type = runtimeType(value_icon_value)
            if (RuntimeType.STRING == value_icon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_icon_value_0  = value_icon_value as string
                valueSerializer.writeString(value_icon_value_0)
            }
            else if (RuntimeType.OBJECT == value_icon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_icon_value_1  = value_icon_value as Resource
                valueSerializer.writeResource(value_icon_value_1)
            }
        }
        // TBD: Symbol cannot be realized at present.
        let value_symbolIcon_type : int32 = RuntimeType.UNDEFINED
        valueSerializer.writeInt8(value_symbolIcon_type as int32)
        const value_isEnabled  = value.isEnabled
        let value_isEnabled_type : int32 = RuntimeType.UNDEFINED
        value_isEnabled_type = runtimeType(value_isEnabled)
        valueSerializer.writeInt8(value_isEnabled_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isEnabled_type)) {
            const value_isEnabled_value  = value_isEnabled!
            valueSerializer.writeBoolean(value_isEnabled_value)
        }
        const value_action  = value.action
        let value_action_type : int32 = RuntimeType.UNDEFINED
        value_action_type = runtimeType(value_action)
        valueSerializer.writeInt8(value_action_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_action_type)) {
            const value_action_value  = value_action!
            valueSerializer.holdAndWriteCallback(value_action_value)
        }
    }
    writeNonCurrentDayStyle(value: NonCurrentDayStyle): void {
        let valueSerializer : Serializer = this
        const value_nonCurrentMonthDayColor  = value.nonCurrentMonthDayColor
        let value_nonCurrentMonthDayColor_type : int32 = RuntimeType.UNDEFINED
        value_nonCurrentMonthDayColor_type = runtimeType(value_nonCurrentMonthDayColor)
        valueSerializer.writeInt8(value_nonCurrentMonthDayColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_nonCurrentMonthDayColor_type)) {
            const value_nonCurrentMonthDayColor_value  = value_nonCurrentMonthDayColor!
            let value_nonCurrentMonthDayColor_value_type : int32 = RuntimeType.UNDEFINED
            value_nonCurrentMonthDayColor_value_type = runtimeType(value_nonCurrentMonthDayColor_value)
            if (TypeChecker.isColor(value_nonCurrentMonthDayColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_nonCurrentMonthDayColor_value_0  = value_nonCurrentMonthDayColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_nonCurrentMonthDayColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_nonCurrentMonthDayColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_nonCurrentMonthDayColor_value_1  = value_nonCurrentMonthDayColor_value as number
                valueSerializer.writeNumber(value_nonCurrentMonthDayColor_value_1)
            }
            else if (RuntimeType.STRING == value_nonCurrentMonthDayColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_nonCurrentMonthDayColor_value_2  = value_nonCurrentMonthDayColor_value as string
                valueSerializer.writeString(value_nonCurrentMonthDayColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_nonCurrentMonthDayColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_nonCurrentMonthDayColor_value_3  = value_nonCurrentMonthDayColor_value as Resource
                valueSerializer.writeResource(value_nonCurrentMonthDayColor_value_3)
            }
        }
        const value_nonCurrentMonthLunarColor  = value.nonCurrentMonthLunarColor
        let value_nonCurrentMonthLunarColor_type : int32 = RuntimeType.UNDEFINED
        value_nonCurrentMonthLunarColor_type = runtimeType(value_nonCurrentMonthLunarColor)
        valueSerializer.writeInt8(value_nonCurrentMonthLunarColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_nonCurrentMonthLunarColor_type)) {
            const value_nonCurrentMonthLunarColor_value  = value_nonCurrentMonthLunarColor!
            let value_nonCurrentMonthLunarColor_value_type : int32 = RuntimeType.UNDEFINED
            value_nonCurrentMonthLunarColor_value_type = runtimeType(value_nonCurrentMonthLunarColor_value)
            if (TypeChecker.isColor(value_nonCurrentMonthLunarColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_nonCurrentMonthLunarColor_value_0  = value_nonCurrentMonthLunarColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_nonCurrentMonthLunarColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_nonCurrentMonthLunarColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_nonCurrentMonthLunarColor_value_1  = value_nonCurrentMonthLunarColor_value as number
                valueSerializer.writeNumber(value_nonCurrentMonthLunarColor_value_1)
            }
            else if (RuntimeType.STRING == value_nonCurrentMonthLunarColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_nonCurrentMonthLunarColor_value_2  = value_nonCurrentMonthLunarColor_value as string
                valueSerializer.writeString(value_nonCurrentMonthLunarColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_nonCurrentMonthLunarColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_nonCurrentMonthLunarColor_value_3  = value_nonCurrentMonthLunarColor_value as Resource
                valueSerializer.writeResource(value_nonCurrentMonthLunarColor_value_3)
            }
        }
        const value_nonCurrentMonthWorkDayMarkColor  = value.nonCurrentMonthWorkDayMarkColor
        let value_nonCurrentMonthWorkDayMarkColor_type : int32 = RuntimeType.UNDEFINED
        value_nonCurrentMonthWorkDayMarkColor_type = runtimeType(value_nonCurrentMonthWorkDayMarkColor)
        valueSerializer.writeInt8(value_nonCurrentMonthWorkDayMarkColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_nonCurrentMonthWorkDayMarkColor_type)) {
            const value_nonCurrentMonthWorkDayMarkColor_value  = value_nonCurrentMonthWorkDayMarkColor!
            let value_nonCurrentMonthWorkDayMarkColor_value_type : int32 = RuntimeType.UNDEFINED
            value_nonCurrentMonthWorkDayMarkColor_value_type = runtimeType(value_nonCurrentMonthWorkDayMarkColor_value)
            if (TypeChecker.isColor(value_nonCurrentMonthWorkDayMarkColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_nonCurrentMonthWorkDayMarkColor_value_0  = value_nonCurrentMonthWorkDayMarkColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_nonCurrentMonthWorkDayMarkColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_nonCurrentMonthWorkDayMarkColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_nonCurrentMonthWorkDayMarkColor_value_1  = value_nonCurrentMonthWorkDayMarkColor_value as number
                valueSerializer.writeNumber(value_nonCurrentMonthWorkDayMarkColor_value_1)
            }
            else if (RuntimeType.STRING == value_nonCurrentMonthWorkDayMarkColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_nonCurrentMonthWorkDayMarkColor_value_2  = value_nonCurrentMonthWorkDayMarkColor_value as string
                valueSerializer.writeString(value_nonCurrentMonthWorkDayMarkColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_nonCurrentMonthWorkDayMarkColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_nonCurrentMonthWorkDayMarkColor_value_3  = value_nonCurrentMonthWorkDayMarkColor_value as Resource
                valueSerializer.writeResource(value_nonCurrentMonthWorkDayMarkColor_value_3)
            }
        }
        const value_nonCurrentMonthOffDayMarkColor  = value.nonCurrentMonthOffDayMarkColor
        let value_nonCurrentMonthOffDayMarkColor_type : int32 = RuntimeType.UNDEFINED
        value_nonCurrentMonthOffDayMarkColor_type = runtimeType(value_nonCurrentMonthOffDayMarkColor)
        valueSerializer.writeInt8(value_nonCurrentMonthOffDayMarkColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_nonCurrentMonthOffDayMarkColor_type)) {
            const value_nonCurrentMonthOffDayMarkColor_value  = value_nonCurrentMonthOffDayMarkColor!
            let value_nonCurrentMonthOffDayMarkColor_value_type : int32 = RuntimeType.UNDEFINED
            value_nonCurrentMonthOffDayMarkColor_value_type = runtimeType(value_nonCurrentMonthOffDayMarkColor_value)
            if (TypeChecker.isColor(value_nonCurrentMonthOffDayMarkColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_nonCurrentMonthOffDayMarkColor_value_0  = value_nonCurrentMonthOffDayMarkColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_nonCurrentMonthOffDayMarkColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_nonCurrentMonthOffDayMarkColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_nonCurrentMonthOffDayMarkColor_value_1  = value_nonCurrentMonthOffDayMarkColor_value as number
                valueSerializer.writeNumber(value_nonCurrentMonthOffDayMarkColor_value_1)
            }
            else if (RuntimeType.STRING == value_nonCurrentMonthOffDayMarkColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_nonCurrentMonthOffDayMarkColor_value_2  = value_nonCurrentMonthOffDayMarkColor_value as string
                valueSerializer.writeString(value_nonCurrentMonthOffDayMarkColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_nonCurrentMonthOffDayMarkColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_nonCurrentMonthOffDayMarkColor_value_3  = value_nonCurrentMonthOffDayMarkColor_value as Resource
                valueSerializer.writeResource(value_nonCurrentMonthOffDayMarkColor_value_3)
            }
        }
    }
    writeOffscreenCanvasRenderingContext2D(value: OffscreenCanvasRenderingContext2D): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeOverlayOptions(value: OverlayOptions): void {
        let valueSerializer : Serializer = this
        const value_align  = value.align
        let value_align_type : int32 = RuntimeType.UNDEFINED
        value_align_type = runtimeType(value_align)
        valueSerializer.writeInt8(value_align_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_align_type)) {
            const value_align_value  = (value_align as Alignment)
            valueSerializer.writeInt32(TypeChecker.Alignment_ToNumeric(value_align_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeOverlayOffset(value_offset_value)
        }
    }
    writePanGestureEvent(value: PanGestureEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeParagraphStyle(value: ParagraphStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeParagraphStyleInterface(value: ParagraphStyleInterface): void {
        let valueSerializer : Serializer = this
        const value_textAlign  = value.textAlign
        let value_textAlign_type : int32 = RuntimeType.UNDEFINED
        value_textAlign_type = runtimeType(value_textAlign)
        valueSerializer.writeInt8(value_textAlign_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textAlign_type)) {
            const value_textAlign_value  = (value_textAlign as TextAlign)
            valueSerializer.writeInt32(TypeChecker.TextAlign_ToNumeric(value_textAlign_value))
        }
        const value_textIndent  = value.textIndent
        let value_textIndent_type : int32 = RuntimeType.UNDEFINED
        value_textIndent_type = runtimeType(value_textIndent)
        valueSerializer.writeInt8(value_textIndent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textIndent_type)) {
            const value_textIndent_value  = value_textIndent!
            valueSerializer.writeLengthMetrics(value_textIndent_value)
        }
        const value_maxLines  = value.maxLines
        let value_maxLines_type : int32 = RuntimeType.UNDEFINED
        value_maxLines_type = runtimeType(value_maxLines)
        valueSerializer.writeInt8(value_maxLines_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxLines_type)) {
            const value_maxLines_value  = value_maxLines!
            valueSerializer.writeNumber(value_maxLines_value)
        }
        const value_overflow  = value.overflow
        let value_overflow_type : int32 = RuntimeType.UNDEFINED
        value_overflow_type = runtimeType(value_overflow)
        valueSerializer.writeInt8(value_overflow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_overflow_type)) {
            const value_overflow_value  = (value_overflow as TextOverflow)
            valueSerializer.writeInt32(TypeChecker.TextOverflow_ToNumeric(value_overflow_value))
        }
        const value_wordBreak  = value.wordBreak
        let value_wordBreak_type : int32 = RuntimeType.UNDEFINED
        value_wordBreak_type = runtimeType(value_wordBreak)
        valueSerializer.writeInt8(value_wordBreak_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_wordBreak_type)) {
            const value_wordBreak_value  = (value_wordBreak as WordBreak)
            valueSerializer.writeInt32(TypeChecker.WordBreak_ToNumeric(value_wordBreak_value))
        }
        const value_leadingMargin  = value.leadingMargin
        let value_leadingMargin_type : int32 = RuntimeType.UNDEFINED
        value_leadingMargin_type = runtimeType(value_leadingMargin)
        valueSerializer.writeInt8(value_leadingMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_leadingMargin_type)) {
            const value_leadingMargin_value  = value_leadingMargin!
            let value_leadingMargin_value_type : int32 = RuntimeType.UNDEFINED
            value_leadingMargin_value_type = runtimeType(value_leadingMargin_value)
            if (TypeChecker.isLengthMetrics(value_leadingMargin_value, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_leadingMargin_value_0  = value_leadingMargin_value as LengthMetrics
                valueSerializer.writeLengthMetrics(value_leadingMargin_value_0)
            }
            else if (TypeChecker.isLeadingMarginPlaceholder(value_leadingMargin_value, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_leadingMargin_value_1  = value_leadingMargin_value as LeadingMarginPlaceholder
                valueSerializer.writeLeadingMarginPlaceholder(value_leadingMargin_value_1)
            }
        }
        const value_paragraphSpacing  = value.paragraphSpacing
        let value_paragraphSpacing_type : int32 = RuntimeType.UNDEFINED
        value_paragraphSpacing_type = runtimeType(value_paragraphSpacing)
        valueSerializer.writeInt8(value_paragraphSpacing_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_paragraphSpacing_type)) {
            const value_paragraphSpacing_value  = value_paragraphSpacing!
            valueSerializer.writeLengthMetrics(value_paragraphSpacing_value)
        }
    }
    writePasswordIcon(value: PasswordIcon): void {
        let valueSerializer : Serializer = this
        const value_onIconSrc  = value.onIconSrc
        let value_onIconSrc_type : int32 = RuntimeType.UNDEFINED
        value_onIconSrc_type = runtimeType(value_onIconSrc)
        valueSerializer.writeInt8(value_onIconSrc_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onIconSrc_type)) {
            const value_onIconSrc_value  = value_onIconSrc!
            let value_onIconSrc_value_type : int32 = RuntimeType.UNDEFINED
            value_onIconSrc_value_type = runtimeType(value_onIconSrc_value)
            if (RuntimeType.STRING == value_onIconSrc_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_onIconSrc_value_0  = value_onIconSrc_value as string
                valueSerializer.writeString(value_onIconSrc_value_0)
            }
            else if (RuntimeType.OBJECT == value_onIconSrc_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_onIconSrc_value_1  = value_onIconSrc_value as Resource
                valueSerializer.writeResource(value_onIconSrc_value_1)
            }
        }
        const value_offIconSrc  = value.offIconSrc
        let value_offIconSrc_type : int32 = RuntimeType.UNDEFINED
        value_offIconSrc_type = runtimeType(value_offIconSrc)
        valueSerializer.writeInt8(value_offIconSrc_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offIconSrc_type)) {
            const value_offIconSrc_value  = value_offIconSrc!
            let value_offIconSrc_value_type : int32 = RuntimeType.UNDEFINED
            value_offIconSrc_value_type = runtimeType(value_offIconSrc_value)
            if (RuntimeType.STRING == value_offIconSrc_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_offIconSrc_value_0  = value_offIconSrc_value as string
                valueSerializer.writeString(value_offIconSrc_value_0)
            }
            else if (RuntimeType.OBJECT == value_offIconSrc_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offIconSrc_value_1  = value_offIconSrc_value as Resource
                valueSerializer.writeResource(value_offIconSrc_value_1)
            }
        }
    }
    writePickerDialogButtonStyle(value: PickerDialogButtonStyle): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = (value_type as ButtonType)
            valueSerializer.writeInt32(TypeChecker.ButtonType_ToNumeric(value_type_value))
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as ButtonStyleMode)
            valueSerializer.writeInt32(TypeChecker.ButtonStyleMode_ToNumeric(value_style_value))
        }
        const value_role  = value.role
        let value_role_type : int32 = RuntimeType.UNDEFINED
        value_role_type = runtimeType(value_role)
        valueSerializer.writeInt8(value_role_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_role_type)) {
            const value_role_value  = (value_role as ButtonRole)
            valueSerializer.writeInt32(TypeChecker.ButtonRole_ToNumeric(value_role_value))
        }
        const value_fontSize  = value.fontSize
        let value_fontSize_type : int32 = RuntimeType.UNDEFINED
        value_fontSize_type = runtimeType(value_fontSize)
        valueSerializer.writeInt8(value_fontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontSize_type)) {
            const value_fontSize_value  = value_fontSize!
            valueSerializer.writeLength(value_fontSize_value)
        }
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        valueSerializer.writeInt8(value_fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontColor_type)) {
            const value_fontColor_value  = value_fontColor!
            let value_fontColor_value_type : int32 = RuntimeType.UNDEFINED
            value_fontColor_value_type = runtimeType(value_fontColor_value)
            if (TypeChecker.isColor(value_fontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontColor_value_0  = value_fontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontColor_value_1  = value_fontColor_value as number
                valueSerializer.writeNumber(value_fontColor_value_1)
            }
            else if (RuntimeType.STRING == value_fontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontColor_value_2  = value_fontColor_value as string
                valueSerializer.writeString(value_fontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontColor_value_3  = value_fontColor_value as Resource
                valueSerializer.writeResource(value_fontColor_value_3)
            }
        }
        const value_fontWeight  = value.fontWeight
        let value_fontWeight_type : int32 = RuntimeType.UNDEFINED
        value_fontWeight_type = runtimeType(value_fontWeight)
        valueSerializer.writeInt8(value_fontWeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontWeight_type)) {
            const value_fontWeight_value  = value_fontWeight!
            let value_fontWeight_value_type : int32 = RuntimeType.UNDEFINED
            value_fontWeight_value_type = runtimeType(value_fontWeight_value)
            if (TypeChecker.isFontWeight(value_fontWeight_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontWeight_value_0  = value_fontWeight_value as FontWeight
                valueSerializer.writeInt32(TypeChecker.FontWeight_ToNumeric(value_fontWeight_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontWeight_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontWeight_value_1  = value_fontWeight_value as number
                valueSerializer.writeNumber(value_fontWeight_value_1)
            }
            else if (RuntimeType.STRING == value_fontWeight_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontWeight_value_2  = value_fontWeight_value as string
                valueSerializer.writeString(value_fontWeight_value_2)
            }
        }
        const value_fontStyle  = value.fontStyle
        let value_fontStyle_type : int32 = RuntimeType.UNDEFINED
        value_fontStyle_type = runtimeType(value_fontStyle)
        valueSerializer.writeInt8(value_fontStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontStyle_type)) {
            const value_fontStyle_value  = (value_fontStyle as FontStyle)
            valueSerializer.writeInt32(TypeChecker.FontStyle_ToNumeric(value_fontStyle_value))
        }
        const value_fontFamily  = value.fontFamily
        let value_fontFamily_type : int32 = RuntimeType.UNDEFINED
        value_fontFamily_type = runtimeType(value_fontFamily)
        valueSerializer.writeInt8(value_fontFamily_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontFamily_type)) {
            const value_fontFamily_value  = value_fontFamily!
            let value_fontFamily_value_type : int32 = RuntimeType.UNDEFINED
            value_fontFamily_value_type = runtimeType(value_fontFamily_value)
            if (RuntimeType.OBJECT == value_fontFamily_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontFamily_value_0  = value_fontFamily_value as Resource
                valueSerializer.writeResource(value_fontFamily_value_0)
            }
            else if (RuntimeType.STRING == value_fontFamily_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontFamily_value_1  = value_fontFamily_value as string
                valueSerializer.writeString(value_fontFamily_value_1)
            }
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_borderRadius  = value.borderRadius
        let value_borderRadius_type : int32 = RuntimeType.UNDEFINED
        value_borderRadius_type = runtimeType(value_borderRadius)
        valueSerializer.writeInt8(value_borderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderRadius_type)) {
            const value_borderRadius_value  = value_borderRadius!
            let value_borderRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_borderRadius_value_type = runtimeType(value_borderRadius_value)
            if (((RuntimeType.NUMBER) == (value_borderRadius_value_type)) || ((RuntimeType.STRING) == (value_borderRadius_value_type)) || (((RuntimeType.OBJECT) == (value_borderRadius_value_type)) && (TypeChecker.isResource(value_borderRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderRadius_value_0  = value_borderRadius_value as Length
                valueSerializer.writeLength(value_borderRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_borderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderRadius_value_1  = value_borderRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_borderRadius_value_1)
            }
        }
        const value_primary  = value.primary
        let value_primary_type : int32 = RuntimeType.UNDEFINED
        value_primary_type = runtimeType(value_primary)
        valueSerializer.writeInt8(value_primary_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_primary_type)) {
            const value_primary_value  = value_primary!
            valueSerializer.writeBoolean(value_primary_value)
        }
    }
    writePinchGestureEvent(value: PinchGestureEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writePluginComponentOptions(value: PluginComponentOptions): void {
        let valueSerializer : Serializer = this
        const value_template  = value.template
        valueSerializer.writePluginComponentTemplate(value_template)
        const value_data  = value.data
        valueSerializer.writeString(value_data == undefined || value_data == null ? '' : JSON.stringify(value_data));
    }
    writeRadioStyle(value: RadioStyle): void {
        let valueSerializer : Serializer = this
        const value_checkedBackgroundColor  = value.checkedBackgroundColor
        let value_checkedBackgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_checkedBackgroundColor_type = runtimeType(value_checkedBackgroundColor)
        valueSerializer.writeInt8(value_checkedBackgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_checkedBackgroundColor_type)) {
            const value_checkedBackgroundColor_value  = value_checkedBackgroundColor!
            let value_checkedBackgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_checkedBackgroundColor_value_type = runtimeType(value_checkedBackgroundColor_value)
            if (TypeChecker.isColor(value_checkedBackgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_checkedBackgroundColor_value_0  = value_checkedBackgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_checkedBackgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_checkedBackgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_checkedBackgroundColor_value_1  = value_checkedBackgroundColor_value as number
                valueSerializer.writeNumber(value_checkedBackgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_checkedBackgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_checkedBackgroundColor_value_2  = value_checkedBackgroundColor_value as string
                valueSerializer.writeString(value_checkedBackgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_checkedBackgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_checkedBackgroundColor_value_3  = value_checkedBackgroundColor_value as Resource
                valueSerializer.writeResource(value_checkedBackgroundColor_value_3)
            }
        }
        const value_uncheckedBorderColor  = value.uncheckedBorderColor
        let value_uncheckedBorderColor_type : int32 = RuntimeType.UNDEFINED
        value_uncheckedBorderColor_type = runtimeType(value_uncheckedBorderColor)
        valueSerializer.writeInt8(value_uncheckedBorderColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_uncheckedBorderColor_type)) {
            const value_uncheckedBorderColor_value  = value_uncheckedBorderColor!
            let value_uncheckedBorderColor_value_type : int32 = RuntimeType.UNDEFINED
            value_uncheckedBorderColor_value_type = runtimeType(value_uncheckedBorderColor_value)
            if (TypeChecker.isColor(value_uncheckedBorderColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_uncheckedBorderColor_value_0  = value_uncheckedBorderColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_uncheckedBorderColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_uncheckedBorderColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_uncheckedBorderColor_value_1  = value_uncheckedBorderColor_value as number
                valueSerializer.writeNumber(value_uncheckedBorderColor_value_1)
            }
            else if (RuntimeType.STRING == value_uncheckedBorderColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_uncheckedBorderColor_value_2  = value_uncheckedBorderColor_value as string
                valueSerializer.writeString(value_uncheckedBorderColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_uncheckedBorderColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_uncheckedBorderColor_value_3  = value_uncheckedBorderColor_value as Resource
                valueSerializer.writeResource(value_uncheckedBorderColor_value_3)
            }
        }
        const value_indicatorColor  = value.indicatorColor
        let value_indicatorColor_type : int32 = RuntimeType.UNDEFINED
        value_indicatorColor_type = runtimeType(value_indicatorColor)
        valueSerializer.writeInt8(value_indicatorColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_indicatorColor_type)) {
            const value_indicatorColor_value  = value_indicatorColor!
            let value_indicatorColor_value_type : int32 = RuntimeType.UNDEFINED
            value_indicatorColor_value_type = runtimeType(value_indicatorColor_value)
            if (TypeChecker.isColor(value_indicatorColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_indicatorColor_value_0  = value_indicatorColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_indicatorColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_indicatorColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_indicatorColor_value_1  = value_indicatorColor_value as number
                valueSerializer.writeNumber(value_indicatorColor_value_1)
            }
            else if (RuntimeType.STRING == value_indicatorColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_indicatorColor_value_2  = value_indicatorColor_value as string
                valueSerializer.writeString(value_indicatorColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_indicatorColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_indicatorColor_value_3  = value_indicatorColor_value as Resource
                valueSerializer.writeResource(value_indicatorColor_value_3)
            }
        }
    }
    writeRectOptions(value: RectOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_0)
            }
            else if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as string
                valueSerializer.writeString(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_0)
            }
            else if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as string
                valueSerializer.writeString(value_height_value_1)
            }
        }
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            let value_radius_value_type : int32 = RuntimeType.UNDEFINED
            value_radius_value_type = runtimeType(value_radius_value)
            if (((RuntimeType.NUMBER) == (value_radius_value_type)) || ((RuntimeType.STRING) == (value_radius_value_type)) || (((RuntimeType.OBJECT) == (value_radius_value_type)) && (TypeChecker.isResource(value_radius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_radius_value_0  = value_radius_value as Length
                valueSerializer.writeLength(value_radius_value_0)
            }
            else if (((RuntimeType.OBJECT) == (value_radius_value_type)) && (Array.isArray(value_radius_value))) {
                valueSerializer.writeInt8(1 as int32)
                const value_radius_value_1  = value_radius_value as Array<RadiusItem>
                valueSerializer.writeInt32(value_radius_value_1.length as int32)
                for (let i = 0; i < value_radius_value_1.length; i++) {
                    const value_radius_value_1_element : RadiusItem = value_radius_value_1[i]
                    const value_radius_value_1_element_0  = value_radius_value_1_element[0]
                    valueSerializer.writeLength(value_radius_value_1_element_0)
                    const value_radius_value_1_element_1  = value_radius_value_1_element[1]
                    valueSerializer.writeLength(value_radius_value_1_element_1)
                }
            }
        }
    }
    writeRectShapeOptions(value: RectShapeOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (RuntimeType.NUMBER == value_width_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as number
                valueSerializer.writeNumber(value_width_value_0)
            }
            else if (RuntimeType.STRING == value_width_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as string
                valueSerializer.writeString(value_width_value_1)
            }
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (RuntimeType.NUMBER == value_height_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as number
                valueSerializer.writeNumber(value_height_value_0)
            }
            else if (RuntimeType.STRING == value_height_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as string
                valueSerializer.writeString(value_height_value_1)
            }
        }
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            let value_radius_value_type : int32 = RuntimeType.UNDEFINED
            value_radius_value_type = runtimeType(value_radius_value)
            if (RuntimeType.NUMBER == value_radius_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_radius_value_0  = value_radius_value as number
                valueSerializer.writeNumber(value_radius_value_0)
            }
            else if (RuntimeType.STRING == value_radius_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_radius_value_1  = value_radius_value as string
                valueSerializer.writeString(value_radius_value_1)
            }
            else if (RuntimeType.OBJECT == value_radius_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_radius_value_2  = value_radius_value as Array<number | string>
                valueSerializer.writeInt32(value_radius_value_2.length as int32)
                for (let i = 0; i < value_radius_value_2.length; i++) {
                    const value_radius_value_2_element : number | string = value_radius_value_2[i]
                    let value_radius_value_2_element_type : int32 = RuntimeType.UNDEFINED
                    value_radius_value_2_element_type = runtimeType(value_radius_value_2_element)
                    if (RuntimeType.NUMBER == value_radius_value_2_element_type) {
                        valueSerializer.writeInt8(0 as int32)
                        const value_radius_value_2_element_0  = value_radius_value_2_element as number
                        valueSerializer.writeNumber(value_radius_value_2_element_0)
                    }
                    else if (RuntimeType.STRING == value_radius_value_2_element_type) {
                        valueSerializer.writeInt8(1 as int32)
                        const value_radius_value_2_element_1  = value_radius_value_2_element as string
                        valueSerializer.writeString(value_radius_value_2_element_1)
                    }
                }
            }
        }
    }
    writeRefreshOptions(value: RefreshOptions): void {
        let valueSerializer : Serializer = this
        const value_refreshing  = value.refreshing
        valueSerializer.writeBoolean(value_refreshing)
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            let value_offset_value_type : int32 = RuntimeType.UNDEFINED
            value_offset_value_type = runtimeType(value_offset_value)
            if (RuntimeType.NUMBER == value_offset_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_offset_value_0  = value_offset_value as number
                valueSerializer.writeNumber(value_offset_value_0)
            }
            else if (RuntimeType.STRING == value_offset_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offset_value_1  = value_offset_value as string
                valueSerializer.writeString(value_offset_value_1)
            }
        }
        const value_friction  = value.friction
        let value_friction_type : int32 = RuntimeType.UNDEFINED
        value_friction_type = runtimeType(value_friction)
        valueSerializer.writeInt8(value_friction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_friction_type)) {
            const value_friction_value  = value_friction!
            let value_friction_value_type : int32 = RuntimeType.UNDEFINED
            value_friction_value_type = runtimeType(value_friction_value)
            if (RuntimeType.NUMBER == value_friction_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_friction_value_0  = value_friction_value as number
                valueSerializer.writeNumber(value_friction_value_0)
            }
            else if (RuntimeType.STRING == value_friction_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_friction_value_1  = value_friction_value as string
                valueSerializer.writeString(value_friction_value_1)
            }
        }
        const value_promptText  = value.promptText
        let value_promptText_type : int32 = RuntimeType.UNDEFINED
        value_promptText_type = runtimeType(value_promptText)
        valueSerializer.writeInt8(value_promptText_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_promptText_type)) {
            const value_promptText_value  = value_promptText!
            let value_promptText_value_type : int32 = RuntimeType.UNDEFINED
            value_promptText_value_type = runtimeType(value_promptText_value)
            if (RuntimeType.STRING == value_promptText_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_promptText_value_0  = value_promptText_value as string
                valueSerializer.writeString(value_promptText_value_0)
            }
            else if (RuntimeType.OBJECT == value_promptText_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_promptText_value_1  = value_promptText_value as Resource
                valueSerializer.writeResource(value_promptText_value_1)
            }
        }
        const value_builder  = value.builder
        let value_builder_type : int32 = RuntimeType.UNDEFINED
        value_builder_type = runtimeType(value_builder)
        valueSerializer.writeInt8(value_builder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_builder_type)) {
            const value_builder_value  = value_builder!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_builder_value))
        }
        const value_refreshingContent  = undefined
        let value_refreshingContent_type : int32 = RuntimeType.UNDEFINED
        value_refreshingContent_type = runtimeType(value_refreshingContent)
        valueSerializer.writeInt8(value_refreshingContent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_refreshingContent_type)) {
            const value_refreshingContent_value  = value_refreshingContent!
            valueSerializer.writeComponentContent(value_refreshingContent_value)
        }
    }
    writeResizableOptions(value: ResizableOptions): void {
        let valueSerializer : Serializer = this
        const value_slice  = value.slice
        let value_slice_type : int32 = RuntimeType.UNDEFINED
        value_slice_type = runtimeType(value_slice)
        valueSerializer.writeInt8(value_slice_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_slice_type)) {
            const value_slice_value  = value_slice!
            valueSerializer.writeEdgeWidths(value_slice_value)
        }
        const value_lattice  = value.lattice
        let value_lattice_type : int32 = RuntimeType.UNDEFINED
        value_lattice_type = runtimeType(value_lattice)
        valueSerializer.writeInt8(value_lattice_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lattice_type)) {
            const value_lattice_value  = value_lattice!
            valueSerializer.writeDrawingLattice(value_lattice_value)
        }
    }
    writeRestrictedWorker(value: RestrictedWorker): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeReuseOptions(value: ReuseOptions): void {
        let valueSerializer : Serializer = this
        const value_reuseId  = value.reuseId
        let value_reuseId_type : int32 = RuntimeType.UNDEFINED
        value_reuseId_type = runtimeType(value_reuseId)
        valueSerializer.writeInt8(value_reuseId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_reuseId_type)) {
            const value_reuseId_value  = value_reuseId!
            valueSerializer.holdAndWriteCallback(value_reuseId_value)
        }
    }
    writeRichEditorBuilderSpanOptions(value: RichEditorBuilderSpanOptions): void {
        let valueSerializer : Serializer = this
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeNumber(value_offset_value)
        }
        const value_dragBackgroundColor  = value.dragBackgroundColor
        let value_dragBackgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_dragBackgroundColor_type = runtimeType(value_dragBackgroundColor)
        valueSerializer.writeInt8(value_dragBackgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dragBackgroundColor_type)) {
            const value_dragBackgroundColor_value  = value_dragBackgroundColor!
            valueSerializer.writeColorMetrics(value_dragBackgroundColor_value)
        }
        const value_isDragShadowNeeded  = value.isDragShadowNeeded
        let value_isDragShadowNeeded_type : int32 = RuntimeType.UNDEFINED
        value_isDragShadowNeeded_type = runtimeType(value_isDragShadowNeeded)
        valueSerializer.writeInt8(value_isDragShadowNeeded_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isDragShadowNeeded_type)) {
            const value_isDragShadowNeeded_value  = value_isDragShadowNeeded!
            valueSerializer.writeBoolean(value_isDragShadowNeeded_value)
        }
    }
    writeRichEditorChangeValue(value: RichEditorChangeValue): void {
        let valueSerializer : Serializer = this
        const value_rangeBefore  = value.rangeBefore
        valueSerializer.writeTextRange(value_rangeBefore)
        const value_replacedSpans  = value.replacedSpans
        valueSerializer.writeInt32(value_replacedSpans.length as int32)
        for (let i = 0; i < value_replacedSpans.length; i++) {
            const value_replacedSpans_element : RichEditorTextSpanResult = value_replacedSpans[i]
            valueSerializer.writeRichEditorTextSpanResult(value_replacedSpans_element)
        }
        const value_replacedImageSpans  = value.replacedImageSpans
        valueSerializer.writeInt32(value_replacedImageSpans.length as int32)
        for (let i = 0; i < value_replacedImageSpans.length; i++) {
            const value_replacedImageSpans_element : RichEditorImageSpanResult = value_replacedImageSpans[i]
            valueSerializer.writeRichEditorImageSpanResult(value_replacedImageSpans_element)
        }
        const value_replacedSymbolSpans  = value.replacedSymbolSpans
        valueSerializer.writeInt32(value_replacedSymbolSpans.length as int32)
        for (let i = 0; i < value_replacedSymbolSpans.length; i++) {
            const value_replacedSymbolSpans_element : RichEditorTextSpanResult = value_replacedSymbolSpans[i]
            valueSerializer.writeRichEditorTextSpanResult(value_replacedSymbolSpans_element)
        }
    }
    writeRichEditorLayoutStyle(value: RichEditorLayoutStyle): void {
        let valueSerializer : Serializer = this
        const value_margin  = value.margin
        let value_margin_type : int32 = RuntimeType.UNDEFINED
        value_margin_type = runtimeType(value_margin)
        valueSerializer.writeInt8(value_margin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_margin_type)) {
            const value_margin_value  = value_margin!
            let value_margin_value_type : int32 = RuntimeType.UNDEFINED
            value_margin_value_type = runtimeType(value_margin_value)
            if (((RuntimeType.NUMBER) == (value_margin_value_type)) || ((RuntimeType.STRING) == (value_margin_value_type)) || (((RuntimeType.OBJECT) == (value_margin_value_type)) && (TypeChecker.isResource(value_margin_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_margin_value_0  = value_margin_value as Dimension
                valueSerializer.writeLength(value_margin_value_0)
            }
            else if (TypeChecker.isPadding(value_margin_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_margin_value_1  = value_margin_value as Padding
                valueSerializer.writePadding(value_margin_value_1)
            }
        }
        const value_borderRadius  = value.borderRadius
        let value_borderRadius_type : int32 = RuntimeType.UNDEFINED
        value_borderRadius_type = runtimeType(value_borderRadius)
        valueSerializer.writeInt8(value_borderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderRadius_type)) {
            const value_borderRadius_value  = value_borderRadius!
            let value_borderRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_borderRadius_value_type = runtimeType(value_borderRadius_value)
            if (((RuntimeType.NUMBER) == (value_borderRadius_value_type)) || ((RuntimeType.STRING) == (value_borderRadius_value_type)) || (((RuntimeType.OBJECT) == (value_borderRadius_value_type)) && (TypeChecker.isResource(value_borderRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderRadius_value_0  = value_borderRadius_value as Dimension
                valueSerializer.writeLength(value_borderRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_borderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderRadius_value_1  = value_borderRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_borderRadius_value_1)
            }
        }
    }
    writeRichEditorParagraphStyle(value: RichEditorParagraphStyle): void {
        let valueSerializer : Serializer = this
        const value_textAlign  = value.textAlign
        let value_textAlign_type : int32 = RuntimeType.UNDEFINED
        value_textAlign_type = runtimeType(value_textAlign)
        valueSerializer.writeInt8(value_textAlign_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textAlign_type)) {
            const value_textAlign_value  = (value_textAlign as TextAlign)
            valueSerializer.writeInt32(TypeChecker.TextAlign_ToNumeric(value_textAlign_value))
        }
        const value_leadingMargin  = value.leadingMargin
        let value_leadingMargin_type : int32 = RuntimeType.UNDEFINED
        value_leadingMargin_type = runtimeType(value_leadingMargin)
        valueSerializer.writeInt8(value_leadingMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_leadingMargin_type)) {
            const value_leadingMargin_value  = value_leadingMargin!
            let value_leadingMargin_value_type : int32 = RuntimeType.UNDEFINED
            value_leadingMargin_value_type = runtimeType(value_leadingMargin_value)
            if (((RuntimeType.NUMBER) == (value_leadingMargin_value_type)) || ((RuntimeType.STRING) == (value_leadingMargin_value_type)) || (((RuntimeType.OBJECT) == (value_leadingMargin_value_type)) && (TypeChecker.isResource(value_leadingMargin_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_leadingMargin_value_0  = value_leadingMargin_value as Dimension
                valueSerializer.writeLength(value_leadingMargin_value_0)
            }
            else if (TypeChecker.isLeadingMarginPlaceholder(value_leadingMargin_value, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_leadingMargin_value_1  = value_leadingMargin_value as LeadingMarginPlaceholder
                valueSerializer.writeLeadingMarginPlaceholder(value_leadingMargin_value_1)
            }
        }
        const value_wordBreak  = value.wordBreak
        let value_wordBreak_type : int32 = RuntimeType.UNDEFINED
        value_wordBreak_type = runtimeType(value_wordBreak)
        valueSerializer.writeInt8(value_wordBreak_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_wordBreak_type)) {
            const value_wordBreak_value  = (value_wordBreak as WordBreak)
            valueSerializer.writeInt32(TypeChecker.WordBreak_ToNumeric(value_wordBreak_value))
        }
        const value_lineBreakStrategy  = value.lineBreakStrategy
        let value_lineBreakStrategy_type : int32 = RuntimeType.UNDEFINED
        value_lineBreakStrategy_type = runtimeType(value_lineBreakStrategy)
        valueSerializer.writeInt8(value_lineBreakStrategy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lineBreakStrategy_type)) {
            const value_lineBreakStrategy_value  = (value_lineBreakStrategy as LineBreakStrategy)
            valueSerializer.writeInt32(TypeChecker.LineBreakStrategy_ToNumeric(value_lineBreakStrategy_value))
        }
        const value_paragraphSpacing  = value.paragraphSpacing
        let value_paragraphSpacing_type : int32 = RuntimeType.UNDEFINED
        value_paragraphSpacing_type = runtimeType(value_paragraphSpacing)
        valueSerializer.writeInt8(value_paragraphSpacing_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_paragraphSpacing_type)) {
            const value_paragraphSpacing_value  = value_paragraphSpacing!
            valueSerializer.writeNumber(value_paragraphSpacing_value)
        }
    }
    writeRichEditorParagraphStyleOptions(value: RichEditorParagraphStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeNumber(value_start_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeNumber(value_end_value)
        }
        const value_style  = value.style
        valueSerializer.writeRichEditorParagraphStyle(value_style)
    }
    writeRichEditorSymbolSpanStyle(value: RichEditorSymbolSpanStyle): void {
        let valueSerializer : Serializer = this
        const value_fontSize  = value.fontSize
        let value_fontSize_type : int32 = RuntimeType.UNDEFINED
        value_fontSize_type = runtimeType(value_fontSize)
        valueSerializer.writeInt8(value_fontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontSize_type)) {
            const value_fontSize_value  = value_fontSize!
            let value_fontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_fontSize_value_type = runtimeType(value_fontSize_value)
            if (RuntimeType.NUMBER == value_fontSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontSize_value_0  = value_fontSize_value as number
                valueSerializer.writeNumber(value_fontSize_value_0)
            }
            else if (RuntimeType.STRING == value_fontSize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontSize_value_1  = value_fontSize_value as string
                valueSerializer.writeString(value_fontSize_value_1)
            }
            else if (RuntimeType.OBJECT == value_fontSize_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontSize_value_2  = value_fontSize_value as Resource
                valueSerializer.writeResource(value_fontSize_value_2)
            }
        }
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        valueSerializer.writeInt8(value_fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontColor_type)) {
            const value_fontColor_value  = value_fontColor!
            valueSerializer.writeInt32(value_fontColor_value.length as int32)
            for (let i = 0; i < value_fontColor_value.length; i++) {
                const value_fontColor_value_element : ResourceColor = value_fontColor_value[i]
                let value_fontColor_value_element_type : int32 = RuntimeType.UNDEFINED
                value_fontColor_value_element_type = runtimeType(value_fontColor_value_element)
                if (TypeChecker.isColor(value_fontColor_value_element)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_fontColor_value_element_0  = value_fontColor_value_element as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_value_element_0))
                }
                else if (RuntimeType.NUMBER == value_fontColor_value_element_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_fontColor_value_element_1  = value_fontColor_value_element as number
                    valueSerializer.writeNumber(value_fontColor_value_element_1)
                }
                else if (RuntimeType.STRING == value_fontColor_value_element_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_fontColor_value_element_2  = value_fontColor_value_element as string
                    valueSerializer.writeString(value_fontColor_value_element_2)
                }
                else if (RuntimeType.OBJECT == value_fontColor_value_element_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_fontColor_value_element_3  = value_fontColor_value_element as Resource
                    valueSerializer.writeResource(value_fontColor_value_element_3)
                }
            }
        }
        const value_fontWeight  = value.fontWeight
        let value_fontWeight_type : int32 = RuntimeType.UNDEFINED
        value_fontWeight_type = runtimeType(value_fontWeight)
        valueSerializer.writeInt8(value_fontWeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontWeight_type)) {
            const value_fontWeight_value  = value_fontWeight!
            let value_fontWeight_value_type : int32 = RuntimeType.UNDEFINED
            value_fontWeight_value_type = runtimeType(value_fontWeight_value)
            if (RuntimeType.NUMBER == value_fontWeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontWeight_value_0  = value_fontWeight_value as number
                valueSerializer.writeNumber(value_fontWeight_value_0)
            }
            else if (TypeChecker.isFontWeight(value_fontWeight_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontWeight_value_1  = value_fontWeight_value as FontWeight
                valueSerializer.writeInt32(TypeChecker.FontWeight_ToNumeric(value_fontWeight_value_1))
            }
            else if (RuntimeType.STRING == value_fontWeight_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontWeight_value_2  = value_fontWeight_value as string
                valueSerializer.writeString(value_fontWeight_value_2)
            }
        }
        const value_effectStrategy  = value.effectStrategy
        let value_effectStrategy_type : int32 = RuntimeType.UNDEFINED
        value_effectStrategy_type = runtimeType(value_effectStrategy)
        valueSerializer.writeInt8(value_effectStrategy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_effectStrategy_type)) {
            const value_effectStrategy_value  = (value_effectStrategy as SymbolEffectStrategy)
            valueSerializer.writeInt32(TypeChecker.SymbolEffectStrategy_ToNumeric(value_effectStrategy_value))
        }
        const value_renderingStrategy  = value.renderingStrategy
        let value_renderingStrategy_type : int32 = RuntimeType.UNDEFINED
        value_renderingStrategy_type = runtimeType(value_renderingStrategy)
        valueSerializer.writeInt8(value_renderingStrategy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_renderingStrategy_type)) {
            const value_renderingStrategy_value  = (value_renderingStrategy as SymbolRenderingStrategy)
            valueSerializer.writeInt32(TypeChecker.SymbolRenderingStrategy_ToNumeric(value_renderingStrategy_value))
        }
    }
    writeRichEditorUpdateSymbolSpanStyleOptions(value: RichEditorUpdateSymbolSpanStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeNumber(value_start_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeNumber(value_end_value)
        }
        const value_symbolStyle  = value.symbolStyle
        valueSerializer.writeRichEditorSymbolSpanStyle(value_symbolStyle)
    }
    writeRichEditorUrlStyle(value: RichEditorUrlStyle): void {
        let valueSerializer : Serializer = this
        const value_url  = value.url
        let value_url_type : int32 = RuntimeType.UNDEFINED
        value_url_type = runtimeType(value_url)
        valueSerializer.writeInt8(value_url_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_url_type)) {
            const value_url_value  = value_url!
            let value_url_value_type : int32 = RuntimeType.UNDEFINED
            value_url_value_type = runtimeType(value_url_value)
            if (RuntimeType.STRING == value_url_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_url_value_0  = value_url_value as string
                valueSerializer.writeString(value_url_value_0)
            }
            else if (RuntimeType.OBJECT == value_url_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_url_value_1  = value_url_value as Resource
                valueSerializer.writeResource(value_url_value_1)
            }
        }
    }
    writeRotationGestureEvent(value: RotationGestureEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSceneOptions(value: SceneOptions): void {
        let valueSerializer : Serializer = this
        const value_scene  = value.scene
        let value_scene_type : int32 = RuntimeType.UNDEFINED
        value_scene_type = runtimeType(value_scene)
        valueSerializer.writeInt8(value_scene_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scene_type)) {
            const value_scene_value  = value_scene!
            let value_scene_value_type : int32 = RuntimeType.UNDEFINED
            value_scene_value_type = runtimeType(value_scene_value)
            if ((RuntimeType.STRING == value_scene_value_type) || (RuntimeType.OBJECT == value_scene_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_scene_value_0  = value_scene_value as ResourceStr
                let value_scene_value_0_type : int32 = RuntimeType.UNDEFINED
                value_scene_value_0_type = runtimeType(value_scene_value_0)
                if (RuntimeType.STRING == value_scene_value_0_type) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_scene_value_0_0  = value_scene_value_0 as string
                    valueSerializer.writeString(value_scene_value_0_0)
                }
                else if (RuntimeType.OBJECT == value_scene_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_scene_value_0_1  = value_scene_value_0 as Resource
                    valueSerializer.writeResource(value_scene_value_0_1)
                }
            }
            else if (TypeChecker.isScene(value_scene_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_scene_value_1  = value_scene_value as Scene
                valueSerializer.writeScene(value_scene_value_1)
            }
        }
        const value_modelType  = value.modelType
        let value_modelType_type : int32 = RuntimeType.UNDEFINED
        value_modelType_type = runtimeType(value_modelType)
        valueSerializer.writeInt8(value_modelType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_modelType_type)) {
            const value_modelType_value  = (value_modelType as ModelType)
            valueSerializer.writeInt32(TypeChecker.ModelType_ToNumeric(value_modelType_value))
        }
    }
    writeScrollOptions(value: ScrollOptions): void {
        let valueSerializer : Serializer = this
        const value_xOffset  = value.xOffset
        let value_xOffset_type : int32 = RuntimeType.UNDEFINED
        value_xOffset_type = runtimeType(value_xOffset)
        if (RuntimeType.NUMBER == value_xOffset_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_xOffset_0  = value_xOffset as number
            valueSerializer.writeNumber(value_xOffset_0)
        }
        else if (RuntimeType.STRING == value_xOffset_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_xOffset_1  = value_xOffset as string
            valueSerializer.writeString(value_xOffset_1)
        }
        const value_yOffset  = value.yOffset
        let value_yOffset_type : int32 = RuntimeType.UNDEFINED
        value_yOffset_type = runtimeType(value_yOffset)
        if (RuntimeType.NUMBER == value_yOffset_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_yOffset_0  = value_yOffset as number
            valueSerializer.writeNumber(value_yOffset_0)
        }
        else if (RuntimeType.STRING == value_yOffset_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_yOffset_1  = value_yOffset as string
            valueSerializer.writeString(value_yOffset_1)
        }
        const value_animation  = value.animation
        let value_animation_type : int32 = RuntimeType.UNDEFINED
        value_animation_type = runtimeType(value_animation)
        valueSerializer.writeInt8(value_animation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_animation_type)) {
            const value_animation_value  = value_animation!
            let value_animation_value_type : int32 = RuntimeType.UNDEFINED
            value_animation_value_type = runtimeType(value_animation_value)
            if (RuntimeType.OBJECT == value_animation_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_animation_value_0  = value_animation_value as ScrollAnimationOptions
                valueSerializer.writeScrollAnimationOptions(value_animation_value_0)
            }
            else if (RuntimeType.BOOLEAN == value_animation_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_animation_value_1  = value_animation_value as boolean
                valueSerializer.writeBoolean(value_animation_value_1)
            }
        }
    }
    writeScrollSnapOptions(value: ScrollSnapOptions): void {
        let valueSerializer : Serializer = this
        const value_snapAlign  = value.snapAlign
        valueSerializer.writeInt32(TypeChecker.ScrollSnapAlign_ToNumeric(value_snapAlign))
        const value_snapPagination  = value.snapPagination
        let value_snapPagination_type : int32 = RuntimeType.UNDEFINED
        value_snapPagination_type = runtimeType(value_snapPagination)
        valueSerializer.writeInt8(value_snapPagination_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_snapPagination_type)) {
            const value_snapPagination_value  = value_snapPagination!
            let value_snapPagination_value_type : int32 = RuntimeType.UNDEFINED
            value_snapPagination_value_type = runtimeType(value_snapPagination_value)
            if (((RuntimeType.NUMBER) == (value_snapPagination_value_type)) || ((RuntimeType.STRING) == (value_snapPagination_value_type)) || (((RuntimeType.OBJECT) == (value_snapPagination_value_type)) && (TypeChecker.isResource(value_snapPagination_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_snapPagination_value_0  = value_snapPagination_value as Dimension
                valueSerializer.writeLength(value_snapPagination_value_0)
            }
            else if (((RuntimeType.OBJECT) == (value_snapPagination_value_type)) && (TypeChecker.isArray_Length(value_snapPagination_value))) {
                valueSerializer.writeInt8(1 as int32)
                const value_snapPagination_value_1  = value_snapPagination_value as Array<Dimension>
                valueSerializer.writeInt32(value_snapPagination_value_1.length as int32)
                for (let i = 0; i < value_snapPagination_value_1.length; i++) {
                    const value_snapPagination_value_1_element : Dimension = value_snapPagination_value_1[i]
                    valueSerializer.writeLength(value_snapPagination_value_1_element)
                }
            }
        }
        const value_enableSnapToStart  = value.enableSnapToStart
        let value_enableSnapToStart_type : int32 = RuntimeType.UNDEFINED
        value_enableSnapToStart_type = runtimeType(value_enableSnapToStart)
        valueSerializer.writeInt8(value_enableSnapToStart_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableSnapToStart_type)) {
            const value_enableSnapToStart_value  = value_enableSnapToStart!
            valueSerializer.writeBoolean(value_enableSnapToStart_value)
        }
        const value_enableSnapToEnd  = value.enableSnapToEnd
        let value_enableSnapToEnd_type : int32 = RuntimeType.UNDEFINED
        value_enableSnapToEnd_type = runtimeType(value_enableSnapToEnd)
        valueSerializer.writeInt8(value_enableSnapToEnd_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableSnapToEnd_type)) {
            const value_enableSnapToEnd_value  = value_enableSnapToEnd!
            valueSerializer.writeBoolean(value_enableSnapToEnd_value)
        }
    }
    writeScrollToIndexOptions(value: ScrollToIndexOptions): void {
        let valueSerializer : Serializer = this
        const value_extraOffset  = value.extraOffset
        let value_extraOffset_type : int32 = RuntimeType.UNDEFINED
        value_extraOffset_type = runtimeType(value_extraOffset)
        valueSerializer.writeInt8(value_extraOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_extraOffset_type)) {
            const value_extraOffset_value  = value_extraOffset!
            valueSerializer.writeLengthMetrics(value_extraOffset_value)
        }
    }
    writeSearchButtonOptions(value: SearchButtonOptions): void {
        let valueSerializer : Serializer = this
        const value_fontSize  = value.fontSize
        let value_fontSize_type : int32 = RuntimeType.UNDEFINED
        value_fontSize_type = runtimeType(value_fontSize)
        valueSerializer.writeInt8(value_fontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontSize_type)) {
            const value_fontSize_value  = value_fontSize!
            valueSerializer.writeLength(value_fontSize_value)
        }
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        valueSerializer.writeInt8(value_fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontColor_type)) {
            const value_fontColor_value  = value_fontColor!
            let value_fontColor_value_type : int32 = RuntimeType.UNDEFINED
            value_fontColor_value_type = runtimeType(value_fontColor_value)
            if (TypeChecker.isColor(value_fontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontColor_value_0  = value_fontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontColor_value_1  = value_fontColor_value as number
                valueSerializer.writeNumber(value_fontColor_value_1)
            }
            else if (RuntimeType.STRING == value_fontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontColor_value_2  = value_fontColor_value as string
                valueSerializer.writeString(value_fontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontColor_value_3  = value_fontColor_value as Resource
                valueSerializer.writeResource(value_fontColor_value_3)
            }
        }
        const value_autoDisable  = value.autoDisable
        let value_autoDisable_type : int32 = RuntimeType.UNDEFINED
        value_autoDisable_type = runtimeType(value_autoDisable)
        valueSerializer.writeInt8(value_autoDisable_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_autoDisable_type)) {
            const value_autoDisable_value  = value_autoDisable!
            valueSerializer.writeBoolean(value_autoDisable_value)
        }
    }
    writeSearchOptions(value: SearchOptions): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        valueSerializer.writeInt8(value_value_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_value_type)) {
            const value_value_value  = value_value!
            let value_value_value_type : int32 = RuntimeType.UNDEFINED
            value_value_value_type = runtimeType(value_value_value)
            if (RuntimeType.STRING == value_value_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_value_value_0  = value_value_value as string
                valueSerializer.writeString(value_value_value_0)
            }
            else if (TypeChecker.isBindableResourceStr(value_value_value)) {
                valueSerializer.writeInt8(1 as int32)
            }
        }
        const value_placeholder  = value.placeholder
        let value_placeholder_type : int32 = RuntimeType.UNDEFINED
        value_placeholder_type = runtimeType(value_placeholder)
        valueSerializer.writeInt8(value_placeholder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placeholder_type)) {
            const value_placeholder_value  = value_placeholder!
            let value_placeholder_value_type : int32 = RuntimeType.UNDEFINED
            value_placeholder_value_type = runtimeType(value_placeholder_value)
            if (RuntimeType.STRING == value_placeholder_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_placeholder_value_0  = value_placeholder_value as string
                valueSerializer.writeString(value_placeholder_value_0)
            }
            else if (RuntimeType.OBJECT == value_placeholder_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_placeholder_value_1  = value_placeholder_value as Resource
                valueSerializer.writeResource(value_placeholder_value_1)
            }
        }
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            valueSerializer.writeString(value_icon_value)
        }
        const value_controller  = value.controller
        let value_controller_type : int32 = RuntimeType.UNDEFINED
        value_controller_type = runtimeType(value_controller)
        valueSerializer.writeInt8(value_controller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_controller_type)) {
            const value_controller_value  = value_controller!
            valueSerializer.writeSearchController(value_controller_value)
        }
    }
    writeSectionOptions(value: SectionOptions): void {
        let valueSerializer : Serializer = this
        const value_itemsCount  = value.itemsCount
        valueSerializer.writeNumber(value_itemsCount)
        const value_crossCount  = value.crossCount
        let value_crossCount_type : int32 = RuntimeType.UNDEFINED
        value_crossCount_type = runtimeType(value_crossCount)
        valueSerializer.writeInt8(value_crossCount_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_crossCount_type)) {
            const value_crossCount_value  = value_crossCount!
            valueSerializer.writeNumber(value_crossCount_value)
        }
        const value_onGetItemMainSizeByIndex  = value.onGetItemMainSizeByIndex
        let value_onGetItemMainSizeByIndex_type : int32 = RuntimeType.UNDEFINED
        value_onGetItemMainSizeByIndex_type = runtimeType(value_onGetItemMainSizeByIndex)
        valueSerializer.writeInt8(value_onGetItemMainSizeByIndex_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onGetItemMainSizeByIndex_type)) {
            const value_onGetItemMainSizeByIndex_value  = value_onGetItemMainSizeByIndex!
            valueSerializer.holdAndWriteCallback(value_onGetItemMainSizeByIndex_value)
        }
        const value_columnsGap  = value.columnsGap
        let value_columnsGap_type : int32 = RuntimeType.UNDEFINED
        value_columnsGap_type = runtimeType(value_columnsGap)
        valueSerializer.writeInt8(value_columnsGap_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_columnsGap_type)) {
            const value_columnsGap_value  = value_columnsGap!
            valueSerializer.writeLength(value_columnsGap_value)
        }
        const value_rowsGap  = value.rowsGap
        let value_rowsGap_type : int32 = RuntimeType.UNDEFINED
        value_rowsGap_type = runtimeType(value_rowsGap)
        valueSerializer.writeInt8(value_rowsGap_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_rowsGap_type)) {
            const value_rowsGap_value  = value_rowsGap!
            valueSerializer.writeLength(value_rowsGap_value)
        }
        const value_margin  = value.margin
        let value_margin_type : int32 = RuntimeType.UNDEFINED
        value_margin_type = runtimeType(value_margin)
        valueSerializer.writeInt8(value_margin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_margin_type)) {
            const value_margin_value  = value_margin!
            let value_margin_value_type : int32 = RuntimeType.UNDEFINED
            value_margin_value_type = runtimeType(value_margin_value)
            if (TypeChecker.isPadding(value_margin_value, false, false, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_margin_value_0  = value_margin_value as Padding
                valueSerializer.writePadding(value_margin_value_0)
            }
            else if (((RuntimeType.NUMBER) == (value_margin_value_type)) || ((RuntimeType.STRING) == (value_margin_value_type)) || (((RuntimeType.OBJECT) == (value_margin_value_type)) && (TypeChecker.isResource(value_margin_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(1 as int32)
                const value_margin_value_1  = value_margin_value as Dimension
                valueSerializer.writeLength(value_margin_value_1)
            }
        }
    }
    writeSelectionMenuOptions(value: SelectionMenuOptions): void {
        let valueSerializer : Serializer = this
        const value_onAppear  = value.onAppear
        let value_onAppear_type : int32 = RuntimeType.UNDEFINED
        value_onAppear_type = runtimeType(value_onAppear)
        valueSerializer.writeInt8(value_onAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAppear_type)) {
            const value_onAppear_value  = value_onAppear!
            valueSerializer.holdAndWriteCallback(value_onAppear_value)
        }
        const value_onDisappear  = value.onDisappear
        let value_onDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDisappear_type = runtimeType(value_onDisappear)
        valueSerializer.writeInt8(value_onDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDisappear_type)) {
            const value_onDisappear_value  = value_onDisappear!
            valueSerializer.holdAndWriteCallback(value_onDisappear_value)
        }
        const value_menuType  = value.menuType
        let value_menuType_type : int32 = RuntimeType.UNDEFINED
        value_menuType_type = runtimeType(value_menuType)
        valueSerializer.writeInt8(value_menuType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_menuType_type)) {
            const value_menuType_value  = (value_menuType as MenuType)
            valueSerializer.writeInt32(TypeChecker.MenuType_ToNumeric(value_menuType_value))
        }
        const value_onMenuShow  = value.onMenuShow
        let value_onMenuShow_type : int32 = RuntimeType.UNDEFINED
        value_onMenuShow_type = runtimeType(value_onMenuShow)
        valueSerializer.writeInt8(value_onMenuShow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onMenuShow_type)) {
            const value_onMenuShow_value  = value_onMenuShow!
            valueSerializer.holdAndWriteCallback(value_onMenuShow_value)
        }
        const value_onMenuHide  = value.onMenuHide
        let value_onMenuHide_type : int32 = RuntimeType.UNDEFINED
        value_onMenuHide_type = runtimeType(value_onMenuHide)
        valueSerializer.writeInt8(value_onMenuHide_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onMenuHide_type)) {
            const value_onMenuHide_value  = value_onMenuHide!
            valueSerializer.holdAndWriteCallback(value_onMenuHide_value)
        }
        const value_previewMenuOptions  = value.previewMenuOptions
        let value_previewMenuOptions_type : int32 = RuntimeType.UNDEFINED
        value_previewMenuOptions_type = runtimeType(value_previewMenuOptions)
        valueSerializer.writeInt8(value_previewMenuOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewMenuOptions_type)) {
            const value_previewMenuOptions_value  = value_previewMenuOptions!
            valueSerializer.writePreviewMenuOptions(value_previewMenuOptions_value)
        }
    }
    writeSelectionMenuOptionsExt(value: SelectionMenuOptionsExt): void {
        let valueSerializer : Serializer = this
        const value_onAppear  = value.onAppear
        let value_onAppear_type : int32 = RuntimeType.UNDEFINED
        value_onAppear_type = runtimeType(value_onAppear)
        valueSerializer.writeInt8(value_onAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAppear_type)) {
            const value_onAppear_value  = value_onAppear!
            valueSerializer.holdAndWriteCallback(value_onAppear_value)
        }
        const value_onDisappear  = value.onDisappear
        let value_onDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDisappear_type = runtimeType(value_onDisappear)
        valueSerializer.writeInt8(value_onDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDisappear_type)) {
            const value_onDisappear_value  = value_onDisappear!
            valueSerializer.holdAndWriteCallback(value_onDisappear_value)
        }
        const value_preview  = value.preview
        let value_preview_type : int32 = RuntimeType.UNDEFINED
        value_preview_type = runtimeType(value_preview)
        valueSerializer.writeInt8(value_preview_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_preview_type)) {
            const value_preview_value  = value_preview!
            valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_preview_value))
        }
        const value_menuType  = value.menuType
        let value_menuType_type : int32 = RuntimeType.UNDEFINED
        value_menuType_type = runtimeType(value_menuType)
        valueSerializer.writeInt8(value_menuType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_menuType_type)) {
            const value_menuType_value  = (value_menuType as MenuType)
            valueSerializer.writeInt32(TypeChecker.MenuType_ToNumeric(value_menuType_value))
        }
        const value_previewMenuOptions  = value.previewMenuOptions
        let value_previewMenuOptions_type : int32 = RuntimeType.UNDEFINED
        value_previewMenuOptions_type = runtimeType(value_previewMenuOptions)
        valueSerializer.writeInt8(value_previewMenuOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewMenuOptions_type)) {
            const value_previewMenuOptions_value  = value_previewMenuOptions!
            valueSerializer.writePreviewMenuOptions(value_previewMenuOptions_value)
        }
    }
    writeSelectOption(value: SelectOption): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        if (RuntimeType.STRING == value_value_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_value_0  = value_value as string
            valueSerializer.writeString(value_value_0)
        }
        else if (RuntimeType.OBJECT == value_value_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_value_1  = value_value as Resource
            valueSerializer.writeResource(value_value_1)
        }
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            let value_icon_value_type : int32 = RuntimeType.UNDEFINED
            value_icon_value_type = runtimeType(value_icon_value)
            if (RuntimeType.STRING == value_icon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_icon_value_0  = value_icon_value as string
                valueSerializer.writeString(value_icon_value_0)
            }
            else if (RuntimeType.OBJECT == value_icon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_icon_value_1  = value_icon_value as Resource
                valueSerializer.writeResource(value_icon_value_1)
            }
        }
        let value_symbolIcon_type : int32 = RuntimeType.UNDEFINED
        valueSerializer.writeInt8(value_symbolIcon_type as int32)
    }
    writeShadowOptions(value: ShadowOptions): void {
        let valueSerializer : Serializer = this
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        if (RuntimeType.NUMBER == value_radius_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_radius_0  = value_radius as number
            valueSerializer.writeNumber(value_radius_0)
        }
        else if (RuntimeType.OBJECT == value_radius_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_radius_1  = value_radius as Resource
            valueSerializer.writeResource(value_radius_1)
        }
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = (value_type as ShadowType)
            valueSerializer.writeInt32(TypeChecker.ShadowType_ToNumeric(value_type_value))
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as string
                valueSerializer.writeString(value_color_value_1)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_2)
            }
            else if (TypeChecker.isColoringStrategy(value_color_value)) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as ColoringStrategy
                valueSerializer.writeInt32(TypeChecker.ColoringStrategy_ToNumeric(value_color_value_3))
            }
        }
        const value_offsetX  = value.offsetX
        let value_offsetX_type : int32 = RuntimeType.UNDEFINED
        value_offsetX_type = runtimeType(value_offsetX)
        valueSerializer.writeInt8(value_offsetX_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offsetX_type)) {
            const value_offsetX_value  = value_offsetX!
            let value_offsetX_value_type : int32 = RuntimeType.UNDEFINED
            value_offsetX_value_type = runtimeType(value_offsetX_value)
            if (RuntimeType.NUMBER == value_offsetX_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_offsetX_value_0  = value_offsetX_value as number
                valueSerializer.writeNumber(value_offsetX_value_0)
            }
            else if (RuntimeType.OBJECT == value_offsetX_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offsetX_value_1  = value_offsetX_value as Resource
                valueSerializer.writeResource(value_offsetX_value_1)
            }
        }
        const value_offsetY  = value.offsetY
        let value_offsetY_type : int32 = RuntimeType.UNDEFINED
        value_offsetY_type = runtimeType(value_offsetY)
        valueSerializer.writeInt8(value_offsetY_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offsetY_type)) {
            const value_offsetY_value  = value_offsetY!
            let value_offsetY_value_type : int32 = RuntimeType.UNDEFINED
            value_offsetY_value_type = runtimeType(value_offsetY_value)
            if (RuntimeType.NUMBER == value_offsetY_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_offsetY_value_0  = value_offsetY_value as number
                valueSerializer.writeNumber(value_offsetY_value_0)
            }
            else if (RuntimeType.OBJECT == value_offsetY_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offsetY_value_1  = value_offsetY_value as Resource
                valueSerializer.writeResource(value_offsetY_value_1)
            }
        }
        const value_fill  = value.fill
        let value_fill_type : int32 = RuntimeType.UNDEFINED
        value_fill_type = runtimeType(value_fill)
        valueSerializer.writeInt8(value_fill_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fill_type)) {
            const value_fill_value  = value_fill!
            valueSerializer.writeBoolean(value_fill_value)
        }
    }
    writesharedTransitionOptions(value: sharedTransitionOptions): void {
        let valueSerializer : Serializer = this
        const value_duration  = value.duration
        let value_duration_type : int32 = RuntimeType.UNDEFINED
        value_duration_type = runtimeType(value_duration)
        valueSerializer.writeInt8(value_duration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_duration_type)) {
            const value_duration_value  = value_duration!
            valueSerializer.writeNumber(value_duration_value)
        }
        const value_curve  = value.curve
        let value_curve_type : int32 = RuntimeType.UNDEFINED
        value_curve_type = runtimeType(value_curve)
        valueSerializer.writeInt8(value_curve_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_curve_type)) {
            const value_curve_value  = value_curve!
            let value_curve_value_type : int32 = RuntimeType.UNDEFINED
            value_curve_value_type = runtimeType(value_curve_value)
            if (TypeChecker.isCurve(value_curve_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_curve_value_0  = value_curve_value as Curve
                valueSerializer.writeInt32(TypeChecker.Curve_ToNumeric(value_curve_value_0))
            }
            else if (RuntimeType.STRING == value_curve_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_curve_value_1  = value_curve_value as string
                valueSerializer.writeString(value_curve_value_1)
            }
            else if (RuntimeType.OBJECT == value_curve_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_curve_value_2  = value_curve_value as ICurve
                valueSerializer.writeICurve(value_curve_value_2)
            }
        }
        const value_delay  = value.delay
        let value_delay_type : int32 = RuntimeType.UNDEFINED
        value_delay_type = runtimeType(value_delay)
        valueSerializer.writeInt8(value_delay_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_delay_type)) {
            const value_delay_value  = value_delay!
            valueSerializer.writeNumber(value_delay_value)
        }
        const value_motionPath  = value.motionPath
        let value_motionPath_type : int32 = RuntimeType.UNDEFINED
        value_motionPath_type = runtimeType(value_motionPath)
        valueSerializer.writeInt8(value_motionPath_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_motionPath_type)) {
            const value_motionPath_value  = value_motionPath!
            valueSerializer.writeMotionPathOptions(value_motionPath_value)
        }
        const value_zIndex  = value.zIndex
        let value_zIndex_type : int32 = RuntimeType.UNDEFINED
        value_zIndex_type = runtimeType(value_zIndex)
        valueSerializer.writeInt8(value_zIndex_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_zIndex_type)) {
            const value_zIndex_value  = value_zIndex!
            valueSerializer.writeNumber(value_zIndex_value)
        }
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = (value_type as SharedTransitionEffectType)
            valueSerializer.writeInt32(TypeChecker.SharedTransitionEffectType_ToNumeric(value_type_value))
        }
    }
    writeSheetInfo(value: SheetInfo): void {
        let valueSerializer : Serializer = this
        const value_title  = value.title
        let value_title_type : int32 = RuntimeType.UNDEFINED
        value_title_type = runtimeType(value_title)
        if (RuntimeType.STRING == value_title_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_title_0  = value_title as string
            valueSerializer.writeString(value_title_0)
        }
        else if (RuntimeType.OBJECT == value_title_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_title_1  = value_title as Resource
            valueSerializer.writeResource(value_title_1)
        }
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            let value_icon_value_type : int32 = RuntimeType.UNDEFINED
            value_icon_value_type = runtimeType(value_icon_value)
            if (RuntimeType.STRING == value_icon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_icon_value_0  = value_icon_value as string
                valueSerializer.writeString(value_icon_value_0)
            }
            else if (RuntimeType.OBJECT == value_icon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_icon_value_1  = value_icon_value as Resource
                valueSerializer.writeResource(value_icon_value_1)
            }
        }
        const value_action  = value.action
        valueSerializer.holdAndWriteCallback(value_action)
    }
    writeSheetTitleOptions(value: SheetTitleOptions): void {
        let valueSerializer : Serializer = this
        const value_title  = value.title
        let value_title_type : int32 = RuntimeType.UNDEFINED
        value_title_type = runtimeType(value_title)
        if (RuntimeType.STRING == value_title_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_title_0  = value_title as string
            valueSerializer.writeString(value_title_0)
        }
        else if (RuntimeType.OBJECT == value_title_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_title_1  = value_title as Resource
            valueSerializer.writeResource(value_title_1)
        }
        const value_subtitle  = value.subtitle
        let value_subtitle_type : int32 = RuntimeType.UNDEFINED
        value_subtitle_type = runtimeType(value_subtitle)
        valueSerializer.writeInt8(value_subtitle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_subtitle_type)) {
            const value_subtitle_value  = value_subtitle!
            let value_subtitle_value_type : int32 = RuntimeType.UNDEFINED
            value_subtitle_value_type = runtimeType(value_subtitle_value)
            if (RuntimeType.STRING == value_subtitle_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_subtitle_value_0  = value_subtitle_value as string
                valueSerializer.writeString(value_subtitle_value_0)
            }
            else if (RuntimeType.OBJECT == value_subtitle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_subtitle_value_1  = value_subtitle_value as Resource
                valueSerializer.writeResource(value_subtitle_value_1)
            }
        }
    }
    writeSliderBlockStyle(value: SliderBlockStyle): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeInt32(TypeChecker.SliderBlockType_ToNumeric(value_type))
        const value_image  = value.image
        let value_image_type : int32 = RuntimeType.UNDEFINED
        value_image_type = runtimeType(value_image)
        valueSerializer.writeInt8(value_image_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_image_type)) {
            const value_image_value  = value_image!
            let value_image_value_type : int32 = RuntimeType.UNDEFINED
            value_image_value_type = runtimeType(value_image_value)
            if (RuntimeType.STRING == value_image_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_image_value_0  = value_image_value as string
                valueSerializer.writeString(value_image_value_0)
            }
            else if (RuntimeType.OBJECT == value_image_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_image_value_1  = value_image_value as Resource
                valueSerializer.writeResource(value_image_value_1)
            }
        }
        const value_shape  = value.shape
        let value_shape_type : int32 = RuntimeType.UNDEFINED
        value_shape_type = runtimeType(value_shape)
        valueSerializer.writeInt8(value_shape_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shape_type)) {
            const value_shape_value  = value_shape!
            valueSerializer.writeString(value_shape_value)
        }
    }
    writeStyledStringChangeValue(value: StyledStringChangeValue): void {
        let valueSerializer : Serializer = this
        const value_range  = value.range
        valueSerializer.writeTextRange(value_range)
        const value_replacementString  = value.replacementString
        valueSerializer.writeStyledString(value_replacementString)
        const value_previewText  = value.previewText
        let value_previewText_type : int32 = RuntimeType.UNDEFINED
        value_previewText_type = runtimeType(value_previewText)
        valueSerializer.writeInt8(value_previewText_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewText_type)) {
            const value_previewText_value  = value_previewText!
            valueSerializer.writeStyledString(value_previewText_value)
        }
    }
    writeSwipeActionOptions(value: SwipeActionOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            let value_start_value_type : int32 = RuntimeType.UNDEFINED
            value_start_value_type = runtimeType(value_start_value)
            if (RuntimeType.FUNCTION == value_start_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_start_value_0  = value_start_value as CustomBuilder
                valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_start_value_0))
            }
            else if (RuntimeType.OBJECT == value_start_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_start_value_1  = value_start_value as SwipeActionItem
                valueSerializer.writeSwipeActionItem(value_start_value_1)
            }
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            let value_end_value_type : int32 = RuntimeType.UNDEFINED
            value_end_value_type = runtimeType(value_end_value)
            if (RuntimeType.FUNCTION == value_end_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_end_value_0  = value_end_value as CustomBuilder
                valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_end_value_0))
            }
            else if (RuntimeType.OBJECT == value_end_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_end_value_1  = value_end_value as SwipeActionItem
                valueSerializer.writeSwipeActionItem(value_end_value_1)
            }
        }
        const value_edgeEffect  = value.edgeEffect
        let value_edgeEffect_type : int32 = RuntimeType.UNDEFINED
        value_edgeEffect_type = runtimeType(value_edgeEffect)
        valueSerializer.writeInt8(value_edgeEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_edgeEffect_type)) {
            const value_edgeEffect_value  = (value_edgeEffect as SwipeEdgeEffect)
            valueSerializer.writeInt32(TypeChecker.SwipeEdgeEffect_ToNumeric(value_edgeEffect_value))
        }
        const value_onOffsetChange  = value.onOffsetChange
        let value_onOffsetChange_type : int32 = RuntimeType.UNDEFINED
        value_onOffsetChange_type = runtimeType(value_onOffsetChange)
        valueSerializer.writeInt8(value_onOffsetChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onOffsetChange_type)) {
            const value_onOffsetChange_value  = value_onOffsetChange!
            valueSerializer.holdAndWriteCallback(value_onOffsetChange_value)
        }
    }
    writeSwipeGestureEvent(value: SwipeGestureEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeSwitchStyle(value: SwitchStyle): void {
        let valueSerializer : Serializer = this
        const value_pointRadius  = value.pointRadius
        let value_pointRadius_type : int32 = RuntimeType.UNDEFINED
        value_pointRadius_type = runtimeType(value_pointRadius)
        valueSerializer.writeInt8(value_pointRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_pointRadius_type)) {
            const value_pointRadius_value  = value_pointRadius!
            let value_pointRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_pointRadius_value_type = runtimeType(value_pointRadius_value)
            if (RuntimeType.NUMBER == value_pointRadius_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_pointRadius_value_0  = value_pointRadius_value as number
                valueSerializer.writeNumber(value_pointRadius_value_0)
            }
            else if (RuntimeType.OBJECT == value_pointRadius_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_pointRadius_value_1  = value_pointRadius_value as Resource
                valueSerializer.writeResource(value_pointRadius_value_1)
            }
        }
        const value_unselectedColor  = value.unselectedColor
        let value_unselectedColor_type : int32 = RuntimeType.UNDEFINED
        value_unselectedColor_type = runtimeType(value_unselectedColor)
        valueSerializer.writeInt8(value_unselectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_unselectedColor_type)) {
            const value_unselectedColor_value  = value_unselectedColor!
            let value_unselectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_unselectedColor_value_type = runtimeType(value_unselectedColor_value)
            if (TypeChecker.isColor(value_unselectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_unselectedColor_value_0  = value_unselectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_unselectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_unselectedColor_value_1  = value_unselectedColor_value as number
                valueSerializer.writeNumber(value_unselectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_unselectedColor_value_2  = value_unselectedColor_value as string
                valueSerializer.writeString(value_unselectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_unselectedColor_value_3  = value_unselectedColor_value as Resource
                valueSerializer.writeResource(value_unselectedColor_value_3)
            }
        }
        const value_pointColor  = value.pointColor
        let value_pointColor_type : int32 = RuntimeType.UNDEFINED
        value_pointColor_type = runtimeType(value_pointColor)
        valueSerializer.writeInt8(value_pointColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_pointColor_type)) {
            const value_pointColor_value  = value_pointColor!
            let value_pointColor_value_type : int32 = RuntimeType.UNDEFINED
            value_pointColor_value_type = runtimeType(value_pointColor_value)
            if (TypeChecker.isColor(value_pointColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_pointColor_value_0  = value_pointColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_pointColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_pointColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_pointColor_value_1  = value_pointColor_value as number
                valueSerializer.writeNumber(value_pointColor_value_1)
            }
            else if (RuntimeType.STRING == value_pointColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_pointColor_value_2  = value_pointColor_value as string
                valueSerializer.writeString(value_pointColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_pointColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_pointColor_value_3  = value_pointColor_value as Resource
                valueSerializer.writeResource(value_pointColor_value_3)
            }
        }
        const value_trackBorderRadius  = value.trackBorderRadius
        let value_trackBorderRadius_type : int32 = RuntimeType.UNDEFINED
        value_trackBorderRadius_type = runtimeType(value_trackBorderRadius)
        valueSerializer.writeInt8(value_trackBorderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_trackBorderRadius_type)) {
            const value_trackBorderRadius_value  = value_trackBorderRadius!
            let value_trackBorderRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_trackBorderRadius_value_type = runtimeType(value_trackBorderRadius_value)
            if (RuntimeType.NUMBER == value_trackBorderRadius_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_trackBorderRadius_value_0  = value_trackBorderRadius_value as number
                valueSerializer.writeNumber(value_trackBorderRadius_value_0)
            }
            else if (RuntimeType.OBJECT == value_trackBorderRadius_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_trackBorderRadius_value_1  = value_trackBorderRadius_value as Resource
                valueSerializer.writeResource(value_trackBorderRadius_value_1)
            }
        }
    }
    writeTabBarIconStyle(value: TabBarIconStyle): void {
        let valueSerializer : Serializer = this
        const value_selectedColor  = value.selectedColor
        let value_selectedColor_type : int32 = RuntimeType.UNDEFINED
        value_selectedColor_type = runtimeType(value_selectedColor)
        valueSerializer.writeInt8(value_selectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selectedColor_type)) {
            const value_selectedColor_value  = value_selectedColor!
            let value_selectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_selectedColor_value_type = runtimeType(value_selectedColor_value)
            if (TypeChecker.isColor(value_selectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_selectedColor_value_0  = value_selectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_selectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_selectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_selectedColor_value_1  = value_selectedColor_value as number
                valueSerializer.writeNumber(value_selectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_selectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_selectedColor_value_2  = value_selectedColor_value as string
                valueSerializer.writeString(value_selectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_selectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_selectedColor_value_3  = value_selectedColor_value as Resource
                valueSerializer.writeResource(value_selectedColor_value_3)
            }
        }
        const value_unselectedColor  = value.unselectedColor
        let value_unselectedColor_type : int32 = RuntimeType.UNDEFINED
        value_unselectedColor_type = runtimeType(value_unselectedColor)
        valueSerializer.writeInt8(value_unselectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_unselectedColor_type)) {
            const value_unselectedColor_value  = value_unselectedColor!
            let value_unselectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_unselectedColor_value_type = runtimeType(value_unselectedColor_value)
            if (TypeChecker.isColor(value_unselectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_unselectedColor_value_0  = value_unselectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_unselectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_unselectedColor_value_1  = value_unselectedColor_value as number
                valueSerializer.writeNumber(value_unselectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_unselectedColor_value_2  = value_unselectedColor_value as string
                valueSerializer.writeString(value_unselectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_unselectedColor_value_3  = value_unselectedColor_value as Resource
                valueSerializer.writeResource(value_unselectedColor_value_3)
            }
        }
    }
    writeTabBarOptions(value: TabBarOptions): void {
        let valueSerializer : Serializer = this
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            let value_icon_value_type : int32 = RuntimeType.UNDEFINED
            value_icon_value_type = runtimeType(value_icon_value)
            if (RuntimeType.STRING == value_icon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_icon_value_0  = value_icon_value as string
                valueSerializer.writeString(value_icon_value_0)
            }
            else if (RuntimeType.OBJECT == value_icon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_icon_value_1  = value_icon_value as Resource
                valueSerializer.writeResource(value_icon_value_1)
            }
        }
        const value_text  = value.text
        let value_text_type : int32 = RuntimeType.UNDEFINED
        value_text_type = runtimeType(value_text)
        valueSerializer.writeInt8(value_text_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_text_type)) {
            const value_text_value  = value_text!
            let value_text_value_type : int32 = RuntimeType.UNDEFINED
            value_text_value_type = runtimeType(value_text_value)
            if (RuntimeType.STRING == value_text_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_text_value_0  = value_text_value as string
                valueSerializer.writeString(value_text_value_0)
            }
            else if (RuntimeType.OBJECT == value_text_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_text_value_1  = value_text_value as Resource
                valueSerializer.writeResource(value_text_value_1)
            }
        }
    }
    writeTabsOptions(value: TabsOptions): void {
        let valueSerializer : Serializer = this
        const value_barPosition  = value.barPosition
        let value_barPosition_type : int32 = RuntimeType.UNDEFINED
        value_barPosition_type = runtimeType(value_barPosition)
        valueSerializer.writeInt8(value_barPosition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_barPosition_type)) {
            const value_barPosition_value  = (value_barPosition as BarPosition)
            valueSerializer.writeInt32(TypeChecker.BarPosition_ToNumeric(value_barPosition_value))
        }
        const value_index  = value.index
        let value_index_type : int32 = RuntimeType.UNDEFINED
        value_index_type = runtimeType(value_index)
        valueSerializer.writeInt8(value_index_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_index_type)) {
            const value_index_value  = value_index!
            valueSerializer.writeNumber(value_index_value)
        }
        const value_controller  = value.controller
        let value_controller_type : int32 = RuntimeType.UNDEFINED
        value_controller_type = runtimeType(value_controller)
        valueSerializer.writeInt8(value_controller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_controller_type)) {
            const value_controller_value  = value_controller!
            valueSerializer.writeTabsController(value_controller_value)
        }
        const value_barModifier  = undefined
        let value_barModifier_type : int32 = RuntimeType.UNDEFINED
        value_barModifier_type = runtimeType(value_barModifier)
        valueSerializer.writeInt8(value_barModifier_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_barModifier_type)) {
            const value_barModifier_value  = value_barModifier!
            valueSerializer.writeCommonModifier(value_barModifier_value)
        }
    }
    writeTapGestureEvent(value: TapGestureEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTerminationInfo(value: TerminationInfo): void {
        let valueSerializer : Serializer = this
        const value_code  = value.code
        valueSerializer.writeNumber(value_code)
        const value_want  = value.want
        let value_want_type : int32 = RuntimeType.UNDEFINED
        value_want_type = runtimeType(value_want)
        valueSerializer.writeInt8(value_want_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_want_type)) {
            const value_want_value  = value_want!
            valueSerializer.writeWant(value_want_value)
        }
    }
    writeTextAreaOptions(value: TextAreaOptions): void {
        let valueSerializer : Serializer = this
        const value_placeholder  = value.placeholder
        let value_placeholder_type : int32 = RuntimeType.UNDEFINED
        value_placeholder_type = runtimeType(value_placeholder)
        valueSerializer.writeInt8(value_placeholder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placeholder_type)) {
            const value_placeholder_value  = value_placeholder!
            let value_placeholder_value_type : int32 = RuntimeType.UNDEFINED
            value_placeholder_value_type = runtimeType(value_placeholder_value)
            if (RuntimeType.STRING == value_placeholder_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_placeholder_value_0  = value_placeholder_value as string
                valueSerializer.writeString(value_placeholder_value_0)
            }
            else if (RuntimeType.OBJECT == value_placeholder_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_placeholder_value_1  = value_placeholder_value as Resource
                valueSerializer.writeResource(value_placeholder_value_1)
            }
        }
        const value_text  = value.text
        let value_text_type : int32 = RuntimeType.UNDEFINED
        value_text_type = runtimeType(value_text)
        valueSerializer.writeInt8(value_text_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_text_type)) {
            const value_text_value  = value_text!
            let value_text_value_type : int32 = RuntimeType.UNDEFINED
            value_text_value_type = runtimeType(value_text_value)
            if (TypeChecker.isBindableResourceStr(value_text_value)) {
                valueSerializer.writeInt8(2 as int32)
            }
            else if (RuntimeType.STRING == value_text_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_text_value_0  = value_text_value as string
                valueSerializer.writeString(value_text_value_0)
            }
            else if (RuntimeType.OBJECT == value_text_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_text_value_1  = value_text_value as Resource
                valueSerializer.writeResource(value_text_value_1)
            }
        }
        const value_controller  = value.controller
        let value_controller_type : int32 = RuntimeType.UNDEFINED
        value_controller_type = runtimeType(value_controller)
        valueSerializer.writeInt8(value_controller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_controller_type)) {
            const value_controller_value  = value_controller!
            valueSerializer.writeTextAreaController(value_controller_value)
        }
    }
    writeTextBackgroundStyle(value: TextBackgroundStyle): void {
        let valueSerializer : Serializer = this
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            let value_radius_value_type : int32 = RuntimeType.UNDEFINED
            value_radius_value_type = runtimeType(value_radius_value)
            if (((RuntimeType.NUMBER) == (value_radius_value_type)) || ((RuntimeType.STRING) == (value_radius_value_type)) || (((RuntimeType.OBJECT) == (value_radius_value_type)) && (TypeChecker.isResource(value_radius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_radius_value_0  = value_radius_value as Dimension
                valueSerializer.writeLength(value_radius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_radius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_radius_value_1  = value_radius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_radius_value_1)
            }
        }
    }
    writeTextCascadePickerRangeContent(value: TextCascadePickerRangeContent): void {
        let valueSerializer : Serializer = this
        const value_text  = value.text
        let value_text_type : int32 = RuntimeType.UNDEFINED
        value_text_type = runtimeType(value_text)
        if (RuntimeType.STRING == value_text_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_text_0  = value_text as string
            valueSerializer.writeString(value_text_0)
        }
        else if (RuntimeType.OBJECT == value_text_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_text_1  = value_text as Resource
            valueSerializer.writeResource(value_text_1)
        }
        const value_children  = value.children
        let value_children_type : int32 = RuntimeType.UNDEFINED
        value_children_type = runtimeType(value_children)
        valueSerializer.writeInt8(value_children_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_children_type)) {
            const value_children_value  = value_children!
            valueSerializer.writeInt32(value_children_value.length as int32)
            for (let i = 0; i < value_children_value.length; i++) {
                const value_children_value_element : TextCascadePickerRangeContent = value_children_value[i]
                valueSerializer.writeTextCascadePickerRangeContent(value_children_value_element)
            }
        }
    }
    writeTextChangeOptions(value: TextChangeOptions): void {
        let valueSerializer : Serializer = this
        const value_rangeBefore  = value.rangeBefore
        valueSerializer.writeTextRange(value_rangeBefore)
        const value_rangeAfter  = value.rangeAfter
        valueSerializer.writeTextRange(value_rangeAfter)
        const value_oldContent  = value.oldContent
        valueSerializer.writeString(value_oldContent)
        const value_oldPreviewText  = value.oldPreviewText
        valueSerializer.writePreviewText(value_oldPreviewText)
    }
    writeTextDecorationOptions(value: TextDecorationOptions): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeInt32(TypeChecker.TextDecorationType_ToNumeric(value_type))
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as TextDecorationStyle)
            valueSerializer.writeInt32(TypeChecker.TextDecorationStyle_ToNumeric(value_style_value))
        }
    }
    writeTextInputOptions(value: TextInputOptions): void {
        let valueSerializer : Serializer = this
        const value_placeholder  = value.placeholder
        let value_placeholder_type : int32 = RuntimeType.UNDEFINED
        value_placeholder_type = runtimeType(value_placeholder)
        valueSerializer.writeInt8(value_placeholder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placeholder_type)) {
            const value_placeholder_value  = value_placeholder!
            let value_placeholder_value_type : int32 = RuntimeType.UNDEFINED
            value_placeholder_value_type = runtimeType(value_placeholder_value)
            if (RuntimeType.STRING == value_placeholder_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_placeholder_value_0  = value_placeholder_value as string
                valueSerializer.writeString(value_placeholder_value_0)
            }
            else if (RuntimeType.OBJECT == value_placeholder_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_placeholder_value_1  = value_placeholder_value as Resource
                valueSerializer.writeResource(value_placeholder_value_1)
            }
        }
        const value_text  = value.text
        let value_text_type : int32 = RuntimeType.UNDEFINED
        value_text_type = runtimeType(value_text)
        valueSerializer.writeInt8(value_text_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_text_type)) {
            const value_text_value  = value_text!
            let value_text_value_type : int32 = RuntimeType.UNDEFINED
            value_text_value_type = runtimeType(value_text_value)
            if (TypeChecker.isBindableResourceStr(value_text_value)) {
                valueSerializer.writeInt8(2 as int32)
            }
            else if (RuntimeType.STRING == value_text_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_text_value_0  = value_text_value as string
                valueSerializer.writeString(value_text_value_0)
            }
            else if (RuntimeType.OBJECT == value_text_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_text_value_1  = value_text_value as Resource
                valueSerializer.writeResource(value_text_value_1)
            }
        }
        const value_controller  = value.controller
        let value_controller_type : int32 = RuntimeType.UNDEFINED
        value_controller_type = runtimeType(value_controller)
        valueSerializer.writeInt8(value_controller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_controller_type)) {
            const value_controller_value  = value_controller!
            valueSerializer.writeTextInputController(value_controller_value)
        }
    }
    writeTextMenuItem(value: TextMenuItem): void {
        let valueSerializer : Serializer = this
        const value_content  = value.content
        let value_content_type : int32 = RuntimeType.UNDEFINED
        value_content_type = runtimeType(value_content)
        if (RuntimeType.STRING == value_content_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_content_0  = value_content as string
            valueSerializer.writeString(value_content_0)
        }
        else if (RuntimeType.OBJECT == value_content_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_content_1  = value_content as Resource
            valueSerializer.writeResource(value_content_1)
        }
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            let value_icon_value_type : int32 = RuntimeType.UNDEFINED
            value_icon_value_type = runtimeType(value_icon_value)
            if (RuntimeType.STRING == value_icon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_icon_value_0  = value_icon_value as string
                valueSerializer.writeString(value_icon_value_0)
            }
            else if (RuntimeType.OBJECT == value_icon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_icon_value_1  = value_icon_value as Resource
                valueSerializer.writeResource(value_icon_value_1)
            }
        }
        const value_id  = value.id
        valueSerializer.writeTextMenuItemId(value_id)
        const value_labelInfo  = value.labelInfo
        let value_labelInfo_type : int32 = RuntimeType.UNDEFINED
        value_labelInfo_type = runtimeType(value_labelInfo)
        valueSerializer.writeInt8(value_labelInfo_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_labelInfo_type)) {
            const value_labelInfo_value  = value_labelInfo!
            let value_labelInfo_value_type : int32 = RuntimeType.UNDEFINED
            value_labelInfo_value_type = runtimeType(value_labelInfo_value)
            if (RuntimeType.STRING == value_labelInfo_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_labelInfo_value_0  = value_labelInfo_value as string
                valueSerializer.writeString(value_labelInfo_value_0)
            }
            else if (RuntimeType.OBJECT == value_labelInfo_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_labelInfo_value_1  = value_labelInfo_value as Resource
                valueSerializer.writeResource(value_labelInfo_value_1)
            }
        }
    }
    writeTextPickerOptions(value: TextPickerOptions): void {
        let valueSerializer : Serializer = this
        const value_range  = value.range
        let value_range_type : int32 = RuntimeType.UNDEFINED
        value_range_type = runtimeType(value_range)
        if (((RuntimeType.OBJECT) == (value_range_type)) && (TypeChecker.isArray_String(value_range))) {
            valueSerializer.writeInt8(0 as int32)
            const value_range_0  = value_range as Array<string>
            valueSerializer.writeInt32(value_range_0.length as int32)
            for (let i = 0; i < value_range_0.length; i++) {
                const value_range_0_element : string = value_range_0[i]
                valueSerializer.writeString(value_range_0_element)
            }
        }
        else if (((RuntimeType.OBJECT) == (value_range_type)) && (TypeChecker.isArray_Array_String(value_range))) {
            valueSerializer.writeInt8(1 as int32)
            const value_range_1  = value_range as Array<Array<string>>
            valueSerializer.writeInt32(value_range_1.length as int32)
            for (let i = 0; i < value_range_1.length; i++) {
                const value_range_1_element : Array<string> = value_range_1[i]
                valueSerializer.writeInt32(value_range_1_element.length as int32)
                for (let i = 0; i < value_range_1_element.length; i++) {
                    const value_range_1_element_element : string = value_range_1_element[i]
                    valueSerializer.writeString(value_range_1_element_element)
                }
            }
        }
        else if (TypeChecker.isResource(value_range, false, false, false, false, false)) {
            valueSerializer.writeInt8(2 as int32)
            const value_range_2  = value_range as Resource
            valueSerializer.writeResource(value_range_2)
        }
        else if (((RuntimeType.OBJECT) == (value_range_type)) && (TypeChecker.isArray_TextPickerRangeContent(value_range))) {
            valueSerializer.writeInt8(3 as int32)
            const value_range_3  = value_range as Array<TextPickerRangeContent>
            valueSerializer.writeInt32(value_range_3.length as int32)
            for (let i = 0; i < value_range_3.length; i++) {
                const value_range_3_element : TextPickerRangeContent = value_range_3[i]
                valueSerializer.writeTextPickerRangeContent(value_range_3_element)
            }
        }
        else if (((RuntimeType.OBJECT) == (value_range_type)) && (TypeChecker.isArray_TextCascadePickerRangeContent(value_range))) {
            valueSerializer.writeInt8(4 as int32)
            const value_range_4  = value_range as Array<TextCascadePickerRangeContent>
            valueSerializer.writeInt32(value_range_4.length as int32)
            for (let i = 0; i < value_range_4.length; i++) {
                const value_range_4_element : TextCascadePickerRangeContent = value_range_4[i]
                valueSerializer.writeTextCascadePickerRangeContent(value_range_4_element)
            }
        }
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        valueSerializer.writeInt8(value_value_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_value_type)) {
            const value_value_value  = value_value!
            let value_value_value_type : int32 = RuntimeType.UNDEFINED
            value_value_value_type = runtimeType(value_value_value)
            if (RuntimeType.STRING == value_value_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_value_value_0  = value_value_value as string
                valueSerializer.writeString(value_value_value_0)
            }
            else if (RuntimeType.OBJECT == value_value_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_value_value_1  = value_value_value as Array<string>
                valueSerializer.writeInt32(value_value_value_1.length as int32)
                for (let i = 0; i < value_value_value_1.length; i++) {
                    const value_value_value_1_element : string = value_value_value_1[i]
                    valueSerializer.writeString(value_value_value_1_element)
                }
            }
        }
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            let value_selected_value_type : int32 = RuntimeType.UNDEFINED
            value_selected_value_type = runtimeType(value_selected_value)
            if (RuntimeType.NUMBER == value_selected_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_selected_value_0  = value_selected_value as number
                valueSerializer.writeNumber(value_selected_value_0)
            }
            else if (RuntimeType.OBJECT == value_selected_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_selected_value_1  = value_selected_value as Array<number>
                valueSerializer.writeInt32(value_selected_value_1.length as int32)
                for (let i = 0; i < value_selected_value_1.length; i++) {
                    const value_selected_value_1_element : number = value_selected_value_1[i]
                    valueSerializer.writeNumber(value_selected_value_1_element)
                }
            }
        }
        const value_columnWidths  = value.columnWidths
        let value_columnWidths_type : int32 = RuntimeType.UNDEFINED
        value_columnWidths_type = runtimeType(value_columnWidths)
        valueSerializer.writeInt8(value_columnWidths_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_columnWidths_type)) {
            const value_columnWidths_value  = value_columnWidths!
            valueSerializer.writeInt32(value_columnWidths_value.length as int32)
            for (let i = 0; i < value_columnWidths_value.length; i++) {
                const value_columnWidths_value_element : LengthMetrics = value_columnWidths_value[i]
                valueSerializer.writeLengthMetrics(value_columnWidths_value_element)
            }
        }
    }
    writeTextPickerRangeContent(value: TextPickerRangeContent): void {
        let valueSerializer : Serializer = this
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        if (RuntimeType.STRING == value_icon_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_icon_0  = value_icon as string
            valueSerializer.writeString(value_icon_0)
        }
        else if (RuntimeType.OBJECT == value_icon_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_icon_1  = value_icon as Resource
            valueSerializer.writeResource(value_icon_1)
        }
        const value_text  = value.text
        let value_text_type : int32 = RuntimeType.UNDEFINED
        value_text_type = runtimeType(value_text)
        valueSerializer.writeInt8(value_text_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_text_type)) {
            const value_text_value  = value_text!
            let value_text_value_type : int32 = RuntimeType.UNDEFINED
            value_text_value_type = runtimeType(value_text_value)
            if (RuntimeType.STRING == value_text_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_text_value_0  = value_text_value as string
                valueSerializer.writeString(value_text_value_0)
            }
            else if (RuntimeType.OBJECT == value_text_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_text_value_1  = value_text_value as Resource
                valueSerializer.writeResource(value_text_value_1)
            }
        }
    }
    writeTextPickerResult(value: TextPickerResult): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        if (RuntimeType.STRING == value_value_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_value_0  = value_value as string
            valueSerializer.writeString(value_value_0)
        }
        else if (RuntimeType.OBJECT == value_value_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_value_1  = value_value as Array<string>
            valueSerializer.writeInt32(value_value_1.length as int32)
            for (let i = 0; i < value_value_1.length; i++) {
                const value_value_1_element : string = value_value_1[i]
                valueSerializer.writeString(value_value_1_element)
            }
        }
        const value_index  = value.index
        let value_index_type : int32 = RuntimeType.UNDEFINED
        value_index_type = runtimeType(value_index)
        if (RuntimeType.NUMBER == value_index_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_index_0  = value_index as number
            valueSerializer.writeNumber(value_index_0)
        }
        else if (RuntimeType.OBJECT == value_index_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_index_1  = value_index as Array<number>
            valueSerializer.writeInt32(value_index_1.length as int32)
            for (let i = 0; i < value_index_1.length; i++) {
                const value_index_1_element : number = value_index_1[i]
                valueSerializer.writeNumber(value_index_1_element)
            }
        }
    }
    writeTextStyle_styled_string(value: TextStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTextStyleInterface(value: TextStyleInterface): void {
        let valueSerializer : Serializer = this
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        valueSerializer.writeInt8(value_fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontColor_type)) {
            const value_fontColor_value  = value_fontColor!
            let value_fontColor_value_type : int32 = RuntimeType.UNDEFINED
            value_fontColor_value_type = runtimeType(value_fontColor_value)
            if (TypeChecker.isColor(value_fontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontColor_value_0  = value_fontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontColor_value_1  = value_fontColor_value as number
                valueSerializer.writeNumber(value_fontColor_value_1)
            }
            else if (RuntimeType.STRING == value_fontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontColor_value_2  = value_fontColor_value as string
                valueSerializer.writeString(value_fontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontColor_value_3  = value_fontColor_value as Resource
                valueSerializer.writeResource(value_fontColor_value_3)
            }
        }
        const value_fontFamily  = value.fontFamily
        let value_fontFamily_type : int32 = RuntimeType.UNDEFINED
        value_fontFamily_type = runtimeType(value_fontFamily)
        valueSerializer.writeInt8(value_fontFamily_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontFamily_type)) {
            const value_fontFamily_value  = value_fontFamily!
            let value_fontFamily_value_type : int32 = RuntimeType.UNDEFINED
            value_fontFamily_value_type = runtimeType(value_fontFamily_value)
            if (RuntimeType.STRING == value_fontFamily_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontFamily_value_0  = value_fontFamily_value as string
                valueSerializer.writeString(value_fontFamily_value_0)
            }
            else if (RuntimeType.OBJECT == value_fontFamily_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontFamily_value_1  = value_fontFamily_value as Resource
                valueSerializer.writeResource(value_fontFamily_value_1)
            }
        }
        const value_fontSize  = value.fontSize
        let value_fontSize_type : int32 = RuntimeType.UNDEFINED
        value_fontSize_type = runtimeType(value_fontSize)
        valueSerializer.writeInt8(value_fontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontSize_type)) {
            const value_fontSize_value  = value_fontSize!
            valueSerializer.writeLengthMetrics(value_fontSize_value)
        }
        const value_fontWeight  = value.fontWeight
        let value_fontWeight_type : int32 = RuntimeType.UNDEFINED
        value_fontWeight_type = runtimeType(value_fontWeight)
        valueSerializer.writeInt8(value_fontWeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontWeight_type)) {
            const value_fontWeight_value  = value_fontWeight!
            let value_fontWeight_value_type : int32 = RuntimeType.UNDEFINED
            value_fontWeight_value_type = runtimeType(value_fontWeight_value)
            if (RuntimeType.NUMBER == value_fontWeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontWeight_value_0  = value_fontWeight_value as number
                valueSerializer.writeNumber(value_fontWeight_value_0)
            }
            else if (TypeChecker.isFontWeight(value_fontWeight_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontWeight_value_1  = value_fontWeight_value as FontWeight
                valueSerializer.writeInt32(TypeChecker.FontWeight_ToNumeric(value_fontWeight_value_1))
            }
            else if (RuntimeType.STRING == value_fontWeight_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontWeight_value_2  = value_fontWeight_value as string
                valueSerializer.writeString(value_fontWeight_value_2)
            }
        }
        const value_fontStyle  = value.fontStyle
        let value_fontStyle_type : int32 = RuntimeType.UNDEFINED
        value_fontStyle_type = runtimeType(value_fontStyle)
        valueSerializer.writeInt8(value_fontStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontStyle_type)) {
            const value_fontStyle_value  = (value_fontStyle as FontStyle)
            valueSerializer.writeInt32(TypeChecker.FontStyle_ToNumeric(value_fontStyle_value))
        }
    }
    writeTodayStyle(value: TodayStyle): void {
        let valueSerializer : Serializer = this
        const value_focusedDayColor  = value.focusedDayColor
        let value_focusedDayColor_type : int32 = RuntimeType.UNDEFINED
        value_focusedDayColor_type = runtimeType(value_focusedDayColor)
        valueSerializer.writeInt8(value_focusedDayColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_focusedDayColor_type)) {
            const value_focusedDayColor_value  = value_focusedDayColor!
            let value_focusedDayColor_value_type : int32 = RuntimeType.UNDEFINED
            value_focusedDayColor_value_type = runtimeType(value_focusedDayColor_value)
            if (TypeChecker.isColor(value_focusedDayColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_focusedDayColor_value_0  = value_focusedDayColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_focusedDayColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_focusedDayColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_focusedDayColor_value_1  = value_focusedDayColor_value as number
                valueSerializer.writeNumber(value_focusedDayColor_value_1)
            }
            else if (RuntimeType.STRING == value_focusedDayColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_focusedDayColor_value_2  = value_focusedDayColor_value as string
                valueSerializer.writeString(value_focusedDayColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_focusedDayColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_focusedDayColor_value_3  = value_focusedDayColor_value as Resource
                valueSerializer.writeResource(value_focusedDayColor_value_3)
            }
        }
        const value_focusedLunarColor  = value.focusedLunarColor
        let value_focusedLunarColor_type : int32 = RuntimeType.UNDEFINED
        value_focusedLunarColor_type = runtimeType(value_focusedLunarColor)
        valueSerializer.writeInt8(value_focusedLunarColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_focusedLunarColor_type)) {
            const value_focusedLunarColor_value  = value_focusedLunarColor!
            let value_focusedLunarColor_value_type : int32 = RuntimeType.UNDEFINED
            value_focusedLunarColor_value_type = runtimeType(value_focusedLunarColor_value)
            if (TypeChecker.isColor(value_focusedLunarColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_focusedLunarColor_value_0  = value_focusedLunarColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_focusedLunarColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_focusedLunarColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_focusedLunarColor_value_1  = value_focusedLunarColor_value as number
                valueSerializer.writeNumber(value_focusedLunarColor_value_1)
            }
            else if (RuntimeType.STRING == value_focusedLunarColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_focusedLunarColor_value_2  = value_focusedLunarColor_value as string
                valueSerializer.writeString(value_focusedLunarColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_focusedLunarColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_focusedLunarColor_value_3  = value_focusedLunarColor_value as Resource
                valueSerializer.writeResource(value_focusedLunarColor_value_3)
            }
        }
        const value_focusedAreaBackgroundColor  = value.focusedAreaBackgroundColor
        let value_focusedAreaBackgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_focusedAreaBackgroundColor_type = runtimeType(value_focusedAreaBackgroundColor)
        valueSerializer.writeInt8(value_focusedAreaBackgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_focusedAreaBackgroundColor_type)) {
            const value_focusedAreaBackgroundColor_value  = value_focusedAreaBackgroundColor!
            let value_focusedAreaBackgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_focusedAreaBackgroundColor_value_type = runtimeType(value_focusedAreaBackgroundColor_value)
            if (TypeChecker.isColor(value_focusedAreaBackgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_focusedAreaBackgroundColor_value_0  = value_focusedAreaBackgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_focusedAreaBackgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_focusedAreaBackgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_focusedAreaBackgroundColor_value_1  = value_focusedAreaBackgroundColor_value as number
                valueSerializer.writeNumber(value_focusedAreaBackgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_focusedAreaBackgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_focusedAreaBackgroundColor_value_2  = value_focusedAreaBackgroundColor_value as string
                valueSerializer.writeString(value_focusedAreaBackgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_focusedAreaBackgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_focusedAreaBackgroundColor_value_3  = value_focusedAreaBackgroundColor_value as Resource
                valueSerializer.writeResource(value_focusedAreaBackgroundColor_value_3)
            }
        }
        const value_focusedAreaRadius  = value.focusedAreaRadius
        let value_focusedAreaRadius_type : int32 = RuntimeType.UNDEFINED
        value_focusedAreaRadius_type = runtimeType(value_focusedAreaRadius)
        valueSerializer.writeInt8(value_focusedAreaRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_focusedAreaRadius_type)) {
            const value_focusedAreaRadius_value  = value_focusedAreaRadius!
            valueSerializer.writeNumber(value_focusedAreaRadius_value)
        }
    }
    writeToolbarItem(value: ToolbarItem): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        if (RuntimeType.STRING == value_value_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_value_0  = value_value as string
            valueSerializer.writeString(value_value_0)
        }
        else if (RuntimeType.OBJECT == value_value_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_value_1  = value_value as Resource
            valueSerializer.writeResource(value_value_1)
        }
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            let value_icon_value_type : int32 = RuntimeType.UNDEFINED
            value_icon_value_type = runtimeType(value_icon_value)
            if (RuntimeType.STRING == value_icon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_icon_value_0  = value_icon_value as string
                valueSerializer.writeString(value_icon_value_0)
            }
            else if (RuntimeType.OBJECT == value_icon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_icon_value_1  = value_icon_value as Resource
                valueSerializer.writeResource(value_icon_value_1)
            }
        }
        // TBD: Symbol cannot be realized at present.
        let value_symbolIcon_type : int32 = RuntimeType.UNDEFINED
        valueSerializer.writeInt8(value_symbolIcon_type as int32)
        const value_action  = value.action
        let value_action_type : int32 = RuntimeType.UNDEFINED
        value_action_type = runtimeType(value_action)
        valueSerializer.writeInt8(value_action_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_action_type)) {
            const value_action_value  = value_action!
            valueSerializer.holdAndWriteCallback(value_action_value)
        }
        const value_status  = value.status
        let value_status_type : int32 = RuntimeType.UNDEFINED
        value_status_type = runtimeType(value_status)
        valueSerializer.writeInt8(value_status_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_status_type)) {
            const value_status_value  = (value_status as ToolbarItemStatus)
            valueSerializer.writeInt32(TypeChecker.ToolbarItemStatus_ToNumeric(value_status_value))
        }
        const value_activeIcon  = value.activeIcon
        let value_activeIcon_type : int32 = RuntimeType.UNDEFINED
        value_activeIcon_type = runtimeType(value_activeIcon)
        valueSerializer.writeInt8(value_activeIcon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_activeIcon_type)) {
            const value_activeIcon_value  = value_activeIcon!
            let value_activeIcon_value_type : int32 = RuntimeType.UNDEFINED
            value_activeIcon_value_type = runtimeType(value_activeIcon_value)
            if (RuntimeType.STRING == value_activeIcon_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_activeIcon_value_0  = value_activeIcon_value as string
                valueSerializer.writeString(value_activeIcon_value_0)
            }
            else if (RuntimeType.OBJECT == value_activeIcon_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_activeIcon_value_1  = value_activeIcon_value as Resource
                valueSerializer.writeResource(value_activeIcon_value_1)
            }
        }
        let value_activeSymbolIcon_type : int32 = RuntimeType.UNDEFINED
        valueSerializer.writeInt8(value_activeSymbolIcon_type as int32)
    }
    writeTouchEvent(value: TouchEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeTransitionOptions(value: TransitionOptions): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        let value_type_type : int32 = RuntimeType.UNDEFINED
        value_type_type = runtimeType(value_type)
        valueSerializer.writeInt8(value_type_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_type_type)) {
            const value_type_value  = (value_type as TransitionType)
            valueSerializer.writeInt32(TypeChecker.TransitionType_ToNumeric(value_type_value))
        }
        const value_opacity  = value.opacity
        let value_opacity_type : int32 = RuntimeType.UNDEFINED
        value_opacity_type = runtimeType(value_opacity)
        valueSerializer.writeInt8(value_opacity_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_opacity_type)) {
            const value_opacity_value  = value_opacity!
            valueSerializer.writeNumber(value_opacity_value)
        }
        const value_translate  = value.translate
        let value_translate_type : int32 = RuntimeType.UNDEFINED
        value_translate_type = runtimeType(value_translate)
        valueSerializer.writeInt8(value_translate_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_translate_type)) {
            const value_translate_value  = value_translate!
            valueSerializer.writeTranslateOptions(value_translate_value)
        }
        const value_scale  = value.scale
        let value_scale_type : int32 = RuntimeType.UNDEFINED
        value_scale_type = runtimeType(value_scale)
        valueSerializer.writeInt8(value_scale_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scale_type)) {
            const value_scale_value  = value_scale!
            valueSerializer.writeScaleOptions(value_scale_value)
        }
        const value_rotate  = value.rotate
        let value_rotate_type : int32 = RuntimeType.UNDEFINED
        value_rotate_type = runtimeType(value_rotate)
        valueSerializer.writeInt8(value_rotate_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_rotate_type)) {
            const value_rotate_value  = value_rotate!
            valueSerializer.writeRotateOptions(value_rotate_value)
        }
    }
    writeUnderlineColor(value: UnderlineColor): void {
        let valueSerializer : Serializer = this
        const value_typing  = value.typing
        let value_typing_type : int32 = RuntimeType.UNDEFINED
        value_typing_type = runtimeType(value_typing)
        valueSerializer.writeInt8(value_typing_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_typing_type)) {
            const value_typing_value  = value_typing!
            let value_typing_value_type : int32 = RuntimeType.UNDEFINED
            value_typing_value_type = runtimeType(value_typing_value)
            if (TypeChecker.isColor(value_typing_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_typing_value_0  = value_typing_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_typing_value_0))
            }
            else if (RuntimeType.NUMBER == value_typing_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_typing_value_1  = value_typing_value as number
                valueSerializer.writeNumber(value_typing_value_1)
            }
            else if (RuntimeType.STRING == value_typing_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_typing_value_2  = value_typing_value as string
                valueSerializer.writeString(value_typing_value_2)
            }
            else if (RuntimeType.OBJECT == value_typing_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_typing_value_3  = value_typing_value as Resource
                valueSerializer.writeResource(value_typing_value_3)
            }
        }
        const value_normal  = value.normal
        let value_normal_type : int32 = RuntimeType.UNDEFINED
        value_normal_type = runtimeType(value_normal)
        valueSerializer.writeInt8(value_normal_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_normal_type)) {
            const value_normal_value  = value_normal!
            let value_normal_value_type : int32 = RuntimeType.UNDEFINED
            value_normal_value_type = runtimeType(value_normal_value)
            if (TypeChecker.isColor(value_normal_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_normal_value_0  = value_normal_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_normal_value_0))
            }
            else if (RuntimeType.NUMBER == value_normal_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_normal_value_1  = value_normal_value as number
                valueSerializer.writeNumber(value_normal_value_1)
            }
            else if (RuntimeType.STRING == value_normal_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_normal_value_2  = value_normal_value as string
                valueSerializer.writeString(value_normal_value_2)
            }
            else if (RuntimeType.OBJECT == value_normal_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_normal_value_3  = value_normal_value as Resource
                valueSerializer.writeResource(value_normal_value_3)
            }
        }
        const value_error  = value.error
        let value_error_type : int32 = RuntimeType.UNDEFINED
        value_error_type = runtimeType(value_error)
        valueSerializer.writeInt8(value_error_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_error_type)) {
            const value_error_value  = value_error!
            let value_error_value_type : int32 = RuntimeType.UNDEFINED
            value_error_value_type = runtimeType(value_error_value)
            if (TypeChecker.isColor(value_error_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_error_value_0  = value_error_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_error_value_0))
            }
            else if (RuntimeType.NUMBER == value_error_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_error_value_1  = value_error_value as number
                valueSerializer.writeNumber(value_error_value_1)
            }
            else if (RuntimeType.STRING == value_error_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_error_value_2  = value_error_value as string
                valueSerializer.writeString(value_error_value_2)
            }
            else if (RuntimeType.OBJECT == value_error_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_error_value_3  = value_error_value as Resource
                valueSerializer.writeResource(value_error_value_3)
            }
        }
        const value_disable  = value.disable
        let value_disable_type : int32 = RuntimeType.UNDEFINED
        value_disable_type = runtimeType(value_disable)
        valueSerializer.writeInt8(value_disable_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disable_type)) {
            const value_disable_value  = value_disable!
            let value_disable_value_type : int32 = RuntimeType.UNDEFINED
            value_disable_value_type = runtimeType(value_disable_value)
            if (TypeChecker.isColor(value_disable_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_disable_value_0  = value_disable_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_disable_value_0))
            }
            else if (RuntimeType.NUMBER == value_disable_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_disable_value_1  = value_disable_value as number
                valueSerializer.writeNumber(value_disable_value_1)
            }
            else if (RuntimeType.STRING == value_disable_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_disable_value_2  = value_disable_value as string
                valueSerializer.writeString(value_disable_value_2)
            }
            else if (RuntimeType.OBJECT == value_disable_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_disable_value_3  = value_disable_value as Resource
                valueSerializer.writeResource(value_disable_value_3)
            }
        }
    }
    writeVideoOptions(value: VideoOptions): void {
        let valueSerializer : Serializer = this
        const value_src  = value.src
        let value_src_type : int32 = RuntimeType.UNDEFINED
        value_src_type = runtimeType(value_src)
        valueSerializer.writeInt8(value_src_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_src_type)) {
            const value_src_value  = value_src!
            let value_src_value_type : int32 = RuntimeType.UNDEFINED
            value_src_value_type = runtimeType(value_src_value)
            if (RuntimeType.STRING == value_src_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_src_value_0  = value_src_value as string
                valueSerializer.writeString(value_src_value_0)
            }
            else if (RuntimeType.OBJECT == value_src_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_src_value_1  = value_src_value as Resource
                valueSerializer.writeResource(value_src_value_1)
            }
        }
        const value_currentProgressRate  = value.currentProgressRate
        let value_currentProgressRate_type : int32 = RuntimeType.UNDEFINED
        value_currentProgressRate_type = runtimeType(value_currentProgressRate)
        valueSerializer.writeInt8(value_currentProgressRate_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_currentProgressRate_type)) {
            const value_currentProgressRate_value  = value_currentProgressRate!
            let value_currentProgressRate_value_type : int32 = RuntimeType.UNDEFINED
            value_currentProgressRate_value_type = runtimeType(value_currentProgressRate_value)
            if (RuntimeType.NUMBER == value_currentProgressRate_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_currentProgressRate_value_0  = value_currentProgressRate_value as number
                valueSerializer.writeNumber(value_currentProgressRate_value_0)
            }
            else if (RuntimeType.STRING == value_currentProgressRate_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_currentProgressRate_value_1  = value_currentProgressRate_value as string
                valueSerializer.writeString(value_currentProgressRate_value_1)
            }
            else if (TypeChecker.isPlaybackSpeed(value_currentProgressRate_value)) {
                valueSerializer.writeInt8(2 as int32)
                const value_currentProgressRate_value_2  = value_currentProgressRate_value as PlaybackSpeed
                valueSerializer.writeInt32(TypeChecker.PlaybackSpeed_ToNumeric(value_currentProgressRate_value_2))
            }
        }
        const value_previewUri  = value.previewUri
        let value_previewUri_type : int32 = RuntimeType.UNDEFINED
        value_previewUri_type = runtimeType(value_previewUri)
        valueSerializer.writeInt8(value_previewUri_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewUri_type)) {
            const value_previewUri_value  = value_previewUri!
            let value_previewUri_value_type : int32 = RuntimeType.UNDEFINED
            value_previewUri_value_type = runtimeType(value_previewUri_value)
            if (RuntimeType.STRING == value_previewUri_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_previewUri_value_0  = value_previewUri_value as string
                valueSerializer.writeString(value_previewUri_value_0)
            }
            else if (TypeChecker.isPixelMap(value_previewUri_value, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_previewUri_value_1  = value_previewUri_value as PixelMap
                valueSerializer.writePixelMap(value_previewUri_value_1)
            }
            else if (TypeChecker.isResource(value_previewUri_value, false, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_previewUri_value_2  = value_previewUri_value as Resource
                valueSerializer.writeResource(value_previewUri_value_2)
            }
        }
        const value_controller  = value.controller
        let value_controller_type : int32 = RuntimeType.UNDEFINED
        value_controller_type = runtimeType(value_controller)
        valueSerializer.writeInt8(value_controller_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_controller_type)) {
            const value_controller_value  = value_controller!
            valueSerializer.writeVideoController(value_controller_value)
        }
        const value_imageAIOptions  = value.imageAIOptions
        let value_imageAIOptions_type : int32 = RuntimeType.UNDEFINED
        value_imageAIOptions_type = runtimeType(value_imageAIOptions)
        valueSerializer.writeInt8(value_imageAIOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_imageAIOptions_type)) {
            const value_imageAIOptions_value  = value_imageAIOptions!
            valueSerializer.writeImageAIOptions(value_imageAIOptions_value)
        }
        const value_posterOptions  = value.posterOptions
        let value_posterOptions_type : int32 = RuntimeType.UNDEFINED
        value_posterOptions_type = runtimeType(value_posterOptions)
        valueSerializer.writeInt8(value_posterOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_posterOptions_type)) {
            const value_posterOptions_value  = value_posterOptions!
            valueSerializer.writePosterOptions(value_posterOptions_value)
        }
    }
    writeWeekStyle(value: WeekStyle): void {
        let valueSerializer : Serializer = this
        const value_weekColor  = value.weekColor
        let value_weekColor_type : int32 = RuntimeType.UNDEFINED
        value_weekColor_type = runtimeType(value_weekColor)
        valueSerializer.writeInt8(value_weekColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_weekColor_type)) {
            const value_weekColor_value  = value_weekColor!
            let value_weekColor_value_type : int32 = RuntimeType.UNDEFINED
            value_weekColor_value_type = runtimeType(value_weekColor_value)
            if (TypeChecker.isColor(value_weekColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_weekColor_value_0  = value_weekColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_weekColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_weekColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_weekColor_value_1  = value_weekColor_value as number
                valueSerializer.writeNumber(value_weekColor_value_1)
            }
            else if (RuntimeType.STRING == value_weekColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_weekColor_value_2  = value_weekColor_value as string
                valueSerializer.writeString(value_weekColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_weekColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_weekColor_value_3  = value_weekColor_value as Resource
                valueSerializer.writeResource(value_weekColor_value_3)
            }
        }
        const value_weekendDayColor  = value.weekendDayColor
        let value_weekendDayColor_type : int32 = RuntimeType.UNDEFINED
        value_weekendDayColor_type = runtimeType(value_weekendDayColor)
        valueSerializer.writeInt8(value_weekendDayColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_weekendDayColor_type)) {
            const value_weekendDayColor_value  = value_weekendDayColor!
            let value_weekendDayColor_value_type : int32 = RuntimeType.UNDEFINED
            value_weekendDayColor_value_type = runtimeType(value_weekendDayColor_value)
            if (TypeChecker.isColor(value_weekendDayColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_weekendDayColor_value_0  = value_weekendDayColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_weekendDayColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_weekendDayColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_weekendDayColor_value_1  = value_weekendDayColor_value as number
                valueSerializer.writeNumber(value_weekendDayColor_value_1)
            }
            else if (RuntimeType.STRING == value_weekendDayColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_weekendDayColor_value_2  = value_weekendDayColor_value as string
                valueSerializer.writeString(value_weekendDayColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_weekendDayColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_weekendDayColor_value_3  = value_weekendDayColor_value as Resource
                valueSerializer.writeResource(value_weekendDayColor_value_3)
            }
        }
        const value_weekendLunarColor  = value.weekendLunarColor
        let value_weekendLunarColor_type : int32 = RuntimeType.UNDEFINED
        value_weekendLunarColor_type = runtimeType(value_weekendLunarColor)
        valueSerializer.writeInt8(value_weekendLunarColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_weekendLunarColor_type)) {
            const value_weekendLunarColor_value  = value_weekendLunarColor!
            let value_weekendLunarColor_value_type : int32 = RuntimeType.UNDEFINED
            value_weekendLunarColor_value_type = runtimeType(value_weekendLunarColor_value)
            if (TypeChecker.isColor(value_weekendLunarColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_weekendLunarColor_value_0  = value_weekendLunarColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_weekendLunarColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_weekendLunarColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_weekendLunarColor_value_1  = value_weekendLunarColor_value as number
                valueSerializer.writeNumber(value_weekendLunarColor_value_1)
            }
            else if (RuntimeType.STRING == value_weekendLunarColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_weekendLunarColor_value_2  = value_weekendLunarColor_value as string
                valueSerializer.writeString(value_weekendLunarColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_weekendLunarColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_weekendLunarColor_value_3  = value_weekendLunarColor_value as Resource
                valueSerializer.writeResource(value_weekendLunarColor_value_3)
            }
        }
        const value_weekFontSize  = value.weekFontSize
        let value_weekFontSize_type : int32 = RuntimeType.UNDEFINED
        value_weekFontSize_type = runtimeType(value_weekFontSize)
        valueSerializer.writeInt8(value_weekFontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_weekFontSize_type)) {
            const value_weekFontSize_value  = value_weekFontSize!
            valueSerializer.writeNumber(value_weekFontSize_value)
        }
        const value_weekHeight  = value.weekHeight
        let value_weekHeight_type : int32 = RuntimeType.UNDEFINED
        value_weekHeight_type = runtimeType(value_weekHeight)
        valueSerializer.writeInt8(value_weekHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_weekHeight_type)) {
            const value_weekHeight_value  = value_weekHeight!
            valueSerializer.writeNumber(value_weekHeight_value)
        }
        const value_weekWidth  = value.weekWidth
        let value_weekWidth_type : int32 = RuntimeType.UNDEFINED
        value_weekWidth_type = runtimeType(value_weekWidth)
        valueSerializer.writeInt8(value_weekWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_weekWidth_type)) {
            const value_weekWidth_value  = value_weekWidth!
            valueSerializer.writeNumber(value_weekWidth_value)
        }
        const value_weekAndDayRowSpace  = value.weekAndDayRowSpace
        let value_weekAndDayRowSpace_type : int32 = RuntimeType.UNDEFINED
        value_weekAndDayRowSpace_type = runtimeType(value_weekAndDayRowSpace)
        valueSerializer.writeInt8(value_weekAndDayRowSpace_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_weekAndDayRowSpace_type)) {
            const value_weekAndDayRowSpace_value  = value_weekAndDayRowSpace!
            valueSerializer.writeNumber(value_weekAndDayRowSpace_value)
        }
    }
    writeWorkStateStyle(value: WorkStateStyle): void {
        let valueSerializer : Serializer = this
        const value_workDayMarkColor  = value.workDayMarkColor
        let value_workDayMarkColor_type : int32 = RuntimeType.UNDEFINED
        value_workDayMarkColor_type = runtimeType(value_workDayMarkColor)
        valueSerializer.writeInt8(value_workDayMarkColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_workDayMarkColor_type)) {
            const value_workDayMarkColor_value  = value_workDayMarkColor!
            let value_workDayMarkColor_value_type : int32 = RuntimeType.UNDEFINED
            value_workDayMarkColor_value_type = runtimeType(value_workDayMarkColor_value)
            if (TypeChecker.isColor(value_workDayMarkColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_workDayMarkColor_value_0  = value_workDayMarkColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_workDayMarkColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_workDayMarkColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_workDayMarkColor_value_1  = value_workDayMarkColor_value as number
                valueSerializer.writeNumber(value_workDayMarkColor_value_1)
            }
            else if (RuntimeType.STRING == value_workDayMarkColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_workDayMarkColor_value_2  = value_workDayMarkColor_value as string
                valueSerializer.writeString(value_workDayMarkColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_workDayMarkColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_workDayMarkColor_value_3  = value_workDayMarkColor_value as Resource
                valueSerializer.writeResource(value_workDayMarkColor_value_3)
            }
        }
        const value_offDayMarkColor  = value.offDayMarkColor
        let value_offDayMarkColor_type : int32 = RuntimeType.UNDEFINED
        value_offDayMarkColor_type = runtimeType(value_offDayMarkColor)
        valueSerializer.writeInt8(value_offDayMarkColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offDayMarkColor_type)) {
            const value_offDayMarkColor_value  = value_offDayMarkColor!
            let value_offDayMarkColor_value_type : int32 = RuntimeType.UNDEFINED
            value_offDayMarkColor_value_type = runtimeType(value_offDayMarkColor_value)
            if (TypeChecker.isColor(value_offDayMarkColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_offDayMarkColor_value_0  = value_offDayMarkColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_offDayMarkColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_offDayMarkColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_offDayMarkColor_value_1  = value_offDayMarkColor_value as number
                valueSerializer.writeNumber(value_offDayMarkColor_value_1)
            }
            else if (RuntimeType.STRING == value_offDayMarkColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_offDayMarkColor_value_2  = value_offDayMarkColor_value as string
                valueSerializer.writeString(value_offDayMarkColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_offDayMarkColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_offDayMarkColor_value_3  = value_offDayMarkColor_value as Resource
                valueSerializer.writeResource(value_offDayMarkColor_value_3)
            }
        }
        const value_workDayMarkSize  = value.workDayMarkSize
        let value_workDayMarkSize_type : int32 = RuntimeType.UNDEFINED
        value_workDayMarkSize_type = runtimeType(value_workDayMarkSize)
        valueSerializer.writeInt8(value_workDayMarkSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_workDayMarkSize_type)) {
            const value_workDayMarkSize_value  = value_workDayMarkSize!
            valueSerializer.writeNumber(value_workDayMarkSize_value)
        }
        const value_offDayMarkSize  = value.offDayMarkSize
        let value_offDayMarkSize_type : int32 = RuntimeType.UNDEFINED
        value_offDayMarkSize_type = runtimeType(value_offDayMarkSize)
        valueSerializer.writeInt8(value_offDayMarkSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offDayMarkSize_type)) {
            const value_offDayMarkSize_value  = value_offDayMarkSize!
            valueSerializer.writeNumber(value_offDayMarkSize_value)
        }
        const value_workStateWidth  = value.workStateWidth
        let value_workStateWidth_type : int32 = RuntimeType.UNDEFINED
        value_workStateWidth_type = runtimeType(value_workStateWidth)
        valueSerializer.writeInt8(value_workStateWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_workStateWidth_type)) {
            const value_workStateWidth_value  = value_workStateWidth!
            valueSerializer.writeNumber(value_workStateWidth_value)
        }
        const value_workStateHorizontalMovingDistance  = value.workStateHorizontalMovingDistance
        let value_workStateHorizontalMovingDistance_type : int32 = RuntimeType.UNDEFINED
        value_workStateHorizontalMovingDistance_type = runtimeType(value_workStateHorizontalMovingDistance)
        valueSerializer.writeInt8(value_workStateHorizontalMovingDistance_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_workStateHorizontalMovingDistance_type)) {
            const value_workStateHorizontalMovingDistance_value  = value_workStateHorizontalMovingDistance!
            valueSerializer.writeNumber(value_workStateHorizontalMovingDistance_value)
        }
        const value_workStateVerticalMovingDistance  = value.workStateVerticalMovingDistance
        let value_workStateVerticalMovingDistance_type : int32 = RuntimeType.UNDEFINED
        value_workStateVerticalMovingDistance_type = runtimeType(value_workStateVerticalMovingDistance)
        valueSerializer.writeInt8(value_workStateVerticalMovingDistance_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_workStateVerticalMovingDistance_type)) {
            const value_workStateVerticalMovingDistance_value  = value_workStateVerticalMovingDistance!
            valueSerializer.writeNumber(value_workStateVerticalMovingDistance_value)
        }
    }
    writeXComponentOptions(value: XComponentOptions): void {
        let valueSerializer : Serializer = this
        const value_type  = value.type
        valueSerializer.writeInt32(TypeChecker.XComponentType_ToNumeric(value_type))
        const value_controller  = value.controller
        valueSerializer.writeXComponentController(value_controller)
        const value_imageAIOptions  = value.imageAIOptions
        let value_imageAIOptions_type : int32 = RuntimeType.UNDEFINED
        value_imageAIOptions_type = runtimeType(value_imageAIOptions)
        valueSerializer.writeInt8(value_imageAIOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_imageAIOptions_type)) {
            const value_imageAIOptions_value  = value_imageAIOptions!
            valueSerializer.writeImageAIOptions(value_imageAIOptions_value)
        }
        const value_screenId  = value.screenId
        let value_screenId_type : int32 = RuntimeType.UNDEFINED
        value_screenId_type = runtimeType(value_screenId)
        valueSerializer.writeInt8(value_screenId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_screenId_type)) {
            const value_screenId_value  = value_screenId!
            valueSerializer.writeNumber(value_screenId_value)
        }
    }
    writeAccessibilityHoverEvent(value: AccessibilityHoverEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeActionSheetOptions(value: ActionSheetOptions): void {
        let valueSerializer : Serializer = this
        const value_title  = value.title
        let value_title_type : int32 = RuntimeType.UNDEFINED
        value_title_type = runtimeType(value_title)
        if (RuntimeType.STRING == value_title_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_title_0  = value_title as string
            valueSerializer.writeString(value_title_0)
        }
        else if (RuntimeType.OBJECT == value_title_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_title_1  = value_title as Resource
            valueSerializer.writeResource(value_title_1)
        }
        const value_subtitle  = value.subtitle
        let value_subtitle_type : int32 = RuntimeType.UNDEFINED
        value_subtitle_type = runtimeType(value_subtitle)
        valueSerializer.writeInt8(value_subtitle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_subtitle_type)) {
            const value_subtitle_value  = value_subtitle!
            let value_subtitle_value_type : int32 = RuntimeType.UNDEFINED
            value_subtitle_value_type = runtimeType(value_subtitle_value)
            if (RuntimeType.STRING == value_subtitle_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_subtitle_value_0  = value_subtitle_value as string
                valueSerializer.writeString(value_subtitle_value_0)
            }
            else if (RuntimeType.OBJECT == value_subtitle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_subtitle_value_1  = value_subtitle_value as Resource
                valueSerializer.writeResource(value_subtitle_value_1)
            }
        }
        const value_message  = value.message
        let value_message_type : int32 = RuntimeType.UNDEFINED
        value_message_type = runtimeType(value_message)
        if (RuntimeType.STRING == value_message_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_message_0  = value_message as string
            valueSerializer.writeString(value_message_0)
        }
        else if (RuntimeType.OBJECT == value_message_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_message_1  = value_message as Resource
            valueSerializer.writeResource(value_message_1)
        }
        const value_confirm  = value.confirm
        let value_confirm_type : int32 = RuntimeType.UNDEFINED
        value_confirm_type = runtimeType(value_confirm)
        valueSerializer.writeInt8(value_confirm_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_confirm_type)) {
            const value_confirm_value  = value_confirm!
            valueSerializer.writeActionSheetButtonOptions(value_confirm_value)
        }
        const value_cancel  = value.cancel
        let value_cancel_type : int32 = RuntimeType.UNDEFINED
        value_cancel_type = runtimeType(value_cancel)
        valueSerializer.writeInt8(value_cancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cancel_type)) {
            const value_cancel_value  = value_cancel!
            valueSerializer.holdAndWriteCallback(value_cancel_value)
        }
        const value_sheets  = value.sheets
        valueSerializer.writeInt32(value_sheets.length as int32)
        for (let i = 0; i < value_sheets.length; i++) {
            const value_sheets_element : SheetInfo = value_sheets[i]
            valueSerializer.writeSheetInfo(value_sheets_element)
        }
        const value_autoCancel  = value.autoCancel
        let value_autoCancel_type : int32 = RuntimeType.UNDEFINED
        value_autoCancel_type = runtimeType(value_autoCancel)
        valueSerializer.writeInt8(value_autoCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_autoCancel_type)) {
            const value_autoCancel_value  = value_autoCancel!
            valueSerializer.writeBoolean(value_autoCancel_value)
        }
        const value_alignment  = value.alignment
        let value_alignment_type : int32 = RuntimeType.UNDEFINED
        value_alignment_type = runtimeType(value_alignment)
        valueSerializer.writeInt8(value_alignment_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignment_type)) {
            const value_alignment_value  = (value_alignment as DialogAlignment)
            valueSerializer.writeInt32(TypeChecker.DialogAlignment_ToNumeric(value_alignment_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeActionSheetOffset(value_offset_value)
        }
        const value_maskRect  = value.maskRect
        let value_maskRect_type : int32 = RuntimeType.UNDEFINED
        value_maskRect_type = runtimeType(value_maskRect)
        valueSerializer.writeInt8(value_maskRect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskRect_type)) {
            const value_maskRect_value  = value_maskRect!
            valueSerializer.writeRectangle(value_maskRect_value)
        }
        const value_showInSubWindow  = value.showInSubWindow
        let value_showInSubWindow_type : int32 = RuntimeType.UNDEFINED
        value_showInSubWindow_type = runtimeType(value_showInSubWindow)
        valueSerializer.writeInt8(value_showInSubWindow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showInSubWindow_type)) {
            const value_showInSubWindow_value  = value_showInSubWindow!
            valueSerializer.writeBoolean(value_showInSubWindow_value)
        }
        const value_isModal  = value.isModal
        let value_isModal_type : int32 = RuntimeType.UNDEFINED
        value_isModal_type = runtimeType(value_isModal)
        valueSerializer.writeInt8(value_isModal_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isModal_type)) {
            const value_isModal_value  = value_isModal!
            valueSerializer.writeBoolean(value_isModal_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_onWillDismiss  = value.onWillDismiss
        let value_onWillDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillDismiss_type = runtimeType(value_onWillDismiss)
        valueSerializer.writeInt8(value_onWillDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDismiss_type)) {
            const value_onWillDismiss_value  = value_onWillDismiss!
            valueSerializer.holdAndWriteCallback(value_onWillDismiss_value)
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
        const value_cornerRadius  = value.cornerRadius
        let value_cornerRadius_type : int32 = RuntimeType.UNDEFINED
        value_cornerRadius_type = runtimeType(value_cornerRadius)
        valueSerializer.writeInt8(value_cornerRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cornerRadius_type)) {
            const value_cornerRadius_value  = value_cornerRadius!
            let value_cornerRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_cornerRadius_value_type = runtimeType(value_cornerRadius_value)
            if (((RuntimeType.NUMBER) == (value_cornerRadius_value_type)) || ((RuntimeType.STRING) == (value_cornerRadius_value_type)) || (((RuntimeType.OBJECT) == (value_cornerRadius_value_type)) && (TypeChecker.isResource(value_cornerRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_cornerRadius_value_0  = value_cornerRadius_value as Dimension
                valueSerializer.writeLength(value_cornerRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_cornerRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_cornerRadius_value_1  = value_cornerRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_cornerRadius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_cornerRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_cornerRadius_value_2  = value_cornerRadius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_cornerRadius_value_2)
            }
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeLength(value_height_value)
        }
        const value_borderWidth  = value.borderWidth
        let value_borderWidth_type : int32 = RuntimeType.UNDEFINED
        value_borderWidth_type = runtimeType(value_borderWidth)
        valueSerializer.writeInt8(value_borderWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderWidth_type)) {
            const value_borderWidth_value  = value_borderWidth!
            let value_borderWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_borderWidth_value_type = runtimeType(value_borderWidth_value)
            if (((RuntimeType.NUMBER) == (value_borderWidth_value_type)) || ((RuntimeType.STRING) == (value_borderWidth_value_type)) || (((RuntimeType.OBJECT) == (value_borderWidth_value_type)) && (TypeChecker.isResource(value_borderWidth_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderWidth_value_0  = value_borderWidth_value as Dimension
                valueSerializer.writeLength(value_borderWidth_value_0)
            }
            else if (TypeChecker.isEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderWidth_value_1  = value_borderWidth_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_borderWidth_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderWidth_value_2  = value_borderWidth_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_borderWidth_value_2)
            }
        }
        const value_borderColor  = value.borderColor
        let value_borderColor_type : int32 = RuntimeType.UNDEFINED
        value_borderColor_type = runtimeType(value_borderColor)
        valueSerializer.writeInt8(value_borderColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderColor_type)) {
            const value_borderColor_value  = value_borderColor!
            let value_borderColor_value_type : int32 = RuntimeType.UNDEFINED
            value_borderColor_value_type = runtimeType(value_borderColor_value)
            if ((TypeChecker.isColor(value_borderColor_value)) || (RuntimeType.NUMBER == value_borderColor_value_type) || (RuntimeType.STRING == value_borderColor_value_type) || (RuntimeType.OBJECT == value_borderColor_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderColor_value_0  = value_borderColor_value as ResourceColor
                let value_borderColor_value_0_type : int32 = RuntimeType.UNDEFINED
                value_borderColor_value_0_type = runtimeType(value_borderColor_value_0)
                if (TypeChecker.isColor(value_borderColor_value_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_borderColor_value_0_0  = value_borderColor_value_0 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_borderColor_value_0_0))
                }
                else if (RuntimeType.NUMBER == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_borderColor_value_0_1  = value_borderColor_value_0 as number
                    valueSerializer.writeNumber(value_borderColor_value_0_1)
                }
                else if (RuntimeType.STRING == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_borderColor_value_0_2  = value_borderColor_value_0 as string
                    valueSerializer.writeString(value_borderColor_value_0_2)
                }
                else if (RuntimeType.OBJECT == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_borderColor_value_0_3  = value_borderColor_value_0 as Resource
                    valueSerializer.writeResource(value_borderColor_value_0_3)
                }
            }
            else if (TypeChecker.isEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderColor_value_1  = value_borderColor_value as EdgeColors
                valueSerializer.writeEdgeColors(value_borderColor_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderColor_value_2  = value_borderColor_value as LocalizedEdgeColors
                valueSerializer.writeLocalizedEdgeColors(value_borderColor_value_2)
            }
        }
        const value_borderStyle  = value.borderStyle
        let value_borderStyle_type : int32 = RuntimeType.UNDEFINED
        value_borderStyle_type = runtimeType(value_borderStyle)
        valueSerializer.writeInt8(value_borderStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderStyle_type)) {
            const value_borderStyle_value  = value_borderStyle!
            let value_borderStyle_value_type : int32 = RuntimeType.UNDEFINED
            value_borderStyle_value_type = runtimeType(value_borderStyle_value)
            if (TypeChecker.isBorderStyle(value_borderStyle_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderStyle_value_0  = value_borderStyle_value as BorderStyle
                valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_borderStyle_value_0))
            }
            else if (RuntimeType.OBJECT == value_borderStyle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderStyle_value_1  = value_borderStyle_value as EdgeStyles
                valueSerializer.writeEdgeStyles(value_borderStyle_value_1)
            }
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_onDidAppear  = value.onDidAppear
        let value_onDidAppear_type : int32 = RuntimeType.UNDEFINED
        value_onDidAppear_type = runtimeType(value_onDidAppear)
        valueSerializer.writeInt8(value_onDidAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidAppear_type)) {
            const value_onDidAppear_value  = value_onDidAppear!
            valueSerializer.holdAndWriteCallback(value_onDidAppear_value)
        }
        const value_onDidDisappear  = value.onDidDisappear
        let value_onDidDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDidDisappear_type = runtimeType(value_onDidDisappear)
        valueSerializer.writeInt8(value_onDidDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidDisappear_type)) {
            const value_onDidDisappear_value  = value_onDidDisappear!
            valueSerializer.holdAndWriteCallback(value_onDidDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_levelMode  = value.levelMode
        let value_levelMode_type : int32 = RuntimeType.UNDEFINED
        value_levelMode_type = runtimeType(value_levelMode)
        valueSerializer.writeInt8(value_levelMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelMode_type)) {
            const value_levelMode_value  = value_levelMode!
            valueSerializer.writeLevelMode(value_levelMode_value)
        }
        const value_levelUniqueId  = value.levelUniqueId
        let value_levelUniqueId_type : int32 = RuntimeType.UNDEFINED
        value_levelUniqueId_type = runtimeType(value_levelUniqueId)
        valueSerializer.writeInt8(value_levelUniqueId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelUniqueId_type)) {
            const value_levelUniqueId_value  = value_levelUniqueId!
            valueSerializer.writeNumber(value_levelUniqueId_value)
        }
        const value_immersiveMode  = value.immersiveMode
        let value_immersiveMode_type : int32 = RuntimeType.UNDEFINED
        value_immersiveMode_type = runtimeType(value_immersiveMode)
        valueSerializer.writeInt8(value_immersiveMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_immersiveMode_type)) {
            const value_immersiveMode_value  = value_immersiveMode!
            valueSerializer.writeImmersiveMode(value_immersiveMode_value)
        }
        const value_levelOrder  = value.levelOrder
        let value_levelOrder_type : int32 = RuntimeType.UNDEFINED
        value_levelOrder_type = runtimeType(value_levelOrder)
        valueSerializer.writeInt8(value_levelOrder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelOrder_type)) {
            const value_levelOrder_value  = value_levelOrder!
            valueSerializer.writeLevelOrder(value_levelOrder_value)
        }
    }
    writeShowToastOptions(value: promptAction.ShowToastOptions): void {
        let valueSerializer : Serializer = this
        const value_message  = value.message
        let value_message_type : int32 = RuntimeType.UNDEFINED
        value_message_type = runtimeType(value_message)
        if (RuntimeType.STRING == value_message_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_message_0  = value_message as string
            valueSerializer.writeString(value_message_0)
        }
        else if (RuntimeType.OBJECT == value_message_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_message_1  = value_message as Resource
            valueSerializer.writeResource(value_message_1)
        }
    }
    writeAlertDialogParamWithButtons(value: AlertDialogParamWithButtons): void {
        let valueSerializer : Serializer = this
        const value_title  = value.title
        let value_title_type : int32 = RuntimeType.UNDEFINED
        value_title_type = runtimeType(value_title)
        valueSerializer.writeInt8(value_title_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_title_type)) {
            const value_title_value  = value_title!
            let value_title_value_type : int32 = RuntimeType.UNDEFINED
            value_title_value_type = runtimeType(value_title_value)
            if (RuntimeType.STRING == value_title_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_title_value_0  = value_title_value as string
                valueSerializer.writeString(value_title_value_0)
            }
            else if (RuntimeType.OBJECT == value_title_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_title_value_1  = value_title_value as Resource
                valueSerializer.writeResource(value_title_value_1)
            }
        }
        const value_subtitle  = value.subtitle
        let value_subtitle_type : int32 = RuntimeType.UNDEFINED
        value_subtitle_type = runtimeType(value_subtitle)
        valueSerializer.writeInt8(value_subtitle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_subtitle_type)) {
            const value_subtitle_value  = value_subtitle!
            let value_subtitle_value_type : int32 = RuntimeType.UNDEFINED
            value_subtitle_value_type = runtimeType(value_subtitle_value)
            if (RuntimeType.STRING == value_subtitle_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_subtitle_value_0  = value_subtitle_value as string
                valueSerializer.writeString(value_subtitle_value_0)
            }
            else if (RuntimeType.OBJECT == value_subtitle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_subtitle_value_1  = value_subtitle_value as Resource
                valueSerializer.writeResource(value_subtitle_value_1)
            }
        }
        const value_message  = value.message
        let value_message_type : int32 = RuntimeType.UNDEFINED
        value_message_type = runtimeType(value_message)
        if (RuntimeType.STRING == value_message_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_message_0  = value_message as string
            valueSerializer.writeString(value_message_0)
        }
        else if (RuntimeType.OBJECT == value_message_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_message_1  = value_message as Resource
            valueSerializer.writeResource(value_message_1)
        }
        const value_autoCancel  = value.autoCancel
        let value_autoCancel_type : int32 = RuntimeType.UNDEFINED
        value_autoCancel_type = runtimeType(value_autoCancel)
        valueSerializer.writeInt8(value_autoCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_autoCancel_type)) {
            const value_autoCancel_value  = value_autoCancel!
            valueSerializer.writeBoolean(value_autoCancel_value)
        }
        const value_cancel  = value.cancel
        let value_cancel_type : int32 = RuntimeType.UNDEFINED
        value_cancel_type = runtimeType(value_cancel)
        valueSerializer.writeInt8(value_cancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cancel_type)) {
            const value_cancel_value  = value_cancel!
            valueSerializer.holdAndWriteCallback(value_cancel_value)
        }
        const value_alignment  = value.alignment
        let value_alignment_type : int32 = RuntimeType.UNDEFINED
        value_alignment_type = runtimeType(value_alignment)
        valueSerializer.writeInt8(value_alignment_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignment_type)) {
            const value_alignment_value  = (value_alignment as DialogAlignment)
            valueSerializer.writeInt32(TypeChecker.DialogAlignment_ToNumeric(value_alignment_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeOffset(value_offset_value)
        }
        const value_gridCount  = value.gridCount
        let value_gridCount_type : int32 = RuntimeType.UNDEFINED
        value_gridCount_type = runtimeType(value_gridCount)
        valueSerializer.writeInt8(value_gridCount_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gridCount_type)) {
            const value_gridCount_value  = value_gridCount!
            valueSerializer.writeNumber(value_gridCount_value)
        }
        const value_maskRect  = value.maskRect
        let value_maskRect_type : int32 = RuntimeType.UNDEFINED
        value_maskRect_type = runtimeType(value_maskRect)
        valueSerializer.writeInt8(value_maskRect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskRect_type)) {
            const value_maskRect_value  = value_maskRect!
            valueSerializer.writeRectangle(value_maskRect_value)
        }
        const value_showInSubWindow  = value.showInSubWindow
        let value_showInSubWindow_type : int32 = RuntimeType.UNDEFINED
        value_showInSubWindow_type = runtimeType(value_showInSubWindow)
        valueSerializer.writeInt8(value_showInSubWindow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showInSubWindow_type)) {
            const value_showInSubWindow_value  = value_showInSubWindow!
            valueSerializer.writeBoolean(value_showInSubWindow_value)
        }
        const value_isModal  = value.isModal
        let value_isModal_type : int32 = RuntimeType.UNDEFINED
        value_isModal_type = runtimeType(value_isModal)
        valueSerializer.writeInt8(value_isModal_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isModal_type)) {
            const value_isModal_value  = value_isModal!
            valueSerializer.writeBoolean(value_isModal_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_onWillDismiss  = value.onWillDismiss
        let value_onWillDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillDismiss_type = runtimeType(value_onWillDismiss)
        valueSerializer.writeInt8(value_onWillDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDismiss_type)) {
            const value_onWillDismiss_value  = value_onWillDismiss!
            valueSerializer.holdAndWriteCallback(value_onWillDismiss_value)
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
        const value_cornerRadius  = value.cornerRadius
        let value_cornerRadius_type : int32 = RuntimeType.UNDEFINED
        value_cornerRadius_type = runtimeType(value_cornerRadius)
        valueSerializer.writeInt8(value_cornerRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cornerRadius_type)) {
            const value_cornerRadius_value  = value_cornerRadius!
            let value_cornerRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_cornerRadius_value_type = runtimeType(value_cornerRadius_value)
            if (((RuntimeType.NUMBER) == (value_cornerRadius_value_type)) || ((RuntimeType.STRING) == (value_cornerRadius_value_type)) || (((RuntimeType.OBJECT) == (value_cornerRadius_value_type)) && (TypeChecker.isResource(value_cornerRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_cornerRadius_value_0  = value_cornerRadius_value as Dimension
                valueSerializer.writeLength(value_cornerRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_cornerRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_cornerRadius_value_1  = value_cornerRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_cornerRadius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_cornerRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_cornerRadius_value_2  = value_cornerRadius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_cornerRadius_value_2)
            }
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeLength(value_height_value)
        }
        const value_borderWidth  = value.borderWidth
        let value_borderWidth_type : int32 = RuntimeType.UNDEFINED
        value_borderWidth_type = runtimeType(value_borderWidth)
        valueSerializer.writeInt8(value_borderWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderWidth_type)) {
            const value_borderWidth_value  = value_borderWidth!
            let value_borderWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_borderWidth_value_type = runtimeType(value_borderWidth_value)
            if (((RuntimeType.NUMBER) == (value_borderWidth_value_type)) || ((RuntimeType.STRING) == (value_borderWidth_value_type)) || (((RuntimeType.OBJECT) == (value_borderWidth_value_type)) && (TypeChecker.isResource(value_borderWidth_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderWidth_value_0  = value_borderWidth_value as Dimension
                valueSerializer.writeLength(value_borderWidth_value_0)
            }
            else if (TypeChecker.isEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderWidth_value_1  = value_borderWidth_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_borderWidth_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderWidth_value_2  = value_borderWidth_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_borderWidth_value_2)
            }
        }
        const value_borderColor  = value.borderColor
        let value_borderColor_type : int32 = RuntimeType.UNDEFINED
        value_borderColor_type = runtimeType(value_borderColor)
        valueSerializer.writeInt8(value_borderColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderColor_type)) {
            const value_borderColor_value  = value_borderColor!
            let value_borderColor_value_type : int32 = RuntimeType.UNDEFINED
            value_borderColor_value_type = runtimeType(value_borderColor_value)
            if ((TypeChecker.isColor(value_borderColor_value)) || (RuntimeType.NUMBER == value_borderColor_value_type) || (RuntimeType.STRING == value_borderColor_value_type) || (RuntimeType.OBJECT == value_borderColor_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderColor_value_0  = value_borderColor_value as ResourceColor
                let value_borderColor_value_0_type : int32 = RuntimeType.UNDEFINED
                value_borderColor_value_0_type = runtimeType(value_borderColor_value_0)
                if (TypeChecker.isColor(value_borderColor_value_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_borderColor_value_0_0  = value_borderColor_value_0 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_borderColor_value_0_0))
                }
                else if (RuntimeType.NUMBER == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_borderColor_value_0_1  = value_borderColor_value_0 as number
                    valueSerializer.writeNumber(value_borderColor_value_0_1)
                }
                else if (RuntimeType.STRING == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_borderColor_value_0_2  = value_borderColor_value_0 as string
                    valueSerializer.writeString(value_borderColor_value_0_2)
                }
                else if (RuntimeType.OBJECT == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_borderColor_value_0_3  = value_borderColor_value_0 as Resource
                    valueSerializer.writeResource(value_borderColor_value_0_3)
                }
            }
            else if (TypeChecker.isEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderColor_value_1  = value_borderColor_value as EdgeColors
                valueSerializer.writeEdgeColors(value_borderColor_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderColor_value_2  = value_borderColor_value as LocalizedEdgeColors
                valueSerializer.writeLocalizedEdgeColors(value_borderColor_value_2)
            }
        }
        const value_borderStyle  = value.borderStyle
        let value_borderStyle_type : int32 = RuntimeType.UNDEFINED
        value_borderStyle_type = runtimeType(value_borderStyle)
        valueSerializer.writeInt8(value_borderStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderStyle_type)) {
            const value_borderStyle_value  = value_borderStyle!
            let value_borderStyle_value_type : int32 = RuntimeType.UNDEFINED
            value_borderStyle_value_type = runtimeType(value_borderStyle_value)
            if (TypeChecker.isBorderStyle(value_borderStyle_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderStyle_value_0  = value_borderStyle_value as BorderStyle
                valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_borderStyle_value_0))
            }
            else if (RuntimeType.OBJECT == value_borderStyle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderStyle_value_1  = value_borderStyle_value as EdgeStyles
                valueSerializer.writeEdgeStyles(value_borderStyle_value_1)
            }
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_textStyle  = value.textStyle
        let value_textStyle_type : int32 = RuntimeType.UNDEFINED
        value_textStyle_type = runtimeType(value_textStyle)
        valueSerializer.writeInt8(value_textStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textStyle_type)) {
            const value_textStyle_value  = value_textStyle!
            valueSerializer.writeTextStyle_alert_dialog(value_textStyle_value)
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_onDidAppear  = value.onDidAppear
        let value_onDidAppear_type : int32 = RuntimeType.UNDEFINED
        value_onDidAppear_type = runtimeType(value_onDidAppear)
        valueSerializer.writeInt8(value_onDidAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidAppear_type)) {
            const value_onDidAppear_value  = value_onDidAppear!
            valueSerializer.holdAndWriteCallback(value_onDidAppear_value)
        }
        const value_onDidDisappear  = value.onDidDisappear
        let value_onDidDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDidDisappear_type = runtimeType(value_onDidDisappear)
        valueSerializer.writeInt8(value_onDidDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidDisappear_type)) {
            const value_onDidDisappear_value  = value_onDidDisappear!
            valueSerializer.holdAndWriteCallback(value_onDidDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_levelMode  = value.levelMode
        let value_levelMode_type : int32 = RuntimeType.UNDEFINED
        value_levelMode_type = runtimeType(value_levelMode)
        valueSerializer.writeInt8(value_levelMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelMode_type)) {
            const value_levelMode_value  = value_levelMode!
            valueSerializer.writeLevelMode(value_levelMode_value)
        }
        const value_levelUniqueId  = value.levelUniqueId
        let value_levelUniqueId_type : int32 = RuntimeType.UNDEFINED
        value_levelUniqueId_type = runtimeType(value_levelUniqueId)
        valueSerializer.writeInt8(value_levelUniqueId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelUniqueId_type)) {
            const value_levelUniqueId_value  = value_levelUniqueId!
            valueSerializer.writeNumber(value_levelUniqueId_value)
        }
        const value_immersiveMode  = value.immersiveMode
        let value_immersiveMode_type : int32 = RuntimeType.UNDEFINED
        value_immersiveMode_type = runtimeType(value_immersiveMode)
        valueSerializer.writeInt8(value_immersiveMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_immersiveMode_type)) {
            const value_immersiveMode_value  = value_immersiveMode!
            valueSerializer.writeImmersiveMode(value_immersiveMode_value)
        }
        const value_levelOrder  = value.levelOrder
        let value_levelOrder_type : int32 = RuntimeType.UNDEFINED
        value_levelOrder_type = runtimeType(value_levelOrder)
        valueSerializer.writeInt8(value_levelOrder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelOrder_type)) {
            const value_levelOrder_value  = value_levelOrder!
            valueSerializer.writeLevelOrder(value_levelOrder_value)
        }
        const value_primaryButton  = value.primaryButton
        valueSerializer.writeAlertDialogButtonBaseOptions(value_primaryButton)
        const value_secondaryButton  = value.secondaryButton
        valueSerializer.writeAlertDialogButtonBaseOptions(value_secondaryButton)
    }
    writeAlertDialogParamWithConfirm(value: AlertDialogParamWithConfirm): void {
        let valueSerializer : Serializer = this
        const value_title  = value.title
        let value_title_type : int32 = RuntimeType.UNDEFINED
        value_title_type = runtimeType(value_title)
        valueSerializer.writeInt8(value_title_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_title_type)) {
            const value_title_value  = value_title!
            let value_title_value_type : int32 = RuntimeType.UNDEFINED
            value_title_value_type = runtimeType(value_title_value)
            if (RuntimeType.STRING == value_title_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_title_value_0  = value_title_value as string
                valueSerializer.writeString(value_title_value_0)
            }
            else if (RuntimeType.OBJECT == value_title_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_title_value_1  = value_title_value as Resource
                valueSerializer.writeResource(value_title_value_1)
            }
        }
        const value_subtitle  = value.subtitle
        let value_subtitle_type : int32 = RuntimeType.UNDEFINED
        value_subtitle_type = runtimeType(value_subtitle)
        valueSerializer.writeInt8(value_subtitle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_subtitle_type)) {
            const value_subtitle_value  = value_subtitle!
            let value_subtitle_value_type : int32 = RuntimeType.UNDEFINED
            value_subtitle_value_type = runtimeType(value_subtitle_value)
            if (RuntimeType.STRING == value_subtitle_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_subtitle_value_0  = value_subtitle_value as string
                valueSerializer.writeString(value_subtitle_value_0)
            }
            else if (RuntimeType.OBJECT == value_subtitle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_subtitle_value_1  = value_subtitle_value as Resource
                valueSerializer.writeResource(value_subtitle_value_1)
            }
        }
        const value_message  = value.message
        let value_message_type : int32 = RuntimeType.UNDEFINED
        value_message_type = runtimeType(value_message)
        if (RuntimeType.STRING == value_message_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_message_0  = value_message as string
            valueSerializer.writeString(value_message_0)
        }
        else if (RuntimeType.OBJECT == value_message_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_message_1  = value_message as Resource
            valueSerializer.writeResource(value_message_1)
        }
        const value_autoCancel  = value.autoCancel
        let value_autoCancel_type : int32 = RuntimeType.UNDEFINED
        value_autoCancel_type = runtimeType(value_autoCancel)
        valueSerializer.writeInt8(value_autoCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_autoCancel_type)) {
            const value_autoCancel_value  = value_autoCancel!
            valueSerializer.writeBoolean(value_autoCancel_value)
        }
        const value_cancel  = value.cancel
        let value_cancel_type : int32 = RuntimeType.UNDEFINED
        value_cancel_type = runtimeType(value_cancel)
        valueSerializer.writeInt8(value_cancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cancel_type)) {
            const value_cancel_value  = value_cancel!
            valueSerializer.holdAndWriteCallback(value_cancel_value)
        }
        const value_alignment  = value.alignment
        let value_alignment_type : int32 = RuntimeType.UNDEFINED
        value_alignment_type = runtimeType(value_alignment)
        valueSerializer.writeInt8(value_alignment_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignment_type)) {
            const value_alignment_value  = (value_alignment as DialogAlignment)
            valueSerializer.writeInt32(TypeChecker.DialogAlignment_ToNumeric(value_alignment_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeOffset(value_offset_value)
        }
        const value_gridCount  = value.gridCount
        let value_gridCount_type : int32 = RuntimeType.UNDEFINED
        value_gridCount_type = runtimeType(value_gridCount)
        valueSerializer.writeInt8(value_gridCount_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gridCount_type)) {
            const value_gridCount_value  = value_gridCount!
            valueSerializer.writeNumber(value_gridCount_value)
        }
        const value_maskRect  = value.maskRect
        let value_maskRect_type : int32 = RuntimeType.UNDEFINED
        value_maskRect_type = runtimeType(value_maskRect)
        valueSerializer.writeInt8(value_maskRect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskRect_type)) {
            const value_maskRect_value  = value_maskRect!
            valueSerializer.writeRectangle(value_maskRect_value)
        }
        const value_showInSubWindow  = value.showInSubWindow
        let value_showInSubWindow_type : int32 = RuntimeType.UNDEFINED
        value_showInSubWindow_type = runtimeType(value_showInSubWindow)
        valueSerializer.writeInt8(value_showInSubWindow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showInSubWindow_type)) {
            const value_showInSubWindow_value  = value_showInSubWindow!
            valueSerializer.writeBoolean(value_showInSubWindow_value)
        }
        const value_isModal  = value.isModal
        let value_isModal_type : int32 = RuntimeType.UNDEFINED
        value_isModal_type = runtimeType(value_isModal)
        valueSerializer.writeInt8(value_isModal_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isModal_type)) {
            const value_isModal_value  = value_isModal!
            valueSerializer.writeBoolean(value_isModal_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_onWillDismiss  = value.onWillDismiss
        let value_onWillDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillDismiss_type = runtimeType(value_onWillDismiss)
        valueSerializer.writeInt8(value_onWillDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDismiss_type)) {
            const value_onWillDismiss_value  = value_onWillDismiss!
            valueSerializer.holdAndWriteCallback(value_onWillDismiss_value)
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
        const value_cornerRadius  = value.cornerRadius
        let value_cornerRadius_type : int32 = RuntimeType.UNDEFINED
        value_cornerRadius_type = runtimeType(value_cornerRadius)
        valueSerializer.writeInt8(value_cornerRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cornerRadius_type)) {
            const value_cornerRadius_value  = value_cornerRadius!
            let value_cornerRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_cornerRadius_value_type = runtimeType(value_cornerRadius_value)
            if (((RuntimeType.NUMBER) == (value_cornerRadius_value_type)) || ((RuntimeType.STRING) == (value_cornerRadius_value_type)) || (((RuntimeType.OBJECT) == (value_cornerRadius_value_type)) && (TypeChecker.isResource(value_cornerRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_cornerRadius_value_0  = value_cornerRadius_value as Dimension
                valueSerializer.writeLength(value_cornerRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_cornerRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_cornerRadius_value_1  = value_cornerRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_cornerRadius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_cornerRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_cornerRadius_value_2  = value_cornerRadius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_cornerRadius_value_2)
            }
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeLength(value_height_value)
        }
        const value_borderWidth  = value.borderWidth
        let value_borderWidth_type : int32 = RuntimeType.UNDEFINED
        value_borderWidth_type = runtimeType(value_borderWidth)
        valueSerializer.writeInt8(value_borderWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderWidth_type)) {
            const value_borderWidth_value  = value_borderWidth!
            let value_borderWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_borderWidth_value_type = runtimeType(value_borderWidth_value)
            if (((RuntimeType.NUMBER) == (value_borderWidth_value_type)) || ((RuntimeType.STRING) == (value_borderWidth_value_type)) || (((RuntimeType.OBJECT) == (value_borderWidth_value_type)) && (TypeChecker.isResource(value_borderWidth_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderWidth_value_0  = value_borderWidth_value as Dimension
                valueSerializer.writeLength(value_borderWidth_value_0)
            }
            else if (TypeChecker.isEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderWidth_value_1  = value_borderWidth_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_borderWidth_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderWidth_value_2  = value_borderWidth_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_borderWidth_value_2)
            }
        }
        const value_borderColor  = value.borderColor
        let value_borderColor_type : int32 = RuntimeType.UNDEFINED
        value_borderColor_type = runtimeType(value_borderColor)
        valueSerializer.writeInt8(value_borderColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderColor_type)) {
            const value_borderColor_value  = value_borderColor!
            let value_borderColor_value_type : int32 = RuntimeType.UNDEFINED
            value_borderColor_value_type = runtimeType(value_borderColor_value)
            if ((TypeChecker.isColor(value_borderColor_value)) || (RuntimeType.NUMBER == value_borderColor_value_type) || (RuntimeType.STRING == value_borderColor_value_type) || (RuntimeType.OBJECT == value_borderColor_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderColor_value_0  = value_borderColor_value as ResourceColor
                let value_borderColor_value_0_type : int32 = RuntimeType.UNDEFINED
                value_borderColor_value_0_type = runtimeType(value_borderColor_value_0)
                if (TypeChecker.isColor(value_borderColor_value_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_borderColor_value_0_0  = value_borderColor_value_0 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_borderColor_value_0_0))
                }
                else if (RuntimeType.NUMBER == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_borderColor_value_0_1  = value_borderColor_value_0 as number
                    valueSerializer.writeNumber(value_borderColor_value_0_1)
                }
                else if (RuntimeType.STRING == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_borderColor_value_0_2  = value_borderColor_value_0 as string
                    valueSerializer.writeString(value_borderColor_value_0_2)
                }
                else if (RuntimeType.OBJECT == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_borderColor_value_0_3  = value_borderColor_value_0 as Resource
                    valueSerializer.writeResource(value_borderColor_value_0_3)
                }
            }
            else if (TypeChecker.isEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderColor_value_1  = value_borderColor_value as EdgeColors
                valueSerializer.writeEdgeColors(value_borderColor_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderColor_value_2  = value_borderColor_value as LocalizedEdgeColors
                valueSerializer.writeLocalizedEdgeColors(value_borderColor_value_2)
            }
        }
        const value_borderStyle  = value.borderStyle
        let value_borderStyle_type : int32 = RuntimeType.UNDEFINED
        value_borderStyle_type = runtimeType(value_borderStyle)
        valueSerializer.writeInt8(value_borderStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderStyle_type)) {
            const value_borderStyle_value  = value_borderStyle!
            let value_borderStyle_value_type : int32 = RuntimeType.UNDEFINED
            value_borderStyle_value_type = runtimeType(value_borderStyle_value)
            if (TypeChecker.isBorderStyle(value_borderStyle_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderStyle_value_0  = value_borderStyle_value as BorderStyle
                valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_borderStyle_value_0))
            }
            else if (RuntimeType.OBJECT == value_borderStyle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderStyle_value_1  = value_borderStyle_value as EdgeStyles
                valueSerializer.writeEdgeStyles(value_borderStyle_value_1)
            }
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_textStyle  = value.textStyle
        let value_textStyle_type : int32 = RuntimeType.UNDEFINED
        value_textStyle_type = runtimeType(value_textStyle)
        valueSerializer.writeInt8(value_textStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textStyle_type)) {
            const value_textStyle_value  = value_textStyle!
            valueSerializer.writeTextStyle_alert_dialog(value_textStyle_value)
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_onDidAppear  = value.onDidAppear
        let value_onDidAppear_type : int32 = RuntimeType.UNDEFINED
        value_onDidAppear_type = runtimeType(value_onDidAppear)
        valueSerializer.writeInt8(value_onDidAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidAppear_type)) {
            const value_onDidAppear_value  = value_onDidAppear!
            valueSerializer.holdAndWriteCallback(value_onDidAppear_value)
        }
        const value_onDidDisappear  = value.onDidDisappear
        let value_onDidDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDidDisappear_type = runtimeType(value_onDidDisappear)
        valueSerializer.writeInt8(value_onDidDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidDisappear_type)) {
            const value_onDidDisappear_value  = value_onDidDisappear!
            valueSerializer.holdAndWriteCallback(value_onDidDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_levelMode  = value.levelMode
        let value_levelMode_type : int32 = RuntimeType.UNDEFINED
        value_levelMode_type = runtimeType(value_levelMode)
        valueSerializer.writeInt8(value_levelMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelMode_type)) {
            const value_levelMode_value  = value_levelMode!
            valueSerializer.writeLevelMode(value_levelMode_value)
        }
        const value_levelUniqueId  = value.levelUniqueId
        let value_levelUniqueId_type : int32 = RuntimeType.UNDEFINED
        value_levelUniqueId_type = runtimeType(value_levelUniqueId)
        valueSerializer.writeInt8(value_levelUniqueId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelUniqueId_type)) {
            const value_levelUniqueId_value  = value_levelUniqueId!
            valueSerializer.writeNumber(value_levelUniqueId_value)
        }
        const value_immersiveMode  = value.immersiveMode
        let value_immersiveMode_type : int32 = RuntimeType.UNDEFINED
        value_immersiveMode_type = runtimeType(value_immersiveMode)
        valueSerializer.writeInt8(value_immersiveMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_immersiveMode_type)) {
            const value_immersiveMode_value  = value_immersiveMode!
            valueSerializer.writeImmersiveMode(value_immersiveMode_value)
        }
        const value_levelOrder  = value.levelOrder
        let value_levelOrder_type : int32 = RuntimeType.UNDEFINED
        value_levelOrder_type = runtimeType(value_levelOrder)
        valueSerializer.writeInt8(value_levelOrder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelOrder_type)) {
            const value_levelOrder_value  = value_levelOrder!
            valueSerializer.writeLevelOrder(value_levelOrder_value)
        }
        const value_confirm  = value.confirm
        let value_confirm_type : int32 = RuntimeType.UNDEFINED
        value_confirm_type = runtimeType(value_confirm)
        valueSerializer.writeInt8(value_confirm_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_confirm_type)) {
            const value_confirm_value  = value_confirm!
            valueSerializer.writeAlertDialogButtonBaseOptions(value_confirm_value)
        }
    }
    writeAlertDialogParamWithOptions(value: AlertDialogParamWithOptions): void {
        let valueSerializer : Serializer = this
        const value_title  = value.title
        let value_title_type : int32 = RuntimeType.UNDEFINED
        value_title_type = runtimeType(value_title)
        valueSerializer.writeInt8(value_title_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_title_type)) {
            const value_title_value  = value_title!
            let value_title_value_type : int32 = RuntimeType.UNDEFINED
            value_title_value_type = runtimeType(value_title_value)
            if (RuntimeType.STRING == value_title_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_title_value_0  = value_title_value as string
                valueSerializer.writeString(value_title_value_0)
            }
            else if (RuntimeType.OBJECT == value_title_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_title_value_1  = value_title_value as Resource
                valueSerializer.writeResource(value_title_value_1)
            }
        }
        const value_subtitle  = value.subtitle
        let value_subtitle_type : int32 = RuntimeType.UNDEFINED
        value_subtitle_type = runtimeType(value_subtitle)
        valueSerializer.writeInt8(value_subtitle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_subtitle_type)) {
            const value_subtitle_value  = value_subtitle!
            let value_subtitle_value_type : int32 = RuntimeType.UNDEFINED
            value_subtitle_value_type = runtimeType(value_subtitle_value)
            if (RuntimeType.STRING == value_subtitle_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_subtitle_value_0  = value_subtitle_value as string
                valueSerializer.writeString(value_subtitle_value_0)
            }
            else if (RuntimeType.OBJECT == value_subtitle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_subtitle_value_1  = value_subtitle_value as Resource
                valueSerializer.writeResource(value_subtitle_value_1)
            }
        }
        const value_message  = value.message
        let value_message_type : int32 = RuntimeType.UNDEFINED
        value_message_type = runtimeType(value_message)
        if (RuntimeType.STRING == value_message_type) {
            valueSerializer.writeInt8(0 as int32)
            const value_message_0  = value_message as string
            valueSerializer.writeString(value_message_0)
        }
        else if (RuntimeType.OBJECT == value_message_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_message_1  = value_message as Resource
            valueSerializer.writeResource(value_message_1)
        }
        const value_autoCancel  = value.autoCancel
        let value_autoCancel_type : int32 = RuntimeType.UNDEFINED
        value_autoCancel_type = runtimeType(value_autoCancel)
        valueSerializer.writeInt8(value_autoCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_autoCancel_type)) {
            const value_autoCancel_value  = value_autoCancel!
            valueSerializer.writeBoolean(value_autoCancel_value)
        }
        const value_cancel  = value.cancel
        let value_cancel_type : int32 = RuntimeType.UNDEFINED
        value_cancel_type = runtimeType(value_cancel)
        valueSerializer.writeInt8(value_cancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cancel_type)) {
            const value_cancel_value  = value_cancel!
            valueSerializer.holdAndWriteCallback(value_cancel_value)
        }
        const value_alignment  = value.alignment
        let value_alignment_type : int32 = RuntimeType.UNDEFINED
        value_alignment_type = runtimeType(value_alignment)
        valueSerializer.writeInt8(value_alignment_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignment_type)) {
            const value_alignment_value  = (value_alignment as DialogAlignment)
            valueSerializer.writeInt32(TypeChecker.DialogAlignment_ToNumeric(value_alignment_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeOffset(value_offset_value)
        }
        const value_gridCount  = value.gridCount
        let value_gridCount_type : int32 = RuntimeType.UNDEFINED
        value_gridCount_type = runtimeType(value_gridCount)
        valueSerializer.writeInt8(value_gridCount_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gridCount_type)) {
            const value_gridCount_value  = value_gridCount!
            valueSerializer.writeNumber(value_gridCount_value)
        }
        const value_maskRect  = value.maskRect
        let value_maskRect_type : int32 = RuntimeType.UNDEFINED
        value_maskRect_type = runtimeType(value_maskRect)
        valueSerializer.writeInt8(value_maskRect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskRect_type)) {
            const value_maskRect_value  = value_maskRect!
            valueSerializer.writeRectangle(value_maskRect_value)
        }
        const value_showInSubWindow  = value.showInSubWindow
        let value_showInSubWindow_type : int32 = RuntimeType.UNDEFINED
        value_showInSubWindow_type = runtimeType(value_showInSubWindow)
        valueSerializer.writeInt8(value_showInSubWindow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showInSubWindow_type)) {
            const value_showInSubWindow_value  = value_showInSubWindow!
            valueSerializer.writeBoolean(value_showInSubWindow_value)
        }
        const value_isModal  = value.isModal
        let value_isModal_type : int32 = RuntimeType.UNDEFINED
        value_isModal_type = runtimeType(value_isModal)
        valueSerializer.writeInt8(value_isModal_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isModal_type)) {
            const value_isModal_value  = value_isModal!
            valueSerializer.writeBoolean(value_isModal_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_onWillDismiss  = value.onWillDismiss
        let value_onWillDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillDismiss_type = runtimeType(value_onWillDismiss)
        valueSerializer.writeInt8(value_onWillDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDismiss_type)) {
            const value_onWillDismiss_value  = value_onWillDismiss!
            valueSerializer.holdAndWriteCallback(value_onWillDismiss_value)
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
        const value_cornerRadius  = value.cornerRadius
        let value_cornerRadius_type : int32 = RuntimeType.UNDEFINED
        value_cornerRadius_type = runtimeType(value_cornerRadius)
        valueSerializer.writeInt8(value_cornerRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cornerRadius_type)) {
            const value_cornerRadius_value  = value_cornerRadius!
            let value_cornerRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_cornerRadius_value_type = runtimeType(value_cornerRadius_value)
            if (((RuntimeType.NUMBER) == (value_cornerRadius_value_type)) || ((RuntimeType.STRING) == (value_cornerRadius_value_type)) || (((RuntimeType.OBJECT) == (value_cornerRadius_value_type)) && (TypeChecker.isResource(value_cornerRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_cornerRadius_value_0  = value_cornerRadius_value as Dimension
                valueSerializer.writeLength(value_cornerRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_cornerRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_cornerRadius_value_1  = value_cornerRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_cornerRadius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_cornerRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_cornerRadius_value_2  = value_cornerRadius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_cornerRadius_value_2)
            }
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeLength(value_height_value)
        }
        const value_borderWidth  = value.borderWidth
        let value_borderWidth_type : int32 = RuntimeType.UNDEFINED
        value_borderWidth_type = runtimeType(value_borderWidth)
        valueSerializer.writeInt8(value_borderWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderWidth_type)) {
            const value_borderWidth_value  = value_borderWidth!
            let value_borderWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_borderWidth_value_type = runtimeType(value_borderWidth_value)
            if (((RuntimeType.NUMBER) == (value_borderWidth_value_type)) || ((RuntimeType.STRING) == (value_borderWidth_value_type)) || (((RuntimeType.OBJECT) == (value_borderWidth_value_type)) && (TypeChecker.isResource(value_borderWidth_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderWidth_value_0  = value_borderWidth_value as Dimension
                valueSerializer.writeLength(value_borderWidth_value_0)
            }
            else if (TypeChecker.isEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderWidth_value_1  = value_borderWidth_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_borderWidth_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderWidth_value_2  = value_borderWidth_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_borderWidth_value_2)
            }
        }
        const value_borderColor  = value.borderColor
        let value_borderColor_type : int32 = RuntimeType.UNDEFINED
        value_borderColor_type = runtimeType(value_borderColor)
        valueSerializer.writeInt8(value_borderColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderColor_type)) {
            const value_borderColor_value  = value_borderColor!
            let value_borderColor_value_type : int32 = RuntimeType.UNDEFINED
            value_borderColor_value_type = runtimeType(value_borderColor_value)
            if ((TypeChecker.isColor(value_borderColor_value)) || (RuntimeType.NUMBER == value_borderColor_value_type) || (RuntimeType.STRING == value_borderColor_value_type) || (RuntimeType.OBJECT == value_borderColor_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderColor_value_0  = value_borderColor_value as ResourceColor
                let value_borderColor_value_0_type : int32 = RuntimeType.UNDEFINED
                value_borderColor_value_0_type = runtimeType(value_borderColor_value_0)
                if (TypeChecker.isColor(value_borderColor_value_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_borderColor_value_0_0  = value_borderColor_value_0 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_borderColor_value_0_0))
                }
                else if (RuntimeType.NUMBER == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_borderColor_value_0_1  = value_borderColor_value_0 as number
                    valueSerializer.writeNumber(value_borderColor_value_0_1)
                }
                else if (RuntimeType.STRING == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_borderColor_value_0_2  = value_borderColor_value_0 as string
                    valueSerializer.writeString(value_borderColor_value_0_2)
                }
                else if (RuntimeType.OBJECT == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_borderColor_value_0_3  = value_borderColor_value_0 as Resource
                    valueSerializer.writeResource(value_borderColor_value_0_3)
                }
            }
            else if (TypeChecker.isEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderColor_value_1  = value_borderColor_value as EdgeColors
                valueSerializer.writeEdgeColors(value_borderColor_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderColor_value_2  = value_borderColor_value as LocalizedEdgeColors
                valueSerializer.writeLocalizedEdgeColors(value_borderColor_value_2)
            }
        }
        const value_borderStyle  = value.borderStyle
        let value_borderStyle_type : int32 = RuntimeType.UNDEFINED
        value_borderStyle_type = runtimeType(value_borderStyle)
        valueSerializer.writeInt8(value_borderStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderStyle_type)) {
            const value_borderStyle_value  = value_borderStyle!
            let value_borderStyle_value_type : int32 = RuntimeType.UNDEFINED
            value_borderStyle_value_type = runtimeType(value_borderStyle_value)
            if (TypeChecker.isBorderStyle(value_borderStyle_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderStyle_value_0  = value_borderStyle_value as BorderStyle
                valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_borderStyle_value_0))
            }
            else if (RuntimeType.OBJECT == value_borderStyle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderStyle_value_1  = value_borderStyle_value as EdgeStyles
                valueSerializer.writeEdgeStyles(value_borderStyle_value_1)
            }
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_textStyle  = value.textStyle
        let value_textStyle_type : int32 = RuntimeType.UNDEFINED
        value_textStyle_type = runtimeType(value_textStyle)
        valueSerializer.writeInt8(value_textStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textStyle_type)) {
            const value_textStyle_value  = value_textStyle!
            valueSerializer.writeTextStyle_alert_dialog(value_textStyle_value)
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_onDidAppear  = value.onDidAppear
        let value_onDidAppear_type : int32 = RuntimeType.UNDEFINED
        value_onDidAppear_type = runtimeType(value_onDidAppear)
        valueSerializer.writeInt8(value_onDidAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidAppear_type)) {
            const value_onDidAppear_value  = value_onDidAppear!
            valueSerializer.holdAndWriteCallback(value_onDidAppear_value)
        }
        const value_onDidDisappear  = value.onDidDisappear
        let value_onDidDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDidDisappear_type = runtimeType(value_onDidDisappear)
        valueSerializer.writeInt8(value_onDidDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidDisappear_type)) {
            const value_onDidDisappear_value  = value_onDidDisappear!
            valueSerializer.holdAndWriteCallback(value_onDidDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_levelMode  = value.levelMode
        let value_levelMode_type : int32 = RuntimeType.UNDEFINED
        value_levelMode_type = runtimeType(value_levelMode)
        valueSerializer.writeInt8(value_levelMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelMode_type)) {
            const value_levelMode_value  = value_levelMode!
            valueSerializer.writeLevelMode(value_levelMode_value)
        }
        const value_levelUniqueId  = value.levelUniqueId
        let value_levelUniqueId_type : int32 = RuntimeType.UNDEFINED
        value_levelUniqueId_type = runtimeType(value_levelUniqueId)
        valueSerializer.writeInt8(value_levelUniqueId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelUniqueId_type)) {
            const value_levelUniqueId_value  = value_levelUniqueId!
            valueSerializer.writeNumber(value_levelUniqueId_value)
        }
        const value_immersiveMode  = value.immersiveMode
        let value_immersiveMode_type : int32 = RuntimeType.UNDEFINED
        value_immersiveMode_type = runtimeType(value_immersiveMode)
        valueSerializer.writeInt8(value_immersiveMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_immersiveMode_type)) {
            const value_immersiveMode_value  = value_immersiveMode!
            valueSerializer.writeImmersiveMode(value_immersiveMode_value)
        }
        const value_levelOrder  = value.levelOrder
        let value_levelOrder_type : int32 = RuntimeType.UNDEFINED
        value_levelOrder_type = runtimeType(value_levelOrder)
        valueSerializer.writeInt8(value_levelOrder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelOrder_type)) {
            const value_levelOrder_value  = value_levelOrder!
            valueSerializer.writeLevelOrder(value_levelOrder_value)
        }
        const value_buttons  = value.buttons
        valueSerializer.writeInt32(value_buttons.length as int32)
        for (let i = 0; i < value_buttons.length; i++) {
            const value_buttons_element : AlertDialogButtonOptions = value_buttons[i]
            valueSerializer.writeAlertDialogButtonOptions(value_buttons_element)
        }
        const value_buttonDirection  = value.buttonDirection
        let value_buttonDirection_type : int32 = RuntimeType.UNDEFINED
        value_buttonDirection_type = runtimeType(value_buttonDirection)
        valueSerializer.writeInt8(value_buttonDirection_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_buttonDirection_type)) {
            const value_buttonDirection_value  = (value_buttonDirection as DialogButtonDirection)
            valueSerializer.writeInt32(TypeChecker.DialogButtonDirection_ToNumeric(value_buttonDirection_value))
        }
    }
    writeAxisEvent(value: AxisEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeBackgroundColorStyle(value: BackgroundColorStyle): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeBadgeParamWithNumber(value: BadgeParamWithNumber): void {
        let valueSerializer : Serializer = this
        const value_position  = value.position
        let value_position_type : int32 = RuntimeType.UNDEFINED
        value_position_type = runtimeType(value_position)
        valueSerializer.writeInt8(value_position_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_position_type)) {
            const value_position_value  = value_position!
            let value_position_value_type : int32 = RuntimeType.UNDEFINED
            value_position_value_type = runtimeType(value_position_value)
            if (TypeChecker.isBadgePosition(value_position_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_position_value_0  = value_position_value as BadgePosition
                valueSerializer.writeInt32(TypeChecker.BadgePosition_ToNumeric(value_position_value_0))
            }
            else if (RuntimeType.OBJECT == value_position_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_position_value_1  = value_position_value as Position
                valueSerializer.writePosition(value_position_value_1)
            }
        }
        const value_style  = value.style
        valueSerializer.writeBadgeStyle(value_style)
        const value_count  = value.count
        valueSerializer.writeNumber(value_count)
        const value_maxCount  = value.maxCount
        let value_maxCount_type : int32 = RuntimeType.UNDEFINED
        value_maxCount_type = runtimeType(value_maxCount)
        valueSerializer.writeInt8(value_maxCount_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxCount_type)) {
            const value_maxCount_value  = value_maxCount!
            valueSerializer.writeNumber(value_maxCount_value)
        }
    }
    writeBadgeParamWithString(value: BadgeParamWithString): void {
        let valueSerializer : Serializer = this
        const value_position  = value.position
        let value_position_type : int32 = RuntimeType.UNDEFINED
        value_position_type = runtimeType(value_position)
        valueSerializer.writeInt8(value_position_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_position_type)) {
            const value_position_value  = value_position!
            let value_position_value_type : int32 = RuntimeType.UNDEFINED
            value_position_value_type = runtimeType(value_position_value)
            if (TypeChecker.isBadgePosition(value_position_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_position_value_0  = value_position_value as BadgePosition
                valueSerializer.writeInt32(TypeChecker.BadgePosition_ToNumeric(value_position_value_0))
            }
            else if (RuntimeType.OBJECT == value_position_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_position_value_1  = value_position_value as Position
                valueSerializer.writePosition(value_position_value_1)
            }
        }
        const value_style  = value.style
        valueSerializer.writeBadgeStyle(value_style)
        const value_value  = value.value
        valueSerializer.writeString(value_value)
    }
    writeBaseEvent(value: BaseEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeBaseGestureEvent(value: BaseGestureEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeBorderImageOption(value: BorderImageOption): void {
        let valueSerializer : Serializer = this
        const value_slice  = value.slice
        let value_slice_type : int32 = RuntimeType.UNDEFINED
        value_slice_type = runtimeType(value_slice)
        valueSerializer.writeInt8(value_slice_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_slice_type)) {
            const value_slice_value  = value_slice!
            let value_slice_value_type : int32 = RuntimeType.UNDEFINED
            value_slice_value_type = runtimeType(value_slice_value)
            if (((RuntimeType.NUMBER) == (value_slice_value_type)) || ((RuntimeType.STRING) == (value_slice_value_type)) || (((RuntimeType.OBJECT) == (value_slice_value_type)) && (TypeChecker.isResource(value_slice_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_slice_value_0  = value_slice_value as Length
                valueSerializer.writeLength(value_slice_value_0)
            }
            else if (TypeChecker.isEdgeWidths(value_slice_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_slice_value_1  = value_slice_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_slice_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_slice_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_slice_value_2  = value_slice_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_slice_value_2)
            }
        }
        const value_repeat  = value.repeat
        let value_repeat_type : int32 = RuntimeType.UNDEFINED
        value_repeat_type = runtimeType(value_repeat)
        valueSerializer.writeInt8(value_repeat_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_repeat_type)) {
            const value_repeat_value  = (value_repeat as RepeatMode)
            valueSerializer.writeInt32(TypeChecker.RepeatMode_ToNumeric(value_repeat_value))
        }
        const value_source  = value.source
        let value_source_type : int32 = RuntimeType.UNDEFINED
        value_source_type = runtimeType(value_source)
        valueSerializer.writeInt8(value_source_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_source_type)) {
            const value_source_value  = value_source!
            let value_source_value_type : int32 = RuntimeType.UNDEFINED
            value_source_value_type = runtimeType(value_source_value)
            if (RuntimeType.STRING == value_source_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_source_value_0  = value_source_value as string
                valueSerializer.writeString(value_source_value_0)
            }
            else if (TypeChecker.isResource(value_source_value, false, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_source_value_1  = value_source_value as Resource
                valueSerializer.writeResource(value_source_value_1)
            }
            else if (TypeChecker.isLinearGradient_common(value_source_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_source_value_2  = value_source_value as LinearGradient_common
                valueSerializer.writeLinearGradient_common(value_source_value_2)
            }
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (((RuntimeType.NUMBER) == (value_width_value_type)) || ((RuntimeType.STRING) == (value_width_value_type)) || (((RuntimeType.OBJECT) == (value_width_value_type)) && (TypeChecker.isResource(value_width_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as Length
                valueSerializer.writeLength(value_width_value_0)
            }
            else if (TypeChecker.isEdgeWidths(value_width_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_width_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_width_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_width_value_2  = value_width_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_width_value_2)
            }
        }
        const value_outset  = value.outset
        let value_outset_type : int32 = RuntimeType.UNDEFINED
        value_outset_type = runtimeType(value_outset)
        valueSerializer.writeInt8(value_outset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_outset_type)) {
            const value_outset_value  = value_outset!
            let value_outset_value_type : int32 = RuntimeType.UNDEFINED
            value_outset_value_type = runtimeType(value_outset_value)
            if (((RuntimeType.NUMBER) == (value_outset_value_type)) || ((RuntimeType.STRING) == (value_outset_value_type)) || (((RuntimeType.OBJECT) == (value_outset_value_type)) && (TypeChecker.isResource(value_outset_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_outset_value_0  = value_outset_value as Length
                valueSerializer.writeLength(value_outset_value_0)
            }
            else if (TypeChecker.isEdgeWidths(value_outset_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_outset_value_1  = value_outset_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_outset_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_outset_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_outset_value_2  = value_outset_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_outset_value_2)
            }
        }
        const value_fill  = value.fill
        let value_fill_type : int32 = RuntimeType.UNDEFINED
        value_fill_type = runtimeType(value_fill)
        valueSerializer.writeInt8(value_fill_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fill_type)) {
            const value_fill_value  = value_fill!
            valueSerializer.writeBoolean(value_fill_value)
        }
    }
    writeBorderOptions(value: BorderOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (TypeChecker.isEdgeWidths(value_width_value, true, false, true, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_width_value_0)
            }
            else if (((RuntimeType.NUMBER) == (value_width_value_type)) || ((RuntimeType.STRING) == (value_width_value_type)) || (((RuntimeType.OBJECT) == (value_width_value_type)) && (TypeChecker.isResource(value_width_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as Length
                valueSerializer.writeLength(value_width_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_width_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_width_value_2  = value_width_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_width_value_2)
            }
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isEdgeColors(value_color_value, true, false, true, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as EdgeColors
                valueSerializer.writeEdgeColors(value_color_value_0)
            }
            else if ((TypeChecker.isColor(value_color_value)) || (RuntimeType.NUMBER == value_color_value_type) || (RuntimeType.STRING == value_color_value_type) || (RuntimeType.OBJECT == value_color_value_type && (TypeChecker.isResource(value_color_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as ResourceColor
                let value_color_value_1_type : int32 = RuntimeType.UNDEFINED
                value_color_value_1_type = runtimeType(value_color_value_1)
                if (TypeChecker.isColor(value_color_value_1)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_color_value_1_0  = value_color_value_1 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_1_0))
                }
                else if (RuntimeType.NUMBER == value_color_value_1_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_color_value_1_1  = value_color_value_1 as number
                    valueSerializer.writeNumber(value_color_value_1_1)
                }
                else if (RuntimeType.STRING == value_color_value_1_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_color_value_1_2  = value_color_value_1 as string
                    valueSerializer.writeString(value_color_value_1_2)
                }
                else if (RuntimeType.OBJECT == value_color_value_1_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_color_value_1_3  = value_color_value_1 as Resource
                    valueSerializer.writeResource(value_color_value_1_3)
                }
            }
            else if (TypeChecker.isLocalizedEdgeColors(value_color_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as LocalizedEdgeColors
                valueSerializer.writeLocalizedEdgeColors(value_color_value_2)
            }
        }
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            let value_radius_value_type : int32 = RuntimeType.UNDEFINED
            value_radius_value_type = runtimeType(value_radius_value)
            if (TypeChecker.isBorderRadiuses(value_radius_value, false, false, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_radius_value_0  = value_radius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_radius_value_0)
            }
            else if (((RuntimeType.NUMBER) == (value_radius_value_type)) || ((RuntimeType.STRING) == (value_radius_value_type)) || (((RuntimeType.OBJECT) == (value_radius_value_type)) && (TypeChecker.isResource(value_radius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(1 as int32)
                const value_radius_value_1  = value_radius_value as Length
                valueSerializer.writeLength(value_radius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_radius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_radius_value_2  = value_radius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_radius_value_2)
            }
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = value_style!
            let value_style_value_type : int32 = RuntimeType.UNDEFINED
            value_style_value_type = runtimeType(value_style_value)
            if (RuntimeType.OBJECT == value_style_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_style_value_0  = value_style_value as EdgeStyles
                valueSerializer.writeEdgeStyles(value_style_value_0)
            }
            else if (TypeChecker.isBorderStyle(value_style_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_style_value_1  = value_style_value as BorderStyle
                valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_style_value_1))
            }
        }
        const value_dashGap  = value.dashGap
        let value_dashGap_type : int32 = RuntimeType.UNDEFINED
        value_dashGap_type = runtimeType(value_dashGap)
        valueSerializer.writeInt8(value_dashGap_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dashGap_type)) {
            const value_dashGap_value  = value_dashGap!
            let value_dashGap_value_type : int32 = RuntimeType.UNDEFINED
            value_dashGap_value_type = runtimeType(value_dashGap_value)
            if (TypeChecker.isEdgeWidths(value_dashGap_value, true, false, true, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_dashGap_value_0  = value_dashGap_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_dashGap_value_0)
            }
            else if (TypeChecker.isLengthMetrics(value_dashGap_value, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_dashGap_value_1  = value_dashGap_value as LengthMetrics
                valueSerializer.writeLengthMetrics(value_dashGap_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_dashGap_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_dashGap_value_2  = value_dashGap_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_dashGap_value_2)
            }
        }
        const value_dashWidth  = value.dashWidth
        let value_dashWidth_type : int32 = RuntimeType.UNDEFINED
        value_dashWidth_type = runtimeType(value_dashWidth)
        valueSerializer.writeInt8(value_dashWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dashWidth_type)) {
            const value_dashWidth_value  = value_dashWidth!
            let value_dashWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_dashWidth_value_type = runtimeType(value_dashWidth_value)
            if (TypeChecker.isEdgeWidths(value_dashWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_dashWidth_value_0  = value_dashWidth_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_dashWidth_value_0)
            }
            else if (TypeChecker.isLengthMetrics(value_dashWidth_value, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_dashWidth_value_1  = value_dashWidth_value as LengthMetrics
                valueSerializer.writeLengthMetrics(value_dashWidth_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_dashWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_dashWidth_value_2  = value_dashWidth_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_dashWidth_value_2)
            }
        }
    }
    writeButtonStyle(value: ButtonStyle): void {
        let valueSerializer : Serializer = this
        const value_left  = value.left
        let value_left_type : int32 = RuntimeType.UNDEFINED
        value_left_type = runtimeType(value_left)
        valueSerializer.writeInt8(value_left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_left_type)) {
            const value_left_value  = value_left!
            valueSerializer.writeNumber(value_left_value)
        }
        const value_top  = value.top
        let value_top_type : int32 = RuntimeType.UNDEFINED
        value_top_type = runtimeType(value_top)
        valueSerializer.writeInt8(value_top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_top_type)) {
            const value_top_value  = value_top!
            valueSerializer.writeNumber(value_top_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeNumber(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeNumber(value_height_value)
        }
        const value_icons  = value.icons
        let value_icons_type : int32 = RuntimeType.UNDEFINED
        value_icons_type = runtimeType(value_icons)
        valueSerializer.writeInt8(value_icons_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icons_type)) {
            const value_icons_value  = value_icons!
            valueSerializer.writeButtonIconOptions(value_icons_value)
        }
    }
    writeCalendarDialogOptions(value: CalendarDialogOptions): void {
        let valueSerializer : Serializer = this
        const value_hintRadius  = value.hintRadius
        let value_hintRadius_type : int32 = RuntimeType.UNDEFINED
        value_hintRadius_type = runtimeType(value_hintRadius)
        valueSerializer.writeInt8(value_hintRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hintRadius_type)) {
            const value_hintRadius_value  = value_hintRadius!
            let value_hintRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_hintRadius_value_type = runtimeType(value_hintRadius_value)
            if (RuntimeType.NUMBER == value_hintRadius_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_hintRadius_value_0  = value_hintRadius_value as number
                valueSerializer.writeNumber(value_hintRadius_value_0)
            }
            else if (RuntimeType.OBJECT == value_hintRadius_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_hintRadius_value_1  = value_hintRadius_value as Resource
                valueSerializer.writeResource(value_hintRadius_value_1)
            }
        }
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            valueSerializer.writeInt64((value_selected_value.getTime() as int64))
        }
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeInt64((value_start_value.getTime() as int64))
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeInt64((value_end_value.getTime() as int64))
        }
        const value_disabledDateRange  = value.disabledDateRange
        let value_disabledDateRange_type : int32 = RuntimeType.UNDEFINED
        value_disabledDateRange_type = runtimeType(value_disabledDateRange)
        valueSerializer.writeInt8(value_disabledDateRange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disabledDateRange_type)) {
            const value_disabledDateRange_value  = value_disabledDateRange!
            valueSerializer.writeInt32(value_disabledDateRange_value.length as int32)
            for (let i = 0; i < value_disabledDateRange_value.length; i++) {
                const value_disabledDateRange_value_element : DateRange = value_disabledDateRange_value[i]
                valueSerializer.writeDateRange(value_disabledDateRange_value_element)
            }
        }
        const value_onAccept  = value.onAccept
        let value_onAccept_type : int32 = RuntimeType.UNDEFINED
        value_onAccept_type = runtimeType(value_onAccept)
        valueSerializer.writeInt8(value_onAccept_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAccept_type)) {
            const value_onAccept_value  = value_onAccept!
            valueSerializer.holdAndWriteCallback(value_onAccept_value)
        }
        const value_onCancel  = value.onCancel
        let value_onCancel_type : int32 = RuntimeType.UNDEFINED
        value_onCancel_type = runtimeType(value_onCancel)
        valueSerializer.writeInt8(value_onCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onCancel_type)) {
            const value_onCancel_value  = value_onCancel!
            valueSerializer.holdAndWriteCallback(value_onCancel_value)
        }
        const value_onChange  = value.onChange
        let value_onChange_type : int32 = RuntimeType.UNDEFINED
        value_onChange_type = runtimeType(value_onChange)
        valueSerializer.writeInt8(value_onChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onChange_type)) {
            const value_onChange_value  = value_onChange!
            valueSerializer.holdAndWriteCallback(value_onChange_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_acceptButtonStyle  = value.acceptButtonStyle
        let value_acceptButtonStyle_type : int32 = RuntimeType.UNDEFINED
        value_acceptButtonStyle_type = runtimeType(value_acceptButtonStyle)
        valueSerializer.writeInt8(value_acceptButtonStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_acceptButtonStyle_type)) {
            const value_acceptButtonStyle_value  = value_acceptButtonStyle!
            valueSerializer.writePickerDialogButtonStyle(value_acceptButtonStyle_value)
        }
        const value_cancelButtonStyle  = value.cancelButtonStyle
        let value_cancelButtonStyle_type : int32 = RuntimeType.UNDEFINED
        value_cancelButtonStyle_type = runtimeType(value_cancelButtonStyle)
        valueSerializer.writeInt8(value_cancelButtonStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cancelButtonStyle_type)) {
            const value_cancelButtonStyle_value  = value_cancelButtonStyle!
            valueSerializer.writePickerDialogButtonStyle(value_cancelButtonStyle_value)
        }
        const value_onDidAppear  = value.onDidAppear
        let value_onDidAppear_type : int32 = RuntimeType.UNDEFINED
        value_onDidAppear_type = runtimeType(value_onDidAppear)
        valueSerializer.writeInt8(value_onDidAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidAppear_type)) {
            const value_onDidAppear_value  = value_onDidAppear!
            valueSerializer.holdAndWriteCallback(value_onDidAppear_value)
        }
        const value_onDidDisappear  = value.onDidDisappear
        let value_onDidDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDidDisappear_type = runtimeType(value_onDidDisappear)
        valueSerializer.writeInt8(value_onDidDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidDisappear_type)) {
            const value_onDidDisappear_value  = value_onDidDisappear!
            valueSerializer.holdAndWriteCallback(value_onDidDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_markToday  = value.markToday
        let value_markToday_type : int32 = RuntimeType.UNDEFINED
        value_markToday_type = runtimeType(value_markToday)
        valueSerializer.writeInt8(value_markToday_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_markToday_type)) {
            const value_markToday_value  = value_markToday!
            valueSerializer.writeBoolean(value_markToday_value)
        }
    }
    writeCancelButtonOptions(value: CancelButtonOptions): void {
        let valueSerializer : Serializer = this
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = (value_style as CancelButtonStyle)
            valueSerializer.writeInt32(TypeChecker.CancelButtonStyle_ToNumeric(value_style_value))
        }
        const value_icon  = value.icon
        let value_icon_type : int32 = RuntimeType.UNDEFINED
        value_icon_type = runtimeType(value_icon)
        valueSerializer.writeInt8(value_icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_icon_type)) {
            const value_icon_value  = value_icon!
            valueSerializer.writeIconOptions(value_icon_value)
        }
    }
    writeCapsuleStyleOptions(value: CapsuleStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_enableScanEffect  = value.enableScanEffect
        let value_enableScanEffect_type : int32 = RuntimeType.UNDEFINED
        value_enableScanEffect_type = runtimeType(value_enableScanEffect)
        valueSerializer.writeInt8(value_enableScanEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableScanEffect_type)) {
            const value_enableScanEffect_value  = value_enableScanEffect!
            valueSerializer.writeBoolean(value_enableScanEffect_value)
        }
        const value_borderColor  = value.borderColor
        let value_borderColor_type : int32 = RuntimeType.UNDEFINED
        value_borderColor_type = runtimeType(value_borderColor)
        valueSerializer.writeInt8(value_borderColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderColor_type)) {
            const value_borderColor_value  = value_borderColor!
            let value_borderColor_value_type : int32 = RuntimeType.UNDEFINED
            value_borderColor_value_type = runtimeType(value_borderColor_value)
            if (TypeChecker.isColor(value_borderColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderColor_value_0  = value_borderColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_borderColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_borderColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderColor_value_1  = value_borderColor_value as number
                valueSerializer.writeNumber(value_borderColor_value_1)
            }
            else if (RuntimeType.STRING == value_borderColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderColor_value_2  = value_borderColor_value as string
                valueSerializer.writeString(value_borderColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_borderColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_borderColor_value_3  = value_borderColor_value as Resource
                valueSerializer.writeResource(value_borderColor_value_3)
            }
        }
        const value_borderWidth  = value.borderWidth
        let value_borderWidth_type : int32 = RuntimeType.UNDEFINED
        value_borderWidth_type = runtimeType(value_borderWidth)
        valueSerializer.writeInt8(value_borderWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderWidth_type)) {
            const value_borderWidth_value  = value_borderWidth!
            valueSerializer.writeLength(value_borderWidth_value)
        }
        const value_content  = value.content
        let value_content_type : int32 = RuntimeType.UNDEFINED
        value_content_type = runtimeType(value_content)
        valueSerializer.writeInt8(value_content_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_content_type)) {
            const value_content_value  = value_content!
            valueSerializer.writeString(value_content_value)
        }
        const value_font  = value.font
        let value_font_type : int32 = RuntimeType.UNDEFINED
        value_font_type = runtimeType(value_font)
        valueSerializer.writeInt8(value_font_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_font_type)) {
            const value_font_value  = value_font!
            valueSerializer.writeFont(value_font_value)
        }
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        valueSerializer.writeInt8(value_fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontColor_type)) {
            const value_fontColor_value  = value_fontColor!
            let value_fontColor_value_type : int32 = RuntimeType.UNDEFINED
            value_fontColor_value_type = runtimeType(value_fontColor_value)
            if (TypeChecker.isColor(value_fontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontColor_value_0  = value_fontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontColor_value_1  = value_fontColor_value as number
                valueSerializer.writeNumber(value_fontColor_value_1)
            }
            else if (RuntimeType.STRING == value_fontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontColor_value_2  = value_fontColor_value as string
                valueSerializer.writeString(value_fontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontColor_value_3  = value_fontColor_value as Resource
                valueSerializer.writeResource(value_fontColor_value_3)
            }
        }
        const value_showDefaultPercentage  = value.showDefaultPercentage
        let value_showDefaultPercentage_type : int32 = RuntimeType.UNDEFINED
        value_showDefaultPercentage_type = runtimeType(value_showDefaultPercentage)
        valueSerializer.writeInt8(value_showDefaultPercentage_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showDefaultPercentage_type)) {
            const value_showDefaultPercentage_value  = value_showDefaultPercentage!
            valueSerializer.writeBoolean(value_showDefaultPercentage_value)
        }
        const value_borderRadius  = value.borderRadius
        let value_borderRadius_type : int32 = RuntimeType.UNDEFINED
        value_borderRadius_type = runtimeType(value_borderRadius)
        valueSerializer.writeInt8(value_borderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderRadius_type)) {
            const value_borderRadius_value  = value_borderRadius!
            valueSerializer.writeLengthMetrics(value_borderRadius_value)
        }
    }
    writeClickEvent(value: ClickEvent): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeCustomDialogControllerOptions(value: CustomDialogControllerOptions): void {
        let valueSerializer : Serializer = this
        const value_builder  = value.builder
        valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_builder))
        const value_cancel  = value.cancel
        let value_cancel_type : int32 = RuntimeType.UNDEFINED
        value_cancel_type = runtimeType(value_cancel)
        valueSerializer.writeInt8(value_cancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cancel_type)) {
            const value_cancel_value  = value_cancel!
            valueSerializer.holdAndWriteCallback(value_cancel_value)
        }
        const value_autoCancel  = value.autoCancel
        let value_autoCancel_type : int32 = RuntimeType.UNDEFINED
        value_autoCancel_type = runtimeType(value_autoCancel)
        valueSerializer.writeInt8(value_autoCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_autoCancel_type)) {
            const value_autoCancel_value  = value_autoCancel!
            valueSerializer.writeBoolean(value_autoCancel_value)
        }
        const value_alignment  = value.alignment
        let value_alignment_type : int32 = RuntimeType.UNDEFINED
        value_alignment_type = runtimeType(value_alignment)
        valueSerializer.writeInt8(value_alignment_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignment_type)) {
            const value_alignment_value  = (value_alignment as DialogAlignment)
            valueSerializer.writeInt32(TypeChecker.DialogAlignment_ToNumeric(value_alignment_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeOffset(value_offset_value)
        }
        const value_customStyle  = value.customStyle
        let value_customStyle_type : int32 = RuntimeType.UNDEFINED
        value_customStyle_type = runtimeType(value_customStyle)
        valueSerializer.writeInt8(value_customStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_customStyle_type)) {
            const value_customStyle_value  = value_customStyle!
            valueSerializer.writeBoolean(value_customStyle_value)
        }
        const value_gridCount  = value.gridCount
        let value_gridCount_type : int32 = RuntimeType.UNDEFINED
        value_gridCount_type = runtimeType(value_gridCount)
        valueSerializer.writeInt8(value_gridCount_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gridCount_type)) {
            const value_gridCount_value  = value_gridCount!
            valueSerializer.writeNumber(value_gridCount_value)
        }
        const value_maskColor  = value.maskColor
        let value_maskColor_type : int32 = RuntimeType.UNDEFINED
        value_maskColor_type = runtimeType(value_maskColor)
        valueSerializer.writeInt8(value_maskColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskColor_type)) {
            const value_maskColor_value  = value_maskColor!
            let value_maskColor_value_type : int32 = RuntimeType.UNDEFINED
            value_maskColor_value_type = runtimeType(value_maskColor_value)
            if (TypeChecker.isColor(value_maskColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_maskColor_value_0  = value_maskColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_maskColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_maskColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_maskColor_value_1  = value_maskColor_value as number
                valueSerializer.writeNumber(value_maskColor_value_1)
            }
            else if (RuntimeType.STRING == value_maskColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_maskColor_value_2  = value_maskColor_value as string
                valueSerializer.writeString(value_maskColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_maskColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_maskColor_value_3  = value_maskColor_value as Resource
                valueSerializer.writeResource(value_maskColor_value_3)
            }
        }
        const value_maskRect  = value.maskRect
        let value_maskRect_type : int32 = RuntimeType.UNDEFINED
        value_maskRect_type = runtimeType(value_maskRect)
        valueSerializer.writeInt8(value_maskRect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskRect_type)) {
            const value_maskRect_value  = value_maskRect!
            valueSerializer.writeRectangle(value_maskRect_value)
        }
        const value_openAnimation  = value.openAnimation
        let value_openAnimation_type : int32 = RuntimeType.UNDEFINED
        value_openAnimation_type = runtimeType(value_openAnimation)
        valueSerializer.writeInt8(value_openAnimation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_openAnimation_type)) {
            const value_openAnimation_value  = value_openAnimation!
            valueSerializer.writeAnimateParam(value_openAnimation_value)
        }
        const value_closeAnimation  = value.closeAnimation
        let value_closeAnimation_type : int32 = RuntimeType.UNDEFINED
        value_closeAnimation_type = runtimeType(value_closeAnimation)
        valueSerializer.writeInt8(value_closeAnimation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_closeAnimation_type)) {
            const value_closeAnimation_value  = value_closeAnimation!
            valueSerializer.writeAnimateParam(value_closeAnimation_value)
        }
        const value_showInSubWindow  = value.showInSubWindow
        let value_showInSubWindow_type : int32 = RuntimeType.UNDEFINED
        value_showInSubWindow_type = runtimeType(value_showInSubWindow)
        valueSerializer.writeInt8(value_showInSubWindow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showInSubWindow_type)) {
            const value_showInSubWindow_value  = value_showInSubWindow!
            valueSerializer.writeBoolean(value_showInSubWindow_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_cornerRadius  = value.cornerRadius
        let value_cornerRadius_type : int32 = RuntimeType.UNDEFINED
        value_cornerRadius_type = runtimeType(value_cornerRadius)
        valueSerializer.writeInt8(value_cornerRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cornerRadius_type)) {
            const value_cornerRadius_value  = value_cornerRadius!
            let value_cornerRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_cornerRadius_value_type = runtimeType(value_cornerRadius_value)
            if (((RuntimeType.NUMBER) == (value_cornerRadius_value_type)) || ((RuntimeType.STRING) == (value_cornerRadius_value_type)) || (((RuntimeType.OBJECT) == (value_cornerRadius_value_type)) && (TypeChecker.isResource(value_cornerRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_cornerRadius_value_0  = value_cornerRadius_value as Dimension
                valueSerializer.writeLength(value_cornerRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_cornerRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_cornerRadius_value_1  = value_cornerRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_cornerRadius_value_1)
            }
        }
        const value_isModal  = value.isModal
        let value_isModal_type : int32 = RuntimeType.UNDEFINED
        value_isModal_type = runtimeType(value_isModal)
        valueSerializer.writeInt8(value_isModal_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_isModal_type)) {
            const value_isModal_value  = value_isModal!
            valueSerializer.writeBoolean(value_isModal_value)
        }
        const value_onWillDismiss  = value.onWillDismiss
        let value_onWillDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillDismiss_type = runtimeType(value_onWillDismiss)
        valueSerializer.writeInt8(value_onWillDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDismiss_type)) {
            const value_onWillDismiss_value  = value_onWillDismiss!
            valueSerializer.holdAndWriteCallback(value_onWillDismiss_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            valueSerializer.writeLength(value_height_value)
        }
        const value_borderWidth  = value.borderWidth
        let value_borderWidth_type : int32 = RuntimeType.UNDEFINED
        value_borderWidth_type = runtimeType(value_borderWidth)
        valueSerializer.writeInt8(value_borderWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderWidth_type)) {
            const value_borderWidth_value  = value_borderWidth!
            let value_borderWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_borderWidth_value_type = runtimeType(value_borderWidth_value)
            if (((RuntimeType.NUMBER) == (value_borderWidth_value_type)) || ((RuntimeType.STRING) == (value_borderWidth_value_type)) || (((RuntimeType.OBJECT) == (value_borderWidth_value_type)) && (TypeChecker.isResource(value_borderWidth_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderWidth_value_0  = value_borderWidth_value as Dimension
                valueSerializer.writeLength(value_borderWidth_value_0)
            }
            else if (TypeChecker.isEdgeWidths(value_borderWidth_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderWidth_value_1  = value_borderWidth_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_borderWidth_value_1)
            }
        }
        const value_borderColor  = value.borderColor
        let value_borderColor_type : int32 = RuntimeType.UNDEFINED
        value_borderColor_type = runtimeType(value_borderColor)
        valueSerializer.writeInt8(value_borderColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderColor_type)) {
            const value_borderColor_value  = value_borderColor!
            let value_borderColor_value_type : int32 = RuntimeType.UNDEFINED
            value_borderColor_value_type = runtimeType(value_borderColor_value)
            if ((TypeChecker.isColor(value_borderColor_value)) || (RuntimeType.NUMBER == value_borderColor_value_type) || (RuntimeType.STRING == value_borderColor_value_type) || (RuntimeType.OBJECT == value_borderColor_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderColor_value_0  = value_borderColor_value as ResourceColor
                let value_borderColor_value_0_type : int32 = RuntimeType.UNDEFINED
                value_borderColor_value_0_type = runtimeType(value_borderColor_value_0)
                if (TypeChecker.isColor(value_borderColor_value_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_borderColor_value_0_0  = value_borderColor_value_0 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_borderColor_value_0_0))
                }
                else if (RuntimeType.NUMBER == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_borderColor_value_0_1  = value_borderColor_value_0 as number
                    valueSerializer.writeNumber(value_borderColor_value_0_1)
                }
                else if (RuntimeType.STRING == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_borderColor_value_0_2  = value_borderColor_value_0 as string
                    valueSerializer.writeString(value_borderColor_value_0_2)
                }
                else if (RuntimeType.OBJECT == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_borderColor_value_0_3  = value_borderColor_value_0 as Resource
                    valueSerializer.writeResource(value_borderColor_value_0_3)
                }
            }
            else if (TypeChecker.isEdgeColors(value_borderColor_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderColor_value_1  = value_borderColor_value as EdgeColors
                valueSerializer.writeEdgeColors(value_borderColor_value_1)
            }
        }
        const value_borderStyle  = value.borderStyle
        let value_borderStyle_type : int32 = RuntimeType.UNDEFINED
        value_borderStyle_type = runtimeType(value_borderStyle)
        valueSerializer.writeInt8(value_borderStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderStyle_type)) {
            const value_borderStyle_value  = value_borderStyle!
            let value_borderStyle_value_type : int32 = RuntimeType.UNDEFINED
            value_borderStyle_value_type = runtimeType(value_borderStyle_value)
            if (TypeChecker.isBorderStyle(value_borderStyle_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderStyle_value_0  = value_borderStyle_value as BorderStyle
                valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_borderStyle_value_0))
            }
            else if (RuntimeType.OBJECT == value_borderStyle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderStyle_value_1  = value_borderStyle_value as EdgeStyles
                valueSerializer.writeEdgeStyles(value_borderStyle_value_1)
            }
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_keyboardAvoidMode  = value.keyboardAvoidMode
        let value_keyboardAvoidMode_type : int32 = RuntimeType.UNDEFINED
        value_keyboardAvoidMode_type = runtimeType(value_keyboardAvoidMode)
        valueSerializer.writeInt8(value_keyboardAvoidMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_keyboardAvoidMode_type)) {
            const value_keyboardAvoidMode_value  = (value_keyboardAvoidMode as KeyboardAvoidMode)
            valueSerializer.writeInt32(TypeChecker.KeyboardAvoidMode_ToNumeric(value_keyboardAvoidMode_value))
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_onDidAppear  = value.onDidAppear
        let value_onDidAppear_type : int32 = RuntimeType.UNDEFINED
        value_onDidAppear_type = runtimeType(value_onDidAppear)
        valueSerializer.writeInt8(value_onDidAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidAppear_type)) {
            const value_onDidAppear_value  = value_onDidAppear!
            valueSerializer.holdAndWriteCallback(value_onDidAppear_value)
        }
        const value_onDidDisappear  = value.onDidDisappear
        let value_onDidDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDidDisappear_type = runtimeType(value_onDidDisappear)
        valueSerializer.writeInt8(value_onDidDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidDisappear_type)) {
            const value_onDidDisappear_value  = value_onDidDisappear!
            valueSerializer.holdAndWriteCallback(value_onDidDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_keyboardAvoidDistance  = value.keyboardAvoidDistance
        let value_keyboardAvoidDistance_type : int32 = RuntimeType.UNDEFINED
        value_keyboardAvoidDistance_type = runtimeType(value_keyboardAvoidDistance)
        valueSerializer.writeInt8(value_keyboardAvoidDistance_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_keyboardAvoidDistance_type)) {
            const value_keyboardAvoidDistance_value  = value_keyboardAvoidDistance!
            valueSerializer.writeLengthMetrics(value_keyboardAvoidDistance_value)
        }
        const value_levelMode  = value.levelMode
        let value_levelMode_type : int32 = RuntimeType.UNDEFINED
        value_levelMode_type = runtimeType(value_levelMode)
        valueSerializer.writeInt8(value_levelMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelMode_type)) {
            const value_levelMode_value  = value_levelMode!
            valueSerializer.writeLevelMode(value_levelMode_value)
        }
        const value_levelUniqueId  = value.levelUniqueId
        let value_levelUniqueId_type : int32 = RuntimeType.UNDEFINED
        value_levelUniqueId_type = runtimeType(value_levelUniqueId)
        valueSerializer.writeInt8(value_levelUniqueId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelUniqueId_type)) {
            const value_levelUniqueId_value  = value_levelUniqueId!
            valueSerializer.writeNumber(value_levelUniqueId_value)
        }
        const value_immersiveMode  = value.immersiveMode
        let value_immersiveMode_type : int32 = RuntimeType.UNDEFINED
        value_immersiveMode_type = runtimeType(value_immersiveMode)
        valueSerializer.writeInt8(value_immersiveMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_immersiveMode_type)) {
            const value_immersiveMode_value  = value_immersiveMode!
            valueSerializer.writeImmersiveMode(value_immersiveMode_value)
        }
        const value_levelOrder  = value.levelOrder
        let value_levelOrder_type : int32 = RuntimeType.UNDEFINED
        value_levelOrder_type = runtimeType(value_levelOrder)
        valueSerializer.writeInt8(value_levelOrder_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_levelOrder_type)) {
            const value_levelOrder_value  = value_levelOrder!
            valueSerializer.writeLevelOrder(value_levelOrder_value)
        }
        const value_focusable  = value.focusable
        let value_focusable_type : int32 = RuntimeType.UNDEFINED
        value_focusable_type = runtimeType(value_focusable)
        valueSerializer.writeInt8(value_focusable_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_focusable_type)) {
            const value_focusable_value  = value_focusable!
            valueSerializer.writeBoolean(value_focusable_value)
        }
    }
    writeCustomPopupOptions(value: CustomPopupOptions): void {
        let valueSerializer : Serializer = this
        const value_builder  = value.builder
        valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_builder))
        const value_placement  = value.placement
        let value_placement_type : int32 = RuntimeType.UNDEFINED
        value_placement_type = runtimeType(value_placement)
        valueSerializer.writeInt8(value_placement_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placement_type)) {
            const value_placement_value  = (value_placement as Placement)
            valueSerializer.writeInt32(TypeChecker.Placement_ToNumeric(value_placement_value))
        }
        const value_popupColor  = value.popupColor
        let value_popupColor_type : int32 = RuntimeType.UNDEFINED
        value_popupColor_type = runtimeType(value_popupColor)
        valueSerializer.writeInt8(value_popupColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_popupColor_type)) {
            const value_popupColor_value  = value_popupColor!
            let value_popupColor_value_type : int32 = RuntimeType.UNDEFINED
            value_popupColor_value_type = runtimeType(value_popupColor_value)
            if (TypeChecker.isColor(value_popupColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_popupColor_value_0  = value_popupColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_popupColor_value_0))
            }
            else if (RuntimeType.STRING == value_popupColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_popupColor_value_1  = value_popupColor_value as string
                valueSerializer.writeString(value_popupColor_value_1)
            }
            else if (RuntimeType.OBJECT == value_popupColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_popupColor_value_2  = value_popupColor_value as Resource
                valueSerializer.writeResource(value_popupColor_value_2)
            }
            else if (RuntimeType.NUMBER == value_popupColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_popupColor_value_3  = value_popupColor_value as number
                valueSerializer.writeNumber(value_popupColor_value_3)
            }
        }
        const value_enableArrow  = value.enableArrow
        let value_enableArrow_type : int32 = RuntimeType.UNDEFINED
        value_enableArrow_type = runtimeType(value_enableArrow)
        valueSerializer.writeInt8(value_enableArrow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableArrow_type)) {
            const value_enableArrow_value  = value_enableArrow!
            valueSerializer.writeBoolean(value_enableArrow_value)
        }
        const value_autoCancel  = value.autoCancel
        let value_autoCancel_type : int32 = RuntimeType.UNDEFINED
        value_autoCancel_type = runtimeType(value_autoCancel)
        valueSerializer.writeInt8(value_autoCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_autoCancel_type)) {
            const value_autoCancel_value  = value_autoCancel!
            valueSerializer.writeBoolean(value_autoCancel_value)
        }
        const value_onStateChange  = value.onStateChange
        let value_onStateChange_type : int32 = RuntimeType.UNDEFINED
        value_onStateChange_type = runtimeType(value_onStateChange)
        valueSerializer.writeInt8(value_onStateChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onStateChange_type)) {
            const value_onStateChange_value  = value_onStateChange!
            valueSerializer.holdAndWriteCallback(value_onStateChange_value)
        }
        const value_arrowOffset  = value.arrowOffset
        let value_arrowOffset_type : int32 = RuntimeType.UNDEFINED
        value_arrowOffset_type = runtimeType(value_arrowOffset)
        valueSerializer.writeInt8(value_arrowOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowOffset_type)) {
            const value_arrowOffset_value  = value_arrowOffset!
            valueSerializer.writeLength(value_arrowOffset_value)
        }
        const value_showInSubWindow  = value.showInSubWindow
        let value_showInSubWindow_type : int32 = RuntimeType.UNDEFINED
        value_showInSubWindow_type = runtimeType(value_showInSubWindow)
        valueSerializer.writeInt8(value_showInSubWindow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showInSubWindow_type)) {
            const value_showInSubWindow_value  = value_showInSubWindow!
            valueSerializer.writeBoolean(value_showInSubWindow_value)
        }
        const value_mask  = value.mask
        let value_mask_type : int32 = RuntimeType.UNDEFINED
        value_mask_type = runtimeType(value_mask)
        valueSerializer.writeInt8(value_mask_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_mask_type)) {
            const value_mask_value  = value_mask!
            let value_mask_value_type : int32 = RuntimeType.UNDEFINED
            value_mask_value_type = runtimeType(value_mask_value)
            if (RuntimeType.BOOLEAN == value_mask_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_mask_value_0  = value_mask_value as boolean
                valueSerializer.writeBoolean(value_mask_value_0)
            }
            else if (RuntimeType.OBJECT == value_mask_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_mask_value_1  = value_mask_value as PopupMaskType
                const value_mask_value_1_color  = value_mask_value_1.color
                let value_mask_value_1_color_type : int32 = RuntimeType.UNDEFINED
                value_mask_value_1_color_type = runtimeType(value_mask_value_1_color)
                if (TypeChecker.isColor(value_mask_value_1_color)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_mask_value_1_color_0  = value_mask_value_1_color as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_mask_value_1_color_0))
                }
                else if (RuntimeType.NUMBER == value_mask_value_1_color_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_mask_value_1_color_1  = value_mask_value_1_color as number
                    valueSerializer.writeNumber(value_mask_value_1_color_1)
                }
                else if (RuntimeType.STRING == value_mask_value_1_color_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_mask_value_1_color_2  = value_mask_value_1_color as string
                    valueSerializer.writeString(value_mask_value_1_color_2)
                }
                else if (RuntimeType.OBJECT == value_mask_value_1_color_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_mask_value_1_color_3  = value_mask_value_1_color as Resource
                    valueSerializer.writeResource(value_mask_value_1_color_3)
                }
            }
        }
        const value_targetSpace  = value.targetSpace
        let value_targetSpace_type : int32 = RuntimeType.UNDEFINED
        value_targetSpace_type = runtimeType(value_targetSpace)
        valueSerializer.writeInt8(value_targetSpace_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_targetSpace_type)) {
            const value_targetSpace_value  = value_targetSpace!
            valueSerializer.writeLength(value_targetSpace_value)
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writePosition(value_offset_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_arrowPointPosition  = value.arrowPointPosition
        let value_arrowPointPosition_type : int32 = RuntimeType.UNDEFINED
        value_arrowPointPosition_type = runtimeType(value_arrowPointPosition)
        valueSerializer.writeInt8(value_arrowPointPosition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowPointPosition_type)) {
            const value_arrowPointPosition_value  = (value_arrowPointPosition as ArrowPointPosition)
            valueSerializer.writeInt32(TypeChecker.ArrowPointPosition_ToNumeric(value_arrowPointPosition_value))
        }
        const value_arrowWidth  = value.arrowWidth
        let value_arrowWidth_type : int32 = RuntimeType.UNDEFINED
        value_arrowWidth_type = runtimeType(value_arrowWidth)
        valueSerializer.writeInt8(value_arrowWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowWidth_type)) {
            const value_arrowWidth_value  = value_arrowWidth!
            valueSerializer.writeLength(value_arrowWidth_value)
        }
        const value_arrowHeight  = value.arrowHeight
        let value_arrowHeight_type : int32 = RuntimeType.UNDEFINED
        value_arrowHeight_type = runtimeType(value_arrowHeight)
        valueSerializer.writeInt8(value_arrowHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowHeight_type)) {
            const value_arrowHeight_value  = value_arrowHeight!
            valueSerializer.writeLength(value_arrowHeight_value)
        }
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            valueSerializer.writeLength(value_radius_value)
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_focusable  = value.focusable
        let value_focusable_type : int32 = RuntimeType.UNDEFINED
        value_focusable_type = runtimeType(value_focusable)
        valueSerializer.writeInt8(value_focusable_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_focusable_type)) {
            const value_focusable_value  = value_focusable!
            valueSerializer.writeBoolean(value_focusable_value)
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
        const value_onWillDismiss  = value.onWillDismiss
        let value_onWillDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillDismiss_type = runtimeType(value_onWillDismiss)
        valueSerializer.writeInt8(value_onWillDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDismiss_type)) {
            const value_onWillDismiss_value  = value_onWillDismiss!
            let value_onWillDismiss_value_type : int32 = RuntimeType.UNDEFINED
            value_onWillDismiss_value_type = runtimeType(value_onWillDismiss_value)
            if (RuntimeType.BOOLEAN == value_onWillDismiss_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_onWillDismiss_value_0  = value_onWillDismiss_value as boolean
                valueSerializer.writeBoolean(value_onWillDismiss_value_0)
            }
            else if (RuntimeType.FUNCTION == value_onWillDismiss_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_onWillDismiss_value_1  = value_onWillDismiss_value as ((parameter: DismissPopupAction) => void)
                valueSerializer.holdAndWriteCallback(value_onWillDismiss_value_1)
            }
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_followTransformOfTarget  = value.followTransformOfTarget
        let value_followTransformOfTarget_type : int32 = RuntimeType.UNDEFINED
        value_followTransformOfTarget_type = runtimeType(value_followTransformOfTarget)
        valueSerializer.writeInt8(value_followTransformOfTarget_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_followTransformOfTarget_type)) {
            const value_followTransformOfTarget_value  = value_followTransformOfTarget!
            valueSerializer.writeBoolean(value_followTransformOfTarget_value)
        }
        const value_keyboardAvoidMode  = value.keyboardAvoidMode
        let value_keyboardAvoidMode_type : int32 = RuntimeType.UNDEFINED
        value_keyboardAvoidMode_type = runtimeType(value_keyboardAvoidMode)
        valueSerializer.writeInt8(value_keyboardAvoidMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_keyboardAvoidMode_type)) {
            const value_keyboardAvoidMode_value  = (value_keyboardAvoidMode as KeyboardAvoidMode)
            valueSerializer.writeInt32(TypeChecker.KeyboardAvoidMode_ToNumeric(value_keyboardAvoidMode_value))
        }
    }
    writeCustomTheme(value: CustomTheme): void {
        let valueSerializer : Serializer = this
        const value_colors  = value.colors
        let value_colors_type : int32 = RuntimeType.UNDEFINED
        value_colors_type = runtimeType(value_colors)
        valueSerializer.writeInt8(value_colors_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_colors_type)) {
            const value_colors_value  = value_colors!
            valueSerializer.writeCustomColors(value_colors_value)
        }
    }
    writeDigitIndicator(value: DigitIndicator): void {
        let valueSerializer : Serializer = this
        const value__left  = value._left
        let value__left_type : int32 = RuntimeType.UNDEFINED
        value__left_type = runtimeType(value__left)
        valueSerializer.writeInt8(value__left_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__left_type)) {
            const value__left_value  = value__left!
            valueSerializer.writeLength(value__left_value)
        }
        const value__top  = value._top
        let value__top_type : int32 = RuntimeType.UNDEFINED
        value__top_type = runtimeType(value__top)
        valueSerializer.writeInt8(value__top_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__top_type)) {
            const value__top_value  = value__top!
            valueSerializer.writeLength(value__top_value)
        }
        const value__right  = value._right
        let value__right_type : int32 = RuntimeType.UNDEFINED
        value__right_type = runtimeType(value__right)
        valueSerializer.writeInt8(value__right_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__right_type)) {
            const value__right_value  = value__right!
            valueSerializer.writeLength(value__right_value)
        }
        const value__bottom  = value._bottom
        let value__bottom_type : int32 = RuntimeType.UNDEFINED
        value__bottom_type = runtimeType(value__bottom)
        valueSerializer.writeInt8(value__bottom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__bottom_type)) {
            const value__bottom_value  = value__bottom!
            valueSerializer.writeLength(value__bottom_value)
        }
        const value__start  = value._start
        let value__start_type : int32 = RuntimeType.UNDEFINED
        value__start_type = runtimeType(value__start)
        valueSerializer.writeInt8(value__start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__start_type)) {
            const value__start_value  = value__start!
            valueSerializer.writeLengthMetrics(value__start_value)
        }
        const value__end  = value._end
        let value__end_type : int32 = RuntimeType.UNDEFINED
        value__end_type = runtimeType(value__end)
        valueSerializer.writeInt8(value__end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__end_type)) {
            const value__end_value  = value__end!
            valueSerializer.writeLengthMetrics(value__end_value)
        }
        const value__fontColor  = value._fontColor
        let value__fontColor_type : int32 = RuntimeType.UNDEFINED
        value__fontColor_type = runtimeType(value__fontColor)
        valueSerializer.writeInt8(value__fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__fontColor_type)) {
            const value__fontColor_value  = value__fontColor!
            let value__fontColor_value_type : int32 = RuntimeType.UNDEFINED
            value__fontColor_value_type = runtimeType(value__fontColor_value)
            if (TypeChecker.isColor(value__fontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value__fontColor_value_0  = value__fontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value__fontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value__fontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value__fontColor_value_1  = value__fontColor_value as number
                valueSerializer.writeNumber(value__fontColor_value_1)
            }
            else if (RuntimeType.STRING == value__fontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value__fontColor_value_2  = value__fontColor_value as string
                valueSerializer.writeString(value__fontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value__fontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value__fontColor_value_3  = value__fontColor_value as Resource
                valueSerializer.writeResource(value__fontColor_value_3)
            }
        }
        const value__selectedFontColor  = value._selectedFontColor
        let value__selectedFontColor_type : int32 = RuntimeType.UNDEFINED
        value__selectedFontColor_type = runtimeType(value__selectedFontColor)
        valueSerializer.writeInt8(value__selectedFontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__selectedFontColor_type)) {
            const value__selectedFontColor_value  = value__selectedFontColor!
            let value__selectedFontColor_value_type : int32 = RuntimeType.UNDEFINED
            value__selectedFontColor_value_type = runtimeType(value__selectedFontColor_value)
            if (TypeChecker.isColor(value__selectedFontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value__selectedFontColor_value_0  = value__selectedFontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value__selectedFontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value__selectedFontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value__selectedFontColor_value_1  = value__selectedFontColor_value as number
                valueSerializer.writeNumber(value__selectedFontColor_value_1)
            }
            else if (RuntimeType.STRING == value__selectedFontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value__selectedFontColor_value_2  = value__selectedFontColor_value as string
                valueSerializer.writeString(value__selectedFontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value__selectedFontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value__selectedFontColor_value_3  = value__selectedFontColor_value as Resource
                valueSerializer.writeResource(value__selectedFontColor_value_3)
            }
        }
        const value__digitFont  = value._digitFont
        let value__digitFont_type : int32 = RuntimeType.UNDEFINED
        value__digitFont_type = runtimeType(value__digitFont)
        valueSerializer.writeInt8(value__digitFont_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__digitFont_type)) {
            const value__digitFont_value  = value__digitFont!
            valueSerializer.writeFont(value__digitFont_value)
        }
        const value__selectedDigitFont  = value._selectedDigitFont
        let value__selectedDigitFont_type : int32 = RuntimeType.UNDEFINED
        value__selectedDigitFont_type = runtimeType(value__selectedDigitFont)
        valueSerializer.writeInt8(value__selectedDigitFont_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__selectedDigitFont_type)) {
            const value__selectedDigitFont_value  = value__selectedDigitFont!
            valueSerializer.writeFont(value__selectedDigitFont_value)
        }
    }
    writeEditableTextChangeValue(value: EditableTextChangeValue): void {
        let valueSerializer : Serializer = this
        const value_content  = value.content
        valueSerializer.writeString(value_content)
        const value_previewText  = value.previewText
        let value_previewText_type : int32 = RuntimeType.UNDEFINED
        value_previewText_type = runtimeType(value_previewText)
        valueSerializer.writeInt8(value_previewText_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewText_type)) {
            const value_previewText_value  = value_previewText!
            valueSerializer.writePreviewText(value_previewText_value)
        }
        const value_options  = value.options
        let value_options_type : int32 = RuntimeType.UNDEFINED
        value_options_type = runtimeType(value_options)
        valueSerializer.writeInt8(value_options_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_options_type)) {
            const value_options_value  = value_options!
            valueSerializer.writeTextChangeOptions(value_options_value)
        }
    }
    writeFlexOptions(value: FlexOptions): void {
        let valueSerializer : Serializer = this
        const value_direction  = value.direction
        let value_direction_type : int32 = RuntimeType.UNDEFINED
        value_direction_type = runtimeType(value_direction)
        valueSerializer.writeInt8(value_direction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_direction_type)) {
            const value_direction_value  = (value_direction as FlexDirection)
            valueSerializer.writeInt32(TypeChecker.FlexDirection_ToNumeric(value_direction_value))
        }
        const value_wrap  = value.wrap
        let value_wrap_type : int32 = RuntimeType.UNDEFINED
        value_wrap_type = runtimeType(value_wrap)
        valueSerializer.writeInt8(value_wrap_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_wrap_type)) {
            const value_wrap_value  = (value_wrap as FlexWrap)
            valueSerializer.writeInt32(TypeChecker.FlexWrap_ToNumeric(value_wrap_value))
        }
        const value_justifyContent  = value.justifyContent
        let value_justifyContent_type : int32 = RuntimeType.UNDEFINED
        value_justifyContent_type = runtimeType(value_justifyContent)
        valueSerializer.writeInt8(value_justifyContent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_justifyContent_type)) {
            const value_justifyContent_value  = (value_justifyContent as FlexAlign)
            valueSerializer.writeInt32(TypeChecker.FlexAlign_ToNumeric(value_justifyContent_value))
        }
        const value_alignItems  = value.alignItems
        let value_alignItems_type : int32 = RuntimeType.UNDEFINED
        value_alignItems_type = runtimeType(value_alignItems)
        valueSerializer.writeInt8(value_alignItems_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignItems_type)) {
            const value_alignItems_value  = (value_alignItems as ItemAlign)
            valueSerializer.writeInt32(TypeChecker.ItemAlign_ToNumeric(value_alignItems_value))
        }
        const value_alignContent  = value.alignContent
        let value_alignContent_type : int32 = RuntimeType.UNDEFINED
        value_alignContent_type = runtimeType(value_alignContent)
        valueSerializer.writeInt8(value_alignContent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignContent_type)) {
            const value_alignContent_value  = (value_alignContent as FlexAlign)
            valueSerializer.writeInt32(TypeChecker.FlexAlign_ToNumeric(value_alignContent_value))
        }
        const value_space  = value.space
        let value_space_type : int32 = RuntimeType.UNDEFINED
        value_space_type = runtimeType(value_space)
        valueSerializer.writeInt8(value_space_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_space_type)) {
            const value_space_value  = value_space!
            valueSerializer.writeFlexSpaceOptions(value_space_value)
        }
    }
    writeGridRowOptions(value: GridRowOptions): void {
        let valueSerializer : Serializer = this
        const value_gutter  = value.gutter
        let value_gutter_type : int32 = RuntimeType.UNDEFINED
        value_gutter_type = runtimeType(value_gutter)
        valueSerializer.writeInt8(value_gutter_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gutter_type)) {
            const value_gutter_value  = value_gutter!
            let value_gutter_value_type : int32 = RuntimeType.UNDEFINED
            value_gutter_value_type = runtimeType(value_gutter_value)
            if (((RuntimeType.NUMBER) == (value_gutter_value_type)) || ((RuntimeType.STRING) == (value_gutter_value_type)) || (((RuntimeType.OBJECT) == (value_gutter_value_type)) && (TypeChecker.isResource(value_gutter_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_gutter_value_0  = value_gutter_value as Length
                valueSerializer.writeLength(value_gutter_value_0)
            }
            else if (TypeChecker.isGutterOption(value_gutter_value, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_gutter_value_1  = value_gutter_value as GutterOption
                valueSerializer.writeGutterOption(value_gutter_value_1)
            }
        }
        const value_columns  = value.columns
        let value_columns_type : int32 = RuntimeType.UNDEFINED
        value_columns_type = runtimeType(value_columns)
        valueSerializer.writeInt8(value_columns_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_columns_type)) {
            const value_columns_value  = value_columns!
            let value_columns_value_type : int32 = RuntimeType.UNDEFINED
            value_columns_value_type = runtimeType(value_columns_value)
            if (RuntimeType.NUMBER == value_columns_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_columns_value_0  = value_columns_value as number
                valueSerializer.writeNumber(value_columns_value_0)
            }
            else if (RuntimeType.OBJECT == value_columns_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_columns_value_1  = value_columns_value as GridRowColumnOption
                valueSerializer.writeGridRowColumnOption(value_columns_value_1)
            }
        }
        const value_breakpoints  = value.breakpoints
        let value_breakpoints_type : int32 = RuntimeType.UNDEFINED
        value_breakpoints_type = runtimeType(value_breakpoints)
        valueSerializer.writeInt8(value_breakpoints_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_breakpoints_type)) {
            const value_breakpoints_value  = value_breakpoints!
            valueSerializer.writeBreakPoints(value_breakpoints_value)
        }
        const value_direction  = value.direction
        let value_direction_type : int32 = RuntimeType.UNDEFINED
        value_direction_type = runtimeType(value_direction)
        valueSerializer.writeInt8(value_direction_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_direction_type)) {
            const value_direction_value  = (value_direction as GridRowDirection)
            valueSerializer.writeInt32(TypeChecker.GridRowDirection_ToNumeric(value_direction_value))
        }
    }
    writeImageAttachment(value: ImageAttachment): void {
        let valueSerializer : Serializer = this
        valueSerializer.writePointer(toPeerPtr(value))
    }
    writeImageAttachmentInterface(value: ImageAttachmentInterface): void {
        let valueSerializer : Serializer = this
        const value_value  = value.value
        valueSerializer.writePixelMap(value_value)
        const value_size  = value.size
        let value_size_type : int32 = RuntimeType.UNDEFINED
        value_size_type = runtimeType(value_size)
        valueSerializer.writeInt8(value_size_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_size_type)) {
            const value_size_value  = value_size!
            valueSerializer.writeSizeOptions(value_size_value)
        }
        const value_verticalAlign  = value.verticalAlign
        let value_verticalAlign_type : int32 = RuntimeType.UNDEFINED
        value_verticalAlign_type = runtimeType(value_verticalAlign)
        valueSerializer.writeInt8(value_verticalAlign_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_verticalAlign_type)) {
            const value_verticalAlign_value  = (value_verticalAlign as ImageSpanAlignment)
            valueSerializer.writeInt32(TypeChecker.ImageSpanAlignment_ToNumeric(value_verticalAlign_value))
        }
        const value_objectFit  = value.objectFit
        let value_objectFit_type : int32 = RuntimeType.UNDEFINED
        value_objectFit_type = runtimeType(value_objectFit)
        valueSerializer.writeInt8(value_objectFit_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_objectFit_type)) {
            const value_objectFit_value  = (value_objectFit as ImageFit)
            valueSerializer.writeInt32(TypeChecker.ImageFit_ToNumeric(value_objectFit_value))
        }
        const value_layoutStyle  = value.layoutStyle
        let value_layoutStyle_type : int32 = RuntimeType.UNDEFINED
        value_layoutStyle_type = runtimeType(value_layoutStyle)
        valueSerializer.writeInt8(value_layoutStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_layoutStyle_type)) {
            const value_layoutStyle_value  = value_layoutStyle!
            valueSerializer.writeImageAttachmentLayoutStyle(value_layoutStyle_value)
        }
        const value_colorFilter  = value.colorFilter
        let value_colorFilter_type : int32 = RuntimeType.UNDEFINED
        value_colorFilter_type = runtimeType(value_colorFilter)
        valueSerializer.writeInt8(value_colorFilter_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_colorFilter_type)) {
            const value_colorFilter_value  = value_colorFilter!
            let value_colorFilter_value_type : int32 = RuntimeType.UNDEFINED
            value_colorFilter_value_type = runtimeType(value_colorFilter_value)
            if (TypeChecker.isColorFilter(value_colorFilter_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_colorFilter_value_0  = value_colorFilter_value as ColorFilter
                valueSerializer.writeColorFilter(value_colorFilter_value_0)
            }
            else if (TypeChecker.isDrawingColorFilter(value_colorFilter_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_colorFilter_value_1  = value_colorFilter_value as DrawingColorFilter
                valueSerializer.writeDrawingColorFilter(value_colorFilter_value_1)
            }
        }
    }
    writeLabelStyle(value: LabelStyle): void {
        let valueSerializer : Serializer = this
        const value_overflow  = value.overflow
        let value_overflow_type : int32 = RuntimeType.UNDEFINED
        value_overflow_type = runtimeType(value_overflow)
        valueSerializer.writeInt8(value_overflow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_overflow_type)) {
            const value_overflow_value  = (value_overflow as TextOverflow)
            valueSerializer.writeInt32(TypeChecker.TextOverflow_ToNumeric(value_overflow_value))
        }
        const value_maxLines  = value.maxLines
        let value_maxLines_type : int32 = RuntimeType.UNDEFINED
        value_maxLines_type = runtimeType(value_maxLines)
        valueSerializer.writeInt8(value_maxLines_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxLines_type)) {
            const value_maxLines_value  = value_maxLines!
            valueSerializer.writeNumber(value_maxLines_value)
        }
        const value_minFontSize  = value.minFontSize
        let value_minFontSize_type : int32 = RuntimeType.UNDEFINED
        value_minFontSize_type = runtimeType(value_minFontSize)
        valueSerializer.writeInt8(value_minFontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_minFontSize_type)) {
            const value_minFontSize_value  = value_minFontSize!
            let value_minFontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_minFontSize_value_type = runtimeType(value_minFontSize_value)
            if (RuntimeType.NUMBER == value_minFontSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_minFontSize_value_0  = value_minFontSize_value as number
                valueSerializer.writeNumber(value_minFontSize_value_0)
            }
            else if ((RuntimeType.STRING == value_minFontSize_value_type) || (RuntimeType.OBJECT == value_minFontSize_value_type)) {
                valueSerializer.writeInt8(1 as int32)
                const value_minFontSize_value_1  = value_minFontSize_value as ResourceStr
                let value_minFontSize_value_1_type : int32 = RuntimeType.UNDEFINED
                value_minFontSize_value_1_type = runtimeType(value_minFontSize_value_1)
                if (RuntimeType.STRING == value_minFontSize_value_1_type) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_minFontSize_value_1_0  = value_minFontSize_value_1 as string
                    valueSerializer.writeString(value_minFontSize_value_1_0)
                }
                else if (RuntimeType.OBJECT == value_minFontSize_value_1_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_minFontSize_value_1_1  = value_minFontSize_value_1 as Resource
                    valueSerializer.writeResource(value_minFontSize_value_1_1)
                }
            }
        }
        const value_maxFontSize  = value.maxFontSize
        let value_maxFontSize_type : int32 = RuntimeType.UNDEFINED
        value_maxFontSize_type = runtimeType(value_maxFontSize)
        valueSerializer.writeInt8(value_maxFontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxFontSize_type)) {
            const value_maxFontSize_value  = value_maxFontSize!
            let value_maxFontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_maxFontSize_value_type = runtimeType(value_maxFontSize_value)
            if (RuntimeType.NUMBER == value_maxFontSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_maxFontSize_value_0  = value_maxFontSize_value as number
                valueSerializer.writeNumber(value_maxFontSize_value_0)
            }
            else if ((RuntimeType.STRING == value_maxFontSize_value_type) || (RuntimeType.OBJECT == value_maxFontSize_value_type)) {
                valueSerializer.writeInt8(1 as int32)
                const value_maxFontSize_value_1  = value_maxFontSize_value as ResourceStr
                let value_maxFontSize_value_1_type : int32 = RuntimeType.UNDEFINED
                value_maxFontSize_value_1_type = runtimeType(value_maxFontSize_value_1)
                if (RuntimeType.STRING == value_maxFontSize_value_1_type) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_maxFontSize_value_1_0  = value_maxFontSize_value_1 as string
                    valueSerializer.writeString(value_maxFontSize_value_1_0)
                }
                else if (RuntimeType.OBJECT == value_maxFontSize_value_1_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_maxFontSize_value_1_1  = value_maxFontSize_value_1 as Resource
                    valueSerializer.writeResource(value_maxFontSize_value_1_1)
                }
            }
        }
        const value_heightAdaptivePolicy  = value.heightAdaptivePolicy
        let value_heightAdaptivePolicy_type : int32 = RuntimeType.UNDEFINED
        value_heightAdaptivePolicy_type = runtimeType(value_heightAdaptivePolicy)
        valueSerializer.writeInt8(value_heightAdaptivePolicy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_heightAdaptivePolicy_type)) {
            const value_heightAdaptivePolicy_value  = (value_heightAdaptivePolicy as TextHeightAdaptivePolicy)
            valueSerializer.writeInt32(TypeChecker.TextHeightAdaptivePolicy_ToNumeric(value_heightAdaptivePolicy_value))
        }
        const value_font  = value.font
        let value_font_type : int32 = RuntimeType.UNDEFINED
        value_font_type = runtimeType(value_font)
        valueSerializer.writeInt8(value_font_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_font_type)) {
            const value_font_value  = value_font!
            valueSerializer.writeFont(value_font_value)
        }
        const value_selectedColor  = value.selectedColor
        let value_selectedColor_type : int32 = RuntimeType.UNDEFINED
        value_selectedColor_type = runtimeType(value_selectedColor)
        valueSerializer.writeInt8(value_selectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selectedColor_type)) {
            const value_selectedColor_value  = value_selectedColor!
            let value_selectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_selectedColor_value_type = runtimeType(value_selectedColor_value)
            if (TypeChecker.isColor(value_selectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_selectedColor_value_0  = value_selectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_selectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_selectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_selectedColor_value_1  = value_selectedColor_value as number
                valueSerializer.writeNumber(value_selectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_selectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_selectedColor_value_2  = value_selectedColor_value as string
                valueSerializer.writeString(value_selectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_selectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_selectedColor_value_3  = value_selectedColor_value as Resource
                valueSerializer.writeResource(value_selectedColor_value_3)
            }
        }
        const value_unselectedColor  = value.unselectedColor
        let value_unselectedColor_type : int32 = RuntimeType.UNDEFINED
        value_unselectedColor_type = runtimeType(value_unselectedColor)
        valueSerializer.writeInt8(value_unselectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_unselectedColor_type)) {
            const value_unselectedColor_value  = value_unselectedColor!
            let value_unselectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_unselectedColor_value_type = runtimeType(value_unselectedColor_value)
            if (TypeChecker.isColor(value_unselectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_unselectedColor_value_0  = value_unselectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_unselectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_unselectedColor_value_1  = value_unselectedColor_value as number
                valueSerializer.writeNumber(value_unselectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_unselectedColor_value_2  = value_unselectedColor_value as string
                valueSerializer.writeString(value_unselectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_unselectedColor_value_3  = value_unselectedColor_value as Resource
                valueSerializer.writeResource(value_unselectedColor_value_3)
            }
        }
    }
    writeTabBarLabelStyle(value: TabBarLabelStyle): void {
        let valueSerializer : Serializer = this
        const value_overflow  = value.overflow
        let value_overflow_type : int32 = RuntimeType.UNDEFINED
        value_overflow_type = runtimeType(value_overflow)
        valueSerializer.writeInt8(value_overflow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_overflow_type)) {
            const value_overflow_value  = (value_overflow as TextOverflow)
            valueSerializer.writeInt32(TypeChecker.TextOverflow_ToNumeric(value_overflow_value))
        }
        const value_maxLines  = value.maxLines
        let value_maxLines_type : int32 = RuntimeType.UNDEFINED
        value_maxLines_type = runtimeType(value_maxLines)
        valueSerializer.writeInt8(value_maxLines_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxLines_type)) {
            const value_maxLines_value  = value_maxLines!
            valueSerializer.writeNumber(value_maxLines_value)
        }
        const value_minFontSize  = value.minFontSize
        let value_minFontSize_type : int32 = RuntimeType.UNDEFINED
        value_minFontSize_type = runtimeType(value_minFontSize)
        valueSerializer.writeInt8(value_minFontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_minFontSize_type)) {
            const value_minFontSize_value  = value_minFontSize!
            let value_minFontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_minFontSize_value_type = runtimeType(value_minFontSize_value)
            if (RuntimeType.NUMBER == value_minFontSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_minFontSize_value_0  = value_minFontSize_value as number
                valueSerializer.writeNumber(value_minFontSize_value_0)
            }
            else if ((RuntimeType.STRING == value_minFontSize_value_type) || (RuntimeType.OBJECT == value_minFontSize_value_type)) {
                valueSerializer.writeInt8(1 as int32)
                const value_minFontSize_value_1  = value_minFontSize_value as ResourceStr
                let value_minFontSize_value_1_type : int32 = RuntimeType.UNDEFINED
                value_minFontSize_value_1_type = runtimeType(value_minFontSize_value_1)
                if (RuntimeType.STRING == value_minFontSize_value_1_type) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_minFontSize_value_1_0  = value_minFontSize_value_1 as string
                    valueSerializer.writeString(value_minFontSize_value_1_0)
                }
                else if (RuntimeType.OBJECT == value_minFontSize_value_1_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_minFontSize_value_1_1  = value_minFontSize_value_1 as Resource
                    valueSerializer.writeResource(value_minFontSize_value_1_1)
                }
            }
        }
        const value_maxFontSize  = value.maxFontSize
        let value_maxFontSize_type : int32 = RuntimeType.UNDEFINED
        value_maxFontSize_type = runtimeType(value_maxFontSize)
        valueSerializer.writeInt8(value_maxFontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxFontSize_type)) {
            const value_maxFontSize_value  = value_maxFontSize!
            let value_maxFontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_maxFontSize_value_type = runtimeType(value_maxFontSize_value)
            if (RuntimeType.NUMBER == value_maxFontSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_maxFontSize_value_0  = value_maxFontSize_value as number
                valueSerializer.writeNumber(value_maxFontSize_value_0)
            }
            else if ((RuntimeType.STRING == value_maxFontSize_value_type) || (RuntimeType.OBJECT == value_maxFontSize_value_type)) {
                valueSerializer.writeInt8(1 as int32)
                const value_maxFontSize_value_1  = value_maxFontSize_value as ResourceStr
                let value_maxFontSize_value_1_type : int32 = RuntimeType.UNDEFINED
                value_maxFontSize_value_1_type = runtimeType(value_maxFontSize_value_1)
                if (RuntimeType.STRING == value_maxFontSize_value_1_type) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_maxFontSize_value_1_0  = value_maxFontSize_value_1 as string
                    valueSerializer.writeString(value_maxFontSize_value_1_0)
                }
                else if (RuntimeType.OBJECT == value_maxFontSize_value_1_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_maxFontSize_value_1_1  = value_maxFontSize_value_1 as Resource
                    valueSerializer.writeResource(value_maxFontSize_value_1_1)
                }
            }
        }
        const value_heightAdaptivePolicy  = value.heightAdaptivePolicy
        let value_heightAdaptivePolicy_type : int32 = RuntimeType.UNDEFINED
        value_heightAdaptivePolicy_type = runtimeType(value_heightAdaptivePolicy)
        valueSerializer.writeInt8(value_heightAdaptivePolicy_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_heightAdaptivePolicy_type)) {
            const value_heightAdaptivePolicy_value  = (value_heightAdaptivePolicy as TextHeightAdaptivePolicy)
            valueSerializer.writeInt32(TypeChecker.TextHeightAdaptivePolicy_ToNumeric(value_heightAdaptivePolicy_value))
        }
        const value_font  = value.font
        let value_font_type : int32 = RuntimeType.UNDEFINED
        value_font_type = runtimeType(value_font)
        valueSerializer.writeInt8(value_font_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_font_type)) {
            const value_font_value  = value_font!
            valueSerializer.writeFont(value_font_value)
        }
        const value_selectedColor  = value.selectedColor
        let value_selectedColor_type : int32 = RuntimeType.UNDEFINED
        value_selectedColor_type = runtimeType(value_selectedColor)
        valueSerializer.writeInt8(value_selectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selectedColor_type)) {
            const value_selectedColor_value  = value_selectedColor!
            let value_selectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_selectedColor_value_type = runtimeType(value_selectedColor_value)
            if (TypeChecker.isColor(value_selectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_selectedColor_value_0  = value_selectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_selectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_selectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_selectedColor_value_1  = value_selectedColor_value as number
                valueSerializer.writeNumber(value_selectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_selectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_selectedColor_value_2  = value_selectedColor_value as string
                valueSerializer.writeString(value_selectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_selectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_selectedColor_value_3  = value_selectedColor_value as Resource
                valueSerializer.writeResource(value_selectedColor_value_3)
            }
        }
        const value_unselectedColor  = value.unselectedColor
        let value_unselectedColor_type : int32 = RuntimeType.UNDEFINED
        value_unselectedColor_type = runtimeType(value_unselectedColor)
        valueSerializer.writeInt8(value_unselectedColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_unselectedColor_type)) {
            const value_unselectedColor_value  = value_unselectedColor!
            let value_unselectedColor_value_type : int32 = RuntimeType.UNDEFINED
            value_unselectedColor_value_type = runtimeType(value_unselectedColor_value)
            if (TypeChecker.isColor(value_unselectedColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_unselectedColor_value_0  = value_unselectedColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_unselectedColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_unselectedColor_value_1  = value_unselectedColor_value as number
                valueSerializer.writeNumber(value_unselectedColor_value_1)
            }
            else if (RuntimeType.STRING == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_unselectedColor_value_2  = value_unselectedColor_value as string
                valueSerializer.writeString(value_unselectedColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_unselectedColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_unselectedColor_value_3  = value_unselectedColor_value as Resource
                valueSerializer.writeResource(value_unselectedColor_value_3)
            }
        }
    }
    writeMenuOutlineOptions(value: MenuOutlineOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (((RuntimeType.NUMBER) == (value_width_value_type)) || ((RuntimeType.STRING) == (value_width_value_type)) || (((RuntimeType.OBJECT) == (value_width_value_type)) && (TypeChecker.isResource(value_width_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as Dimension
                valueSerializer.writeLength(value_width_value_0)
            }
            else if (TypeChecker.isEdgeOutlineWidths(value_width_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as EdgeOutlineWidths
                valueSerializer.writeEdgeOutlineWidths(value_width_value_1)
            }
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if ((TypeChecker.isColor(value_color_value)) || (RuntimeType.NUMBER == value_color_value_type) || (RuntimeType.STRING == value_color_value_type) || (RuntimeType.OBJECT == value_color_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as ResourceColor
                let value_color_value_0_type : int32 = RuntimeType.UNDEFINED
                value_color_value_0_type = runtimeType(value_color_value_0)
                if (TypeChecker.isColor(value_color_value_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_color_value_0_0  = value_color_value_0 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0_0))
                }
                else if (RuntimeType.NUMBER == value_color_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_color_value_0_1  = value_color_value_0 as number
                    valueSerializer.writeNumber(value_color_value_0_1)
                }
                else if (RuntimeType.STRING == value_color_value_0_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_color_value_0_2  = value_color_value_0 as string
                    valueSerializer.writeString(value_color_value_0_2)
                }
                else if (RuntimeType.OBJECT == value_color_value_0_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_color_value_0_3  = value_color_value_0 as Resource
                    valueSerializer.writeResource(value_color_value_0_3)
                }
            }
            else if (TypeChecker.isEdgeColors(value_color_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as EdgeColors
                valueSerializer.writeEdgeColors(value_color_value_1)
            }
        }
    }
    writeMoreButtonOptions(value: MoreButtonOptions): void {
        let valueSerializer : Serializer = this
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
    }
    writeNativeEmbedDataInfo(value: NativeEmbedDataInfo): void {
        let valueSerializer : Serializer = this
        const value_status  = value.status
        let value_status_type : int32 = RuntimeType.UNDEFINED
        value_status_type = runtimeType(value_status)
        valueSerializer.writeInt8(value_status_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_status_type)) {
            const value_status_value  = (value_status as NativeEmbedStatus)
            valueSerializer.writeInt32(TypeChecker.NativeEmbedStatus_ToNumeric(value_status_value))
        }
        const value_surfaceId  = value.surfaceId
        let value_surfaceId_type : int32 = RuntimeType.UNDEFINED
        value_surfaceId_type = runtimeType(value_surfaceId)
        valueSerializer.writeInt8(value_surfaceId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_surfaceId_type)) {
            const value_surfaceId_value  = value_surfaceId!
            valueSerializer.writeString(value_surfaceId_value)
        }
        const value_embedId  = value.embedId
        let value_embedId_type : int32 = RuntimeType.UNDEFINED
        value_embedId_type = runtimeType(value_embedId)
        valueSerializer.writeInt8(value_embedId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_embedId_type)) {
            const value_embedId_value  = value_embedId!
            valueSerializer.writeString(value_embedId_value)
        }
        const value_info  = value.info
        let value_info_type : int32 = RuntimeType.UNDEFINED
        value_info_type = runtimeType(value_info)
        valueSerializer.writeInt8(value_info_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_info_type)) {
            const value_info_value  = value_info!
            valueSerializer.writeNativeEmbedInfo(value_info_value)
        }
    }
    writeNativeEmbedTouchInfo(value: NativeEmbedTouchInfo): void {
        let valueSerializer : Serializer = this
        const value_embedId  = value.embedId
        let value_embedId_type : int32 = RuntimeType.UNDEFINED
        value_embedId_type = runtimeType(value_embedId)
        valueSerializer.writeInt8(value_embedId_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_embedId_type)) {
            const value_embedId_value  = value_embedId!
            valueSerializer.writeString(value_embedId_value)
        }
        const value_touchEvent  = value.touchEvent
        let value_touchEvent_type : int32 = RuntimeType.UNDEFINED
        value_touchEvent_type = runtimeType(value_touchEvent)
        valueSerializer.writeInt8(value_touchEvent_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_touchEvent_type)) {
            const value_touchEvent_value  = value_touchEvent!
            valueSerializer.writeTouchEvent(value_touchEvent_value)
        }
        const value_result  = value.result
        let value_result_type : int32 = RuntimeType.UNDEFINED
        value_result_type = runtimeType(value_result)
        valueSerializer.writeInt8(value_result_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_result_type)) {
            const value_result_value  = value_result!
            valueSerializer.writeEventResult(value_result_value)
        }
    }
    writeNavigationTitleOptions(value: NavigationTitleOptions): void {
        let valueSerializer : Serializer = this
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_barStyle  = value.barStyle
        let value_barStyle_type : int32 = RuntimeType.UNDEFINED
        value_barStyle_type = runtimeType(value_barStyle)
        valueSerializer.writeInt8(value_barStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_barStyle_type)) {
            const value_barStyle_value  = (value_barStyle as BarStyle)
            valueSerializer.writeInt32(TypeChecker.BarStyle_ToNumeric(value_barStyle_value))
        }
        const value_paddingStart  = value.paddingStart
        let value_paddingStart_type : int32 = RuntimeType.UNDEFINED
        value_paddingStart_type = runtimeType(value_paddingStart)
        valueSerializer.writeInt8(value_paddingStart_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_paddingStart_type)) {
            const value_paddingStart_value  = value_paddingStart!
            valueSerializer.writeLengthMetrics(value_paddingStart_value)
        }
        const value_paddingEnd  = value.paddingEnd
        let value_paddingEnd_type : int32 = RuntimeType.UNDEFINED
        value_paddingEnd_type = runtimeType(value_paddingEnd)
        valueSerializer.writeInt8(value_paddingEnd_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_paddingEnd_type)) {
            const value_paddingEnd_value  = value_paddingEnd!
            valueSerializer.writeLengthMetrics(value_paddingEnd_value)
        }
        // TBD: Modifier is not implemented yet
    }
    writeOutlineOptions(value: OutlineOptions): void {
        let valueSerializer : Serializer = this
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            let value_width_value_type : int32 = RuntimeType.UNDEFINED
            value_width_value_type = runtimeType(value_width_value)
            if (TypeChecker.isEdgeOutlineWidths(value_width_value, false, false, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_width_value_0  = value_width_value as EdgeOutlineWidths
                valueSerializer.writeEdgeOutlineWidths(value_width_value_0)
            }
            else if (((RuntimeType.NUMBER) == (value_width_value_type)) || ((RuntimeType.STRING) == (value_width_value_type)) || (((RuntimeType.OBJECT) == (value_width_value_type)) && (TypeChecker.isResource(value_width_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(1 as int32)
                const value_width_value_1  = value_width_value as Dimension
                valueSerializer.writeLength(value_width_value_1)
            }
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isEdgeColors(value_color_value, true, false, true, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as EdgeColors
                valueSerializer.writeEdgeColors(value_color_value_0)
            }
            else if ((TypeChecker.isColor(value_color_value)) || (RuntimeType.NUMBER == value_color_value_type) || (RuntimeType.STRING == value_color_value_type) || (RuntimeType.OBJECT == value_color_value_type)) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as ResourceColor
                let value_color_value_1_type : int32 = RuntimeType.UNDEFINED
                value_color_value_1_type = runtimeType(value_color_value_1)
                if (TypeChecker.isColor(value_color_value_1)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_color_value_1_0  = value_color_value_1 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_1_0))
                }
                else if (RuntimeType.NUMBER == value_color_value_1_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_color_value_1_1  = value_color_value_1 as number
                    valueSerializer.writeNumber(value_color_value_1_1)
                }
                else if (RuntimeType.STRING == value_color_value_1_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_color_value_1_2  = value_color_value_1 as string
                    valueSerializer.writeString(value_color_value_1_2)
                }
                else if (RuntimeType.OBJECT == value_color_value_1_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_color_value_1_3  = value_color_value_1 as Resource
                    valueSerializer.writeResource(value_color_value_1_3)
                }
            }
            else if (TypeChecker.isLocalizedEdgeColors(value_color_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as LocalizedEdgeColors
                valueSerializer.writeLocalizedEdgeColors(value_color_value_2)
            }
        }
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            let value_radius_value_type : int32 = RuntimeType.UNDEFINED
            value_radius_value_type = runtimeType(value_radius_value)
            if (TypeChecker.isOutlineRadiuses(value_radius_value, false, false, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_radius_value_0  = value_radius_value as OutlineRadiuses
                valueSerializer.writeOutlineRadiuses(value_radius_value_0)
            }
            else if (((RuntimeType.NUMBER) == (value_radius_value_type)) || ((RuntimeType.STRING) == (value_radius_value_type)) || (((RuntimeType.OBJECT) == (value_radius_value_type)) && (TypeChecker.isResource(value_radius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(1 as int32)
                const value_radius_value_1  = value_radius_value as Dimension
                valueSerializer.writeLength(value_radius_value_1)
            }
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = value_style!
            let value_style_value_type : int32 = RuntimeType.UNDEFINED
            value_style_value_type = runtimeType(value_style_value)
            if (RuntimeType.OBJECT == value_style_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_style_value_0  = value_style_value as EdgeOutlineStyles
                valueSerializer.writeEdgeOutlineStyles(value_style_value_0)
            }
            else if (TypeChecker.isOutlineStyle(value_style_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_style_value_1  = value_style_value as OutlineStyle
                valueSerializer.writeInt32(TypeChecker.OutlineStyle_ToNumeric(value_style_value_1))
            }
        }
    }
    writePickerTextStyle(value: PickerTextStyle): void {
        let valueSerializer : Serializer = this
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_font  = value.font
        let value_font_type : int32 = RuntimeType.UNDEFINED
        value_font_type = runtimeType(value_font)
        valueSerializer.writeInt8(value_font_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_font_type)) {
            const value_font_value  = value_font!
            valueSerializer.writeFont(value_font_value)
        }
    }
    writePlaceholderStyle(value: PlaceholderStyle): void {
        let valueSerializer : Serializer = this
        const value_font  = value.font
        let value_font_type : int32 = RuntimeType.UNDEFINED
        value_font_type = runtimeType(value_font)
        valueSerializer.writeInt8(value_font_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_font_type)) {
            const value_font_value  = value_font!
            valueSerializer.writeFont(value_font_value)
        }
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        valueSerializer.writeInt8(value_fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontColor_type)) {
            const value_fontColor_value  = value_fontColor!
            let value_fontColor_value_type : int32 = RuntimeType.UNDEFINED
            value_fontColor_value_type = runtimeType(value_fontColor_value)
            if (TypeChecker.isColor(value_fontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontColor_value_0  = value_fontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontColor_value_1  = value_fontColor_value as number
                valueSerializer.writeNumber(value_fontColor_value_1)
            }
            else if (RuntimeType.STRING == value_fontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontColor_value_2  = value_fontColor_value as string
                valueSerializer.writeString(value_fontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontColor_value_3  = value_fontColor_value as Resource
                valueSerializer.writeResource(value_fontColor_value_3)
            }
        }
    }
    writePointLightStyle(value: PointLightStyle): void {
        let valueSerializer : Serializer = this
        const value_lightSource  = value.lightSource
        let value_lightSource_type : int32 = RuntimeType.UNDEFINED
        value_lightSource_type = runtimeType(value_lightSource)
        valueSerializer.writeInt8(value_lightSource_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lightSource_type)) {
            const value_lightSource_value  = value_lightSource!
            valueSerializer.writeLightSource(value_lightSource_value)
        }
        const value_illuminated  = value.illuminated
        let value_illuminated_type : int32 = RuntimeType.UNDEFINED
        value_illuminated_type = runtimeType(value_illuminated)
        valueSerializer.writeInt8(value_illuminated_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_illuminated_type)) {
            const value_illuminated_value  = (value_illuminated as IlluminatedType)
            valueSerializer.writeInt32(TypeChecker.IlluminatedType_ToNumeric(value_illuminated_value))
        }
        const value_bloom  = value.bloom
        let value_bloom_type : int32 = RuntimeType.UNDEFINED
        value_bloom_type = runtimeType(value_bloom)
        valueSerializer.writeInt8(value_bloom_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_bloom_type)) {
            const value_bloom_value  = value_bloom!
            valueSerializer.writeNumber(value_bloom_value)
        }
    }
    writePopupMessageOptions(value: PopupMessageOptions): void {
        let valueSerializer : Serializer = this
        const value_textColor  = value.textColor
        let value_textColor_type : int32 = RuntimeType.UNDEFINED
        value_textColor_type = runtimeType(value_textColor)
        valueSerializer.writeInt8(value_textColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textColor_type)) {
            const value_textColor_value  = value_textColor!
            let value_textColor_value_type : int32 = RuntimeType.UNDEFINED
            value_textColor_value_type = runtimeType(value_textColor_value)
            if (TypeChecker.isColor(value_textColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_textColor_value_0  = value_textColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_textColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_textColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_textColor_value_1  = value_textColor_value as number
                valueSerializer.writeNumber(value_textColor_value_1)
            }
            else if (RuntimeType.STRING == value_textColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_textColor_value_2  = value_textColor_value as string
                valueSerializer.writeString(value_textColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_textColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_textColor_value_3  = value_textColor_value as Resource
                valueSerializer.writeResource(value_textColor_value_3)
            }
        }
        const value_font  = value.font
        let value_font_type : int32 = RuntimeType.UNDEFINED
        value_font_type = runtimeType(value_font)
        valueSerializer.writeInt8(value_font_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_font_type)) {
            const value_font_value  = value_font!
            valueSerializer.writeFont(value_font_value)
        }
    }
    writeResourceImageAttachmentOptions(value: ResourceImageAttachmentOptions): void {
        let valueSerializer : Serializer = this
        const value_resourceValue  = value.resourceValue
        let value_resourceValue_type : int32 = RuntimeType.UNDEFINED
        value_resourceValue_type = runtimeType(value_resourceValue)
        valueSerializer.writeInt8(value_resourceValue_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_resourceValue_type)) {
            const value_resourceValue_value  = value_resourceValue!
            let value_resourceValue_value_type : int32 = RuntimeType.UNDEFINED
            value_resourceValue_value_type = runtimeType(value_resourceValue_value)
            if (RuntimeType.STRING == value_resourceValue_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_resourceValue_value_0  = value_resourceValue_value as string
                valueSerializer.writeString(value_resourceValue_value_0)
            }
            else if (RuntimeType.OBJECT == value_resourceValue_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_resourceValue_value_1  = value_resourceValue_value as Resource
                valueSerializer.writeResource(value_resourceValue_value_1)
            }
        }
        const value_size  = value.size
        let value_size_type : int32 = RuntimeType.UNDEFINED
        value_size_type = runtimeType(value_size)
        valueSerializer.writeInt8(value_size_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_size_type)) {
            const value_size_value  = value_size!
            valueSerializer.writeSizeOptions(value_size_value)
        }
        const value_verticalAlign  = value.verticalAlign
        let value_verticalAlign_type : int32 = RuntimeType.UNDEFINED
        value_verticalAlign_type = runtimeType(value_verticalAlign)
        valueSerializer.writeInt8(value_verticalAlign_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_verticalAlign_type)) {
            const value_verticalAlign_value  = (value_verticalAlign as ImageSpanAlignment)
            valueSerializer.writeInt32(TypeChecker.ImageSpanAlignment_ToNumeric(value_verticalAlign_value))
        }
        const value_objectFit  = value.objectFit
        let value_objectFit_type : int32 = RuntimeType.UNDEFINED
        value_objectFit_type = runtimeType(value_objectFit)
        valueSerializer.writeInt8(value_objectFit_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_objectFit_type)) {
            const value_objectFit_value  = (value_objectFit as ImageFit)
            valueSerializer.writeInt32(TypeChecker.ImageFit_ToNumeric(value_objectFit_value))
        }
        const value_layoutStyle  = value.layoutStyle
        let value_layoutStyle_type : int32 = RuntimeType.UNDEFINED
        value_layoutStyle_type = runtimeType(value_layoutStyle)
        valueSerializer.writeInt8(value_layoutStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_layoutStyle_type)) {
            const value_layoutStyle_value  = value_layoutStyle!
            valueSerializer.writeImageAttachmentLayoutStyle(value_layoutStyle_value)
        }
        const value_colorFilter  = value.colorFilter
        let value_colorFilter_type : int32 = RuntimeType.UNDEFINED
        value_colorFilter_type = runtimeType(value_colorFilter)
        valueSerializer.writeInt8(value_colorFilter_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_colorFilter_type)) {
            const value_colorFilter_value  = value_colorFilter!
            let value_colorFilter_value_type : int32 = RuntimeType.UNDEFINED
            value_colorFilter_value_type = runtimeType(value_colorFilter_value)
            if (TypeChecker.isColorFilter(value_colorFilter_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_colorFilter_value_0  = value_colorFilter_value as ColorFilter
                valueSerializer.writeColorFilter(value_colorFilter_value_0)
            }
            else if (TypeChecker.isDrawingColorFilter(value_colorFilter_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_colorFilter_value_1  = value_colorFilter_value as DrawingColorFilter
                valueSerializer.writeDrawingColorFilter(value_colorFilter_value_1)
            }
        }
        const value_syncLoad  = value.syncLoad
        let value_syncLoad_type : int32 = RuntimeType.UNDEFINED
        value_syncLoad_type = runtimeType(value_syncLoad)
        valueSerializer.writeInt8(value_syncLoad_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_syncLoad_type)) {
            const value_syncLoad_value  = value_syncLoad!
            valueSerializer.writeBoolean(value_syncLoad_value)
        }
    }
    writeRichEditorImageSpanStyle(value: RichEditorImageSpanStyle): void {
        let valueSerializer : Serializer = this
        const value_size  = value.size
        let value_size_type : int32 = RuntimeType.UNDEFINED
        value_size_type = runtimeType(value_size)
        valueSerializer.writeInt8(value_size_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_size_type)) {
            const value_size_value  = value_size!
            const value_size_value_0  = value_size_value[0]
            valueSerializer.writeLength(value_size_value_0)
            const value_size_value_1  = value_size_value[1]
            valueSerializer.writeLength(value_size_value_1)
        }
        const value_verticalAlign  = value.verticalAlign
        let value_verticalAlign_type : int32 = RuntimeType.UNDEFINED
        value_verticalAlign_type = runtimeType(value_verticalAlign)
        valueSerializer.writeInt8(value_verticalAlign_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_verticalAlign_type)) {
            const value_verticalAlign_value  = (value_verticalAlign as ImageSpanAlignment)
            valueSerializer.writeInt32(TypeChecker.ImageSpanAlignment_ToNumeric(value_verticalAlign_value))
        }
        const value_objectFit  = value.objectFit
        let value_objectFit_type : int32 = RuntimeType.UNDEFINED
        value_objectFit_type = runtimeType(value_objectFit)
        valueSerializer.writeInt8(value_objectFit_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_objectFit_type)) {
            const value_objectFit_value  = (value_objectFit as ImageFit)
            valueSerializer.writeInt32(TypeChecker.ImageFit_ToNumeric(value_objectFit_value))
        }
        const value_layoutStyle  = value.layoutStyle
        let value_layoutStyle_type : int32 = RuntimeType.UNDEFINED
        value_layoutStyle_type = runtimeType(value_layoutStyle)
        valueSerializer.writeInt8(value_layoutStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_layoutStyle_type)) {
            const value_layoutStyle_value  = value_layoutStyle!
            valueSerializer.writeRichEditorLayoutStyle(value_layoutStyle_value)
        }
    }
    writeRichEditorImageSpanStyleResult(value: RichEditorImageSpanStyleResult): void {
        let valueSerializer : Serializer = this
        const value_size  = value.size
        const value_size_0  = value_size[0]
        valueSerializer.writeNumber(value_size_0)
        const value_size_1  = value_size[1]
        valueSerializer.writeNumber(value_size_1)
        const value_verticalAlign  = value.verticalAlign
        valueSerializer.writeInt32(TypeChecker.ImageSpanAlignment_ToNumeric(value_verticalAlign))
        const value_objectFit  = value.objectFit
        valueSerializer.writeInt32(TypeChecker.ImageFit_ToNumeric(value_objectFit))
        const value_layoutStyle  = value.layoutStyle
        let value_layoutStyle_type : int32 = RuntimeType.UNDEFINED
        value_layoutStyle_type = runtimeType(value_layoutStyle)
        valueSerializer.writeInt8(value_layoutStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_layoutStyle_type)) {
            const value_layoutStyle_value  = value_layoutStyle!
            valueSerializer.writeRichEditorLayoutStyle(value_layoutStyle_value)
        }
    }
    writeRichEditorParagraphResult(value: RichEditorParagraphResult): void {
        let valueSerializer : Serializer = this
        const value_style  = value.style
        valueSerializer.writeRichEditorParagraphStyle(value_style)
        const value_range  = value.range
        const value_range_0  = value_range[0]
        valueSerializer.writeNumber(value_range_0)
        const value_range_1  = value_range[1]
        valueSerializer.writeNumber(value_range_1)
    }
    writeRichEditorSymbolSpanOptions(value: RichEditorSymbolSpanOptions): void {
        let valueSerializer : Serializer = this
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeNumber(value_offset_value)
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = value_style!
            valueSerializer.writeRichEditorSymbolSpanStyle(value_style_value)
        }
    }
    writeRichEditorTextStyle(value: RichEditorTextStyle): void {
        let valueSerializer : Serializer = this
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        valueSerializer.writeInt8(value_fontColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontColor_type)) {
            const value_fontColor_value  = value_fontColor!
            let value_fontColor_value_type : int32 = RuntimeType.UNDEFINED
            value_fontColor_value_type = runtimeType(value_fontColor_value)
            if (TypeChecker.isColor(value_fontColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontColor_value_0  = value_fontColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_fontColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontColor_value_1  = value_fontColor_value as number
                valueSerializer.writeNumber(value_fontColor_value_1)
            }
            else if (RuntimeType.STRING == value_fontColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontColor_value_2  = value_fontColor_value as string
                valueSerializer.writeString(value_fontColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_fontColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_fontColor_value_3  = value_fontColor_value as Resource
                valueSerializer.writeResource(value_fontColor_value_3)
            }
        }
        const value_fontSize  = value.fontSize
        let value_fontSize_type : int32 = RuntimeType.UNDEFINED
        value_fontSize_type = runtimeType(value_fontSize)
        valueSerializer.writeInt8(value_fontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontSize_type)) {
            const value_fontSize_value  = value_fontSize!
            let value_fontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_fontSize_value_type = runtimeType(value_fontSize_value)
            if (((RuntimeType.NUMBER) == (value_fontSize_value_type)) || ((RuntimeType.STRING) == (value_fontSize_value_type)) || (((RuntimeType.OBJECT) == (value_fontSize_value_type)) && (TypeChecker.isResource(value_fontSize_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontSize_value_0  = value_fontSize_value as Length
                valueSerializer.writeLength(value_fontSize_value_0)
            }
            else if (RuntimeType.NUMBER == value_fontSize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontSize_value_1  = value_fontSize_value as number
                valueSerializer.writeNumber(value_fontSize_value_1)
            }
        }
        const value_fontStyle  = value.fontStyle
        let value_fontStyle_type : int32 = RuntimeType.UNDEFINED
        value_fontStyle_type = runtimeType(value_fontStyle)
        valueSerializer.writeInt8(value_fontStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontStyle_type)) {
            const value_fontStyle_value  = (value_fontStyle as FontStyle)
            valueSerializer.writeInt32(TypeChecker.FontStyle_ToNumeric(value_fontStyle_value))
        }
        const value_fontWeight  = value.fontWeight
        let value_fontWeight_type : int32 = RuntimeType.UNDEFINED
        value_fontWeight_type = runtimeType(value_fontWeight)
        valueSerializer.writeInt8(value_fontWeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontWeight_type)) {
            const value_fontWeight_value  = value_fontWeight!
            let value_fontWeight_value_type : int32 = RuntimeType.UNDEFINED
            value_fontWeight_value_type = runtimeType(value_fontWeight_value)
            if (RuntimeType.NUMBER == value_fontWeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontWeight_value_0  = value_fontWeight_value as number
                valueSerializer.writeNumber(value_fontWeight_value_0)
            }
            else if (TypeChecker.isFontWeight(value_fontWeight_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontWeight_value_1  = value_fontWeight_value as FontWeight
                valueSerializer.writeInt32(TypeChecker.FontWeight_ToNumeric(value_fontWeight_value_1))
            }
            else if (RuntimeType.STRING == value_fontWeight_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_fontWeight_value_2  = value_fontWeight_value as string
                valueSerializer.writeString(value_fontWeight_value_2)
            }
        }
        const value_fontFamily  = value.fontFamily
        let value_fontFamily_type : int32 = RuntimeType.UNDEFINED
        value_fontFamily_type = runtimeType(value_fontFamily)
        valueSerializer.writeInt8(value_fontFamily_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontFamily_type)) {
            const value_fontFamily_value  = value_fontFamily!
            let value_fontFamily_value_type : int32 = RuntimeType.UNDEFINED
            value_fontFamily_value_type = runtimeType(value_fontFamily_value)
            if (RuntimeType.STRING == value_fontFamily_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_fontFamily_value_0  = value_fontFamily_value as string
                valueSerializer.writeString(value_fontFamily_value_0)
            }
            else if (RuntimeType.OBJECT == value_fontFamily_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_fontFamily_value_1  = value_fontFamily_value as Resource
                valueSerializer.writeResource(value_fontFamily_value_1)
            }
        }
        const value_decoration  = value.decoration
        let value_decoration_type : int32 = RuntimeType.UNDEFINED
        value_decoration_type = runtimeType(value_decoration)
        valueSerializer.writeInt8(value_decoration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_decoration_type)) {
            const value_decoration_value  = value_decoration!
            valueSerializer.writeDecorationStyleInterface(value_decoration_value)
        }
        const value_textShadow  = value.textShadow
        let value_textShadow_type : int32 = RuntimeType.UNDEFINED
        value_textShadow_type = runtimeType(value_textShadow)
        valueSerializer.writeInt8(value_textShadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textShadow_type)) {
            const value_textShadow_value  = value_textShadow!
            let value_textShadow_value_type : int32 = RuntimeType.UNDEFINED
            value_textShadow_value_type = runtimeType(value_textShadow_value)
            if (TypeChecker.isShadowOptions(value_textShadow_value, false, false, false, false, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_textShadow_value_0  = value_textShadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_textShadow_value_0)
            }
            else if (((RuntimeType.OBJECT) == (value_textShadow_value_type)) && (TypeChecker.isArray_ShadowOptions(value_textShadow_value))) {
                valueSerializer.writeInt8(1 as int32)
                const value_textShadow_value_1  = value_textShadow_value as Array<ShadowOptions>
                valueSerializer.writeInt32(value_textShadow_value_1.length as int32)
                for (let i = 0; i < value_textShadow_value_1.length; i++) {
                    const value_textShadow_value_1_element : ShadowOptions = value_textShadow_value_1[i]
                    valueSerializer.writeShadowOptions(value_textShadow_value_1_element)
                }
            }
        }
        const value_letterSpacing  = value.letterSpacing
        let value_letterSpacing_type : int32 = RuntimeType.UNDEFINED
        value_letterSpacing_type = runtimeType(value_letterSpacing)
        valueSerializer.writeInt8(value_letterSpacing_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_letterSpacing_type)) {
            const value_letterSpacing_value  = value_letterSpacing!
            let value_letterSpacing_value_type : int32 = RuntimeType.UNDEFINED
            value_letterSpacing_value_type = runtimeType(value_letterSpacing_value)
            if (RuntimeType.NUMBER == value_letterSpacing_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_letterSpacing_value_0  = value_letterSpacing_value as number
                valueSerializer.writeNumber(value_letterSpacing_value_0)
            }
            else if (RuntimeType.STRING == value_letterSpacing_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_letterSpacing_value_1  = value_letterSpacing_value as string
                valueSerializer.writeString(value_letterSpacing_value_1)
            }
        }
        const value_lineHeight  = value.lineHeight
        let value_lineHeight_type : int32 = RuntimeType.UNDEFINED
        value_lineHeight_type = runtimeType(value_lineHeight)
        valueSerializer.writeInt8(value_lineHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lineHeight_type)) {
            const value_lineHeight_value  = value_lineHeight!
            let value_lineHeight_value_type : int32 = RuntimeType.UNDEFINED
            value_lineHeight_value_type = runtimeType(value_lineHeight_value)
            if (RuntimeType.NUMBER == value_lineHeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_lineHeight_value_0  = value_lineHeight_value as number
                valueSerializer.writeNumber(value_lineHeight_value_0)
            }
            else if (RuntimeType.STRING == value_lineHeight_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_lineHeight_value_1  = value_lineHeight_value as string
                valueSerializer.writeString(value_lineHeight_value_1)
            }
            else if (RuntimeType.OBJECT == value_lineHeight_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_lineHeight_value_2  = value_lineHeight_value as Resource
                valueSerializer.writeResource(value_lineHeight_value_2)
            }
        }
        const value_halfLeading  = value.halfLeading
        let value_halfLeading_type : int32 = RuntimeType.UNDEFINED
        value_halfLeading_type = runtimeType(value_halfLeading)
        valueSerializer.writeInt8(value_halfLeading_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_halfLeading_type)) {
            const value_halfLeading_value  = value_halfLeading!
            valueSerializer.writeBoolean(value_halfLeading_value)
        }
        const value_fontFeature  = value.fontFeature
        let value_fontFeature_type : int32 = RuntimeType.UNDEFINED
        value_fontFeature_type = runtimeType(value_fontFeature)
        valueSerializer.writeInt8(value_fontFeature_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontFeature_type)) {
            const value_fontFeature_value  = value_fontFeature!
            valueSerializer.writeString(value_fontFeature_value)
        }
        const value_textBackgroundStyle  = value.textBackgroundStyle
        let value_textBackgroundStyle_type : int32 = RuntimeType.UNDEFINED
        value_textBackgroundStyle_type = runtimeType(value_textBackgroundStyle)
        valueSerializer.writeInt8(value_textBackgroundStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textBackgroundStyle_type)) {
            const value_textBackgroundStyle_value  = value_textBackgroundStyle!
            valueSerializer.writeTextBackgroundStyle(value_textBackgroundStyle_value)
        }
    }
    writeRichEditorTextStyleResult(value: RichEditorTextStyleResult): void {
        let valueSerializer : Serializer = this
        const value_fontColor  = value.fontColor
        let value_fontColor_type : int32 = RuntimeType.UNDEFINED
        value_fontColor_type = runtimeType(value_fontColor)
        if (TypeChecker.isColor(value_fontColor)) {
            valueSerializer.writeInt8(0 as int32)
            const value_fontColor_0  = value_fontColor as Color
            valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_fontColor_0))
        }
        else if (RuntimeType.NUMBER == value_fontColor_type) {
            valueSerializer.writeInt8(1 as int32)
            const value_fontColor_1  = value_fontColor as number
            valueSerializer.writeNumber(value_fontColor_1)
        }
        else if (RuntimeType.STRING == value_fontColor_type) {
            valueSerializer.writeInt8(2 as int32)
            const value_fontColor_2  = value_fontColor as string
            valueSerializer.writeString(value_fontColor_2)
        }
        else if (RuntimeType.OBJECT == value_fontColor_type) {
            valueSerializer.writeInt8(3 as int32)
            const value_fontColor_3  = value_fontColor as Resource
            valueSerializer.writeResource(value_fontColor_3)
        }
        const value_fontSize  = value.fontSize
        valueSerializer.writeNumber(value_fontSize)
        const value_fontStyle  = value.fontStyle
        valueSerializer.writeInt32(TypeChecker.FontStyle_ToNumeric(value_fontStyle))
        const value_fontWeight  = value.fontWeight
        valueSerializer.writeNumber(value_fontWeight)
        const value_fontFamily  = value.fontFamily
        valueSerializer.writeString(value_fontFamily)
        const value_decoration  = value.decoration
        valueSerializer.writeDecorationStyleResult(value_decoration)
        const value_textShadow  = value.textShadow
        let value_textShadow_type : int32 = RuntimeType.UNDEFINED
        value_textShadow_type = runtimeType(value_textShadow)
        valueSerializer.writeInt8(value_textShadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textShadow_type)) {
            const value_textShadow_value  = value_textShadow!
            valueSerializer.writeInt32(value_textShadow_value.length as int32)
            for (let i = 0; i < value_textShadow_value.length; i++) {
                const value_textShadow_value_element : ShadowOptions = value_textShadow_value[i]
                valueSerializer.writeShadowOptions(value_textShadow_value_element)
            }
        }
        const value_letterSpacing  = value.letterSpacing
        let value_letterSpacing_type : int32 = RuntimeType.UNDEFINED
        value_letterSpacing_type = runtimeType(value_letterSpacing)
        valueSerializer.writeInt8(value_letterSpacing_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_letterSpacing_type)) {
            const value_letterSpacing_value  = value_letterSpacing!
            valueSerializer.writeNumber(value_letterSpacing_value)
        }
        const value_lineHeight  = value.lineHeight
        let value_lineHeight_type : int32 = RuntimeType.UNDEFINED
        value_lineHeight_type = runtimeType(value_lineHeight)
        valueSerializer.writeInt8(value_lineHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lineHeight_type)) {
            const value_lineHeight_value  = value_lineHeight!
            valueSerializer.writeNumber(value_lineHeight_value)
        }
        const value_halfLeading  = value.halfLeading
        let value_halfLeading_type : int32 = RuntimeType.UNDEFINED
        value_halfLeading_type = runtimeType(value_halfLeading)
        valueSerializer.writeInt8(value_halfLeading_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_halfLeading_type)) {
            const value_halfLeading_value  = value_halfLeading!
            valueSerializer.writeBoolean(value_halfLeading_value)
        }
        const value_fontFeature  = value.fontFeature
        let value_fontFeature_type : int32 = RuntimeType.UNDEFINED
        value_fontFeature_type = runtimeType(value_fontFeature)
        valueSerializer.writeInt8(value_fontFeature_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_fontFeature_type)) {
            const value_fontFeature_value  = value_fontFeature!
            valueSerializer.writeString(value_fontFeature_value)
        }
        const value_textBackgroundStyle  = value.textBackgroundStyle
        let value_textBackgroundStyle_type : int32 = RuntimeType.UNDEFINED
        value_textBackgroundStyle_type = runtimeType(value_textBackgroundStyle)
        valueSerializer.writeInt8(value_textBackgroundStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textBackgroundStyle_type)) {
            const value_textBackgroundStyle_value  = value_textBackgroundStyle!
            valueSerializer.writeTextBackgroundStyle(value_textBackgroundStyle_value)
        }
    }
    writeRichEditorUpdateImageSpanStyleOptions(value: RichEditorUpdateImageSpanStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeNumber(value_start_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeNumber(value_end_value)
        }
        const value_imageStyle  = value.imageStyle
        valueSerializer.writeRichEditorImageSpanStyle(value_imageStyle)
    }
    writeRichEditorUpdateTextSpanStyleOptions(value: RichEditorUpdateTextSpanStyleOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeNumber(value_start_value)
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeNumber(value_end_value)
        }
        const value_textStyle  = value.textStyle
        valueSerializer.writeRichEditorTextStyle(value_textStyle)
        const value_urlStyle  = value.urlStyle
        let value_urlStyle_type : int32 = RuntimeType.UNDEFINED
        value_urlStyle_type = runtimeType(value_urlStyle)
        valueSerializer.writeInt8(value_urlStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_urlStyle_type)) {
            const value_urlStyle_value  = value_urlStyle!
            valueSerializer.writeRichEditorUrlStyle(value_urlStyle_value)
        }
    }
    writeSheetOptions(value: SheetOptions): void {
        let valueSerializer : Serializer = this
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_onAppear  = value.onAppear
        let value_onAppear_type : int32 = RuntimeType.UNDEFINED
        value_onAppear_type = runtimeType(value_onAppear)
        valueSerializer.writeInt8(value_onAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAppear_type)) {
            const value_onAppear_value  = value_onAppear!
            valueSerializer.holdAndWriteCallback(value_onAppear_value)
        }
        const value_onDisappear  = value.onDisappear
        let value_onDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDisappear_type = runtimeType(value_onDisappear)
        valueSerializer.writeInt8(value_onDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDisappear_type)) {
            const value_onDisappear_value  = value_onDisappear!
            valueSerializer.holdAndWriteCallback(value_onDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_height  = value.height
        let value_height_type : int32 = RuntimeType.UNDEFINED
        value_height_type = runtimeType(value_height)
        valueSerializer.writeInt8(value_height_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_height_type)) {
            const value_height_value  = value_height!
            let value_height_value_type : int32 = RuntimeType.UNDEFINED
            value_height_value_type = runtimeType(value_height_value)
            if (TypeChecker.isSheetSize(value_height_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_height_value_0  = value_height_value as SheetSize
                valueSerializer.writeInt32(TypeChecker.SheetSize_ToNumeric(value_height_value_0))
            }
            else if (((RuntimeType.NUMBER) == (value_height_value_type)) || ((RuntimeType.STRING) == (value_height_value_type)) || (((RuntimeType.OBJECT) == (value_height_value_type)) && (TypeChecker.isResource(value_height_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(1 as int32)
                const value_height_value_1  = value_height_value as Length
                valueSerializer.writeLength(value_height_value_1)
            }
        }
        const value_dragBar  = value.dragBar
        let value_dragBar_type : int32 = RuntimeType.UNDEFINED
        value_dragBar_type = runtimeType(value_dragBar)
        valueSerializer.writeInt8(value_dragBar_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dragBar_type)) {
            const value_dragBar_value  = value_dragBar!
            valueSerializer.writeBoolean(value_dragBar_value)
        }
        const value_maskColor  = value.maskColor
        let value_maskColor_type : int32 = RuntimeType.UNDEFINED
        value_maskColor_type = runtimeType(value_maskColor)
        valueSerializer.writeInt8(value_maskColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskColor_type)) {
            const value_maskColor_value  = value_maskColor!
            let value_maskColor_value_type : int32 = RuntimeType.UNDEFINED
            value_maskColor_value_type = runtimeType(value_maskColor_value)
            if (TypeChecker.isColor(value_maskColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_maskColor_value_0  = value_maskColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_maskColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_maskColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_maskColor_value_1  = value_maskColor_value as number
                valueSerializer.writeNumber(value_maskColor_value_1)
            }
            else if (RuntimeType.STRING == value_maskColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_maskColor_value_2  = value_maskColor_value as string
                valueSerializer.writeString(value_maskColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_maskColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_maskColor_value_3  = value_maskColor_value as Resource
                valueSerializer.writeResource(value_maskColor_value_3)
            }
        }
        const value_detents  = value.detents
        let value_detents_type : int32 = RuntimeType.UNDEFINED
        value_detents_type = runtimeType(value_detents)
        valueSerializer.writeInt8(value_detents_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_detents_type)) {
            const value_detents_value  = value_detents!
            let value_detents_value_type : int32 = RuntimeType.UNDEFINED
            value_detents_value_type = runtimeType(value_detents_value)
            if ((RuntimeType.OBJECT == value_detents_value_type) && (value_detents instanceof SingleLengthDetent)) {
                valueSerializer.writeInt8(0 as int32)
                const value_detents_value_0  = value_detents_value as SingleLengthDetent
                const value_detents_value_0_0  = value_detents_value_0[0]
                let value_detents_value_0_0_type : int32 = RuntimeType.UNDEFINED
                value_detents_value_0_0_type = runtimeType(value_detents_value_0_0)
                if (TypeChecker.isSheetSize(value_detents_value_0_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_detents_value_0_0_0  = value_detents_value_0_0 as SheetSize
                    valueSerializer.writeInt32(value_detents_value_0_0_0.valueOf())
                }
                else if ((RuntimeType.STRING == value_detents_value_0_0_type) || (RuntimeType.NUMBER == value_detents_value_0_0_type) || (RuntimeType.OBJECT == value_detents_value_0_0_type)) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_detents_value_0_0_1  = value_detents_value_0_0 as Length
                    let value_detents_value_0_0_1_type : int32 = RuntimeType.UNDEFINED
                    value_detents_value_0_0_1_type = runtimeType(value_detents_value_0_0_1)
                    valueSerializer.writeLength(value_detents_value_0_0_1)
                }
            }
            else if ((RuntimeType.OBJECT == value_detents_value_type)  && (value_detents instanceof DoubleLengthDetents) ) {
                valueSerializer.writeInt8(1 as int32)
                const value_detents_value_1  = value_detents_value as DoubleLengthDetents
                const value_detents_value_1_0  = value_detents_value_1[0]
                let value_detents_value_1_0_type : int32 = RuntimeType.UNDEFINED
                value_detents_value_1_0_type = runtimeType(value_detents_value_1_0)
                if (TypeChecker.isSheetSize(value_detents_value_1_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_detents_value_1_0_0  = value_detents_value_1_0 as SheetSize
                    valueSerializer.writeInt32(value_detents_value_1_0_0.valueOf())
                }
                else if ((RuntimeType.STRING == value_detents_value_1_0_type) || (RuntimeType.NUMBER == value_detents_value_1_0_type) || (RuntimeType.OBJECT == value_detents_value_1_0_type)) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_detents_value_1_0_1  = value_detents_value_1_0 as Length
                    let value_detents_value_1_0_1_type : int32 = RuntimeType.UNDEFINED
                    value_detents_value_1_0_1_type = runtimeType(value_detents_value_1_0_1)
                    valueSerializer.writeLength(value_detents_value_1_0_1)
                }
                const value_detents_value_1_1  = value_detents_value_1[1]
                let value_detents_value_1_1_type : int32 = RuntimeType.UNDEFINED
                value_detents_value_1_1_type = runtimeType(value_detents_value_1_1)
                valueSerializer.writeInt8((value_detents_value_1_1_type).toChar())
                if ((RuntimeType.UNDEFINED) != (value_detents_value_1_1_type)) {
                    const value_detents_value_1_1_value  = value_detents_value_1_1!
                    let value_detents_value_1_1_value_type : int32 = RuntimeType.UNDEFINED
                    value_detents_value_1_1_value_type = runtimeType(value_detents_value_1_1_value)
                    if (TypeChecker.isSheetSize(value_detents_value_1_1_value)) {
                        valueSerializer.writeInt8(0 as int32)
                        const value_detents_value_1_1_value_0  = value_detents_value_1_1_value as SheetSize
                        valueSerializer.writeInt32(value_detents_value_1_1_value_0.valueOf())
                    }
                    else if ((RuntimeType.STRING == value_detents_value_1_1_value_type) || (RuntimeType.NUMBER == value_detents_value_1_1_value_type) || (RuntimeType.OBJECT == value_detents_value_1_1_value_type)) {
                        valueSerializer.writeInt8(1 as int32)
                        const value_detents_value_1_1_value_1  = value_detents_value_1_1_value as Length
                        let value_detents_value_1_1_value_1_type : int32 = RuntimeType.UNDEFINED
                        value_detents_value_1_1_value_1_type = runtimeType(value_detents_value_1_1_value_1)
                        valueSerializer.writeLength(value_detents_value_1_1_value_1)
                    }
                }
            }
            else if ((RuntimeType.OBJECT == value_detents_value_type) && (value_detents instanceof TripleLengthDetents)) {
                valueSerializer.writeInt8(2 as int32)
                const value_detents_value_2  = value_detents_value as TripleLengthDetents
                const value_detents_value_2_0  = value_detents_value_2[0]
                let value_detents_value_2_0_type : int32 = RuntimeType.UNDEFINED
                value_detents_value_2_0_type = runtimeType(value_detents_value_2_0)
                if (TypeChecker.isSheetSize(value_detents_value_2_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_detents_value_2_0_0  = value_detents_value_2_0 as SheetSize
                    valueSerializer.writeInt32(value_detents_value_2_0_0.valueOf())
                }
                else if ((RuntimeType.STRING == value_detents_value_2_0_type) || (RuntimeType.NUMBER == value_detents_value_2_0_type) || (RuntimeType.OBJECT == value_detents_value_2_0_type)) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_detents_value_2_0_1  = value_detents_value_2_0 as Length
                    let value_detents_value_2_0_1_type : int32 = RuntimeType.UNDEFINED
                    value_detents_value_2_0_1_type = runtimeType(value_detents_value_2_0_1)
                    valueSerializer.writeLength(value_detents_value_2_0_1)
                }
                const value_detents_value_2_1  = value_detents_value_2[1]
                let value_detents_value_2_1_type : int32 = RuntimeType.UNDEFINED
                value_detents_value_2_1_type = runtimeType(value_detents_value_2_1)
                valueSerializer.writeInt8((value_detents_value_2_1_type).toChar())
                if ((RuntimeType.UNDEFINED) != (value_detents_value_2_1_type)) {
                    const value_detents_value_2_1_value  = value_detents_value_2_1!
                    let value_detents_value_2_1_value_type : int32 = RuntimeType.UNDEFINED
                    value_detents_value_2_1_value_type = runtimeType(value_detents_value_2_1_value)
                    if (TypeChecker.isSheetSize(value_detents_value_2_1_value)) {
                        valueSerializer.writeInt8(0 as int32)
                        const value_detents_value_2_1_value_0  = value_detents_value_2_1_value as SheetSize
                        valueSerializer.writeInt32(value_detents_value_2_1_value_0.valueOf())
                    }
                    else if ((RuntimeType.STRING == value_detents_value_2_1_value_type) || (RuntimeType.NUMBER == value_detents_value_2_1_value_type) || (RuntimeType.OBJECT == value_detents_value_2_1_value_type)) {
                        valueSerializer.writeInt8(1 as int32)
                        const value_detents_value_2_1_value_1  = value_detents_value_2_1_value as Length
                        let value_detents_value_2_1_value_1_type : int32 = RuntimeType.UNDEFINED
                        value_detents_value_2_1_value_1_type = runtimeType(value_detents_value_2_1_value_1)
                        valueSerializer.writeLength(value_detents_value_2_1_value_1)
                    }
                }
                const value_detents_value_2_2  = value_detents_value_2[2]
                let value_detents_value_2_2_type : int32 = RuntimeType.UNDEFINED
                value_detents_value_2_2_type = runtimeType(value_detents_value_2_2)
                valueSerializer.writeInt8((value_detents_value_2_2_type).toChar())
                if ((RuntimeType.UNDEFINED) != (value_detents_value_2_2_type)) {
                    const value_detents_value_2_2_value  = value_detents_value_2_2!
                    let value_detents_value_2_2_value_type : int32 = RuntimeType.UNDEFINED
                    value_detents_value_2_2_value_type = runtimeType(value_detents_value_2_2_value)
                    if (TypeChecker.isSheetSize(value_detents_value_2_2_value)) {
                        valueSerializer.writeInt8(0 as int32)
                        const value_detents_value_2_2_value_0  = value_detents_value_2_2_value as SheetSize
                        valueSerializer.writeInt32(value_detents_value_2_2_value_0.valueOf())
                    }
                    else if ((RuntimeType.STRING == value_detents_value_2_2_value_type) || (RuntimeType.NUMBER == value_detents_value_2_2_value_type) || (RuntimeType.OBJECT == value_detents_value_2_2_value_type)) {
                        valueSerializer.writeInt8(1 as int32)
                        const value_detents_value_2_2_value_1  = value_detents_value_2_2_value as Length
                        let value_detents_value_2_2_value_1_type : int32 = RuntimeType.UNDEFINED
                        value_detents_value_2_2_value_1_type = runtimeType(value_detents_value_2_2_value_1)
                        valueSerializer.writeLength(value_detents_value_2_2_value_1)
                    }
                }
            }
        }
        const value_blurStyle  = value.blurStyle
        let value_blurStyle_type : int32 = RuntimeType.UNDEFINED
        value_blurStyle_type = runtimeType(value_blurStyle)
        valueSerializer.writeInt8(value_blurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_blurStyle_type)) {
            const value_blurStyle_value  = (value_blurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_blurStyle_value))
        }
        const value_showClose  = value.showClose
        let value_showClose_type : int32 = RuntimeType.UNDEFINED
        value_showClose_type = runtimeType(value_showClose)
        valueSerializer.writeInt8(value_showClose_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showClose_type)) {
            const value_showClose_value  = value_showClose!
            let value_showClose_value_type : int32 = RuntimeType.UNDEFINED
            value_showClose_value_type = runtimeType(value_showClose_value)
            if (RuntimeType.BOOLEAN == value_showClose_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_showClose_value_0  = value_showClose_value as boolean
                valueSerializer.writeBoolean(value_showClose_value_0)
            }
            else if (RuntimeType.OBJECT == value_showClose_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_showClose_value_1  = value_showClose_value as Resource
                valueSerializer.writeResource(value_showClose_value_1)
            }
        }
        const value_preferType  = value.preferType
        let value_preferType_type : int32 = RuntimeType.UNDEFINED
        value_preferType_type = runtimeType(value_preferType)
        valueSerializer.writeInt8(value_preferType_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_preferType_type)) {
            const value_preferType_value  = (value_preferType as SheetType)
            valueSerializer.writeInt32(TypeChecker.SheetType_ToNumeric(value_preferType_value))
        }
        const value_title  = value.title
        let value_title_type : int32 = RuntimeType.UNDEFINED
        value_title_type = runtimeType(value_title)
        valueSerializer.writeInt8(value_title_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_title_type)) {
            const value_title_value  = value_title!
            let value_title_value_type : int32 = RuntimeType.UNDEFINED
            value_title_value_type = runtimeType(value_title_value)
            if (RuntimeType.OBJECT == value_title_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_title_value_0  = value_title_value as SheetTitleOptions
                valueSerializer.writeSheetTitleOptions(value_title_value_0)
            }
            else if (RuntimeType.FUNCTION == value_title_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_title_value_1  = value_title_value as CustomBuilder
                valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_title_value_1))
            }
        }
        const value_shouldDismiss  = value.shouldDismiss
        let value_shouldDismiss_type : int32 = RuntimeType.UNDEFINED
        value_shouldDismiss_type = runtimeType(value_shouldDismiss)
        valueSerializer.writeInt8(value_shouldDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shouldDismiss_type)) {
            const value_shouldDismiss_value  = value_shouldDismiss!
            valueSerializer.holdAndWriteCallback(value_shouldDismiss_value)
        }
        const value_onWillDismiss  = value.onWillDismiss
        let value_onWillDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillDismiss_type = runtimeType(value_onWillDismiss)
        valueSerializer.writeInt8(value_onWillDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDismiss_type)) {
            const value_onWillDismiss_value  = value_onWillDismiss!
            valueSerializer.holdAndWriteCallback(value_onWillDismiss_value)
        }
        const value_onWillSpringBackWhenDismiss  = value.onWillSpringBackWhenDismiss
        let value_onWillSpringBackWhenDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillSpringBackWhenDismiss_type = runtimeType(value_onWillSpringBackWhenDismiss)
        valueSerializer.writeInt8(value_onWillSpringBackWhenDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillSpringBackWhenDismiss_type)) {
            const value_onWillSpringBackWhenDismiss_value  = value_onWillSpringBackWhenDismiss!
            valueSerializer.holdAndWriteCallback(value_onWillSpringBackWhenDismiss_value)
        }
        const value_enableOutsideInteractive  = value.enableOutsideInteractive
        let value_enableOutsideInteractive_type : int32 = RuntimeType.UNDEFINED
        value_enableOutsideInteractive_type = runtimeType(value_enableOutsideInteractive)
        valueSerializer.writeInt8(value_enableOutsideInteractive_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableOutsideInteractive_type)) {
            const value_enableOutsideInteractive_value  = value_enableOutsideInteractive!
            valueSerializer.writeBoolean(value_enableOutsideInteractive_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_borderWidth  = value.borderWidth
        let value_borderWidth_type : int32 = RuntimeType.UNDEFINED
        value_borderWidth_type = runtimeType(value_borderWidth)
        valueSerializer.writeInt8(value_borderWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderWidth_type)) {
            const value_borderWidth_value  = value_borderWidth!
            let value_borderWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_borderWidth_value_type = runtimeType(value_borderWidth_value)
            if (((RuntimeType.NUMBER) == (value_borderWidth_value_type)) || ((RuntimeType.STRING) == (value_borderWidth_value_type)) || (((RuntimeType.OBJECT) == (value_borderWidth_value_type)) && (TypeChecker.isResource(value_borderWidth_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderWidth_value_0  = value_borderWidth_value as Dimension
                valueSerializer.writeLength(value_borderWidth_value_0)
            }
            else if (TypeChecker.isEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderWidth_value_1  = value_borderWidth_value as EdgeWidths
                valueSerializer.writeEdgeWidths(value_borderWidth_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeWidths(value_borderWidth_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderWidth_value_2  = value_borderWidth_value as LocalizedEdgeWidths
                valueSerializer.writeLocalizedEdgeWidths(value_borderWidth_value_2)
            }
        }
        const value_borderColor  = value.borderColor
        let value_borderColor_type : int32 = RuntimeType.UNDEFINED
        value_borderColor_type = runtimeType(value_borderColor)
        valueSerializer.writeInt8(value_borderColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderColor_type)) {
            const value_borderColor_value  = value_borderColor!
            let value_borderColor_value_type : int32 = RuntimeType.UNDEFINED
            value_borderColor_value_type = runtimeType(value_borderColor_value)
            if ((TypeChecker.isColor(value_borderColor_value)) || (RuntimeType.NUMBER == value_borderColor_value_type) || (RuntimeType.STRING == value_borderColor_value_type) || (RuntimeType.OBJECT == value_borderColor_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderColor_value_0  = value_borderColor_value as ResourceColor
                let value_borderColor_value_0_type : int32 = RuntimeType.UNDEFINED
                value_borderColor_value_0_type = runtimeType(value_borderColor_value_0)
                if (TypeChecker.isColor(value_borderColor_value_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_borderColor_value_0_0  = value_borderColor_value_0 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_borderColor_value_0_0))
                }
                else if (RuntimeType.NUMBER == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_borderColor_value_0_1  = value_borderColor_value_0 as number
                    valueSerializer.writeNumber(value_borderColor_value_0_1)
                }
                else if (RuntimeType.STRING == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_borderColor_value_0_2  = value_borderColor_value_0 as string
                    valueSerializer.writeString(value_borderColor_value_0_2)
                }
                else if (RuntimeType.OBJECT == value_borderColor_value_0_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_borderColor_value_0_3  = value_borderColor_value_0 as Resource
                    valueSerializer.writeResource(value_borderColor_value_0_3)
                }
            }
            else if (TypeChecker.isEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderColor_value_1  = value_borderColor_value as EdgeColors
                valueSerializer.writeEdgeColors(value_borderColor_value_1)
            }
            else if (TypeChecker.isLocalizedEdgeColors(value_borderColor_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderColor_value_2  = value_borderColor_value as LocalizedEdgeColors
                valueSerializer.writeLocalizedEdgeColors(value_borderColor_value_2)
            }
        }
        const value_borderStyle  = value.borderStyle
        let value_borderStyle_type : int32 = RuntimeType.UNDEFINED
        value_borderStyle_type = runtimeType(value_borderStyle)
        valueSerializer.writeInt8(value_borderStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderStyle_type)) {
            const value_borderStyle_value  = value_borderStyle!
            let value_borderStyle_value_type : int32 = RuntimeType.UNDEFINED
            value_borderStyle_value_type = runtimeType(value_borderStyle_value)
            if (TypeChecker.isBorderStyle(value_borderStyle_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderStyle_value_0  = value_borderStyle_value as BorderStyle
                valueSerializer.writeInt32(TypeChecker.BorderStyle_ToNumeric(value_borderStyle_value_0))
            }
            else if (RuntimeType.OBJECT == value_borderStyle_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderStyle_value_1  = value_borderStyle_value as EdgeStyles
                valueSerializer.writeEdgeStyles(value_borderStyle_value_1)
            }
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_onHeightDidChange  = value.onHeightDidChange
        let value_onHeightDidChange_type : int32 = RuntimeType.UNDEFINED
        value_onHeightDidChange_type = runtimeType(value_onHeightDidChange)
        valueSerializer.writeInt8(value_onHeightDidChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onHeightDidChange_type)) {
            const value_onHeightDidChange_value  = value_onHeightDidChange!
            valueSerializer.holdAndWriteCallback(value_onHeightDidChange_value)
        }
        const value_mode  = value.mode
        let value_mode_type : int32 = RuntimeType.UNDEFINED
        value_mode_type = runtimeType(value_mode)
        valueSerializer.writeInt8(value_mode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_mode_type)) {
            const value_mode_value  = (value_mode as SheetMode)
            valueSerializer.writeInt32(TypeChecker.SheetMode_ToNumeric(value_mode_value))
        }
        const value_scrollSizeMode  = value.scrollSizeMode
        let value_scrollSizeMode_type : int32 = RuntimeType.UNDEFINED
        value_scrollSizeMode_type = runtimeType(value_scrollSizeMode)
        valueSerializer.writeInt8(value_scrollSizeMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_scrollSizeMode_type)) {
            const value_scrollSizeMode_value  = (value_scrollSizeMode as ScrollSizeMode)
            valueSerializer.writeInt32(TypeChecker.ScrollSizeMode_ToNumeric(value_scrollSizeMode_value))
        }
        const value_onDetentsDidChange  = value.onDetentsDidChange
        let value_onDetentsDidChange_type : int32 = RuntimeType.UNDEFINED
        value_onDetentsDidChange_type = runtimeType(value_onDetentsDidChange)
        valueSerializer.writeInt8(value_onDetentsDidChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDetentsDidChange_type)) {
            const value_onDetentsDidChange_value  = value_onDetentsDidChange!
            valueSerializer.holdAndWriteCallback(value_onDetentsDidChange_value)
        }
        const value_onWidthDidChange  = value.onWidthDidChange
        let value_onWidthDidChange_type : int32 = RuntimeType.UNDEFINED
        value_onWidthDidChange_type = runtimeType(value_onWidthDidChange)
        valueSerializer.writeInt8(value_onWidthDidChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWidthDidChange_type)) {
            const value_onWidthDidChange_value  = value_onWidthDidChange!
            valueSerializer.holdAndWriteCallback(value_onWidthDidChange_value)
        }
        const value_onTypeDidChange  = value.onTypeDidChange
        let value_onTypeDidChange_type : int32 = RuntimeType.UNDEFINED
        value_onTypeDidChange_type = runtimeType(value_onTypeDidChange)
        valueSerializer.writeInt8(value_onTypeDidChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onTypeDidChange_type)) {
            const value_onTypeDidChange_value  = value_onTypeDidChange!
            valueSerializer.holdAndWriteCallback(value_onTypeDidChange_value)
        }
        const value_uiContext  = value.uiContext
        let value_uiContext_type : int32 = RuntimeType.UNDEFINED
        value_uiContext_type = runtimeType(value_uiContext)
        valueSerializer.writeInt8(value_uiContext_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_uiContext_type)) {
            const value_uiContext_value  = value_uiContext!
            valueSerializer.writeUIContext(value_uiContext_value)
        }
        const value_keyboardAvoidMode  = value.keyboardAvoidMode
        let value_keyboardAvoidMode_type : int32 = RuntimeType.UNDEFINED
        value_keyboardAvoidMode_type = runtimeType(value_keyboardAvoidMode)
        valueSerializer.writeInt8(value_keyboardAvoidMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_keyboardAvoidMode_type)) {
            const value_keyboardAvoidMode_value  = (value_keyboardAvoidMode as SheetKeyboardAvoidMode)
            valueSerializer.writeInt32(TypeChecker.SheetKeyboardAvoidMode_ToNumeric(value_keyboardAvoidMode_value))
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writePosition(value_offset_value)
        }
        const value_effectEdge  = value.effectEdge
        let value_effectEdge_type : int32 = RuntimeType.UNDEFINED
        value_effectEdge_type = runtimeType(value_effectEdge)
        valueSerializer.writeInt8(value_effectEdge_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_effectEdge_type)) {
            const value_effectEdge_value  = value_effectEdge!
            valueSerializer.writeNumber(value_effectEdge_value)
        }
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            let value_radius_value_type : int32 = RuntimeType.UNDEFINED
            value_radius_value_type = runtimeType(value_radius_value)
            if (TypeChecker.isLengthMetrics(value_radius_value, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value_radius_value_0  = value_radius_value as LengthMetrics
                valueSerializer.writeLengthMetrics(value_radius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_radius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_radius_value_1  = value_radius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_radius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_radius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_radius_value_2  = value_radius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_radius_value_2)
            }
        }
        const value_detentSelection  = value.detentSelection
        let value_detentSelection_type : int32 = RuntimeType.UNDEFINED
        value_detentSelection_type = runtimeType(value_detentSelection)
        valueSerializer.writeInt8(value_detentSelection_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_detentSelection_type)) {
            const value_detentSelection_value  = value_detentSelection!
            let value_detentSelection_value_type : int32 = RuntimeType.UNDEFINED
            value_detentSelection_value_type = runtimeType(value_detentSelection_value)
            if (TypeChecker.isSheetSize(value_detentSelection_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_detentSelection_value_0  = value_detentSelection_value as SheetSize
                valueSerializer.writeInt32(TypeChecker.SheetSize_ToNumeric(value_detentSelection_value_0))
            }
            else if (((RuntimeType.NUMBER) == (value_detentSelection_value_type)) || ((RuntimeType.STRING) == (value_detentSelection_value_type)) || (((RuntimeType.OBJECT) == (value_detentSelection_value_type)) && (TypeChecker.isResource(value_detentSelection_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(1 as int32)
                const value_detentSelection_value_1  = value_detentSelection_value as Length
                valueSerializer.writeLength(value_detentSelection_value_1)
            }
        }
        const value_showInSubWindow  = value.showInSubWindow
        let value_showInSubWindow_type : int32 = RuntimeType.UNDEFINED
        value_showInSubWindow_type = runtimeType(value_showInSubWindow)
        valueSerializer.writeInt8(value_showInSubWindow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showInSubWindow_type)) {
            const value_showInSubWindow_value  = value_showInSubWindow!
            valueSerializer.writeBoolean(value_showInSubWindow_value)
        }
        const value_placement  = value.placement
        let value_placement_type : int32 = RuntimeType.UNDEFINED
        value_placement_type = runtimeType(value_placement)
        valueSerializer.writeInt8(value_placement_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placement_type)) {
            const value_placement_value  = (value_placement as Placement)
            valueSerializer.writeInt32(TypeChecker.Placement_ToNumeric(value_placement_value))
        }
        const value_placementOnTarget  = value.placementOnTarget
        let value_placementOnTarget_type : int32 = RuntimeType.UNDEFINED
        value_placementOnTarget_type = runtimeType(value_placementOnTarget)
        valueSerializer.writeInt8(value_placementOnTarget_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placementOnTarget_type)) {
            const value_placementOnTarget_value  = value_placementOnTarget!
            valueSerializer.writeBoolean(value_placementOnTarget_value)
        }
    }
    writeStyleOptions(value: StyleOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeNumber(value_start_value)
        }
        const value_length  = value.length
        let value_length_type : int32 = RuntimeType.UNDEFINED
        value_length_type = runtimeType(value_length)
        valueSerializer.writeInt8(value_length_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_length_type)) {
            const value_length_value  = value_length!
            valueSerializer.writeNumber(value_length_value)
        }
        const value_styledKey  = value.styledKey
        valueSerializer.writeInt32(TypeChecker.StyledStringKey_ToNumeric(value_styledKey))
        const value_styledValue  = value.styledValue
        let value_styledValue_type : int32 = RuntimeType.UNDEFINED
        value_styledValue_type = runtimeType(value_styledValue)
        if (TypeChecker.isTextStyle_styled_string(value_styledValue, false, false, false, false, false)) {
            valueSerializer.writeInt8(0 as int32)
            const value_styledValue_0  = value_styledValue as TextStyle
            valueSerializer.writeTextStyle_styled_string(value_styledValue_0)
        }
        else if (TypeChecker.isDecorationStyle(value_styledValue, false, false, false)) {
            valueSerializer.writeInt8(1 as int32)
            const value_styledValue_1  = value_styledValue as DecorationStyle
            valueSerializer.writeDecorationStyle(value_styledValue_1)
        }
        else if (TypeChecker.isBaselineOffsetStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(2 as int32)
            const value_styledValue_2  = value_styledValue as BaselineOffsetStyle
            valueSerializer.writeBaselineOffsetStyle(value_styledValue_2)
        }
        else if (TypeChecker.isLetterSpacingStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(3 as int32)
            const value_styledValue_3  = value_styledValue as LetterSpacingStyle
            valueSerializer.writeLetterSpacingStyle(value_styledValue_3)
        }
        else if (TypeChecker.isTextShadowStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(4 as int32)
            const value_styledValue_4  = value_styledValue as TextShadowStyle
            valueSerializer.writeTextShadowStyle(value_styledValue_4)
        }
        else if (TypeChecker.isGestureStyle(value_styledValue)) {
            valueSerializer.writeInt8(5 as int32)
            const value_styledValue_5  = value_styledValue as GestureStyle
            valueSerializer.writeGestureStyle(value_styledValue_5)
        }
        else if (TypeChecker.isImageAttachment(value_styledValue, false, false, false, false, false, false)) {
            valueSerializer.writeInt8(6 as int32)
            const value_styledValue_6  = value_styledValue as ImageAttachment
            valueSerializer.writeImageAttachment(value_styledValue_6)
        }
        else if (TypeChecker.isParagraphStyle(value_styledValue, false, false, false, false, false, false, false)) {
            valueSerializer.writeInt8(7 as int32)
            const value_styledValue_7  = value_styledValue as ParagraphStyle
            valueSerializer.writeParagraphStyle(value_styledValue_7)
        }
        else if (TypeChecker.isLineHeightStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(8 as int32)
            const value_styledValue_8  = value_styledValue as LineHeightStyle
            valueSerializer.writeLineHeightStyle(value_styledValue_8)
        }
        else if (TypeChecker.isUrlStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(9 as int32)
            const value_styledValue_9  = value_styledValue as UrlStyle
            valueSerializer.writeUrlStyle(value_styledValue_9)
        }
        else if (TypeChecker.isCustomSpan(value_styledValue)) {
            valueSerializer.writeInt8(10 as int32)
            const value_styledValue_10  = value_styledValue as CustomSpan
            valueSerializer.writeCustomSpan(value_styledValue_10)
        }
        else if (RuntimeType.OBJECT == value_styledValue_type) {
            valueSerializer.writeInt8(11 as int32)
            const value_styledValue_11  = value_styledValue as UserDataSpan
            valueSerializer.writeUserDataSpan(value_styledValue_11)
        }
        else if (TypeChecker.isBackgroundColorStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(12 as int32)
            const value_styledValue_12  = value_styledValue as BackgroundColorStyle
            valueSerializer.writeBackgroundColorStyle(value_styledValue_12)
        }
    }
    writeTextDataDetectorConfig(value: TextDataDetectorConfig): void {
        let valueSerializer : Serializer = this
        const value_types  = value.types
        valueSerializer.writeInt32(value_types.length as int32)
        for (let i = 0; i < value_types.length; i++) {
            const value_types_element : TextDataDetectorType = value_types[i]
            valueSerializer.writeInt32(TypeChecker.TextDataDetectorType_ToNumeric(value_types_element))
        }
        const value_onDetectResultUpdate  = value.onDetectResultUpdate
        let value_onDetectResultUpdate_type : int32 = RuntimeType.UNDEFINED
        value_onDetectResultUpdate_type = runtimeType(value_onDetectResultUpdate)
        valueSerializer.writeInt8(value_onDetectResultUpdate_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDetectResultUpdate_type)) {
            const value_onDetectResultUpdate_value  = value_onDetectResultUpdate!
            valueSerializer.holdAndWriteCallback(value_onDetectResultUpdate_value)
        }
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_decoration  = value.decoration
        let value_decoration_type : int32 = RuntimeType.UNDEFINED
        value_decoration_type = runtimeType(value_decoration)
        valueSerializer.writeInt8(value_decoration_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_decoration_type)) {
            const value_decoration_value  = value_decoration!
            valueSerializer.writeDecorationStyleInterface(value_decoration_value)
        }
    }
    writeTextPickerTextStyle(value: TextPickerTextStyle): void {
        let valueSerializer : Serializer = this
        const value_color  = value.color
        let value_color_type : int32 = RuntimeType.UNDEFINED
        value_color_type = runtimeType(value_color)
        valueSerializer.writeInt8(value_color_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_color_type)) {
            const value_color_value  = value_color!
            let value_color_value_type : int32 = RuntimeType.UNDEFINED
            value_color_value_type = runtimeType(value_color_value)
            if (TypeChecker.isColor(value_color_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_color_value_0  = value_color_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_color_value_0))
            }
            else if (RuntimeType.NUMBER == value_color_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_color_value_1  = value_color_value as number
                valueSerializer.writeNumber(value_color_value_1)
            }
            else if (RuntimeType.STRING == value_color_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_color_value_2  = value_color_value as string
                valueSerializer.writeString(value_color_value_2)
            }
            else if (RuntimeType.OBJECT == value_color_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_color_value_3  = value_color_value as Resource
                valueSerializer.writeResource(value_color_value_3)
            }
        }
        const value_font  = value.font
        let value_font_type : int32 = RuntimeType.UNDEFINED
        value_font_type = runtimeType(value_font)
        valueSerializer.writeInt8(value_font_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_font_type)) {
            const value_font_value  = value_font!
            valueSerializer.writeFont(value_font_value)
        }
        const value_minFontSize  = value.minFontSize
        let value_minFontSize_type : int32 = RuntimeType.UNDEFINED
        value_minFontSize_type = runtimeType(value_minFontSize)
        valueSerializer.writeInt8(value_minFontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_minFontSize_type)) {
            const value_minFontSize_value  = value_minFontSize!
            let value_minFontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_minFontSize_value_type = runtimeType(value_minFontSize_value)
            if (RuntimeType.NUMBER == value_minFontSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_minFontSize_value_0  = value_minFontSize_value as number
                valueSerializer.writeNumber(value_minFontSize_value_0)
            }
            else if (RuntimeType.STRING == value_minFontSize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_minFontSize_value_1  = value_minFontSize_value as string
                valueSerializer.writeString(value_minFontSize_value_1)
            }
            else if (RuntimeType.OBJECT == value_minFontSize_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_minFontSize_value_2  = value_minFontSize_value as Resource
                valueSerializer.writeResource(value_minFontSize_value_2)
            }
        }
        const value_maxFontSize  = value.maxFontSize
        let value_maxFontSize_type : int32 = RuntimeType.UNDEFINED
        value_maxFontSize_type = runtimeType(value_maxFontSize)
        valueSerializer.writeInt8(value_maxFontSize_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maxFontSize_type)) {
            const value_maxFontSize_value  = value_maxFontSize!
            let value_maxFontSize_value_type : int32 = RuntimeType.UNDEFINED
            value_maxFontSize_value_type = runtimeType(value_maxFontSize_value)
            if (RuntimeType.NUMBER == value_maxFontSize_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_maxFontSize_value_0  = value_maxFontSize_value as number
                valueSerializer.writeNumber(value_maxFontSize_value_0)
            }
            else if (RuntimeType.STRING == value_maxFontSize_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_maxFontSize_value_1  = value_maxFontSize_value as string
                valueSerializer.writeString(value_maxFontSize_value_1)
            }
            else if (RuntimeType.OBJECT == value_maxFontSize_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_maxFontSize_value_2  = value_maxFontSize_value as Resource
                valueSerializer.writeResource(value_maxFontSize_value_2)
            }
        }
        const value_overflow  = value.overflow
        let value_overflow_type : int32 = RuntimeType.UNDEFINED
        value_overflow_type = runtimeType(value_overflow)
        valueSerializer.writeInt8(value_overflow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_overflow_type)) {
            const value_overflow_value  = (value_overflow as TextOverflow)
            valueSerializer.writeInt32(TypeChecker.TextOverflow_ToNumeric(value_overflow_value))
        }
    }
    writeBottomTabBarStyle(value: BottomTabBarStyle): void {
        let valueSerializer : Serializer = this
        const value__icon  = value._icon
        let value__icon_type : int32 = RuntimeType.UNDEFINED
        value__icon_type = runtimeType(value__icon)
        valueSerializer.writeInt8(value__icon_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__icon_type)) {
            const value__icon_value  = value__icon!
            let value__icon_value_type : int32 = RuntimeType.UNDEFINED
            value__icon_value_type = runtimeType(value__icon_value)
            if ((RuntimeType.STRING == value__icon_value_type) || (RuntimeType.OBJECT == value__icon_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value__icon_value_0  = value__icon_value as ResourceStr
                let value__icon_value_0_type : int32 = RuntimeType.UNDEFINED
                value__icon_value_0_type = runtimeType(value__icon_value_0)
                if (RuntimeType.STRING == value__icon_value_0_type) {
                    valueSerializer.writeInt8(0 as int32)
                    const value__icon_value_0_0  = value__icon_value_0 as string
                    valueSerializer.writeString(value__icon_value_0_0)
                }
                else if (RuntimeType.OBJECT == value__icon_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value__icon_value_0_1  = value__icon_value_0 as Resource
                    valueSerializer.writeResource(value__icon_value_0_1)
                }
            }
            else if (((RuntimeType.OBJECT) == (value__icon_value_type)) && (TypeChecker.isTabBarSymbol(value__icon_value, false, false))) {
                valueSerializer.writeInt8(1 as int32)
                const value__icon_value_1  = value__icon_value as TabBarSymbol
                valueSerializer.writeTabBarSymbol(value__icon_value_1)
            }
        }
        const value__text  = value._text
        let value__text_type : int32 = RuntimeType.UNDEFINED
        value__text_type = runtimeType(value__text)
        valueSerializer.writeInt8(value__text_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__text_type)) {
            const value__text_value  = value__text!
            let value__text_value_type : int32 = RuntimeType.UNDEFINED
            value__text_value_type = runtimeType(value__text_value)
            if (RuntimeType.STRING == value__text_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value__text_value_0  = value__text_value as string
                valueSerializer.writeString(value__text_value_0)
            }
            else if (RuntimeType.OBJECT == value__text_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value__text_value_1  = value__text_value as Resource
                valueSerializer.writeResource(value__text_value_1)
            }
        }
        const value__labelStyle  = value._labelStyle
        let value__labelStyle_type : int32 = RuntimeType.UNDEFINED
        value__labelStyle_type = runtimeType(value__labelStyle)
        valueSerializer.writeInt8(value__labelStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__labelStyle_type)) {
            const value__labelStyle_value  = value__labelStyle!
            valueSerializer.writeTabBarLabelStyle(value__labelStyle_value)
        }
        const value__padding  = value._padding
        let value__padding_type : int32 = RuntimeType.UNDEFINED
        value__padding_type = runtimeType(value__padding)
        valueSerializer.writeInt8(value__padding_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__padding_type)) {
            const value__padding_value  = value__padding!
            let value__padding_value_type : int32 = RuntimeType.UNDEFINED
            value__padding_value_type = runtimeType(value__padding_value)
            if (TypeChecker.isPadding(value__padding_value, false, false, false, false)) {
                valueSerializer.writeInt8(0 as int32)
                const value__padding_value_0  = value__padding_value as Padding
                const value__padding_value_0_top  = value__padding_value_0.top
                let value__padding_value_0_top_type : int32 = RuntimeType.UNDEFINED
                value__padding_value_0_top_type = runtimeType(value__padding_value_0_top)
                valueSerializer.writeInt8(value__padding_value_0_top_type as int32)
                if ((RuntimeType.UNDEFINED) != (value__padding_value_0_top_type)) {
                    const value__padding_value_0_top_value  = value__padding_value_0_top!
                    valueSerializer.writeLength(value__padding_value_0_top_value)
                }
                const value__padding_value_0_right  = value__padding_value_0.right
                let value__padding_value_0_right_type : int32 = RuntimeType.UNDEFINED
                value__padding_value_0_right_type = runtimeType(value__padding_value_0_right)
                valueSerializer.writeInt8(value__padding_value_0_right_type as int32)
                if ((RuntimeType.UNDEFINED) != (value__padding_value_0_right_type)) {
                    const value__padding_value_0_right_value  = value__padding_value_0_right!
                    valueSerializer.writeLength(value__padding_value_0_right_value)
                }
                const value__padding_value_0_bottom  = value__padding_value_0.bottom
                let value__padding_value_0_bottom_type : int32 = RuntimeType.UNDEFINED
                value__padding_value_0_bottom_type = runtimeType(value__padding_value_0_bottom)
                valueSerializer.writeInt8(value__padding_value_0_bottom_type as int32)
                if ((RuntimeType.UNDEFINED) != (value__padding_value_0_bottom_type)) {
                    const value__padding_value_0_bottom_value  = value__padding_value_0_bottom!
                    valueSerializer.writeLength(value__padding_value_0_bottom_value)
                }
                const value__padding_value_0_left  = value__padding_value_0.left
                let value__padding_value_0_left_type : int32 = RuntimeType.UNDEFINED
                value__padding_value_0_left_type = runtimeType(value__padding_value_0_left)
                valueSerializer.writeInt8(value__padding_value_0_left_type as int32)
                if ((RuntimeType.UNDEFINED) != (value__padding_value_0_left_type)) {
                    const value__padding_value_0_left_value  = value__padding_value_0_left!
                    valueSerializer.writeLength(value__padding_value_0_left_value)
                }
            }
            else if (((RuntimeType.NUMBER) == (value__padding_value_type)) || ((RuntimeType.STRING) == (value__padding_value_type)) || (((RuntimeType.OBJECT) == (value__padding_value_type)) && (TypeChecker.isResource(value__padding_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(1 as int32)
                const value__padding_value_1  = value__padding_value as Dimension
                valueSerializer.writeLength(value__padding_value_1)
            }
            else if (TypeChecker.isLocalizedPadding(value__padding_value, true, false, true, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value__padding_value_2  = value__padding_value as LocalizedPadding
                valueSerializer.writeLocalizedPadding(value__padding_value_2)
            }
        }
        const value__layoutMode  = value._layoutMode
        let value__layoutMode_type : int32 = RuntimeType.UNDEFINED
        value__layoutMode_type = runtimeType(value__layoutMode)
        valueSerializer.writeInt8(value__layoutMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__layoutMode_type)) {
            const value__layoutMode_value  = (value__layoutMode as LayoutMode)
            valueSerializer.writeInt32(TypeChecker.LayoutMode_ToNumeric(value__layoutMode_value))
        }
        const value__verticalAlign  = value._verticalAlign
        let value__verticalAlign_type : int32 = RuntimeType.UNDEFINED
        value__verticalAlign_type = runtimeType(value__verticalAlign)
        valueSerializer.writeInt8(value__verticalAlign_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__verticalAlign_type)) {
            const value__verticalAlign_value  = (value__verticalAlign as VerticalAlign)
            valueSerializer.writeInt32(TypeChecker.VerticalAlign_ToNumeric(value__verticalAlign_value))
        }
        const value__symmetricExtensible  = value._symmetricExtensible
        let value__symmetricExtensible_type : int32 = RuntimeType.UNDEFINED
        value__symmetricExtensible_type = runtimeType(value__symmetricExtensible)
        valueSerializer.writeInt8(value__symmetricExtensible_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__symmetricExtensible_type)) {
            const value__symmetricExtensible_value  = value__symmetricExtensible!
            valueSerializer.writeBoolean(value__symmetricExtensible_value)
        }
        const value__id  = value._id
        let value__id_type : int32 = RuntimeType.UNDEFINED
        value__id_type = runtimeType(value__id)
        valueSerializer.writeInt8(value__id_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__id_type)) {
            const value__id_value  = value__id!
            valueSerializer.writeString(value__id_value)
        }
        const value__iconStyle  = value._iconStyle
        let value__iconStyle_type : int32 = RuntimeType.UNDEFINED
        value__iconStyle_type = runtimeType(value__iconStyle)
        valueSerializer.writeInt8(value__iconStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__iconStyle_type)) {
            const value__iconStyle_value  = value__iconStyle!
            valueSerializer.writeTabBarIconStyle(value__iconStyle_value)
        }
    }
    writeContextMenuOptions(value: ContextMenuOptions): void {
        let valueSerializer : Serializer = this
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writePosition(value_offset_value)
        }
        const value_placement  = value.placement
        let value_placement_type : int32 = RuntimeType.UNDEFINED
        value_placement_type = runtimeType(value_placement)
        valueSerializer.writeInt8(value_placement_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placement_type)) {
            const value_placement_value  = (value_placement as Placement)
            valueSerializer.writeInt32(TypeChecker.Placement_ToNumeric(value_placement_value))
        }
        const value_enableArrow  = value.enableArrow
        let value_enableArrow_type : int32 = RuntimeType.UNDEFINED
        value_enableArrow_type = runtimeType(value_enableArrow)
        valueSerializer.writeInt8(value_enableArrow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableArrow_type)) {
            const value_enableArrow_value  = value_enableArrow!
            valueSerializer.writeBoolean(value_enableArrow_value)
        }
        const value_arrowOffset  = value.arrowOffset
        let value_arrowOffset_type : int32 = RuntimeType.UNDEFINED
        value_arrowOffset_type = runtimeType(value_arrowOffset)
        valueSerializer.writeInt8(value_arrowOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowOffset_type)) {
            const value_arrowOffset_value  = value_arrowOffset!
            valueSerializer.writeLength(value_arrowOffset_value)
        }
        const value_preview  = value.preview
        let value_preview_type : int32 = RuntimeType.UNDEFINED
        value_preview_type = runtimeType(value_preview)
        valueSerializer.writeInt8(value_preview_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_preview_type)) {
            const value_preview_value  = value_preview!
            let value_preview_value_type : int32 = RuntimeType.UNDEFINED
            value_preview_value_type = runtimeType(value_preview_value)
            if (TypeChecker.isMenuPreviewMode(value_preview_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_preview_value_0  = value_preview_value as MenuPreviewMode
                valueSerializer.writeInt32(TypeChecker.MenuPreviewMode_ToNumeric(value_preview_value_0))
            }
            else if (RuntimeType.FUNCTION == value_preview_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_preview_value_1  = value_preview_value as CustomBuilder
                valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_preview_value_1))
            }
        }
        const value_previewBorderRadius  = value.previewBorderRadius
        let value_previewBorderRadius_type : int32 = RuntimeType.UNDEFINED
        value_previewBorderRadius_type = runtimeType(value_previewBorderRadius)
        valueSerializer.writeInt8(value_previewBorderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewBorderRadius_type)) {
            const value_previewBorderRadius_value  = value_previewBorderRadius!
            let value_previewBorderRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_previewBorderRadius_value_type = runtimeType(value_previewBorderRadius_value)
            if (((RuntimeType.NUMBER) == (value_previewBorderRadius_value_type)) || ((RuntimeType.STRING) == (value_previewBorderRadius_value_type)) || (((RuntimeType.OBJECT) == (value_previewBorderRadius_value_type)) && (TypeChecker.isResource(value_previewBorderRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_previewBorderRadius_value_0  = value_previewBorderRadius_value as Length
                valueSerializer.writeLength(value_previewBorderRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_previewBorderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_previewBorderRadius_value_1  = value_previewBorderRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_previewBorderRadius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_previewBorderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_previewBorderRadius_value_2  = value_previewBorderRadius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_previewBorderRadius_value_2)
            }
        }
        const value_borderRadius  = value.borderRadius
        let value_borderRadius_type : int32 = RuntimeType.UNDEFINED
        value_borderRadius_type = runtimeType(value_borderRadius)
        valueSerializer.writeInt8(value_borderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderRadius_type)) {
            const value_borderRadius_value  = value_borderRadius!
            let value_borderRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_borderRadius_value_type = runtimeType(value_borderRadius_value)
            if (((RuntimeType.NUMBER) == (value_borderRadius_value_type)) || ((RuntimeType.STRING) == (value_borderRadius_value_type)) || (((RuntimeType.OBJECT) == (value_borderRadius_value_type)) && (TypeChecker.isResource(value_borderRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderRadius_value_0  = value_borderRadius_value as Length
                valueSerializer.writeLength(value_borderRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_borderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderRadius_value_1  = value_borderRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_borderRadius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_borderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderRadius_value_2  = value_borderRadius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_borderRadius_value_2)
            }
        }
        const value_onAppear  = value.onAppear
        let value_onAppear_type : int32 = RuntimeType.UNDEFINED
        value_onAppear_type = runtimeType(value_onAppear)
        valueSerializer.writeInt8(value_onAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAppear_type)) {
            const value_onAppear_value  = value_onAppear!
            valueSerializer.holdAndWriteCallback(value_onAppear_value)
        }
        const value_onDisappear  = value.onDisappear
        let value_onDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDisappear_type = runtimeType(value_onDisappear)
        valueSerializer.writeInt8(value_onDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDisappear_type)) {
            const value_onDisappear_value  = value_onDisappear!
            valueSerializer.holdAndWriteCallback(value_onDisappear_value)
        }
        const value_aboutToAppear  = value.aboutToAppear
        let value_aboutToAppear_type : int32 = RuntimeType.UNDEFINED
        value_aboutToAppear_type = runtimeType(value_aboutToAppear)
        valueSerializer.writeInt8(value_aboutToAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_aboutToAppear_type)) {
            const value_aboutToAppear_value  = value_aboutToAppear!
            valueSerializer.holdAndWriteCallback(value_aboutToAppear_value)
        }
        const value_aboutToDisappear  = value.aboutToDisappear
        let value_aboutToDisappear_type : int32 = RuntimeType.UNDEFINED
        value_aboutToDisappear_type = runtimeType(value_aboutToDisappear)
        valueSerializer.writeInt8(value_aboutToDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_aboutToDisappear_type)) {
            const value_aboutToDisappear_value  = value_aboutToDisappear!
            valueSerializer.holdAndWriteCallback(value_aboutToDisappear_value)
        }
        const value_layoutRegionMargin  = value.layoutRegionMargin
        let value_layoutRegionMargin_type : int32 = RuntimeType.UNDEFINED
        value_layoutRegionMargin_type = runtimeType(value_layoutRegionMargin)
        valueSerializer.writeInt8(value_layoutRegionMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_layoutRegionMargin_type)) {
            const value_layoutRegionMargin_value  = value_layoutRegionMargin!
            valueSerializer.writePadding(value_layoutRegionMargin_value)
        }
        const value_previewAnimationOptions  = value.previewAnimationOptions
        let value_previewAnimationOptions_type : int32 = RuntimeType.UNDEFINED
        value_previewAnimationOptions_type = runtimeType(value_previewAnimationOptions)
        valueSerializer.writeInt8(value_previewAnimationOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewAnimationOptions_type)) {
            const value_previewAnimationOptions_value  = value_previewAnimationOptions!
            valueSerializer.writeContextMenuAnimationOptions(value_previewAnimationOptions_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_outlineColor  = value.outlineColor
        let value_outlineColor_type : int32 = RuntimeType.UNDEFINED
        value_outlineColor_type = runtimeType(value_outlineColor)
        valueSerializer.writeInt8(value_outlineColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_outlineColor_type)) {
            const value_outlineColor_value  = value_outlineColor!
            let value_outlineColor_value_type : int32 = RuntimeType.UNDEFINED
            value_outlineColor_value_type = runtimeType(value_outlineColor_value)
            if ((TypeChecker.isColor(value_outlineColor_value)) || (RuntimeType.NUMBER == value_outlineColor_value_type) || (RuntimeType.STRING == value_outlineColor_value_type) || (RuntimeType.OBJECT == value_outlineColor_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_outlineColor_value_0  = value_outlineColor_value as ResourceColor
                let value_outlineColor_value_0_type : int32 = RuntimeType.UNDEFINED
                value_outlineColor_value_0_type = runtimeType(value_outlineColor_value_0)
                if (TypeChecker.isColor(value_outlineColor_value_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_outlineColor_value_0_0  = value_outlineColor_value_0 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_outlineColor_value_0_0))
                }
                else if (RuntimeType.NUMBER == value_outlineColor_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_outlineColor_value_0_1  = value_outlineColor_value_0 as number
                    valueSerializer.writeNumber(value_outlineColor_value_0_1)
                }
                else if (RuntimeType.STRING == value_outlineColor_value_0_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_outlineColor_value_0_2  = value_outlineColor_value_0 as string
                    valueSerializer.writeString(value_outlineColor_value_0_2)
                }
                else if (RuntimeType.OBJECT == value_outlineColor_value_0_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_outlineColor_value_0_3  = value_outlineColor_value_0 as Resource
                    valueSerializer.writeResource(value_outlineColor_value_0_3)
                }
            }
            else if (TypeChecker.isEdgeColors(value_outlineColor_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_outlineColor_value_1  = value_outlineColor_value as EdgeColors
                valueSerializer.writeEdgeColors(value_outlineColor_value_1)
            }
        }
        const value_outlineWidth  = value.outlineWidth
        let value_outlineWidth_type : int32 = RuntimeType.UNDEFINED
        value_outlineWidth_type = runtimeType(value_outlineWidth)
        valueSerializer.writeInt8(value_outlineWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_outlineWidth_type)) {
            const value_outlineWidth_value  = value_outlineWidth!
            let value_outlineWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_outlineWidth_value_type = runtimeType(value_outlineWidth_value)
            if (((RuntimeType.NUMBER) == (value_outlineWidth_value_type)) || ((RuntimeType.STRING) == (value_outlineWidth_value_type)) || (((RuntimeType.OBJECT) == (value_outlineWidth_value_type)) && (TypeChecker.isResource(value_outlineWidth_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_outlineWidth_value_0  = value_outlineWidth_value as Dimension
                valueSerializer.writeLength(value_outlineWidth_value_0)
            }
            else if (TypeChecker.isEdgeOutlineWidths(value_outlineWidth_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_outlineWidth_value_1  = value_outlineWidth_value as EdgeOutlineWidths
                valueSerializer.writeEdgeOutlineWidths(value_outlineWidth_value_1)
            }
        }
        const value_hapticFeedbackMode  = value.hapticFeedbackMode
        let value_hapticFeedbackMode_type : int32 = RuntimeType.UNDEFINED
        value_hapticFeedbackMode_type = runtimeType(value_hapticFeedbackMode)
        valueSerializer.writeInt8(value_hapticFeedbackMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hapticFeedbackMode_type)) {
            const value_hapticFeedbackMode_value  = (value_hapticFeedbackMode as HapticFeedbackMode)
            valueSerializer.writeInt32(TypeChecker.HapticFeedbackMode_ToNumeric(value_hapticFeedbackMode_value))
        }
    }
    writeDatePickerDialogOptions(value: DatePickerDialogOptions): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeInt64((value_start_value.getTime() as int64))
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeInt64((value_end_value.getTime() as int64))
        }
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            valueSerializer.writeInt64((value_selected_value.getTime() as int64))
        }
        const value_mode  = value.mode
        let value_mode_type : int32 = RuntimeType.UNDEFINED
        value_mode_type = runtimeType(value_mode)
        valueSerializer.writeInt8(value_mode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_mode_type)) {
            const value_mode_value  = (value_mode as DatePickerMode)
            valueSerializer.writeInt32(TypeChecker.DatePickerMode_ToNumeric(value_mode_value))
        }
        const value_lunar  = value.lunar
        let value_lunar_type : int32 = RuntimeType.UNDEFINED
        value_lunar_type = runtimeType(value_lunar)
        valueSerializer.writeInt8(value_lunar_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lunar_type)) {
            const value_lunar_value  = value_lunar!
            valueSerializer.writeBoolean(value_lunar_value)
        }
        const value_lunarSwitch  = value.lunarSwitch
        let value_lunarSwitch_type : int32 = RuntimeType.UNDEFINED
        value_lunarSwitch_type = runtimeType(value_lunarSwitch)
        valueSerializer.writeInt8(value_lunarSwitch_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lunarSwitch_type)) {
            const value_lunarSwitch_value  = value_lunarSwitch!
            valueSerializer.writeBoolean(value_lunarSwitch_value)
        }
        const value_lunarSwitchStyle  = value.lunarSwitchStyle
        let value_lunarSwitchStyle_type : int32 = RuntimeType.UNDEFINED
        value_lunarSwitchStyle_type = runtimeType(value_lunarSwitchStyle)
        valueSerializer.writeInt8(value_lunarSwitchStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_lunarSwitchStyle_type)) {
            const value_lunarSwitchStyle_value  = value_lunarSwitchStyle!
            valueSerializer.writeLunarSwitchStyle(value_lunarSwitchStyle_value)
        }
        const value_showTime  = value.showTime
        let value_showTime_type : int32 = RuntimeType.UNDEFINED
        value_showTime_type = runtimeType(value_showTime)
        valueSerializer.writeInt8(value_showTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showTime_type)) {
            const value_showTime_value  = value_showTime!
            valueSerializer.writeBoolean(value_showTime_value)
        }
        const value_useMilitaryTime  = value.useMilitaryTime
        let value_useMilitaryTime_type : int32 = RuntimeType.UNDEFINED
        value_useMilitaryTime_type = runtimeType(value_useMilitaryTime)
        valueSerializer.writeInt8(value_useMilitaryTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_useMilitaryTime_type)) {
            const value_useMilitaryTime_value  = value_useMilitaryTime!
            valueSerializer.writeBoolean(value_useMilitaryTime_value)
        }
        const value_disappearTextStyle  = value.disappearTextStyle
        let value_disappearTextStyle_type : int32 = RuntimeType.UNDEFINED
        value_disappearTextStyle_type = runtimeType(value_disappearTextStyle)
        valueSerializer.writeInt8(value_disappearTextStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disappearTextStyle_type)) {
            const value_disappearTextStyle_value  = value_disappearTextStyle!
            valueSerializer.writePickerTextStyle(value_disappearTextStyle_value)
        }
        const value_textStyle  = value.textStyle
        let value_textStyle_type : int32 = RuntimeType.UNDEFINED
        value_textStyle_type = runtimeType(value_textStyle)
        valueSerializer.writeInt8(value_textStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textStyle_type)) {
            const value_textStyle_value  = value_textStyle!
            valueSerializer.writePickerTextStyle(value_textStyle_value)
        }
        const value_acceptButtonStyle  = value.acceptButtonStyle
        let value_acceptButtonStyle_type : int32 = RuntimeType.UNDEFINED
        value_acceptButtonStyle_type = runtimeType(value_acceptButtonStyle)
        valueSerializer.writeInt8(value_acceptButtonStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_acceptButtonStyle_type)) {
            const value_acceptButtonStyle_value  = value_acceptButtonStyle!
            valueSerializer.writePickerDialogButtonStyle(value_acceptButtonStyle_value)
        }
        const value_cancelButtonStyle  = value.cancelButtonStyle
        let value_cancelButtonStyle_type : int32 = RuntimeType.UNDEFINED
        value_cancelButtonStyle_type = runtimeType(value_cancelButtonStyle)
        valueSerializer.writeInt8(value_cancelButtonStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cancelButtonStyle_type)) {
            const value_cancelButtonStyle_value  = value_cancelButtonStyle!
            valueSerializer.writePickerDialogButtonStyle(value_cancelButtonStyle_value)
        }
        const value_selectedTextStyle  = value.selectedTextStyle
        let value_selectedTextStyle_type : int32 = RuntimeType.UNDEFINED
        value_selectedTextStyle_type = runtimeType(value_selectedTextStyle)
        valueSerializer.writeInt8(value_selectedTextStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selectedTextStyle_type)) {
            const value_selectedTextStyle_value  = value_selectedTextStyle!
            valueSerializer.writePickerTextStyle(value_selectedTextStyle_value)
        }
        const value_maskRect  = value.maskRect
        let value_maskRect_type : int32 = RuntimeType.UNDEFINED
        value_maskRect_type = runtimeType(value_maskRect)
        valueSerializer.writeInt8(value_maskRect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskRect_type)) {
            const value_maskRect_value  = value_maskRect!
            valueSerializer.writeRectangle(value_maskRect_value)
        }
        const value_alignment  = value.alignment
        let value_alignment_type : int32 = RuntimeType.UNDEFINED
        value_alignment_type = runtimeType(value_alignment)
        valueSerializer.writeInt8(value_alignment_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignment_type)) {
            const value_alignment_value  = (value_alignment as DialogAlignment)
            valueSerializer.writeInt32(TypeChecker.DialogAlignment_ToNumeric(value_alignment_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeOffset(value_offset_value)
        }
        const value_onAccept  = value.onAccept
        let value_onAccept_type : int32 = RuntimeType.UNDEFINED
        value_onAccept_type = runtimeType(value_onAccept)
        valueSerializer.writeInt8(value_onAccept_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAccept_type)) {
            const value_onAccept_value  = value_onAccept!
            valueSerializer.holdAndWriteCallback(value_onAccept_value)
        }
        const value_onCancel  = value.onCancel
        let value_onCancel_type : int32 = RuntimeType.UNDEFINED
        value_onCancel_type = runtimeType(value_onCancel)
        valueSerializer.writeInt8(value_onCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onCancel_type)) {
            const value_onCancel_value  = value_onCancel!
            valueSerializer.holdAndWriteCallback(value_onCancel_value)
        }
        const value_onChange  = value.onChange
        let value_onChange_type : int32 = RuntimeType.UNDEFINED
        value_onChange_type = runtimeType(value_onChange)
        valueSerializer.writeInt8(value_onChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onChange_type)) {
            const value_onChange_value  = value_onChange!
            valueSerializer.holdAndWriteCallback(value_onChange_value)
        }
        const value_onDateAccept  = value.onDateAccept
        let value_onDateAccept_type : int32 = RuntimeType.UNDEFINED
        value_onDateAccept_type = runtimeType(value_onDateAccept)
        valueSerializer.writeInt8(value_onDateAccept_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDateAccept_type)) {
            const value_onDateAccept_value  = value_onDateAccept!
            valueSerializer.holdAndWriteCallback(value_onDateAccept_value)
        }
        const value_onDateChange  = value.onDateChange
        let value_onDateChange_type : int32 = RuntimeType.UNDEFINED
        value_onDateChange_type = runtimeType(value_onDateChange)
        valueSerializer.writeInt8(value_onDateChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDateChange_type)) {
            const value_onDateChange_value  = value_onDateChange!
            valueSerializer.holdAndWriteCallback(value_onDateChange_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_onDidAppear  = value.onDidAppear
        let value_onDidAppear_type : int32 = RuntimeType.UNDEFINED
        value_onDidAppear_type = runtimeType(value_onDidAppear)
        valueSerializer.writeInt8(value_onDidAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidAppear_type)) {
            const value_onDidAppear_value  = value_onDidAppear!
            valueSerializer.holdAndWriteCallback(value_onDidAppear_value)
        }
        const value_onDidDisappear  = value.onDidDisappear
        let value_onDidDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDidDisappear_type = runtimeType(value_onDidDisappear)
        valueSerializer.writeInt8(value_onDidDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidDisappear_type)) {
            const value_onDidDisappear_value  = value_onDidDisappear!
            valueSerializer.holdAndWriteCallback(value_onDidDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_dateTimeOptions  = value.dateTimeOptions
        let value_dateTimeOptions_type : int32 = RuntimeType.UNDEFINED
        value_dateTimeOptions_type = runtimeType(value_dateTimeOptions)
        valueSerializer.writeInt8(value_dateTimeOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dateTimeOptions_type)) {
            const value_dateTimeOptions_value  = value_dateTimeOptions!
            valueSerializer.writeDateTimeOptions(value_dateTimeOptions_value)
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_enableHapticFeedback  = value.enableHapticFeedback
        let value_enableHapticFeedback_type : int32 = RuntimeType.UNDEFINED
        value_enableHapticFeedback_type = runtimeType(value_enableHapticFeedback)
        valueSerializer.writeInt8(value_enableHapticFeedback_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHapticFeedback_type)) {
            const value_enableHapticFeedback_value  = value_enableHapticFeedback!
            valueSerializer.writeBoolean(value_enableHapticFeedback_value)
        }
    }
    writeMenuOptions(value: MenuOptions): void {
        let valueSerializer : Serializer = this
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writePosition(value_offset_value)
        }
        const value_placement  = value.placement
        let value_placement_type : int32 = RuntimeType.UNDEFINED
        value_placement_type = runtimeType(value_placement)
        valueSerializer.writeInt8(value_placement_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placement_type)) {
            const value_placement_value  = (value_placement as Placement)
            valueSerializer.writeInt32(TypeChecker.Placement_ToNumeric(value_placement_value))
        }
        const value_enableArrow  = value.enableArrow
        let value_enableArrow_type : int32 = RuntimeType.UNDEFINED
        value_enableArrow_type = runtimeType(value_enableArrow)
        valueSerializer.writeInt8(value_enableArrow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableArrow_type)) {
            const value_enableArrow_value  = value_enableArrow!
            valueSerializer.writeBoolean(value_enableArrow_value)
        }
        const value_arrowOffset  = value.arrowOffset
        let value_arrowOffset_type : int32 = RuntimeType.UNDEFINED
        value_arrowOffset_type = runtimeType(value_arrowOffset)
        valueSerializer.writeInt8(value_arrowOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowOffset_type)) {
            const value_arrowOffset_value  = value_arrowOffset!
            valueSerializer.writeLength(value_arrowOffset_value)
        }
        const value_preview  = value.preview
        let value_preview_type : int32 = RuntimeType.UNDEFINED
        value_preview_type = runtimeType(value_preview)
        valueSerializer.writeInt8(value_preview_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_preview_type)) {
            const value_preview_value  = value_preview!
            let value_preview_value_type : int32 = RuntimeType.UNDEFINED
            value_preview_value_type = runtimeType(value_preview_value)
            if (TypeChecker.isMenuPreviewMode(value_preview_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_preview_value_0  = value_preview_value as MenuPreviewMode
                valueSerializer.writeInt32(TypeChecker.MenuPreviewMode_ToNumeric(value_preview_value_0))
            }
            else if (RuntimeType.FUNCTION == value_preview_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_preview_value_1  = value_preview_value as CustomBuilder
                valueSerializer.holdAndWriteCallback(CallbackTransformer.transformFromCustomBuilder(value_preview_value_1))
            }
        }
        const value_previewBorderRadius  = value.previewBorderRadius
        let value_previewBorderRadius_type : int32 = RuntimeType.UNDEFINED
        value_previewBorderRadius_type = runtimeType(value_previewBorderRadius)
        valueSerializer.writeInt8(value_previewBorderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewBorderRadius_type)) {
            const value_previewBorderRadius_value  = value_previewBorderRadius!
            let value_previewBorderRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_previewBorderRadius_value_type = runtimeType(value_previewBorderRadius_value)
            if (((RuntimeType.NUMBER) == (value_previewBorderRadius_value_type)) || ((RuntimeType.STRING) == (value_previewBorderRadius_value_type)) || (((RuntimeType.OBJECT) == (value_previewBorderRadius_value_type)) && (TypeChecker.isResource(value_previewBorderRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_previewBorderRadius_value_0  = value_previewBorderRadius_value as Length
                valueSerializer.writeLength(value_previewBorderRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_previewBorderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_previewBorderRadius_value_1  = value_previewBorderRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_previewBorderRadius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_previewBorderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_previewBorderRadius_value_2  = value_previewBorderRadius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_previewBorderRadius_value_2)
            }
        }
        const value_borderRadius  = value.borderRadius
        let value_borderRadius_type : int32 = RuntimeType.UNDEFINED
        value_borderRadius_type = runtimeType(value_borderRadius)
        valueSerializer.writeInt8(value_borderRadius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_borderRadius_type)) {
            const value_borderRadius_value  = value_borderRadius!
            let value_borderRadius_value_type : int32 = RuntimeType.UNDEFINED
            value_borderRadius_value_type = runtimeType(value_borderRadius_value)
            if (((RuntimeType.NUMBER) == (value_borderRadius_value_type)) || ((RuntimeType.STRING) == (value_borderRadius_value_type)) || (((RuntimeType.OBJECT) == (value_borderRadius_value_type)) && (TypeChecker.isResource(value_borderRadius_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_borderRadius_value_0  = value_borderRadius_value as Length
                valueSerializer.writeLength(value_borderRadius_value_0)
            }
            else if (TypeChecker.isBorderRadiuses(value_borderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_borderRadius_value_1  = value_borderRadius_value as BorderRadiuses
                valueSerializer.writeBorderRadiuses(value_borderRadius_value_1)
            }
            else if (TypeChecker.isLocalizedBorderRadiuses(value_borderRadius_value, false, false, false, false)) {
                valueSerializer.writeInt8(2 as int32)
                const value_borderRadius_value_2  = value_borderRadius_value as LocalizedBorderRadiuses
                valueSerializer.writeLocalizedBorderRadiuses(value_borderRadius_value_2)
            }
        }
        const value_onAppear  = value.onAppear
        let value_onAppear_type : int32 = RuntimeType.UNDEFINED
        value_onAppear_type = runtimeType(value_onAppear)
        valueSerializer.writeInt8(value_onAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAppear_type)) {
            const value_onAppear_value  = value_onAppear!
            valueSerializer.holdAndWriteCallback(value_onAppear_value)
        }
        const value_onDisappear  = value.onDisappear
        let value_onDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDisappear_type = runtimeType(value_onDisappear)
        valueSerializer.writeInt8(value_onDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDisappear_type)) {
            const value_onDisappear_value  = value_onDisappear!
            valueSerializer.holdAndWriteCallback(value_onDisappear_value)
        }
        const value_aboutToAppear  = value.aboutToAppear
        let value_aboutToAppear_type : int32 = RuntimeType.UNDEFINED
        value_aboutToAppear_type = runtimeType(value_aboutToAppear)
        valueSerializer.writeInt8(value_aboutToAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_aboutToAppear_type)) {
            const value_aboutToAppear_value  = value_aboutToAppear!
            valueSerializer.holdAndWriteCallback(value_aboutToAppear_value)
        }
        const value_aboutToDisappear  = value.aboutToDisappear
        let value_aboutToDisappear_type : int32 = RuntimeType.UNDEFINED
        value_aboutToDisappear_type = runtimeType(value_aboutToDisappear)
        valueSerializer.writeInt8(value_aboutToDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_aboutToDisappear_type)) {
            const value_aboutToDisappear_value  = value_aboutToDisappear!
            valueSerializer.holdAndWriteCallback(value_aboutToDisappear_value)
        }
        const value_layoutRegionMargin  = value.layoutRegionMargin
        let value_layoutRegionMargin_type : int32 = RuntimeType.UNDEFINED
        value_layoutRegionMargin_type = runtimeType(value_layoutRegionMargin)
        valueSerializer.writeInt8(value_layoutRegionMargin_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_layoutRegionMargin_type)) {
            const value_layoutRegionMargin_value  = value_layoutRegionMargin!
            valueSerializer.writePadding(value_layoutRegionMargin_value)
        }
        const value_previewAnimationOptions  = value.previewAnimationOptions
        let value_previewAnimationOptions_type : int32 = RuntimeType.UNDEFINED
        value_previewAnimationOptions_type = runtimeType(value_previewAnimationOptions)
        valueSerializer.writeInt8(value_previewAnimationOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewAnimationOptions_type)) {
            const value_previewAnimationOptions_value  = value_previewAnimationOptions!
            valueSerializer.writeContextMenuAnimationOptions(value_previewAnimationOptions_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_outlineColor  = value.outlineColor
        let value_outlineColor_type : int32 = RuntimeType.UNDEFINED
        value_outlineColor_type = runtimeType(value_outlineColor)
        valueSerializer.writeInt8(value_outlineColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_outlineColor_type)) {
            const value_outlineColor_value  = value_outlineColor!
            let value_outlineColor_value_type : int32 = RuntimeType.UNDEFINED
            value_outlineColor_value_type = runtimeType(value_outlineColor_value)
            if ((TypeChecker.isColor(value_outlineColor_value)) || (RuntimeType.NUMBER == value_outlineColor_value_type) || (RuntimeType.STRING == value_outlineColor_value_type) || (RuntimeType.OBJECT == value_outlineColor_value_type)) {
                valueSerializer.writeInt8(0 as int32)
                const value_outlineColor_value_0  = value_outlineColor_value as ResourceColor
                let value_outlineColor_value_0_type : int32 = RuntimeType.UNDEFINED
                value_outlineColor_value_0_type = runtimeType(value_outlineColor_value_0)
                if (TypeChecker.isColor(value_outlineColor_value_0)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_outlineColor_value_0_0  = value_outlineColor_value_0 as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_outlineColor_value_0_0))
                }
                else if (RuntimeType.NUMBER == value_outlineColor_value_0_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_outlineColor_value_0_1  = value_outlineColor_value_0 as number
                    valueSerializer.writeNumber(value_outlineColor_value_0_1)
                }
                else if (RuntimeType.STRING == value_outlineColor_value_0_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_outlineColor_value_0_2  = value_outlineColor_value_0 as string
                    valueSerializer.writeString(value_outlineColor_value_0_2)
                }
                else if (RuntimeType.OBJECT == value_outlineColor_value_0_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_outlineColor_value_0_3  = value_outlineColor_value_0 as Resource
                    valueSerializer.writeResource(value_outlineColor_value_0_3)
                }
            }
            else if (TypeChecker.isEdgeColors(value_outlineColor_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_outlineColor_value_1  = value_outlineColor_value as EdgeColors
                valueSerializer.writeEdgeColors(value_outlineColor_value_1)
            }
        }
        const value_outlineWidth  = value.outlineWidth
        let value_outlineWidth_type : int32 = RuntimeType.UNDEFINED
        value_outlineWidth_type = runtimeType(value_outlineWidth)
        valueSerializer.writeInt8(value_outlineWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_outlineWidth_type)) {
            const value_outlineWidth_value  = value_outlineWidth!
            let value_outlineWidth_value_type : int32 = RuntimeType.UNDEFINED
            value_outlineWidth_value_type = runtimeType(value_outlineWidth_value)
            if (((RuntimeType.NUMBER) == (value_outlineWidth_value_type)) || ((RuntimeType.STRING) == (value_outlineWidth_value_type)) || (((RuntimeType.OBJECT) == (value_outlineWidth_value_type)) && (TypeChecker.isResource(value_outlineWidth_value, false, false, false, false, false)))) {
                valueSerializer.writeInt8(0 as int32)
                const value_outlineWidth_value_0  = value_outlineWidth_value as Dimension
                valueSerializer.writeLength(value_outlineWidth_value_0)
            }
            else if (TypeChecker.isEdgeOutlineWidths(value_outlineWidth_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value_outlineWidth_value_1  = value_outlineWidth_value as EdgeOutlineWidths
                valueSerializer.writeEdgeOutlineWidths(value_outlineWidth_value_1)
            }
        }
        const value_hapticFeedbackMode  = value.hapticFeedbackMode
        let value_hapticFeedbackMode_type : int32 = RuntimeType.UNDEFINED
        value_hapticFeedbackMode_type = runtimeType(value_hapticFeedbackMode)
        valueSerializer.writeInt8(value_hapticFeedbackMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hapticFeedbackMode_type)) {
            const value_hapticFeedbackMode_value  = (value_hapticFeedbackMode as HapticFeedbackMode)
            valueSerializer.writeInt32(TypeChecker.HapticFeedbackMode_ToNumeric(value_hapticFeedbackMode_value))
        }
        const value_title  = value.title
        let value_title_type : int32 = RuntimeType.UNDEFINED
        value_title_type = runtimeType(value_title)
        valueSerializer.writeInt8(value_title_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_title_type)) {
            const value_title_value  = value_title!
            let value_title_value_type : int32 = RuntimeType.UNDEFINED
            value_title_value_type = runtimeType(value_title_value)
            if (RuntimeType.STRING == value_title_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_title_value_0  = value_title_value as string
                valueSerializer.writeString(value_title_value_0)
            }
            else if (RuntimeType.OBJECT == value_title_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_title_value_1  = value_title_value as Resource
                valueSerializer.writeResource(value_title_value_1)
            }
        }
        const value_showInSubWindow  = value.showInSubWindow
        let value_showInSubWindow_type : int32 = RuntimeType.UNDEFINED
        value_showInSubWindow_type = runtimeType(value_showInSubWindow)
        valueSerializer.writeInt8(value_showInSubWindow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showInSubWindow_type)) {
            const value_showInSubWindow_value  = value_showInSubWindow!
            valueSerializer.writeBoolean(value_showInSubWindow_value)
        }
    }
    writeNavigationMenuOptions(value: NavigationMenuOptions): void {
        let valueSerializer : Serializer = this
        const value_moreButtonOptions  = value.moreButtonOptions
        let value_moreButtonOptions_type : int32 = RuntimeType.UNDEFINED
        value_moreButtonOptions_type = runtimeType(value_moreButtonOptions)
        valueSerializer.writeInt8(value_moreButtonOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_moreButtonOptions_type)) {
            const value_moreButtonOptions_value  = value_moreButtonOptions!
            valueSerializer.writeMoreButtonOptions(value_moreButtonOptions_value)
        }
    }
    writeNavigationToolbarOptions(value: NavigationToolbarOptions): void {
        let valueSerializer : Serializer = this
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_moreButtonOptions  = value.moreButtonOptions
        let value_moreButtonOptions_type : int32 = RuntimeType.UNDEFINED
        value_moreButtonOptions_type = runtimeType(value_moreButtonOptions)
        valueSerializer.writeInt8(value_moreButtonOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_moreButtonOptions_type)) {
            const value_moreButtonOptions_value  = value_moreButtonOptions!
            valueSerializer.writeMoreButtonOptions(value_moreButtonOptions_value)
        }
        const value_barStyle  = value.barStyle
        let value_barStyle_type : int32 = RuntimeType.UNDEFINED
        value_barStyle_type = runtimeType(value_barStyle)
        valueSerializer.writeInt8(value_barStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_barStyle_type)) {
            const value_barStyle_value  = (value_barStyle as BarStyle)
            valueSerializer.writeInt32(TypeChecker.BarStyle_ToNumeric(value_barStyle_value))
        }
        const value_hideItemValue  = value.hideItemValue
        let value_hideItemValue_type : int32 = RuntimeType.UNDEFINED
        value_hideItemValue_type = runtimeType(value_hideItemValue)
        valueSerializer.writeInt8(value_hideItemValue_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hideItemValue_type)) {
            const value_hideItemValue_value  = value_hideItemValue!
            valueSerializer.writeBoolean(value_hideItemValue_value)
        }
    }
    writePopupButton(value: PopupButton): void {
        let valueSerializer : Serializer = this
        const value_value = value.value
        valueSerializer.writeString(value_value)
        const value_action = value.action
        valueSerializer.holdAndWriteCallback(CallbackTransformer.transformToCallbackVoid(value_action))
    }
    writePopupOptions(value: PopupOptions): void {
        let valueSerializer : Serializer = this
        const value_message  = value.message
        valueSerializer.writeString(value_message)

        const value_placement  = value.placement
        let value_placement_type : int32 = RuntimeType.UNDEFINED
        value_placement_type = runtimeType(value_placement)
        valueSerializer.writeInt8(value_placement_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_placement_type)) {
            const value_placement_value  = (value_placement as Placement)
            valueSerializer.writeInt32(TypeChecker.Placement_ToNumeric(value_placement_value))
        }
        const value_primaryButton  = value.primaryButton
        let value_primaryButton_type : int32 = RuntimeType.UNDEFINED
        value_primaryButton_type = runtimeType(value_primaryButton)
        valueSerializer.writeInt8(value_primaryButton_type)
        if ((RuntimeType.UNDEFINED) != (value_primaryButton_type)) {
            const value_primaryButton_value  = value_primaryButton!
            valueSerializer.writePopupButton(value_primaryButton_value)
        }
        const value_secondaryButton  = value.secondaryButton
        let value_secondaryButton_type : int32 = RuntimeType.UNDEFINED
        value_secondaryButton_type = runtimeType(value_secondaryButton)
        valueSerializer.writeInt8(value_secondaryButton_type)
        if ((RuntimeType.UNDEFINED) != (value_secondaryButton_type)) {
            const value_secondaryButton_value  = value_secondaryButton!
            valueSerializer.writePopupButton(value_secondaryButton_value)
        }
        const value_onStateChange  = value.onStateChange
        let value_onStateChange_type : int32 = RuntimeType.UNDEFINED
        value_onStateChange_type = runtimeType(value_onStateChange)
        valueSerializer.writeInt8(value_onStateChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onStateChange_type)) {
            const value_onStateChange_value  = value_onStateChange!
            valueSerializer.holdAndWriteCallback(value_onStateChange_value)
        }
        const value_arrowOffset  = value.arrowOffset
        let value_arrowOffset_type : int32 = RuntimeType.UNDEFINED
        value_arrowOffset_type = runtimeType(value_arrowOffset)
        valueSerializer.writeInt8(value_arrowOffset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowOffset_type)) {
            const value_arrowOffset_value  = value_arrowOffset!
            valueSerializer.writeLength(value_arrowOffset_value)
        }
        const value_showInSubWindow  = value.showInSubWindow
        let value_showInSubWindow_type : int32 = RuntimeType.UNDEFINED
        value_showInSubWindow_type = runtimeType(value_showInSubWindow)
        valueSerializer.writeInt8(value_showInSubWindow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_showInSubWindow_type)) {
            const value_showInSubWindow_value  = value_showInSubWindow!
            valueSerializer.writeBoolean(value_showInSubWindow_value)
        }
        const value_mask  = value.mask
        let value_mask_type : int32 = RuntimeType.UNDEFINED
        value_mask_type = runtimeType(value_mask)
        valueSerializer.writeInt8(value_mask_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_mask_type)) {
            const value_mask_value  = value_mask!
            let value_mask_value_type : int32 = RuntimeType.UNDEFINED
            value_mask_value_type = runtimeType(value_mask_value)
            if (RuntimeType.BOOLEAN == value_mask_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_mask_value_0  = value_mask_value as boolean
                valueSerializer.writeBoolean(value_mask_value_0)
            }
            else if (RuntimeType.OBJECT == value_mask_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_mask_value_1  = value_mask_value as PopupMaskType
                const value_mask_value_1_color  = value_mask_value_1.color
                let value_mask_value_1_color_type : int32 = RuntimeType.UNDEFINED
                value_mask_value_1_color_type = runtimeType(value_mask_value_1_color)
                if (TypeChecker.isColor(value_mask_value_1_color)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value_mask_value_1_color_0  = value_mask_value_1_color as Color
                    valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_mask_value_1_color_0))
                }
                else if (RuntimeType.NUMBER == value_mask_value_1_color_type) {
                    valueSerializer.writeInt8(1 as int32)
                    const value_mask_value_1_color_1  = value_mask_value_1_color as number
                    valueSerializer.writeNumber(value_mask_value_1_color_1)
                }
                else if (RuntimeType.STRING == value_mask_value_1_color_type) {
                    valueSerializer.writeInt8(2 as int32)
                    const value_mask_value_1_color_2  = value_mask_value_1_color as string
                    valueSerializer.writeString(value_mask_value_1_color_2)
                }
                else if (RuntimeType.OBJECT == value_mask_value_1_color_type) {
                    valueSerializer.writeInt8(3 as int32)
                    const value_mask_value_1_color_3  = value_mask_value_1_color as Resource
                    valueSerializer.writeResource(value_mask_value_1_color_3)
                }
            }
        }
        const value_messageOptions  = value.messageOptions
        let value_messageOptions_type : int32 = RuntimeType.UNDEFINED
        value_messageOptions_type = runtimeType(value_messageOptions)
        valueSerializer.writeInt8(value_messageOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_messageOptions_type)) {
            const value_messageOptions_value  = value_messageOptions!
            valueSerializer.writePopupMessageOptions(value_messageOptions_value)
        }
        const value_targetSpace  = value.targetSpace
        let value_targetSpace_type : int32 = RuntimeType.UNDEFINED
        value_targetSpace_type = runtimeType(value_targetSpace)
        valueSerializer.writeInt8(value_targetSpace_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_targetSpace_type)) {
            const value_targetSpace_value  = value_targetSpace!
            valueSerializer.writeLength(value_targetSpace_value)
        }
        const value_enableArrow  = value.enableArrow
        let value_enableArrow_type : int32 = RuntimeType.UNDEFINED
        value_enableArrow_type = runtimeType(value_enableArrow)
        valueSerializer.writeInt8(value_enableArrow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableArrow_type)) {
            const value_enableArrow_value  = value_enableArrow!
            valueSerializer.writeBoolean(value_enableArrow_value)
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writePosition(value_offset_value)
        }
        const value_popupColor  = value.popupColor
        let value_popupColor_type : int32 = RuntimeType.UNDEFINED
        value_popupColor_type = runtimeType(value_popupColor)
        valueSerializer.writeInt8(value_popupColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_popupColor_type)) {
            const value_popupColor_value  = value_popupColor!
            let value_popupColor_value_type : int32 = RuntimeType.UNDEFINED
            value_popupColor_value_type = runtimeType(value_popupColor_value)
            if (TypeChecker.isColor(value_popupColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_popupColor_value_0  = value_popupColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_popupColor_value_0))
            }
            else if (RuntimeType.STRING == value_popupColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_popupColor_value_1  = value_popupColor_value as string
                valueSerializer.writeString(value_popupColor_value_1)
            }
            else if (RuntimeType.OBJECT == value_popupColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_popupColor_value_2  = value_popupColor_value as Resource
                valueSerializer.writeResource(value_popupColor_value_2)
            }
            else if (RuntimeType.NUMBER == value_popupColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_popupColor_value_3  = value_popupColor_value as number
                valueSerializer.writeNumber(value_popupColor_value_3)
            }
        }
        const value_autoCancel  = value.autoCancel
        let value_autoCancel_type : int32 = RuntimeType.UNDEFINED
        value_autoCancel_type = runtimeType(value_autoCancel)
        valueSerializer.writeInt8(value_autoCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_autoCancel_type)) {
            const value_autoCancel_value  = value_autoCancel!
            valueSerializer.writeBoolean(value_autoCancel_value)
        }
        const value_width  = value.width
        let value_width_type : int32 = RuntimeType.UNDEFINED
        value_width_type = runtimeType(value_width)
        valueSerializer.writeInt8(value_width_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_width_type)) {
            const value_width_value  = value_width!
            valueSerializer.writeLength(value_width_value)
        }
        const value_arrowPointPosition  = value.arrowPointPosition
        let value_arrowPointPosition_type : int32 = RuntimeType.UNDEFINED
        value_arrowPointPosition_type = runtimeType(value_arrowPointPosition)
        valueSerializer.writeInt8(value_arrowPointPosition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowPointPosition_type)) {
            const value_arrowPointPosition_value  = (value_arrowPointPosition as ArrowPointPosition)
            valueSerializer.writeInt32(TypeChecker.ArrowPointPosition_ToNumeric(value_arrowPointPosition_value))
        }
        const value_arrowWidth  = value.arrowWidth
        let value_arrowWidth_type : int32 = RuntimeType.UNDEFINED
        value_arrowWidth_type = runtimeType(value_arrowWidth)
        valueSerializer.writeInt8(value_arrowWidth_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowWidth_type)) {
            const value_arrowWidth_value  = value_arrowWidth!
            valueSerializer.writeLength(value_arrowWidth_value)
        }
        const value_arrowHeight  = value.arrowHeight
        let value_arrowHeight_type : int32 = RuntimeType.UNDEFINED
        value_arrowHeight_type = runtimeType(value_arrowHeight)
        valueSerializer.writeInt8(value_arrowHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_arrowHeight_type)) {
            const value_arrowHeight_value  = value_arrowHeight!
            valueSerializer.writeLength(value_arrowHeight_value)
        }
        const value_radius  = value.radius
        let value_radius_type : int32 = RuntimeType.UNDEFINED
        value_radius_type = runtimeType(value_radius)
        valueSerializer.writeInt8(value_radius_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_radius_type)) {
            const value_radius_value  = value_radius!
            valueSerializer.writeLength(value_radius_value)
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_transition  = value.transition
        let value_transition_type : int32 = RuntimeType.UNDEFINED
        value_transition_type = runtimeType(value_transition)
        valueSerializer.writeInt8(value_transition_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_transition_type)) {
            const value_transition_value  = value_transition!
            valueSerializer.writeTransitionEffect(value_transition_value)
        }
        const value_onWillDismiss  = value.onWillDismiss
        let value_onWillDismiss_type : int32 = RuntimeType.UNDEFINED
        value_onWillDismiss_type = runtimeType(value_onWillDismiss)
        valueSerializer.writeInt8(value_onWillDismiss_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDismiss_type)) {
            const value_onWillDismiss_value  = value_onWillDismiss!
            let value_onWillDismiss_value_type : int32 = RuntimeType.UNDEFINED
            value_onWillDismiss_value_type = runtimeType(value_onWillDismiss_value)
            if (RuntimeType.BOOLEAN == value_onWillDismiss_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_onWillDismiss_value_0  = value_onWillDismiss_value as boolean
                valueSerializer.writeBoolean(value_onWillDismiss_value_0)
            }
            else if (RuntimeType.FUNCTION == value_onWillDismiss_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_onWillDismiss_value_1  = value_onWillDismiss_value as ((parameter: DismissPopupAction) => void)
                valueSerializer.holdAndWriteCallback(value_onWillDismiss_value_1)
            }
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_followTransformOfTarget  = value.followTransformOfTarget
        let value_followTransformOfTarget_type : int32 = RuntimeType.UNDEFINED
        value_followTransformOfTarget_type = runtimeType(value_followTransformOfTarget)
        valueSerializer.writeInt8(value_followTransformOfTarget_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_followTransformOfTarget_type)) {
            const value_followTransformOfTarget_value  = value_followTransformOfTarget!
            valueSerializer.writeBoolean(value_followTransformOfTarget_value)
        }
        const value_keyboardAvoidMode  = value.keyboardAvoidMode
        let value_keyboardAvoidMode_type : int32 = RuntimeType.UNDEFINED
        value_keyboardAvoidMode_type = runtimeType(value_keyboardAvoidMode)
        valueSerializer.writeInt8(value_keyboardAvoidMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_keyboardAvoidMode_type)) {
            const value_keyboardAvoidMode_value  = (value_keyboardAvoidMode as KeyboardAvoidMode)
            valueSerializer.writeInt32(TypeChecker.KeyboardAvoidMode_ToNumeric(value_keyboardAvoidMode_value))
        }
    }
    writeRichEditorImageSpanOptions(value: RichEditorImageSpanOptions): void {
        let valueSerializer : Serializer = this
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeNumber(value_offset_value)
        }
        const value_imageStyle  = value.imageStyle
        let value_imageStyle_type : int32 = RuntimeType.UNDEFINED
        value_imageStyle_type = runtimeType(value_imageStyle)
        valueSerializer.writeInt8(value_imageStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_imageStyle_type)) {
            const value_imageStyle_value  = value_imageStyle!
            valueSerializer.writeRichEditorImageSpanStyle(value_imageStyle_value)
        }
        const value_gesture  = value.gesture
        let value_gesture_type : int32 = RuntimeType.UNDEFINED
        value_gesture_type = runtimeType(value_gesture)
        valueSerializer.writeInt8(value_gesture_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gesture_type)) {
            const value_gesture_value  = value_gesture!
            valueSerializer.writeRichEditorGesture(value_gesture_value)
        }
        const value_onHover  = value.onHover
        let value_onHover_type : int32 = RuntimeType.UNDEFINED
        value_onHover_type = runtimeType(value_onHover)
        valueSerializer.writeInt8(value_onHover_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onHover_type)) {
            const value_onHover_value  = value_onHover!
            valueSerializer.holdAndWriteCallback(value_onHover_value)
        }
    }
    writeRichEditorImageSpanResult(value: RichEditorImageSpanResult): void {
        let valueSerializer : Serializer = this
        const value_spanPosition  = value.spanPosition
        valueSerializer.writeRichEditorSpanPosition(value_spanPosition)
        const value_valuePixelMap  = value.valuePixelMap
        let value_valuePixelMap_type : int32 = RuntimeType.UNDEFINED
        value_valuePixelMap_type = runtimeType(value_valuePixelMap)
        valueSerializer.writeInt8(value_valuePixelMap_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_valuePixelMap_type)) {
            const value_valuePixelMap_value  = value_valuePixelMap!
            valueSerializer.writePixelMap(value_valuePixelMap_value)
        }
        const value_valueResourceStr  = value.valueResourceStr
        let value_valueResourceStr_type : int32 = RuntimeType.UNDEFINED
        value_valueResourceStr_type = runtimeType(value_valueResourceStr)
        valueSerializer.writeInt8(value_valueResourceStr_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_valueResourceStr_type)) {
            const value_valueResourceStr_value  = value_valueResourceStr!
            let value_valueResourceStr_value_type : int32 = RuntimeType.UNDEFINED
            value_valueResourceStr_value_type = runtimeType(value_valueResourceStr_value)
            if (RuntimeType.STRING == value_valueResourceStr_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_valueResourceStr_value_0  = value_valueResourceStr_value as string
                valueSerializer.writeString(value_valueResourceStr_value_0)
            }
            else if (RuntimeType.OBJECT == value_valueResourceStr_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_valueResourceStr_value_1  = value_valueResourceStr_value as Resource
                valueSerializer.writeResource(value_valueResourceStr_value_1)
            }
        }
        const value_imageStyle  = value.imageStyle
        valueSerializer.writeRichEditorImageSpanStyleResult(value_imageStyle)
        const value_offsetInSpan  = value.offsetInSpan
        const value_offsetInSpan_0  = value_offsetInSpan[0]
        valueSerializer.writeNumber(value_offsetInSpan_0)
        const value_offsetInSpan_1  = value_offsetInSpan[1]
        valueSerializer.writeNumber(value_offsetInSpan_1)
    }
    writeRichEditorTextSpanOptions(value: RichEditorTextSpanOptions): void {
        let valueSerializer : Serializer = this
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeNumber(value_offset_value)
        }
        const value_style  = value.style
        let value_style_type : int32 = RuntimeType.UNDEFINED
        value_style_type = runtimeType(value_style)
        valueSerializer.writeInt8(value_style_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_style_type)) {
            const value_style_value  = value_style!
            valueSerializer.writeRichEditorTextStyle(value_style_value)
        }
        const value_paragraphStyle  = value.paragraphStyle
        let value_paragraphStyle_type : int32 = RuntimeType.UNDEFINED
        value_paragraphStyle_type = runtimeType(value_paragraphStyle)
        valueSerializer.writeInt8(value_paragraphStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_paragraphStyle_type)) {
            const value_paragraphStyle_value  = value_paragraphStyle!
            valueSerializer.writeRichEditorParagraphStyle(value_paragraphStyle_value)
        }
        const value_gesture  = value.gesture
        let value_gesture_type : int32 = RuntimeType.UNDEFINED
        value_gesture_type = runtimeType(value_gesture)
        valueSerializer.writeInt8(value_gesture_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_gesture_type)) {
            const value_gesture_value  = value_gesture!
            valueSerializer.writeRichEditorGesture(value_gesture_value)
        }
        const value_urlStyle  = value.urlStyle
        let value_urlStyle_type : int32 = RuntimeType.UNDEFINED
        value_urlStyle_type = runtimeType(value_urlStyle)
        valueSerializer.writeInt8(value_urlStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_urlStyle_type)) {
            const value_urlStyle_value  = value_urlStyle!
            valueSerializer.writeRichEditorUrlStyle(value_urlStyle_value)
        }
    }
    writeRichEditorTextSpanResult(value: RichEditorTextSpanResult): void {
        let valueSerializer : Serializer = this
        const value_spanPosition  = value.spanPosition
        valueSerializer.writeRichEditorSpanPosition(value_spanPosition)
        const value_value  = value.value
        valueSerializer.writeString(value_value)
        const value_textStyle  = value.textStyle
        valueSerializer.writeRichEditorTextStyleResult(value_textStyle)
        const value_offsetInSpan  = value.offsetInSpan
        const value_offsetInSpan_0  = value_offsetInSpan[0]
        valueSerializer.writeNumber(value_offsetInSpan_0)
        const value_offsetInSpan_1  = value_offsetInSpan[1]
        valueSerializer.writeNumber(value_offsetInSpan_1)
        const value_symbolSpanStyle  = value.symbolSpanStyle
        let value_symbolSpanStyle_type : int32 = RuntimeType.UNDEFINED
        value_symbolSpanStyle_type = runtimeType(value_symbolSpanStyle)
        valueSerializer.writeInt8(value_symbolSpanStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_symbolSpanStyle_type)) {
            const value_symbolSpanStyle_value  = value_symbolSpanStyle!
            valueSerializer.writeRichEditorSymbolSpanStyle(value_symbolSpanStyle_value)
        }
        const value_valueResource  = value.valueResource
        let value_valueResource_type : int32 = RuntimeType.UNDEFINED
        value_valueResource_type = runtimeType(value_valueResource)
        valueSerializer.writeInt8(value_valueResource_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_valueResource_type)) {
            const value_valueResource_value  = value_valueResource!
            valueSerializer.writeResource(value_valueResource_value)
        }
        const value_paragraphStyle  = value.paragraphStyle
        let value_paragraphStyle_type : int32 = RuntimeType.UNDEFINED
        value_paragraphStyle_type = runtimeType(value_paragraphStyle)
        valueSerializer.writeInt8(value_paragraphStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_paragraphStyle_type)) {
            const value_paragraphStyle_value  = value_paragraphStyle!
            valueSerializer.writeRichEditorParagraphStyle(value_paragraphStyle_value)
        }
        const value_previewText  = value.previewText
        let value_previewText_type : int32 = RuntimeType.UNDEFINED
        value_previewText_type = runtimeType(value_previewText)
        valueSerializer.writeInt8(value_previewText_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_previewText_type)) {
            const value_previewText_value  = value_previewText!
            valueSerializer.writeString(value_previewText_value)
        }
        const value_urlStyle  = value.urlStyle
        let value_urlStyle_type : int32 = RuntimeType.UNDEFINED
        value_urlStyle_type = runtimeType(value_urlStyle)
        valueSerializer.writeInt8(value_urlStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_urlStyle_type)) {
            const value_urlStyle_value  = value_urlStyle!
            valueSerializer.writeRichEditorUrlStyle(value_urlStyle_value)
        }
    }
    writeSpanStyle(value: SpanStyle): void {
        let valueSerializer : Serializer = this
        const value_start  = value.start
        valueSerializer.writeNumber(value_start)
        const value_length  = value.length
        valueSerializer.writeNumber(value_length)
        const value_styledKey  = value.styledKey
        valueSerializer.writeInt32(TypeChecker.StyledStringKey_ToNumeric(value_styledKey))
        const value_styledValue  = value.styledValue
        let value_styledValue_type : int32 = RuntimeType.UNDEFINED
        value_styledValue_type = runtimeType(value_styledValue)
        if (TypeChecker.isTextStyle_styled_string(value_styledValue, false, false, false, false, false)) {
            valueSerializer.writeInt8(0 as int32)
            const value_styledValue_0  = value_styledValue as TextStyle
            valueSerializer.writeTextStyle_styled_string(value_styledValue_0)
        }
        else if (TypeChecker.isDecorationStyle(value_styledValue, false, false, false)) {
            valueSerializer.writeInt8(1 as int32)
            const value_styledValue_1  = value_styledValue as DecorationStyle
            valueSerializer.writeDecorationStyle(value_styledValue_1)
        }
        else if (TypeChecker.isBaselineOffsetStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(2 as int32)
            const value_styledValue_2  = value_styledValue as BaselineOffsetStyle
            valueSerializer.writeBaselineOffsetStyle(value_styledValue_2)
        }
        else if (TypeChecker.isLetterSpacingStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(3 as int32)
            const value_styledValue_3  = value_styledValue as LetterSpacingStyle
            valueSerializer.writeLetterSpacingStyle(value_styledValue_3)
        }
        else if (TypeChecker.isTextShadowStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(4 as int32)
            const value_styledValue_4  = value_styledValue as TextShadowStyle
            valueSerializer.writeTextShadowStyle(value_styledValue_4)
        }
        else if (TypeChecker.isGestureStyle(value_styledValue)) {
            valueSerializer.writeInt8(5 as int32)
            const value_styledValue_5  = value_styledValue as GestureStyle
            valueSerializer.writeGestureStyle(value_styledValue_5)
        }
        else if (TypeChecker.isImageAttachment(value_styledValue, false, false, false, false, false, false)) {
            valueSerializer.writeInt8(6 as int32)
            const value_styledValue_6  = value_styledValue as ImageAttachment
            valueSerializer.writeImageAttachment(value_styledValue_6)
        }
        else if (TypeChecker.isParagraphStyle(value_styledValue, false, false, false, false, false, false, false)) {
            valueSerializer.writeInt8(7 as int32)
            const value_styledValue_7  = value_styledValue as ParagraphStyle
            valueSerializer.writeParagraphStyle(value_styledValue_7)
        }
        else if (TypeChecker.isLineHeightStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(8 as int32)
            const value_styledValue_8  = value_styledValue as LineHeightStyle
            valueSerializer.writeLineHeightStyle(value_styledValue_8)
        }
        else if (TypeChecker.isUrlStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(9 as int32)
            const value_styledValue_9  = value_styledValue as UrlStyle
            valueSerializer.writeUrlStyle(value_styledValue_9)
        }
        else if (TypeChecker.isCustomSpan(value_styledValue)) {
            valueSerializer.writeInt8(10 as int32)
            const value_styledValue_10  = value_styledValue as CustomSpan
            valueSerializer.writeCustomSpan(value_styledValue_10)
        }
        else if (RuntimeType.OBJECT == value_styledValue_type) {
            valueSerializer.writeInt8(11 as int32)
            const value_styledValue_11  = value_styledValue as UserDataSpan
            valueSerializer.writeUserDataSpan(value_styledValue_11)
        }
        else if (TypeChecker.isBackgroundColorStyle(value_styledValue, false)) {
            valueSerializer.writeInt8(12 as int32)
            const value_styledValue_12  = value_styledValue as BackgroundColorStyle
            valueSerializer.writeBackgroundColorStyle(value_styledValue_12)
        }
    }
    writeSubTabBarStyle(value: SubTabBarStyle): void {
        let valueSerializer : Serializer = this
        const value__content  = value._content
        let value__content_type : int32 = RuntimeType.UNDEFINED
        value__content_type = runtimeType(value__content)
        valueSerializer.writeInt8(value__content_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__content_type)) {
            const value__content_value  = value__content!
            let value__content_value_type : int32 = RuntimeType.UNDEFINED
            value__content_value_type = runtimeType(value__content_value)
            if (RuntimeType.STRING == value__content_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value__content_value_0  = value__content_value as string
                valueSerializer.writeString(value__content_value_0)
            }
            else if (TypeChecker.isResource(value__content_value, false, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value__content_value_1  = value__content_value as Resource
                valueSerializer.writeResource(value__content_value_1)
            }
            else if (TypeChecker.isComponentContent(value__content_value)) {
                valueSerializer.writeInt8(2 as int32)
                const value__content_value_2  = value__content_value as ComponentContent
                valueSerializer.writeComponentContent(value__content_value_2)
            }
        }
        const value__indicator  = value._indicator
        let value__indicator_type : int32 = RuntimeType.UNDEFINED
        value__indicator_type = runtimeType(value__indicator)
        valueSerializer.writeInt8(value__indicator_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__indicator_type)) {
            const value__indicator_value  = value__indicator!
            valueSerializer.writeSubTabBarIndicatorStyle(value__indicator_value)
        }
        const value__selectedMode  = value._selectedMode
        let value__selectedMode_type : int32 = RuntimeType.UNDEFINED
        value__selectedMode_type = runtimeType(value__selectedMode)
        valueSerializer.writeInt8(value__selectedMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__selectedMode_type)) {
            const value__selectedMode_value  = (value__selectedMode as SelectedMode)
            valueSerializer.writeInt32(TypeChecker.SelectedMode_ToNumeric(value__selectedMode_value))
        }
        const value__board  = value._board
        let value__board_type : int32 = RuntimeType.UNDEFINED
        value__board_type = runtimeType(value__board)
        valueSerializer.writeInt8(value__board_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__board_type)) {
            const value__board_value  = value__board!
            valueSerializer.writeBoardStyle(value__board_value)
        }
        const value__labelStyle  = value._labelStyle
        let value__labelStyle_type : int32 = RuntimeType.UNDEFINED
        value__labelStyle_type = runtimeType(value__labelStyle)
        valueSerializer.writeInt8(value__labelStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__labelStyle_type)) {
            const value__labelStyle_value  = value__labelStyle!
            valueSerializer.writeTabBarLabelStyle(value__labelStyle_value)
        }
        const value__padding  = value._padding
        let value__padding_type : int32 = RuntimeType.UNDEFINED
        value__padding_type = runtimeType(value__padding)
        valueSerializer.writeInt8(value__padding_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__padding_type)) {
            const value__padding_value  = value__padding!
            let value__padding_value_type : int32 = RuntimeType.UNDEFINED
            value__padding_value_type = runtimeType(value__padding_value)
            if ((TypeChecker.isPadding(value__padding_value, false, false, false, false)) || (((RuntimeType.NUMBER) == (value__padding_value_type)) || ((RuntimeType.STRING) == (value__padding_value_type)) || (((RuntimeType.OBJECT) == (value__padding_value_type)) && (TypeChecker.isResource(value__padding_value, false, false, false, false, false))))) {
                valueSerializer.writeInt8(0 as int32)
                const value__padding_value_0  = value__padding_value as Padding | Dimension
                let value__padding_value_0_type : int32 = RuntimeType.UNDEFINED
                value__padding_value_0_type = runtimeType(value__padding_value_0)
                if (TypeChecker.isPadding(value__padding_value_0, false, false, false, false)) {
                    valueSerializer.writeInt8(0 as int32)
                    const value__padding_value_0_0  = value__padding_value_0 as Padding
                    const value__padding_value_0_0_top  = value__padding_value_0_0.top
                    let value__padding_value_0_0_top_type : int32 = RuntimeType.UNDEFINED
                    value__padding_value_0_0_top_type = runtimeType(value__padding_value_0_0_top)
                    valueSerializer.writeInt8(value__padding_value_0_0_top_type as int32)
                    if ((RuntimeType.UNDEFINED) != (value__padding_value_0_0_top_type)) {
                        const value__padding_value_0_0_top_value  = value__padding_value_0_0_top!
                        valueSerializer.writeLength(value__padding_value_0_0_top_value)
                    }
                    const value__padding_value_0_0_right  = value__padding_value_0_0.right
                    let value__padding_value_0_0_right_type : int32 = RuntimeType.UNDEFINED
                    value__padding_value_0_0_right_type = runtimeType(value__padding_value_0_0_right)
                    valueSerializer.writeInt8(value__padding_value_0_0_right_type as int32)
                    if ((RuntimeType.UNDEFINED) != (value__padding_value_0_0_right_type)) {
                        const value__padding_value_0_0_right_value  = value__padding_value_0_0_right!
                        valueSerializer.writeLength(value__padding_value_0_0_right_value)
                    }
                    const value__padding_value_0_0_bottom  = value__padding_value_0_0.bottom
                    let value__padding_value_0_0_bottom_type : int32 = RuntimeType.UNDEFINED
                    value__padding_value_0_0_bottom_type = runtimeType(value__padding_value_0_0_bottom)
                    valueSerializer.writeInt8(value__padding_value_0_0_bottom_type as int32)
                    if ((RuntimeType.UNDEFINED) != (value__padding_value_0_0_bottom_type)) {
                        const value__padding_value_0_0_bottom_value  = value__padding_value_0_0_bottom!
                        valueSerializer.writeLength(value__padding_value_0_0_bottom_value)
                    }
                    const value__padding_value_0_0_left  = value__padding_value_0_0.left
                    let value__padding_value_0_0_left_type : int32 = RuntimeType.UNDEFINED
                    value__padding_value_0_0_left_type = runtimeType(value__padding_value_0_0_left)
                    valueSerializer.writeInt8(value__padding_value_0_0_left_type as int32)
                    if ((RuntimeType.UNDEFINED) != (value__padding_value_0_0_left_type)) {
                        const value__padding_value_0_0_left_value  = value__padding_value_0_0_left!
                        valueSerializer.writeLength(value__padding_value_0_0_left_value)
                    }
                }
                else if (((RuntimeType.NUMBER) == (value__padding_value_0_type)) || ((RuntimeType.STRING) == (value__padding_value_0_type)) || (((RuntimeType.OBJECT) == (value__padding_value_0_type)) && (TypeChecker.isResource(value__padding_value_0, false, false, false, false, false)))) {
                    valueSerializer.writeInt8(1 as int32)
                    const value__padding_value_0_1  = value__padding_value_0 as Dimension
                    valueSerializer.writeLength(value__padding_value_0_1)
                }
            }
            else if (TypeChecker.isLocalizedPadding(value__padding_value, false, false, false, false)) {
                valueSerializer.writeInt8(1 as int32)
                const value__padding_value_1  = value__padding_value as LocalizedPadding
                valueSerializer.writeLocalizedPadding(value__padding_value_1)
            }
        }
        const value__id  = value._id
        let value__id_type : int32 = RuntimeType.UNDEFINED
        value__id_type = runtimeType(value__id)
        valueSerializer.writeInt8(value__id_type as int32)
        if ((RuntimeType.UNDEFINED) != (value__id_type)) {
            const value__id_value  = value__id!
            valueSerializer.writeString(value__id_value)
        }
    }
    writeTextPickerDialogOptions(value: TextPickerDialogOptions): void {
        let valueSerializer : Serializer = this
        const value_range  = value.range
        let value_range_type : int32 = RuntimeType.UNDEFINED
        value_range_type = runtimeType(value_range)
        if (((RuntimeType.OBJECT) == (value_range_type)) && (TypeChecker.isArray_String(value_range))) {
            valueSerializer.writeInt8(0 as int32)
            const value_range_0  = value_range as Array<string>
            valueSerializer.writeInt32(value_range_0.length as int32)
            for (let i = 0; i < value_range_0.length; i++) {
                const value_range_0_element : string = value_range_0[i]
                valueSerializer.writeString(value_range_0_element)
            }
        }
        else if (((RuntimeType.OBJECT) == (value_range_type)) && (TypeChecker.isArray_Array_String(value_range))) {
            valueSerializer.writeInt8(1 as int32)
            const value_range_1  = value_range as Array<Array<string>>
            valueSerializer.writeInt32(value_range_1.length as int32)
            for (let i = 0; i < value_range_1.length; i++) {
                const value_range_1_element : Array<string> = value_range_1[i]
                valueSerializer.writeInt32(value_range_1_element.length as int32)
                for (let i = 0; i < value_range_1_element.length; i++) {
                    const value_range_1_element_element : string = value_range_1_element[i]
                    valueSerializer.writeString(value_range_1_element_element)
                }
            }
        }
        else if (TypeChecker.isResource(value_range, false, false, false, false, false)) {
            valueSerializer.writeInt8(2 as int32)
            const value_range_2  = value_range as Resource
            valueSerializer.writeResource(value_range_2)
        }
        else if (((RuntimeType.OBJECT) == (value_range_type)) && (TypeChecker.isArray_TextPickerRangeContent(value_range))) {
            valueSerializer.writeInt8(3 as int32)
            const value_range_3  = value_range as Array<TextPickerRangeContent>
            valueSerializer.writeInt32(value_range_3.length as int32)
            for (let i = 0; i < value_range_3.length; i++) {
                const value_range_3_element : TextPickerRangeContent = value_range_3[i]
                valueSerializer.writeTextPickerRangeContent(value_range_3_element)
            }
        }
        else if (((RuntimeType.OBJECT) == (value_range_type)) && (TypeChecker.isArray_TextCascadePickerRangeContent(value_range))) {
            valueSerializer.writeInt8(4 as int32)
            const value_range_4  = value_range as Array<TextCascadePickerRangeContent>
            valueSerializer.writeInt32(value_range_4.length as int32)
            for (let i = 0; i < value_range_4.length; i++) {
                const value_range_4_element : TextCascadePickerRangeContent = value_range_4[i]
                valueSerializer.writeTextCascadePickerRangeContent(value_range_4_element)
            }
        }
        const value_value  = value.value
        let value_value_type : int32 = RuntimeType.UNDEFINED
        value_value_type = runtimeType(value_value)
        valueSerializer.writeInt8(value_value_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_value_type)) {
            const value_value_value  = value_value!
            let value_value_value_type : int32 = RuntimeType.UNDEFINED
            value_value_value_type = runtimeType(value_value_value)
            if (RuntimeType.STRING == value_value_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_value_value_0  = value_value_value as string
                valueSerializer.writeString(value_value_value_0)
            }
            else if (RuntimeType.OBJECT == value_value_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_value_value_1  = value_value_value as Array<string>
                valueSerializer.writeInt32(value_value_value_1.length as int32)
                for (let i = 0; i < value_value_value_1.length; i++) {
                    const value_value_value_1_element : string = value_value_value_1[i]
                    valueSerializer.writeString(value_value_value_1_element)
                }
            }
        }
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            let value_selected_value_type : int32 = RuntimeType.UNDEFINED
            value_selected_value_type = runtimeType(value_selected_value)
            if (RuntimeType.NUMBER == value_selected_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_selected_value_0  = value_selected_value as number
                valueSerializer.writeNumber(value_selected_value_0)
            }
            else if (RuntimeType.OBJECT == value_selected_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_selected_value_1  = value_selected_value as Array<number>
                valueSerializer.writeInt32(value_selected_value_1.length as int32)
                for (let i = 0; i < value_selected_value_1.length; i++) {
                    const value_selected_value_1_element : number = value_selected_value_1[i]
                    valueSerializer.writeNumber(value_selected_value_1_element)
                }
            }
        }
        const value_columnWidths  = value.columnWidths
        let value_columnWidths_type : int32 = RuntimeType.UNDEFINED
        value_columnWidths_type = runtimeType(value_columnWidths)
        valueSerializer.writeInt8(value_columnWidths_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_columnWidths_type)) {
            const value_columnWidths_value  = value_columnWidths!
            valueSerializer.writeInt32(value_columnWidths_value.length as int32)
            for (let i = 0; i < value_columnWidths_value.length; i++) {
                const value_columnWidths_value_element : LengthMetrics = value_columnWidths_value[i]
                valueSerializer.writeLengthMetrics(value_columnWidths_value_element)
            }
        }
        const value_defaultPickerItemHeight  = value.defaultPickerItemHeight
        let value_defaultPickerItemHeight_type : int32 = RuntimeType.UNDEFINED
        value_defaultPickerItemHeight_type = runtimeType(value_defaultPickerItemHeight)
        valueSerializer.writeInt8(value_defaultPickerItemHeight_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_defaultPickerItemHeight_type)) {
            const value_defaultPickerItemHeight_value  = value_defaultPickerItemHeight!
            let value_defaultPickerItemHeight_value_type : int32 = RuntimeType.UNDEFINED
            value_defaultPickerItemHeight_value_type = runtimeType(value_defaultPickerItemHeight_value)
            if (RuntimeType.NUMBER == value_defaultPickerItemHeight_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_defaultPickerItemHeight_value_0  = value_defaultPickerItemHeight_value as number
                valueSerializer.writeNumber(value_defaultPickerItemHeight_value_0)
            }
            else if (RuntimeType.STRING == value_defaultPickerItemHeight_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_defaultPickerItemHeight_value_1  = value_defaultPickerItemHeight_value as string
                valueSerializer.writeString(value_defaultPickerItemHeight_value_1)
            }
        }
        const value_canLoop  = value.canLoop
        let value_canLoop_type : int32 = RuntimeType.UNDEFINED
        value_canLoop_type = runtimeType(value_canLoop)
        valueSerializer.writeInt8(value_canLoop_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_canLoop_type)) {
            const value_canLoop_value  = value_canLoop!
            valueSerializer.writeBoolean(value_canLoop_value)
        }
        const value_disappearTextStyle  = value.disappearTextStyle
        let value_disappearTextStyle_type : int32 = RuntimeType.UNDEFINED
        value_disappearTextStyle_type = runtimeType(value_disappearTextStyle)
        valueSerializer.writeInt8(value_disappearTextStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disappearTextStyle_type)) {
            const value_disappearTextStyle_value  = value_disappearTextStyle!
            valueSerializer.writePickerTextStyle(value_disappearTextStyle_value)
        }
        const value_textStyle  = value.textStyle
        let value_textStyle_type : int32 = RuntimeType.UNDEFINED
        value_textStyle_type = runtimeType(value_textStyle)
        valueSerializer.writeInt8(value_textStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textStyle_type)) {
            const value_textStyle_value  = value_textStyle!
            valueSerializer.writePickerTextStyle(value_textStyle_value)
        }
        const value_acceptButtonStyle  = value.acceptButtonStyle
        let value_acceptButtonStyle_type : int32 = RuntimeType.UNDEFINED
        value_acceptButtonStyle_type = runtimeType(value_acceptButtonStyle)
        valueSerializer.writeInt8(value_acceptButtonStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_acceptButtonStyle_type)) {
            const value_acceptButtonStyle_value  = value_acceptButtonStyle!
            valueSerializer.writePickerDialogButtonStyle(value_acceptButtonStyle_value)
        }
        const value_cancelButtonStyle  = value.cancelButtonStyle
        let value_cancelButtonStyle_type : int32 = RuntimeType.UNDEFINED
        value_cancelButtonStyle_type = runtimeType(value_cancelButtonStyle)
        valueSerializer.writeInt8(value_cancelButtonStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cancelButtonStyle_type)) {
            const value_cancelButtonStyle_value  = value_cancelButtonStyle!
            valueSerializer.writePickerDialogButtonStyle(value_cancelButtonStyle_value)
        }
        const value_selectedTextStyle  = value.selectedTextStyle
        let value_selectedTextStyle_type : int32 = RuntimeType.UNDEFINED
        value_selectedTextStyle_type = runtimeType(value_selectedTextStyle)
        valueSerializer.writeInt8(value_selectedTextStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selectedTextStyle_type)) {
            const value_selectedTextStyle_value  = value_selectedTextStyle!
            valueSerializer.writePickerTextStyle(value_selectedTextStyle_value)
        }
        const value_disableTextStyleAnimation  = value.disableTextStyleAnimation
        let value_disableTextStyleAnimation_type : int32 = RuntimeType.UNDEFINED
        value_disableTextStyleAnimation_type = runtimeType(value_disableTextStyleAnimation)
        valueSerializer.writeInt8(value_disableTextStyleAnimation_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disableTextStyleAnimation_type)) {
            const value_disableTextStyleAnimation_value  = value_disableTextStyleAnimation!
            valueSerializer.writeBoolean(value_disableTextStyleAnimation_value)
        }
        const value_defaultTextStyle  = value.defaultTextStyle
        let value_defaultTextStyle_type : int32 = RuntimeType.UNDEFINED
        value_defaultTextStyle_type = runtimeType(value_defaultTextStyle)
        valueSerializer.writeInt8(value_defaultTextStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_defaultTextStyle_type)) {
            const value_defaultTextStyle_value  = value_defaultTextStyle!
            valueSerializer.writeTextPickerTextStyle(value_defaultTextStyle_value)
        }
        const value_onAccept  = value.onAccept
        let value_onAccept_type : int32 = RuntimeType.UNDEFINED
        value_onAccept_type = runtimeType(value_onAccept)
        valueSerializer.writeInt8(value_onAccept_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAccept_type)) {
            const value_onAccept_value  = value_onAccept!
            valueSerializer.holdAndWriteCallback(value_onAccept_value)
        }
        const value_onCancel  = value.onCancel
        let value_onCancel_type : int32 = RuntimeType.UNDEFINED
        value_onCancel_type = runtimeType(value_onCancel)
        valueSerializer.writeInt8(value_onCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onCancel_type)) {
            const value_onCancel_value  = value_onCancel!
            valueSerializer.holdAndWriteCallback(value_onCancel_value)
        }
        const value_onChange  = value.onChange
        let value_onChange_type : int32 = RuntimeType.UNDEFINED
        value_onChange_type = runtimeType(value_onChange)
        valueSerializer.writeInt8(value_onChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onChange_type)) {
            const value_onChange_value  = value_onChange!
            valueSerializer.holdAndWriteCallback(value_onChange_value)
        }
        const value_onScrollStop  = value.onScrollStop
        let value_onScrollStop_type : int32 = RuntimeType.UNDEFINED
        value_onScrollStop_type = runtimeType(value_onScrollStop)
        valueSerializer.writeInt8(value_onScrollStop_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onScrollStop_type)) {
            const value_onScrollStop_value  = value_onScrollStop!
            valueSerializer.holdAndWriteCallback(value_onScrollStop_value)
        }
        const value_onEnterSelectedArea  = value.onEnterSelectedArea
        let value_onEnterSelectedArea_type : int32 = RuntimeType.UNDEFINED
        value_onEnterSelectedArea_type = runtimeType(value_onEnterSelectedArea)
        valueSerializer.writeInt8(value_onEnterSelectedArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onEnterSelectedArea_type)) {
            const value_onEnterSelectedArea_value  = value_onEnterSelectedArea!
            valueSerializer.holdAndWriteCallback(value_onEnterSelectedArea_value)
        }
        const value_maskRect  = value.maskRect
        let value_maskRect_type : int32 = RuntimeType.UNDEFINED
        value_maskRect_type = runtimeType(value_maskRect)
        valueSerializer.writeInt8(value_maskRect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskRect_type)) {
            const value_maskRect_value  = value_maskRect!
            valueSerializer.writeRectangle(value_maskRect_value)
        }
        const value_alignment  = value.alignment
        let value_alignment_type : int32 = RuntimeType.UNDEFINED
        value_alignment_type = runtimeType(value_alignment)
        valueSerializer.writeInt8(value_alignment_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignment_type)) {
            const value_alignment_value  = (value_alignment as DialogAlignment)
            valueSerializer.writeInt32(TypeChecker.DialogAlignment_ToNumeric(value_alignment_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeOffset(value_offset_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_onDidAppear  = value.onDidAppear
        let value_onDidAppear_type : int32 = RuntimeType.UNDEFINED
        value_onDidAppear_type = runtimeType(value_onDidAppear)
        valueSerializer.writeInt8(value_onDidAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidAppear_type)) {
            const value_onDidAppear_value  = value_onDidAppear!
            valueSerializer.holdAndWriteCallback(value_onDidAppear_value)
        }
        const value_onDidDisappear  = value.onDidDisappear
        let value_onDidDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDidDisappear_type = runtimeType(value_onDidDisappear)
        valueSerializer.writeInt8(value_onDidDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidDisappear_type)) {
            const value_onDidDisappear_value  = value_onDidDisappear!
            valueSerializer.holdAndWriteCallback(value_onDidDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_enableHapticFeedback  = value.enableHapticFeedback
        let value_enableHapticFeedback_type : int32 = RuntimeType.UNDEFINED
        value_enableHapticFeedback_type = runtimeType(value_enableHapticFeedback)
        valueSerializer.writeInt8(value_enableHapticFeedback_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHapticFeedback_type)) {
            const value_enableHapticFeedback_value  = value_enableHapticFeedback!
            valueSerializer.writeBoolean(value_enableHapticFeedback_value)
        }
    }
    writeTimePickerDialogOptions(value: TimePickerDialogOptions): void {
        let valueSerializer : Serializer = this
        const value_selected  = value.selected
        let value_selected_type : int32 = RuntimeType.UNDEFINED
        value_selected_type = runtimeType(value_selected)
        valueSerializer.writeInt8(value_selected_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selected_type)) {
            const value_selected_value  = value_selected!
            valueSerializer.writeInt64((value_selected_value.getTime() as int64))
        }
        const value_format  = value.format
        let value_format_type : int32 = RuntimeType.UNDEFINED
        value_format_type = runtimeType(value_format)
        valueSerializer.writeInt8(value_format_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_format_type)) {
            const value_format_value  = (value_format as TimePickerFormat)
            valueSerializer.writeInt32(TypeChecker.TimePickerFormat_ToNumeric(value_format_value))
        }
        const value_start  = value.start
        let value_start_type : int32 = RuntimeType.UNDEFINED
        value_start_type = runtimeType(value_start)
        valueSerializer.writeInt8(value_start_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_start_type)) {
            const value_start_value  = value_start!
            valueSerializer.writeInt64((value_start_value.getTime() as int64))
        }
        const value_end  = value.end
        let value_end_type : int32 = RuntimeType.UNDEFINED
        value_end_type = runtimeType(value_end)
        valueSerializer.writeInt8(value_end_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_end_type)) {
            const value_end_value  = value_end!
            valueSerializer.writeInt64((value_end_value.getTime() as int64))
        }
        const value_useMilitaryTime  = value.useMilitaryTime
        let value_useMilitaryTime_type : int32 = RuntimeType.UNDEFINED
        value_useMilitaryTime_type = runtimeType(value_useMilitaryTime)
        valueSerializer.writeInt8(value_useMilitaryTime_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_useMilitaryTime_type)) {
            const value_useMilitaryTime_value  = value_useMilitaryTime!
            valueSerializer.writeBoolean(value_useMilitaryTime_value)
        }
        const value_disappearTextStyle  = value.disappearTextStyle
        let value_disappearTextStyle_type : int32 = RuntimeType.UNDEFINED
        value_disappearTextStyle_type = runtimeType(value_disappearTextStyle)
        valueSerializer.writeInt8(value_disappearTextStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_disappearTextStyle_type)) {
            const value_disappearTextStyle_value  = value_disappearTextStyle!
            valueSerializer.writePickerTextStyle(value_disappearTextStyle_value)
        }
        const value_textStyle  = value.textStyle
        let value_textStyle_type : int32 = RuntimeType.UNDEFINED
        value_textStyle_type = runtimeType(value_textStyle)
        valueSerializer.writeInt8(value_textStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_textStyle_type)) {
            const value_textStyle_value  = value_textStyle!
            valueSerializer.writePickerTextStyle(value_textStyle_value)
        }
        const value_acceptButtonStyle  = value.acceptButtonStyle
        let value_acceptButtonStyle_type : int32 = RuntimeType.UNDEFINED
        value_acceptButtonStyle_type = runtimeType(value_acceptButtonStyle)
        valueSerializer.writeInt8(value_acceptButtonStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_acceptButtonStyle_type)) {
            const value_acceptButtonStyle_value  = value_acceptButtonStyle!
            valueSerializer.writePickerDialogButtonStyle(value_acceptButtonStyle_value)
        }
        const value_cancelButtonStyle  = value.cancelButtonStyle
        let value_cancelButtonStyle_type : int32 = RuntimeType.UNDEFINED
        value_cancelButtonStyle_type = runtimeType(value_cancelButtonStyle)
        valueSerializer.writeInt8(value_cancelButtonStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_cancelButtonStyle_type)) {
            const value_cancelButtonStyle_value  = value_cancelButtonStyle!
            valueSerializer.writePickerDialogButtonStyle(value_cancelButtonStyle_value)
        }
        const value_selectedTextStyle  = value.selectedTextStyle
        let value_selectedTextStyle_type : int32 = RuntimeType.UNDEFINED
        value_selectedTextStyle_type = runtimeType(value_selectedTextStyle)
        valueSerializer.writeInt8(value_selectedTextStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_selectedTextStyle_type)) {
            const value_selectedTextStyle_value  = value_selectedTextStyle!
            valueSerializer.writePickerTextStyle(value_selectedTextStyle_value)
        }
        const value_maskRect  = value.maskRect
        let value_maskRect_type : int32 = RuntimeType.UNDEFINED
        value_maskRect_type = runtimeType(value_maskRect)
        valueSerializer.writeInt8(value_maskRect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_maskRect_type)) {
            const value_maskRect_value  = value_maskRect!
            valueSerializer.writeRectangle(value_maskRect_value)
        }
        const value_alignment  = value.alignment
        let value_alignment_type : int32 = RuntimeType.UNDEFINED
        value_alignment_type = runtimeType(value_alignment)
        valueSerializer.writeInt8(value_alignment_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_alignment_type)) {
            const value_alignment_value  = (value_alignment as DialogAlignment)
            valueSerializer.writeInt32(TypeChecker.DialogAlignment_ToNumeric(value_alignment_value))
        }
        const value_offset  = value.offset
        let value_offset_type : int32 = RuntimeType.UNDEFINED
        value_offset_type = runtimeType(value_offset)
        valueSerializer.writeInt8(value_offset_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_offset_type)) {
            const value_offset_value  = value_offset!
            valueSerializer.writeOffset(value_offset_value)
        }
        const value_onAccept  = value.onAccept
        let value_onAccept_type : int32 = RuntimeType.UNDEFINED
        value_onAccept_type = runtimeType(value_onAccept)
        valueSerializer.writeInt8(value_onAccept_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onAccept_type)) {
            const value_onAccept_value  = value_onAccept!
            valueSerializer.holdAndWriteCallback(value_onAccept_value)
        }
        const value_onCancel  = value.onCancel
        let value_onCancel_type : int32 = RuntimeType.UNDEFINED
        value_onCancel_type = runtimeType(value_onCancel)
        valueSerializer.writeInt8(value_onCancel_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onCancel_type)) {
            const value_onCancel_value  = value_onCancel!
            valueSerializer.holdAndWriteCallback(value_onCancel_value)
        }
        const value_onChange  = value.onChange
        let value_onChange_type : int32 = RuntimeType.UNDEFINED
        value_onChange_type = runtimeType(value_onChange)
        valueSerializer.writeInt8(value_onChange_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onChange_type)) {
            const value_onChange_value  = value_onChange!
            valueSerializer.holdAndWriteCallback(value_onChange_value)
        }
        const value_onEnterSelectedArea  = value.onEnterSelectedArea
        let value_onEnterSelectedArea_type : int32 = RuntimeType.UNDEFINED
        value_onEnterSelectedArea_type = runtimeType(value_onEnterSelectedArea)
        valueSerializer.writeInt8(value_onEnterSelectedArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onEnterSelectedArea_type)) {
            const value_onEnterSelectedArea_value  = value_onEnterSelectedArea!
            valueSerializer.holdAndWriteCallback(value_onEnterSelectedArea_value)
        }
        const value_backgroundColor  = value.backgroundColor
        let value_backgroundColor_type : int32 = RuntimeType.UNDEFINED
        value_backgroundColor_type = runtimeType(value_backgroundColor)
        valueSerializer.writeInt8(value_backgroundColor_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundColor_type)) {
            const value_backgroundColor_value  = value_backgroundColor!
            let value_backgroundColor_value_type : int32 = RuntimeType.UNDEFINED
            value_backgroundColor_value_type = runtimeType(value_backgroundColor_value)
            if (TypeChecker.isColor(value_backgroundColor_value)) {
                valueSerializer.writeInt8(0 as int32)
                const value_backgroundColor_value_0  = value_backgroundColor_value as Color
                valueSerializer.writeInt32(TypeChecker.Color_ToNumeric(value_backgroundColor_value_0))
            }
            else if (RuntimeType.NUMBER == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(1 as int32)
                const value_backgroundColor_value_1  = value_backgroundColor_value as number
                valueSerializer.writeNumber(value_backgroundColor_value_1)
            }
            else if (RuntimeType.STRING == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(2 as int32)
                const value_backgroundColor_value_2  = value_backgroundColor_value as string
                valueSerializer.writeString(value_backgroundColor_value_2)
            }
            else if (RuntimeType.OBJECT == value_backgroundColor_value_type) {
                valueSerializer.writeInt8(3 as int32)
                const value_backgroundColor_value_3  = value_backgroundColor_value as Resource
                valueSerializer.writeResource(value_backgroundColor_value_3)
            }
        }
        const value_backgroundBlurStyle  = value.backgroundBlurStyle
        let value_backgroundBlurStyle_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyle_type = runtimeType(value_backgroundBlurStyle)
        valueSerializer.writeInt8(value_backgroundBlurStyle_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyle_type)) {
            const value_backgroundBlurStyle_value  = (value_backgroundBlurStyle as BlurStyle)
            valueSerializer.writeInt32(TypeChecker.BlurStyle_ToNumeric(value_backgroundBlurStyle_value))
        }
        const value_backgroundBlurStyleOptions  = value.backgroundBlurStyleOptions
        let value_backgroundBlurStyleOptions_type : int32 = RuntimeType.UNDEFINED
        value_backgroundBlurStyleOptions_type = runtimeType(value_backgroundBlurStyleOptions)
        valueSerializer.writeInt8(value_backgroundBlurStyleOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundBlurStyleOptions_type)) {
            const value_backgroundBlurStyleOptions_value  = value_backgroundBlurStyleOptions!
            valueSerializer.writeBackgroundBlurStyleOptions(value_backgroundBlurStyleOptions_value)
        }
        const value_backgroundEffect  = value.backgroundEffect
        let value_backgroundEffect_type : int32 = RuntimeType.UNDEFINED
        value_backgroundEffect_type = runtimeType(value_backgroundEffect)
        valueSerializer.writeInt8(value_backgroundEffect_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_backgroundEffect_type)) {
            const value_backgroundEffect_value  = value_backgroundEffect!
            valueSerializer.writeBackgroundEffectOptions(value_backgroundEffect_value)
        }
        const value_enableCascade  = value.enableCascade
        let value_enableCascade_type : int32 = RuntimeType.UNDEFINED
        value_enableCascade_type = runtimeType(value_enableCascade)
        valueSerializer.writeInt8(value_enableCascade_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableCascade_type)) {
            const value_enableCascade_value  = value_enableCascade!
            valueSerializer.writeBoolean(value_enableCascade_value)
        }
        const value_onDidAppear  = value.onDidAppear
        let value_onDidAppear_type : int32 = RuntimeType.UNDEFINED
        value_onDidAppear_type = runtimeType(value_onDidAppear)
        valueSerializer.writeInt8(value_onDidAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidAppear_type)) {
            const value_onDidAppear_value  = value_onDidAppear!
            valueSerializer.holdAndWriteCallback(value_onDidAppear_value)
        }
        const value_onDidDisappear  = value.onDidDisappear
        let value_onDidDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onDidDisappear_type = runtimeType(value_onDidDisappear)
        valueSerializer.writeInt8(value_onDidDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onDidDisappear_type)) {
            const value_onDidDisappear_value  = value_onDidDisappear!
            valueSerializer.holdAndWriteCallback(value_onDidDisappear_value)
        }
        const value_onWillAppear  = value.onWillAppear
        let value_onWillAppear_type : int32 = RuntimeType.UNDEFINED
        value_onWillAppear_type = runtimeType(value_onWillAppear)
        valueSerializer.writeInt8(value_onWillAppear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillAppear_type)) {
            const value_onWillAppear_value  = value_onWillAppear!
            valueSerializer.holdAndWriteCallback(value_onWillAppear_value)
        }
        const value_onWillDisappear  = value.onWillDisappear
        let value_onWillDisappear_type : int32 = RuntimeType.UNDEFINED
        value_onWillDisappear_type = runtimeType(value_onWillDisappear)
        valueSerializer.writeInt8(value_onWillDisappear_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_onWillDisappear_type)) {
            const value_onWillDisappear_value  = value_onWillDisappear!
            valueSerializer.holdAndWriteCallback(value_onWillDisappear_value)
        }
        const value_shadow  = value.shadow
        let value_shadow_type : int32 = RuntimeType.UNDEFINED
        value_shadow_type = runtimeType(value_shadow)
        valueSerializer.writeInt8(value_shadow_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_shadow_type)) {
            const value_shadow_value  = value_shadow!
            let value_shadow_value_type : int32 = RuntimeType.UNDEFINED
            value_shadow_value_type = runtimeType(value_shadow_value)
            if (RuntimeType.OBJECT == value_shadow_value_type) {
                valueSerializer.writeInt8(0 as int32)
                const value_shadow_value_0  = value_shadow_value as ShadowOptions
                valueSerializer.writeShadowOptions(value_shadow_value_0)
            }
            else if (TypeChecker.isShadowStyle(value_shadow_value)) {
                valueSerializer.writeInt8(1 as int32)
                const value_shadow_value_1  = value_shadow_value as ShadowStyle
                valueSerializer.writeInt32(TypeChecker.ShadowStyle_ToNumeric(value_shadow_value_1))
            }
        }
        const value_dateTimeOptions  = value.dateTimeOptions
        let value_dateTimeOptions_type : int32 = RuntimeType.UNDEFINED
        value_dateTimeOptions_type = runtimeType(value_dateTimeOptions)
        valueSerializer.writeInt8(value_dateTimeOptions_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_dateTimeOptions_type)) {
            const value_dateTimeOptions_value  = value_dateTimeOptions!
            valueSerializer.writeDateTimeOptions(value_dateTimeOptions_value)
        }
        const value_enableHoverMode  = value.enableHoverMode
        let value_enableHoverMode_type : int32 = RuntimeType.UNDEFINED
        value_enableHoverMode_type = runtimeType(value_enableHoverMode)
        valueSerializer.writeInt8(value_enableHoverMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHoverMode_type)) {
            const value_enableHoverMode_value  = value_enableHoverMode!
            valueSerializer.writeBoolean(value_enableHoverMode_value)
        }
        const value_hoverModeArea  = value.hoverModeArea
        let value_hoverModeArea_type : int32 = RuntimeType.UNDEFINED
        value_hoverModeArea_type = runtimeType(value_hoverModeArea)
        valueSerializer.writeInt8(value_hoverModeArea_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_hoverModeArea_type)) {
            const value_hoverModeArea_value  = (value_hoverModeArea as HoverModeAreaType)
            valueSerializer.writeInt32(TypeChecker.HoverModeAreaType_ToNumeric(value_hoverModeArea_value))
        }
        const value_enableHapticFeedback  = value.enableHapticFeedback
        let value_enableHapticFeedback_type : int32 = RuntimeType.UNDEFINED
        value_enableHapticFeedback_type = runtimeType(value_enableHapticFeedback)
        valueSerializer.writeInt8(value_enableHapticFeedback_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_enableHapticFeedback_type)) {
            const value_enableHapticFeedback_value  = value_enableHapticFeedback!
            valueSerializer.writeBoolean(value_enableHapticFeedback_value)
        }
    }
    writeWithThemeOptions(value: WithThemeOptions): void {
        let valueSerializer : Serializer = this
        const value_theme  = value.theme
        let value_theme_type : int32 = RuntimeType.UNDEFINED
        value_theme_type = runtimeType(value_theme)
        valueSerializer.writeInt8(value_theme_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_theme_type)) {
            const value_theme_value  = value_theme!
            valueSerializer.writeCustomTheme(value_theme_value)
        }
        const value_colorMode  = value.colorMode
        let value_colorMode_type : int32 = RuntimeType.UNDEFINED
        value_colorMode_type = runtimeType(value_colorMode)
        valueSerializer.writeInt8(value_colorMode_type as int32)
        if ((RuntimeType.UNDEFINED) != (value_colorMode_type)) {
            const value_colorMode_value  = (value_colorMode as ThemeColorMode)
            valueSerializer.writeInt32(TypeChecker.ThemeColorMode_ToNumeric(value_colorMode_value))
        }
    }
    writeLength(value: Length): void {
        const valueType  = runtimeType(value)
        this.writeInt8(valueType)
        if ((RuntimeType.NUMBER) == (valueType)) {
            this.writeFloat32(value as float32)
        }
        else if ((RuntimeType.STRING) == (valueType)) {
            this.writeString(value as string)
        }
        else if ((RuntimeType.OBJECT) == (valueType)) {
            this.writeInt32((value as Resource).id as int32)
        }
    }
}
