import { GlobalStateManager, memoEntry, StateContext, memo, IncrementalNode, MutableState,
    NodeAttach, mutableState, contextLocalValue, ReadonlyTreeNode, CONTEXT_ROOT_SCOPE,
    memoRoot, updateStateManager,
} from "@koalaui/runtime"
import { memo_foo } from "./stub"

@memo
function f(s: string) {
    let x = () => {
        console.log(s)
    }
    x()
    let y = (s: string) => {
        console.log(s)
    }
    y("she")
}

@memo
function bar(
    arg1: number,
    @memo arg2: (x: number) => number,
) {
    console.log(arg1, arg2(arg1))
}

@memo
function foo_wrapper() {
    ETSGLOBAL.f("he")
    memo_foo("hello")
    ETSGLOBAL.bar(1, (x: number): number => { return 3 + x; })
}

class StringerNode extends IncrementalNode {
    constructor(kind: int = 1) {
        super(kind)
    }
    data: string | undefined = undefined
}

@memo
function Stringer(
    arg: string,
    @memo
    content?: () => void
): void {
    NodeAttach((): StringerNode /* TODO: es2panda writes type Node here, which is template argument of NodeAttach */ => 
        new StringerNode(1) /* TODO: default constructor argument is lost */, (node: StringerNode): void => {
        node.data = arg
        console.log("I am recomputing with arg: ", arg)
        content ? content() : undefined /* TODO: gensym error */
    })
}

/* TODO: runtime error */
// const state = mutableState<Int>(17)
class StateWrapper {
    static state: MutableState<Int> = mutableState(17)
}

@memo
function demo(node: StringerNode): void {
    ETSGLOBAL.Stringer("First", () => {
        console.log("Content of the first")
        ETSGLOBAL.Stringer(`Second ${StateWrapper.state.value}`, () => {
            console.log("Content of the second")
            ETSGLOBAL.Stringer("Third")
        })
        ETSGLOBAL.Stringer("Fourth", () => {
            console.log("Content of the 4th")
            ETSGLOBAL.Stringer("5th")
        })
    })

    // This is to dump the complete managed incremental scope tree
    const scope = contextLocalValue(CONTEXT_ROOT_SCOPE) /* TODO: TypeArguments are lost for some reason */
    console.log(scope ? scope.toHierarchy() : undefined) /* TODO: gensym error */
}

function main() {
    const manager = GlobalStateManager.instance
    const state0 = manager.computableState<Int>((context: StateContext): Int => {
        memoEntry<void>(context, 0, ETSGLOBAL.foo_wrapper)
        return 20
    })
    console.log(state0.value)
    
    console.log(StateWrapper.state.value)

    // memoRoot is the entry point here.
    // It initializes the incremental runtime and computes the first frame.
    // Have a look at its implementation.
    const root = memoRoot<StringerNode>(new StringerNode(0), ETSGLOBAL.demo)
    console.log(root.value.toHierarchy()) // dump ui subtree

    updateStateManager() // Compute next frame.
    console.log(root.value.toHierarchy())

    StateWrapper.state.value = 19

    updateStateManager() // Compute the next frame.
    console.log(root.value.toHierarchy())
    console.log("-----END-----")
}
