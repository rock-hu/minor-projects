/*
 * Copyright (c) 2022-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { float64, int32, int64, uint32 } from "../common"
import { AnimationRange } from "./AnimationRange"
import { EasingCurve } from "./Easing"
export declare const DEFAULT_ANIMATION_DURATION: uint32
export declare interface TimeAnimation<Value> {
    readonly running: boolean
    getValue(time: int64): Value
    onStart(time: int64): void
    onPause(time: int64): void
}
export declare interface AnimationSpec {
    readonly duration: uint32
    readonly delay: uint32
    readonly easing: EasingCurve
    readonly onEdge: OnEdge
    readonly onPause: OnPause
    readonly iterations: int32 | undefined
    readonly onStart: (() => void) | undefined
    readonly onEnd: (() => void) | undefined
    readonly onReset: (() => void) | undefined
}
export declare class OnEdge {
    static Nothing: OnEdge
    static Reverse: OnEdge
    static Restart: OnEdge
    private constructor(name: string)
}
export declare class OnPause {
    static Nothing: OnPause
    static Reset: OnPause
    static Fade: OnPause
    private constructor(name: string)
}
export declare function constAnimation<Value>(value: Value): TimeAnimation<Value>
export declare function timeAnimation<Value>(compute: (time: int64) => Value, initialTime: int64 = 0): TimeAnimation<Value>
export declare function smoothAnimation(period: uint32, from: float64 = 0.0, to: float64 = 1.0): TimeAnimation<float64>
export declare function blinkAnimation(period: uint32, initialValue: boolean = false): TimeAnimation<boolean>
export declare function countAnimation(period: uint32, initialCount: int64 = 0): TimeAnimation<int64>
export declare function periodicAnimation<Value>(period: uint32, compute: (count: int64) => Value, initialCount: int64 = 0): TimeAnimation<Value>
export declare function periodicAnimationWithDelay<Value>(delay: uint32, period: uint32, compute: (count: int64) => Value, initialCount: int64 = 0): TimeAnimation<Value>
export declare function frameAnimation<Value>(frameTime: ReadonlyArray<uint32>, compute: (index: int64) => Value): TimeAnimation<Value> 
export declare function numberAnimation(spec: Partial<AnimationSpec>, to: float64 = 1.0, from: float64 = 0.0): TimeAnimation<float64>
export declare function animation<Value>(spec: Partial<AnimationSpec>, compute: AnimationRange<Value>, initialState: float64 = 0): TimeAnimation<Value>
export declare function transition<Value>(duration: uint32, easing: EasingCurve, compute: AnimationRange<Value>, initialState: int64 = 0): TimeAnimation<Value>
export declare function linearTransition<Value>(duration: uint32, compute: AnimationRange<Value>, initialState: int64 = 0): TimeAnimation<Value>