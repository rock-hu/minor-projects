/*
 * Copyright (c) 2022-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { memo, memo_intrinsic } from "../annotations"
import { uint32, KoalaCallsiteKey } from "../common"
import { IncrementalNode } from "../tree/IncrementalNode"
import { StateContext } from "../states/State"
@memo_intrinsic export declare function NodeAttach<Node extends IncrementalNode>(create: () => Node, @memo update: (node: Node) => void): void
@memo_intrinsic export declare function contextNode<T extends IncrementalNode>(kind: uint32 = 1, name?: string): T
export declare function NodeAttach<Node extends IncrementalNode>(__memo_context: StateContext, __memo_id: KoalaCallsiteKey, create: () => Node, update: (__memo_context: StateContext, __memo_id: KoalaCallsiteKey, node: Node) => void, reuseKey?: string): void
export declare function contextNode<T extends IncrementalNode>(__memo_context: StateContext, __memo_id: KoalaCallsiteKey, kind: uint32 = 1, name?: string): T
export declare class DataNode<Data> extends IncrementalNode {
    constructor(kind: uint32 = 1)
    static attach<Data>(kind: uint32, data: Data, onDataChange?: () => void): void
    static extract<Data>(kind: uint32, node: IncrementalNode): Data | undefined
}
