/*
 * Copyright (c) 2022-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { AtomicRef } from "../common"
export interface Changes {
    getChange<Value>(state: Object): AtomicRef<Value> | undefined
    clear(): void
}
export declare class Journal implements Changes {
    private readonly current: AtomicRef<Chunk>
    setMarker(): void
    addChange<Value>(state: Object, value: Value): void
    getChanges(): Changes | undefined
    getChange<Value>(state: Object): AtomicRef<Value> | undefined
    clear(): void
    getCachedArray<Item>(state: Object, array: Array<Item>): Array<Item>
}
declare class Chunk {
    readonly previous: AtomicRef<Chunk | undefined>
    readonly map: Map<Object, Object>
    get<Value>(state: Object): AtomicRef<Value> | undefined
}
