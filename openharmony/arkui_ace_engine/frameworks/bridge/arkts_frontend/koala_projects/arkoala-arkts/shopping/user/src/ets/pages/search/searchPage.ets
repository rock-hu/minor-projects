/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//import mediaQuery from '@ohos.mediaquery';
import router from '@ohos.router';
import { ExampleDataModel, SearchDataModel } from '../../model/searchModel';
import { exampleData, searchData } from '../../data/searchData'
import { BaseRouteParam, SearchParam } from '../../model/routeModel'

@Entry
@Component
export struct SearchPage {
  outerArray: Array<Number> = new Array<Number>(1.0, 2.0, 3.0, 4.0, 5.0, 6.0)
  innerArray: Array<Number> = new Array<Number>(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0)
  @State placeholder: string = ''
  @State width1: number = 0
  @State ratio: number = 1
  @State value: string = ''
  @State flag: boolean = true
  @State isShow: boolean = true
  @State showText: string = "开启全网热搜榜"
  @State exampleText: Array<ExampleDataModel> = exampleData
  @State active: boolean = false
  @State searchData: Array<SearchDataModel> = searchData
  @State searched: Array<string> = new Array<string>()
  @State isFlag: boolean = false
  @State swiperWidth: number = 30
  @State opacity1: number = 1
  @Consume('pathInfos') pathInfos: NavPathStack
  //listener = mediaQuery.matchMediaSync('(orientation:landscape)');

  onPageShow(){
    // const params = this.pathInfos.getParamByName('detailPage') as Record<number, string>; // 获取传递过来的参数对象
    const paramsArray = this.pathInfos.getParamByName('detailPage')
    const params: SearchParam = paramsArray.length > 0 ? (paramsArray[0] as Object as SearchParam) : ({ message: "None", num: 1, ratio: 1 } as SearchParam)
    this.placeholder = params.message
    this.width1 = params.num
    this.ratio = params.ratio
  }

  aboutToAppear() {
    // this.listener.on('change', this.onPortrait)
  }
/*
  async onPortrait(mediaQueryResult: mediaQuery.MediaQueryResult) {
    let result = mediaQueryResult.matches
    if (result) {
      this.width1 = 45
      this.swiperWidth = 30
    } else {
      this.width1 = 100
      this.swiperWidth = 60
    }
  }
*/
  build() {
    NavDestination() {
      Column() {
        Column() {
          Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {
            Image('/resources/icon/back.png')
              .width(25 * this.ratio)
              .aspectRatio(1)
              .objectFit(ImageFit.Contain)
              .onClick((e?: ClickEvent)=>{
                this.pathInfos.pop(true)
              })

            Flex({ justifyContent: FlexAlign.SpaceBetween }) {
              Column() {
                TextInput({ placeholder: this.placeholder, text: this.value })
                  .placeholderFont({ size: 10 * this.ratio } as Font)
                  .enterKeyType(EnterKeyType.Search)
                  .height(30 * this.ratio)
                  .backgroundColor(Color.White)
                  .width(170 * this.ratio)
                  .enabled(false)
              }

              Image('/resources/icon/camera.png')
                .width(20 * this.ratio)
                .aspectRatio(1)
                .objectFit(ImageFit.Contain)
            }
            .width('65%')
            .padding({ left: 10, right: 10 } as Padding)
            .border({ width: 1, color: Color.Orange, radius: 20 * this.ratio } as BorderOptions)
            .backgroundColor(Color.White)

            Column() {
              Text('搜索')
                .fontSize(13 * this.ratio)
                .fontColor(Color.White)
                .fontWeight(FontWeight.Bold)
            }
            .width('20%')
            .backgroundColor('#ec4b04')
            .border({ radius: 50 * this.ratio } as BorderOptions)
            .padding({ left: 5, right: 5, top: 10, bottom: 10 } as Padding)
          }
          .padding({ left: 10, right: 10 } as Padding)
          .margin({ top: 10, bottom: 10 } as Margin)
          .height(35 * this.ratio)

          Stack({ alignContent: Alignment.Top }) {
            if (!this.isFlag) {
              Column() {
                Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {
                  Text('搜索发现')
                    .fontSize(15 * this.ratio)
                    .fontWeight(FontWeight.Bold)
                  Image(this.flag ? '/resources/icon/show.png' : 'resources/icon/hide.png')
                    .width(25 * this.ratio)
                    .aspectRatio(1)
                    .objectFit(ImageFit.Contain)
                    .onClick((e?: ClickEvent) => {
                      this.flag = !this.flag
                    })
                }
                .margin(10)

                if (this.flag) {
                  Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center, wrap: FlexWrap.Wrap }) {
                    ForEach<ExampleDataModel>(this.exampleText, (item: ExampleDataModel, index: number) => {
                      Button() {
                        Text(item.exampleText)
                          .fontSize(12 * this.ratio)
                          .fontColor(Color.Black)
                          .margin({ left: 10, right: 10 } as Margin)
                      }
                      .margin(3)
                      .height(30 * this.ratio)
                      .backgroundColor('#f8f8f8')
                    }, (item: ExampleDataModel, index: number) => JSON.stringify(item))
                  }
                  .margin({ left: 10, right: 10 } as Margin)
                } else {
                  Column() {
                    Text('当前搜索发现隐藏')
                      .fontSize(15 * this.ratio)
                      .fontColor(Color.Gray)
                  }
                  .width('100%')
                  .margin({ top: 20, bottom: 15, left: 10, right: 10 } as Margin)
                }
                Column() {
                  Column() {
                    Row() {
                      Image(this.isShow ? '/resources/icon/show.png' : '/resources/icon/hide.png')
                        .width(25 * this.ratio)
                        .aspectRatio(1)
                        .objectFit(ImageFit.Contain)
                        .margin({ right: 5 } as Margin)
                      Text(this.showText)
                        .fontSize(10 * this.ratio)
                    }
                    .padding({ left: 10, right: 10 } as Padding)
                    .margin({ left: 10 } as Margin)
                    .border({ width: 1, radius: 15, color: Color.Gray } as BorderOptions)
                    .onClick((e?: ClickEvent) => {
                      this.isShow = !this.isShow
                      if (this.isShow == true) {
                        this.showText = '隐藏全网热搜'
                      } else {
                        this.showText = '开启全网热搜'
                      }
                    })
                  }
                  .width('100%')
                  .margin({ bottom: 10 } as Margin)
                  .alignItems(HorizontalAlign.Start)

                  List() {
                    ForEach<Number>(this.outerArray, (item: Number, index: number) => {
                      ListItem() {
                        Column() {
                          Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {
                            Flex({ justifyContent: FlexAlign.Start, alignItems: ItemAlign.Center }) {
                              Image('/resources/common/activity.png')
                                .width(30 * this.ratio)
                                .aspectRatio(1)
                                .objectFit(ImageFit.Contain)
                              Text('XX热搜')
                                .fontSize(15 * this.ratio)
                                .fontColor('#995528')
                                .fontWeight(FontWeight.Bold)
                                .margin({ left: 10, right: 10 } as Margin)
                              Text('今日最新消息全知道')
                                .fontSize(10 * this.ratio)
                                .fontColor('#8b5b2f')
                            }
                            .width('100%')
                          }
                          .padding({ left: 5, right: 5 } as Padding)

                          ForEach(this.innerArray, (item: Number, index: number) => {
                            Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {
                              Flex({ alignItems: ItemAlign.Center }) {
                                Flex({ justifyContent: FlexAlign.Center, alignItems: ItemAlign.Center }) {
                                  Text(`${item.valueOf()}`)
                                    .fontSize(10 * this.ratio)
                                    .fontColor(Color.White)
                                    .fontWeight(FontWeight.Bold)
                                }
                                .width(15 * this.ratio)
                                .aspectRatio(1)
                                .border({ radius: 3 * this.ratio } as BorderOptions)
                                .margin({ right: 5 } as Margin)
                                .backgroundColor('#ceb198')

                                Text('XX公司5G手机发布会议于xx日开始')
                                  .fontSize(12 * this.ratio)
                              }

                              Image(`${Math.round(Math.random()) ? '/resources/icon/up.png' : '/resources/icon/down.png'}`)
                                .width(10 * this.ratio)
                                .height(15 * this.ratio)
                                .objectFit(ImageFit.Contain)
                            }
                            .padding({ left: 5, right: 5 } as Padding)
                            .width('100%')
                            .height(40 * this.ratio)
                          }, (item: Number, index: number) => JSON.stringify(item.valueOf()))
                        }
                        .width('100%')
                      }
                      .border({ radius: 15 * this.ratio } as BorderOptions)
                      .margin({ left: 5, right: 5 } as Margin)
                      .padding({ top: 5 } as Padding)
                      .backgroundColor(Color.White)
                      .width(`60%`)
                    }, (item: Number, index: number) => JSON.stringify(item.valueOf()))
                  }
                  .listDirection(Axis.Horizontal)
                  .height('70%')
                  .width('95%')
                  .margin({ left: 5, right: 5 } as Margin)
                  .visibility(this.isShow ? Visibility.Visible : Visibility.Hidden)
                }
                .padding({ top: 10, bottom: 0 } as Padding)
                .alignItems(HorizontalAlign.Start)
                .width('100%')
              }
              .alignItems(HorizontalAlign.Start)
              .width('100%')
            }
            if (this.isFlag) {
              Column() {
                ForEach<string>(this.searched, (item: string, index: number) => {
                  Flex({ justifyContent: FlexAlign.SpaceBetween, alignItems: ItemAlign.Center }) {
                    Row() {
                      Image('/resources/icon/search.png')
                        .width(25 * this.ratio)
                        .aspectRatio(1)
                        .objectFit(ImageFit.Contain)
                      Text(item)
                        .fontSize(18 * this.ratio)
                        .margin({ left: 15 } as Margin)
                    }

                    Image('/resources/icon/leftTop.png')
                      .width(25 * this.ratio)
                      .aspectRatio(1)
                      .objectFit(ImageFit.Contain)
                  }
                  .width('100%')
                  .height(50 * this.ratio)
                  .padding({ left: 10, right: 10 } as Padding)
                  .onClick((e?: ClickEvent) => {
                    this.isFlag = false
                    this.value = item
                  })
                }, (item: string, index: number) => JSON.stringify(item))
              }
            }
          }
        }
        .width('100%')
      }
      .width('100%')
      .backgroundColor('#F9F9F9')
      .backgroundImage('/resources/common/bgImg.png', ImageRepeat.NoRepeat)
      .backgroundImageSize({ width: '100%', height: '100%' } as SizeOptions)
    }.hideTitleBar(true)
  }

}
