# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")

# build core sources
template("ace_core_interfaces_native_node") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    subsystem_name = ace_engine_subsystem
    part_name = ace_engine_part
    defines += invoker.defines
    configs = [ "$ace_root:ace_config" ]

    if (ace_engine_feature_enable_point_light) {
      defines += [ "POINT_LIGHT_ENABLE" ]
    }

    # add common source file needed by all product platform here
    sources = [
      "node/alphabet_indexer_modifier.cpp",
      "node/badge_modifier.cpp",
      "node/blank_modifier.cpp",
      "node/button_modifier.cpp",
      "node/calendar_picker_modifier.cpp",
      "node/canvas_rendering_context_2d_modifier.cpp",
      "node/checkboxgroup_modifier.cpp",
      "node/column_modifier.cpp",
      "node/column_split_modifier.cpp",
      "node/common_shape_modifier.cpp",
      "node/counter_modifier.cpp",
      "node/custom_dialog_model.cpp",
      "node/data_panel_modifier.cpp",
      "node/divider_modifier.cpp",
      "node/drag_adapter_impl.cpp",
      "node/extension_companion_node.cpp",
      "node/extension_custom_node.cpp",
      "node/flex_modifier.cpp",
      "node/frame_node_modifier.cpp",
      "node/gauge_modifier.cpp",
      "node/grid_col_modifier.cpp",
      "node/grid_item_modifier.cpp",
      "node/grid_modifier.cpp",
      "node/grid_row_modifier.cpp",
      "node/hyperlink_modifier.cpp",
      "node/image_animator_modifier.cpp",
      "node/line_modifier.cpp",
      "node/linear_indicator_modifier.cpp",
      "node/marquee_modifier.cpp",
      "node/menu_item_modifier.cpp",
      "node/menu_modifier.cpp",
      "node/nav_destination_modifier.cpp",
      "node/nav_router_modifier.cpp",
      "node/navigation_modifier.cpp",
      "node/navigator_modifier.cpp",
      "node/node_adapter_impl.cpp",
      "node/node_animate.cpp",
      "node/node_api.cpp",
      "node/node_canvas_modifier.cpp",
      "node/node_checkbox_modifier.cpp",
      "node/node_common_modifier.cpp",
      "node/node_container_modifier.cpp",
      "node/node_container_span_modifier.cpp",
      "node/node_content_modifier.cpp",
      "node/node_date_picker_modifier.cpp",
      "node/node_drag_modifier.cpp",
      "node/node_folder_stack_modifier.cpp",
      "node/node_gesture_modifier.cpp",
      "node/node_image_modifier.cpp",
      "node/node_image_span_modifier.cpp",
      "node/node_list_item_group_modifier.cpp",
      "node/node_list_item_modifier.cpp",
      "node/node_list_modifier.cpp",
      "node/node_loading_progress_modifier.cpp",
      "node/node_modifiers.cpp",
      "node/node_refresh_modifier.cpp",
      "node/node_relative_container_modifier.cpp",
      "node/node_scroll_bar_modifier.cpp",
      "node/node_scroll_modifier.cpp",
      "node/node_slider_modifier.cpp",
      "node/node_span_modifier.cpp",
      "node/node_stack_modifier.cpp",
      "node/node_swiper_modifier.cpp",
      "node/node_symbol_glyph_modifier.cpp",
      "node/node_symbol_span_modifier.cpp",
      "node/node_text_area_modifier.cpp",
      "node/node_text_input_modifier.cpp",
      "node/node_text_modifier.cpp",
      "node/node_textpicker_modifier.cpp",
      "node/node_timepicker_modifier.cpp",
      "node/node_toggle_modifier.cpp",
      "node/panel_modifier.cpp",
      "node/particle_modifier.cpp",
      "node/path_modifier.cpp",
      "node/pattern_lock_modifier.cpp",
      "node/polygon_modifier.cpp",
      "node/polyline_modifier.cpp",
      "node/progress_modifier.cpp",
      "node/qrcode_modifier.cpp",
      "node/radio_modifier.cpp",
      "node/rating_modifier.cpp",
      "node/rect_modifier.cpp",
      "node/render_node_modifier.cpp",
      "node/rich_editor_modifier.cpp",
      "node/row_modifier.cpp",
      "node/row_split_modifier.cpp",
      "node/scrollable_modifier.cpp",
      "node/scroller_modifier.cpp",
      "node/search_modifier.cpp",
      "node/select_modifier.cpp",
      "node/shape_modifier.cpp",
      "node/side_bar_container_modifier.cpp",
      "node/stepper_item_modifier.cpp",
      "node/swiper_controller_modifier.cpp",
      "node/tab_content_modifier.cpp",
      "node/tabs_modifier.cpp",
      "node/text_clock_modifier.cpp",
      "node/text_timer_modifier.cpp",
      "node/util_modifier.cpp",
      "node/video_modifier.cpp",
      "node/view_model.cpp",
      "node/water_flow_modifier.cpp",
    ]
    deps = [ "$ace_root/frameworks/core/components/theme:build_theme_code" ]
    if (is_arkui_x) {
      deps += [
        "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client_static",
        "//third_party/bounds_checking_function:libsec_static",
      ]
    }
    include_dirs = [
      "${ace_root}/interfaces/inner_api/ace",
      "${ace_root}/interfaces/native",
      "${ace_root}/interfaces/native/node",
    ]

    if (defined(config.model_component_support) &&
        config.model_component_support) {
      sources += [ "node/node_component3d_modifier.cpp" ]
    }

    if (defined(config.xcomponent_components_support) &&
        config.xcomponent_components_support) {
      sources += [ "node/node_xcomponent_modifier.cpp" ]
    }

    if (defined(config.form_components_support) &&
        config.form_components_support) {
      sources += [ "node/form_component_modifier.cpp" ]
    }

    if (defined(config.plugin_components_support) &&
        config.plugin_components_support) {
      sources += [ "node/plugin_modifier.cpp" ]
    }
    external_deps = [
      "graphic_2d:drawing_napi_impl",
      "graphic_2d:librender_service_client",
    ]
    if (defined(config.model_component_support) &&
        config.model_component_support) {
      external_deps += [ "graphic_3d:lib3dWidgetAdapter" ]
    }
    if (use_hilog) {
      external_deps += [ "hilog:libhilog" ]
    }

    cflags_cc = []
    cflags_cc += invoker.cflags_cc
  }
}

foreach(item, ace_platforms) {
  ace_core_interfaces_native_node(
      "ace_core_interfaces_native_node_" + item.name) {
    if (defined(item.config)) {
      config = item.config
    } else {
      config = {
      }
    }

    if (defined(config.defines)) {
      defines = config.defines
    } else {
      defines = []
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    } else {
      cflags_cc = []
    }
  }
}
