# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
native_root = "${ace_root}/frameworks/core/interfaces/native"
import("$native_root/common_sources.gni")
import("$native_root/generated/interface/node_interface.gni")

config("ace_core_interfaces_native_node_config") {
  include_dirs =
      [ "${ace_root}/frameworks/core/interfaces/native/generated/interface" ]

  # TODO: this is for zero sized generated structs in arkoala_api.here
  cflags_cc = [ "-Wno-extern-c-compat" ]
}

rebased_generated_sources = []
foreach(src, generated_sources) {
  rebased_generated_sources += [ native_root + "/" + src ]
}
rebased_common_sources = []
foreach(src, common_sources) {
  rebased_common_sources += [ native_root + "/" + src ]
}

template("ace_core_interfaces_native") {
  ohos_source_set(target_name) {
    subsystem_name = ace_engine_subsystem
    part_name = ace_engine_part
    defines = invoker.defines
    config = invoker.config
    cflags_cc = invoker.cflags_cc
    cflags_cc += [ "-Wno-unused-variable" ]
    external_deps = []
    configs = [ "$ace_root:ace_config" ]
    configs += [ ":ace_core_interfaces_native_node_config" ]

    if (ace_engine_feature_enable_point_light) {
      defines += [ "POINT_LIGHT_ENABLE" ]
    }

    # add common source file needed by all product platform here
    sources = []
    sources += rebased_common_sources
    if (defined(config.web_components_support) &&
        config.web_components_support && !is_arkui_x) {
      defines += [ "WEB_SUPPORTED" ]
      external_deps += [
        "ability_runtime:app_context",
        "webview:libnweb",
      ]
    }
    if (include_generated_sources) {
      sources += rebased_generated_sources
      defines += [ "INCLUDE_GENERATED_SOURCES" ]
    }
    deps = [ "$ace_root/frameworks/core/components/theme:build_theme_code" ]

    if (defined(config.model_component_support) &&
        config.model_component_support) {
      external_deps += [ "graphic_3d:lib3dWidgetAdapter" ]
    }

    if (use_hilog) {
      external_deps += [ "hilog:libhilog" ]
    }

    external_deps += [
      "graphic_2d:drawing_napi_impl",
      "graphic_2d:librender_service_client",
    ]

    if (defined(config.window_scene_support) && config.window_scene_support) {
      external_deps += [
        "ability_base:want",
        "window_manager:scene_session",
        "window_manager:scene_session_manager",
      ]
    }
  }
}

foreach(item, ace_platforms) {
  ace_core_interfaces_native("ace_core_interfaces_native_" + item.name) {
    if (defined(item.config)) {
      config = item.config
    } else {
      config = {
      }
    }

    if (defined(config.defines)) {
      defines = config.defines
    } else {
      defines = []
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    } else {
      cflags_cc = []
    }
  }
}
