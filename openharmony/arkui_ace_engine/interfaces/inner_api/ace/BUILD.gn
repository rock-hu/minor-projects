# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("//foundation/arkui/ace_engine/build/uicast.gni")

config("uicontent_public_config") {
  include_dirs = [
    "${ace_root}/interfaces/inner_api/ace",
    "${ace_root}/interfaces/inner_api/ace/ai/",
    "${ace_root}/interfaces/inner_api/ace/share/",
    "$ace_root/interfaces/inner_api/ace_kit/include",
  ]
  if (use_hilog) {
    defines = [ "USE_HILOG" ]
  }
}

config("uicontent_config") {
  visibility = [ ":*" ]
  if (use_mingw_win || use_mac || use_linux) {
    include_dirs =
        [ "//foundation/graphic/graphic_2d/rosen/modules/platform/utils" ]
  }

  if (!use_mingw_win && !use_mac && !use_linux) {
    defines = uicast_configs.uicast_defines
  }
}

config("preview_config") {
  visibility = [ ":*" ]
  if (use_mingw_win) {
    defines = [
      "PREVIEW",
      "WINDOWS_PLATFORM",
    ]
  } else if (use_mac) {
    defines = [
      "PREVIEW",
      "MAC_PLATFORM",
    ]
  } else if (use_linux) {
    defines = [
      "PREVIEW",
      "LINUX_PLATFORM",
    ]
  }
}

ohos_shared_library("ace_uicontent") {
  if (current_os == "ohos") {
    sanitize = {
      integer_overflow = true
      boundary_sanitize = true
      debug = ace_sanitize_debug
    }
  }

  public_configs = [ ":uicontent_public_config" ]
  branch_protector_ret = "pac_ret"

  configs = [
    ":uicontent_config",
    ":preview_config",
    "$ace_root:ace_config",
    "$ace_root:ace_coverage_config",
  ]

  sources = [
    "${ace_root}/interfaces/inner_api/ace/declarative_module_preloader.cpp",
    "${ace_root}/interfaces/inner_api/ace/hot_reloader.cpp",
    "${ace_root}/interfaces/inner_api/ace/navigation_controller.cpp",
    "${ace_root}/interfaces/inner_api/ace/serializeable_object.cpp",
    "${ace_root}/interfaces/inner_api/ace/ui_content.cpp",
    "${ace_root}/interfaces/inner_api/ace/ui_event.cpp",
    "${ace_root}/interfaces/inner_api/ace/ui_event_func.cpp",
  ]
  external_deps = [ "hilog:libhilog" ]

  if (current_os == "ohos") {
    external_deps += [ "c_utils:utils" ]
  } else if (is_arkui_x || use_mingw_win || use_mac || use_linux) {
    include_dirs = [ c_utils_header_path ]
  }

  if (!use_mingw_win && !use_mac && !use_linux &&
      defined(uicast_configs.uicast_enable) && uicast_configs.uicast_enable) {
    sources +=
        [ "${ace_root}/interfaces/inner_api/ace/uicast/uicast_subscriber.cpp" ]
    external_deps += [
      "ability_base:want",
      "common_event_service:cesfwk_innerkits",
    ]
  }
  deps = [ ":ace_forward_compatibility" ]
  public_external_deps = external_deps
  subsystem_name = ace_engine_subsystem
  innerapi_tags = [ "platformsdk_indirect" ]
  part_name = ace_engine_part
}

ohos_shared_library("ace_forward_compatibility") {
  include_dirs = [ "${ace_root}/frameworks" ]

  public_configs = [ ":uicontent_public_config" ]
  branch_protector_ret = "pac_ret"

  sources =
      [ "${ace_root}/interfaces/inner_api/ace/ace_forward_compatibility.cpp" ]

  configs = [
    ":preview_config",
    "$ace_root:ace_config",
    "$ace_root:ace_coverage_config",
  ]

  external_deps = [ "hilog:libhilog" ]

  if (current_os == "ohos") {
    defines = [ "OHOS_PLATFORM" ]
    external_deps += [ "init:libbegetutil" ]
  }

  subsystem_name = ace_engine_subsystem
  innerapi_tags = [ "platformsdk_indirect" ]
  part_name = ace_engine_part
}
