# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")

template("napi_dragcontroller_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    defines += [ "USE_ARK_ENGINE" ]
    cflags_cc += invoker.cflags_cc
    configs = [ "$ace_root/interfaces/napi/kits:ace_napi_config" ]

    sources = [ "js_drag_controller.cpp" ]
    deps = [ "../utils:napi_utils_static_${platform}" ]
    external_deps = []
    if (defined(config.libace_target)) {
      deps += [ config.libace_target ]
    }

    if (platform != "" && is_arkui_x) {
      deps += [ "$crossplatform_plugin_root/libs/napi:napi_$platform" ]
    } else {
      external_deps += [
        "ets_runtime:libark_jsruntime",
        "napi:ace_napi",
      ]
    }
    if (use_hilog) {
      external_deps += [ "hilog:libhilog" ]
    }
    if (is_arkui_x) {
      if (defined(config.pixel_map_support) && config.pixel_map_support) {
        configs += [ "$crossplatform_multimedia_root/image_framework/interfaces/innerkits:image_external_config" ]
      }
    } else {
      if (defined(config.pixel_map_support)) {
        external_deps += [
          "image_framework:image",
          "image_framework:image_native",
        ]
      }
    }

    if (!is_arkui_x && defined(config.enable_drag_framework) &&
        config.enable_drag_framework) {
      external_deps += [
        "device_status:devicestatus_client",
        "graphic_2d:librender_service_client",
      ]
    }

    if (defined(config.enable_drag_framework) && config.enable_drag_framework) {
      if (defined(global_parts_info.distributeddatamgr_udmf)) {
        external_deps += [ "udmf:udmf_client" ]
        external_deps += [ "udmf:udmf_data_napi" ]
        deps += [ "$ace_root/frameworks/core:ace_container_scope" ]
      }
      external_deps += [ "kv_store:distributeddata_inner" ]
    }

    subsystem_name = ace_engine_subsystem
    part_name = ace_engine_part
  }
}

foreach(item, ace_platforms) {
  napi_dragcontroller_static("dragcontroller_static_" + item.name) {
    defines = []
    cflags_cc = []
    config = {
    }
    platform = item.name

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
