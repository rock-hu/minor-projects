# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/ets_frontend/es2abc_config.gni")
import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("//foundation/arkui/ace_engine/adapter/preview/build/config.gni")
import("//foundation/arkui/ace_engine/build/ace_gen_obj.gni")

es2abc_gen_abc("gen_measure_abc") {
  src_js = rebase_path("measure.js")
  dst_file = rebase_path(target_out_dir + "/measure.abc")
  in_puts = [ "measure.js" ]
  out_puts = [ target_out_dir + "/measure.abc" ]
  extra_args = [ "--module" ]
}

base_output_path = get_label_info(":gen_measure_abc", "target_out_dir")
measure_obj_path = base_output_path + "/measure.o"
measure_abc_obj_path = base_output_path + "/measure_abc.o"

gen_obj("measure_js") {
  input = "measure.js"
  if (use_mac || use_mingw_win || use_linux || target_os == "ios") {
    measure_obj_path = base_output_path + "/measure.c"
  }
  output = measure_obj_path
  snapshot_dep = []
}

gen_obj("measure_abc") {
  input = get_label_info(":gen_measure_abc", "target_out_dir") + "/measure.abc"
  if (use_mac || use_mingw_win || use_linux || target_os == "ios") {
    measure_abc_obj_path = base_output_path + "/measure_abc.c"
  }
  output = measure_abc_obj_path
  snapshot_dep = [ ":gen_measure_abc" ]
}

template("napi_measure_static") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc
    configs = [ "$ace_root/interfaces/napi/kits:ace_napi_config" ]

    sources = [ "js_measure.cpp" ]
    deps = [
      ":gen_obj_src_measure_abc",
      ":gen_obj_src_measure_js",
    ]
    external_deps = []
    if (platform != "" && is_arkui_x) {
      deps += [ "//plugins/libs/napi:napi_$platform" ]
    } else {
      external_deps += [ "napi:ace_napi" ]
    }
    deps += [ "../utils:napi_utils_static_${platform}" ]

    if (defined(config.libace_target)) {
      deps += [ config.libace_target ]
    }

    subsystem_name = "arkui"
    part_name = ace_engine_part
  }
}

foreach(item, ace_platforms) {
  napi_measure_static("measure_static_" + item.name) {
    defines = []
    cflags_cc = []
    config = {
    }
    platform = item.name

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
