/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { assertEqual, assertContain, assertFalse, assertTrue } from '@ohos.arkui.componentTest';
import { TestCaseLevel, defineTest } from '@ohos.arkui.componentTest'
import { Tester, Component, Matcher } from '@ohos.arkui.componentTest'

export default async function shapeStrokeDashArrayTest() {
  /*
   * Shape组件 strokeDashArray属性
   * 找到画面id为shapeStrokeDashArray1,shapeStrokeDashArray2的Shape组件
   * 找到画面文本为ShapeStrokeDashArray的Button组件
   * 获取shape1的strokeDashArray属性与期待值[1,2]比对
   * 点击button,变更shape1的strokeDashArray属性值为['6','8']
   * 获取shape1的strokeDashArray属性与期待值['6','8']比对
   * 获取shape2的strokeDashArray属性与期待值['3']比对
   */
  defineTest('shapeStrokeDashArrayTestDemo', {
    level: TestCaseLevel.LEVEL0
  }, async () => {
    console.log("shapeStrokeDashArrayTestDemo running")
    let driver: Tester = Tester.create()
    let shape1: Component = await driver.findComponent(Matcher.create().id('shapeStrokeDashArray1').enabled(true))
    let shape2: Component = await driver.findComponent(Matcher.create().id('shapeStrokeDashArray2').enabled(true))
    let button: Component = await driver.findComponent(Matcher.create().text('ShapeStrokeDashArray').enabled(true))

    let strokeDashArray1: string = await shape1.getInspectorInfo()
    assertEqual(JSON.parse(strokeDashArray1).$attrs.strokeDashArray[0], '1.00vp')
    assertEqual(JSON.parse(strokeDashArray1).$attrs.strokeDashArray[1], '2.00vp')

    await button.tap()
    let strokeDashArray2: string = await shape1.getInspectorInfo()
    assertEqual(JSON.parse(strokeDashArray2).$attrs.strokeDashArray[0], '6.00vp')
    assertEqual(JSON.parse(strokeDashArray2).$attrs.strokeDashArray[1], '8.00vp')

    let strokeDashArray3: string = await shape2.getInspectorInfo()
    assertEqual(JSON.parse(strokeDashArray3).$attrs.strokeDashArray[0], $r('app.string.stroke_width'))
  }, 0)
}