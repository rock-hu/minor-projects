# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//foundation/arkui/ace_engine/ace_config.gni")
import("//foundation/arkui/ace_engine/build/ace_ext.gni")
import("//foundation/arkui/ace_engine/test/unittest/ace_unittest.gni")

ace_unittest("view_stack_processor_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "view_stack_processor_test_ng.cpp" ]
}

ace_unittest("distributed_ui_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "distributed_ui_test_ng.cpp" ]
}

ace_unittest("frame_node_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [
    "frame_node_test_ng.cpp",
    "frame_node_test_ng_coverage.cpp",
    "frame_node_test_ng_coverage_new.cpp",
    "frame_node_test_ng_new.cpp",
    "frame_node_test_ng_v3.cpp",
  ]
}

ace_unittest("frame_node_drop_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "frame_node_drop_test_ng.cpp" ]
}

ace_unittest("geometry_node_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "geometry_node_test_ng.cpp" ]
}

ace_unittest("inspector_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "inspector_test_ng.cpp" ]
}

ace_unittest("ui_node_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "ui_node_test_ng.cpp" ]
}

ace_unittest("view_abstract_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [
    "view_abstract_test_ng.cpp",
    "view_abstract_test_ng_for_property_config.cpp",
    "view_abstract_test_ng_for_visual_effect.cpp",
    "view_abstract_test_ng_new.cpp",
  ]
}

ace_unittest("view_abstract_test_resetposition_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "view_abstract_test_resetposition_ng.cpp" ]
}

ace_unittest("view_full_update_model_ng_test") {
  type = "new"
  module_output = "basic"
  sources = [ "view_full_update_model_ng_test.cpp" ]
}

ace_unittest("view_partial_update_model_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "view_partial_update_model_test_ng.cpp" ]
}

ace_unittest("observer_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "observer_test_ng.cpp" ]
}

ace_unittest("view_abstract_model_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "view_abstract_model_test_ng.cpp" ]
}

ace_unittest("short_cuts_little_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "short_cuts_little_test_ng.cpp" ]
}

ace_unittest("short_cuts_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "short_cuts_test_ng.cpp" ]
}

ace_unittest("extension_handler_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "extension_handler_test_ng.cpp" ]
}

ace_unittest("node_render_status_monitor_test_ng") {
  type = "new"
  module_output = "basic"
  sources = [ "node_render_status_monitor_test_ng.cpp" ]
}

group("core_base_unittest") {
  testonly = true
  deps = [
    ":distributed_ui_test_ng",
    ":extension_handler_test_ng",
    ":frame_node_drop_test_ng",
    ":frame_node_test_ng",
    ":geometry_node_test_ng",
    ":inspector_test_ng",
    ":node_render_status_monitor_test_ng",
    ":observer_test_ng",
    ":short_cuts_little_test_ng",
    ":short_cuts_test_ng",
    ":ui_node_test_ng",
    ":view_abstract_model_test_ng",
    ":view_abstract_test_ng",
    ":view_full_update_model_ng_test",
    ":view_partial_update_model_test_ng",
    ":view_stack_processor_test_ng",
  ]

  if (ace_engine_feature_enable_split_mode &&
      defined(vendor_configs.ace_engine_advanced_split_mode_base_test_ng)) {
    deps += vendor_configs.ace_engine_advanced_split_mode_base_test_ng
  }
}
